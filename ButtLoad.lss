
ButtLoad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000356a  0000361e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000356a  00000000  00000000  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b4  00800104  00800104  00003622  2**0
                  ALLOC
  3 .noinit       00000000  008002b8  008002b8  000036ab  2**0
                  CONTENTS
  4 .eeprom       00000089  00810000  00810000  00003622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .stab         000003e4  00000000  00000000  000036ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000000fb  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 0000012c  00000000  00000000  00003b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d6a  00000000  00000000  00003cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000420d  00000000  00000000  00004a21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000101b  00000000  00000000  00008c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000033c8  00000000  00000000  00009c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000114f  00000000  00000000  0000d011  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1e 02 	jmp	0x43c <__init>
       4:	0c 94 39 02 	jmp	0x472 <__bad_interrupt>
       8:	0c 94 27 1a 	jmp	0x344e <__vector_2>
       c:	0c 94 9f 03 	jmp	0x73e <__vector_3>
      10:	0c 94 e3 0b 	jmp	0x17c6 <__vector_4>
      14:	0c 94 00 08 	jmp	0x1000 <__vector_5>
      18:	0c 94 39 02 	jmp	0x472 <__bad_interrupt>
      1c:	0c 94 39 02 	jmp	0x472 <__bad_interrupt>
      20:	0c 94 39 02 	jmp	0x472 <__bad_interrupt>
      24:	0c 94 27 0c 	jmp	0x184e <__vector_9>
      28:	0c 94 29 1a 	jmp	0x3452 <__vector_10>
      2c:	0c 94 39 02 	jmp	0x472 <__bad_interrupt>
      30:	0c 94 39 02 	jmp	0x472 <__bad_interrupt>
      34:	0c 94 69 0b 	jmp	0x16d2 <__vector_13>
      38:	0c 94 39 02 	jmp	0x472 <__bad_interrupt>
      3c:	0c 94 39 02 	jmp	0x472 <__bad_interrupt>
      40:	0c 94 39 02 	jmp	0x472 <__bad_interrupt>
      44:	0c 94 62 09 	jmp	0x12c4 <__vector_17>
      48:	0c 94 39 02 	jmp	0x472 <__bad_interrupt>
      4c:	0c 94 39 02 	jmp	0x472 <__bad_interrupt>
      50:	0c 94 39 02 	jmp	0x472 <__bad_interrupt>
      54:	0c 94 39 02 	jmp	0x472 <__bad_interrupt>
      58:	0c 94 ad 08 	jmp	0x115a <__vector_22>

0000005c <SIFONames>:
      5c:	53 54 4f 52 41 47 45 20 53 49 5a 45 53 00 00 56     STORAGE SIZES..V
      6c:	49 45 57 20 44 41 54 41 20 54 41 47 53 00           IEW DATA TAGS.

0000007a <USISpeeds>:
      7a:	20 35 37 31 35 33 20 48 5a 00 20 38 36 37 33 38      57153 HZ. 86738
      8a:	20 48 5a 00 31 31 33 34 32 37 20 48 5a 00 32 31      HZ.113427 HZ.21
      9a:	30 36 35 31 20 48 5a 00                             0651 HZ.

000000a2 <ProgOptions>:
      a2:	0b 01 ff 00 ef 00 df 00 cf 00 bb 00 b0 00           ..............

000000b0 <PRG_C>:
      b0:	45 52 41 53 45 20 4f 4e 4c 59 00                    ERASE ONLY.

000000bb <PRG_FL>:
      bb:	46 55 53 45 20 41 4e 44 20 4c 4f 43 4b 20 42 59     FUSE AND LOCK BY
      cb:	54 45 53 00                                         TES.

000000cf <PRG_L>:
      cf:	4c 4f 43 4b 20 42 59 54 45 53 20 4f 4e 4c 59 00     LOCK BYTES ONLY.

000000df <PRG_F>:
      df:	46 55 53 45 20 42 59 54 45 53 20 4f 4e 4c 59 00     FUSE BYTES ONLY.

000000ef <PRG_DE>:
      ef:	44 41 54 41 20 41 4e 44 20 45 45 50 52 4f 4d 00     DATA AND EEPROM.

000000ff <PRG_E>:
      ff:	45 45 50 52 4f 4d 20 4f 4e 4c 59 00                 EEPROM ONLY.

0000010b <PRG_D>:
     10b:	44 41 54 41 20 4f 4e 4c 59 00                       DATA ONLY.

00000115 <SettingFunctionPtrs>:
     115:	e7 05 3a 06 72 06 be 06 b4 05 8b 07                 ..:.r.......

00000121 <SettingFunctionNames>:
     121:	7e 01 70 01 5f 01 4d 01 40 01 2d 01                 ~.p._.M.@.-.

0000012d <SFunc_GOBOOTLOADER>:
     12d:	4a 55 4d 50 20 54 4f 20 42 4f 4f 54 4c 4f 41 44     JUMP TO BOOTLOAD
     13d:	45 52 00                                            ER.

00000140 <SFunc_CLEARMEM>:
     140:	43 4c 45 41 52 20 4d 45 4d 4f 52 59 00              CLEAR MEMORY.

0000014d <SFunc_SETAUTOSLEEPTO>:
     14d:	53 45 54 20 53 4c 45 45 50 20 54 49 4d 45 4f 55     SET SLEEP TIMEOU
     15d:	54 00                                               T.

0000015f <SFunc_SETFIRMMINOR>:
     15f:	53 45 54 20 46 49 52 4d 20 56 45 52 53 49 4f 4e     SET FIRM VERSION
	...

00000170 <SFunc_SETSPISPEED>:
     170:	53 45 54 20 53 50 49 20 53 50 45 45 44 00           SET SPI SPEED.

0000017e <SFunc_SETCONTRAST>:
     17e:	53 45 54 20 43 4f 4e 54 52 41 53 54 00              SET CONTRAST.

0000018b <MainFunctionPtrs>:
     18b:	f8 03 82 05 42 04 11 04 35 07 c3 03 21 07           ....B...5...!.

00000199 <MainFunctionNames>:
     199:	f0 01 e5 01 d9 01 ca 01 bb 01 b2 01 a7 01           ..............

000001a7 <Func_SLEEP>:
     1a7:	53 4c 45 45 50 20 4d 4f 44 45 00                    SLEEP MODE.

000001b2 <Func_SETTINGS>:
     1b2:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

000001bb <Func_PRGMSTOREINFO>:
     1bb:	44 41 54 41 53 54 4f 52 45 20 49 4e 46 4f 00        DATASTORE INFO.

000001ca <Func_PRGMDATAFLASH>:
     1ca:	44 41 54 41 46 4c 41 53 48 20 50 52 47 4d 00        DATAFLASH PRGM.

000001d9 <Func_PRGMAVR>:
     1d9:	50 52 4f 47 52 41 4d 20 41 56 52 00                 PROGRAM AVR.

000001e5 <Func_STOREPRGM>:
     1e5:	53 54 4f 52 45 20 50 52 47 4d 00                    STORE PRGM.

000001f0 <Func_ISPPRGM>:
     1f0:	41 56 52 49 53 50 20 4d 4f 44 45 00                 AVRISP MODE.

000001fc <AboutTextPtrs>:
     1fc:	27 02 22 02 13 02 04 02                             '.".....

00000204 <CopyRight>:
     204:	3c 43 3e 20 32 30 30 36 20 2d 20 47 50 4c 00        <C> 2006 - GPL.

00000213 <AuthorName>:
     213:	42 59 20 44 45 41 4e 20 43 41 4d 45 52 41 00        BY DEAN CAMERA.

00000222 <VersionInfo>:
     222:	56 31 2d 34 00                                      V1-4.

00000227 <ProgrammerName>:
     227:	42 55 54 54 4c 4f 41 44 00                          BUTTLOAD.

00000230 <WaitText>:
     230:	2a 57 41 49 54 2a 00                                *WAIT*.

00000237 <BUTTTAG_Name>:
     237:	40 28 23 29 42 55 54 54 4c 4f 41 44 20 41 56 52     @(#)BUTTLOAD AVR
     247:	49 53 50 00                                         ISP.

0000024b <BUTTTAG_Author>:
     24b:	40 28 23 29 42 59 20 44 45 41 4e 20 43 41 4d 45     @(#)BY DEAN CAME
     25b:	52 41 00                                            RA.

0000025e <__c.17>:
     25e:	50 52 47 3e 20 20 00                                PRG>  .

00000265 <__c.16>:
     265:	42 41 44 49 53 52 00                                BADISR.

0000026c <__c.9>:
     26c:	4e 4f 20 45 52 41 53 45 20 43 4d 44 00              NO ERASE CMD.

00000279 <__c.10>:
     279:	4e 4f 20 44 41 54 41 00                             NO DATA.

00000281 <__c.11>:
     281:	4e 4f 20 45 45 50 52 4f 4d 00                       NO EEPROM.

0000028b <__c.12>:
     28b:	4e 4f 20 46 55 53 45 20 42 59 54 45 53 00           NO FUSE BYTES.

00000299 <__c.13>:
     299:	4e 4f 20 4c 4f 43 4b 20 42 59 54 45 53 00           NO LOCK BYTES.

000002a7 <__c.14>:
     2a7:	50 52 4f 47 52 41 4d 4d 49 4e 47 20 44 4f 4e 45     PROGRAMMING DONE
	...

000002b8 <__c.15>:
     2b8:	46 41 49 4c 45 44 00                                FAILED.

000002bf <__c.8>:
     2bf:	2a 53 54 4f 52 41 47 45 20 4d 4f 44 45 2a 00        *STORAGE MODE*.

000002ce <__c.5>:
     2ce:	43 4f 4e 46 49 52 4d 00                             CONFIRM.

000002d6 <__c.6>:
     2d6:	3c 4e 20 59 3e 00                                   <N Y>.

000002dc <__c.7>:
     2dc:	4d 45 4d 20 43 4c 45 41 52 45 44 00                 MEM CLEARED.

000002e8 <__c.4>:
     2e8:	56 32 2d 20 00                                      V2- .

000002ed <__c.2>:
     2ed:	20 20 20 20 53 45 43 00                                 SEC.

000002f5 <__c.3>:
     2f5:	4f 46 46 00                                         OFF.

000002f9 <__c.1>:
     2f9:	4e 4f 20 53 54 4f 52 45 44 20 50 52 47 4d 00        NO STORED PRGM.

00000308 <__c.0>:
     308:	2a 4a 54 41 47 20 4f 4e 2a 00                       *JTAG ON*.

00000312 <LCD_SegTable>:
     312:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
     322:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
     332:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
     342:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
     352:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
     362:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
     372:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

0000037e <USIPSValues>:
     37e:	03 80 02 54 01 40 00 22                             ...T.@."

00000386 <DataFlashError>:
     386:	44 41 54 41 46 4c 41 53 48 20 45 52 52 4f 52 00     DATAFLASH ERROR.

00000396 <DF_Pages>:
     396:	00 01 00 02 00 04 00 08 00 10 00 10 00 20 00 20     ............. . 

000003a6 <DF_PageSize>:
     3a6:	08 01 08 01 08 01 08 01 08 01 10 02 10 02 20 04     .............. .

000003b6 <DF_PageBits>:
     3b6:	09 09 09 09 09 0a 0a 0b                             ........

000003be <__c.0>:
     3be:	42 55 46 46 20 4f 56 45 52 46 4c 4f 57 00           BUFF OVERFLOW.

000003cc <AutoSleepTOValues>:
     3cc:	00 0f 1e 3c 78                                      ...<x

000003d1 <DataFlashProgMode>:
     3d1:	2a 44 41 54 41 46 4c 41 53 48 20 4d 4f 44 45 2a     *DATAFLASH MODE*
	...

000003e2 <ButtLoadData>:
     3e2:	40 28 23 29 53 43 52 45 57 20 52 45 54 52 4f 44     @(#)SCREW RETROD
     3f2:	41 4e 00                                            AN.

000003f5 <SignonResponse>:
     3f5:	01 00 08 41 56 52 49 53 50 5f 32                    ...AVRISP_2

00000400 <SyncErrorMessage>:
     400:	53 59 4e 43 20 45 52 52 4f 52 00                    SYNC ERROR.

0000040b <AVRISPModeMessage>:
     40b:	2a 41 54 41 56 52 49 53 50 20 4d 4f 44 45 2a 00     *ATAVRISP MODE*.

0000041b <__c.0>:
     41b:	44 41 54 41 2d 00                                   DATA-.

00000421 <__c.1>:
     421:	45 50 52 4d 2d 00                                   EPRM-.

00000427 <__c.2>:
     427:	46 55 53 45 2d 00                                   FUSE-.

0000042d <__c.3>:
     42d:	4c 4f 43 4b 2d 00                                   LOCK-.

00000433 <__c.0>:
     433:	4e 4f 20 54 41 47 53 00 00                          NO TAGS..

0000043c <__init>:
     43c:	11 24       	eor	r1, r1
     43e:	1f be       	out	0x3f, r1	; 63
     440:	cf ef       	ldi	r28, 0xFF	; 255
     442:	d4 e0       	ldi	r29, 0x04	; 4
     444:	de bf       	out	0x3e, r29	; 62
     446:	cd bf       	out	0x3d, r28	; 61

00000448 <__do_copy_data>:
     448:	11 e0       	ldi	r17, 0x01	; 1
     44a:	a0 e0       	ldi	r26, 0x00	; 0
     44c:	b1 e0       	ldi	r27, 0x01	; 1
     44e:	ea e6       	ldi	r30, 0x6A	; 106
     450:	f5 e3       	ldi	r31, 0x35	; 53
     452:	02 c0       	rjmp	.+4      	; 0x458 <.do_copy_data_start>

00000454 <.do_copy_data_loop>:
     454:	05 90       	lpm	r0, Z+
     456:	0d 92       	st	X+, r0

00000458 <.do_copy_data_start>:
     458:	a4 30       	cpi	r26, 0x04	; 4
     45a:	b1 07       	cpc	r27, r17
     45c:	d9 f7       	brne	.-10     	; 0x454 <.do_copy_data_loop>

0000045e <__do_clear_bss>:
     45e:	12 e0       	ldi	r17, 0x02	; 2
     460:	a4 e0       	ldi	r26, 0x04	; 4
     462:	b1 e0       	ldi	r27, 0x01	; 1
     464:	01 c0       	rjmp	.+2      	; 0x468 <.do_clear_bss_start>

00000466 <.do_clear_bss_loop>:
     466:	1d 92       	st	X+, r1

00000468 <.do_clear_bss_start>:
     468:	a8 3b       	cpi	r26, 0xB8	; 184
     46a:	b1 07       	cpc	r27, r17
     46c:	e1 f7       	brne	.-8      	; 0x466 <.do_clear_bss_loop>
     46e:	0c 94 7f 02 	jmp	0x4fe <main>

00000472 <__bad_interrupt>:
     472:	0c 94 be 03 	jmp	0x77c <__vector_default>

00000476 <MAIN_Delay10MS>:

// ======================================================================================

void MAIN_Delay10MS(uint8_t loops)
{
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     47a:	28 2f       	mov	r18, r24
     47c:	21 50       	subi	r18, 0x01	; 1
     47e:	2f 3f       	cpi	r18, 0xFF	; 255
     480:	49 f0       	breq	.+18     	; 0x494 <MAIN_Delay10MS+0x1e>
     482:	a0 e0       	ldi	r26, 0x00	; 0
     484:	b8 e4       	ldi	r27, 0x48	; 72
     486:	c0 e0       	ldi	r28, 0x00	; 0
     488:	d0 e0       	ldi	r29, 0x00	; 0
     48a:	cd 01       	movw	r24, r26
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <MAIN_Delay10MS+0x16>
     490:	21 50       	subi	r18, 0x01	; 1
     492:	d8 f7       	brcc	.-10     	; 0x48a <MAIN_Delay10MS+0x14>
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <MAIN_WaitForJoyRelease>:
  /* Prevents the use of floating point libraries. Delaying in groups of
     10ms increases accuracy by reducing the time overhead for each loop
     interation of the while.                                            */

	while (loops--)
	  _delay_ms(10);
}

void MAIN_Delay1MS(uint8_t loops)
{
  /* Prevents the use of floating point libraries. Less accurate than the
     Delay10MS routine, but nessesary for many commands. The overhead required
     to call the routine is substantially less than the overhead required to
     calculate the float at compile time, so this actually saves execution time. */

	while (loops--)
	  _delay_ms(1);
}

void MAIN_ResetCSLine(const uint8_t ActiveInactive)
{
	/* ActiveInactive controls the /Reset line to an AVR device or external dataflash
	/CS line. If the reset polarity parameter is a 0 then interfacing with AT89
	devices which has an active high reset. Pins are tristated when inactive.         */
	
	switch (ActiveInactive)
	{
		case MAIN_RESETCS_ACTIVE:      // The target RESET line may be either active high or low.
			DDRF |= (1 << 6);
		
			if (!(eeprom_read_byte(&EEPROMVars.ResetPolarity))) // Translate to correct logic level for target device type
			  PORTF |=  (1 << 6);
			else
			  PORTF &= ~(1 << 6);
		
			break;
		case MAIN_RESETCS_EXTDFACTIVE: // Dataflashes are always active low.
			DDRF  |=  (1 << 6);
			PORTF &= ~(1 << 6);
			
			break;
		case MAIN_RESETCS_INACTIVE:    // Both modes tristate the pins when inactive.
			DDRF  &= ~(1 << 6);
			PORTF &= ~(1 << 6);
	}
}

void MAIN_WaitForJoyRelease(void)
{
	while (1)
	{
		while (JoyStatus) {};                   // Wait until joystick released
     49a:	8e b3       	in	r24, 0x1e	; 30
     49c:	88 23       	and	r24, r24
     49e:	e9 f7       	brne	.-6      	; 0x49a <MAIN_WaitForJoyRelease>

		MAIN_Delay10MS(1);
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	0e 94 3b 02 	call	0x476 <MAIN_Delay10MS>

		if (!(JoyStatus))                       // Joystick still released (not bouncing), return
     4a6:	8e b3       	in	r24, 0x1e	; 30
     4a8:	88 23       	and	r24, r24
     4aa:	b9 f7       	brne	.-18     	; 0x49a <MAIN_WaitForJoyRelease>
     4ac:	08 95       	ret

000004ae <FUNCShowAbout>:
		  return;
	}
}

void MAIN_IntToStr(uint16_t IntV, uint8_t* Buff)
{
	// Shows leading zeros, unlike itoa.

	uint8_t Temp = 0;
	
	while (IntV >= 100)
	{
		Temp++;
		IntV -= 100;
	}

	*(Buff++) = '0' + Temp;
	
	Temp = 0;
	
	while (IntV >= 10)
	{
		Temp++;
		IntV -= 10;
	}
		
	*(Buff++) = '0' + Temp;
	*(Buff++) = '0' + IntV;
	*(Buff)   = '\0';
}

void MAIN_ShowProgType(const uint8_t Letter)
{
	uint8_t ProgTypeBuffer[7];

	strcpy_P(ProgTypeBuffer, PSTR("PRG>  "));
	ProgTypeBuffer[5] = Letter;
	
	LCD_puts(ProgTypeBuffer);
}

void MAIN_ShowError(const uint8_t *pFlashStr)
{
	uint8_t ErrorBuff[LCD_TEXTBUFFER_SIZE];   // New buffer, LCD text buffer size
	
	ErrorBuff[0] = 'E';
	ErrorBuff[1] = '>';

	strcpy_P(&ErrorBuff[2], pFlashStr);       // WARNING: If error text is larger than (TEXTBUFFER_SIZE - 2),
	                                          // this will overflow the buffer and probably crash the micro!
	LCD_puts(ErrorBuff);
	
	MAIN_WaitForJoyRelease();
	while (!(JoyStatus & JOY_PRESS)) {};
	MAIN_WaitForJoyRelease();
}

// ======================================================================================

ISR(PCINT1_vect, ISR_NOBLOCK)                 // Joystick routine; PCINT0_vect is bound to this also via JoystickInterrupt.S
{
	JoyStatus = (~PINB & JOY_BMASK)
	          | (~PINE & JOY_EMASK);
			  
	TIMEOUT_SLEEP_TIMEOUT_RESET();
}

ISR(BADISR_vect, ISR_NAKED)                   // Bad ISR routine; should never be called, here for safety
{
	MAIN_ShowError(PSTR("BADISR"));
	while (1) {};
}

// ======================================================================================

void FUNCChangeSettings(void)
{
	uint8_t CurrSFunc = 0;
	
	JoyStatus = 1;

	while (1)
	{
		if (JoyStatus)                         // Joystick is in the non-center position
		{
			if (JoyStatus & JOY_UP)            // Previous function
			  (CurrSFunc == 0)? CurrSFunc = ARRAY_UPPERBOUND(SettingFunctionPtrs) : CurrSFunc--;
			else if (JoyStatus & JOY_DOWN)     // Next function
			  (CurrSFunc == ARRAY_UPPERBOUND(SettingFunctionPtrs))? CurrSFunc = 0 : CurrSFunc++;
			else if (JoyStatus & JOY_PRESS)    // Select current function
			  ((FuncPtr)pgm_read_word(&SettingFunctionPtrs[CurrSFunc]))(); // Run associated function
			else if (JoyStatus & JOY_LEFT)
			  return;
		
			// Show current function onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&SettingFunctionNames[CurrSFunc]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCShowAbout(void)
{
     4ae:	cf 93       	push	r28
	uint8_t InfoNum = 0;
     4b0:	c0 e0       	ldi	r28, 0x00	; 0
	
	JoyStatus = 1;
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	8e bb       	out	0x1e, r24	; 30
			
	while (1)
	{
		if (JoyStatus)
     4b6:	8e b3       	in	r24, 0x1e	; 30
     4b8:	88 23       	and	r24, r24
     4ba:	e9 f3       	breq	.-6      	; 0x4b6 <FUNCShowAbout+0x8>
		{
			if (JoyStatus & JOY_UP)
     4bc:	f6 9b       	sbis	0x1e, 6	; 30
     4be:	06 c0       	rjmp	.+12     	; 0x4cc <FUNCShowAbout+0x1e>
			  (InfoNum == 0)? InfoNum = ARRAY_UPPERBOUND(AboutTextPtrs) : InfoNum--;
     4c0:	cc 23       	and	r28, r28
     4c2:	11 f4       	brne	.+4      	; 0x4c8 <FUNCShowAbout+0x1a>
     4c4:	c3 e0       	ldi	r28, 0x03	; 3
     4c6:	0c c0       	rjmp	.+24     	; 0x4e0 <FUNCShowAbout+0x32>
     4c8:	c1 50       	subi	r28, 0x01	; 1
     4ca:	0a c0       	rjmp	.+20     	; 0x4e0 <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_DOWN)
     4cc:	f7 9b       	sbis	0x1e, 7	; 30
     4ce:	06 c0       	rjmp	.+12     	; 0x4dc <FUNCShowAbout+0x2e>
			  (InfoNum == ARRAY_UPPERBOUND(AboutTextPtrs))? InfoNum = 0 : InfoNum++;
     4d0:	c3 30       	cpi	r28, 0x03	; 3
     4d2:	11 f4       	brne	.+4      	; 0x4d8 <FUNCShowAbout+0x2a>
     4d4:	c0 e0       	ldi	r28, 0x00	; 0
     4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <FUNCShowAbout+0x32>
     4d8:	cf 5f       	subi	r28, 0xFF	; 255
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_LEFT)
     4dc:	f2 99       	sbic	0x1e, 2	; 30
     4de:	0d c0       	rjmp	.+26     	; 0x4fa <FUNCShowAbout+0x4c>
			  return;

			LCD_puts_f((uint8_t*)pgm_read_word(&AboutTextPtrs[InfoNum]));
     4e0:	ec 2f       	mov	r30, r28
     4e2:	ff 27       	eor	r31, r31
     4e4:	ee 0f       	add	r30, r30
     4e6:	ff 1f       	adc	r31, r31
     4e8:	e4 50       	subi	r30, 0x04	; 4
     4ea:	fe 4f       	sbci	r31, 0xFE	; 254
     4ec:	85 91       	lpm	r24, Z+
     4ee:	94 91       	lpm	r25, Z
     4f0:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     4f4:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
     4f8:	de cf       	rjmp	.-68     	; 0x4b6 <FUNCShowAbout+0x8>
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <main>:
     4fe:	cf ef       	ldi	r28, 0xFF	; 255
     500:	d4 e0       	ldi	r29, 0x04	; 4
     502:	de bf       	out	0x3e, r29	; 62
     504:	cd bf       	out	0x3d, r28	; 61
     506:	c0 e0       	ldi	r28, 0x00	; 0
     508:	80 e8       	ldi	r24, 0x80	; 128
     50a:	85 bf       	out	0x35, r24	; 53
     50c:	85 bf       	out	0x35, r24	; 53
     50e:	80 bf       	out	0x30, r24	; 48
     510:	85 e0       	ldi	r24, 0x05	; 5
     512:	80 93 64 00 	sts	0x0064, r24
     516:	80 e3       	ldi	r24, 0x30	; 48
     518:	80 bb       	out	0x10, r24	; 16
     51a:	87 e2       	ldi	r24, 0x27	; 39
     51c:	84 b9       	out	0x04, r24	; 4
     51e:	8f ed       	ldi	r24, 0xDF	; 223
     520:	85 b9       	out	0x05, r24	; 5
     522:	8c e0       	ldi	r24, 0x0C	; 12
     524:	8e b9       	out	0x0e, r24	; 14
     526:	80 93 6b 00 	sts	0x006B, r24
     52a:	80 ed       	ldi	r24, 0xD0	; 208
     52c:	80 93 6c 00 	sts	0x006C, r24
     530:	80 ec       	ldi	r24, 0xC0	; 192
     532:	8d bb       	out	0x1d, r24	; 29
     534:	8c bb       	out	0x1c, r24	; 28
     536:	81 b3       	in	r24, 0x11	; 17
     538:	8f 7c       	andi	r24, 0xCF	; 207
     53a:	80 62       	ori	r24, 0x20	; 32
     53c:	81 bb       	out	0x11, r24	; 17
     53e:	0e 94 21 08 	call	0x1042 <LCD_Init>
     542:	8f e0       	ldi	r24, 0x0F	; 15
     544:	80 93 e7 00 	sts	0x00E7, r24
     548:	80 e3       	ldi	r24, 0x30	; 48
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
     550:	78 94       	sei
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     552:	28 e8       	ldi	r18, 0x88	; 136
     554:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t result;
  asm volatile
     556:	d9 01       	movw	r26, r18
     558:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
     55c:	80 2d       	mov	r24, r0
     55e:	8a 37       	cpi	r24, 0x7A	; 122
     560:	81 f0       	breq	.+32     	; 0x582 <__stack+0x83>
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	4f ef       	ldi	r20, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     568:	dc 01       	movw	r26, r24
     56a:	04 2e       	mov	r0, r20
     56c:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	89 38       	cpi	r24, 0x89	; 137
     574:	91 05       	cpc	r25, r1
     576:	c0 f3       	brcs	.-16     	; 0x568 <__stack+0x69>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
     578:	8a e7       	ldi	r24, 0x7A	; 122
  asm volatile (
     57a:	d9 01       	movw	r26, r18
     57c:	08 2e       	mov	r0, r24
     57e:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
     582:	a5 e8       	ldi	r26, 0x85	; 133
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
     58a:	80 2d       	mov	r24, r0
     58c:	8f 70       	andi	r24, 0x0F	; 15
     58e:	80 93 e7 00 	sts	0x00E7, r24
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
     598:	81 b3       	in	r24, 0x11	; 17
     59a:	80 63       	ori	r24, 0x30	; 48
     59c:	81 bb       	out	0x11, r24	; 17
     59e:	0e 94 1e 09 	call	0x123c <USART_Init>
     5a2:	0e 94 9b 07 	call	0xf36 <OSCCAL_Calibrate>
     5a6:	0e 94 fe 0b 	call	0x17fc <TOUT_SetupSleepTimer>
     5aa:	81 b3       	in	r24, 0x11	; 17
     5ac:	8f 7c       	andi	r24, 0xCF	; 207
     5ae:	80 61       	ori	r24, 0x10	; 16
     5b0:	81 bb       	out	0x11, r24	; 17
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	8e bb       	out	0x1e, r24	; 30
     5b6:	80 e8       	ldi	r24, 0x80	; 128
     5b8:	80 93 61 00 	sts	0x0061, r24
     5bc:	83 e0       	ldi	r24, 0x03	; 3
     5be:	80 93 61 00 	sts	0x0061, r24
     5c2:	8e b3       	in	r24, 0x1e	; 30
     5c4:	88 23       	and	r24, r24
     5c6:	e9 f3       	breq	.-6      	; 0x5c2 <__stack+0xc3>
     5c8:	f6 9b       	sbis	0x1e, 6	; 30
     5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <__stack+0xd9>
     5cc:	cc 23       	and	r28, r28
     5ce:	11 f4       	brne	.+4      	; 0x5d4 <__stack+0xd5>
     5d0:	c6 e0       	ldi	r28, 0x06	; 6
     5d2:	1b c0       	rjmp	.+54     	; 0x60a <__stack+0x10b>
     5d4:	c1 50       	subi	r28, 0x01	; 1
     5d6:	19 c0       	rjmp	.+50     	; 0x60a <__stack+0x10b>
     5d8:	f7 9b       	sbis	0x1e, 7	; 30
     5da:	06 c0       	rjmp	.+12     	; 0x5e8 <__stack+0xe9>
     5dc:	c6 30       	cpi	r28, 0x06	; 6
     5de:	11 f4       	brne	.+4      	; 0x5e4 <__stack+0xe5>
     5e0:	c0 e0       	ldi	r28, 0x00	; 0
     5e2:	13 c0       	rjmp	.+38     	; 0x60a <__stack+0x10b>
     5e4:	cf 5f       	subi	r28, 0xFF	; 255
     5e6:	11 c0       	rjmp	.+34     	; 0x60a <__stack+0x10b>
     5e8:	f4 9b       	sbis	0x1e, 4	; 30
     5ea:	0b c0       	rjmp	.+22     	; 0x602 <__stack+0x103>
     5ec:	ec 2f       	mov	r30, r28
     5ee:	ff 27       	eor	r31, r31
     5f0:	ee 0f       	add	r30, r30
     5f2:	ff 1f       	adc	r31, r31
     5f4:	e5 57       	subi	r30, 0x75	; 117
     5f6:	fe 4f       	sbci	r31, 0xFE	; 254
     5f8:	85 91       	lpm	r24, Z+
     5fa:	94 91       	lpm	r25, Z
     5fc:	fc 01       	movw	r30, r24
     5fe:	09 95       	icall
     600:	04 c0       	rjmp	.+8      	; 0x60a <__stack+0x10b>
     602:	f3 9b       	sbis	0x1e, 3	; 30
     604:	02 c0       	rjmp	.+4      	; 0x60a <__stack+0x10b>
     606:	0e 94 57 02 	call	0x4ae <FUNCShowAbout>
     60a:	ec 2f       	mov	r30, r28
     60c:	ff 27       	eor	r31, r31
     60e:	ee 0f       	add	r30, r30
     610:	ff 1f       	adc	r31, r31
     612:	e7 56       	subi	r30, 0x67	; 103
     614:	fe 4f       	sbci	r31, 0xFE	; 254
     616:	85 91       	lpm	r24, Z+
     618:	94 91       	lpm	r25, Z
     61a:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
     61e:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
     622:	cf cf       	rjmp	.-98     	; 0x5c2 <__stack+0xc3>

00000624 <MAIN_Delay1MS>:
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     628:	28 2f       	mov	r18, r24
     62a:	21 50       	subi	r18, 0x01	; 1
     62c:	2f 3f       	cpi	r18, 0xFF	; 255
     62e:	49 f0       	breq	.+18     	; 0x642 <MAIN_Delay1MS+0x1e>
     630:	a3 e3       	ldi	r26, 0x33	; 51
     632:	b7 e0       	ldi	r27, 0x07	; 7
     634:	c0 e0       	ldi	r28, 0x00	; 0
     636:	d0 e0       	ldi	r29, 0x00	; 0
     638:	cd 01       	movw	r24, r26
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <MAIN_Delay1MS+0x16>
     63e:	21 50       	subi	r18, 0x01	; 1
     640:	d8 f7       	brcc	.-10     	; 0x638 <MAIN_Delay1MS+0x14>
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	08 95       	ret

00000648 <MAIN_ResetCSLine>:
     648:	99 27       	eor	r25, r25
     64a:	81 30       	cpi	r24, 0x01	; 1
     64c:	91 05       	cpc	r25, r1
     64e:	b1 f0       	breq	.+44     	; 0x67c <MAIN_ResetCSLine+0x34>
     650:	82 30       	cpi	r24, 0x02	; 2
     652:	91 05       	cpc	r25, r1
     654:	1c f4       	brge	.+6      	; 0x65c <MAIN_ResetCSLine+0x14>
     656:	89 2b       	or	r24, r25
     658:	21 f0       	breq	.+8      	; 0x662 <MAIN_ResetCSLine+0x1a>
     65a:	08 95       	ret
     65c:	02 97       	sbiw	r24, 0x02	; 2
     65e:	59 f0       	breq	.+22     	; 0x676 <MAIN_ResetCSLine+0x2e>
     660:	08 95       	ret
     662:	86 9a       	sbi	0x10, 6	; 16
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     664:	a0 e0       	ldi	r26, 0x00	; 0
     666:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     668:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
     66c:	80 2d       	mov	r24, r0
     66e:	88 23       	and	r24, r24
     670:	19 f4       	brne	.+6      	; 0x678 <MAIN_ResetCSLine+0x30>
     672:	8e 9a       	sbi	0x11, 6	; 17
     674:	08 95       	ret
     676:	86 9a       	sbi	0x10, 6	; 16
     678:	8e 98       	cbi	0x11, 6	; 17
     67a:	08 95       	ret
     67c:	86 98       	cbi	0x10, 6	; 16
     67e:	fc cf       	rjmp	.-8      	; 0x678 <MAIN_ResetCSLine+0x30>

00000680 <MAIN_IntToStr>:
     680:	fb 01       	movw	r30, r22
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	84 36       	cpi	r24, 0x64	; 100
     686:	91 05       	cpc	r25, r1
     688:	20 f0       	brcs	.+8      	; 0x692 <MAIN_IntToStr+0x12>
     68a:	2f 5f       	subi	r18, 0xFF	; 255
     68c:	84 56       	subi	r24, 0x64	; 100
     68e:	90 40       	sbci	r25, 0x00	; 0
     690:	f9 cf       	rjmp	.-14     	; 0x684 <MAIN_IntToStr+0x4>
     692:	20 5d       	subi	r18, 0xD0	; 208
     694:	21 93       	st	Z+, r18
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	8a 30       	cpi	r24, 0x0A	; 10
     69a:	91 05       	cpc	r25, r1
     69c:	18 f0       	brcs	.+6      	; 0x6a4 <MAIN_IntToStr+0x24>
     69e:	2f 5f       	subi	r18, 0xFF	; 255
     6a0:	0a 97       	sbiw	r24, 0x0a	; 10
     6a2:	fa cf       	rjmp	.-12     	; 0x698 <MAIN_IntToStr+0x18>
     6a4:	20 5d       	subi	r18, 0xD0	; 208
     6a6:	21 93       	st	Z+, r18
     6a8:	80 5d       	subi	r24, 0xD0	; 208
     6aa:	81 93       	st	Z+, r24
     6ac:	10 82       	st	Z, r1
     6ae:	08 95       	ret

000006b0 <MAIN_ShowProgType>:
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	27 97       	sbiw	r28, 0x07	; 7
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	18 2f       	mov	r17, r24
     6c8:	6e e5       	ldi	r22, 0x5E	; 94
     6ca:	72 e0       	ldi	r23, 0x02	; 2
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	0e 94 2f 1a 	call	0x345e <strcpy_P>
     6d4:	1e 83       	std	Y+6, r17	; 0x06
     6d6:	ce 01       	movw	r24, r28
     6d8:	01 96       	adiw	r24, 0x01	; 1
     6da:	0e 94 2e 08 	call	0x105c <LCD_puts>
     6de:	27 96       	adiw	r28, 0x07	; 7
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	08 95       	ret

000006f2 <MAIN_ShowError>:
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	64 97       	sbiw	r28, 0x14	; 20
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	25 e4       	ldi	r18, 0x45	; 69
     708:	29 83       	std	Y+1, r18	; 0x01
     70a:	2e e3       	ldi	r18, 0x3E	; 62
     70c:	2a 83       	std	Y+2, r18	; 0x02
     70e:	bc 01       	movw	r22, r24
     710:	ce 01       	movw	r24, r28
     712:	03 96       	adiw	r24, 0x03	; 3
     714:	0e 94 2f 1a 	call	0x345e <strcpy_P>
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	0e 94 2e 08 	call	0x105c <LCD_puts>
     720:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
     724:	f4 9b       	sbis	0x1e, 4	; 30
     726:	fe cf       	rjmp	.-4      	; 0x724 <MAIN_ShowError+0x32>
     728:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
     72c:	64 96       	adiw	r28, 0x14	; 20
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	08 95       	ret

0000073e <__vector_3>:
     73e:	78 94       	sei
     740:	1f 92       	push	r1
     742:	0f 92       	push	r0
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	0f 92       	push	r0
     748:	11 24       	eor	r1, r1
     74a:	8f 93       	push	r24
     74c:	9f 93       	push	r25
     74e:	93 b1       	in	r25, 0x03	; 3
     750:	90 95       	com	r25
     752:	90 7d       	andi	r25, 0xD0	; 208
     754:	8c b1       	in	r24, 0x0c	; 12
     756:	80 95       	com	r24
     758:	8c 70       	andi	r24, 0x0C	; 12
     75a:	98 2b       	or	r25, r24
     75c:	9e bb       	out	0x1e, r25	; 30
     75e:	10 92 48 01 	sts	0x0148, r1
     762:	10 92 47 01 	sts	0x0147, r1
     766:	10 92 85 00 	sts	0x0085, r1
     76a:	10 92 84 00 	sts	0x0084, r1
     76e:	9f 91       	pop	r25
     770:	8f 91       	pop	r24
     772:	0f 90       	pop	r0
     774:	0f be       	out	0x3f, r0	; 63
     776:	0f 90       	pop	r0
     778:	1f 90       	pop	r1
     77a:	18 95       	reti

0000077c <__vector_default>:
     77c:	85 e6       	ldi	r24, 0x65	; 101
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	0e 94 79 03 	call	0x6f2 <MAIN_ShowError>
     784:	ff cf       	rjmp	.-2      	; 0x784 <__vector_default+0x8>

00000786 <FUNCChangeSettings>:
     786:	cf 93       	push	r28
     788:	c0 e0       	ldi	r28, 0x00	; 0
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	8e bb       	out	0x1e, r24	; 30
     78e:	8e b3       	in	r24, 0x1e	; 30
     790:	88 23       	and	r24, r24
     792:	e9 f3       	breq	.-6      	; 0x78e <FUNCChangeSettings+0x8>
     794:	f6 9b       	sbis	0x1e, 6	; 30
     796:	06 c0       	rjmp	.+12     	; 0x7a4 <FUNCChangeSettings+0x1e>
     798:	cc 23       	and	r28, r28
     79a:	11 f4       	brne	.+4      	; 0x7a0 <FUNCChangeSettings+0x1a>
     79c:	c5 e0       	ldi	r28, 0x05	; 5
     79e:	19 c0       	rjmp	.+50     	; 0x7d2 <FUNCChangeSettings+0x4c>
     7a0:	c1 50       	subi	r28, 0x01	; 1
     7a2:	17 c0       	rjmp	.+46     	; 0x7d2 <FUNCChangeSettings+0x4c>
     7a4:	f7 9b       	sbis	0x1e, 7	; 30
     7a6:	06 c0       	rjmp	.+12     	; 0x7b4 <FUNCChangeSettings+0x2e>
     7a8:	c5 30       	cpi	r28, 0x05	; 5
     7aa:	11 f4       	brne	.+4      	; 0x7b0 <FUNCChangeSettings+0x2a>
     7ac:	c0 e0       	ldi	r28, 0x00	; 0
     7ae:	11 c0       	rjmp	.+34     	; 0x7d2 <FUNCChangeSettings+0x4c>
     7b0:	cf 5f       	subi	r28, 0xFF	; 255
     7b2:	0f c0       	rjmp	.+30     	; 0x7d2 <FUNCChangeSettings+0x4c>
     7b4:	f4 9b       	sbis	0x1e, 4	; 30
     7b6:	0b c0       	rjmp	.+22     	; 0x7ce <FUNCChangeSettings+0x48>
     7b8:	ec 2f       	mov	r30, r28
     7ba:	ff 27       	eor	r31, r31
     7bc:	ee 0f       	add	r30, r30
     7be:	ff 1f       	adc	r31, r31
     7c0:	eb 5e       	subi	r30, 0xEB	; 235
     7c2:	fe 4f       	sbci	r31, 0xFE	; 254
     7c4:	85 91       	lpm	r24, Z+
     7c6:	94 91       	lpm	r25, Z
     7c8:	fc 01       	movw	r30, r24
     7ca:	09 95       	icall
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <FUNCChangeSettings+0x4c>
     7ce:	f2 99       	sbic	0x1e, 2	; 30
     7d0:	0d c0       	rjmp	.+26     	; 0x7ec <FUNCChangeSettings+0x66>
     7d2:	ec 2f       	mov	r30, r28
     7d4:	ff 27       	eor	r31, r31
     7d6:	ee 0f       	add	r30, r30
     7d8:	ff 1f       	adc	r31, r31
     7da:	ef 5d       	subi	r30, 0xDF	; 223
     7dc:	fe 4f       	sbci	r31, 0xFE	; 254
     7de:	85 91       	lpm	r24, Z+
     7e0:	94 91       	lpm	r25, Z
     7e2:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
     7e6:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
     7ea:	d1 cf       	rjmp	.-94     	; 0x78e <FUNCChangeSettings+0x8>
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <FUNCAVRISPMode>:
		}
	}
}

void FUNCAVRISPMode(void)
{
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     7f0:	80 e3       	ldi	r24, 0x30	; 48
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
     7f8:	0e 94 9b 07 	call	0xf36 <OSCCAL_Calibrate>
     7fc:	80 91 c1 00 	lds	r24, 0x00C1
     800:	80 78       	andi	r24, 0x80	; 128
     802:	88 61       	ori	r24, 0x18	; 24
     804:	80 93 c1 00 	sts	0x00C1, r24
	LCD_puts_f(AVRISPModeMessage);
     808:	8b e0       	ldi	r24, 0x0B	; 11
     80a:	94 e0       	ldi	r25, 0x04	; 4
     80c:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
	
	InterpretPacketRoutine = (FuncPtr)AICI_InterpretPacket;
     810:	87 e8       	ldi	r24, 0x87	; 135
     812:	92 e1       	ldi	r25, 0x12	; 18
     814:	90 93 03 01 	sts	0x0103, r25
     818:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     81c:	0e 94 8d 0f 	call	0x1f1a <V2P_RunStateMachine>
     820:	08 95       	ret

00000822 <FUNCProgramDataflash>:
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     822:	a1 e0       	ldi	r26, 0x01	; 1
     824:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     826:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
     82a:	80 2d       	mov	r24, r0
     82c:	0e 94 98 09 	call	0x1330 <USI_SPIInitMaster>
}

void FUNCProgramDataflash(void)
{
	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	UseExernalDF = TRUE;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	80 93 40 01 	sts	0x0140, r24
	DFSPIRoutinePointer = USI_SPITransmit;
     836:	82 eb       	ldi	r24, 0xB2	; 178
     838:	99 e0       	ldi	r25, 0x09	; 9
     83a:	90 93 01 01 	sts	0x0101, r25
     83e:	80 93 00 01 	sts	0x0100, r24
	
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     842:	80 e3       	ldi	r24, 0x30	; 48
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
     84a:	0e 94 9b 07 	call	0xf36 <OSCCAL_Calibrate>
     84e:	80 91 c1 00 	lds	r24, 0x00C1
     852:	80 78       	andi	r24, 0x80	; 128
     854:	88 61       	ori	r24, 0x18	; 24
     856:	80 93 c1 00 	sts	0x00C1, r24
	LCD_puts_f(DataFlashProgMode);
     85a:	81 ed       	ldi	r24, 0xD1	; 209
     85c:	93 e0       	ldi	r25, 0x03	; 3
     85e:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PD_InterpretAVRISPPacket;
     862:	8e eb       	ldi	r24, 0xBE	; 190
     864:	9c e0       	ldi	r25, 0x0C	; 12
     866:	90 93 03 01 	sts	0x0103, r25
     86a:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     86e:	0e 94 8d 0f 	call	0x1f1a <V2P_RunStateMachine>
	   
	DF_EnableDataflash(FALSE);
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
	SPI_SPIOFF();
     878:	80 91 64 00 	lds	r24, 0x0064
     87c:	84 60       	ori	r24, 0x04	; 4
     87e:	80 93 64 00 	sts	0x0064, r24
     882:	08 95       	ret

00000884 <FUNCProgramAVR>:
}

void FUNCProgramAVR(void)
{
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	63 97       	sbiw	r28, 0x13	; 19
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	de bf       	out	0x3e, r29	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  DoneFailMessageBuff[19];
	uint8_t  Fault    = ISPCC_NO_FAULT;
     89c:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t  ProgMode = 0;
     89e:	10 2f       	mov	r17, r16

	SPI_SPIInit();
     8a0:	0e 94 43 09 	call	0x1286 <SPI_SPIInit>
	UseExernalDF = FALSE;
     8a4:	00 93 40 01 	sts	0x0140, r16
	DFSPIRoutinePointer = SPI_SPITransmit;
     8a8:	8d e4       	ldi	r24, 0x4D	; 77
     8aa:	99 e0       	ldi	r25, 0x09	; 9
     8ac:	90 93 01 01 	sts	0x0101, r25
     8b0:	80 93 00 01 	sts	0x0100, r24
	
	if (!(DF_CheckCorrectOnboardChip()))
     8b4:	0e 94 51 0b 	call	0x16a2 <DF_CheckCorrectOnboardChip>
     8b8:	88 23       	and	r24, r24
     8ba:	09 f4       	brne	.+2      	; 0x8be <FUNCProgramAVR+0x3a>
     8bc:	18 c1       	rjmp	.+560    	; 0xaee <FUNCProgramAVR+0x26a>
	  return;

	MAIN_WaitForJoyRelease();
     8be:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
	
	JoyStatus = 1;                              // Use an invalid joystick value to force the program to write the
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	8e bb       	out	0x1e, r24	; 30
	                                            // name of the default command onto the LCD
	while (1)
	{
		if (JoyStatus)
     8c6:	8e b3       	in	r24, 0x1e	; 30
     8c8:	88 23       	and	r24, r24
     8ca:	e9 f3       	breq	.-6      	; 0x8c6 <FUNCProgramAVR+0x42>
		{
			if (JoyStatus & JOY_LEFT)
     8cc:	f2 99       	sbic	0x1e, 2	; 30
     8ce:	0f c1       	rjmp	.+542    	; 0xaee <FUNCProgramAVR+0x26a>
			  return;
			else if (JoyStatus & JOY_PRESS)
     8d0:	f4 99       	sbic	0x1e, 4	; 30
     8d2:	1c c0       	rjmp	.+56     	; 0x90c <FUNCProgramAVR+0x88>
			  break;
			else if (JoyStatus & JOY_UP)
     8d4:	f6 9b       	sbis	0x1e, 6	; 30
     8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <FUNCProgramAVR+0x60>
			  (ProgMode == 0)? ProgMode = ARRAY_UPPERBOUND(ProgOptions) : ProgMode--;
     8d8:	11 23       	and	r17, r17
     8da:	11 f4       	brne	.+4      	; 0x8e0 <FUNCProgramAVR+0x5c>
     8dc:	16 e0       	ldi	r17, 0x06	; 6
     8de:	09 c0       	rjmp	.+18     	; 0x8f2 <FUNCProgramAVR+0x6e>
     8e0:	11 50       	subi	r17, 0x01	; 1
     8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <FUNCProgramAVR+0x6e>
			else if (JoyStatus & JOY_DOWN)
     8e4:	f7 9b       	sbis	0x1e, 7	; 30
     8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <FUNCProgramAVR+0x6e>
			  (ProgMode == ARRAY_UPPERBOUND(ProgOptions))? ProgMode = 0 : ProgMode++;
     8e8:	16 30       	cpi	r17, 0x06	; 6
     8ea:	11 f4       	brne	.+4      	; 0x8f0 <FUNCProgramAVR+0x6c>
     8ec:	10 e0       	ldi	r17, 0x00	; 0
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <FUNCProgramAVR+0x6e>
     8f0:	1f 5f       	subi	r17, 0xFF	; 255

			LCD_puts_f((uint8_t*)pgm_read_word(&ProgOptions[ProgMode])); // Show current function onto the LCD
     8f2:	e1 2f       	mov	r30, r17
     8f4:	ff 27       	eor	r31, r31
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	ee 55       	subi	r30, 0x5E	; 94
     8fc:	ff 4f       	sbci	r31, 0xFF	; 255
     8fe:	85 91       	lpm	r24, Z+
     900:	94 91       	lpm	r25, Z
     902:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     906:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
     90a:	dd cf       	rjmp	.-70     	; 0x8c6 <FUNCProgramAVR+0x42>
		}
	}

	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_8MHZ);
     90c:	80 e8       	ldi	r24, 0x80	; 128
     90e:	80 93 61 00 	sts	0x0061, r24
     912:	10 92 61 00 	sts	0x0061, r1
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);                // Orange = busy
     916:	81 b3       	in	r24, 0x11	; 17
     918:	80 63       	ori	r24, 0x30	; 48
     91a:	81 bb       	out	0x11, r24	; 17
	LCD_puts_f(WaitText);
     91c:	80 e3       	ldi	r24, 0x30	; 48
     91e:	92 e0       	ldi	r25, 0x02	; 2
     920:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     924:	a1 e0       	ldi	r26, 0x01	; 1
     926:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     928:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
     92c:	80 2d       	mov	r24, r0
     92e:	0e 94 98 09 	call	0x1330 <USI_SPIInitMaster>

	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 24 03 	call	0x648 <MAIN_ResetCSLine>
     938:	e5 e5       	ldi	r30, 0x55	; 85
     93a:	f1 e0       	ldi	r31, 0x01	; 1
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	9b e0       	ldi	r25, 0x0B	; 11
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     942:	d9 01       	movw	r26, r18
     944:	ad 5d       	subi	r26, 0xDD	; 221
     946:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
     948:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
     94c:	80 2d       	mov	r24, r0
     94e:	81 93       	st	Z+, r24
			
	for (uint8_t PacketB = 0; PacketB <= 11; PacketB++) // Read the enter programming mode command bytes
     950:	91 50       	subi	r25, 0x01	; 1
     952:	2f 5f       	subi	r18, 0xFF	; 255
     954:	3f 4f       	sbci	r19, 0xFF	; 255
     956:	97 ff       	sbrs	r25, 7
     958:	f4 cf       	rjmp	.-24     	; 0x942 <FUNCProgramAVR+0xbe>
	  PacketBytes[PacketB] = eeprom_read_byte(&EEPROMVars.EnterProgMode[PacketB]);
	
	ISPCC_EnterChipProgrammingMode();    // Try to sync with the slave AVR
     95a:	0e 94 f7 10 	call	0x21ee <ISPCC_EnterChipProgrammingMode>

	CurrAddress = 0;
     95e:	10 92 4c 01 	sts	0x014C, r1
     962:	10 92 4d 01 	sts	0x014D, r1
     966:	10 92 4e 01 	sts	0x014E, r1
     96a:	10 92 4f 01 	sts	0x014F, r1

	if (PacketBytes[1] == AICB_STATUS_CMD_OK) // ISPCC_EnterChipProgrammingMode alters the PacketBytes buffer rather than returning a value
     96e:	80 91 56 01 	lds	r24, 0x0156
     972:	88 23       	and	r24, r24
     974:	09 f0       	breq	.+2      	; 0x978 <FUNCProgramAVR+0xf4>
     976:	a0 c0       	rjmp	.+320    	; 0xab8 <FUNCProgramAVR+0x234>
	{						
		if ((ProgMode == 6) || (ProgMode == 0) || (ProgMode == 2)) // Erase chip, or program flash mode
     978:	16 30       	cpi	r17, 0x06	; 6
     97a:	21 f0       	breq	.+8      	; 0x984 <FUNCProgramAVR+0x100>
     97c:	11 23       	and	r17, r17
     97e:	11 f0       	breq	.+4      	; 0x984 <FUNCProgramAVR+0x100>
     980:	12 30       	cpi	r17, 0x02	; 2
     982:	91 f4       	brne	.+36     	; 0x9a8 <FUNCProgramAVR+0x124>
		{
			MAIN_ShowProgType('C');
     984:	83 e4       	ldi	r24, 0x43	; 67
     986:	0e 94 58 03 	call	0x6b0 <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     98a:	a4 e1       	ldi	r26, 0x14	; 20
     98c:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     98e:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
     992:	80 2d       	mov	r24, r0
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	31 f0       	breq	.+12     	; 0x9a4 <FUNCProgramAVR+0x120>
			
			if (!(eeprom_read_byte(&EEPROMVars.EraseCmdStored) == TRUE))
			{
				Fault = ISPCC_FAULT_NOERASE;
     998:	02 e0       	ldi	r16, 0x02	; 2
				MAIN_ShowError(PSTR("NO ERASE CMD"));
     99a:	8c e6       	ldi	r24, 0x6C	; 108
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	0e 94 79 03 	call	0x6f2 <MAIN_ShowError>
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <FUNCProgramAVR+0x124>
			}
			else
			{
				PM_SendEraseCommand();
     9a4:	0e 94 8b 17 	call	0x2f16 <PM_SendEraseCommand>
			}
		}

		if (((ProgMode == 0) || (ProgMode == 2)) && (Fault == ISPCC_NO_FAULT)) // Program flash
     9a8:	11 23       	and	r17, r17
     9aa:	11 f0       	breq	.+4      	; 0x9b0 <FUNCProgramAVR+0x12c>
     9ac:	12 30       	cpi	r17, 0x02	; 2
     9ae:	b9 f4       	brne	.+46     	; 0x9de <FUNCProgramAVR+0x15a>
     9b0:	00 23       	and	r16, r16
     9b2:	a9 f4       	brne	.+42     	; 0x9de <FUNCProgramAVR+0x15a>
		{
			MAIN_ShowProgType('D');
     9b4:	84 e4       	ldi	r24, 0x44	; 68
     9b6:	0e 94 58 03 	call	0x6b0 <MAIN_ShowProgType>

			if (!(PM_GetStoredDataSize(TYPE_FLASH))) // Check to make sure a program is present in memory
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	0e 94 f7 13 	call	0x27ee <PM_GetStoredDataSize>
     9c0:	dc 01       	movw	r26, r24
     9c2:	cb 01       	movw	r24, r22
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	a1 05       	cpc	r26, r1
     9c8:	b1 05       	cpc	r27, r1
     9ca:	31 f4       	brne	.+12     	; 0x9d8 <FUNCProgramAVR+0x154>
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     9cc:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO DATA"));
     9ce:	89 e7       	ldi	r24, 0x79	; 121
     9d0:	92 e0       	ldi	r25, 0x02	; 2
     9d2:	0e 94 79 03 	call	0x6f2 <MAIN_ShowError>
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <FUNCProgramAVR+0x15a>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_FLASH);
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	0e 94 ba 17 	call	0x2f74 <PM_CreateProgrammingPackets>
			}
		}
	
		if ((ProgMode == 1) || (ProgMode == 2)) // Program EEPROM
     9de:	81 2f       	mov	r24, r17
     9e0:	81 50       	subi	r24, 0x01	; 1
     9e2:	82 30       	cpi	r24, 0x02	; 2
     9e4:	a8 f4       	brcc	.+42     	; 0xa10 <FUNCProgramAVR+0x18c>
		{
			MAIN_ShowProgType('E');
     9e6:	85 e4       	ldi	r24, 0x45	; 69
     9e8:	0e 94 58 03 	call	0x6b0 <MAIN_ShowProgType>
				
			if (!(PM_GetStoredDataSize(TYPE_EEPROM))) // Check to make sure EEPROM data is present in memory
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 f7 13 	call	0x27ee <PM_GetStoredDataSize>
     9f2:	dc 01       	movw	r26, r24
     9f4:	cb 01       	movw	r24, r22
     9f6:	00 97       	sbiw	r24, 0x00	; 0
     9f8:	a1 05       	cpc	r26, r1
     9fa:	b1 05       	cpc	r27, r1
     9fc:	31 f4       	brne	.+12     	; 0xa0a <FUNCProgramAVR+0x186>
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     9fe:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO EEPROM"));
     a00:	81 e8       	ldi	r24, 0x81	; 129
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	0e 94 79 03 	call	0x6f2 <MAIN_ShowError>
     a08:	03 c0       	rjmp	.+6      	; 0xa10 <FUNCProgramAVR+0x18c>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_EEPROM);
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	0e 94 ba 17 	call	0x2f74 <PM_CreateProgrammingPackets>
			}
		}

		if ((ProgMode == 3) || (ProgMode == 5)) // Program Fuse bytes
     a10:	13 30       	cpi	r17, 0x03	; 3
     a12:	11 f0       	breq	.+4      	; 0xa18 <FUNCProgramAVR+0x194>
     a14:	15 30       	cpi	r17, 0x05	; 5
     a16:	99 f4       	brne	.+38     	; 0xa3e <FUNCProgramAVR+0x1ba>
		{
			MAIN_ShowProgType('F');
     a18:	86 e4       	ldi	r24, 0x46	; 70
     a1a:	0e 94 58 03 	call	0x6b0 <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     a1e:	af e2       	ldi	r26, 0x2F	; 47
     a20:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     a22:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
     a26:	80 2d       	mov	r24, r0
     a28:	88 23       	and	r24, r24
     a2a:	31 f4       	brne	.+12     	; 0xa38 <FUNCProgramAVR+0x1b4>
			
			if (!(eeprom_read_byte(&EEPROMVars.TotalFuseBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     a2c:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO FUSE BYTES"));
     a2e:	8b e8       	ldi	r24, 0x8B	; 139
     a30:	92 e0       	ldi	r25, 0x02	; 2
     a32:	0e 94 79 03 	call	0x6f2 <MAIN_ShowError>
     a36:	03 c0       	rjmp	.+6      	; 0xa3e <FUNCProgramAVR+0x1ba>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_FUSE);
     a38:	82 e0       	ldi	r24, 0x02	; 2
     a3a:	0e 94 5a 17 	call	0x2eb4 <PM_SendFuseLockBytes>
			}
		}

		if ((ProgMode == 4) || (ProgMode == 5)) // Program Lock bytes
     a3e:	81 2f       	mov	r24, r17
     a40:	84 50       	subi	r24, 0x04	; 4
     a42:	82 30       	cpi	r24, 0x02	; 2
     a44:	00 f5       	brcc	.+64     	; 0xa86 <FUNCProgramAVR+0x202>
		{
			if (ProgMode == 5)                    // If fusebytes have already been written, we need to reenter programming mode to latch them
     a46:	15 30       	cpi	r17, 0x05	; 5
     a48:	59 f4       	brne	.+22     	; 0xa60 <FUNCProgramAVR+0x1dc>
			{
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line of the slave AVR
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	0e 94 24 03 	call	0x648 <MAIN_ResetCSLine>
				MAIN_Delay10MS(1);
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	0e 94 3b 02 	call	0x476 <MAIN_Delay10MS>
				MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	0e 94 24 03 	call	0x648 <MAIN_ResetCSLine>
				ISPCC_EnterChipProgrammingMode(); // Try to sync with the slave AVR
     a5c:	0e 94 f7 10 	call	0x21ee <ISPCC_EnterChipProgrammingMode>
			}

			MAIN_ShowProgType('L');
     a60:	8c e4       	ldi	r24, 0x4C	; 76
     a62:	0e 94 58 03 	call	0x6b0 <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     a66:	a0 e3       	ldi	r26, 0x30	; 48
     a68:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     a6a:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
     a6e:	80 2d       	mov	r24, r0
     a70:	88 23       	and	r24, r24
     a72:	31 f4       	brne	.+12     	; 0xa80 <FUNCProgramAVR+0x1fc>
		
			if (!(eeprom_read_byte(&EEPROMVars.TotalLockBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     a74:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO LOCK BYTES"));
     a76:	89 e9       	ldi	r24, 0x99	; 153
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	0e 94 79 03 	call	0x6f2 <MAIN_ShowError>
     a7e:	03 c0       	rjmp	.+6      	; 0xa86 <FUNCProgramAVR+0x202>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_LOCK);
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	0e 94 5a 17 	call	0x2eb4 <PM_SendFuseLockBytes>
			}
		}

		strcpy_P(DoneFailMessageBuff, PSTR("PROGRAMMING DONE"));
     a86:	67 ea       	ldi	r22, 0xA7	; 167
     a88:	72 e0       	ldi	r23, 0x02	; 2
     a8a:	ce 01       	movw	r24, r28
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	0e 94 2f 1a 	call	0x345e <strcpy_P>

		if (Fault != ISPCC_NO_FAULT)         // Takes less code to just overwrite part of the string on fail
     a92:	00 23       	and	r16, r16
     a94:	31 f0       	breq	.+12     	; 0xaa2 <FUNCProgramAVR+0x21e>
		  strcpy_P(&DoneFailMessageBuff[12], PSTR("FAILED"));
     a96:	68 eb       	ldi	r22, 0xB8	; 184
     a98:	72 e0       	ldi	r23, 0x02	; 2
     a9a:	ce 01       	movw	r24, r28
     a9c:	0d 96       	adiw	r24, 0x0d	; 13
     a9e:	0e 94 2f 1a 	call	0x345e <strcpy_P>

		LCD_puts(DoneFailMessageBuff);
     aa2:	ce 01       	movw	r24, r28
     aa4:	01 96       	adiw	r24, 0x01	; 1
     aa6:	0e 94 2e 08 	call	0x105c <LCD_puts>

		MAIN_Delay10MS(255);
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	0e 94 3b 02 	call	0x476 <MAIN_Delay10MS>
		MAIN_Delay10MS(100);
     ab0:	84 e6       	ldi	r24, 0x64	; 100
     ab2:	0e 94 3b 02 	call	0x476 <MAIN_Delay10MS>
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <FUNCProgramAVR+0x23c>
	}
	else
	{
		MAIN_ShowError(SyncErrorMessage);
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	94 e0       	ldi	r25, 0x04	; 4
     abc:	0e 94 79 03 	call	0x6f2 <MAIN_ShowError>
	}
	
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_1MHZ);
     ac0:	80 e8       	ldi	r24, 0x80	; 128
     ac2:	80 93 61 00 	sts	0x0061, r24
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	80 93 61 00 	sts	0x0061, r24
	MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run	
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	0e 94 24 03 	call	0x648 <MAIN_ResetCSLine>
	USI_SPIOff();
     ad2:	0e 94 a8 09 	call	0x1350 <USI_SPIOff>
	DF_EnableDataflash(FALSE);
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
	SPI_SPIOFF();
     adc:	80 91 64 00 	lds	r24, 0x0064
     ae0:	84 60       	ori	r24, 0x04	; 4
     ae2:	80 93 64 00 	sts	0x0064, r24
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Green = ready
     ae6:	81 b3       	in	r24, 0x11	; 17
     ae8:	8f 7c       	andi	r24, 0xCF	; 207
     aea:	80 61       	ori	r24, 0x10	; 16
     aec:	81 bb       	out	0x11, r24	; 17
     aee:	63 96       	adiw	r28, 0x13	; 19
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	08 95       	ret

00000b04 <FUNCStoreProgram>:
}

void FUNCStoreProgram(void)
{
	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     b04:	8d e4       	ldi	r24, 0x4D	; 77
     b06:	99 e0       	ldi	r25, 0x09	; 9
     b08:	90 93 01 01 	sts	0x0101, r25
     b0c:	80 93 00 01 	sts	0x0100, r24
	SPI_SPIInit();
     b10:	0e 94 43 09 	call	0x1286 <SPI_SPIInit>
	UseExernalDF = FALSE;
     b14:	10 92 40 01 	sts	0x0140, r1
	DF_EnableDataflash(TRUE);
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>

	if (!(DF_CheckCorrectOnboardChip()))
     b1e:	0e 94 51 0b 	call	0x16a2 <DF_CheckCorrectOnboardChip>
     b22:	88 23       	and	r24, r24
     b24:	01 f1       	breq	.+64     	; 0xb66 <FUNCStoreProgram+0x62>
	  return;
			
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     b26:	80 e3       	ldi	r24, 0x30	; 48
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
     b2e:	0e 94 9b 07 	call	0xf36 <OSCCAL_Calibrate>
     b32:	80 91 c1 00 	lds	r24, 0x00C1
     b36:	80 78       	andi	r24, 0x80	; 128
     b38:	88 61       	ori	r24, 0x18	; 24
     b3a:	80 93 c1 00 	sts	0x00C1, r24
	LCD_puts_f(PSTR("*STORAGE MODE*"));
     b3e:	8f eb       	ldi	r24, 0xBF	; 191
     b40:	92 e0       	ldi	r25, 0x02	; 2
     b42:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PM_InterpretAVRISPPacket;
     b46:	8c e0       	ldi	r24, 0x0C	; 12
     b48:	95 e1       	ldi	r25, 0x15	; 21
     b4a:	90 93 03 01 	sts	0x0103, r25
     b4e:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     b52:	0e 94 8d 0f 	call	0x1f1a <V2P_RunStateMachine>
	
	DF_EnableDataflash(FALSE);
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
	SPI_SPIOFF();
     b5c:	80 91 64 00 	lds	r24, 0x0064
     b60:	84 60       	ori	r24, 0x04	; 4
     b62:	80 93 64 00 	sts	0x0064, r24
     b66:	08 95       	ret

00000b68 <FUNCClearMem>:
}

void FUNCClearMem(void)
{
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
	LCD_puts_f(PSTR("CONFIRM"));
     b6c:	8e ec       	ldi	r24, 0xCE	; 206
     b6e:	92 e0       	ldi	r25, 0x02	; 2
     b70:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
	MAIN_Delay10MS(180);
     b74:	84 eb       	ldi	r24, 0xB4	; 180
     b76:	0e 94 3b 02 	call	0x476 <MAIN_Delay10MS>

	LCD_puts_f(PSTR("<N Y>"));
     b7a:	86 ed       	ldi	r24, 0xD6	; 214
     b7c:	92 e0       	ldi	r25, 0x02	; 2
     b7e:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>

	while (1)
	{
		if (JoyStatus)
     b82:	8e b3       	in	r24, 0x1e	; 30
     b84:	88 23       	and	r24, r24
     b86:	e9 f3       	breq	.-6      	; 0xb82 <FUNCClearMem+0x1a>
		{
			if (JoyStatus & JOY_LEFT)
     b88:	8e b3       	in	r24, 0x1e	; 30
     b8a:	99 27       	eor	r25, r25
     b8c:	ec 01       	movw	r28, r24
     b8e:	c4 70       	andi	r28, 0x04	; 4
     b90:	d0 70       	andi	r29, 0x00	; 0
     b92:	82 fd       	sbrc	r24, 2
     b94:	19 c0       	rjmp	.+50     	; 0xbc8 <FUNCClearMem+0x60>
			  return;
			else if (JoyStatus & JOY_RIGHT)
     b96:	f3 9b       	sbis	0x1e, 3	; 30
     b98:	f4 cf       	rjmp	.-24     	; 0xb82 <FUNCClearMem+0x1a>
			  break;
		}
	}

	MAIN_WaitForJoyRelease();
     b9a:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>

	LCD_puts_f(WaitText);
     b9e:	80 e3       	ldi	r24, 0x30	; 48
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>

	for (uint16_t EAddr = 0; EAddr < sizeof(EEPROMVars); EAddr++)
     ba6:	ce 01       	movw	r24, r28
     ba8:	2f ef       	ldi	r18, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     baa:	dc 01       	movw	r26, r24
     bac:	02 2e       	mov	r0, r18
     bae:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	89 38       	cpi	r24, 0x89	; 137
     bb6:	91 05       	cpc	r25, r1
     bb8:	c0 f3       	brcs	.-16     	; 0xbaa <FUNCClearMem+0x42>
	  eeprom_write_byte((uint8_t*)EAddr, 0xFF);

	LCD_puts_f(PSTR("MEM CLEARED"));
     bba:	8c ed       	ldi	r24, 0xDC	; 220
     bbc:	92 e0       	ldi	r25, 0x02	; 2
     bbe:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
	MAIN_Delay10MS(255);
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	0e 94 3b 02 	call	0x476 <MAIN_Delay10MS>
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <FUNCSetContrast>:
}

void FUNCSetContrast(void)
{
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	26 97       	sbiw	r28, 0x06	; 6
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     be8:	85 e8       	ldi	r24, 0x85	; 133
     bea:	e8 2e       	mov	r14, r24
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	f8 2e       	mov	r15, r24
  uint8_t result;
  asm volatile
     bf0:	d7 01       	movw	r26, r14
     bf2:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
     bf6:	80 2d       	mov	r24, r0
     bf8:	18 2f       	mov	r17, r24
     bfa:	1f 70       	andi	r17, 0x0F	; 15
	uint8_t Buffer[6];
	uint8_t Contrast = (eeprom_read_byte(&EEPROMVars.LCDContrast) & 0x0F); // Ranges from 0-15 so mask retuns 15 on blank EEPROM (0xFF)
	
	JoyStatus = 1;                          // Invalid value to force the LCD to update
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)
     c00:	8e b3       	in	r24, 0x1e	; 30
     c02:	88 23       	and	r24, r24
     c04:	e9 f3       	breq	.-6      	; 0xc00 <FUNCSetContrast+0x32>
		{
			if (JoyStatus & JOY_UP)
     c06:	f6 9b       	sbis	0x1e, 6	; 30
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <FUNCSetContrast+0x44>
			{
				if (Contrast < 15)
     c0a:	1f 30       	cpi	r17, 0x0F	; 15
     c0c:	78 f4       	brcc	.+30     	; 0xc2c <FUNCSetContrast+0x5e>
				  Contrast++;
     c0e:	1f 5f       	subi	r17, 0xFF	; 255
     c10:	0d c0       	rjmp	.+26     	; 0xc2c <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_DOWN)
     c12:	f7 9b       	sbis	0x1e, 7	; 30
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <FUNCSetContrast+0x50>
			{
				if (Contrast > 1)          // Zero is non-visible, so 1 is the minimum
     c16:	12 30       	cpi	r17, 0x02	; 2
     c18:	48 f0       	brcs	.+18     	; 0xc2c <FUNCSetContrast+0x5e>
				  Contrast--;
     c1a:	11 50       	subi	r17, 0x01	; 1
     c1c:	07 c0       	rjmp	.+14     	; 0xc2c <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_LEFT)
     c1e:	f2 9b       	sbis	0x1e, 2	; 30
     c20:	05 c0       	rjmp	.+10     	; 0xc2c <FUNCSetContrast+0x5e>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     c22:	d7 01       	movw	r26, r14
     c24:	01 2e       	mov	r0, r17
     c26:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.LCDContrast, Contrast);
				return;
     c2a:	18 c0       	rjmp	.+48     	; 0xc5c <FUNCSetContrast+0x8e>
			}
					
			Buffer[0] = 'C';
     c2c:	83 e4       	ldi	r24, 0x43	; 67
     c2e:	89 83       	std	Y+1, r24	; 0x01
			Buffer[1] = 'T';
     c30:	84 e5       	ldi	r24, 0x54	; 84
     c32:	8a 83       	std	Y+2, r24	; 0x02
			Buffer[2] = ' ';
     c34:	80 e2       	ldi	r24, 0x20	; 32
     c36:	8b 83       	std	Y+3, r24	; 0x03

			MAIN_IntToStr((uint16_t)Contrast, &Buffer[3]);
     c38:	be 01       	movw	r22, r28
     c3a:	6c 5f       	subi	r22, 0xFC	; 252
     c3c:	7f 4f       	sbci	r23, 0xFF	; 255
     c3e:	81 2f       	mov	r24, r17
     c40:	99 27       	eor	r25, r25
     c42:	0e 94 40 03 	call	0x680 <MAIN_IntToStr>
			LCD_puts(Buffer);
     c46:	ce 01       	movw	r24, r28
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	0e 94 2e 08 	call	0x105c <LCD_puts>

			LCD_CONTRAST_LEVEL(Contrast);
     c4e:	81 2f       	mov	r24, r17
     c50:	8f 70       	andi	r24, 0x0F	; 15
     c52:	80 93 e7 00 	sts	0x00E7, r24

			MAIN_WaitForJoyRelease();
     c56:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
     c5a:	d2 cf       	rjmp	.-92     	; 0xc00 <FUNCSetContrast+0x32>
     c5c:	26 96       	adiw	r28, 0x06	; 6
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	08 95       	ret

00000c74 <FUNCSetISPSpeed>:
		}
	}
}

void FUNCSetISPSpeed(void)
{
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     c7a:	01 e0       	ldi	r16, 0x01	; 1
     c7c:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t result;
  asm volatile
     c7e:	d8 01       	movw	r26, r16
     c80:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
     c84:	80 2d       	mov	r24, r0
     c86:	c8 2f       	mov	r28, r24
	uint8_t CurrSpeed = eeprom_read_byte(&EEPROMVars.SCKDuration);

	if (CurrSpeed > ARRAY_UPPERBOUND(USISpeeds)) CurrSpeed = ARRAY_UPPERBOUND(USISpeeds); // Protection against blank EEPROM
     c88:	84 30       	cpi	r24, 0x04	; 4
     c8a:	08 f0       	brcs	.+2      	; 0xc8e <FUNCSetISPSpeed+0x1a>
     c8c:	c3 e0       	ldi	r28, 0x03	; 3

	JoyStatus = 1;                         // Invalid value to force the LCD to update
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     c92:	8e b3       	in	r24, 0x1e	; 30
     c94:	88 23       	and	r24, r24
     c96:	e9 f3       	breq	.-6      	; 0xc92 <FUNCSetISPSpeed+0x1e>
		{
			if (JoyStatus & JOY_UP)
     c98:	f6 9b       	sbis	0x1e, 6	; 30
     c9a:	06 c0       	rjmp	.+12     	; 0xca8 <FUNCSetISPSpeed+0x34>
			{
				(CurrSpeed == 0)? CurrSpeed = ARRAY_UPPERBOUND(USISpeeds) : CurrSpeed--;
     c9c:	cc 23       	and	r28, r28
     c9e:	11 f4       	brne	.+4      	; 0xca4 <FUNCSetISPSpeed+0x30>
     ca0:	c3 e0       	ldi	r28, 0x03	; 3
     ca2:	11 c0       	rjmp	.+34     	; 0xcc6 <FUNCSetISPSpeed+0x52>
     ca4:	c1 50       	subi	r28, 0x01	; 1
     ca6:	0f c0       	rjmp	.+30     	; 0xcc6 <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_DOWN)
     ca8:	f7 9b       	sbis	0x1e, 7	; 30
     caa:	06 c0       	rjmp	.+12     	; 0xcb8 <FUNCSetISPSpeed+0x44>
			{
				(CurrSpeed == ARRAY_UPPERBOUND(USISpeeds))? CurrSpeed = 0 : CurrSpeed++;
     cac:	c3 30       	cpi	r28, 0x03	; 3
     cae:	11 f4       	brne	.+4      	; 0xcb4 <FUNCSetISPSpeed+0x40>
     cb0:	c0 e0       	ldi	r28, 0x00	; 0
     cb2:	09 c0       	rjmp	.+18     	; 0xcc6 <FUNCSetISPSpeed+0x52>
     cb4:	cf 5f       	subi	r28, 0xFF	; 255
     cb6:	07 c0       	rjmp	.+14     	; 0xcc6 <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_LEFT)
     cb8:	f2 9b       	sbis	0x1e, 2	; 30
     cba:	05 c0       	rjmp	.+10     	; 0xcc6 <FUNCSetISPSpeed+0x52>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     cbc:	d8 01       	movw	r26, r16
     cbe:	0c 2e       	mov	r0, r28
     cc0:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.SCKDuration, CurrSpeed);
				return;
     cc4:	0b c0       	rjmp	.+22     	; 0xcdc <FUNCSetISPSpeed+0x68>
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f(USISpeeds[CurrSpeed]);
     cc6:	8a e0       	ldi	r24, 0x0A	; 10
     cc8:	c8 9f       	mul	r28, r24
     cca:	c0 01       	movw	r24, r0
     ccc:	11 24       	eor	r1, r1
     cce:	86 58       	subi	r24, 0x86	; 134
     cd0:	9f 4f       	sbci	r25, 0xFF	; 255
     cd2:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     cd6:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
     cda:	db cf       	rjmp	.-74     	; 0xc92 <FUNCSetISPSpeed+0x1e>
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <FUNCSetFirmMinorVer>:
		}
	}
}

void FUNCSetFirmMinorVer(void)
{
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	25 97       	sbiw	r28, 0x05	; 5
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     cfe:	96 e8       	ldi	r25, 0x86	; 134
     d00:	e9 2e       	mov	r14, r25
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	f9 2e       	mov	r15, r25
  uint8_t result;
  asm volatile
     d06:	d7 01       	movw	r26, r14
     d08:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
     d0c:	80 2d       	mov	r24, r0
     d0e:	18 2f       	mov	r17, r24
	uint8_t VerBuffer[5];
	uint8_t VerMinor = eeprom_read_byte(&EEPROMVars.FirmVerMinor);

	if (VerMinor > 9)
     d10:	8a 30       	cpi	r24, 0x0A	; 10
     d12:	08 f0       	brcs	.+2      	; 0xd16 <FUNCSetFirmMinorVer+0x32>
	  VerMinor = V2P_SW_VERSION_MINOR_DEFAULT;
     d14:	14 e0       	ldi	r17, 0x04	; 4
	
	strcpy_P(VerBuffer, PSTR("V2- "));
     d16:	68 ee       	ldi	r22, 0xE8	; 232
     d18:	72 e0       	ldi	r23, 0x02	; 2
     d1a:	ce 01       	movw	r24, r28
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	0e 94 2f 1a 	call	0x345e <strcpy_P>

	JoyStatus = 1;                        // Invalid value to force the LCD to update
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     d26:	8e b3       	in	r24, 0x1e	; 30
     d28:	88 23       	and	r24, r24
     d2a:	e9 f3       	breq	.-6      	; 0xd26 <FUNCSetFirmMinorVer+0x42>
		{
			if (JoyStatus & JOY_UP)
     d2c:	f6 9b       	sbis	0x1e, 6	; 30
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <FUNCSetFirmMinorVer+0x52>
			{
				if (VerMinor < 9)
     d30:	19 30       	cpi	r17, 0x09	; 9
     d32:	08 f4       	brcc	.+2      	; 0xd36 <FUNCSetFirmMinorVer+0x52>
				  VerMinor++;
     d34:	1f 5f       	subi	r17, 0xFF	; 255
			}
			if (JoyStatus & JOY_DOWN)
     d36:	f7 9b       	sbis	0x1e, 7	; 30
     d38:	04 c0       	rjmp	.+8      	; 0xd42 <FUNCSetFirmMinorVer+0x5e>
			{
				if (VerMinor)
     d3a:	11 23       	and	r17, r17
     d3c:	49 f0       	breq	.+18     	; 0xd50 <FUNCSetFirmMinorVer+0x6c>
				  VerMinor--;
     d3e:	11 50       	subi	r17, 0x01	; 1
     d40:	07 c0       	rjmp	.+14     	; 0xd50 <FUNCSetFirmMinorVer+0x6c>
			}
			else if (JoyStatus & JOY_LEFT)
     d42:	f2 9b       	sbis	0x1e, 2	; 30
     d44:	05 c0       	rjmp	.+10     	; 0xd50 <FUNCSetFirmMinorVer+0x6c>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     d46:	d7 01       	movw	r26, r14
     d48:	01 2e       	mov	r0, r17
     d4a:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.FirmVerMinor, VerMinor);
				return;
     d4e:	0a c0       	rjmp	.+20     	; 0xd64 <FUNCSetFirmMinorVer+0x80>
			}
			
			VerBuffer[3] = ('0' + VerMinor);
     d50:	10 5d       	subi	r17, 0xD0	; 208
     d52:	1c 83       	std	Y+4, r17	; 0x04
     d54:	10 53       	subi	r17, 0x30	; 48
			LCD_puts(VerBuffer);
     d56:	ce 01       	movw	r24, r28
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	0e 94 2e 08 	call	0x105c <LCD_puts>

			MAIN_WaitForJoyRelease();
     d5e:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
     d62:	e1 cf       	rjmp	.-62     	; 0xd26 <FUNCSetFirmMinorVer+0x42>
     d64:	25 96       	adiw	r28, 0x05	; 5
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	08 95       	ret

00000d7c <FUNCSetAutoSleepTimeOut>:
		}
	}	
}

void FUNCSetAutoSleepTimeOut(void)
{
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	28 97       	sbiw	r28, 0x08	; 8
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     d96:	27 e8       	ldi	r18, 0x87	; 135
     d98:	e2 2e       	mov	r14, r18
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	f2 2e       	mov	r15, r18
  uint8_t result;
  asm volatile
     d9e:	d7 01       	movw	r26, r14
     da0:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
     da4:	80 2d       	mov	r24, r0
     da6:	18 2f       	mov	r17, r24
	uint8_t SleepTxtBuffer[8];
	uint8_t SleepVal = eeprom_read_byte(&EEPROMVars.AutoSleepValIndex);

	if (SleepVal > 4)
     da8:	85 30       	cpi	r24, 0x05	; 5
     daa:	08 f0       	brcs	.+2      	; 0xdae <FUNCSetAutoSleepTimeOut+0x32>
	  SleepVal = 4;
     dac:	14 e0       	ldi	r17, 0x04	; 4

	strcpy_P(SleepTxtBuffer, PSTR("    SEC"));
     dae:	6d ee       	ldi	r22, 0xED	; 237
     db0:	72 e0       	ldi	r23, 0x02	; 2
     db2:	ce 01       	movw	r24, r28
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	0e 94 2f 1a 	call	0x345e <strcpy_P>
	
	JoyStatus = 1;                        // Invalid value to force the LCD to update
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     dbe:	8e b3       	in	r24, 0x1e	; 30
     dc0:	88 23       	and	r24, r24
     dc2:	e9 f3       	breq	.-6      	; 0xdbe <FUNCSetAutoSleepTimeOut+0x42>
		{
			if (JoyStatus & JOY_UP)
     dc4:	f6 9b       	sbis	0x1e, 6	; 30
     dc6:	05 c0       	rjmp	.+10     	; 0xdd2 <FUNCSetAutoSleepTimeOut+0x56>
			{
				(SleepVal == 0)? SleepVal = ARRAY_UPPERBOUND(AutoSleepTOValues) : SleepVal--;
     dc8:	11 23       	and	r17, r17
     dca:	11 f4       	brne	.+4      	; 0xdd0 <FUNCSetAutoSleepTimeOut+0x54>
     dcc:	14 e0       	ldi	r17, 0x04	; 4
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <FUNCSetAutoSleepTimeOut+0x56>
     dd0:	11 50       	subi	r17, 0x01	; 1
			}
			if (JoyStatus & JOY_DOWN)
     dd2:	f7 9b       	sbis	0x1e, 7	; 30
     dd4:	06 c0       	rjmp	.+12     	; 0xde2 <FUNCSetAutoSleepTimeOut+0x66>
			{
				(SleepVal == ARRAY_UPPERBOUND(AutoSleepTOValues))? SleepVal = 0 : SleepVal++;
     dd6:	14 30       	cpi	r17, 0x04	; 4
     dd8:	11 f4       	brne	.+4      	; 0xdde <FUNCSetAutoSleepTimeOut+0x62>
     dda:	10 e0       	ldi	r17, 0x00	; 0
     ddc:	0d c0       	rjmp	.+26     	; 0xdf8 <FUNCSetAutoSleepTimeOut+0x7c>
     dde:	1f 5f       	subi	r17, 0xFF	; 255
     de0:	09 c0       	rjmp	.+18     	; 0xdf4 <FUNCSetAutoSleepTimeOut+0x78>
			}
			else if (JoyStatus & JOY_LEFT)
     de2:	f2 9b       	sbis	0x1e, 2	; 30
     de4:	07 c0       	rjmp	.+14     	; 0xdf4 <FUNCSetAutoSleepTimeOut+0x78>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     de6:	d7 01       	movw	r26, r14
     de8:	01 2e       	mov	r0, r17
     dea:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.AutoSleepValIndex, SleepVal);
				TOUT_SetupSleepTimer();
     dee:	0e 94 fe 0b 	call	0x17fc <TOUT_SetupSleepTimer>
				return;
     df2:	1b c0       	rjmp	.+54     	; 0xe2a <FUNCSetAutoSleepTimeOut+0xae>
			}

			if (!(SleepVal))
     df4:	11 23       	and	r17, r17
     df6:	29 f4       	brne	.+10     	; 0xe02 <FUNCSetAutoSleepTimeOut+0x86>
			{
				LCD_puts_f(PSTR("OFF"));
     df8:	85 ef       	ldi	r24, 0xF5	; 245
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
     e00:	11 c0       	rjmp	.+34     	; 0xe24 <FUNCSetAutoSleepTimeOut+0xa8>
			}
			else
			{
				MAIN_IntToStr(pgm_read_byte(&AutoSleepTOValues[SleepVal]), &SleepTxtBuffer[0]);
     e02:	e1 2f       	mov	r30, r17
     e04:	ff 27       	eor	r31, r31
     e06:	e4 53       	subi	r30, 0x34	; 52
     e08:	fc 4f       	sbci	r31, 0xFC	; 252
     e0a:	84 91       	lpm	r24, Z
     e0c:	be 01       	movw	r22, r28
     e0e:	6f 5f       	subi	r22, 0xFF	; 255
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	99 27       	eor	r25, r25
     e14:	0e 94 40 03 	call	0x680 <MAIN_IntToStr>
				SleepTxtBuffer[3] = ' '; // Remove the auto-string termination from the buffer
     e18:	80 e2       	ldi	r24, 0x20	; 32
     e1a:	8c 83       	std	Y+4, r24	; 0x04
				LCD_puts(SleepTxtBuffer);
     e1c:	ce 01       	movw	r24, r28
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	0e 94 2e 08 	call	0x105c <LCD_puts>
			}

			MAIN_WaitForJoyRelease();
     e24:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
     e28:	ca cf       	rjmp	.-108    	; 0xdbe <FUNCSetAutoSleepTimeOut+0x42>
     e2a:	28 96       	adiw	r28, 0x08	; 8
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	08 95       	ret

00000e42 <FUNCSleepMode>:
		}
	}	
}

void FUNCSleepMode(void)
{
	SMCR    = ((1 << SM1) | (1 << SE));    // Power down sleep mode
     e42:	85 e0       	ldi	r24, 0x05	; 5
     e44:	83 bf       	out	0x33, r24	; 51
	LCDCRA &= ~(1 << LCDEN); 
     e46:	80 91 e4 00 	lds	r24, 0x00E4
     e4a:	8f 77       	andi	r24, 0x7F	; 127
     e4c:	80 93 e4 00 	sts	0x00E4, r24
	
	while (!(JoyStatus & JOY_UP))         // Joystick interrupt wakes the micro
	  SLEEP();
     e50:	f6 99       	sbic	0x1e, 6	; 30
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <FUNCSleepMode+0x18>
     e54:	88 95       	sleep
     e56:	f6 9b       	sbis	0x1e, 6	; 30
     e58:	fd cf       	rjmp	.-6      	; 0xe54 <FUNCSleepMode+0x12>
	   
	LCDCRA |= (1 << LCDEN);
     e5a:	80 91 e4 00 	lds	r24, 0x00E4
     e5e:	80 68       	ori	r24, 0x80	; 128
     e60:	80 93 e4 00 	sts	0x00E4, r24
	
	MAIN_WaitForJoyRelease();
     e64:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
     e68:	08 95       	ret

00000e6a <FUNCStorageInfo>:
}

void FUNCStorageInfo(void)
{
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
	uint8_t SelectedItem = 0;
     e6e:	10 e0       	ldi	r17, 0x00	; 0

	MAIN_WaitForJoyRelease();
     e70:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>

	JoyStatus = 1;                        // Invalid value to force the LCD to update
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     e78:	8e b3       	in	r24, 0x1e	; 30
     e7a:	88 23       	and	r24, r24
     e7c:	e9 f3       	breq	.-6      	; 0xe78 <FUNCStorageInfo+0xe>
		{
			if (JoyStatus & (JOY_UP | JOY_DOWN))
     e7e:	ce b3       	in	r28, 0x1e	; 30
     e80:	c0 7c       	andi	r28, 0xC0	; 192
     e82:	19 f0       	breq	.+6      	; 0xe8a <FUNCStorageInfo+0x20>
			{
				SelectedItem ^= 1;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	18 27       	eor	r17, r24
     e88:	38 c0       	rjmp	.+112    	; 0xefa <FUNCStorageInfo+0x90>
			}
			else if (JoyStatus & JOY_LEFT)
     e8a:	f2 99       	sbic	0x1e, 2	; 30
     e8c:	41 c0       	rjmp	.+130    	; 0xf10 <FUNCStorageInfo+0xa6>
			{
				return;
			}
			else if (JoyStatus & JOY_PRESS)
     e8e:	f4 9b       	sbis	0x1e, 4	; 30
     e90:	34 c0       	rjmp	.+104    	; 0xefa <FUNCStorageInfo+0x90>
			{
				if (SelectedItem == 1)    // View storage tags
     e92:	11 30       	cpi	r17, 0x01	; 1
     e94:	81 f5       	brne	.+96     	; 0xef6 <FUNCStorageInfo+0x8c>
				{
					DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     e96:	8d e4       	ldi	r24, 0x4D	; 77
     e98:	99 e0       	ldi	r25, 0x09	; 9
     e9a:	90 93 01 01 	sts	0x0101, r25
     e9e:	80 93 00 01 	sts	0x0100, r24
					SPI_SPIInit();
     ea2:	0e 94 43 09 	call	0x1286 <SPI_SPIInit>
					UseExernalDF = FALSE;
     ea6:	c0 93 40 01 	sts	0x0140, r28
					DF_EnableDataflash(TRUE);
     eaa:	81 2f       	mov	r24, r17
     eac:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>

					if (DF_CheckCorrectOnboardChip())
     eb0:	0e 94 51 0b 	call	0x16a2 <DF_CheckCorrectOnboardChip>
     eb4:	c8 2f       	mov	r28, r24
     eb6:	88 23       	and	r24, r24
     eb8:	41 f0       	breq	.+16     	; 0xeca <FUNCStorageInfo+0x60>
					{
						TM_ShowTags();
     eba:	0e 94 01 1a 	call	0x3402 <TM_ShowTags>
						SPI_SPIOFF();
     ebe:	80 91 64 00 	lds	r24, 0x0064
     ec2:	84 60       	ori	r24, 0x04	; 4
     ec4:	80 93 64 00 	sts	0x0064, r24
     ec8:	18 c0       	rjmp	.+48     	; 0xefa <FUNCStorageInfo+0x90>
					}
					else if (!(PM_GetStoredDataSize(TYPE_FLASH)))
     eca:	81 2f       	mov	r24, r17
     ecc:	0e 94 f7 13 	call	0x27ee <PM_GetStoredDataSize>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	a1 05       	cpc	r26, r1
     ed8:	b1 05       	cpc	r27, r1
     eda:	79 f4       	brne	.+30     	; 0xefa <FUNCStorageInfo+0x90>
					{
						DF_EnableDataflash(FALSE);
     edc:	8c 2f       	mov	r24, r28
     ede:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
						SPI_SPIOFF();
     ee2:	80 91 64 00 	lds	r24, 0x0064
     ee6:	84 60       	ori	r24, 0x04	; 4
     ee8:	80 93 64 00 	sts	0x0064, r24

						MAIN_ShowError(PSTR("NO STORED PRGM"));
     eec:	89 ef       	ldi	r24, 0xF9	; 249
     eee:	92 e0       	ldi	r25, 0x02	; 2
     ef0:	0e 94 79 03 	call	0x6f2 <MAIN_ShowError>
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <FUNCStorageInfo+0x90>
					}	
				}
				else                      // View stored data sizes
				{
					PM_ShowStoredItemSizes();
     ef6:	0e 94 dc 18 	call	0x31b8 <PM_ShowStoredItemSizes>
				}
			}
			
			LCD_puts_f(SIFONames[SelectedItem]);
     efa:	8f e0       	ldi	r24, 0x0F	; 15
     efc:	18 9f       	mul	r17, r24
     efe:	c0 01       	movw	r24, r0
     f00:	11 24       	eor	r1, r1
     f02:	84 5a       	subi	r24, 0xA4	; 164
     f04:	9f 4f       	sbci	r25, 0xFF	; 255
     f06:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     f0a:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
     f0e:	b4 cf       	rjmp	.-152    	; 0xe78 <FUNCStorageInfo+0xe>
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	08 95       	ret

00000f16 <FUNCGoBootloader>:
		}
	}
}

void FUNCGoBootloader(void)
{
	uint8_t MD = (MCUCR & ~(1 << JTD));   // Forces compiler to use IN, AND plus two OUTs rather than two lots of IN/AND/OUTs
     f16:	85 b7       	in	r24, 0x35	; 53
     f18:	8f 77       	andi	r24, 0x7F	; 127
	MCUCR = MD;                           // Turn on JTAG via code
     f1a:	85 bf       	out	0x35, r24	; 53
	MCUCR = MD;                           // Set bit twice as specified in datasheet        
     f1c:	85 bf       	out	0x35, r24	; 53

	TIMEOUT_SLEEP_TIMER_OFF();
     f1e:	10 92 81 00 	sts	0x0081, r1
	
	LCD_puts_f(PSTR("*JTAG ON*"));
     f22:	88 e0       	ldi	r24, 0x08	; 8
     f24:	93 e0       	ldi	r25, 0x03	; 3
     f26:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
	
	MAIN_WaitForJoyRelease();
     f2a:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
	
	WDTCR = ((1<<WDCE) | (1<<WDE));       // Enable Watchdog Timer to give reset after minimum timeout
     f2e:	88 e1       	ldi	r24, 0x18	; 24
     f30:	80 93 60 00 	sts	0x0060, r24
	while (1) {};                        // Eternal loop - when watchdog resets the AVR it will enter the bootloader
     f34:	ff cf       	rjmp	.-2      	; 0xf34 <FUNCGoBootloader+0x1e>

00000f36 <OSCCAL_Calibrate>:

volatile uint16_t ActualCount = 0;

void OSCCAL_Calibrate(void)
{
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
	uint8_t SREG_Backup;
	uint8_t LoopCount = (0x7F / 2); // Maximum range is 128, and starts from the middle, so 64 is the max number of iterations required
     f3a:	4f e3       	ldi	r20, 0x3F	; 63
	uint8_t PrevOSCALValues[2];
   
	// Reset ActualCount
	ActualCount = 0;
     f3c:	10 92 05 01 	sts	0x0105, r1
     f40:	10 92 04 01 	sts	0x0104, r1
   
	// Make sure all clock division is turned off (8Mhz RC clock)
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_8MHZ);
     f44:	80 e8       	ldi	r24, 0x80	; 128
     f46:	80 93 61 00 	sts	0x0061, r24
     f4a:	10 92 61 00 	sts	0x0061, r1

	// Inital OSCCAL of half its maximum
	OSCCAL = (0x7F / 2);
     f4e:	40 93 66 00 	sts	0x0066, r20

	// Save the SREG
	SREG_Backup = SREG;
     f52:	5f b7       	in	r21, 0x3f	; 63
    
	// Disable all timer 1 interrupts
	TIMSK1 = 0;
     f54:	10 92 6f 00 	sts	0x006F, r1
        
	// Set timer 2 to asyncronous mode (32.768KHz crystal)
	ASSR   = (1 << AS2);
     f58:	88 e0       	ldi	r24, 0x08	; 8
     f5a:	80 93 b6 00 	sts	0x00B6, r24
        
	// Timer 2 overflow interrupt enable
	TIMSK2 = (1 << TOIE2);
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	80 93 70 00 	sts	0x0070, r24

	// Enable interrupts
	sei();
     f64:	78 94       	sei

	// Start both counters with no prescaling
	TCCR1B = (1 << CS10);
     f66:	80 93 81 00 	sts	0x0081, r24
	TCCR2A = (1 << CS20);
     f6a:	80 93 b0 00 	sts	0x00B0, r24
	 	 
	// Previous OSCCAL value of 0
	PrevOSCALValues[0] = 0;
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0

	// Wait until timer 2's external 32.768KHz crystal is stable
	while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB) | (1 << OCR2UB)));
     f72:	80 91 b6 00 	lds	r24, 0x00B6
     f76:	99 27       	eor	r25, r25
     f78:	87 70       	andi	r24, 0x07	; 7
     f7a:	90 70       	andi	r25, 0x00	; 0
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	c9 f7       	brne	.-14     	; 0xf72 <OSCCAL_Calibrate+0x3c>
    
	// Clear the timer values
	TCNT1  = 0;
     f80:	90 93 85 00 	sts	0x0085, r25
     f84:	80 93 84 00 	sts	0x0084, r24
	TCNT2  = 0;
     f88:	10 92 b2 00 	sts	0x00B2, r1
    
	while (LoopCount--)
	{
		// Let it take a few readings (14ms, approx 2 readings)
		_delay_ms(14);

		PrevOSCALValues[1] = PrevOSCALValues[0];
		PrevOSCALValues[0] = OSCCAL;
        
		if (ActualCount > OSCCAL_UPPERCOUNTBOUND)       // Clock is running too fast
			OSCCAL--;
		else if (ActualCount < OSCCAL_LOWERCOUNTBOUND) // Clock is running too slow
			OSCCAL++;
		else		                                     // Clock is just right
			break;
		
		// If the routine cannot find a value withing the count tollerance,
		// it will cause the OSCCAL to hover around the closest two values.
		// If the current value is the same as the 2*n previous, exit the
		// routine as the best value has been found.
		if (OSCCAL == PrevOSCALValues[1])
		  break;
     f8c:	4e e3       	ldi	r20, 0x3E	; 62
     f8e:	ac ec       	ldi	r26, 0xCC	; 204
     f90:	b4 e6       	ldi	r27, 0x64	; 100
     f92:	c0 e0       	ldi	r28, 0x00	; 0
     f94:	d0 e0       	ldi	r29, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f96:	cd 01       	movw	r24, r26
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <OSCCAL_Calibrate+0x62>
     f9c:	32 2f       	mov	r19, r18
     f9e:	80 91 66 00 	lds	r24, 0x0066
     fa2:	28 2f       	mov	r18, r24
     fa4:	80 91 04 01 	lds	r24, 0x0104
     fa8:	90 91 05 01 	lds	r25, 0x0105
     fac:	81 50       	subi	r24, 0x01	; 1
     fae:	91 4e       	sbci	r25, 0xE1	; 225
     fb0:	20 f0       	brcs	.+8      	; 0xfba <OSCCAL_Calibrate+0x84>
     fb2:	80 91 66 00 	lds	r24, 0x0066
     fb6:	81 50       	subi	r24, 0x01	; 1
     fb8:	0a c0       	rjmp	.+20     	; 0xfce <OSCCAL_Calibrate+0x98>
     fba:	80 91 04 01 	lds	r24, 0x0104
     fbe:	90 91 05 01 	lds	r25, 0x0105
     fc2:	86 5f       	subi	r24, 0xF6	; 246
     fc4:	90 4e       	sbci	r25, 0xE0	; 224
     fc6:	58 f4       	brcc	.+22     	; 0xfde <OSCCAL_Calibrate+0xa8>
     fc8:	80 91 66 00 	lds	r24, 0x0066
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	80 93 66 00 	sts	0x0066, r24
     fd2:	80 91 66 00 	lds	r24, 0x0066
     fd6:	83 17       	cp	r24, r19
     fd8:	11 f0       	breq	.+4      	; 0xfde <OSCCAL_Calibrate+0xa8>
     fda:	41 50       	subi	r20, 0x01	; 1
     fdc:	e0 f6       	brcc	.-72     	; 0xf96 <OSCCAL_Calibrate+0x60>
	}

	// Disable all timer interrupts
	TIMSK1 = 0;
     fde:	10 92 6f 00 	sts	0x006F, r1
	TIMSK2 = 0;
     fe2:	10 92 70 00 	sts	0x0070, r1
    
	// Stop the timers
	TCCR1B = 0x00;
     fe6:	10 92 81 00 	sts	0x0081, r1
	TCCR2A = 0x00;
     fea:	10 92 b0 00 	sts	0x00B0, r1

	// Turn off timer 2 asynchronous mode
	ASSR  &= ~(1 << AS2);
     fee:	80 91 b6 00 	lds	r24, 0x00B6
     ff2:	87 7f       	andi	r24, 0xF7	; 247
     ff4:	80 93 b6 00 	sts	0x00B6, r24

	// Restore SREG
	SREG = SREG_Backup;
     ff8:	5f bf       	out	0x3f, r21	; 63
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	08 95       	ret

00001000 <__vector_5>:
        
	return;
}

ISR(TIMER2_OVF_vect, ISR_BLOCK) // Occurs 32768/256 timers per second, or 128Hz
{
    1000:	1f 92       	push	r1
    1002:	0f 92       	push	r0
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	0f 92       	push	r0
    1008:	11 24       	eor	r1, r1
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
	// Stop timer 1 so it can be read
	TCCR1B = 0x00;
    100e:	10 92 81 00 	sts	0x0081, r1
    
	// Record timer 1's value
	ActualCount = TCNT1;
    1012:	80 91 84 00 	lds	r24, 0x0084
    1016:	90 91 85 00 	lds	r25, 0x0085
    101a:	90 93 05 01 	sts	0x0105, r25
    101e:	80 93 04 01 	sts	0x0104, r24
	     
	// Reset counters and restart timer 1
	TCNT1  = 0;
    1022:	10 92 85 00 	sts	0x0085, r1
    1026:	10 92 84 00 	sts	0x0084, r1
	TCNT2  = 0;
    102a:	10 92 b2 00 	sts	0x00B2, r1
	TCCR1B = (1 << CS10);
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	80 93 81 00 	sts	0x0081, r24
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 90       	pop	r0
    103e:	1f 90       	pop	r1
    1040:	18 95       	reti

00001042 <LCD_Init>:

void LCD_Init(void)
{
	// Set the initial contrast level to maximum:
	LCDCCR = 0x0F;
    1042:	8f e0       	ldi	r24, 0x0F	; 15
    1044:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all segment pins:
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
    1048:	87 eb       	ldi	r24, 0xB7	; 183
    104a:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32Hz:
    LCDFRR  = (7<<LCDCD0);    
    104e:	87 e0       	ldi	r24, 0x07	; 7
    1050:	80 93 e6 00 	sts	0x00E6, r24

	// Enable LCD and set low power waveform, enable start of frame interrupt:
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB) | (1<<LCDIE);
    1054:	88 ec       	ldi	r24, 0xC8	; 200
    1056:	80 93 e4 00 	sts	0x00E4, r24
    105a:	08 95       	ret

0000105c <LCD_puts>:
}

void LCD_puts_f(const uint8_t *FlashData)
{
	uint8_t StrBuff[LCD_TEXTBUFFER_SIZE];

	strcpy_P(StrBuff, FlashData);
	LCD_puts(StrBuff);
}

void LCD_puts(const uint8_t *Data)
{
    105c:	dc 01       	movw	r26, r24
	uint8_t LoadB;
	
	for (LoadB = 0; LoadB < 20; LoadB++)
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	3f ef       	ldi	r19, 0xFF	; 255
    1062:	ea e1       	ldi	r30, 0x1A	; 26
    1064:	f1 e0       	ldi	r31, 0x01	; 1
	{
		uint8_t CByte = *(Data++);
    1066:	9d 91       	ld	r25, X+
	
		if ((CByte >= '*') && (CByte <= 'z') && (CByte != ' '))
    1068:	89 2f       	mov	r24, r25
    106a:	8a 52       	subi	r24, 0x2A	; 42
    106c:	81 35       	cpi	r24, 0x51	; 81
    106e:	10 f4       	brcc	.+4      	; 0x1074 <LCD_puts+0x18>
		  TextBuffer[LoadB] = (CByte - '*');
    1070:	80 83       	st	Z, r24
    1072:	03 c0       	rjmp	.+6      	; 0x107a <LCD_puts+0x1e>
		else if (CByte == 0x00)
    1074:	99 23       	and	r25, r25
    1076:	29 f0       	breq	.+10     	; 0x1082 <LCD_puts+0x26>
		  break;
		else
		  TextBuffer[LoadB] = 0xFF;		
    1078:	30 83       	st	Z, r19
    107a:	2f 5f       	subi	r18, 0xFF	; 255
    107c:	31 96       	adiw	r30, 0x01	; 1
    107e:	24 31       	cpi	r18, 0x14	; 20
    1080:	90 f3       	brcs	.-28     	; 0x1066 <LCD_puts+0xa>
	}

	ScrollMode  = ((LoadB > 6)? TRUE : FALSE);
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	27 30       	cpi	r18, 0x07	; 7
    1086:	08 f0       	brcs	.+2      	; 0x108a <LCD_puts+0x2e>
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	80 93 3a 01 	sts	0x013A, r24
	ScrollCount = 0;
    108e:	10 92 38 01 	sts	0x0138, r1
    1092:	9f ef       	ldi	r25, 0xFF	; 255
    1094:	86 e0       	ldi	r24, 0x06	; 6

	for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
		TextBuffer[LoadB++] = 0xFF;
    1096:	e2 2f       	mov	r30, r18
    1098:	ff 27       	eor	r31, r31
    109a:	e6 5e       	subi	r30, 0xE6	; 230
    109c:	fe 4f       	sbci	r31, 0xFE	; 254
    109e:	90 83       	st	Z, r25
    10a0:	2f 5f       	subi	r18, 0xFF	; 255
    10a2:	81 50       	subi	r24, 0x01	; 1
    10a4:	87 ff       	sbrs	r24, 7
    10a6:	f7 cf       	rjmp	.-18     	; 0x1096 <LCD_puts+0x3a>
	
	TextBuffer[LoadB] = 0x00;
    10a8:	e2 2f       	mov	r30, r18
    10aa:	ff 27       	eor	r31, r31
    10ac:	e6 5e       	subi	r30, 0xE6	; 230
    10ae:	fe 4f       	sbci	r31, 0xFE	; 254
    10b0:	10 82       	st	Z, r1
	StrStart   = 0;
    10b2:	10 92 36 01 	sts	0x0136, r1
	StrEnd     = LoadB;	
    10b6:	20 93 35 01 	sts	0x0135, r18
	DelayCount = LCD_DELAYCOUNT_DEFAULT;
    10ba:	8a e0       	ldi	r24, 0x0A	; 10
    10bc:	80 93 39 01 	sts	0x0139, r24

	UpdateLCD  = TRUE;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	80 93 37 01 	sts	0x0137, r24
    10c6:	08 95       	ret

000010c8 <LCD_puts_f>:
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	64 97       	sbiw	r28, 0x14	; 20
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	bc 01       	movw	r22, r24
    10de:	ce 01       	movw	r24, r28
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	0e 94 2f 1a 	call	0x345e <strcpy_P>
    10e6:	ce 01       	movw	r24, r28
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	0e 94 2e 08 	call	0x105c <LCD_puts>
    10ee:	64 96       	adiw	r28, 0x14	; 20
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <LCD_WriteChar>:
}

void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit)
{
    1100:	e8 2f       	mov	r30, r24
	uint16_t SegData  = 0x00;
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1));
    1106:	86 2f       	mov	r24, r22
    1108:	86 95       	lsr	r24
    110a:	a8 2f       	mov	r26, r24
    110c:	bb 27       	eor	r27, r27
    110e:	aa 5f       	subi	r26, 0xFA	; 250
    1110:	be 4f       	sbci	r27, 0xFE	; 254

	if (Byte != 0xFF)
    1112:	ef 3f       	cpi	r30, 0xFF	; 255
    1114:	39 f0       	breq	.+14     	; 0x1124 <LCD_WriteChar+0x24>
	  SegData = pgm_read_word(&LCD_SegTable[Byte]);	
    1116:	ff 27       	eor	r31, r31
    1118:	ee 0f       	add	r30, r30
    111a:	ff 1f       	adc	r31, r31
    111c:	ee 5e       	subi	r30, 0xEE	; 238
    111e:	fc 4f       	sbci	r31, 0xFC	; 252
    1120:	25 91       	lpm	r18, Z+
    1122:	34 91       	lpm	r19, Z
    1124:	77 27       	eor	r23, r23
    1126:	61 70       	andi	r22, 0x01	; 1
    1128:	70 70       	andi	r23, 0x00	; 0
    112a:	43 e0       	ldi	r20, 0x03	; 3

	for (uint8_t BNib = 0; BNib < 4; BNib++)
	{
		uint8_t Mask          = 0xF0;
    112c:	50 ef       	ldi	r21, 0xF0	; 240
		uint8_t MaskedSegData = (SegData & 0x0000F);
    112e:	92 2f       	mov	r25, r18
    1130:	9f 70       	andi	r25, 0x0F	; 15
	
		if (Digit & 0x01)
    1132:	61 15       	cp	r22, r1
    1134:	71 05       	cpc	r23, r1
    1136:	19 f0       	breq	.+6      	; 0x113e <LCD_WriteChar+0x3e>
		{
			Mask = 0x0F;
    1138:	5f e0       	ldi	r21, 0x0F	; 15
			MaskedSegData <<= 4;
    113a:	92 95       	swap	r25
    113c:	90 7f       	andi	r25, 0xF0	; 240
		}
		
		*BuffPtr = ((*BuffPtr & Mask) | MaskedSegData);
    113e:	8c 91       	ld	r24, X
    1140:	85 23       	and	r24, r21
    1142:	89 2b       	or	r24, r25
    1144:	8c 93       	st	X, r24

		SegData >>= 4;
    1146:	84 e0       	ldi	r24, 0x04	; 4
    1148:	36 95       	lsr	r19
    114a:	27 95       	ror	r18
    114c:	8a 95       	dec	r24
    114e:	e1 f7       	brne	.-8      	; 0x1148 <LCD_WriteChar+0x48>
		BuffPtr  += 5;
    1150:	15 96       	adiw	r26, 0x05	; 5
    1152:	41 50       	subi	r20, 0x01	; 1
    1154:	47 ff       	sbrs	r20, 7
    1156:	ea cf       	rjmp	.-44     	; 0x112c <LCD_WriteChar+0x2c>
    1158:	08 95       	ret

0000115a <__vector_22>:
	}
}

ISR(LCD_vect, ISR_NOBLOCK)
{
    115a:	78 94       	sei
    115c:	1f 92       	push	r1
    115e:	0f 92       	push	r0
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	0f 92       	push	r0
    1164:	11 24       	eor	r1, r1
    1166:	2f 93       	push	r18
    1168:	3f 93       	push	r19
    116a:	4f 93       	push	r20
    116c:	5f 93       	push	r21
    116e:	6f 93       	push	r22
    1170:	7f 93       	push	r23
    1172:	8f 93       	push	r24
    1174:	9f 93       	push	r25
    1176:	af 93       	push	r26
    1178:	bf 93       	push	r27
    117a:	cf 93       	push	r28
    117c:	ef 93       	push	r30
    117e:	ff 93       	push	r31
	if (ScrollMode)
    1180:	80 91 3a 01 	lds	r24, 0x013A
    1184:	88 23       	and	r24, r24
    1186:	99 f0       	breq	.+38     	; 0x11ae <__vector_22+0x54>
	{
		if (DelayCount)
    1188:	80 91 39 01 	lds	r24, 0x0139
    118c:	88 23       	and	r24, r24
    118e:	21 f0       	breq	.+8      	; 0x1198 <__vector_22+0x3e>
		{
			DelayCount--;
    1190:	81 50       	subi	r24, 0x01	; 1
    1192:	80 93 39 01 	sts	0x0139, r24
    1196:	0b c0       	rjmp	.+22     	; 0x11ae <__vector_22+0x54>
		}
		else
		{
			if (!(ScrollCount))
    1198:	80 91 38 01 	lds	r24, 0x0138
    119c:	88 23       	and	r24, r24
    119e:	21 f4       	brne	.+8      	; 0x11a8 <__vector_22+0x4e>
			  UpdateLCD = TRUE;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 37 01 	sts	0x0137, r24
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <__vector_22+0x54>
			else
			  ScrollCount--;
    11a8:	81 50       	subi	r24, 0x01	; 1
    11aa:	80 93 38 01 	sts	0x0138, r24
		}
	}

	if (UpdateLCD)
    11ae:	80 91 37 01 	lds	r24, 0x0137
    11b2:	88 23       	and	r24, r24
    11b4:	39 f1       	breq	.+78     	; 0x1204 <__vector_22+0xaa>
	{
		for (uint8_t Character = 0; Character < 6; Character++)
    11b6:	c0 e0       	ldi	r28, 0x00	; 0
		{
			uint8_t Byte = (StrStart + Character);
    11b8:	80 91 36 01 	lds	r24, 0x0136
    11bc:	8c 0f       	add	r24, r28

			if (Byte >= StrEnd)
    11be:	90 91 35 01 	lds	r25, 0x0135
    11c2:	e8 2f       	mov	r30, r24
    11c4:	ff 27       	eor	r31, r31
    11c6:	89 17       	cp	r24, r25
    11c8:	10 f0       	brcs	.+4      	; 0x11ce <__vector_22+0x74>
			  Byte = TextBuffer[Byte - StrEnd];
    11ca:	e9 1b       	sub	r30, r25
    11cc:	f1 09       	sbc	r31, r1
			else
			  Byte = TextBuffer[Byte];
    11ce:	e6 5e       	subi	r30, 0xE6	; 230
    11d0:	fe 4f       	sbci	r31, 0xFE	; 254
    11d2:	80 81       	ld	r24, Z
			
			LCD_WriteChar(Byte, Character);
    11d4:	6c 2f       	mov	r22, r28
    11d6:	0e 94 80 08 	call	0x1100 <LCD_WriteChar>
    11da:	cf 5f       	subi	r28, 0xFF	; 255
    11dc:	c6 30       	cpi	r28, 0x06	; 6
    11de:	60 f3       	brcs	.-40     	; 0x11b8 <__vector_22+0x5e>
		}
		
		if (StrStart++ == StrEnd)
    11e0:	80 91 36 01 	lds	r24, 0x0136
    11e4:	98 2f       	mov	r25, r24
    11e6:	8f 5f       	subi	r24, 0xFF	; 255
    11e8:	80 93 36 01 	sts	0x0136, r24
    11ec:	80 91 35 01 	lds	r24, 0x0135
    11f0:	98 17       	cp	r25, r24
    11f2:	19 f4       	brne	.+6      	; 0x11fa <__vector_22+0xa0>
		  StrStart = 1;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	80 93 36 01 	sts	0x0136, r24
		
		ScrollCount = LCD_SCROLLCOUNT_DEFAULT;
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	80 93 38 01 	sts	0x0138, r24
		UpdateLCD = FALSE;
    1200:	10 92 37 01 	sts	0x0137, r1
    1204:	ac ee       	ldi	r26, 0xEC	; 236
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e6 e0       	ldi	r30, 0x06	; 6
    120a:	f1 e0       	ldi	r31, 0x01	; 1
    120c:	93 e1       	ldi	r25, 0x13	; 19
	}

	for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++)
	  *(pLCDREG + LCDChar) = SegBuffer[LCDChar];
    120e:	81 91       	ld	r24, Z+
    1210:	8d 93       	st	X+, r24
    1212:	91 50       	subi	r25, 0x01	; 1
    1214:	97 ff       	sbrs	r25, 7
    1216:	fb cf       	rjmp	.-10     	; 0x120e <__vector_22+0xb4>
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	cf 91       	pop	r28
    121e:	bf 91       	pop	r27
    1220:	af 91       	pop	r26
    1222:	9f 91       	pop	r25
    1224:	8f 91       	pop	r24
    1226:	7f 91       	pop	r23
    1228:	6f 91       	pop	r22
    122a:	5f 91       	pop	r21
    122c:	4f 91       	pop	r20
    122e:	3f 91       	pop	r19
    1230:	2f 91       	pop	r18
    1232:	0f 90       	pop	r0
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	0f 90       	pop	r0
    1238:	1f 90       	pop	r1
    123a:	18 95       	reti

0000123c <USART_Init>:
*****************************************************************************/
void USART_Init(void)
{
    // Set baud rate
    UBRRH = (uint8_t)(USART_BAUDVALUE >> 8);
    123c:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = (uint8_t)(USART_BAUDVALUE);
    1240:	87 e0       	ldi	r24, 0x07	; 7
    1242:	80 93 c4 00 	sts	0x00C4, r24

    // Double speed
	UCSRA = (USART_DOUBLESPEED << U2X);
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	80 93 c0 00 	sts	0x00C0, r24

    // Enable recieve complete interrupt
	UCSRB = (1 << RXCIE);
    124c:	80 e8       	ldi	r24, 0x80	; 128
    124e:	80 93 c1 00 	sts	0x00C1, r24
	 
    // Async. mode, 8N1
    UCSRC = (3 << UCSZ0);
    1252:	86 e0       	ldi	r24, 0x06	; 6
    1254:	80 93 c2 00 	sts	0x00C2, r24
	 
	 // Initalise ringbuffer
	BUFF_InitialiseBuffer();
    1258:	0e 94 b4 0b 	call	0x1768 <BUFF_InitialiseBuffer>
    125c:	08 95       	ret

0000125e <USART_Tx>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_Tx(const char data)
{
    125e:	98 2f       	mov	r25, r24
    while (!(UCSRA & (1 << UDRE)));
    1260:	80 91 c0 00 	lds	r24, 0x00C0
    1264:	85 ff       	sbrs	r24, 5
    1266:	fc cf       	rjmp	.-8      	; 0x1260 <USART_Tx+0x2>
    UDR = data;
    1268:	90 93 c6 00 	sts	0x00C6, r25
    126c:	08 95       	ret

0000126e <USART_Rx>:
}

/*****************************************************************************
*
*   Function name : Usart_Rx
*
*   Returns :       char: byte received
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART
*
*****************************************************************************/
char USART_Rx(void)
{
    while (!(BuffElements) && !(PacketTimeOut)) {};
    126e:	80 91 b7 02 	lds	r24, 0x02B7
    1272:	88 23       	and	r24, r24
    1274:	21 f4       	brne	.+8      	; 0x127e <USART_Rx+0x10>
    1276:	80 91 49 01 	lds	r24, 0x0149
    127a:	88 23       	and	r24, r24
    127c:	c1 f3       	breq	.-16     	; 0x126e <USART_Rx>
    return BUFF_GetBuffByte();
    127e:	0e 94 c1 0b 	call	0x1782 <BUFF_GetBuffByte>
}
    1282:	99 27       	eor	r25, r25
    1284:	08 95       	ret

00001286 <SPI_SPIInit>:
// ======================================================================================

void SPI_SPIInit(void)
{
	PRR &= ~(1 << PRSPI);              // Enable the SPI system by clearing the power save register SPI disable bit
    1286:	80 91 64 00 	lds	r24, 0x0064
    128a:	8b 7f       	andi	r24, 0xFB	; 251
    128c:	80 93 64 00 	sts	0x0064, r24

	// Master, Sample falling edge (setup rising), Fosc/2 speed (8Mhz/2 = 4MHz)
	SPSR = (1 << SPI2X);
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	8d bd       	out	0x2d, r24	; 45
	SPCR = ((1 << SPE) | (1 << MSTR) | (1 << CPHA) | (1 << CPOL));
    1294:	8c e5       	ldi	r24, 0x5C	; 92
    1296:	8c bd       	out	0x2c, r24	; 44
    1298:	08 95       	ret

0000129a <SPI_SPITransmit>:
}

uint8_t SPI_SPITransmit(const uint8_t Data)
{
	SPDR = Data;                       // Loading a byte into the register starts the transmission
    129a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));    // Wait until transmission completed
    129c:	0d b4       	in	r0, 0x2d	; 45
    129e:	07 fe       	sbrs	r0, 7
    12a0:	fd cf       	rjmp	.-6      	; 0x129c <SPI_SPITransmit+0x2>
	return SPDR;
    12a2:	8e b5       	in	r24, 0x2e	; 46
}
    12a4:	99 27       	eor	r25, r25
    12a6:	08 95       	ret

000012a8 <SPI_SPITransmitWord>:

uint8_t SPI_SPITransmitWord(const uint16_t Data)
{
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	8c 01       	movw	r16, r24
	SPI_SPITransmit((uint8_t)(Data >> 8));
    12ae:	81 2f       	mov	r24, r17
    12b0:	99 27       	eor	r25, r25
    12b2:	0e 94 4d 09 	call	0x129a <SPI_SPITransmit>
	return SPI_SPITransmit((uint8_t)Data);
    12b6:	80 2f       	mov	r24, r16
    12b8:	0e 94 4d 09 	call	0x129a <SPI_SPITransmit>
}
    12bc:	99 27       	eor	r25, r25
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	08 95       	ret

000012c4 <__vector_17>:
 *  have to stop the timer tick.
 *  For all modes the USIDR contents are stored and flags are updated.
 */
ISR(USI_OVERFLOW_vect, ISR_BLOCK)
{
    12c4:	1f 92       	push	r1
    12c6:	0f 92       	push	r0
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	0f 92       	push	r0
    12cc:	11 24       	eor	r1, r1
    12ce:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	TIMSK0 &= ~(1<<OCIE0A);
    12d0:	80 91 6e 00 	lds	r24, 0x006E
    12d4:	8d 7f       	andi	r24, 0xFD	; 253
    12d6:	80 93 6e 00 	sts	0x006E, r24
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
    12da:	80 e4       	ldi	r24, 0x40	; 64
    12dc:	80 93 b9 00 	sts	0x00B9, r24
	TransferComplete = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	80 93 71 02 	sts	0x0271, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
    12e6:	80 91 ba 00 	lds	r24, 0x00BA
    12ea:	80 93 72 02 	sts	0x0272, r24
    12ee:	8f 91       	pop	r24
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f 90       	pop	r0
    12f6:	1f 90       	pop	r1
    12f8:	18 95       	reti

000012fa <USI_SPISetSpeed>:
}



/*! \brief  Initialize USI as SPI master.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from slave to master mode.
 *  Note that the stored USIDR value is cleared.
 *
 */
void USI_SPIInitMaster(const uint8_t Freq)
{
	// Configure port directions.
 	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN);  // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                       // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                        // Pull-ups.
	USI_OUT_REG &= ~(1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Pull-ups.
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = USI_CONTROL_REG_FLAGS;

	// Set the compare and prescaler for the requested frequency:
	USI_SPISetSpeed(Freq);
	
	// Init driver status register.
	TransferComplete = 0;
	
	storedUSIDR = 0;
}

void USI_SPIOff(void)
{
	USI_DIR_REG &= ~((1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN));                        // Inputs.
	USI_OUT_REG &= ~((1<<USI_DATAIN_PIN)  | (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN)); // Pull-ups.
	DDRF  &= ~(1 << 6);
	PORTF &= ~(1 << 6);
	
	USI_STOPUSITIMER();
}

/*! \brief  Put one byte on bus.
 *
 *  Use this function like you would write to the SPDR register in the native SPI module.
 *  Calling this function in master mode starts a transfer, while in slave mode, a
 *  byte will be prepared for the next transfer initiated by the master device.
 *  If a transfer is in progress, this function will set the write collision flag
 *  and return without altering the data registers.
 *
 *  \returns  Value returned by slave.
 */
uint8_t USI_SPITransmit(uint8_t val)
{
	// Reinit flags.
	TransferComplete = 0;

	// Put data in USI data register.
	USIDR = val;
	
	TIFR0  |= (1<<OCF0A);  // Clear compare match flag.
	TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.

	// Clear the timer 0 value
	TCNT0 = 0;

	while (!(TransferComplete));

	return storedUSIDR;
}

uint8_t USI_SPITransmitWord(const uint16_t val )
{
	USI_SPITransmit((uint8_t)(val >> 8));
	return USI_SPITransmit((uint8_t)val);
}

void USI_SPIToggleClock(void)
{
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);	
}

void USI_SPISetSpeed(const uint8_t Freq)
{
    12fa:	48 2f       	mov	r20, r24
	for (uint8_t MatchIndex = 0; MatchIndex < USI_PRESET_SPEEDS; MatchIndex++)
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	6f e7       	ldi	r22, 0x7F	; 127
    1300:	73 e0       	ldi	r23, 0x03	; 3
    1302:	9b 01       	movw	r18, r22
    1304:	21 50       	subi	r18, 0x01	; 1
    1306:	30 40       	sbci	r19, 0x00	; 0
	{
		if ((pgm_read_byte(&USIPSValues[MatchIndex][0]) == Freq) || (MatchIndex == (USI_PRESET_SPEEDS - 1)))
    1308:	f9 01       	movw	r30, r18
    130a:	84 91       	lpm	r24, Z
    130c:	84 17       	cp	r24, r20
    130e:	11 f0       	breq	.+4      	; 0x1314 <USI_SPISetSpeed+0x1a>
    1310:	93 30       	cpi	r25, 0x03	; 3
    1312:	31 f4       	brne	.+12     	; 0x1320 <USI_SPISetSpeed+0x26>
		{
			// Init Output Compare Register.
			OCR0A = pgm_read_byte(&USIPSValues[MatchIndex][1]);
    1314:	fb 01       	movw	r30, r22
    1316:	84 91       	lpm	r24, Z
    1318:	87 bd       	out	0x27, r24	; 39

			// Enable 'Clear Timer on Compare match' and set prescaler, which starts the timer
			TCCR0A = ((1<<WGM01) | TC0_PS_1);
    131a:	89 e0       	ldi	r24, 0x09	; 9
    131c:	84 bd       	out	0x24, r24	; 36
				
			return;
    131e:	08 95       	ret
    1320:	9f 5f       	subi	r25, 0xFF	; 255
    1322:	2e 5f       	subi	r18, 0xFE	; 254
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	6e 5f       	subi	r22, 0xFE	; 254
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	94 30       	cpi	r25, 0x04	; 4
    132c:	68 f3       	brcs	.-38     	; 0x1308 <USI_SPISetSpeed+0xe>
    132e:	08 95       	ret

00001330 <USI_SPIInitMaster>:
    1330:	9d b1       	in	r25, 0x0d	; 13
    1332:	90 65       	ori	r25, 0x50	; 80
    1334:	9d b9       	out	0x0d, r25	; 13
    1336:	6d 98       	cbi	0x0d, 5	; 13
    1338:	75 9a       	sbi	0x0e, 5	; 14
    133a:	76 98       	cbi	0x0e, 6	; 14
    133c:	9a e5       	ldi	r25, 0x5A	; 90
    133e:	90 93 b8 00 	sts	0x00B8, r25
    1342:	0e 94 7d 09 	call	0x12fa <USI_SPISetSpeed>
    1346:	10 92 71 02 	sts	0x0271, r1
    134a:	10 92 72 02 	sts	0x0272, r1
    134e:	08 95       	ret

00001350 <USI_SPIOff>:
    1350:	8d b1       	in	r24, 0x0d	; 13
    1352:	8f 7a       	andi	r24, 0xAF	; 175
    1354:	8d b9       	out	0x0d, r24	; 13
    1356:	8e b1       	in	r24, 0x0e	; 14
    1358:	8f 78       	andi	r24, 0x8F	; 143
    135a:	8e b9       	out	0x0e, r24	; 14
    135c:	86 98       	cbi	0x10, 6	; 16
    135e:	8e 98       	cbi	0x11, 6	; 17
    1360:	14 bc       	out	0x24, r1	; 36
    1362:	08 95       	ret

00001364 <USI_SPITransmit>:
    1364:	10 92 71 02 	sts	0x0271, r1
    1368:	80 93 ba 00 	sts	0x00BA, r24
    136c:	a9 9a       	sbi	0x15, 1	; 21
    136e:	80 91 6e 00 	lds	r24, 0x006E
    1372:	82 60       	ori	r24, 0x02	; 2
    1374:	80 93 6e 00 	sts	0x006E, r24
    1378:	16 bc       	out	0x26, r1	; 38
    137a:	80 91 71 02 	lds	r24, 0x0271
    137e:	88 23       	and	r24, r24
    1380:	e1 f3       	breq	.-8      	; 0x137a <USI_SPITransmit+0x16>
    1382:	80 91 72 02 	lds	r24, 0x0272
    1386:	99 27       	eor	r25, r25
    1388:	08 95       	ret

0000138a <USI_SPITransmitWord>:
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	8c 01       	movw	r16, r24
    1390:	81 2f       	mov	r24, r17
    1392:	99 27       	eor	r25, r25
    1394:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    1398:	80 2f       	mov	r24, r16
    139a:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    139e:	99 27       	eor	r25, r25
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	08 95       	ret

000013a6 <USI_SPIToggleClock>:
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	0e 94 12 03 	call	0x624 <MAIN_Delay1MS>
    13ac:	80 91 b8 00 	lds	r24, 0x00B8
    13b0:	81 60       	ori	r24, 0x01	; 1
    13b2:	80 93 b8 00 	sts	0x00B8, r24
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	0e 94 12 03 	call	0x624 <MAIN_Delay1MS>
    13bc:	80 91 b8 00 	lds	r24, 0x00B8
    13c0:	81 60       	ori	r24, 0x01	; 1
    13c2:	80 93 b8 00 	sts	0x00B8, r24
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	0e 94 12 03 	call	0x624 <MAIN_Delay1MS>
    13cc:	08 95       	ret

000013ce <DF_EnableDataflash>:
	DF_WaitWhileBusy();
}

void DF_EnableDataflash(const uint8_t Enabled)
{
    13ce:	90 91 40 01 	lds	r25, 0x0140
	if (Enabled == TRUE)
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	31 f4       	brne	.+12     	; 0x13e2 <DF_EnableDataflash+0x14>
	{
		if (UseExernalDF == TRUE)
    13d6:	91 30       	cpi	r25, 0x01	; 1
    13d8:	11 f4       	brne	.+4      	; 0x13de <DF_EnableDataflash+0x10>
		  MAIN_ResetCSLine(MAIN_RESETCS_EXTDFACTIVE);
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	05 c0       	rjmp	.+10     	; 0x13e8 <DF_EnableDataflash+0x1a>
		else
		  PORTB &= ~(1 << 0);
    13de:	28 98       	cbi	0x05, 0	; 5
    13e0:	08 95       	ret
	}
	else
	{
		if (UseExernalDF == TRUE)
    13e2:	91 30       	cpi	r25, 0x01	; 1
    13e4:	21 f4       	brne	.+8      	; 0x13ee <DF_EnableDataflash+0x20>
		  MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE);
    13e6:	89 2f       	mov	r24, r25
    13e8:	0e 94 24 03 	call	0x648 <MAIN_ResetCSLine>
    13ec:	08 95       	ret
		else
		  PORTB |= (1 << 0);
    13ee:	28 9a       	sbi	0x05, 0	; 5
    13f0:	08 95       	ret

000013f2 <DF_ReadBufferByte>:
    13f2:	ef 92       	push	r14
    13f4:	ff 92       	push	r15
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	7c 01       	movw	r14, r24
    13fc:	00 91 00 01 	lds	r16, 0x0100
    1400:	10 91 01 01 	lds	r17, 0x0101
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    1410:	84 e5       	ldi	r24, 0x54	; 84
    1412:	f8 01       	movw	r30, r16
    1414:	09 95       	icall
    1416:	8f 2d       	mov	r24, r15
    1418:	99 27       	eor	r25, r25
    141a:	f8 01       	movw	r30, r16
    141c:	09 95       	icall
    141e:	8e 2d       	mov	r24, r14
    1420:	f8 01       	movw	r30, r16
    1422:	09 95       	icall
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	f8 01       	movw	r30, r16
    1428:	09 95       	icall
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	f8 01       	movw	r30, r16
    142e:	09 95       	icall
    1430:	99 27       	eor	r25, r25
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	08 95       	ret

0000143c <DF_ContinuousReadEnable>:
    143c:	ef 92       	push	r14
    143e:	ff 92       	push	r15
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	8c 01       	movw	r16, r24
    144a:	7b 01       	movw	r14, r22
    144c:	c0 91 00 01 	lds	r28, 0x0100
    1450:	d0 91 01 01 	lds	r29, 0x0101
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    1460:	88 e6       	ldi	r24, 0x68	; 104
    1462:	fe 01       	movw	r30, r28
    1464:	09 95       	icall
    1466:	8a b5       	in	r24, 0x2a	; 42
    1468:	98 01       	movw	r18, r16
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DF_ContinuousReadEnable+0x34>
    146c:	36 95       	lsr	r19
    146e:	27 95       	ror	r18
    1470:	8a 95       	dec	r24
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DF_ContinuousReadEnable+0x30>
    1474:	c9 01       	movw	r24, r18
    1476:	fe 01       	movw	r30, r28
    1478:	09 95       	icall
    147a:	8b b5       	in	r24, 0x2b	; 43
    147c:	98 01       	movw	r18, r16
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DF_ContinuousReadEnable+0x48>
    1480:	22 0f       	add	r18, r18
    1482:	33 1f       	adc	r19, r19
    1484:	8a 95       	dec	r24
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DF_ContinuousReadEnable+0x44>
    1488:	8f 2d       	mov	r24, r15
    148a:	99 27       	eor	r25, r25
    148c:	82 0f       	add	r24, r18
    148e:	fe 01       	movw	r30, r28
    1490:	09 95       	icall
    1492:	8e 2d       	mov	r24, r14
    1494:	fe 01       	movw	r30, r28
    1496:	09 95       	icall
    1498:	03 e0       	ldi	r16, 0x03	; 3
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	fe 01       	movw	r30, r28
    149e:	09 95       	icall
    14a0:	01 50       	subi	r16, 0x01	; 1
    14a2:	07 ff       	sbrs	r16, 7
    14a4:	fa cf       	rjmp	.-12     	; 0x149a <DF_ContinuousReadEnable+0x5e>
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	08 95       	ret

000014b4 <DF_BufferWriteEnable>:
    14b4:	ef 92       	push	r14
    14b6:	ff 92       	push	r15
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	7c 01       	movw	r14, r24
    14be:	00 91 00 01 	lds	r16, 0x0100
    14c2:	10 91 01 01 	lds	r17, 0x0101
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    14d2:	84 e8       	ldi	r24, 0x84	; 132
    14d4:	f8 01       	movw	r30, r16
    14d6:	09 95       	icall
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	f8 01       	movw	r30, r16
    14dc:	09 95       	icall
    14de:	8f 2d       	mov	r24, r15
    14e0:	99 27       	eor	r25, r25
    14e2:	f8 01       	movw	r30, r16
    14e4:	09 95       	icall
    14e6:	8e 2d       	mov	r24, r14
    14e8:	f8 01       	movw	r30, r16
    14ea:	09 95       	icall
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	ff 90       	pop	r15
    14f2:	ef 90       	pop	r14
    14f4:	08 95       	ret

000014f6 <DF_WaitWhileBusy>:
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	c0 91 00 01 	lds	r28, 0x0100
    14fe:	d0 91 01 01 	lds	r29, 0x0101
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    150e:	87 e5       	ldi	r24, 0x57	; 87
    1510:	fe 01       	movw	r30, r28
    1512:	09 95       	icall
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	fe 01       	movw	r30, r28
    1518:	09 95       	icall
    151a:	88 23       	and	r24, r24
    151c:	dc f7       	brge	.-10     	; 0x1514 <DF_WaitWhileBusy+0x1e>
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	08 95       	ret

00001524 <DF_EraseBlock>:
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	7c 01       	movw	r14, r24
    152e:	00 91 00 01 	lds	r16, 0x0100
    1532:	10 91 01 01 	lds	r17, 0x0101
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    1542:	80 e5       	ldi	r24, 0x50	; 80
    1544:	f8 01       	movw	r30, r16
    1546:	09 95       	icall
    1548:	8f 2d       	mov	r24, r15
    154a:	99 27       	eor	r25, r25
    154c:	f8 01       	movw	r30, r16
    154e:	09 95       	icall
    1550:	8e 2d       	mov	r24, r14
    1552:	f8 01       	movw	r30, r16
    1554:	09 95       	icall
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	f8 01       	movw	r30, r16
    155a:	09 95       	icall
    155c:	0e 94 7b 0a 	call	0x14f6 <DF_WaitWhileBusy>
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	ff 90       	pop	r15
    1566:	ef 90       	pop	r14
    1568:	08 95       	ret

0000156a <DF_CopyFlashPageToBuffer>:
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	7c 01       	movw	r14, r24
    1574:	00 91 00 01 	lds	r16, 0x0100
    1578:	10 91 01 01 	lds	r17, 0x0101
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    1588:	83 e5       	ldi	r24, 0x53	; 83
    158a:	f8 01       	movw	r30, r16
    158c:	09 95       	icall
    158e:	8a b5       	in	r24, 0x2a	; 42
    1590:	97 01       	movw	r18, r14
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DF_CopyFlashPageToBuffer+0x2e>
    1594:	36 95       	lsr	r19
    1596:	27 95       	ror	r18
    1598:	8a 95       	dec	r24
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DF_CopyFlashPageToBuffer+0x2a>
    159c:	c9 01       	movw	r24, r18
    159e:	f8 01       	movw	r30, r16
    15a0:	09 95       	icall
    15a2:	8b b5       	in	r24, 0x2b	; 43
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DF_CopyFlashPageToBuffer+0x40>
    15a6:	ee 0c       	add	r14, r14
    15a8:	ff 1c       	adc	r15, r15
    15aa:	8a 95       	dec	r24
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <DF_CopyFlashPageToBuffer+0x3c>
    15ae:	c7 01       	movw	r24, r14
    15b0:	f8 01       	movw	r30, r16
    15b2:	09 95       	icall
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	f8 01       	movw	r30, r16
    15b8:	09 95       	icall
    15ba:	0e 94 7b 0a 	call	0x14f6 <DF_WaitWhileBusy>
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	ff 90       	pop	r15
    15c4:	ef 90       	pop	r14
    15c6:	08 95       	ret

000015c8 <DF_CopyBufferToFlashPage>:
    15c8:	ef 92       	push	r14
    15ca:	ff 92       	push	r15
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	7c 01       	movw	r14, r24
    15d2:	00 91 00 01 	lds	r16, 0x0100
    15d6:	10 91 01 01 	lds	r17, 0x0101
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    15e6:	83 e8       	ldi	r24, 0x83	; 131
    15e8:	f8 01       	movw	r30, r16
    15ea:	09 95       	icall
    15ec:	8a b5       	in	r24, 0x2a	; 42
    15ee:	97 01       	movw	r18, r14
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DF_CopyBufferToFlashPage+0x2e>
    15f2:	36 95       	lsr	r19
    15f4:	27 95       	ror	r18
    15f6:	8a 95       	dec	r24
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <DF_CopyBufferToFlashPage+0x2a>
    15fa:	c9 01       	movw	r24, r18
    15fc:	f8 01       	movw	r30, r16
    15fe:	09 95       	icall
    1600:	8b b5       	in	r24, 0x2b	; 43
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <DF_CopyBufferToFlashPage+0x40>
    1604:	ee 0c       	add	r14, r14
    1606:	ff 1c       	adc	r15, r15
    1608:	8a 95       	dec	r24
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <DF_CopyBufferToFlashPage+0x3c>
    160c:	c7 01       	movw	r24, r14
    160e:	f8 01       	movw	r30, r16
    1610:	09 95       	icall
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	f8 01       	movw	r30, r16
    1616:	09 95       	icall
    1618:	0e 94 7b 0a 	call	0x14f6 <DF_WaitWhileBusy>
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	ff 90       	pop	r15
    1622:	ef 90       	pop	r14
    1624:	08 95       	ret

00001626 <DF_GetChipCharacteristics>:
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	00 91 00 01 	lds	r16, 0x0100
    162e:	10 91 01 01 	lds	r17, 0x0101
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    163e:	87 e5       	ldi	r24, 0x57	; 87
    1640:	f8 01       	movw	r30, r16
    1642:	09 95       	icall
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	f8 01       	movw	r30, r16
    1648:	09 95       	icall
    164a:	99 27       	eor	r25, r25
    164c:	88 73       	andi	r24, 0x38	; 56
    164e:	90 70       	andi	r25, 0x00	; 0
    1650:	43 e0       	ldi	r20, 0x03	; 3
    1652:	95 95       	asr	r25
    1654:	87 95       	ror	r24
    1656:	4a 95       	dec	r20
    1658:	e1 f7       	brne	.-8      	; 0x1652 <DF_GetChipCharacteristics+0x2c>
    165a:	99 27       	eor	r25, r25
    165c:	fc 01       	movw	r30, r24
    165e:	ea 54       	subi	r30, 0x4A	; 74
    1660:	fc 4f       	sbci	r31, 0xFC	; 252
    1662:	44 91       	lpm	r20, Z
    1664:	40 93 3b 01 	sts	0x013B, r20
    1668:	9c 01       	movw	r18, r24
    166a:	28 0f       	add	r18, r24
    166c:	39 1f       	adc	r19, r25
    166e:	f9 01       	movw	r30, r18
    1670:	ea 55       	subi	r30, 0x5A	; 90
    1672:	fc 4f       	sbci	r31, 0xFC	; 252
    1674:	85 91       	lpm	r24, Z+
    1676:	94 91       	lpm	r25, Z
    1678:	90 93 3d 01 	sts	0x013D, r25
    167c:	80 93 3c 01 	sts	0x013C, r24
    1680:	f9 01       	movw	r30, r18
    1682:	ea 56       	subi	r30, 0x6A	; 106
    1684:	fc 4f       	sbci	r31, 0xFC	; 252
    1686:	85 91       	lpm	r24, Z+
    1688:	94 91       	lpm	r25, Z
    168a:	90 93 3f 01 	sts	0x013F, r25
    168e:	80 93 3e 01 	sts	0x013E, r24
    1692:	80 e1       	ldi	r24, 0x10	; 16
    1694:	84 1b       	sub	r24, r20
    1696:	8a bd       	out	0x2a, r24	; 42
    1698:	48 50       	subi	r20, 0x08	; 8
    169a:	4b bd       	out	0x2b, r20	; 43
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	08 95       	ret

000016a2 <DF_CheckCorrectOnboardChip>:
    16a2:	0e 94 13 0b 	call	0x1626 <DF_GetChipCharacteristics>
    16a6:	80 91 3e 01 	lds	r24, 0x013E
    16aa:	90 91 3f 01 	lds	r25, 0x013F
    16ae:	80 50       	subi	r24, 0x00	; 0
    16b0:	98 40       	sbci	r25, 0x08	; 8
    16b2:	61 f0       	breq	.+24     	; 0x16cc <DF_CheckCorrectOnboardChip+0x2a>
    16b4:	80 91 64 00 	lds	r24, 0x0064
    16b8:	84 60       	ori	r24, 0x04	; 4
    16ba:	80 93 64 00 	sts	0x0064, r24
    16be:	86 e8       	ldi	r24, 0x86	; 134
    16c0:	93 e0       	ldi	r25, 0x03	; 3
    16c2:	0e 94 79 03 	call	0x6f2 <MAIN_ShowError>
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	08 95       	ret
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	08 95       	ret

000016d2 <__vector_13>:

// ======================================================================================

ISR(USART0_RX_vect, ISR_BLOCK)
{
    16d2:	1f 92       	push	r1
    16d4:	0f 92       	push	r0
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	0f 92       	push	r0
    16da:	11 24       	eor	r1, r1
    16dc:	2f 93       	push	r18
    16de:	3f 93       	push	r19
    16e0:	4f 93       	push	r20
    16e2:	5f 93       	push	r21
    16e4:	6f 93       	push	r22
    16e6:	7f 93       	push	r23
    16e8:	8f 93       	push	r24
    16ea:	9f 93       	push	r25
    16ec:	af 93       	push	r26
    16ee:	bf 93       	push	r27
    16f0:	ef 93       	push	r30
    16f2:	ff 93       	push	r31
	if (BuffElements == BUFF_BUFFLEN)     // Buffer full
    16f4:	80 91 b7 02 	lds	r24, 0x02B7
    16f8:	80 34       	cpi	r24, 0x40	; 64
    16fa:	29 f4       	brne	.+10     	; 0x1706 <__vector_13+0x34>
	{
		MAIN_ShowError(PSTR("BUFF OVERFLOW"));
    16fc:	8e eb       	ldi	r24, 0xBE	; 190
    16fe:	93 e0       	ldi	r25, 0x03	; 3
    1700:	0e 94 79 03 	call	0x6f2 <MAIN_ShowError>
		return;
    1704:	20 c0       	rjmp	.+64     	; 0x1746 <__vector_13+0x74>
	}
		
	*StoreLoc = UDR;                      // Store the data
    1706:	e0 91 b3 02 	lds	r30, 0x02B3
    170a:	f0 91 b4 02 	lds	r31, 0x02B4
    170e:	80 91 c6 00 	lds	r24, 0x00C6
    1712:	80 83       	st	Z, r24

	StoreLoc++;                           // Increment the IN pointer to the next element
    1714:	40 91 b3 02 	lds	r20, 0x02B3
    1718:	50 91 b4 02 	lds	r21, 0x02B4
    171c:	9a 01       	movw	r18, r20
    171e:	2f 5f       	subi	r18, 0xFF	; 255
    1720:	3f 4f       	sbci	r19, 0xFF	; 255
    1722:	30 93 b4 02 	sts	0x02B4, r19
    1726:	20 93 b3 02 	sts	0x02B3, r18
	BuffElements++;                       // Increment the total elements variable
    172a:	80 91 b7 02 	lds	r24, 0x02B7
    172e:	8f 5f       	subi	r24, 0xFF	; 255
    1730:	80 93 b7 02 	sts	0x02B7, r24

	if (StoreLoc == (BuffType*)&RingBuffer[BUFF_BUFFLEN])
    1734:	23 5b       	subi	r18, 0xB3	; 179
    1736:	32 40       	sbci	r19, 0x02	; 2
    1738:	31 f4       	brne	.+12     	; 0x1746 <__vector_13+0x74>
		StoreLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    173a:	4f 53       	subi	r20, 0x3F	; 63
    173c:	50 40       	sbci	r21, 0x00	; 0
    173e:	50 93 b4 02 	sts	0x02B4, r21
    1742:	40 93 b3 02 	sts	0x02B3, r20
    1746:	ff 91       	pop	r31
    1748:	ef 91       	pop	r30
    174a:	bf 91       	pop	r27
    174c:	af 91       	pop	r26
    174e:	9f 91       	pop	r25
    1750:	8f 91       	pop	r24
    1752:	7f 91       	pop	r23
    1754:	6f 91       	pop	r22
    1756:	5f 91       	pop	r21
    1758:	4f 91       	pop	r20
    175a:	3f 91       	pop	r19
    175c:	2f 91       	pop	r18
    175e:	0f 90       	pop	r0
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	0f 90       	pop	r0
    1764:	1f 90       	pop	r1
    1766:	18 95       	reti

00001768 <BUFF_InitialiseBuffer>:
}	

// ======================================================================================

void BUFF_InitialiseBuffer(void)
{
	StoreLoc    = (BuffType*)&RingBuffer[0]; // Set up the IN pointer to the start of the buffer
    1768:	83 e7       	ldi	r24, 0x73	; 115
    176a:	92 e0       	ldi	r25, 0x02	; 2
    176c:	90 93 b4 02 	sts	0x02B4, r25
    1770:	80 93 b3 02 	sts	0x02B3, r24
	RetrieveLoc = (BuffType*)&RingBuffer[0]; // Set up the OUT pointer to the start of the buffer
    1774:	90 93 b6 02 	sts	0x02B6, r25
    1778:	80 93 b5 02 	sts	0x02B5, r24

	BuffElements = 0;                     // Reset the buffer elements counter
    177c:	10 92 b7 02 	sts	0x02B7, r1
    1780:	08 95       	ret

00001782 <BUFF_GetBuffByte>:
}

BuffType BUFF_GetBuffByte(void)
{
	if (!(BuffElements))                  // No elements in the buffer
    1782:	80 91 b7 02 	lds	r24, 0x02B7
    1786:	88 23       	and	r24, r24
    1788:	19 f4       	brne	.+6      	; 0x1790 <BUFF_GetBuffByte+0xe>
		return 0;
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	08 95       	ret

	BuffType RetrievedData = *RetrieveLoc; // Grab the stored byte into a temp variable
    1790:	20 91 b5 02 	lds	r18, 0x02B5
    1794:	30 91 b6 02 	lds	r19, 0x02B6
    1798:	f9 01       	movw	r30, r18
    179a:	91 91       	ld	r25, Z+

	RetrieveLoc++;                         // Increment the OUT pointer to the next element if flag set
    179c:	f0 93 b6 02 	sts	0x02B6, r31
    17a0:	e0 93 b5 02 	sts	0x02B5, r30
	BuffElements--;                        // Decrement the total elements variable
    17a4:	80 91 b7 02 	lds	r24, 0x02B7
    17a8:	81 50       	subi	r24, 0x01	; 1
    17aa:	80 93 b7 02 	sts	0x02B7, r24
	
	if (RetrieveLoc == (BuffType*)&RingBuffer[BUFF_BUFFLEN])
    17ae:	e3 5b       	subi	r30, 0xB3	; 179
    17b0:	f2 40       	sbci	r31, 0x02	; 2
    17b2:	31 f4       	brne	.+12     	; 0x17c0 <BUFF_GetBuffByte+0x3e>
		RetrieveLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    17b4:	2f 53       	subi	r18, 0x3F	; 63
    17b6:	30 40       	sbci	r19, 0x00	; 0
    17b8:	30 93 b6 02 	sts	0x02B6, r19
    17bc:	20 93 b5 02 	sts	0x02B5, r18
		
	return RetrievedData;                 // Return the retrieved data
    17c0:	89 2f       	mov	r24, r25
    17c2:	99 27       	eor	r25, r25
}
    17c4:	08 95       	ret

000017c6 <__vector_4>:
// ======================================================================================

// Packet Timeout = ((F_CPU / 1024) / (240 * TIMEOUT_TICKSBEFORETIMEOUT)) per second
ISR(TIMER2_COMP_vect, ISR_NOBLOCK)
{
    17c6:	78 94       	sei
    17c8:	1f 92       	push	r1
    17ca:	0f 92       	push	r0
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	0f 92       	push	r0
    17d0:	11 24       	eor	r1, r1
    17d2:	8f 93       	push	r24
	if (PacketTimeOutTicks++ == TIMEOUT_PACKET_TIMEOUTTICKS)
    17d4:	80 91 4a 01 	lds	r24, 0x014A
    17d8:	8f 5f       	subi	r24, 0xFF	; 255
    17da:	80 93 4a 01 	sts	0x014A, r24
    17de:	80 91 4a 01 	lds	r24, 0x014A
    17e2:	87 39       	cpi	r24, 0x97	; 151
    17e4:	29 f4       	brne	.+10     	; 0x17f0 <__vector_4+0x2a>
	{
		PacketTimeOutTicks   = 0;
    17e6:	10 92 4a 01 	sts	0x014A, r1
		PacketTimeOut        = TRUE;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	80 93 49 01 	sts	0x0149, r24
    17f0:	8f 91       	pop	r24
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	0f 90       	pop	r0
    17f8:	1f 90       	pop	r1
    17fa:	18 95       	reti

000017fc <TOUT_SetupSleepTimer>:
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    17fc:	a7 e8       	ldi	r26, 0x87	; 135
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    1800:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
    1804:	80 2d       	mov	r24, r0
    1806:	28 2f       	mov	r18, r24
	}
}

// Autosleep Timeout = (TIMEOUT_TICKSBEFORETIMEOUT / 10) secs between timeouts
ISR(TIMER1_OVF_vect, ISR_NOBLOCK)
{
	if (SleepTimeOutTicks++ == TicksBeforeAutoSleep)
	{
		TIMEOUT_SLEEP_TIMER_OFF();
		FUNCSleepMode();
		TOUT_SetupSleepTimer();
	}
}

// ======================================================================================

void TOUT_SetupSleepTimer(void)
{
	uint8_t NewTicksIndex = eeprom_read_byte(&EEPROMVars.AutoSleepValIndex);

	if (NewTicksIndex == 0xFF)
    1808:	8f 3f       	cpi	r24, 0xFF	; 255
    180a:	09 f4       	brne	.+2      	; 0x180e <TOUT_SetupSleepTimer+0x12>
	  NewTicksIndex = 4;
    180c:	24 e0       	ldi	r18, 0x04	; 4

	TIMSK1 = (1 << TOIE1);
    180e:	31 e0       	ldi	r19, 0x01	; 1
    1810:	30 93 6f 00 	sts	0x006F, r19
	TicksBeforeAutoSleep = (pgm_read_byte(&AutoSleepTOValues[NewTicksIndex]) * 10);
    1814:	e2 2f       	mov	r30, r18
    1816:	ff 27       	eor	r31, r31
    1818:	e4 53       	subi	r30, 0x34	; 52
    181a:	fc 4f       	sbci	r31, 0xFC	; 252
    181c:	94 91       	lpm	r25, Z
    181e:	8a e0       	ldi	r24, 0x0A	; 10
    1820:	98 9f       	mul	r25, r24
    1822:	c0 01       	movw	r24, r0
    1824:	11 24       	eor	r1, r1
    1826:	90 93 46 01 	sts	0x0146, r25
    182a:	80 93 45 01 	sts	0x0145, r24

	TIMEOUT_SLEEP_TIMEOUT_RESET();
    182e:	10 92 48 01 	sts	0x0148, r1
    1832:	10 92 47 01 	sts	0x0147, r1
    1836:	10 92 85 00 	sts	0x0085, r1
    183a:	10 92 84 00 	sts	0x0084, r1
	
	if (NewTicksIndex)
    183e:	22 23       	and	r18, r18
    1840:	19 f0       	breq	.+6      	; 0x1848 <TOUT_SetupSleepTimer+0x4c>
	  TIMEOUT_SLEEP_TIMER_ON();
    1842:	30 93 81 00 	sts	0x0081, r19
    1846:	08 95       	ret
	else
	  TIMEOUT_SLEEP_TIMER_OFF();
    1848:	20 93 81 00 	sts	0x0081, r18
    184c:	08 95       	ret

0000184e <__vector_9>:
    184e:	78 94       	sei
    1850:	1f 92       	push	r1
    1852:	0f 92       	push	r0
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	0f 92       	push	r0
    1858:	11 24       	eor	r1, r1
    185a:	2f 93       	push	r18
    185c:	3f 93       	push	r19
    185e:	4f 93       	push	r20
    1860:	5f 93       	push	r21
    1862:	6f 93       	push	r22
    1864:	7f 93       	push	r23
    1866:	8f 93       	push	r24
    1868:	9f 93       	push	r25
    186a:	af 93       	push	r26
    186c:	bf 93       	push	r27
    186e:	ef 93       	push	r30
    1870:	ff 93       	push	r31
    1872:	80 91 47 01 	lds	r24, 0x0147
    1876:	90 91 48 01 	lds	r25, 0x0148
    187a:	9c 01       	movw	r18, r24
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	90 93 48 01 	sts	0x0148, r25
    1882:	80 93 47 01 	sts	0x0147, r24
    1886:	80 91 45 01 	lds	r24, 0x0145
    188a:	90 91 46 01 	lds	r25, 0x0146
    188e:	28 17       	cp	r18, r24
    1890:	39 07       	cpc	r19, r25
    1892:	31 f4       	brne	.+12     	; 0x18a0 <__vector_9+0x52>
    1894:	10 92 81 00 	sts	0x0081, r1
    1898:	0e 94 21 07 	call	0xe42 <FUNCSleepMode>
    189c:	0e 94 fe 0b 	call	0x17fc <TOUT_SetupSleepTimer>
    18a0:	ff 91       	pop	r31
    18a2:	ef 91       	pop	r30
    18a4:	bf 91       	pop	r27
    18a6:	af 91       	pop	r26
    18a8:	9f 91       	pop	r25
    18aa:	8f 91       	pop	r24
    18ac:	7f 91       	pop	r23
    18ae:	6f 91       	pop	r22
    18b0:	5f 91       	pop	r21
    18b2:	4f 91       	pop	r20
    18b4:	3f 91       	pop	r19
    18b6:	2f 91       	pop	r18
    18b8:	0f 90       	pop	r0
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	0f 90       	pop	r0
    18be:	1f 90       	pop	r1
    18c0:	18 95       	reti

000018c2 <PD_SetupDFAddressCounters>:
}

void PD_SetupDFAddressCounters(void)
{
	uint32_t StartAddress = CurrAddress;
    18c2:	20 91 4c 01 	lds	r18, 0x014C
    18c6:	30 91 4d 01 	lds	r19, 0x014D
    18ca:	40 91 4e 01 	lds	r20, 0x014E
    18ce:	50 91 4f 01 	lds	r21, 0x014F

	CurrPageAddress = 0;
    18d2:	10 92 44 01 	sts	0x0144, r1
    18d6:	10 92 43 01 	sts	0x0143, r1

	while (StartAddress > DataflashInfo.PageSize)      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DataflashInfo.PageSize;         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    18da:	80 91 3c 01 	lds	r24, 0x013C
    18de:	90 91 3d 01 	lds	r25, 0x013D
    18e2:	aa 27       	eor	r26, r26
    18e4:	bb 27       	eor	r27, r27
    18e6:	82 17       	cp	r24, r18
    18e8:	93 07       	cpc	r25, r19
    18ea:	a4 07       	cpc	r26, r20
    18ec:	b5 07       	cpc	r27, r21
    18ee:	88 f4       	brcc	.+34     	; 0x1912 <PD_SetupDFAddressCounters+0x50>
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	28 1b       	sub	r18, r24
    18f6:	39 0b       	sbc	r19, r25
    18f8:	4a 0b       	sbc	r20, r26
    18fa:	5b 0b       	sbc	r21, r27
    18fc:	6f 5f       	subi	r22, 0xFF	; 255
    18fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1900:	82 17       	cp	r24, r18
    1902:	93 07       	cpc	r25, r19
    1904:	a4 07       	cpc	r26, r20
    1906:	b5 07       	cpc	r27, r21
    1908:	a8 f3       	brcs	.-22     	; 0x18f4 <PD_SetupDFAddressCounters+0x32>
    190a:	70 93 44 01 	sts	0x0144, r23
    190e:	60 93 43 01 	sts	0x0143, r22
	}
	
	CurrBuffByte = (uint16_t)StartAddress;              // The buffer byte is the remainder
    1912:	30 93 42 01 	sts	0x0142, r19
    1916:	20 93 41 01 	sts	0x0141, r18
    191a:	08 95       	ret

0000191c <PD_StoreDataflashByte>:
}

void PD_StoreDataflashByte(const uint8_t Data)
{
    191c:	cf 93       	push	r28
    191e:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DataflashInfo.PageSize)
    1920:	20 91 41 01 	lds	r18, 0x0141
    1924:	30 91 42 01 	lds	r19, 0x0142
    1928:	80 91 3c 01 	lds	r24, 0x013C
    192c:	90 91 3d 01 	lds	r25, 0x013D
    1930:	28 17       	cp	r18, r24
    1932:	39 07       	cpc	r19, r25
    1934:	a9 f4       	brne	.+42     	; 0x1960 <PD_StoreDataflashByte+0x44>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    1936:	80 91 43 01 	lds	r24, 0x0143
    193a:	90 91 44 01 	lds	r25, 0x0144
    193e:	9c 01       	movw	r18, r24
    1940:	01 96       	adiw	r24, 0x01	; 1
    1942:	90 93 44 01 	sts	0x0144, r25
    1946:	80 93 43 01 	sts	0x0143, r24
    194a:	c9 01       	movw	r24, r18
    194c:	0e 94 e4 0a 	call	0x15c8 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 5a 0a 	call	0x14b4 <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    1958:	10 92 42 01 	sts	0x0142, r1
    195c:	10 92 41 01 	sts	0x0141, r1
	}
	
	USI_SPITransmit(Data);                                 // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    1960:	8c 2f       	mov	r24, r28
    1962:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
	CurrBuffByte++;
    1966:	80 91 41 01 	lds	r24, 0x0141
    196a:	90 91 42 01 	lds	r25, 0x0142
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	90 93 42 01 	sts	0x0142, r25
    1974:	80 93 41 01 	sts	0x0141, r24
    1978:	cf 91       	pop	r28
    197a:	08 95       	ret

0000197c <PD_InterpretAVRISPPacket>:
    197c:	df 92       	push	r13
    197e:	ef 92       	push	r14
    1980:	ff 92       	push	r15
    1982:	0f 93       	push	r16
    1984:	1f 93       	push	r17
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	dd 24       	eor	r13, r13
    198c:	80 91 55 01 	lds	r24, 0x0155
    1990:	99 27       	eor	r25, r25
    1992:	86 31       	cpi	r24, 0x16	; 22
    1994:	91 05       	cpc	r25, r1
    1996:	09 f4       	brne	.+2      	; 0x199a <PD_InterpretAVRISPPacket+0x1e>
    1998:	00 c1       	rjmp	.+512    	; 0x1b9a <PD_InterpretAVRISPPacket+0x21e>
    199a:	87 31       	cpi	r24, 0x17	; 23
    199c:	91 05       	cpc	r25, r1
    199e:	b4 f4       	brge	.+44     	; 0x19cc <PD_InterpretAVRISPPacket+0x50>
    19a0:	82 31       	cpi	r24, 0x12	; 18
    19a2:	91 05       	cpc	r25, r1
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <PD_InterpretAVRISPPacket+0x2c>
    19a6:	6f c0       	rjmp	.+222    	; 0x1a86 <PD_InterpretAVRISPPacket+0x10a>
    19a8:	83 31       	cpi	r24, 0x13	; 19
    19aa:	91 05       	cpc	r25, r1
    19ac:	3c f4       	brge	.+14     	; 0x19bc <PD_InterpretAVRISPPacket+0x40>
    19ae:	80 31       	cpi	r24, 0x10	; 16
    19b0:	91 05       	cpc	r25, r1
    19b2:	31 f1       	breq	.+76     	; 0x1a00 <PD_InterpretAVRISPPacket+0x84>
    19b4:	41 97       	sbiw	r24, 0x11	; 17
    19b6:	09 f4       	brne	.+2      	; 0x19ba <PD_InterpretAVRISPPacket+0x3e>
    19b8:	46 c0       	rjmp	.+140    	; 0x1a46 <PD_InterpretAVRISPPacket+0xca>
    19ba:	40 c1       	rjmp	.+640    	; 0x1c3c <PD_InterpretAVRISPPacket+0x2c0>
    19bc:	84 31       	cpi	r24, 0x14	; 20
    19be:	91 05       	cpc	r25, r1
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <PD_InterpretAVRISPPacket+0x48>
    19c2:	8a c0       	rjmp	.+276    	; 0x1ad8 <PD_InterpretAVRISPPacket+0x15c>
    19c4:	45 97       	sbiw	r24, 0x15	; 21
    19c6:	0c f0       	brlt	.+2      	; 0x19ca <PD_InterpretAVRISPPacket+0x4e>
    19c8:	af c0       	rjmp	.+350    	; 0x1b28 <PD_InterpretAVRISPPacket+0x1ac>
    19ca:	7f c0       	rjmp	.+254    	; 0x1aca <PD_InterpretAVRISPPacket+0x14e>
    19cc:	89 31       	cpi	r24, 0x19	; 25
    19ce:	91 05       	cpc	r25, r1
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <PD_InterpretAVRISPPacket+0x58>
    19d2:	70 c0       	rjmp	.+224    	; 0x1ab4 <PD_InterpretAVRISPPacket+0x138>
    19d4:	8a 31       	cpi	r24, 0x1A	; 26
    19d6:	91 05       	cpc	r25, r1
    19d8:	44 f4       	brge	.+16     	; 0x19ea <PD_InterpretAVRISPPacket+0x6e>
    19da:	87 31       	cpi	r24, 0x17	; 23
    19dc:	91 05       	cpc	r25, r1
    19de:	09 f4       	brne	.+2      	; 0x19e2 <PD_InterpretAVRISPPacket+0x66>
    19e0:	69 c0       	rjmp	.+210    	; 0x1ab4 <PD_InterpretAVRISPPacket+0x138>
    19e2:	48 97       	sbiw	r24, 0x18	; 24
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <PD_InterpretAVRISPPacket+0x6c>
    19e6:	58 c0       	rjmp	.+176    	; 0x1a98 <PD_InterpretAVRISPPacket+0x11c>
    19e8:	29 c1       	rjmp	.+594    	; 0x1c3c <PD_InterpretAVRISPPacket+0x2c0>
    19ea:	8b 31       	cpi	r24, 0x1B	; 27
    19ec:	91 05       	cpc	r25, r1
    19ee:	e9 f1       	breq	.+122    	; 0x1a6a <PD_InterpretAVRISPPacket+0xee>
    19f0:	8b 31       	cpi	r24, 0x1B	; 27
    19f2:	91 05       	cpc	r25, r1
    19f4:	0c f4       	brge	.+2      	; 0x19f8 <PD_InterpretAVRISPPacket+0x7c>
    19f6:	50 c0       	rjmp	.+160    	; 0x1a98 <PD_InterpretAVRISPPacket+0x11c>
    19f8:	4c 97       	sbiw	r24, 0x1c	; 28
    19fa:	09 f4       	brne	.+2      	; 0x19fe <PD_InterpretAVRISPPacket+0x82>
    19fc:	4d c0       	rjmp	.+154    	; 0x1a98 <PD_InterpretAVRISPPacket+0x11c>
    19fe:	1e c1       	rjmp	.+572    	; 0x1c3c <PD_InterpretAVRISPPacket+0x2c0>
    1a00:	82 e0       	ldi	r24, 0x02	; 2
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	90 93 52 01 	sts	0x0152, r25
    1a08:	80 93 51 01 	sts	0x0151, r24
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    1a12:	0e 94 13 0b 	call	0x1626 <DF_GetChipCharacteristics>
    1a16:	80 91 3b 01 	lds	r24, 0x013B
    1a1a:	88 23       	and	r24, r24
    1a1c:	59 f0       	breq	.+22     	; 0x1a34 <PD_InterpretAVRISPPacket+0xb8>
    1a1e:	81 ed       	ldi	r24, 0xD1	; 209
    1a20:	93 e0       	ldi	r25, 0x03	; 3
    1a22:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	80 93 50 01 	sts	0x0150, r24
    1a2c:	81 b3       	in	r24, 0x11	; 17
    1a2e:	8f 7c       	andi	r24, 0xCF	; 207
    1a30:	80 62       	ori	r24, 0x20	; 32
    1a32:	17 c0       	rjmp	.+46     	; 0x1a62 <PD_InterpretAVRISPPacket+0xe6>
    1a34:	86 e8       	ldi	r24, 0x86	; 134
    1a36:	93 e0       	ldi	r25, 0x03	; 3
    1a38:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
    1a3c:	8d 2d       	mov	r24, r13
    1a3e:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    1a42:	80 ec       	ldi	r24, 0xC0	; 192
    1a44:	02 c1       	rjmp	.+516    	; 0x1c4a <PD_InterpretAVRISPPacket+0x2ce>
    1a46:	82 e0       	ldi	r24, 0x02	; 2
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	90 93 52 01 	sts	0x0152, r25
    1a4e:	80 93 51 01 	sts	0x0151, r24
    1a52:	d0 92 50 01 	sts	0x0150, r13
    1a56:	8d 2d       	mov	r24, r13
    1a58:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    1a5c:	81 b3       	in	r24, 0x11	; 17
    1a5e:	8f 7c       	andi	r24, 0xCF	; 207
    1a60:	80 61       	ori	r24, 0x10	; 16
    1a62:	81 bb       	out	0x11, r24	; 17
    1a64:	d0 92 56 01 	sts	0x0156, r13
    1a68:	f2 c0       	rjmp	.+484    	; 0x1c4e <PD_InterpretAVRISPPacket+0x2d2>
    1a6a:	84 e0       	ldi	r24, 0x04	; 4
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	90 93 52 01 	sts	0x0152, r25
    1a72:	80 93 51 01 	sts	0x0151, r24
    1a76:	d0 92 56 01 	sts	0x0156, r13
    1a7a:	82 e0       	ldi	r24, 0x02	; 2
    1a7c:	80 93 57 01 	sts	0x0157, r24
    1a80:	d0 92 58 01 	sts	0x0158, r13
    1a84:	e4 c0       	rjmp	.+456    	; 0x1c4e <PD_InterpretAVRISPPacket+0x2d2>
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	90 93 52 01 	sts	0x0152, r25
    1a8e:	80 93 51 01 	sts	0x0151, r24
    1a92:	e1 e0       	ldi	r30, 0x01	; 1
    1a94:	de 2e       	mov	r13, r30
    1a96:	7e c0       	rjmp	.+252    	; 0x1b94 <PD_InterpretAVRISPPacket+0x218>
    1a98:	84 e0       	ldi	r24, 0x04	; 4
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	90 93 52 01 	sts	0x0152, r25
    1aa0:	80 93 51 01 	sts	0x0151, r24
    1aa4:	10 92 56 01 	sts	0x0156, r1
    1aa8:	8f ef       	ldi	r24, 0xFF	; 255
    1aaa:	80 93 57 01 	sts	0x0157, r24
    1aae:	10 92 58 01 	sts	0x0158, r1
    1ab2:	cd c0       	rjmp	.+410    	; 0x1c4e <PD_InterpretAVRISPPacket+0x2d2>
    1ab4:	83 e0       	ldi	r24, 0x03	; 3
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	90 93 52 01 	sts	0x0152, r25
    1abc:	80 93 51 01 	sts	0x0151, r24
    1ac0:	10 92 56 01 	sts	0x0156, r1
    1ac4:	10 92 57 01 	sts	0x0157, r1
    1ac8:	c2 c0       	rjmp	.+388    	; 0x1c4e <PD_InterpretAVRISPPacket+0x2d2>
    1aca:	82 e0       	ldi	r24, 0x02	; 2
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	90 93 52 01 	sts	0x0152, r25
    1ad2:	80 93 51 01 	sts	0x0151, r24
    1ad6:	5e c0       	rjmp	.+188    	; 0x1b94 <PD_InterpretAVRISPPacket+0x218>
    1ad8:	80 91 56 01 	lds	r24, 0x0156
    1adc:	99 27       	eor	r25, r25
    1ade:	98 2f       	mov	r25, r24
    1ae0:	88 27       	eor	r24, r24
    1ae2:	20 91 57 01 	lds	r18, 0x0157
    1ae6:	33 27       	eor	r19, r19
    1ae8:	82 2b       	or	r24, r18
    1aea:	93 2b       	or	r25, r19
    1aec:	03 96       	adiw	r24, 0x03	; 3
    1aee:	90 93 52 01 	sts	0x0152, r25
    1af2:	80 93 51 01 	sts	0x0151, r24
    1af6:	21 e0       	ldi	r18, 0x01	; 1
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	02 97       	sbiw	r24, 0x02	; 2
    1afc:	28 17       	cp	r18, r24
    1afe:	39 07       	cpc	r19, r25
    1b00:	48 f4       	brcc	.+18     	; 0x1b14 <PD_InterpretAVRISPPacket+0x198>
    1b02:	4f ef       	ldi	r20, 0xFF	; 255
    1b04:	e6 e5       	ldi	r30, 0x56	; 86
    1b06:	f1 e0       	ldi	r31, 0x01	; 1
    1b08:	41 93       	st	Z+, r20
    1b0a:	2f 5f       	subi	r18, 0xFF	; 255
    1b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0e:	28 17       	cp	r18, r24
    1b10:	39 07       	cpc	r19, r25
    1b12:	d0 f3       	brcs	.-12     	; 0x1b08 <PD_InterpretAVRISPPacket+0x18c>
    1b14:	10 92 56 01 	sts	0x0156, r1
    1b18:	e0 91 51 01 	lds	r30, 0x0151
    1b1c:	f0 91 52 01 	lds	r31, 0x0152
    1b20:	ec 5a       	subi	r30, 0xAC	; 172
    1b22:	fe 4f       	sbci	r31, 0xFE	; 254
    1b24:	10 82       	st	Z, r1
    1b26:	93 c0       	rjmp	.+294    	; 0x1c4e <PD_InterpretAVRISPPacket+0x2d2>
    1b28:	0e 94 61 0c 	call	0x18c2 <PD_SetupDFAddressCounters>
    1b2c:	80 91 43 01 	lds	r24, 0x0143
    1b30:	90 91 44 01 	lds	r25, 0x0144
    1b34:	0e 94 b5 0a 	call	0x156a <DF_CopyFlashPageToBuffer>
    1b38:	80 91 41 01 	lds	r24, 0x0141
    1b3c:	90 91 42 01 	lds	r25, 0x0142
    1b40:	0e 94 5a 0a 	call	0x14b4 <DF_BufferWriteEnable>
    1b44:	80 91 56 01 	lds	r24, 0x0156
    1b48:	99 27       	eor	r25, r25
    1b4a:	d8 2f       	mov	r29, r24
    1b4c:	cc 27       	eor	r28, r28
    1b4e:	80 91 57 01 	lds	r24, 0x0157
    1b52:	99 27       	eor	r25, r25
    1b54:	c8 2b       	or	r28, r24
    1b56:	d9 2b       	or	r29, r25
    1b58:	00 e0       	ldi	r16, 0x00	; 0
    1b5a:	10 e0       	ldi	r17, 0x00	; 0
    1b5c:	0c 17       	cp	r16, r28
    1b5e:	1d 07       	cpc	r17, r29
    1b60:	c8 f4       	brcc	.+50     	; 0x1b94 <PD_InterpretAVRISPPacket+0x218>
    1b62:	5f e5       	ldi	r21, 0x5F	; 95
    1b64:	e5 2e       	mov	r14, r21
    1b66:	51 e0       	ldi	r21, 0x01	; 1
    1b68:	f5 2e       	mov	r15, r21
    1b6a:	f7 01       	movw	r30, r14
    1b6c:	81 91       	ld	r24, Z+
    1b6e:	7f 01       	movw	r14, r30
    1b70:	0e 94 8e 0c 	call	0x191c <PD_StoreDataflashByte>
    1b74:	80 91 41 01 	lds	r24, 0x0141
    1b78:	90 91 42 01 	lds	r25, 0x0142
    1b7c:	01 96       	adiw	r24, 0x01	; 1
    1b7e:	90 93 42 01 	sts	0x0142, r25
    1b82:	80 93 41 01 	sts	0x0141, r24
    1b86:	0e 94 50 0f 	call	0x1ea0 <V2P_IncrementCurrAddress>
    1b8a:	0f 5f       	subi	r16, 0xFF	; 255
    1b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8e:	0c 17       	cp	r16, r28
    1b90:	1d 07       	cpc	r17, r29
    1b92:	58 f3       	brcs	.-42     	; 0x1b6a <PD_InterpretAVRISPPacket+0x1ee>
    1b94:	10 92 56 01 	sts	0x0156, r1
    1b98:	5a c0       	rjmp	.+180    	; 0x1c4e <PD_InterpretAVRISPPacket+0x2d2>
    1b9a:	0e 94 61 0c 	call	0x18c2 <PD_SetupDFAddressCounters>
    1b9e:	80 91 43 01 	lds	r24, 0x0143
    1ba2:	90 91 44 01 	lds	r25, 0x0144
    1ba6:	0e 94 b5 0a 	call	0x156a <DF_CopyFlashPageToBuffer>
    1baa:	80 91 56 01 	lds	r24, 0x0156
    1bae:	99 27       	eor	r25, r25
    1bb0:	d8 2f       	mov	r29, r24
    1bb2:	cc 27       	eor	r28, r28
    1bb4:	80 91 57 01 	lds	r24, 0x0157
    1bb8:	99 27       	eor	r25, r25
    1bba:	c8 2b       	or	r28, r24
    1bbc:	d9 2b       	or	r29, r25
    1bbe:	00 e0       	ldi	r16, 0x00	; 0
    1bc0:	10 e0       	ldi	r17, 0x00	; 0
    1bc2:	0c 17       	cp	r16, r28
    1bc4:	1d 07       	cpc	r17, r29
    1bc6:	70 f5       	brcc	.+92     	; 0x1c24 <PD_InterpretAVRISPPacket+0x2a8>
    1bc8:	37 e5       	ldi	r19, 0x57	; 87
    1bca:	e3 2e       	mov	r14, r19
    1bcc:	31 e0       	ldi	r19, 0x01	; 1
    1bce:	f3 2e       	mov	r15, r19
    1bd0:	20 91 41 01 	lds	r18, 0x0141
    1bd4:	30 91 42 01 	lds	r19, 0x0142
    1bd8:	80 91 3c 01 	lds	r24, 0x013C
    1bdc:	90 91 3d 01 	lds	r25, 0x013D
    1be0:	28 17       	cp	r18, r24
    1be2:	39 07       	cpc	r19, r25
    1be4:	41 f4       	brne	.+16     	; 0x1bf6 <PD_InterpretAVRISPPacket+0x27a>
    1be6:	0e 94 61 0c 	call	0x18c2 <PD_SetupDFAddressCounters>
    1bea:	80 91 43 01 	lds	r24, 0x0143
    1bee:	90 91 44 01 	lds	r25, 0x0144
    1bf2:	0e 94 b5 0a 	call	0x156a <DF_CopyFlashPageToBuffer>
    1bf6:	80 91 41 01 	lds	r24, 0x0141
    1bfa:	90 91 42 01 	lds	r25, 0x0142
    1bfe:	9c 01       	movw	r18, r24
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	90 93 42 01 	sts	0x0142, r25
    1c06:	80 93 41 01 	sts	0x0141, r24
    1c0a:	c9 01       	movw	r24, r18
    1c0c:	0e 94 f9 09 	call	0x13f2 <DF_ReadBufferByte>
    1c10:	f7 01       	movw	r30, r14
    1c12:	81 93       	st	Z+, r24
    1c14:	7f 01       	movw	r14, r30
    1c16:	0e 94 50 0f 	call	0x1ea0 <V2P_IncrementCurrAddress>
    1c1a:	0f 5f       	subi	r16, 0xFF	; 255
    1c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1e:	0c 17       	cp	r16, r28
    1c20:	1d 07       	cpc	r17, r29
    1c22:	b0 f2       	brcs	.-84     	; 0x1bd0 <PD_InterpretAVRISPPacket+0x254>
    1c24:	23 96       	adiw	r28, 0x03	; 3
    1c26:	d0 93 52 01 	sts	0x0152, r29
    1c2a:	c0 93 51 01 	sts	0x0151, r28
    1c2e:	23 97       	sbiw	r28, 0x03	; 3
    1c30:	10 92 56 01 	sts	0x0156, r1
    1c34:	cb 5a       	subi	r28, 0xAB	; 171
    1c36:	de 4f       	sbci	r29, 0xFE	; 254
    1c38:	1a 82       	std	Y+2, r1	; 0x02
    1c3a:	09 c0       	rjmp	.+18     	; 0x1c4e <PD_InterpretAVRISPPacket+0x2d2>
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	90 93 52 01 	sts	0x0152, r25
    1c44:	80 93 51 01 	sts	0x0151, r24
    1c48:	89 ec       	ldi	r24, 0xC9	; 201
    1c4a:	80 93 56 01 	sts	0x0156, r24
    1c4e:	0e 94 6f 0e 	call	0x1cde <V2P_SendPacket>
    1c52:	dd 20       	and	r13, r13
    1c54:	d9 f0       	breq	.+54     	; 0x1c8c <PD_InterpretAVRISPPacket+0x310>
    1c56:	80 e3       	ldi	r24, 0x30	; 48
    1c58:	92 e0       	ldi	r25, 0x02	; 2
    1c5a:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
    1c5e:	c0 e0       	ldi	r28, 0x00	; 0
    1c60:	d0 e0       	ldi	r29, 0x00	; 0
    1c62:	80 91 3e 01 	lds	r24, 0x013E
    1c66:	90 91 3f 01 	lds	r25, 0x013F
    1c6a:	23 e0       	ldi	r18, 0x03	; 3
    1c6c:	96 95       	lsr	r25
    1c6e:	87 95       	ror	r24
    1c70:	2a 95       	dec	r18
    1c72:	e1 f7       	brne	.-8      	; 0x1c6c <PD_InterpretAVRISPPacket+0x2f0>
    1c74:	c8 17       	cp	r28, r24
    1c76:	d9 07       	cpc	r29, r25
    1c78:	28 f4       	brcc	.+10     	; 0x1c84 <PD_InterpretAVRISPPacket+0x308>
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	0e 94 92 0a 	call	0x1524 <DF_EraseBlock>
    1c80:	21 96       	adiw	r28, 0x01	; 1
    1c82:	ef cf       	rjmp	.-34     	; 0x1c62 <PD_InterpretAVRISPPacket+0x2e6>
    1c84:	81 ed       	ldi	r24, 0xD1	; 209
    1c86:	93 e0       	ldi	r25, 0x03	; 3
    1c88:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	1f 91       	pop	r17
    1c92:	0f 91       	pop	r16
    1c94:	ff 90       	pop	r15
    1c96:	ef 90       	pop	r14
    1c98:	df 90       	pop	r13
    1c9a:	08 95       	ret

00001c9c <V2P_GetChecksum>:
	
	/* Checksum for the V2 protocol is comprised of an XOR of all the packet 
      bytes, including the start, sequence number, size and token bytes.    */
	
	CheckSumByte  = AICB_MESSAGE_START;
    1c9c:	6b e1       	ldi	r22, 0x1B	; 27
	CheckSumByte ^= SequenceNum;
    1c9e:	80 91 53 01 	lds	r24, 0x0153
    1ca2:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize >> 8);
    1ca4:	20 91 51 01 	lds	r18, 0x0151
    1ca8:	30 91 52 01 	lds	r19, 0x0152
    1cac:	83 2f       	mov	r24, r19
    1cae:	99 27       	eor	r25, r25
    1cb0:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize);
    1cb2:	80 91 51 01 	lds	r24, 0x0151
    1cb6:	68 27       	eor	r22, r24
	CheckSumByte ^= AICB_TOKEN;
    1cb8:	8e e0       	ldi	r24, 0x0E	; 14
    1cba:	68 27       	eor	r22, r24
	
	for (uint16_t CByteIndex = 0; CByteIndex < MessageSize; CByteIndex++)
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	42 17       	cp	r20, r18
    1cc2:	53 07       	cpc	r21, r19
    1cc4:	48 f4       	brcc	.+18     	; 0x1cd8 <V2P_GetChecksum+0x3c>
    1cc6:	e5 e5       	ldi	r30, 0x55	; 85
    1cc8:	f1 e0       	ldi	r31, 0x01	; 1
	   CheckSumByte ^= PacketBytes[CByteIndex];
    1cca:	81 91       	ld	r24, Z+
    1ccc:	68 27       	eor	r22, r24
    1cce:	4f 5f       	subi	r20, 0xFF	; 255
    1cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd2:	42 17       	cp	r20, r18
    1cd4:	53 07       	cpc	r21, r19
    1cd6:	c8 f3       	brcs	.-14     	; 0x1cca <V2P_GetChecksum+0x2e>

	return CheckSumByte;
}
    1cd8:	86 2f       	mov	r24, r22
    1cda:	99 27       	eor	r25, r25
    1cdc:	08 95       	ret

00001cde <V2P_SendPacket>:
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	8b e1       	ldi	r24, 0x1B	; 27
    1ce8:	0e 94 2f 09 	call	0x125e <USART_Tx>
    1cec:	80 91 53 01 	lds	r24, 0x0153
    1cf0:	0e 94 2f 09 	call	0x125e <USART_Tx>
    1cf4:	80 91 52 01 	lds	r24, 0x0152
    1cf8:	0e 94 2f 09 	call	0x125e <USART_Tx>
    1cfc:	80 91 51 01 	lds	r24, 0x0151
    1d00:	0e 94 2f 09 	call	0x125e <USART_Tx>
    1d04:	8e e0       	ldi	r24, 0x0E	; 14
    1d06:	0e 94 2f 09 	call	0x125e <USART_Tx>
    1d0a:	c0 e0       	ldi	r28, 0x00	; 0
    1d0c:	d0 e0       	ldi	r29, 0x00	; 0
    1d0e:	80 91 51 01 	lds	r24, 0x0151
    1d12:	90 91 52 01 	lds	r25, 0x0152
    1d16:	c8 17       	cp	r28, r24
    1d18:	d9 07       	cpc	r29, r25
    1d1a:	78 f4       	brcc	.+30     	; 0x1d3a <V2P_SendPacket+0x5c>
    1d1c:	05 e5       	ldi	r16, 0x55	; 85
    1d1e:	11 e0       	ldi	r17, 0x01	; 1
    1d20:	f8 01       	movw	r30, r16
    1d22:	81 91       	ld	r24, Z+
    1d24:	8f 01       	movw	r16, r30
    1d26:	0e 94 2f 09 	call	0x125e <USART_Tx>
    1d2a:	21 96       	adiw	r28, 0x01	; 1
    1d2c:	80 91 51 01 	lds	r24, 0x0151
    1d30:	90 91 52 01 	lds	r25, 0x0152
    1d34:	c8 17       	cp	r28, r24
    1d36:	d9 07       	cpc	r29, r25
    1d38:	98 f3       	brcs	.-26     	; 0x1d20 <V2P_SendPacket+0x42>
    1d3a:	0e 94 4e 0e 	call	0x1c9c <V2P_GetChecksum>
    1d3e:	0e 94 2f 09 	call	0x125e <USART_Tx>
    1d42:	80 91 53 01 	lds	r24, 0x0153
    1d46:	90 91 54 01 	lds	r25, 0x0154
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	90 93 54 01 	sts	0x0154, r25
    1d50:	80 93 53 01 	sts	0x0153, r24
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	08 95       	ret

00001d5e <V2P_GetSetParamater>:

void V2P_GetSetParamater(void)
{
	uint8_t Param_Name = PacketBytes[1];    // Save the parameter number
    1d5e:	20 91 56 01 	lds	r18, 0x0156

	MessageSize = 3;                        // Set the default response message size to 3 bytes     
    1d62:	83 e0       	ldi	r24, 0x03	; 3
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	90 93 52 01 	sts	0x0152, r25
    1d6a:	80 93 51 01 	sts	0x0151, r24
	PacketBytes[1] = AICB_STATUS_CMD_OK;    // Set the default response to OK
    1d6e:	10 92 56 01 	sts	0x0156, r1

	switch (Param_Name)                    // Switch based on the recieved parameter byte
    1d72:	33 27       	eor	r19, r19
    1d74:	22 39       	cpi	r18, 0x92	; 146
    1d76:	31 05       	cpc	r19, r1
    1d78:	51 f1       	breq	.+84     	; 0x1dce <V2P_GetSetParamater+0x70>
    1d7a:	23 39       	cpi	r18, 0x93	; 147
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	8c f4       	brge	.+34     	; 0x1da2 <V2P_GetSetParamater+0x44>
    1d80:	21 38       	cpi	r18, 0x81	; 129
    1d82:	31 05       	cpc	r19, r1
    1d84:	01 f1       	breq	.+64     	; 0x1dc6 <V2P_GetSetParamater+0x68>
    1d86:	22 38       	cpi	r18, 0x82	; 130
    1d88:	31 05       	cpc	r19, r1
    1d8a:	24 f4       	brge	.+8      	; 0x1d94 <V2P_GetSetParamater+0x36>
    1d8c:	20 38       	cpi	r18, 0x80	; 128
    1d8e:	31 05       	cpc	r19, r1
    1d90:	41 f1       	breq	.+80     	; 0x1de2 <V2P_GetSetParamater+0x84>
    1d92:	7a c0       	rjmp	.+244    	; 0x1e88 <V2P_GetSetParamater+0x12a>
    1d94:	20 39       	cpi	r18, 0x90	; 144
    1d96:	31 05       	cpc	r19, r1
    1d98:	c1 f0       	breq	.+48     	; 0x1dca <V2P_GetSetParamater+0x6c>
    1d9a:	21 39       	cpi	r18, 0x91	; 145
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	a9 f0       	breq	.+42     	; 0x1dca <V2P_GetSetParamater+0x6c>
    1da0:	73 c0       	rjmp	.+230    	; 0x1e88 <V2P_GetSetParamater+0x12a>
    1da2:	28 39       	cpi	r18, 0x98	; 152
    1da4:	31 05       	cpc	r19, r1
    1da6:	89 f1       	breq	.+98     	; 0x1e0a <V2P_GetSetParamater+0xac>
    1da8:	29 39       	cpi	r18, 0x99	; 153
    1daa:	31 05       	cpc	r19, r1
    1dac:	2c f4       	brge	.+10     	; 0x1db8 <V2P_GetSetParamater+0x5a>
    1dae:	26 39       	cpi	r18, 0x96	; 150
    1db0:	31 05       	cpc	r19, r1
    1db2:	0c f4       	brge	.+2      	; 0x1db6 <V2P_GetSetParamater+0x58>
    1db4:	69 c0       	rjmp	.+210    	; 0x1e88 <V2P_GetSetParamater+0x12a>
    1db6:	5a c0       	rjmp	.+180    	; 0x1e6c <V2P_GetSetParamater+0x10e>
    1db8:	2e 39       	cpi	r18, 0x9E	; 158
    1dba:	31 05       	cpc	r19, r1
    1dbc:	e1 f1       	breq	.+120    	; 0x1e36 <V2P_GetSetParamater+0xd8>
    1dbe:	2f 39       	cpi	r18, 0x9F	; 159
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	89 f0       	breq	.+34     	; 0x1de6 <V2P_GetSetParamater+0x88>
    1dc4:	61 c0       	rjmp	.+194    	; 0x1e88 <V2P_GetSetParamater+0x12a>
	{
		case AICB_PARAM_BUILD_NUMBER_LOW:
			PacketBytes[2] = VERSION_MINOR;

			break;
		case AICB_PARAM_BUILD_NUMBER_HIGH:
			PacketBytes[2] = VERSION_MAJOR;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	3f c0       	rjmp	.+126    	; 0x1e48 <V2P_GetSetParamater+0xea>

			break;
		case AICB_PARAM_HARDWARE_VERSION:
			PacketBytes[2] = V2P_HW_VERSION;

			break;
		case AICB_PARAM_SW_MAJOR:
			PacketBytes[2] = V2P_SW_VERSION_MAJOR;
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	3d c0       	rjmp	.+122    	; 0x1e48 <V2P_GetSetParamater+0xea>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    1dce:	a6 e8       	ldi	r26, 0x86	; 134
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	9d 01       	movw	r18, r26
  uint8_t result;
  asm volatile
    1dd4:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
    1dd8:	80 2d       	mov	r24, r0
    1dda:	8f 3f       	cpi	r24, 0xFF	; 255
    1ddc:	11 f0       	breq	.+4      	; 0x1de2 <V2P_GetSetParamater+0x84>
    1dde:	d9 01       	movw	r26, r18
    1de0:	30 c0       	rjmp	.+96     	; 0x1e42 <V2P_GetSetParamater+0xe4>
    1de2:	84 e0       	ldi	r24, 0x04	; 4
    1de4:	31 c0       	rjmp	.+98     	; 0x1e48 <V2P_GetSetParamater+0xea>

			break;
		case AICB_PARAM_SW_MINOR:
			PacketBytes[2] = ((eeprom_read_byte(&EEPROMVars.FirmVerMinor) == 0xFF)? V2P_SW_VERSION_MINOR_DEFAULT : eeprom_read_byte(&EEPROMVars.FirmVerMinor));

			break;
		case AICB_PARAM_CONTROLLER_INIT:
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
    1de6:	80 91 55 01 	lds	r24, 0x0155
    1dea:	83 30       	cpi	r24, 0x03	; 3
    1dec:	19 f4       	brne	.+6      	; 0x1df4 <V2P_GetSetParamater+0x96>
			{
				PacketBytes[2] = Param_ControllerInit;
    1dee:	80 91 4b 01 	lds	r24, 0x014B
    1df2:	2a c0       	rjmp	.+84     	; 0x1e48 <V2P_GetSetParamater+0xea>
			}
			else
			{
				MessageSize = 2;
    1df4:	82 e0       	ldi	r24, 0x02	; 2
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	90 93 52 01 	sts	0x0152, r25
    1dfc:	80 93 51 01 	sts	0x0151, r24
				Param_ControllerInit = PacketBytes[2];
    1e00:	80 91 57 01 	lds	r24, 0x0157
    1e04:	80 93 4b 01 	sts	0x014B, r24
			}
			
			break;
    1e08:	48 c0       	rjmp	.+144    	; 0x1e9a <V2P_GetSetParamater+0x13c>
		case AICB_PARAM_SCK_DURATION:
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
    1e0a:	80 91 55 01 	lds	r24, 0x0155
    1e0e:	a1 e0       	ldi	r26, 0x01	; 1
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	83 30       	cpi	r24, 0x03	; 3
    1e14:	b1 f0       	breq	.+44     	; 0x1e42 <V2P_GetSetParamater+0xe4>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.SCKDuration);
			}
			else
			{
				MessageSize = 2;
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	90 93 52 01 	sts	0x0152, r25
    1e1e:	80 93 51 01 	sts	0x0151, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1e22:	80 91 57 01 	lds	r24, 0x0157
  asm volatile (
    1e26:	08 2e       	mov	r0, r24
    1e28:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.SCKDuration, PacketBytes[2]);
				USI_SPISetSpeed(PacketBytes[2]); // Re-Initialise the USI system with the new frequency
    1e2c:	80 91 57 01 	lds	r24, 0x0157
    1e30:	0e 94 7d 09 	call	0x12fa <USI_SPISetSpeed>
			}
					
			break;
    1e34:	32 c0       	rjmp	.+100    	; 0x1e9a <V2P_GetSetParamater+0x13c>
		case AICB_PARAM_RESET_POLARITY:
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
    1e36:	80 91 55 01 	lds	r24, 0x0155
    1e3a:	a0 e0       	ldi	r26, 0x00	; 0
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	83 30       	cpi	r24, 0x03	; 3
    1e40:	31 f4       	brne	.+12     	; 0x1e4e <V2P_GetSetParamater+0xf0>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1e42:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
    1e46:	80 2d       	mov	r24, r0
    1e48:	80 93 57 01 	sts	0x0157, r24
    1e4c:	26 c0       	rjmp	.+76     	; 0x1e9a <V2P_GetSetParamater+0x13c>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.ResetPolarity);		
			}
			else
			{
				MessageSize = 2;
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	90 93 52 01 	sts	0x0152, r25
    1e56:	80 93 51 01 	sts	0x0151, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1e5a:	80 91 57 01 	lds	r24, 0x0157
  asm volatile (
    1e5e:	08 2e       	mov	r0, r24
    1e60:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.ResetPolarity, PacketBytes[2]);
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Change takes effect immediatly
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	0e 94 24 03 	call	0x648 <MAIN_ResetCSLine>
			}
			
			break;
    1e6a:	17 c0       	rjmp	.+46     	; 0x1e9a <V2P_GetSetParamater+0x13c>
		case AICB_PARAM_OSC_PSCALE:
		case AICB_PARAM_OSC_CMATCH:
			/* Despite not supporting these parameters (STK500 only), the AVR Studio programmer
			   sends them along with the SCK duration. A OK must be returned or the sequence will fail
			   and the SCK duration byte will not be sent.                                             */
		
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
    1e6c:	80 91 55 01 	lds	r24, 0x0155
    1e70:	83 30       	cpi	r24, 0x03	; 3
    1e72:	19 f4       	brne	.+6      	; 0x1e7a <V2P_GetSetParamater+0x11c>
			  PacketBytes[2] = 0;             // If the command is a read, return a 0 for both parameters
    1e74:	10 92 57 01 	sts	0x0157, r1
    1e78:	10 c0       	rjmp	.+32     	; 0x1e9a <V2P_GetSetParamater+0x13c>
			else
			  MessageSize = 2;                // Otherwise just send back an OK if the command is a set		
    1e7a:	82 e0       	ldi	r24, 0x02	; 2
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	90 93 52 01 	sts	0x0152, r25
    1e82:	80 93 51 01 	sts	0x0151, r24
			
			break;
    1e86:	09 c0       	rjmp	.+18     	; 0x1e9a <V2P_GetSetParamater+0x13c>
		default:                             // Unrecognised parameter
			MessageSize = 2;
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	90 93 52 01 	sts	0x0152, r25
    1e90:	80 93 51 01 	sts	0x0151, r24
			PacketBytes[1] = AICB_STATUS_CMD_FAILED;			
    1e94:	80 ec       	ldi	r24, 0xC0	; 192
    1e96:	80 93 56 01 	sts	0x0156, r24
	}
	
	V2P_SendPacket();
    1e9a:	0e 94 6f 0e 	call	0x1cde <V2P_SendPacket>
    1e9e:	08 95       	ret

00001ea0 <V2P_IncrementCurrAddress>:
}

void V2P_IncrementCurrAddress(void)
{
	// Incrementing a 32-bit unsigned variable takes a lot of code. Because much of the code is
	// not very time critical (much of it is waiting for the hardware), i've chosen to waste
	// a few extra cycles per increment and save a good 60 bytes or so of code space by putting
	// the incrmement inside a function.

	CurrAddress++;
    1ea0:	80 91 4c 01 	lds	r24, 0x014C
    1ea4:	90 91 4d 01 	lds	r25, 0x014D
    1ea8:	a0 91 4e 01 	lds	r26, 0x014E
    1eac:	b0 91 4f 01 	lds	r27, 0x014F
    1eb0:	01 96       	adiw	r24, 0x01	; 1
    1eb2:	a1 1d       	adc	r26, r1
    1eb4:	b1 1d       	adc	r27, r1
    1eb6:	80 93 4c 01 	sts	0x014C, r24
    1eba:	90 93 4d 01 	sts	0x014D, r25
    1ebe:	a0 93 4e 01 	sts	0x014E, r26
    1ec2:	b0 93 4f 01 	sts	0x014F, r27
    1ec6:	08 95       	ret

00001ec8 <V2P_CheckForExtendedAddress>:
}

void V2P_CheckForExtendedAddress(void)
{
	if (CurrAddress & V2P_LOAD_EXTENDED_ADDR_FLAG)     // MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
    1ec8:	80 91 4c 01 	lds	r24, 0x014C
    1ecc:	90 91 4d 01 	lds	r25, 0x014D
    1ed0:	a0 91 4e 01 	lds	r26, 0x014E
    1ed4:	b0 91 4f 01 	lds	r27, 0x014F
    1ed8:	b7 ff       	sbrs	r27, 7
    1eda:	1e c0       	rjmp	.+60     	; 0x1f18 <V2P_CheckForExtendedAddress+0x50>
	{
		USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);   // Load extended address command
    1edc:	8d e4       	ldi	r24, 0x4D	; 77
    1ede:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
		USI_SPITransmit((CurrAddress & V2P_LOAD_EXTENDED_ADDR_MASK) >> V2P_LOAD_EXTENDED_ADDR_SHIFT);
    1ee8:	80 91 4e 01 	lds	r24, 0x014E
    1eec:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
		
		CurrAddress &= ~(V2P_LOAD_EXTENDED_ADDR_FLAG); // Clear the flag
    1ef6:	80 91 4c 01 	lds	r24, 0x014C
    1efa:	90 91 4d 01 	lds	r25, 0x014D
    1efe:	a0 91 4e 01 	lds	r26, 0x014E
    1f02:	b0 91 4f 01 	lds	r27, 0x014F
    1f06:	bf 77       	andi	r27, 0x7F	; 127
    1f08:	80 93 4c 01 	sts	0x014C, r24
    1f0c:	90 93 4d 01 	sts	0x014D, r25
    1f10:	a0 93 4e 01 	sts	0x014E, r26
    1f14:	b0 93 4f 01 	sts	0x014F, r27
    1f18:	08 95       	ret

00001f1a <V2P_RunStateMachine>:
    1f1a:	ef 92       	push	r14
    1f1c:	ff 92       	push	r15
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	cf 93       	push	r28
    1f24:	c0 e0       	ldi	r28, 0x00	; 0
    1f26:	ee 24       	eor	r14, r14
    1f28:	ff 24       	eor	r15, r15
    1f2a:	0e 94 b4 0b 	call	0x1768 <BUFF_InitialiseBuffer>
    1f2e:	c0 93 81 00 	sts	0x0081, r28
    1f32:	c0 93 50 01 	sts	0x0150, r28
    1f36:	10 92 4c 01 	sts	0x014C, r1
    1f3a:	10 92 4d 01 	sts	0x014D, r1
    1f3e:	10 92 4e 01 	sts	0x014E, r1
    1f42:	10 92 4f 01 	sts	0x014F, r1
    1f46:	80 91 49 01 	lds	r24, 0x0149
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	11 f4       	brne	.+4      	; 0x1f52 <V2P_RunStateMachine+0x38>
    1f4e:	ca e0       	ldi	r28, 0x0A	; 10
    1f50:	11 c0       	rjmp	.+34     	; 0x1f74 <V2P_RunStateMachine+0x5a>
    1f52:	cc 23       	and	r28, r28
    1f54:	79 f0       	breq	.+30     	; 0x1f74 <V2P_RunStateMachine+0x5a>
    1f56:	10 92 49 01 	sts	0x0149, r1
    1f5a:	10 92 4a 01 	sts	0x014A, r1
    1f5e:	10 92 b2 00 	sts	0x00B2, r1
    1f62:	80 ef       	ldi	r24, 0xF0	; 240
    1f64:	80 93 b3 00 	sts	0x00B3, r24
    1f68:	82 e0       	ldi	r24, 0x02	; 2
    1f6a:	80 93 70 00 	sts	0x0070, r24
    1f6e:	8f e0       	ldi	r24, 0x0F	; 15
    1f70:	80 93 b0 00 	sts	0x00B0, r24
    1f74:	8c 2f       	mov	r24, r28
    1f76:	99 27       	eor	r25, r25
    1f78:	85 30       	cpi	r24, 0x05	; 5
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <V2P_RunStateMachine+0x66>
    1f7e:	87 c0       	rjmp	.+270    	; 0x208e <V2P_RunStateMachine+0x174>
    1f80:	86 30       	cpi	r24, 0x06	; 6
    1f82:	91 05       	cpc	r25, r1
    1f84:	ac f4       	brge	.+42     	; 0x1fb0 <V2P_RunStateMachine+0x96>
    1f86:	82 30       	cpi	r24, 0x02	; 2
    1f88:	91 05       	cpc	r25, r1
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <V2P_RunStateMachine+0x74>
    1f8c:	57 c0       	rjmp	.+174    	; 0x203c <V2P_RunStateMachine+0x122>
    1f8e:	83 30       	cpi	r24, 0x03	; 3
    1f90:	91 05       	cpc	r25, r1
    1f92:	34 f4       	brge	.+12     	; 0x1fa0 <V2P_RunStateMachine+0x86>
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	99 f1       	breq	.+102    	; 0x1ffe <V2P_RunStateMachine+0xe4>
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <V2P_RunStateMachine+0x84>
    1f9c:	49 c0       	rjmp	.+146    	; 0x2030 <V2P_RunStateMachine+0x116>
    1f9e:	d3 cf       	rjmp	.-90     	; 0x1f46 <V2P_RunStateMachine+0x2c>
    1fa0:	83 30       	cpi	r24, 0x03	; 3
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <V2P_RunStateMachine+0x8e>
    1fa6:	53 c0       	rjmp	.+166    	; 0x204e <V2P_RunStateMachine+0x134>
    1fa8:	04 97       	sbiw	r24, 0x04	; 4
    1faa:	09 f4       	brne	.+2      	; 0x1fae <V2P_RunStateMachine+0x94>
    1fac:	5b c0       	rjmp	.+182    	; 0x2064 <V2P_RunStateMachine+0x14a>
    1fae:	cb cf       	rjmp	.-106    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    1fb0:	88 30       	cpi	r24, 0x08	; 8
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	d1 f0       	breq	.+52     	; 0x1fea <V2P_RunStateMachine+0xd0>
    1fb6:	89 30       	cpi	r24, 0x09	; 9
    1fb8:	91 05       	cpc	r25, r1
    1fba:	44 f4       	brge	.+16     	; 0x1fcc <V2P_RunStateMachine+0xb2>
    1fbc:	86 30       	cpi	r24, 0x06	; 6
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <V2P_RunStateMachine+0xaa>
    1fc2:	6d c0       	rjmp	.+218    	; 0x209e <V2P_RunStateMachine+0x184>
    1fc4:	07 97       	sbiw	r24, 0x07	; 7
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <V2P_RunStateMachine+0xb0>
    1fc8:	7e c0       	rjmp	.+252    	; 0x20c6 <V2P_RunStateMachine+0x1ac>
    1fca:	bd cf       	rjmp	.-134    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    1fcc:	89 30       	cpi	r24, 0x09	; 9
    1fce:	91 05       	cpc	r25, r1
    1fd0:	09 f4       	brne	.+2      	; 0x1fd4 <V2P_RunStateMachine+0xba>
    1fd2:	ab c0       	rjmp	.+342    	; 0x212a <V2P_RunStateMachine+0x210>
    1fd4:	0a 97       	sbiw	r24, 0x0a	; 10
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <V2P_RunStateMachine+0xc0>
    1fd8:	b6 cf       	rjmp	.-148    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	90 93 52 01 	sts	0x0152, r25
    1fe2:	80 93 51 01 	sts	0x0151, r24
    1fe6:	80 e8       	ldi	r24, 0x80	; 128
    1fe8:	f6 c0       	rjmp	.+492    	; 0x21d6 <V2P_RunStateMachine+0x2bc>
    1fea:	10 92 49 01 	sts	0x0149, r1
    1fee:	0e 94 b4 0b 	call	0x1768 <BUFF_InitialiseBuffer>
    1ff2:	10 92 b0 00 	sts	0x00B0, r1
    1ff6:	10 92 70 00 	sts	0x0070, r1
    1ffa:	c0 e0       	ldi	r28, 0x00	; 0
    1ffc:	a4 cf       	rjmp	.-184    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    1ffe:	80 91 b7 02 	lds	r24, 0x02B7
    2002:	81 11       	cpse	r24, r1
    2004:	c1 e0       	ldi	r28, 0x01	; 1
    2006:	f2 9b       	sbis	0x1e, 2	; 30
    2008:	9e cf       	rjmp	.-196    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    200a:	80 91 50 01 	lds	r24, 0x0150
    200e:	88 23       	and	r24, r24
    2010:	09 f0       	breq	.+2      	; 0x2014 <V2P_RunStateMachine+0xfa>
    2012:	99 cf       	rjmp	.-206    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    2014:	80 e8       	ldi	r24, 0x80	; 128
    2016:	80 93 61 00 	sts	0x0061, r24
    201a:	83 e0       	ldi	r24, 0x03	; 3
    201c:	80 93 61 00 	sts	0x0061, r24
    2020:	80 91 c1 00 	lds	r24, 0x00C1
    2024:	80 78       	andi	r24, 0x80	; 128
    2026:	80 93 c1 00 	sts	0x00C1, r24
    202a:	0e 94 fe 0b 	call	0x17fc <TOUT_SetupSleepTimer>
    202e:	d9 c0       	rjmp	.+434    	; 0x21e2 <V2P_RunStateMachine+0x2c8>
    2030:	0e 94 37 09 	call	0x126e <USART_Rx>
    2034:	8b 31       	cpi	r24, 0x1B	; 27
    2036:	89 f5       	brne	.+98     	; 0x209a <V2P_RunStateMachine+0x180>
    2038:	c2 e0       	ldi	r28, 0x02	; 2
    203a:	85 cf       	rjmp	.-246    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    203c:	0e 94 37 09 	call	0x126e <USART_Rx>
    2040:	99 27       	eor	r25, r25
    2042:	90 93 54 01 	sts	0x0154, r25
    2046:	80 93 53 01 	sts	0x0153, r24
    204a:	c3 e0       	ldi	r28, 0x03	; 3
    204c:	7c cf       	rjmp	.-264    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    204e:	0e 94 37 09 	call	0x126e <USART_Rx>
    2052:	99 27       	eor	r25, r25
    2054:	98 2f       	mov	r25, r24
    2056:	88 27       	eor	r24, r24
    2058:	90 93 52 01 	sts	0x0152, r25
    205c:	80 93 51 01 	sts	0x0151, r24
    2060:	c4 e0       	ldi	r28, 0x04	; 4
    2062:	71 cf       	rjmp	.-286    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    2064:	0e 94 37 09 	call	0x126e <USART_Rx>
    2068:	28 2f       	mov	r18, r24
    206a:	33 27       	eor	r19, r19
    206c:	80 91 51 01 	lds	r24, 0x0151
    2070:	90 91 52 01 	lds	r25, 0x0152
    2074:	82 2b       	or	r24, r18
    2076:	93 2b       	or	r25, r19
    2078:	90 93 52 01 	sts	0x0152, r25
    207c:	80 93 51 01 	sts	0x0151, r24
    2080:	83 51       	subi	r24, 0x13	; 19
    2082:	91 40       	sbci	r25, 0x01	; 1
    2084:	50 f4       	brcc	.+20     	; 0x209a <V2P_RunStateMachine+0x180>
    2086:	c5 e0       	ldi	r28, 0x05	; 5
    2088:	ee 24       	eor	r14, r14
    208a:	ff 24       	eor	r15, r15
    208c:	5c cf       	rjmp	.-328    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    208e:	0e 94 37 09 	call	0x126e <USART_Rx>
    2092:	8e 30       	cpi	r24, 0x0E	; 14
    2094:	11 f4       	brne	.+4      	; 0x209a <V2P_RunStateMachine+0x180>
    2096:	c6 e0       	ldi	r28, 0x06	; 6
    2098:	56 cf       	rjmp	.-340    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    209a:	c9 e0       	ldi	r28, 0x09	; 9
    209c:	54 cf       	rjmp	.-344    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    209e:	80 91 51 01 	lds	r24, 0x0151
    20a2:	90 91 52 01 	lds	r25, 0x0152
    20a6:	e8 16       	cp	r14, r24
    20a8:	f9 06       	cpc	r15, r25
    20aa:	11 f4       	brne	.+4      	; 0x20b0 <V2P_RunStateMachine+0x196>
    20ac:	c7 e0       	ldi	r28, 0x07	; 7
    20ae:	4b cf       	rjmp	.-362    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    20b0:	87 01       	movw	r16, r14
    20b2:	0b 5a       	subi	r16, 0xAB	; 171
    20b4:	1e 4f       	sbci	r17, 0xFE	; 254
    20b6:	08 94       	sec
    20b8:	e1 1c       	adc	r14, r1
    20ba:	f1 1c       	adc	r15, r1
    20bc:	0e 94 37 09 	call	0x126e <USART_Rx>
    20c0:	f8 01       	movw	r30, r16
    20c2:	80 83       	st	Z, r24
    20c4:	40 cf       	rjmp	.-384    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    20c6:	0e 94 4e 0e 	call	0x1c9c <V2P_GetChecksum>
    20ca:	18 2f       	mov	r17, r24
    20cc:	0e 94 37 09 	call	0x126e <USART_Rx>
    20d0:	18 17       	cp	r17, r24
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <V2P_RunStateMachine+0x1bc>
    20d4:	79 c0       	rjmp	.+242    	; 0x21c8 <V2P_RunStateMachine+0x2ae>
    20d6:	c0 91 49 01 	lds	r28, 0x0149
    20da:	cc 23       	and	r28, r28
    20dc:	09 f0       	breq	.+2      	; 0x20e0 <V2P_RunStateMachine+0x1c6>
    20de:	74 c0       	rjmp	.+232    	; 0x21c8 <V2P_RunStateMachine+0x2ae>
    20e0:	80 91 55 01 	lds	r24, 0x0155
    20e4:	99 27       	eor	r25, r25
    20e6:	84 30       	cpi	r24, 0x04	; 4
    20e8:	91 05       	cpc	r25, r1
    20ea:	3c f4       	brge	.+14     	; 0x20fa <V2P_RunStateMachine+0x1e0>
    20ec:	82 30       	cpi	r24, 0x02	; 2
    20ee:	91 05       	cpc	r25, r1
    20f0:	0c f0       	brlt	.+2      	; 0x20f4 <V2P_RunStateMachine+0x1da>
    20f2:	61 c0       	rjmp	.+194    	; 0x21b6 <V2P_RunStateMachine+0x29c>
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	39 f0       	breq	.+14     	; 0x2106 <V2P_RunStateMachine+0x1ec>
    20f8:	61 c0       	rjmp	.+194    	; 0x21bc <V2P_RunStateMachine+0x2a2>
    20fa:	86 30       	cpi	r24, 0x06	; 6
    20fc:	91 05       	cpc	r25, r1
    20fe:	e9 f0       	breq	.+58     	; 0x213a <V2P_RunStateMachine+0x220>
    2100:	07 97       	sbiw	r24, 0x07	; 7
    2102:	99 f0       	breq	.+38     	; 0x212a <V2P_RunStateMachine+0x210>
    2104:	5b c0       	rjmp	.+182    	; 0x21bc <V2P_RunStateMachine+0x2a2>
    2106:	8b e0       	ldi	r24, 0x0B	; 11
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	90 93 52 01 	sts	0x0152, r25
    210e:	80 93 51 01 	sts	0x0151, r24
    2112:	a5 e5       	ldi	r26, 0x55	; 85
    2114:	b1 e0       	ldi	r27, 0x01	; 1
    2116:	e5 ef       	ldi	r30, 0xF5	; 245
    2118:	f3 e0       	ldi	r31, 0x03	; 3
    211a:	9a e0       	ldi	r25, 0x0A	; 10
    211c:	84 91       	lpm	r24, Z
    211e:	8d 93       	st	X+, r24
    2120:	91 50       	subi	r25, 0x01	; 1
    2122:	31 96       	adiw	r30, 0x01	; 1
    2124:	97 ff       	sbrs	r25, 7
    2126:	fa cf       	rjmp	.-12     	; 0x211c <V2P_RunStateMachine+0x202>
    2128:	58 c0       	rjmp	.+176    	; 0x21da <V2P_RunStateMachine+0x2c0>
    212a:	82 e0       	ldi	r24, 0x02	; 2
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	90 93 52 01 	sts	0x0152, r25
    2132:	80 93 51 01 	sts	0x0151, r24
    2136:	80 ec       	ldi	r24, 0xC0	; 192
    2138:	4e c0       	rjmp	.+156    	; 0x21d6 <V2P_RunStateMachine+0x2bc>
    213a:	82 e0       	ldi	r24, 0x02	; 2
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	90 93 52 01 	sts	0x0152, r25
    2142:	80 93 51 01 	sts	0x0151, r24
    2146:	0e 94 64 0f 	call	0x1ec8 <V2P_CheckForExtendedAddress>
    214a:	80 91 56 01 	lds	r24, 0x0156
    214e:	99 27       	eor	r25, r25
    2150:	aa 27       	eor	r26, r26
    2152:	bb 27       	eor	r27, r27
    2154:	b8 2f       	mov	r27, r24
    2156:	aa 27       	eor	r26, r26
    2158:	99 27       	eor	r25, r25
    215a:	88 27       	eor	r24, r24
    215c:	20 91 57 01 	lds	r18, 0x0157
    2160:	33 27       	eor	r19, r19
    2162:	44 27       	eor	r20, r20
    2164:	55 27       	eor	r21, r21
    2166:	a9 01       	movw	r20, r18
    2168:	33 27       	eor	r19, r19
    216a:	22 27       	eor	r18, r18
    216c:	82 2b       	or	r24, r18
    216e:	93 2b       	or	r25, r19
    2170:	a4 2b       	or	r26, r20
    2172:	b5 2b       	or	r27, r21
    2174:	20 91 58 01 	lds	r18, 0x0158
    2178:	33 27       	eor	r19, r19
    217a:	44 27       	eor	r20, r20
    217c:	55 27       	eor	r21, r21
    217e:	54 2f       	mov	r21, r20
    2180:	43 2f       	mov	r20, r19
    2182:	32 2f       	mov	r19, r18
    2184:	22 27       	eor	r18, r18
    2186:	82 2b       	or	r24, r18
    2188:	93 2b       	or	r25, r19
    218a:	a4 2b       	or	r26, r20
    218c:	b5 2b       	or	r27, r21
    218e:	20 91 59 01 	lds	r18, 0x0159
    2192:	33 27       	eor	r19, r19
    2194:	44 27       	eor	r20, r20
    2196:	55 27       	eor	r21, r21
    2198:	82 2b       	or	r24, r18
    219a:	93 2b       	or	r25, r19
    219c:	a4 2b       	or	r26, r20
    219e:	b5 2b       	or	r27, r21
    21a0:	80 93 4c 01 	sts	0x014C, r24
    21a4:	90 93 4d 01 	sts	0x014D, r25
    21a8:	a0 93 4e 01 	sts	0x014E, r26
    21ac:	b0 93 4f 01 	sts	0x014F, r27
    21b0:	c0 93 56 01 	sts	0x0156, r28
    21b4:	12 c0       	rjmp	.+36     	; 0x21da <V2P_RunStateMachine+0x2c0>
    21b6:	0e 94 af 0e 	call	0x1d5e <V2P_GetSetParamater>
    21ba:	11 c0       	rjmp	.+34     	; 0x21de <V2P_RunStateMachine+0x2c4>
    21bc:	e0 91 02 01 	lds	r30, 0x0102
    21c0:	f0 91 03 01 	lds	r31, 0x0103
    21c4:	09 95       	icall
    21c6:	0b c0       	rjmp	.+22     	; 0x21de <V2P_RunStateMachine+0x2c4>
    21c8:	82 e0       	ldi	r24, 0x02	; 2
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	90 93 52 01 	sts	0x0152, r25
    21d0:	80 93 51 01 	sts	0x0151, r24
    21d4:	81 ec       	ldi	r24, 0xC1	; 193
    21d6:	80 93 56 01 	sts	0x0156, r24
    21da:	0e 94 6f 0e 	call	0x1cde <V2P_SendPacket>
    21de:	c8 e0       	ldi	r28, 0x08	; 8
    21e0:	b2 ce       	rjmp	.-668    	; 0x1f46 <V2P_RunStateMachine+0x2c>
    21e2:	cf 91       	pop	r28
    21e4:	1f 91       	pop	r17
    21e6:	0f 91       	pop	r16
    21e8:	ff 90       	pop	r15
    21ea:	ef 90       	pop	r14
    21ec:	08 95       	ret

000021ee <ISPCC_EnterChipProgrammingMode>:

// ======================================================================================

void ISPCC_EnterChipProgrammingMode(void)
{
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
	uint8_t ByteDelay = PacketBytes[5];
    21f4:	10 91 5a 01 	lds	r17, 0x015A
	uint8_t Attempts  = PacketBytes[4];
    21f8:	c0 91 59 01 	lds	r28, 0x0159
	uint8_t Response;

	MAIN_Delay1MS(PacketBytes[2]);         // Wait before continuing, amount specified in the packet
    21fc:	80 91 57 01 	lds	r24, 0x0157
    2200:	0e 94 12 03 	call	0x624 <MAIN_Delay1MS>

	if ((!(Attempts)) || (Attempts > 100)) // if no attempts or too high a value is specified, a fixed number is chosen
    2204:	8c 2f       	mov	r24, r28
    2206:	81 50       	subi	r24, 0x01	; 1
    2208:	84 36       	cpi	r24, 0x64	; 100
    220a:	08 f0       	brcs	.+2      	; 0x220e <ISPCC_EnterChipProgrammingMode+0x20>
	   Attempts = 24;
    220c:	c8 e1       	ldi	r28, 0x18	; 24
		
	while (Attempts--)
	{
		USI_SPITransmit(PacketBytes[8]);
		MAIN_Delay1MS(ByteDelay);
		USI_SPITransmit(PacketBytes[9]);
		MAIN_Delay1MS(ByteDelay);
			
		Response = USI_SPITransmit(PacketBytes[10]);
		MAIN_Delay1MS(ByteDelay);

		if (PacketBytes[7] == ISPCC_POLL_MODE_AVR)
		  USI_SPITransmit(PacketBytes[11]);
		else
		  Response = USI_SPITransmit(PacketBytes[11]);
				
		if (!(PacketBytes[7]) || (Response == PacketBytes[6])) // Polling disabled, or returned value matches expected poll value
		{
			MAIN_Delay1MS(ByteDelay);

			InProgrammingMode = TRUE;
			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = AICB_STATUS_CMD_OK;
			return;
		}
		
		MAIN_Delay1MS(ByteDelay);
		USI_SPIToggleClock();            // Out of sync, shift in one bit and try again
    220e:	c1 50       	subi	r28, 0x01	; 1
    2210:	cf 3f       	cpi	r28, 0xFF	; 255
    2212:	09 f4       	brne	.+2      	; 0x2216 <ISPCC_EnterChipProgrammingMode+0x28>
    2214:	3f c0       	rjmp	.+126    	; 0x2294 <ISPCC_EnterChipProgrammingMode+0xa6>
    2216:	80 91 5d 01 	lds	r24, 0x015D
    221a:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    221e:	81 2f       	mov	r24, r17
    2220:	0e 94 12 03 	call	0x624 <MAIN_Delay1MS>
    2224:	80 91 5e 01 	lds	r24, 0x015E
    2228:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    222c:	81 2f       	mov	r24, r17
    222e:	0e 94 12 03 	call	0x624 <MAIN_Delay1MS>
    2232:	80 91 5f 01 	lds	r24, 0x015F
    2236:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    223a:	08 2f       	mov	r16, r24
    223c:	81 2f       	mov	r24, r17
    223e:	0e 94 12 03 	call	0x624 <MAIN_Delay1MS>
    2242:	80 91 5c 01 	lds	r24, 0x015C
    2246:	83 30       	cpi	r24, 0x03	; 3
    2248:	29 f4       	brne	.+10     	; 0x2254 <ISPCC_EnterChipProgrammingMode+0x66>
    224a:	80 91 60 01 	lds	r24, 0x0160
    224e:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    2252:	05 c0       	rjmp	.+10     	; 0x225e <ISPCC_EnterChipProgrammingMode+0x70>
    2254:	80 91 60 01 	lds	r24, 0x0160
    2258:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    225c:	08 2f       	mov	r16, r24
    225e:	80 91 5c 01 	lds	r24, 0x015C
    2262:	88 23       	and	r24, r24
    2264:	21 f0       	breq	.+8      	; 0x226e <ISPCC_EnterChipProgrammingMode+0x80>
    2266:	80 91 5b 01 	lds	r24, 0x015B
    226a:	08 17       	cp	r16, r24
    226c:	69 f4       	brne	.+26     	; 0x2288 <ISPCC_EnterChipProgrammingMode+0x9a>
    226e:	81 2f       	mov	r24, r17
    2270:	0e 94 12 03 	call	0x624 <MAIN_Delay1MS>
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	80 93 50 01 	sts	0x0150, r24
    227a:	81 b3       	in	r24, 0x11	; 17
    227c:	8f 7c       	andi	r24, 0xCF	; 207
    227e:	80 62       	ori	r24, 0x20	; 32
    2280:	81 bb       	out	0x11, r24	; 17
    2282:	10 92 56 01 	sts	0x0156, r1
    2286:	0d c0       	rjmp	.+26     	; 0x22a2 <ISPCC_EnterChipProgrammingMode+0xb4>
    2288:	81 2f       	mov	r24, r17
    228a:	0e 94 12 03 	call	0x624 <MAIN_Delay1MS>
    228e:	0e 94 d3 09 	call	0x13a6 <USI_SPIToggleClock>
    2292:	bd cf       	rjmp	.-134    	; 0x220e <ISPCC_EnterChipProgrammingMode+0x20>
	}

	// If function hasn't returned by now, all the attempts have failed. Show this by
	// resetting the status leds to green (ready) and send a fail message.

	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
    2294:	81 b3       	in	r24, 0x11	; 17
    2296:	8f 7c       	andi	r24, 0xCF	; 207
    2298:	80 61       	ori	r24, 0x10	; 16
    229a:	81 bb       	out	0x11, r24	; 17
	PacketBytes[1] = AICB_STATUS_CMD_FAILED;
    229c:	80 ec       	ldi	r24, 0xC0	; 192
    229e:	80 93 56 01 	sts	0x0156, r24
    22a2:	cf 91       	pop	r28
    22a4:	1f 91       	pop	r17
    22a6:	0f 91       	pop	r16
    22a8:	08 95       	ret

000022aa <ISPCC_PollForProgComplete>:
}

void ISPCC_ProgramChip(void)
{
	uint16_t PollAddress  = 0;
	uint8_t  ProgMode     = PacketBytes[3];
	uint8_t  WriteCommand = PacketBytes[5];
	uint16_t StartAddress = (uint16_t)CurrAddress;
	uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
	                      | PacketBytes[2];
	uint8_t  PollType;
	uint8_t  ByteToWrite;
			
	if (ProgMode & ISPCC_PROG_MODE_PAGE)                 // Page writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++) // Transmit the page bytes
		{
			ByteToWrite = PacketBytes[10 + WriteByte];
		
			if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP) // Flash write mode - word addresses so MSB/LSB masking 
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else                                         // EEPROM write mode - byte addresses so no masking 
			   USI_SPITransmit(WriteCommand);

			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Only the LSW of the address should be sent
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			if (!(PollAddress))
			{
				if ((PacketBytes[8] != ByteToWrite)       // Can do polling
				   && ((PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == AICB_CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
				{
					PollAddress = (CurrAddress & 0xFFFF); // Save the current address
				
					if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP)
					   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
				}
			}

			// Flash addresses are in words; only increment address on odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == AICB_CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();
		}

		PollType = ProgMode;

		if (ProgMode & ISPCC_PROG_MODE_PAGEDONE)         // If this packet is the end of a page, we need to send the program page command
		{
			USI_SPITransmit(PacketBytes[6]);             // Send the write program memory page command
			USI_SPITransmitWord(StartAddress);           // Send the page address word
			USI_SPITransmit(0x00);

			if (!(PollAddress))                          // No polling address
			   PollType = ((ProgMode & ~ISPCC_PAGE_POLLTYPE_MASK) | ISPCC_PAGE_POLLTYPE_WAIT);

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
	else                                                 // Flash Word writing mode or EEPROM byte writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++)
		{
			ByteToWrite = PacketBytes[10 + WriteByte];

			if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP)
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else
			   USI_SPITransmit(WriteCommand);					
					
			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Transmit the current address to the slave AVR
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			PollType = ProgMode;

			if ((PacketBytes[8] != ByteToWrite)           // Can do polling
			   && ((PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == AICB_CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
			{
				PollAddress = (CurrAddress & 0xFFFF);     // Save the current address;

				if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP)
				   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
			}
			else
			{
				PollType = ((ProgMode & ~ISPCC_WORD_POLLTYPE_MASK) | ISPCC_WORD_POLLTYPE_WAIT);
			}					

			// Flash addresses are in words; only increment address on the odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == AICB_CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
}

void ISPCC_PollForProgComplete(const uint8_t PollData, uint16_t PollAddr)
{
    22aa:	1f 93       	push	r17
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	eb 01       	movw	r28, r22
	uint8_t PollType;
	uint8_t ProgCommand;

	if (PollData & ISPCC_PROG_MODE_PAGE)
    22b2:	99 27       	eor	r25, r25
    22b4:	80 ff       	sbrs	r24, 0
    22b6:	08 c0       	rjmp	.+16     	; 0x22c8 <ISPCC_PollForProgComplete+0x1e>
	   PollType = ((PollData & ISPCC_PAGE_POLLTYPE_MASK) >> ISPCC_PAGE_POLLTYPE_MASKSHIFT);
    22b8:	80 77       	andi	r24, 0x70	; 112
    22ba:	90 70       	andi	r25, 0x00	; 0
    22bc:	34 e0       	ldi	r19, 0x04	; 4
    22be:	95 95       	asr	r25
    22c0:	87 95       	ror	r24
    22c2:	3a 95       	dec	r19
    22c4:	e1 f7       	brne	.-8      	; 0x22be <ISPCC_PollForProgComplete+0x14>
    22c6:	04 c0       	rjmp	.+8      	; 0x22d0 <ISPCC_PollForProgComplete+0x26>
	else
	   PollType = ((PollData & ISPCC_WORD_POLLTYPE_MASK) >> ISPCC_WORD_POLLTYPE_MASKSHIFT);	
    22c8:	8e 70       	andi	r24, 0x0E	; 14
    22ca:	90 70       	andi	r25, 0x00	; 0
    22cc:	95 95       	asr	r25
    22ce:	87 95       	ror	r24

	switch (PollType & ISPCC_POLLTYPE_MASK)
    22d0:	99 27       	eor	r25, r25
    22d2:	87 70       	andi	r24, 0x07	; 7
    22d4:	90 70       	andi	r25, 0x00	; 0
    22d6:	82 30       	cpi	r24, 0x02	; 2
    22d8:	91 05       	cpc	r25, r1
    22da:	19 f0       	breq	.+6      	; 0x22e2 <ISPCC_PollForProgComplete+0x38>
    22dc:	04 97       	sbiw	r24, 0x04	; 4
    22de:	e1 f0       	breq	.+56     	; 0x2318 <ISPCC_PollForProgComplete+0x6e>
    22e0:	26 c0       	rjmp	.+76     	; 0x232e <ISPCC_PollForProgComplete+0x84>
	{
		case ISPCC_POLLTYPE_DATA:
			ProgCommand = PacketBytes[7];
    22e2:	10 91 5c 01 	lds	r17, 0x015C
			
			if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP) // Flash uses word addresses
    22e6:	80 91 55 01 	lds	r24, 0x0155
    22ea:	83 31       	cpi	r24, 0x13	; 19
    22ec:	39 f4       	brne	.+14     	; 0x22fc <ISPCC_PollForProgComplete+0x52>
			{
				ProgCommand  |= ((PollAddr & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ);
    22ee:	81 2f       	mov	r24, r17
    22f0:	99 27       	eor	r25, r25
    22f2:	c0 fd       	sbrc	r28, 0
    22f4:	88 60       	ori	r24, 0x08	; 8
    22f6:	18 2f       	mov	r17, r24
				PollAddr    >>= 1;
    22f8:	d6 95       	lsr	r29
    22fa:	c7 95       	ror	r28
			}

			do
			{
				USI_SPITransmit(ProgCommand);
    22fc:	81 2f       	mov	r24, r17
    22fe:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
				USI_SPITransmitWord(PollAddr);
    2302:	ce 01       	movw	r24, r28
    2304:	0e 94 c5 09 	call	0x138a <USI_SPITransmitWord>
			}
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    230e:	90 91 5d 01 	lds	r25, 0x015D
    2312:	89 17       	cp	r24, r25
    2314:	99 f3       	breq	.-26     	; 0x22fc <ISPCC_PollForProgComplete+0x52>
			while (USI_SPITransmit(0x00) == PacketBytes[8]);
						
			break;
    2316:	0f c0       	rjmp	.+30     	; 0x2336 <ISPCC_PollForProgComplete+0x8c>
		case ISPCC_POLLTYPE_READY:
			do
			   USI_SPITransmitWord(0xF000);
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 ef       	ldi	r25, 0xF0	; 240
    231c:	0e 94 c5 09 	call	0x138a <USI_SPITransmitWord>
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 c5 09 	call	0x138a <USI_SPITransmitWord>
    2328:	80 fd       	sbrc	r24, 0
    232a:	f6 cf       	rjmp	.-20     	; 0x2318 <ISPCC_PollForProgComplete+0x6e>
			while (USI_SPITransmitWord(0x0000) & ISPCC_POLL_BUSYFLAG);

			break;
    232c:	04 c0       	rjmp	.+8      	; 0x2336 <ISPCC_PollForProgComplete+0x8c>
		default:                                      // Default is Wait polling
			MAIN_Delay1MS(PacketBytes[4]);	
    232e:	80 91 59 01 	lds	r24, 0x0159
    2332:	0e 94 12 03 	call	0x624 <MAIN_Delay1MS>
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	1f 91       	pop	r17
    233c:	08 95       	ret

0000233e <ISPCC_ProgramChip>:
    233e:	6f 92       	push	r6
    2340:	7f 92       	push	r7
    2342:	9f 92       	push	r9
    2344:	af 92       	push	r10
    2346:	bf 92       	push	r11
    2348:	cf 92       	push	r12
    234a:	df 92       	push	r13
    234c:	ef 92       	push	r14
    234e:	ff 92       	push	r15
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	00 e0       	ldi	r16, 0x00	; 0
    235a:	10 e0       	ldi	r17, 0x00	; 0
    235c:	90 90 58 01 	lds	r9, 0x0158
    2360:	c0 90 5a 01 	lds	r12, 0x015A
    2364:	60 90 4c 01 	lds	r6, 0x014C
    2368:	70 90 4d 01 	lds	r7, 0x014D
    236c:	80 91 56 01 	lds	r24, 0x0156
    2370:	99 27       	eor	r25, r25
    2372:	b8 2e       	mov	r11, r24
    2374:	aa 24       	eor	r10, r10
    2376:	80 91 57 01 	lds	r24, 0x0157
    237a:	99 27       	eor	r25, r25
    237c:	a8 2a       	or	r10, r24
    237e:	b9 2a       	or	r11, r25
    2380:	90 fe       	sbrs	r9, 0
    2382:	62 c0       	rjmp	.+196    	; 0x2448 <ISPCC_ProgramChip+0x10a>
    2384:	78 01       	movw	r14, r16
    2386:	0a 15       	cp	r16, r10
    2388:	1b 05       	cpc	r17, r11
    238a:	08 f0       	brcs	.+2      	; 0x238e <ISPCC_ProgramChip+0x50>
    238c:	46 c0       	rjmp	.+140    	; 0x241a <ISPCC_ProgramChip+0xdc>
    238e:	cf e5       	ldi	r28, 0x5F	; 95
    2390:	d1 e0       	ldi	r29, 0x01	; 1
    2392:	d9 90       	ld	r13, Y+
    2394:	80 91 55 01 	lds	r24, 0x0155
    2398:	83 31       	cpi	r24, 0x13	; 19
    239a:	31 f4       	brne	.+12     	; 0x23a8 <ISPCC_ProgramChip+0x6a>
    239c:	8c 2d       	mov	r24, r12
    239e:	99 27       	eor	r25, r25
    23a0:	e0 fe       	sbrs	r14, 0
    23a2:	03 c0       	rjmp	.+6      	; 0x23aa <ISPCC_ProgramChip+0x6c>
    23a4:	88 60       	ori	r24, 0x08	; 8
    23a6:	01 c0       	rjmp	.+2      	; 0x23aa <ISPCC_ProgramChip+0x6c>
    23a8:	8c 2d       	mov	r24, r12
    23aa:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    23ae:	80 91 4c 01 	lds	r24, 0x014C
    23b2:	90 91 4d 01 	lds	r25, 0x014D
    23b6:	0e 94 c5 09 	call	0x138a <USI_SPITransmitWord>
    23ba:	8d 2d       	mov	r24, r13
    23bc:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    23c0:	01 15       	cp	r16, r1
    23c2:	11 05       	cpc	r17, r1
    23c4:	d9 f4       	brne	.+54     	; 0x23fc <ISPCC_ProgramChip+0xbe>
    23c6:	80 91 5d 01 	lds	r24, 0x015D
    23ca:	8d 15       	cp	r24, r13
    23cc:	b9 f0       	breq	.+46     	; 0x23fc <ISPCC_ProgramChip+0xbe>
    23ce:	90 91 55 01 	lds	r25, 0x0155
    23d2:	93 31       	cpi	r25, 0x13	; 19
    23d4:	31 f0       	breq	.+12     	; 0x23e2 <ISPCC_ProgramChip+0xa4>
    23d6:	95 31       	cpi	r25, 0x15	; 21
    23d8:	89 f4       	brne	.+34     	; 0x23fc <ISPCC_ProgramChip+0xbe>
    23da:	80 91 5e 01 	lds	r24, 0x015E
    23de:	8d 15       	cp	r24, r13
    23e0:	69 f0       	breq	.+26     	; 0x23fc <ISPCC_ProgramChip+0xbe>
    23e2:	00 91 4c 01 	lds	r16, 0x014C
    23e6:	10 91 4d 01 	lds	r17, 0x014D
    23ea:	93 31       	cpi	r25, 0x13	; 19
    23ec:	39 f4       	brne	.+14     	; 0x23fc <ISPCC_ProgramChip+0xbe>
    23ee:	00 0f       	add	r16, r16
    23f0:	11 1f       	adc	r17, r17
    23f2:	c7 01       	movw	r24, r14
    23f4:	81 70       	andi	r24, 0x01	; 1
    23f6:	90 70       	andi	r25, 0x00	; 0
    23f8:	08 0f       	add	r16, r24
    23fa:	19 1f       	adc	r17, r25
    23fc:	e0 fc       	sbrc	r14, 0
    23fe:	04 c0       	rjmp	.+8      	; 0x2408 <ISPCC_ProgramChip+0xca>
    2400:	80 91 55 01 	lds	r24, 0x0155
    2404:	85 31       	cpi	r24, 0x15	; 21
    2406:	11 f4       	brne	.+4      	; 0x240c <ISPCC_ProgramChip+0xce>
    2408:	0e 94 50 0f 	call	0x1ea0 <V2P_IncrementCurrAddress>
    240c:	08 94       	sec
    240e:	e1 1c       	adc	r14, r1
    2410:	f1 1c       	adc	r15, r1
    2412:	ea 14       	cp	r14, r10
    2414:	fb 04       	cpc	r15, r11
    2416:	08 f4       	brcc	.+2      	; 0x241a <ISPCC_ProgramChip+0xdc>
    2418:	bc cf       	rjmp	.-136    	; 0x2392 <ISPCC_ProgramChip+0x54>
    241a:	c9 2d       	mov	r28, r9
    241c:	97 fe       	sbrs	r9, 7
    241e:	69 c0       	rjmp	.+210    	; 0x24f2 <ISPCC_ProgramChip+0x1b4>
    2420:	80 91 5b 01 	lds	r24, 0x015B
    2424:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    2428:	c3 01       	movw	r24, r6
    242a:	0e 94 c5 09 	call	0x138a <USI_SPITransmitWord>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    2434:	01 15       	cp	r16, r1
    2436:	11 05       	cpc	r17, r1
    2438:	11 f4       	brne	.+4      	; 0x243e <ISPCC_ProgramChip+0x100>
    243a:	cf 78       	andi	r28, 0x8F	; 143
    243c:	c0 61       	ori	r28, 0x10	; 16
    243e:	b8 01       	movw	r22, r16
    2440:	8c 2f       	mov	r24, r28
    2442:	0e 94 55 11 	call	0x22aa <ISPCC_PollForProgComplete>
    2446:	55 c0       	rjmp	.+170    	; 0x24f2 <ISPCC_ProgramChip+0x1b4>
    2448:	78 01       	movw	r14, r16
    244a:	0a 15       	cp	r16, r10
    244c:	1b 05       	cpc	r17, r11
    244e:	08 f0       	brcs	.+2      	; 0x2452 <ISPCC_ProgramChip+0x114>
    2450:	50 c0       	rjmp	.+160    	; 0x24f2 <ISPCC_ProgramChip+0x1b4>
    2452:	5f e5       	ldi	r21, 0x5F	; 95
    2454:	65 2e       	mov	r6, r21
    2456:	51 e0       	ldi	r21, 0x01	; 1
    2458:	75 2e       	mov	r7, r21
    245a:	f3 01       	movw	r30, r6
    245c:	d1 90       	ld	r13, Z+
    245e:	3f 01       	movw	r6, r30
    2460:	80 91 55 01 	lds	r24, 0x0155
    2464:	83 31       	cpi	r24, 0x13	; 19
    2466:	31 f4       	brne	.+12     	; 0x2474 <ISPCC_ProgramChip+0x136>
    2468:	8c 2d       	mov	r24, r12
    246a:	99 27       	eor	r25, r25
    246c:	e0 fe       	sbrs	r14, 0
    246e:	03 c0       	rjmp	.+6      	; 0x2476 <ISPCC_ProgramChip+0x138>
    2470:	88 60       	ori	r24, 0x08	; 8
    2472:	01 c0       	rjmp	.+2      	; 0x2476 <ISPCC_ProgramChip+0x138>
    2474:	8c 2d       	mov	r24, r12
    2476:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    247a:	80 91 4c 01 	lds	r24, 0x014C
    247e:	90 91 4d 01 	lds	r25, 0x014D
    2482:	0e 94 c5 09 	call	0x138a <USI_SPITransmitWord>
    2486:	8d 2d       	mov	r24, r13
    2488:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    248c:	c9 2d       	mov	r28, r9
    248e:	80 91 5d 01 	lds	r24, 0x015D
    2492:	8d 15       	cp	r24, r13
    2494:	c1 f0       	breq	.+48     	; 0x24c6 <ISPCC_ProgramChip+0x188>
    2496:	90 91 55 01 	lds	r25, 0x0155
    249a:	93 31       	cpi	r25, 0x13	; 19
    249c:	31 f0       	breq	.+12     	; 0x24aa <ISPCC_ProgramChip+0x16c>
    249e:	95 31       	cpi	r25, 0x15	; 21
    24a0:	91 f4       	brne	.+36     	; 0x24c6 <ISPCC_ProgramChip+0x188>
    24a2:	80 91 5e 01 	lds	r24, 0x015E
    24a6:	8d 15       	cp	r24, r13
    24a8:	71 f0       	breq	.+28     	; 0x24c6 <ISPCC_ProgramChip+0x188>
    24aa:	00 91 4c 01 	lds	r16, 0x014C
    24ae:	10 91 4d 01 	lds	r17, 0x014D
    24b2:	93 31       	cpi	r25, 0x13	; 19
    24b4:	59 f4       	brne	.+22     	; 0x24cc <ISPCC_ProgramChip+0x18e>
    24b6:	00 0f       	add	r16, r16
    24b8:	11 1f       	adc	r17, r17
    24ba:	c7 01       	movw	r24, r14
    24bc:	81 70       	andi	r24, 0x01	; 1
    24be:	90 70       	andi	r25, 0x00	; 0
    24c0:	08 0f       	add	r16, r24
    24c2:	19 1f       	adc	r17, r25
    24c4:	03 c0       	rjmp	.+6      	; 0x24cc <ISPCC_ProgramChip+0x18e>
    24c6:	c9 2d       	mov	r28, r9
    24c8:	c1 7f       	andi	r28, 0xF1	; 241
    24ca:	c2 60       	ori	r28, 0x02	; 2
    24cc:	e0 fc       	sbrc	r14, 0
    24ce:	04 c0       	rjmp	.+8      	; 0x24d8 <ISPCC_ProgramChip+0x19a>
    24d0:	80 91 55 01 	lds	r24, 0x0155
    24d4:	85 31       	cpi	r24, 0x15	; 21
    24d6:	11 f4       	brne	.+4      	; 0x24dc <ISPCC_ProgramChip+0x19e>
    24d8:	0e 94 50 0f 	call	0x1ea0 <V2P_IncrementCurrAddress>
    24dc:	b8 01       	movw	r22, r16
    24de:	8c 2f       	mov	r24, r28
    24e0:	0e 94 55 11 	call	0x22aa <ISPCC_PollForProgComplete>
    24e4:	08 94       	sec
    24e6:	e1 1c       	adc	r14, r1
    24e8:	f1 1c       	adc	r15, r1
    24ea:	ea 14       	cp	r14, r10
    24ec:	fb 04       	cpc	r15, r11
    24ee:	08 f4       	brcc	.+2      	; 0x24f2 <ISPCC_ProgramChip+0x1b4>
    24f0:	b4 cf       	rjmp	.-152    	; 0x245a <ISPCC_ProgramChip+0x11c>
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	1f 91       	pop	r17
    24f8:	0f 91       	pop	r16
    24fa:	ff 90       	pop	r15
    24fc:	ef 90       	pop	r14
    24fe:	df 90       	pop	r13
    2500:	cf 90       	pop	r12
    2502:	bf 90       	pop	r11
    2504:	af 90       	pop	r10
    2506:	9f 90       	pop	r9
    2508:	7f 90       	pop	r7
    250a:	6f 90       	pop	r6
    250c:	08 95       	ret

0000250e <AICI_InterpretPacket>:

// ======================================================================================

void AICI_InterpretPacket(void)
{
    250e:	df 92       	push	r13
    2510:	ef 92       	push	r14
    2512:	ff 92       	push	r15
    2514:	0f 93       	push	r16
    2516:	1f 93       	push	r17
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
	switch (PacketBytes[0])
    251c:	80 91 55 01 	lds	r24, 0x0155
    2520:	99 27       	eor	r25, r25
    2522:	86 31       	cpi	r24, 0x16	; 22
    2524:	91 05       	cpc	r25, r1
    2526:	09 f4       	brne	.+2      	; 0x252a <AICI_InterpretPacket+0x1c>
    2528:	fb c0       	rjmp	.+502    	; 0x2720 <AICI_InterpretPacket+0x212>
    252a:	87 31       	cpi	r24, 0x17	; 23
    252c:	91 05       	cpc	r25, r1
    252e:	94 f4       	brge	.+36     	; 0x2554 <AICI_InterpretPacket+0x46>
    2530:	82 31       	cpi	r24, 0x12	; 18
    2532:	91 05       	cpc	r25, r1
    2534:	09 f4       	brne	.+2      	; 0x2538 <AICI_InterpretPacket+0x2a>
    2536:	60 c0       	rjmp	.+192    	; 0x25f8 <AICI_InterpretPacket+0xea>
    2538:	83 31       	cpi	r24, 0x13	; 19
    253a:	91 05       	cpc	r25, r1
    253c:	3c f4       	brge	.+14     	; 0x254c <AICI_InterpretPacket+0x3e>
    253e:	80 31       	cpi	r24, 0x10	; 16
    2540:	91 05       	cpc	r25, r1
    2542:	f9 f0       	breq	.+62     	; 0x2582 <AICI_InterpretPacket+0x74>
    2544:	41 97       	sbiw	r24, 0x11	; 17
    2546:	09 f4       	brne	.+2      	; 0x254a <AICI_InterpretPacket+0x3c>
    2548:	3d c0       	rjmp	.+122    	; 0x25c4 <AICI_InterpretPacket+0xb6>
    254a:	3e c1       	rjmp	.+636    	; 0x27c8 <AICI_InterpretPacket+0x2ba>
    254c:	44 97       	sbiw	r24, 0x14	; 20
    254e:	09 f4       	brne	.+2      	; 0x2552 <AICI_InterpretPacket+0x44>
    2550:	e7 c0       	rjmp	.+462    	; 0x2720 <AICI_InterpretPacket+0x212>
    2552:	2f c1       	rjmp	.+606    	; 0x27b2 <AICI_InterpretPacket+0x2a4>
    2554:	89 31       	cpi	r24, 0x19	; 25
    2556:	91 05       	cpc	r25, r1
    2558:	09 f4       	brne	.+2      	; 0x255c <AICI_InterpretPacket+0x4e>
    255a:	cc c0       	rjmp	.+408    	; 0x26f4 <AICI_InterpretPacket+0x1e6>
    255c:	8a 31       	cpi	r24, 0x1A	; 26
    255e:	91 05       	cpc	r25, r1
    2560:	44 f4       	brge	.+16     	; 0x2572 <AICI_InterpretPacket+0x64>
    2562:	87 31       	cpi	r24, 0x17	; 23
    2564:	91 05       	cpc	r25, r1
    2566:	09 f4       	brne	.+2      	; 0x256a <AICI_InterpretPacket+0x5c>
    2568:	c5 c0       	rjmp	.+394    	; 0x26f4 <AICI_InterpretPacket+0x1e6>
    256a:	48 97       	sbiw	r24, 0x18	; 24
    256c:	09 f4       	brne	.+2      	; 0x2570 <AICI_InterpretPacket+0x62>
    256e:	a5 c0       	rjmp	.+330    	; 0x26ba <AICI_InterpretPacket+0x1ac>
    2570:	2b c1       	rjmp	.+598    	; 0x27c8 <AICI_InterpretPacket+0x2ba>
    2572:	8d 31       	cpi	r24, 0x1D	; 29
    2574:	91 05       	cpc	r25, r1
    2576:	0c f4       	brge	.+2      	; 0x257a <AICI_InterpretPacket+0x6c>
    2578:	a0 c0       	rjmp	.+320    	; 0x26ba <AICI_InterpretPacket+0x1ac>
    257a:	4d 97       	sbiw	r24, 0x1d	; 29
    257c:	09 f4       	brne	.+2      	; 0x2580 <AICI_InterpretPacket+0x72>
    257e:	61 c0       	rjmp	.+194    	; 0x2642 <AICI_InterpretPacket+0x134>
    2580:	23 c1       	rjmp	.+582    	; 0x27c8 <AICI_InterpretPacket+0x2ba>
	{
		case AICB_CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	90 93 52 01 	sts	0x0152, r25
    258a:	80 93 51 01 	sts	0x0151, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    258e:	a1 e0       	ldi	r26, 0x01	; 1
    2590:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2592:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
    2596:	80 2d       	mov	r24, r0
    2598:	0e 94 98 09 	call	0x1330 <USI_SPIInitMaster>
			
			USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));

			MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);  // Pull the slave AVR's RESET line to active
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	0e 94 24 03 	call	0x648 <MAIN_ResetCSLine>
			MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE); // Orange = Busy
    25a2:	81 b3       	in	r24, 0x11	; 17
    25a4:	80 63       	ori	r24, 0x30	; 48
    25a6:	81 bb       	out	0x11, r24	; 17
			ISPCC_EnterChipProgrammingMode();       // Run the Enter Programming Mode routine
    25a8:	0e 94 f7 10 	call	0x21ee <ISPCC_EnterChipProgrammingMode>

			if (InProgrammingMode)
    25ac:	80 91 50 01 	lds	r24, 0x0150
    25b0:	88 23       	and	r24, r24
    25b2:	19 f0       	breq	.+6      	; 0x25ba <AICI_InterpretPacket+0xac>
			   LCD_puts_f(AVRISPModeMessage);
    25b4:	8b e0       	ldi	r24, 0x0B	; 11
    25b6:	94 e0       	ldi	r25, 0x04	; 4
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <AICI_InterpretPacket+0xb0>
			else
			   LCD_puts_f(SyncErrorMessage);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	94 e0       	ldi	r25, 0x04	; 4
    25be:	0e 94 64 08 	call	0x10c8 <LCD_puts_f>
			
			break;
    25c2:	0b c1       	rjmp	.+534    	; 0x27da <AICI_InterpretPacket+0x2cc>
		case AICB_CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;
    25c4:	82 e0       	ldi	r24, 0x02	; 2
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	90 93 52 01 	sts	0x0152, r25
    25cc:	80 93 51 01 	sts	0x0151, r24

			MAIN_Delay1MS(PacketBytes[1]);           // Wait for the "PreDelay" amount specified in the packet
    25d0:	80 91 56 01 	lds	r24, 0x0156
    25d4:	0e 94 12 03 	call	0x624 <MAIN_Delay1MS>
			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Non programming mode = green status led
    25d8:	81 b3       	in	r24, 0x11	; 17
    25da:	8f 7c       	andi	r24, 0xCF	; 207
    25dc:	80 61       	ori	r24, 0x10	; 16
    25de:	81 bb       	out	0x11, r24	; 17
			InProgrammingMode = FALSE;
    25e0:	10 92 50 01 	sts	0x0150, r1
			MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	0e 94 24 03 	call	0x648 <MAIN_ResetCSLine>
			MAIN_Delay1MS(PacketBytes[2]);           // Wait for the "PostDelay" amount specified in the packet
    25ea:	80 91 57 01 	lds	r24, 0x0157
    25ee:	0e 94 12 03 	call	0x624 <MAIN_Delay1MS>
			
			USI_SPIOff();
    25f2:	0e 94 a8 09 	call	0x1350 <USI_SPIOff>
    25f6:	e5 c0       	rjmp	.+458    	; 0x27c2 <AICI_InterpretPacket+0x2b4>

			PacketBytes[1] = AICB_STATUS_CMD_OK;     // Return OK

			break;
		case AICB_CMD_CHIP_ERASE_ISP:
			MessageSize = 2;
    25f8:	82 e0       	ldi	r24, 0x02	; 2
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	90 93 52 01 	sts	0x0152, r25
    2600:	80 93 51 01 	sts	0x0151, r24
			
			for (uint8_t PacketB = 3; PacketB <= 6; PacketB++) // Send the erase commands to the slave AVR
    2604:	c3 e0       	ldi	r28, 0x03	; 3
    2606:	08 e5       	ldi	r16, 0x58	; 88
    2608:	11 e0       	ldi	r17, 0x01	; 1
				USI_SPITransmit(PacketBytes[PacketB]);
    260a:	f8 01       	movw	r30, r16
    260c:	81 91       	ld	r24, Z+
    260e:	8f 01       	movw	r16, r30
    2610:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    2614:	c1 50       	subi	r28, 0x01	; 1
    2616:	c7 ff       	sbrs	r28, 7
    2618:	f8 cf       	rjmp	.-16     	; 0x260a <AICI_InterpretPacket+0xfc>

			if (PacketBytes[2])                       // Poll mode, value of 1 indicates a busy flag wait
    261a:	80 91 57 01 	lds	r24, 0x0157
    261e:	88 23       	and	r24, r24
    2620:	59 f0       	breq	.+22     	; 0x2638 <AICI_InterpretPacket+0x12a>
			{
				do
					USI_SPITransmitWord(0xF000);
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	90 ef       	ldi	r25, 0xF0	; 240
    2626:	0e 94 c5 09 	call	0x138a <USI_SPITransmitWord>
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	0e 94 c5 09 	call	0x138a <USI_SPITransmitWord>
    2632:	80 fd       	sbrc	r24, 0
    2634:	f6 cf       	rjmp	.-20     	; 0x2622 <AICI_InterpretPacket+0x114>
    2636:	c5 c0       	rjmp	.+394    	; 0x27c2 <AICI_InterpretPacket+0x2b4>
				while (USI_SPITransmitWord(0x0000) & 0x01);
			}
			else                                      // Poll mode flag of 0 indicates a predefined delay
			{
				MAIN_Delay1MS(PacketBytes[1]);         // Wait the specified interval to ensure erase complete
    2638:	80 91 56 01 	lds	r24, 0x0156
    263c:	0e 94 12 03 	call	0x624 <MAIN_Delay1MS>
    2640:	c0 c0       	rjmp	.+384    	; 0x27c2 <AICI_InterpretPacket+0x2b4>
			}
			
			PacketBytes[1] = AICB_STATUS_CMD_OK;       // Always return OK
			
			break;
		case AICB_CMD_SPI_MULTI:
				MessageSize = (3 + PacketBytes[2]);    // Number of recieved bytes, plus two OKs and the command byte
    2642:	e0 90 57 01 	lds	r14, 0x0157
    2646:	8e 2d       	mov	r24, r14
    2648:	99 27       	eor	r25, r25
    264a:	03 96       	adiw	r24, 0x03	; 3
    264c:	90 93 52 01 	sts	0x0152, r25
    2650:	80 93 51 01 	sts	0x0151, r24
		
				uint8_t TxBytes      = PacketBytes[1]; // \. The packet data is overwritten during the transfer. Because
    2654:	00 91 56 01 	lds	r16, 0x0156
				uint8_t RxStartByte  = PacketBytes[2]; // |  of this each data byte must be stored into temp variables
				uint8_t RxBytes      = PacketBytes[3]; // /  so that their contents are not lost.
    2658:	f0 90 58 01 	lds	r15, 0x0158
				uint8_t RxByteNum    = 1;
    265c:	c1 e0       	ldi	r28, 0x01	; 1
				uint8_t TxByteNum    = 1;
				uint8_t RecievedByte = 0;

				while (TxByteNum++ < TxBytes)          // Still bytes to transfer
				{
					RecievedByte = USI_SPITransmit(PacketBytes[3 + TxByteNum]); // Transmit the byte, store the answer

					if ((TxByteNum >= RxStartByte) && (RxByteNum < RxBytes))
					   PacketBytes[2 + RxByteNum++] = RecievedByte;
    265e:	12 e0       	ldi	r17, 0x02	; 2
    2660:	c0 17       	cp	r28, r16
    2662:	a8 f4       	brcc	.+42     	; 0x268e <AICI_InterpretPacket+0x180>
    2664:	e1 2f       	mov	r30, r17
    2666:	ff 27       	eor	r31, r31
    2668:	eb 5a       	subi	r30, 0xAB	; 171
    266a:	fe 4f       	sbci	r31, 0xFE	; 254
    266c:	83 81       	ldd	r24, Z+3	; 0x03
    266e:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    2672:	1e 15       	cp	r17, r14
    2674:	40 f0       	brcs	.+16     	; 0x2686 <AICI_InterpretPacket+0x178>
    2676:	cf 15       	cp	r28, r15
    2678:	30 f4       	brcc	.+12     	; 0x2686 <AICI_InterpretPacket+0x178>
    267a:	ec 2f       	mov	r30, r28
    267c:	ff 27       	eor	r31, r31
    267e:	eb 5a       	subi	r30, 0xAB	; 171
    2680:	fe 4f       	sbci	r31, 0xFE	; 254
    2682:	82 83       	std	Z+2, r24	; 0x02
    2684:	cf 5f       	subi	r28, 0xFF	; 255
    2686:	81 2f       	mov	r24, r17
    2688:	1f 5f       	subi	r17, 0xFF	; 255
    268a:	80 17       	cp	r24, r16
    268c:	58 f3       	brcs	.-42     	; 0x2664 <AICI_InterpretPacket+0x156>
				}

				while (RxByteNum++ < RxBytes)                         // Still more bytes to recieve
				   PacketBytes[2 + RxByteNum] = USI_SPITransmit(0x00); // its answer to be recorded (or more bytes than sent need responses), send dummy bytes to fetch the response(s)
    268e:	8c 2f       	mov	r24, r28
    2690:	cf 5f       	subi	r28, 0xFF	; 255
    2692:	8f 15       	cp	r24, r15
    2694:	50 f4       	brcc	.+20     	; 0x26aa <AICI_InterpretPacket+0x19c>
    2696:	0c 2f       	mov	r16, r28
    2698:	11 27       	eor	r17, r17
    269a:	0b 5a       	subi	r16, 0xAB	; 171
    269c:	1e 4f       	sbci	r17, 0xFE	; 254
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    26a4:	f8 01       	movw	r30, r16
    26a6:	82 83       	std	Z+2, r24	; 0x02
    26a8:	f2 cf       	rjmp	.-28     	; 0x268e <AICI_InterpretPacket+0x180>

				PacketBytes[1]             = AICB_STATUS_CMD_OK; // Data should be encompassed
    26aa:	10 92 56 01 	sts	0x0156, r1
				PacketBytes[3 + RxByteNum] = AICB_STATUS_CMD_OK; //  by STATS_CMD_OKs
    26ae:	ec 2f       	mov	r30, r28
    26b0:	ff 27       	eor	r31, r31
    26b2:	eb 5a       	subi	r30, 0xAB	; 171
    26b4:	fe 4f       	sbci	r31, 0xFE	; 254
    26b6:	13 82       	std	Z+3, r1	; 0x03

				break;
    26b8:	90 c0       	rjmp	.+288    	; 0x27da <AICI_InterpretPacket+0x2cc>
		case AICB_CMD_READ_SIGNATURE_ISP:
		case AICB_CMD_READ_FUSE_ISP:
		case AICB_CMD_READ_LOCK_ISP:
		case AICB_CMD_READ_OSCCAL_ISP:
			MessageSize = 4;
    26ba:	84 e0       	ldi	r24, 0x04	; 4
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	90 93 52 01 	sts	0x0152, r25
    26c2:	80 93 51 01 	sts	0x0151, r24
	
			for (uint8_t ByteNum = 1; ByteNum <= 4; ByteNum++)
    26c6:	c1 e0       	ldi	r28, 0x01	; 1
    26c8:	07 e5       	ldi	r16, 0x57	; 87
    26ca:	11 e0       	ldi	r17, 0x01	; 1
			{
				uint8_t Response = USI_SPITransmit(PacketBytes[1 + ByteNum]); // Transmit the four signature request bytes
    26cc:	f8 01       	movw	r30, r16
    26ce:	81 91       	ld	r24, Z+
    26d0:	8f 01       	movw	r16, r30
    26d2:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    26d6:	98 2f       	mov	r25, r24

				if (ByteNum == PacketBytes[1])         // If the current byte is the requested signature byte, save the reponse in the packet
    26d8:	80 91 56 01 	lds	r24, 0x0156
    26dc:	c8 17       	cp	r28, r24
    26de:	11 f4       	brne	.+4      	; 0x26e4 <AICI_InterpretPacket+0x1d6>
					PacketBytes[2] = Response;
    26e0:	90 93 57 01 	sts	0x0157, r25
    26e4:	cf 5f       	subi	r28, 0xFF	; 255
    26e6:	c5 30       	cpi	r28, 0x05	; 5
    26e8:	88 f3       	brcs	.-30     	; 0x26cc <AICI_InterpretPacket+0x1be>
			}

			PacketBytes[1] = AICB_STATUS_CMD_OK;       // Data byte is encased in CMD_OKs
    26ea:	10 92 56 01 	sts	0x0156, r1
			PacketBytes[3] = AICB_STATUS_CMD_OK;       // Data byte is encased in CMD_OKs
    26ee:	10 92 58 01 	sts	0x0158, r1

			break;
    26f2:	73 c0       	rjmp	.+230    	; 0x27da <AICI_InterpretPacket+0x2cc>
		case AICB_CMD_PROGRAM_FUSE_ISP:
		case AICB_CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;
    26f4:	83 e0       	ldi	r24, 0x03	; 3
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	90 93 52 01 	sts	0x0152, r25
    26fc:	80 93 51 01 	sts	0x0151, r24
    2700:	06 e5       	ldi	r16, 0x56	; 86
    2702:	11 e0       	ldi	r17, 0x01	; 1
    2704:	c3 e0       	ldi	r28, 0x03	; 3
			
			for (uint8_t PacketB = 1; PacketB <= 4; PacketB++) // Send the lock-byte values to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    2706:	f8 01       	movw	r30, r16
    2708:	81 91       	ld	r24, Z+
    270a:	8f 01       	movw	r16, r30
    270c:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    2710:	c1 50       	subi	r28, 0x01	; 1
    2712:	c7 ff       	sbrs	r28, 7
    2714:	f8 cf       	rjmp	.-16     	; 0x2706 <AICI_InterpretPacket+0x1f8>

			PacketBytes[1] = AICB_STATUS_CMD_OK;       // Two CMD_OKs are always returned
    2716:	10 92 56 01 	sts	0x0156, r1
			PacketBytes[2] = AICB_STATUS_CMD_OK;       // Two CMD_OKs are always returned
    271a:	10 92 57 01 	sts	0x0157, r1

			break;
    271e:	5d c0       	rjmp	.+186    	; 0x27da <AICI_InterpretPacket+0x2cc>
		case AICB_CMD_READ_FLASH_ISP:
		case AICB_CMD_READ_EEPROM_ISP:
			MessageSize = 0;                           // Here to prevent compiler from complaining if a var dec appears straight after a case

			uint8_t  ReadCommand = PacketBytes[3];
    2720:	d0 90 58 01 	lds	r13, 0x0158
			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8) // Load in the number of bytes that is to
    2724:	80 91 56 01 	lds	r24, 0x0156
    2728:	99 27       	eor	r25, r25
    272a:	d8 2f       	mov	r29, r24
    272c:	cc 27       	eor	r28, r28
    272e:	80 91 57 01 	lds	r24, 0x0157
    2732:	99 27       	eor	r25, r25
    2734:	c8 2b       	or	r28, r24
    2736:	d9 2b       	or	r29, r25
			                     | PacketBytes[2];                 // be read into a temp variable (MSB first)

			MessageSize = BytesToRead + 3;
    2738:	23 96       	adiw	r28, 0x03	; 3
    273a:	d0 93 52 01 	sts	0x0152, r29
    273e:	c0 93 51 01 	sts	0x0151, r28
    2742:	23 97       	sbiw	r28, 0x03	; 3

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
    2744:	00 e0       	ldi	r16, 0x00	; 0
    2746:	10 e0       	ldi	r17, 0x00	; 0
    2748:	0c 17       	cp	r16, r28
    274a:	1d 07       	cpc	r17, r29
    274c:	60 f5       	brcc	.+88     	; 0x27a6 <AICI_InterpretPacket+0x298>
    274e:	87 e5       	ldi	r24, 0x57	; 87
    2750:	e8 2e       	mov	r14, r24
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	f8 2e       	mov	r15, r24
			{
				if (PacketBytes[0] == AICB_CMD_READ_FLASH_ISP)  // Flash read mode - word addresses so MSB/LSB masking nessesary
    2756:	80 91 55 01 	lds	r24, 0x0155
    275a:	84 31       	cpi	r24, 0x14	; 20
    275c:	31 f4       	brne	.+12     	; 0x276a <AICI_InterpretPacket+0x25c>
				{
					USI_SPITransmit(ReadCommand | ((ReadByte & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ));
    275e:	8d 2d       	mov	r24, r13
    2760:	99 27       	eor	r25, r25
    2762:	00 ff       	sbrs	r16, 0
    2764:	03 c0       	rjmp	.+6      	; 0x276c <AICI_InterpretPacket+0x25e>
    2766:	88 60       	ori	r24, 0x08	; 8
    2768:	01 c0       	rjmp	.+2      	; 0x276c <AICI_InterpretPacket+0x25e>
				}
				else                                       // EEPROM read mode, address is in bytes and so no masking nessesary
				{
					USI_SPITransmit(ReadCommand);
    276a:	8d 2d       	mov	r24, r13
    276c:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
				}
				
				USI_SPITransmitWord(CurrAddress);          // Transmit the current address to the slave AVR
    2770:	80 91 4c 01 	lds	r24, 0x014C
    2774:	90 91 4d 01 	lds	r25, 0x014D
    2778:	0e 94 c5 09 	call	0x138a <USI_SPITransmitWord>

				PacketBytes[2 + ReadByte] = USI_SPITransmit(0x00); // Read in the byte stored at the requested location
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    2782:	f7 01       	movw	r30, r14
    2784:	80 83       	st	Z, r24

				if ((ReadByte & 0x01) || (PacketBytes[0] == AICB_CMD_READ_EEPROM_ISP)) // Flash addresses are given in words; only increment on the odd byte if reading the flash.
    2786:	00 fd       	sbrc	r16, 0
    2788:	04 c0       	rjmp	.+8      	; 0x2792 <AICI_InterpretPacket+0x284>
    278a:	80 91 55 01 	lds	r24, 0x0155
    278e:	86 31       	cpi	r24, 0x16	; 22
    2790:	11 f4       	brne	.+4      	; 0x2796 <AICI_InterpretPacket+0x288>
				{
					V2P_IncrementCurrAddress();             // Increment the address counter
    2792:	0e 94 50 0f 	call	0x1ea0 <V2P_IncrementCurrAddress>
    2796:	0f 5f       	subi	r16, 0xFF	; 255
    2798:	1f 4f       	sbci	r17, 0xFF	; 255
    279a:	08 94       	sec
    279c:	e1 1c       	adc	r14, r1
    279e:	f1 1c       	adc	r15, r1
    27a0:	0c 17       	cp	r16, r28
    27a2:	1d 07       	cpc	r17, r29
    27a4:	c0 f2       	brcs	.-80     	; 0x2756 <AICI_InterpretPacket+0x248>
				}
				else
				{
					if ((CurrAddress & 0x00FF0000) & !(CurrAddress & 0x0000FFFF))
					{
						CurrAddress |= (1UL << 31);        // Set MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
						V2P_CheckForExtendedAddress();
					}
				}
			}
			
			PacketBytes[1]               = AICB_STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    27a6:	10 92 56 01 	sts	0x0156, r1
			PacketBytes[2 + BytesToRead] = AICB_STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    27aa:	cb 5a       	subi	r28, 0xAB	; 171
    27ac:	de 4f       	sbci	r29, 0xFE	; 254
    27ae:	1a 82       	std	Y+2, r1	; 0x02

			break;
    27b0:	14 c0       	rjmp	.+40     	; 0x27da <AICI_InterpretPacket+0x2cc>
		case AICB_CMD_PROGRAM_FLASH_ISP:
		case AICB_CMD_PROGRAM_EEPROM_ISP:
			ISPCC_ProgramChip();                          // Program the bytes into the chip
    27b2:	0e 94 9f 11 	call	0x233e <ISPCC_ProgramChip>
			
			MessageSize = 2;
    27b6:	82 e0       	ldi	r24, 0x02	; 2
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	90 93 52 01 	sts	0x0152, r25
    27be:	80 93 51 01 	sts	0x0151, r24

			PacketBytes[1] = AICB_STATUS_CMD_OK;
    27c2:	10 92 56 01 	sts	0x0156, r1
			
			break;
    27c6:	09 c0       	rjmp	.+18     	; 0x27da <AICI_InterpretPacket+0x2cc>
		default:                                        // Unknown command, return error
			MessageSize = 1;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	90 93 52 01 	sts	0x0152, r25
    27d0:	80 93 51 01 	sts	0x0151, r24
			
			PacketBytes[1] = AICB_STATUS_CMD_UNKNOWN;
    27d4:	89 ec       	ldi	r24, 0xC9	; 201
    27d6:	80 93 56 01 	sts	0x0156, r24
	}

	V2P_SendPacket();                                   // Send the response packet
    27da:	0e 94 6f 0e 	call	0x1cde <V2P_SendPacket>
    27de:	df 91       	pop	r29
    27e0:	cf 91       	pop	r28
    27e2:	1f 91       	pop	r17
    27e4:	0f 91       	pop	r16
    27e6:	ff 90       	pop	r15
    27e8:	ef 90       	pop	r14
    27ea:	df 90       	pop	r13
    27ec:	08 95       	ret

000027ee <PM_GetStoredDataSize>:

// ======================================================================================

uint32_t PM_GetStoredDataSize(const uint8_t Type)
{
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	24 97       	sbiw	r28, 0x04	; 4
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
	/* This take a **LOT** of code and is accessed several times throughout
	   the program, so I've put it into a seperate function to save on flash. */

	uint32_t ProgDataSize = 0;
    2802:	19 82       	std	Y+1, r1	; 0x01
    2804:	1a 82       	std	Y+2, r1	; 0x02
    2806:	1b 82       	std	Y+3, r1	; 0x03
    2808:	1c 82       	std	Y+4, r1	; 0x04
void 
eeprom_read_block (void *pointer_ram,
                   const void *pointer_eeprom,
                   size_t n)
{
    280a:	fe 01       	movw	r30, r28
    280c:	31 96       	adiw	r30, 0x01	; 1
    280e:	81 30       	cpi	r24, 0x01	; 1
    2810:	19 f4       	brne	.+6      	; 0x2818 <PM_GetStoredDataSize+0x2a>
    2812:	ab e1       	ldi	r26, 0x1B	; 27
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	02 c0       	rjmp	.+4      	; 0x281c <PM_GetStoredDataSize+0x2e>
    2818:	af e1       	ldi	r26, 0x1F	; 31
    281a:	b0 e0       	ldi	r27, 0x00	; 0
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
             XCALL " __eeprom_read_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "st z+,__tmp_reg__" CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                  XCALL " __eeprom_read_block_" _REG_LOCATION_SUFFIX 
                : "+x" (pointer_eeprom),
                  "=z" (pointer_ram)
                : "z"  (pointer_ram)
                : "memory");
            }
          else
            {
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 
    281c:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    281e:	18 2e       	mov	r1, r24
    2820:	0e 94 73 1a 	call	0x34e6 <__eeprom_read_block_1F2021>

	eeprom_read_block((void*)&ProgDataSize, (const void*)((Type == TYPE_FLASH)? &EEPROMVars.DataSize : &EEPROMVars.EEPROMSize), sizeof(uint32_t));

	if (ProgDataSize == 0xFFFFFFFF)                                      // Blank EEPROM, return a size  of 0 bytes
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	9a 81       	ldd	r25, Y+2	; 0x02
    2828:	ab 81       	ldd	r26, Y+3	; 0x03
    282a:	bc 81       	ldd	r27, Y+4	; 0x04
    282c:	8f 5f       	subi	r24, 0xFF	; 255
    282e:	9f 4f       	sbci	r25, 0xFF	; 255
    2830:	af 4f       	sbci	r26, 0xFF	; 255
    2832:	bf 4f       	sbci	r27, 0xFF	; 255
    2834:	21 f4       	brne	.+8      	; 0x283e <PM_GetStoredDataSize+0x50>
	  ProgDataSize = 0x00;
    2836:	19 82       	std	Y+1, r1	; 0x01
    2838:	1a 82       	std	Y+2, r1	; 0x02
    283a:	1b 82       	std	Y+3, r1	; 0x03
    283c:	1c 82       	std	Y+4, r1	; 0x04

	return ProgDataSize;
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	9a 81       	ldd	r25, Y+2	; 0x02
    2842:	ab 81       	ldd	r26, Y+3	; 0x03
    2844:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	24 96       	adiw	r28, 0x04	; 4
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	cd bf       	out	0x3d, r28	; 61
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	08 95       	ret

0000285c <PM_SetupDFAddressCounters>:

void PM_SetupDFAddressCounters(const uint8_t Type)
{
	uint32_t StartAddress;
	
	MemoryType  = Type;
    285c:	80 93 6b 02 	sts	0x026B, r24
	GPageLength = 0;
    2860:	10 92 69 02 	sts	0x0269, r1
    2864:	10 92 68 02 	sts	0x0268, r1
    2868:	20 91 4c 01 	lds	r18, 0x014C
    286c:	30 91 4d 01 	lds	r19, 0x014D
    2870:	40 91 4e 01 	lds	r20, 0x014E
    2874:	50 91 4f 01 	lds	r21, 0x014F

	if (Type == TYPE_FLASH)                                              // Type 1 = Flash
    2878:	81 30       	cpi	r24, 0x01	; 1
    287a:	39 f4       	brne	.+14     	; 0x288a <PM_SetupDFAddressCounters+0x2e>
	  StartAddress = (CurrAddress << 1);                               // Convert flash word address to byte address
    287c:	da 01       	movw	r26, r20
    287e:	c9 01       	movw	r24, r18
    2880:	88 0f       	add	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	aa 1f       	adc	r26, r26
    2886:	bb 1f       	adc	r27, r27
    2888:	06 c0       	rjmp	.+12     	; 0x2896 <PM_SetupDFAddressCounters+0x3a>
	else
	  StartAddress = CurrAddress + PM_EEPROM_OFFSET;                   // EEPROM uses byte addresses, and starts at the 257th kilobyte in Dataflash
    288a:	da 01       	movw	r26, r20
    288c:	c9 01       	movw	r24, r18
    288e:	80 50       	subi	r24, 0x00	; 0
    2890:	9c 4f       	sbci	r25, 0xFC	; 252
    2892:	ab 4f       	sbci	r26, 0xFB	; 251
    2894:	bf 4f       	sbci	r27, 0xFF	; 255
	
	CurrPageAddress = 0;
    2896:	10 92 44 01 	sts	0x0144, r1
    289a:	10 92 43 01 	sts	0x0143, r1

	while (StartAddress >= DF_INTERNALDF_BUFFBYTES)                      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DF_INTERNALDF_BUFFBYTES;                         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    289e:	88 30       	cpi	r24, 0x08	; 8
    28a0:	21 e0       	ldi	r18, 0x01	; 1
    28a2:	92 07       	cpc	r25, r18
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	a2 07       	cpc	r26, r18
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	b2 07       	cpc	r27, r18
    28ac:	a0 f0       	brcs	.+40     	; 0x28d6 <PM_SetupDFAddressCounters+0x7a>
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	88 50       	subi	r24, 0x08	; 8
    28b4:	91 40       	sbci	r25, 0x01	; 1
    28b6:	a0 40       	sbci	r26, 0x00	; 0
    28b8:	b0 40       	sbci	r27, 0x00	; 0
    28ba:	2f 5f       	subi	r18, 0xFF	; 255
    28bc:	3f 4f       	sbci	r19, 0xFF	; 255
    28be:	88 30       	cpi	r24, 0x08	; 8
    28c0:	41 e0       	ldi	r20, 0x01	; 1
    28c2:	94 07       	cpc	r25, r20
    28c4:	40 e0       	ldi	r20, 0x00	; 0
    28c6:	a4 07       	cpc	r26, r20
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	b4 07       	cpc	r27, r20
    28cc:	90 f7       	brcc	.-28     	; 0x28b2 <PM_SetupDFAddressCounters+0x56>
    28ce:	30 93 44 01 	sts	0x0144, r19
    28d2:	20 93 43 01 	sts	0x0143, r18
	}
	
	CurrBuffByte = (uint16_t)StartAddress;                               // The buffer byte is the remainder
    28d6:	90 93 42 01 	sts	0x0142, r25
    28da:	80 93 41 01 	sts	0x0141, r24
    28de:	08 95       	ret

000028e0 <PM_StoreProgramByte>:
}

void PM_StoreProgramByte(const uint8_t Data)
{
    28e0:	cf 93       	push	r28
    28e2:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DF_INTERNALDF_BUFFBYTES)
    28e4:	80 91 41 01 	lds	r24, 0x0141
    28e8:	90 91 42 01 	lds	r25, 0x0142
    28ec:	88 50       	subi	r24, 0x08	; 8
    28ee:	91 40       	sbci	r25, 0x01	; 1
    28f0:	a9 f4       	brne	.+42     	; 0x291c <PM_StoreProgramByte+0x3c>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    28f2:	80 91 43 01 	lds	r24, 0x0143
    28f6:	90 91 44 01 	lds	r25, 0x0144
    28fa:	9c 01       	movw	r18, r24
    28fc:	01 96       	adiw	r24, 0x01	; 1
    28fe:	90 93 44 01 	sts	0x0144, r25
    2902:	80 93 43 01 	sts	0x0143, r24
    2906:	c9 01       	movw	r24, r18
    2908:	0e 94 e4 0a 	call	0x15c8 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 5a 0a 	call	0x14b4 <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    2914:	10 92 42 01 	sts	0x0142, r1
    2918:	10 92 41 01 	sts	0x0141, r1
	}
	
	SPI_SPITransmit(Data);                                               // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    291c:	8c 2f       	mov	r24, r28
    291e:	0e 94 4d 09 	call	0x129a <SPI_SPITransmit>
	CurrBuffByte++;
    2922:	80 91 41 01 	lds	r24, 0x0141
    2926:	90 91 42 01 	lds	r25, 0x0142
    292a:	01 96       	adiw	r24, 0x01	; 1
    292c:	90 93 42 01 	sts	0x0142, r25
    2930:	80 93 41 01 	sts	0x0141, r24
	GPageLength++;
    2934:	80 91 68 02 	lds	r24, 0x0268
    2938:	90 91 69 02 	lds	r25, 0x0269
    293c:	01 96       	adiw	r24, 0x01	; 1
    293e:	90 93 69 02 	sts	0x0269, r25
    2942:	80 93 68 02 	sts	0x0268, r24
    2946:	cf 91       	pop	r28
    2948:	08 95       	ret

0000294a <PM_CheckEndOfFuseLockData>:
}

void PM_InterpretAVRISPPacket(void)
{
	uint8_t* EEPROMAddress;

	switch (PacketBytes[0])
	{
		case AICB_CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
						
			for (uint8_t PacketB = 0; PacketB <= 11; PacketB++)          // Save the enter programming mode command bytes
			  eeprom_write_byte(&EEPROMVars.EnterProgMode[PacketB], PacketBytes[PacketB]);
			
			InProgrammingMode = TRUE;                                    // Set the flag, prevent the user from exiting the V2P state machine			
			CurrentMode = PM_NO_SETUP;                                   // Clear the current mode variable

			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = AICB_STATUS_CMD_OK;

			break;			
		case AICB_CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;

			PM_CheckEndOfFuseLockData();                                 // Check for remaining bytes to be stored and general cleanup
			
			InProgrammingMode = FALSE;                                   // Clear the flag, allow the user to exit the V2P state machine

			DF_EnableDataflash(FALSE);

			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
			PacketBytes[1] = AICB_STATUS_CMD_OK;

			break;
		case AICB_CMD_READ_SIGNATURE_ISP:
			MessageSize = 4;

			PacketBytes[1] = AICB_STATUS_CMD_OK;                          // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x01;                                        // Signature bytes all return "01" in storage mode
			PacketBytes[3] = AICB_STATUS_CMD_OK;                          // Data byte is encased in CMD_OKs

			break;
		case AICB_CMD_CHIP_ERASE_ISP:
			MessageSize = 2;

			for (uint8_t PacketB = 1; PacketB <= 6; PacketB++)          // Save the erase chip command bytes to EEPROM
			  eeprom_write_byte(&EEPROMVars.EraseChip[PacketB], PacketBytes[PacketB]);

			for (uint8_t Byte = 0; Byte < 8; Byte++)                    // Clear the program and EEPROM size counters
			{
				eeprom_write_byte(&EEPROMVars.DataSize[Byte], 0x00);
				eeprom_write_byte(&EEPROMVars.EEPROMSize[Byte], 0x00);
			}
						
			eeprom_write_byte(&EEPROMVars.EraseCmdStored, TRUE);
			
			PacketBytes[1] = AICB_STATUS_CMD_OK;
			
			break;
		case AICB_CMD_READ_OSCCAL_ISP:
			MessageSize = 4;

			PacketBytes[1] = AICB_STATUS_CMD_OK;                        // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x00;                                      // Return 0x00 for the OSCCAL byte
			PacketBytes[3] = AICB_STATUS_CMD_OK;                        // Data byte is encased in CMD_OKs

			break;
		case AICB_CMD_READ_FUSE_ISP:
		case AICB_CMD_READ_LOCK_ISP:
			MessageSize = 4;
	
			if (CurrentMode != PM_LOCKFUSEBITS_READ)                    // First lock or fuse byte being read, set the EEPROM pointer
			{
				PM_CheckEndOfFuseLockData();                            // Check for remaining bytes to be stored and general cleanup
				
				CurrBuffByte = 0;
				CurrentMode  = PM_LOCKFUSEBITS_READ;
			}
			
			if (CurrBuffByte > eeprom_read_byte((PacketBytes[0] == AICB_CMD_READ_FUSE_ISP)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes))  // Trying to read more fuse/lock bytes than are stored in memory
			{
				PacketBytes[2] = 0xFF;                                 // Return 0xFF for the fuse/lock byte
			}
			else
			{
				PacketBytes[2] = eeprom_read_byte((uint8_t*)(((PacketBytes[0] == AICB_CMD_READ_FUSE_ISP)? &EEPROMVars.FuseBytes : &EEPROMVars.LockBytes) // Starting location
									                         + (CurrBuffByte << 2) + (PacketBytes[1] - 1)));                                             // The start position of the actual fuse/lock byte to read (4 bytes each));
			}

			PacketBytes[1] = AICB_STATUS_CMD_OK;                       // Data byte is encased in CMD_OKs
			PacketBytes[3] = AICB_STATUS_CMD_OK;                       // Data byte is encased in CMD_OKs

			CurrBuffByte++;

			break;
		case AICB_CMD_PROGRAM_FUSE_ISP:
		case AICB_CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;

			if (CurrentMode != PM_LOCKFUSEBITS_WRITE)                  // First lock or fuse byte being written, set the EEPROM pointer
			{
				CurrentMode   = PM_LOCKFUSEBITS_WRITE;
				CurrBuffByte  = 0;                                     // CurrBuffByte is used to store the total fuse/lock bytes written
			}

			if (PacketBytes[0] == AICB_CMD_PROGRAM_FUSE_ISP)
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.FuseBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_FUSE;
			}
			else
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.LockBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_LOCK;
			}				
			
			if (CurrBuffByte < PM_MAX_FUSELOCKBITS)
			{
				for (uint8_t FLByte = 1; FLByte <= 4; FLByte++)
				{
					eeprom_write_byte(EEPROMAddress, PacketBytes[FLByte]);
					EEPROMAddress++;
				}

				CurrBuffByte++;                                        // Increment the total fuse/lock bytes written counter
			}
			
			PacketBytes[1] = AICB_STATUS_CMD_OK;                       // Two CMD_OKs are always returned
			PacketBytes[2] = AICB_STATUS_CMD_OK;                       // Two CMD_OKs are always returned

			break;
		case AICB_CMD_PROGRAM_FLASH_ISP:
		case AICB_CMD_PROGRAM_EEPROM_ISP:
			MessageSize = 2;

			if (CurrentMode != PM_DATAFLASH_WRITE)                      // First programming packet
			{
				if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP)       // Flash programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram; // Set the eeprom address to the Program command bytes location
					PM_SetupDFAddressCounters(TYPE_FLASH);
				}
				else                                                   // EEPROM programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;  // Set the eeprom address to the EEPROM command bytes location
					PM_SetupDFAddressCounters(TYPE_EEPROM);
				}
				
				DF_BufferWriteEnable(CurrBuffByte);
				CurrentMode = PM_DATAFLASH_WRITE;
				
				for (uint8_t B = 1; B <= 9; B++)                       // Save the command bytes
				  eeprom_write_byte(EEPROMAddress, PacketBytes[B]);
			}

			uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
			                      | PacketBytes[2];

			for (uint16_t CurrByte = 0; CurrByte < BytesToWrite; CurrByte++)
				PM_StoreProgramByte(PacketBytes[10 + CurrByte]);

			if (!(GPageLength & PM_PAGELENGTH_FOUNDBIT) && (PacketBytes[3] & ISPCC_PROG_MODE_PAGEDONE) && GPageLength)
			{
				eeprom_write_word(((MemoryType == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength), GPageLength);
		
				GPageLength |= PM_PAGELENGTH_FOUNDBIT;                 // Bit 15 is used to indicate if the length has been found
			}

			PacketBytes[1] = AICB_STATUS_CMD_OK;
		
			break;
		case AICB_CMD_READ_FLASH_ISP:
		case AICB_CMD_READ_EEPROM_ISP:	
			if (CurrentMode != PM_DATAFLASH_READ)
			{
				PM_CheckEndOfFuseLockData();                           // Check for remaining bytes to be stored and general cleanup
				
				PM_SetupDFAddressCounters((PacketBytes[0] == AICB_CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);
				DF_ContinuousReadEnable(CurrPageAddress, CurrBuffByte);
				
				CurrentMode = PM_DATAFLASH_READ;
				CurrAddress = 0;
			}

			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8)    // \. Load in the number of bytes that is to
			                     | PacketBytes[2];                    // /  be read into a temp variable (MSB first)
						
			uint16_t BytesInMem  = PM_GetStoredDataSize((PacketBytes[0] == AICB_CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
			   PacketBytes[2 + ReadByte] = ((CurrAddress < BytesInMem)? SPI_SPITransmit(0x00) : 0xFF); // Read in the next dataflash byte if present
			   V2P_IncrementCurrAddress();
			}
			
			MessageSize = BytesToRead + 3;

			PacketBytes[1]               = AICB_STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
			PacketBytes[2 + BytesToRead] = AICB_STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
		
			break;
		default:
			MessageSize = 1;
			
			PacketBytes[1] = AICB_STATUS_CMD_UNKNOWN;
	}

	V2P_SendPacket();                                   // Send the response packet
}

void PM_CheckEndOfFuseLockData(void)
{
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	24 97       	sbiw	r28, 0x04	; 4
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
	if (CurrentMode == PM_DATAFLASH_WRITE)
    295e:	80 91 6a 02 	lds	r24, 0x026A
    2962:	81 30       	cpi	r24, 0x01	; 1
    2964:	09 f0       	breq	.+2      	; 0x2968 <PM_CheckEndOfFuseLockData+0x1e>
    2966:	3f c0       	rjmp	.+126    	; 0x29e6 <PM_CheckEndOfFuseLockData+0x9c>
	{
		if (CurrBuffByte)                               // Data in the dataflash buffer, pending to be written
    2968:	80 91 41 01 	lds	r24, 0x0141
    296c:	90 91 42 01 	lds	r25, 0x0142
    2970:	89 2b       	or	r24, r25
    2972:	31 f0       	breq	.+12     	; 0x2980 <PM_CheckEndOfFuseLockData+0x36>
		  DF_CopyBufferToFlashPage(CurrPageAddress);    // Save the remaining buffer bytes
    2974:	80 91 43 01 	lds	r24, 0x0143
    2978:	90 91 44 01 	lds	r25, 0x0144
    297c:	0e 94 e4 0a 	call	0x15c8 <DF_CopyBufferToFlashPage>

		uint32_t DataSize = ((CurrPageAddress * DF_INTERNALDF_BUFFBYTES) + CurrBuffByte);
    2980:	20 91 43 01 	lds	r18, 0x0143
    2984:	30 91 44 01 	lds	r19, 0x0144
    2988:	88 e0       	ldi	r24, 0x08	; 8
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	28 9f       	mul	r18, r24
    298e:	a0 01       	movw	r20, r0
    2990:	29 9f       	mul	r18, r25
    2992:	50 0d       	add	r21, r0
    2994:	38 9f       	mul	r19, r24
    2996:	50 0d       	add	r21, r0
    2998:	11 24       	eor	r1, r1
    299a:	ca 01       	movw	r24, r20
    299c:	20 91 41 01 	lds	r18, 0x0141
    29a0:	30 91 42 01 	lds	r19, 0x0142
    29a4:	82 0f       	add	r24, r18
    29a6:	93 1f       	adc	r25, r19
    29a8:	9c 01       	movw	r18, r24
    29aa:	44 27       	eor	r20, r20
    29ac:	55 27       	eor	r21, r21
    29ae:	29 83       	std	Y+1, r18	; 0x01
    29b0:	3a 83       	std	Y+2, r19	; 0x02
    29b2:	4b 83       	std	Y+3, r20	; 0x03
    29b4:	5c 83       	std	Y+4, r21	; 0x04

		if (MemoryType == TYPE_FLASH)
    29b6:	80 91 6b 02 	lds	r24, 0x026B
    29ba:	fe 01       	movw	r30, r28
    29bc:	31 96       	adiw	r30, 0x01	; 1
    29be:	81 30       	cpi	r24, 0x01	; 1
    29c0:	19 f4       	brne	.+6      	; 0x29c8 <PM_CheckEndOfFuseLockData+0x7e>
void 
eeprom_write_block (const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t n)
{
    29c2:	ab e1       	ldi	r26, 0x1B	; 27
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	0a c0       	rjmp	.+20     	; 0x29dc <PM_CheckEndOfFuseLockData+0x92>
		{
			eeprom_write_block((const void*)&DataSize, (void*)&EEPROMVars.DataSize, sizeof(uint32_t));
		}
		else
		{
			DataSize -= PM_EEPROM_OFFSET;                // Remove DataFlash EEPROM start offset
    29c8:	20 50       	subi	r18, 0x00	; 0
    29ca:	34 40       	sbci	r19, 0x04	; 4
    29cc:	44 40       	sbci	r20, 0x04	; 4
    29ce:	50 40       	sbci	r21, 0x00	; 0
    29d0:	29 83       	std	Y+1, r18	; 0x01
    29d2:	3a 83       	std	Y+2, r19	; 0x02
    29d4:	4b 83       	std	Y+3, r20	; 0x03
    29d6:	5c 83       	std	Y+4, r21	; 0x04
void 
eeprom_write_block (const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t n)
{
    29d8:	af e1       	ldi	r26, 0x1F	; 31
    29da:	b0 e0       	ldi	r27, 0x00	; 0
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
            "ld __tmp_reg__,z+" CR_TAB
             XCALL " __eeprom_write_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      /* Do nothing for compile time constant transfer size n == 0.  */
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                 XCALL " __eeprom_write_block_" _REG_LOCATION_SUFFIX
               : "+x" (pointer_eeprom),
                 "=z" (pointer_ram)
               : "z"  (pointer_ram)
               : "memory" );
            }
          else
            {
              uint8_t len;
              len = (uint8_t) n;
    29dc:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    29de:	18 2e       	mov	r1, r24
    29e0:	0e 94 8e 1a 	call	0x351c <__eeprom_write_block_1F2021>
    29e4:	10 c0       	rjmp	.+32     	; 0x2a06 <PM_CheckEndOfFuseLockData+0xbc>
			eeprom_write_block((const void*)&DataSize, (void*)&EEPROMVars.EEPROMSize, sizeof(uint32_t));
		}
	}
	else if (CurrentMode == PM_LOCKFUSEBITS_WRITE)
    29e6:	83 30       	cpi	r24, 0x03	; 3
    29e8:	71 f4       	brne	.+28     	; 0x2a06 <PM_CheckEndOfFuseLockData+0xbc>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    29ea:	80 91 6b 02 	lds	r24, 0x026B
    29ee:	82 30       	cpi	r24, 0x02	; 2
    29f0:	19 f4       	brne	.+6      	; 0x29f8 <PM_CheckEndOfFuseLockData+0xae>
    29f2:	af e2       	ldi	r26, 0x2F	; 47
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	02 c0       	rjmp	.+4      	; 0x29fc <PM_CheckEndOfFuseLockData+0xb2>
    29f8:	a0 e3       	ldi	r26, 0x30	; 48
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	80 91 41 01 	lds	r24, 0x0141
  asm volatile (
    2a00:	08 2e       	mov	r0, r24
    2a02:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
    2a06:	24 96       	adiw	r28, 0x04	; 4
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	de bf       	out	0x3e, r29	; 62
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	08 95       	ret

00002a18 <PM_InterpretAVRISPPacket>:
    2a18:	cf 92       	push	r12
    2a1a:	df 92       	push	r13
    2a1c:	ef 92       	push	r14
    2a1e:	ff 92       	push	r15
    2a20:	0f 93       	push	r16
    2a22:	1f 93       	push	r17
    2a24:	cf 93       	push	r28
    2a26:	df 93       	push	r29
    2a28:	40 91 55 01 	lds	r20, 0x0155
    2a2c:	84 2f       	mov	r24, r20
    2a2e:	99 27       	eor	r25, r25
    2a30:	86 31       	cpi	r24, 0x16	; 22
    2a32:	91 05       	cpc	r25, r1
    2a34:	09 f4       	brne	.+2      	; 0x2a38 <PM_InterpretAVRISPPacket+0x20>
    2a36:	bc c1       	rjmp	.+888    	; 0x2db0 <PM_InterpretAVRISPPacket+0x398>
    2a38:	87 31       	cpi	r24, 0x17	; 23
    2a3a:	91 05       	cpc	r25, r1
    2a3c:	94 f4       	brge	.+36     	; 0x2a62 <PM_InterpretAVRISPPacket+0x4a>
    2a3e:	82 31       	cpi	r24, 0x12	; 18
    2a40:	91 05       	cpc	r25, r1
    2a42:	09 f4       	brne	.+2      	; 0x2a46 <PM_InterpretAVRISPPacket+0x2e>
    2a44:	66 c0       	rjmp	.+204    	; 0x2b12 <PM_InterpretAVRISPPacket+0xfa>
    2a46:	83 31       	cpi	r24, 0x13	; 19
    2a48:	91 05       	cpc	r25, r1
    2a4a:	3c f4       	brge	.+14     	; 0x2a5a <PM_InterpretAVRISPPacket+0x42>
    2a4c:	80 31       	cpi	r24, 0x10	; 16
    2a4e:	91 05       	cpc	r25, r1
    2a50:	11 f1       	breq	.+68     	; 0x2a96 <PM_InterpretAVRISPPacket+0x7e>
    2a52:	41 97       	sbiw	r24, 0x11	; 17
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <PM_InterpretAVRISPPacket+0x40>
    2a56:	3f c0       	rjmp	.+126    	; 0x2ad6 <PM_InterpretAVRISPPacket+0xbe>
    2a58:	19 c2       	rjmp	.+1074   	; 0x2e8c <PM_InterpretAVRISPPacket+0x474>
    2a5a:	44 97       	sbiw	r24, 0x14	; 20
    2a5c:	09 f4       	brne	.+2      	; 0x2a60 <PM_InterpretAVRISPPacket+0x48>
    2a5e:	a8 c1       	rjmp	.+848    	; 0x2db0 <PM_InterpretAVRISPPacket+0x398>
    2a60:	3c c1       	rjmp	.+632    	; 0x2cda <PM_InterpretAVRISPPacket+0x2c2>
    2a62:	89 31       	cpi	r24, 0x19	; 25
    2a64:	91 05       	cpc	r25, r1
    2a66:	09 f4       	brne	.+2      	; 0x2a6a <PM_InterpretAVRISPPacket+0x52>
    2a68:	e6 c0       	rjmp	.+460    	; 0x2c36 <PM_InterpretAVRISPPacket+0x21e>
    2a6a:	8a 31       	cpi	r24, 0x1A	; 26
    2a6c:	91 05       	cpc	r25, r1
    2a6e:	44 f4       	brge	.+16     	; 0x2a80 <PM_InterpretAVRISPPacket+0x68>
    2a70:	87 31       	cpi	r24, 0x17	; 23
    2a72:	91 05       	cpc	r25, r1
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <PM_InterpretAVRISPPacket+0x60>
    2a76:	df c0       	rjmp	.+446    	; 0x2c36 <PM_InterpretAVRISPPacket+0x21e>
    2a78:	48 97       	sbiw	r24, 0x18	; 24
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <PM_InterpretAVRISPPacket+0x66>
    2a7c:	89 c0       	rjmp	.+274    	; 0x2b90 <PM_InterpretAVRISPPacket+0x178>
    2a7e:	06 c2       	rjmp	.+1036   	; 0x2e8c <PM_InterpretAVRISPPacket+0x474>
    2a80:	8b 31       	cpi	r24, 0x1B	; 27
    2a82:	91 05       	cpc	r25, r1
    2a84:	d1 f1       	breq	.+116    	; 0x2afa <PM_InterpretAVRISPPacket+0xe2>
    2a86:	8b 31       	cpi	r24, 0x1B	; 27
    2a88:	91 05       	cpc	r25, r1
    2a8a:	0c f4       	brge	.+2      	; 0x2a8e <PM_InterpretAVRISPPacket+0x76>
    2a8c:	81 c0       	rjmp	.+258    	; 0x2b90 <PM_InterpretAVRISPPacket+0x178>
    2a8e:	4c 97       	sbiw	r24, 0x1c	; 28
    2a90:	09 f4       	brne	.+2      	; 0x2a94 <PM_InterpretAVRISPPacket+0x7c>
    2a92:	71 c0       	rjmp	.+226    	; 0x2b76 <PM_InterpretAVRISPPacket+0x15e>
    2a94:	fb c1       	rjmp	.+1014   	; 0x2e8c <PM_InterpretAVRISPPacket+0x474>
    2a96:	82 e0       	ldi	r24, 0x02	; 2
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	90 93 52 01 	sts	0x0152, r25
    2a9e:	80 93 51 01 	sts	0x0151, r24
    2aa2:	e5 e5       	ldi	r30, 0x55	; 85
    2aa4:	f1 e0       	ldi	r31, 0x01	; 1
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	9b e0       	ldi	r25, 0x0B	; 11
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2aac:	d9 01       	movw	r26, r18
    2aae:	ad 5d       	subi	r26, 0xDD	; 221
    2ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab2:	81 91       	ld	r24, Z+
  asm volatile (
    2ab4:	08 2e       	mov	r0, r24
    2ab6:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
    2aba:	91 50       	subi	r25, 0x01	; 1
    2abc:	2f 5f       	subi	r18, 0xFF	; 255
    2abe:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac0:	97 ff       	sbrs	r25, 7
    2ac2:	f4 cf       	rjmp	.-24     	; 0x2aac <PM_InterpretAVRISPPacket+0x94>
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	80 93 50 01 	sts	0x0150, r24
    2aca:	10 92 6a 02 	sts	0x026A, r1
    2ace:	81 b3       	in	r24, 0x11	; 17
    2ad0:	8f 7c       	andi	r24, 0xCF	; 207
    2ad2:	80 62       	ori	r24, 0x20	; 32
    2ad4:	10 c0       	rjmp	.+32     	; 0x2af6 <PM_InterpretAVRISPPacket+0xde>
    2ad6:	82 e0       	ldi	r24, 0x02	; 2
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	90 93 52 01 	sts	0x0152, r25
    2ade:	80 93 51 01 	sts	0x0151, r24
    2ae2:	0e 94 a5 14 	call	0x294a <PM_CheckEndOfFuseLockData>
    2ae6:	10 92 50 01 	sts	0x0150, r1
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    2af0:	81 b3       	in	r24, 0x11	; 17
    2af2:	8f 7c       	andi	r24, 0xCF	; 207
    2af4:	80 61       	ori	r24, 0x10	; 16
    2af6:	81 bb       	out	0x11, r24	; 17
    2af8:	58 c1       	rjmp	.+688    	; 0x2daa <PM_InterpretAVRISPPacket+0x392>
    2afa:	84 e0       	ldi	r24, 0x04	; 4
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	90 93 52 01 	sts	0x0152, r25
    2b02:	80 93 51 01 	sts	0x0151, r24
    2b06:	10 92 56 01 	sts	0x0156, r1
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	80 93 57 01 	sts	0x0157, r24
    2b10:	3c c0       	rjmp	.+120    	; 0x2b8a <PM_InterpretAVRISPPacket+0x172>
    2b12:	82 e0       	ldi	r24, 0x02	; 2
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	90 93 52 01 	sts	0x0152, r25
    2b1a:	80 93 51 01 	sts	0x0151, r24
    2b1e:	e6 e5       	ldi	r30, 0x56	; 86
    2b20:	f1 e0       	ldi	r31, 0x01	; 1
    2b22:	21 e0       	ldi	r18, 0x01	; 1
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	95 e0       	ldi	r25, 0x05	; 5
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b28:	d9 01       	movw	r26, r18
    2b2a:	ab 5e       	subi	r26, 0xEB	; 235
    2b2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2e:	81 91       	ld	r24, Z+
  asm volatile (
    2b30:	08 2e       	mov	r0, r24
    2b32:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
    2b36:	91 50       	subi	r25, 0x01	; 1
    2b38:	2f 5f       	subi	r18, 0xFF	; 255
    2b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3c:	97 ff       	sbrs	r25, 7
    2b3e:	f4 cf       	rjmp	.-24     	; 0x2b28 <PM_InterpretAVRISPPacket+0x110>
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	37 e0       	ldi	r19, 0x07	; 7
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b48:	dc 01       	movw	r26, r24
    2b4a:	a5 5e       	subi	r26, 0xE5	; 229
    2b4c:	bf 4f       	sbci	r27, 0xFF	; 255
  asm volatile (
    2b4e:	02 2e       	mov	r0, r18
    2b50:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
    2b54:	dc 01       	movw	r26, r24
    2b56:	a1 5e       	subi	r26, 0xE1	; 225
    2b58:	bf 4f       	sbci	r27, 0xFF	; 255
    2b5a:	02 2e       	mov	r0, r18
    2b5c:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
    2b60:	31 50       	subi	r19, 0x01	; 1
    2b62:	01 96       	adiw	r24, 0x01	; 1
    2b64:	37 ff       	sbrs	r19, 7
    2b66:	f0 cf       	rjmp	.-32     	; 0x2b48 <PM_InterpretAVRISPPacket+0x130>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b68:	a4 e1       	ldi	r26, 0x14	; 20
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
  asm volatile (
    2b6e:	08 2e       	mov	r0, r24
    2b70:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
    2b74:	1a c1       	rjmp	.+564    	; 0x2daa <PM_InterpretAVRISPPacket+0x392>
    2b76:	84 e0       	ldi	r24, 0x04	; 4
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	90 93 52 01 	sts	0x0152, r25
    2b7e:	80 93 51 01 	sts	0x0151, r24
    2b82:	10 92 56 01 	sts	0x0156, r1
    2b86:	10 92 57 01 	sts	0x0157, r1
    2b8a:	10 92 58 01 	sts	0x0158, r1
    2b8e:	87 c1       	rjmp	.+782    	; 0x2e9e <PM_InterpretAVRISPPacket+0x486>
    2b90:	84 e0       	ldi	r24, 0x04	; 4
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	90 93 52 01 	sts	0x0152, r25
    2b98:	80 93 51 01 	sts	0x0151, r24
    2b9c:	80 91 6a 02 	lds	r24, 0x026A
    2ba0:	84 30       	cpi	r24, 0x04	; 4
    2ba2:	49 f0       	breq	.+18     	; 0x2bb6 <PM_InterpretAVRISPPacket+0x19e>
    2ba4:	0e 94 a5 14 	call	0x294a <PM_CheckEndOfFuseLockData>
    2ba8:	10 92 42 01 	sts	0x0142, r1
    2bac:	10 92 41 01 	sts	0x0141, r1
    2bb0:	84 e0       	ldi	r24, 0x04	; 4
    2bb2:	80 93 6a 02 	sts	0x026A, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2bb6:	60 91 55 01 	lds	r22, 0x0155
    2bba:	68 31       	cpi	r22, 0x18	; 24
    2bbc:	19 f4       	brne	.+6      	; 0x2bc4 <PM_InterpretAVRISPPacket+0x1ac>
    2bbe:	af e2       	ldi	r26, 0x2F	; 47
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <PM_InterpretAVRISPPacket+0x1b0>
    2bc4:	a0 e3       	ldi	r26, 0x30	; 48
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2bc8:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
    2bcc:	80 2d       	mov	r24, r0
    2bce:	99 27       	eor	r25, r25
    2bd0:	40 91 41 01 	lds	r20, 0x0141
    2bd4:	50 91 42 01 	lds	r21, 0x0142
    2bd8:	84 17       	cp	r24, r20
    2bda:	95 07       	cpc	r25, r21
    2bdc:	10 f4       	brcc	.+4      	; 0x2be2 <PM_InterpretAVRISPPacket+0x1ca>
    2bde:	8f ef       	ldi	r24, 0xFF	; 255
    2be0:	1d c0       	rjmp	.+58     	; 0x2c1c <PM_InterpretAVRISPPacket+0x204>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2be2:	80 ea       	ldi	r24, 0xA0	; 160
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	48 9f       	mul	r20, r24
    2be8:	90 01       	movw	r18, r0
    2bea:	49 9f       	mul	r20, r25
    2bec:	30 0d       	add	r19, r0
    2bee:	58 9f       	mul	r21, r24
    2bf0:	30 0d       	add	r19, r0
    2bf2:	11 24       	eor	r1, r1
    2bf4:	90 91 56 01 	lds	r25, 0x0156
    2bf8:	88 e2       	ldi	r24, 0x28	; 40
    2bfa:	98 9f       	mul	r25, r24
    2bfc:	c0 01       	movw	r24, r0
    2bfe:	11 24       	eor	r1, r1
    2c00:	28 0f       	add	r18, r24
    2c02:	39 1f       	adc	r19, r25
    2c04:	68 31       	cpi	r22, 0x18	; 24
    2c06:	21 f4       	brne	.+8      	; 0x2c10 <PM_InterpretAVRISPPacket+0x1f8>
    2c08:	d9 01       	movw	r26, r18
    2c0a:	a7 5f       	subi	r26, 0xF7	; 247
    2c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0e:	03 c0       	rjmp	.+6      	; 0x2c16 <PM_InterpretAVRISPPacket+0x1fe>
    2c10:	d9 01       	movw	r26, r18
    2c12:	af 5c       	subi	r26, 0xCF	; 207
    2c14:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2c16:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
    2c1a:	80 2d       	mov	r24, r0
    2c1c:	80 93 57 01 	sts	0x0157, r24
    2c20:	10 92 56 01 	sts	0x0156, r1
    2c24:	10 92 58 01 	sts	0x0158, r1
    2c28:	4f 5f       	subi	r20, 0xFF	; 255
    2c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c2c:	50 93 42 01 	sts	0x0142, r21
    2c30:	40 93 41 01 	sts	0x0141, r20
    2c34:	34 c1       	rjmp	.+616    	; 0x2e9e <PM_InterpretAVRISPPacket+0x486>
    2c36:	83 e0       	ldi	r24, 0x03	; 3
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	90 93 52 01 	sts	0x0152, r25
    2c3e:	80 93 51 01 	sts	0x0151, r24
    2c42:	80 91 6a 02 	lds	r24, 0x026A
    2c46:	83 30       	cpi	r24, 0x03	; 3
    2c48:	39 f0       	breq	.+14     	; 0x2c58 <PM_InterpretAVRISPPacket+0x240>
    2c4a:	83 e0       	ldi	r24, 0x03	; 3
    2c4c:	80 93 6a 02 	sts	0x026A, r24
    2c50:	10 92 42 01 	sts	0x0142, r1
    2c54:	10 92 41 01 	sts	0x0141, r1
    2c58:	20 91 41 01 	lds	r18, 0x0141
    2c5c:	30 91 42 01 	lds	r19, 0x0142
    2c60:	47 31       	cpi	r20, 0x17	; 23
    2c62:	69 f4       	brne	.+26     	; 0x2c7e <PM_InterpretAVRISPPacket+0x266>
    2c64:	80 ea       	ldi	r24, 0xA0	; 160
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	28 9f       	mul	r18, r24
    2c6a:	e0 01       	movw	r28, r0
    2c6c:	29 9f       	mul	r18, r25
    2c6e:	d0 0d       	add	r29, r0
    2c70:	38 9f       	mul	r19, r24
    2c72:	d0 0d       	add	r29, r0
    2c74:	11 24       	eor	r1, r1
    2c76:	cf 5c       	subi	r28, 0xCF	; 207
    2c78:	df 4f       	sbci	r29, 0xFF	; 255
    2c7a:	82 e0       	ldi	r24, 0x02	; 2
    2c7c:	0c c0       	rjmp	.+24     	; 0x2c96 <PM_InterpretAVRISPPacket+0x27e>
    2c7e:	80 ea       	ldi	r24, 0xA0	; 160
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	28 9f       	mul	r18, r24
    2c84:	e0 01       	movw	r28, r0
    2c86:	29 9f       	mul	r18, r25
    2c88:	d0 0d       	add	r29, r0
    2c8a:	38 9f       	mul	r19, r24
    2c8c:	d0 0d       	add	r29, r0
    2c8e:	11 24       	eor	r1, r1
    2c90:	c7 5a       	subi	r28, 0xA7	; 167
    2c92:	df 4f       	sbci	r29, 0xFF	; 255
    2c94:	83 e0       	ldi	r24, 0x03	; 3
    2c96:	80 93 6b 02 	sts	0x026B, r24
    2c9a:	80 91 41 01 	lds	r24, 0x0141
    2c9e:	90 91 42 01 	lds	r25, 0x0142
    2ca2:	0a 97       	sbiw	r24, 0x0a	; 10
    2ca4:	a8 f4       	brcc	.+42     	; 0x2cd0 <PM_InterpretAVRISPPacket+0x2b8>
    2ca6:	e6 e5       	ldi	r30, 0x56	; 86
    2ca8:	f1 e0       	ldi	r31, 0x01	; 1
    2caa:	93 e0       	ldi	r25, 0x03	; 3
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2cac:	81 91       	ld	r24, Z+
  asm volatile (
    2cae:	de 01       	movw	r26, r28
    2cb0:	08 2e       	mov	r0, r24
    2cb2:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
    2cb6:	21 96       	adiw	r28, 0x01	; 1
    2cb8:	91 50       	subi	r25, 0x01	; 1
    2cba:	97 ff       	sbrs	r25, 7
    2cbc:	f7 cf       	rjmp	.-18     	; 0x2cac <PM_InterpretAVRISPPacket+0x294>
    2cbe:	80 91 41 01 	lds	r24, 0x0141
    2cc2:	90 91 42 01 	lds	r25, 0x0142
    2cc6:	01 96       	adiw	r24, 0x01	; 1
    2cc8:	90 93 42 01 	sts	0x0142, r25
    2ccc:	80 93 41 01 	sts	0x0141, r24
    2cd0:	10 92 56 01 	sts	0x0156, r1
    2cd4:	10 92 57 01 	sts	0x0157, r1
    2cd8:	e2 c0       	rjmp	.+452    	; 0x2e9e <PM_InterpretAVRISPPacket+0x486>
    2cda:	82 e0       	ldi	r24, 0x02	; 2
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	90 93 52 01 	sts	0x0152, r25
    2ce2:	80 93 51 01 	sts	0x0151, r24
    2ce6:	80 91 6a 02 	lds	r24, 0x026A
    2cea:	81 30       	cpi	r24, 0x01	; 1
    2cec:	f9 f0       	breq	.+62     	; 0x2d2c <PM_InterpretAVRISPPacket+0x314>
    2cee:	43 31       	cpi	r20, 0x13	; 19
    2cf0:	21 f4       	brne	.+8      	; 0x2cfa <PM_InterpretAVRISPPacket+0x2e2>
    2cf2:	c2 e0       	ldi	r28, 0x02	; 2
    2cf4:	d0 e0       	ldi	r29, 0x00	; 0
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	03 c0       	rjmp	.+6      	; 0x2d00 <PM_InterpretAVRISPPacket+0x2e8>
    2cfa:	cb e0       	ldi	r28, 0x0B	; 11
    2cfc:	d0 e0       	ldi	r29, 0x00	; 0
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	0e 94 2e 14 	call	0x285c <PM_SetupDFAddressCounters>
    2d04:	80 91 41 01 	lds	r24, 0x0141
    2d08:	90 91 42 01 	lds	r25, 0x0142
    2d0c:	0e 94 5a 0a 	call	0x14b4 <DF_BufferWriteEnable>
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	80 93 6a 02 	sts	0x026A, r24
    2d16:	e6 e5       	ldi	r30, 0x56	; 86
    2d18:	f1 e0       	ldi	r31, 0x01	; 1
    2d1a:	98 e0       	ldi	r25, 0x08	; 8
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2d1c:	81 91       	ld	r24, Z+
  asm volatile (
    2d1e:	de 01       	movw	r26, r28
    2d20:	08 2e       	mov	r0, r24
    2d22:	0e 94 7d 1a 	call	0x34fa <__eeprom_write_byte_1F2021>
    2d26:	91 50       	subi	r25, 0x01	; 1
    2d28:	97 ff       	sbrs	r25, 7
    2d2a:	f8 cf       	rjmp	.-16     	; 0x2d1c <PM_InterpretAVRISPPacket+0x304>
    2d2c:	80 91 56 01 	lds	r24, 0x0156
    2d30:	99 27       	eor	r25, r25
    2d32:	d8 2f       	mov	r29, r24
    2d34:	cc 27       	eor	r28, r28
    2d36:	80 91 57 01 	lds	r24, 0x0157
    2d3a:	99 27       	eor	r25, r25
    2d3c:	c8 2b       	or	r28, r24
    2d3e:	d9 2b       	or	r29, r25
    2d40:	00 e0       	ldi	r16, 0x00	; 0
    2d42:	10 e0       	ldi	r17, 0x00	; 0
    2d44:	0c 17       	cp	r16, r28
    2d46:	1d 07       	cpc	r17, r29
    2d48:	70 f4       	brcc	.+28     	; 0x2d66 <PM_InterpretAVRISPPacket+0x34e>
    2d4a:	5f e5       	ldi	r21, 0x5F	; 95
    2d4c:	e5 2e       	mov	r14, r21
    2d4e:	51 e0       	ldi	r21, 0x01	; 1
    2d50:	f5 2e       	mov	r15, r21
    2d52:	f7 01       	movw	r30, r14
    2d54:	81 91       	ld	r24, Z+
    2d56:	7f 01       	movw	r14, r30
    2d58:	0e 94 70 14 	call	0x28e0 <PM_StoreProgramByte>
    2d5c:	0f 5f       	subi	r16, 0xFF	; 255
    2d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d60:	0c 17       	cp	r16, r28
    2d62:	1d 07       	cpc	r17, r29
    2d64:	b0 f3       	brcs	.-20     	; 0x2d52 <PM_InterpretAVRISPPacket+0x33a>
    2d66:	20 91 68 02 	lds	r18, 0x0268
    2d6a:	30 91 69 02 	lds	r19, 0x0269
    2d6e:	37 fd       	sbrc	r19, 7
    2d70:	1c c0       	rjmp	.+56     	; 0x2daa <PM_InterpretAVRISPPacket+0x392>
    2d72:	80 91 58 01 	lds	r24, 0x0158
    2d76:	87 ff       	sbrs	r24, 7
    2d78:	18 c0       	rjmp	.+48     	; 0x2daa <PM_InterpretAVRISPPacket+0x392>
    2d7a:	21 15       	cp	r18, r1
    2d7c:	31 05       	cpc	r19, r1
    2d7e:	a9 f0       	breq	.+42     	; 0x2daa <PM_InterpretAVRISPPacket+0x392>
    Write a word \c value to EEPROM address \c addr. */

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
    2d80:	80 91 6b 02 	lds	r24, 0x026B
    2d84:	81 30       	cpi	r24, 0x01	; 1
    2d86:	19 f4       	brne	.+6      	; 0x2d8e <PM_InterpretAVRISPPacket+0x376>
    2d88:	a1 e8       	ldi	r26, 0x81	; 129
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <PM_InterpretAVRISPPacket+0x37a>
    2d8e:	a3 e8       	ldi	r26, 0x83	; 131
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
  asm volatile (
    2d92:	09 01       	movw	r0, r18
    2d94:	0e 94 89 1a 	call	0x3512 <__eeprom_write_word_1F2021>
    2d98:	80 91 68 02 	lds	r24, 0x0268
    2d9c:	90 91 69 02 	lds	r25, 0x0269
    2da0:	90 68       	ori	r25, 0x80	; 128
    2da2:	90 93 69 02 	sts	0x0269, r25
    2da6:	80 93 68 02 	sts	0x0268, r24
    2daa:	10 92 56 01 	sts	0x0156, r1
    2dae:	77 c0       	rjmp	.+238    	; 0x2e9e <PM_InterpretAVRISPPacket+0x486>
    2db0:	80 91 6a 02 	lds	r24, 0x026A
    2db4:	82 30       	cpi	r24, 0x02	; 2
    2db6:	01 f1       	breq	.+64     	; 0x2df8 <PM_InterpretAVRISPPacket+0x3e0>
    2db8:	0e 94 a5 14 	call	0x294a <PM_CheckEndOfFuseLockData>
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	80 91 55 01 	lds	r24, 0x0155
    2dc2:	84 31       	cpi	r24, 0x14	; 20
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <PM_InterpretAVRISPPacket+0x3b0>
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	89 2f       	mov	r24, r25
    2dca:	0e 94 2e 14 	call	0x285c <PM_SetupDFAddressCounters>
    2dce:	60 91 41 01 	lds	r22, 0x0141
    2dd2:	70 91 42 01 	lds	r23, 0x0142
    2dd6:	80 91 43 01 	lds	r24, 0x0143
    2dda:	90 91 44 01 	lds	r25, 0x0144
    2dde:	0e 94 1e 0a 	call	0x143c <DF_ContinuousReadEnable>
    2de2:	82 e0       	ldi	r24, 0x02	; 2
    2de4:	80 93 6a 02 	sts	0x026A, r24
    2de8:	10 92 4c 01 	sts	0x014C, r1
    2dec:	10 92 4d 01 	sts	0x014D, r1
    2df0:	10 92 4e 01 	sts	0x014E, r1
    2df4:	10 92 4f 01 	sts	0x014F, r1
    2df8:	80 91 56 01 	lds	r24, 0x0156
    2dfc:	99 27       	eor	r25, r25
    2dfe:	d8 2f       	mov	r29, r24
    2e00:	cc 27       	eor	r28, r28
    2e02:	80 91 57 01 	lds	r24, 0x0157
    2e06:	99 27       	eor	r25, r25
    2e08:	c8 2b       	or	r28, r24
    2e0a:	d9 2b       	or	r29, r25
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	80 91 55 01 	lds	r24, 0x0155
    2e12:	84 31       	cpi	r24, 0x14	; 20
    2e14:	09 f4       	brne	.+2      	; 0x2e18 <PM_InterpretAVRISPPacket+0x400>
    2e16:	91 e0       	ldi	r25, 0x01	; 1
    2e18:	89 2f       	mov	r24, r25
    2e1a:	0e 94 f7 13 	call	0x27ee <PM_GetStoredDataSize>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	7c 01       	movw	r14, r24
    2e24:	00 e0       	ldi	r16, 0x00	; 0
    2e26:	10 e0       	ldi	r17, 0x00	; 0
    2e28:	0c 17       	cp	r16, r28
    2e2a:	1d 07       	cpc	r17, r29
    2e2c:	18 f5       	brcc	.+70     	; 0x2e74 <PM_InterpretAVRISPPacket+0x45c>
    2e2e:	37 e5       	ldi	r19, 0x57	; 87
    2e30:	c3 2e       	mov	r12, r19
    2e32:	31 e0       	ldi	r19, 0x01	; 1
    2e34:	d3 2e       	mov	r13, r19
    2e36:	97 01       	movw	r18, r14
    2e38:	44 27       	eor	r20, r20
    2e3a:	55 27       	eor	r21, r21
    2e3c:	80 91 4c 01 	lds	r24, 0x014C
    2e40:	90 91 4d 01 	lds	r25, 0x014D
    2e44:	a0 91 4e 01 	lds	r26, 0x014E
    2e48:	b0 91 4f 01 	lds	r27, 0x014F
    2e4c:	82 17       	cp	r24, r18
    2e4e:	93 07       	cpc	r25, r19
    2e50:	a4 07       	cpc	r26, r20
    2e52:	b5 07       	cpc	r27, r21
    2e54:	20 f4       	brcc	.+8      	; 0x2e5e <PM_InterpretAVRISPPacket+0x446>
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	0e 94 4d 09 	call	0x129a <SPI_SPITransmit>
    2e5c:	01 c0       	rjmp	.+2      	; 0x2e60 <PM_InterpretAVRISPPacket+0x448>
    2e5e:	8f ef       	ldi	r24, 0xFF	; 255
    2e60:	f6 01       	movw	r30, r12
    2e62:	81 93       	st	Z+, r24
    2e64:	6f 01       	movw	r12, r30
    2e66:	0e 94 50 0f 	call	0x1ea0 <V2P_IncrementCurrAddress>
    2e6a:	0f 5f       	subi	r16, 0xFF	; 255
    2e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6e:	0c 17       	cp	r16, r28
    2e70:	1d 07       	cpc	r17, r29
    2e72:	08 f3       	brcs	.-62     	; 0x2e36 <PM_InterpretAVRISPPacket+0x41e>
    2e74:	23 96       	adiw	r28, 0x03	; 3
    2e76:	d0 93 52 01 	sts	0x0152, r29
    2e7a:	c0 93 51 01 	sts	0x0151, r28
    2e7e:	23 97       	sbiw	r28, 0x03	; 3
    2e80:	10 92 56 01 	sts	0x0156, r1
    2e84:	cb 5a       	subi	r28, 0xAB	; 171
    2e86:	de 4f       	sbci	r29, 0xFE	; 254
    2e88:	1a 82       	std	Y+2, r1	; 0x02
    2e8a:	09 c0       	rjmp	.+18     	; 0x2e9e <PM_InterpretAVRISPPacket+0x486>
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	90 93 52 01 	sts	0x0152, r25
    2e94:	80 93 51 01 	sts	0x0151, r24
    2e98:	89 ec       	ldi	r24, 0xC9	; 201
    2e9a:	80 93 56 01 	sts	0x0156, r24
    2e9e:	0e 94 6f 0e 	call	0x1cde <V2P_SendPacket>
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	1f 91       	pop	r17
    2ea8:	0f 91       	pop	r16
    2eaa:	ff 90       	pop	r15
    2eac:	ef 90       	pop	r14
    2eae:	df 90       	pop	r13
    2eb0:	cf 90       	pop	r12
    2eb2:	08 95       	ret

00002eb4 <PM_SendFuseLockBytes>:
	{
		// CurrBuffByte stores the total number of fuse/lock bytes written in this case:
		eeprom_write_byte(((MemoryType == TYPE_FUSE)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes), CurrBuffByte);
	}
}

void PM_SendFuseLockBytes(const uint8_t Type)
{
    2eb4:	0f 93       	push	r16
    2eb6:	1f 93       	push	r17
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
	uint8_t* EEPROMAddress;
	uint8_t  TotalBytes;

	if (Type == TYPE_FUSE)
    2ebc:	82 30       	cpi	r24, 0x02	; 2
    2ebe:	49 f4       	brne	.+18     	; 0x2ed2 <PM_SendFuseLockBytes+0x1e>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2ec0:	af e2       	ldi	r26, 0x2F	; 47
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2ec4:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
    2ec8:	80 2d       	mov	r24, r0
    2eca:	18 2f       	mov	r17, r24
	{
		TotalBytes    = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
		EEPROMAddress = EEPROMVars.FuseBytes;
    2ecc:	c1 e3       	ldi	r28, 0x31	; 49
    2ece:	d0 e0       	ldi	r29, 0x00	; 0
    2ed0:	08 c0       	rjmp	.+16     	; 0x2ee2 <PM_SendFuseLockBytes+0x2e>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2ed2:	a0 e3       	ldi	r26, 0x30	; 48
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2ed6:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
    2eda:	80 2d       	mov	r24, r0
    2edc:	18 2f       	mov	r17, r24
	}
	else
	{
		TotalBytes    = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
		EEPROMAddress = EEPROMVars.LockBytes;	
    2ede:	c9 e5       	ldi	r28, 0x59	; 89
    2ee0:	d0 e0       	ldi	r29, 0x00	; 0
	}

	while (TotalBytes--)                              // Write each of the fuse/lock bytes stored in memory to the slave AVR
	{
		for (uint8_t CommandByte = 0; CommandByte < 4; CommandByte++)      // Write each individual command byte
		{
			USI_SPITransmit(eeprom_read_byte(EEPROMAddress));
			EEPROMAddress++;
		}
		
		// Add some delay before programming next byte, if there is one:
		if (TotalBytes)
		  MAIN_Delay10MS(5);
    2ee2:	11 50       	subi	r17, 0x01	; 1
    2ee4:	1f 3f       	cpi	r17, 0xFF	; 255
    2ee6:	91 f0       	breq	.+36     	; 0x2f0c <PM_SendFuseLockBytes+0x58>
    2ee8:	03 e0       	ldi	r16, 0x03	; 3
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2eea:	de 01       	movw	r26, r28
    2eec:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
    2ef0:	80 2d       	mov	r24, r0
    2ef2:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    2ef6:	21 96       	adiw	r28, 0x01	; 1
    2ef8:	01 50       	subi	r16, 0x01	; 1
    2efa:	07 ff       	sbrs	r16, 7
    2efc:	f6 cf       	rjmp	.-20     	; 0x2eea <PM_SendFuseLockBytes+0x36>
    2efe:	11 23       	and	r17, r17
    2f00:	19 f0       	breq	.+6      	; 0x2f08 <PM_SendFuseLockBytes+0x54>
    2f02:	85 e0       	ldi	r24, 0x05	; 5
    2f04:	0e 94 3b 02 	call	0x476 <MAIN_Delay10MS>
    2f08:	11 50       	subi	r17, 0x01	; 1
    2f0a:	70 f7       	brcc	.-36     	; 0x2ee8 <PM_SendFuseLockBytes+0x34>
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	1f 91       	pop	r17
    2f12:	0f 91       	pop	r16
    2f14:	08 95       	ret

00002f16 <PM_SendEraseCommand>:
	}
}

void PM_SendEraseCommand(void)
{			
    2f16:	1f 93       	push	r17
    2f18:	cf 93       	push	r28
    2f1a:	df 93       	push	r29
    2f1c:	c2 e0       	ldi	r28, 0x02	; 2
    2f1e:	d0 e0       	ldi	r29, 0x00	; 0
    2f20:	13 e0       	ldi	r17, 0x03	; 3
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2f22:	de 01       	movw	r26, r28
    2f24:	ab 5e       	subi	r26, 0xEB	; 235
    2f26:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2f28:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
    2f2c:	80 2d       	mov	r24, r0
    2f2e:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
	for (uint8_t B = 2; B < 6 ; B++)                  // Read out the erase chip command bytes
    2f32:	11 50       	subi	r17, 0x01	; 1
    2f34:	21 96       	adiw	r28, 0x01	; 1
    2f36:	17 ff       	sbrs	r17, 7
    2f38:	f4 cf       	rjmp	.-24     	; 0x2f22 <PM_SendEraseCommand+0xc>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2f3a:	a6 e1       	ldi	r26, 0x16	; 22
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2f3e:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
    2f42:	80 2d       	mov	r24, r0
    2f44:	88 23       	and	r24, r24
    2f46:	59 f0       	breq	.+22     	; 0x2f5e <PM_SendEraseCommand+0x48>
	  USI_SPITransmit(eeprom_read_byte(&EEPROMVars.EraseChip[B])); // Send the erase chip commands
			
	if (eeprom_read_byte(&EEPROMVars.EraseChip[1]))   // Value of 1 indicates a busy flag test
	{
		do
			USI_SPITransmitWord(0xF000);
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	90 ef       	ldi	r25, 0xF0	; 240
    2f4c:	0e 94 c5 09 	call	0x138a <USI_SPITransmitWord>
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	0e 94 c5 09 	call	0x138a <USI_SPITransmitWord>
    2f58:	80 fd       	sbrc	r24, 0
    2f5a:	f6 cf       	rjmp	.-20     	; 0x2f48 <PM_SendEraseCommand+0x32>
    2f5c:	07 c0       	rjmp	.+14     	; 0x2f6c <PM_SendEraseCommand+0x56>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2f5e:	a5 e1       	ldi	r26, 0x15	; 21
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2f62:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
    2f66:	80 2d       	mov	r24, r0
    2f68:	0e 94 12 03 	call	0x624 <MAIN_Delay1MS>
    2f6c:	df 91       	pop	r29
    2f6e:	cf 91       	pop	r28
    2f70:	1f 91       	pop	r17
    2f72:	08 95       	ret

00002f74 <PM_CreateProgrammingPackets>:
		while (USI_SPITransmitWord(0x0000) & 0x01);
	}
	else                                              // Cleared flag means use a predefined delay
	{		
		MAIN_Delay1MS(eeprom_read_byte(&EEPROMVars.EraseChip[0])); // Wait the erase delay
	}
}

void PM_CreateProgrammingPackets(const uint8_t Type)
{			
    2f74:	3f 92       	push	r3
    2f76:	4f 92       	push	r4
    2f78:	5f 92       	push	r5
    2f7a:	6f 92       	push	r6
    2f7c:	7f 92       	push	r7
    2f7e:	8f 92       	push	r8
    2f80:	9f 92       	push	r9
    2f82:	af 92       	push	r10
    2f84:	bf 92       	push	r11
    2f86:	cf 92       	push	r12
    2f88:	df 92       	push	r13
    2f8a:	ef 92       	push	r14
    2f8c:	ff 92       	push	r15
    2f8e:	0f 93       	push	r16
    2f90:	1f 93       	push	r17
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	c8 2f       	mov	r28, r24
	uint32_t BytesRead       = 0;
    2f98:	aa 24       	eor	r10, r10
    2f9a:	bb 24       	eor	r11, r11
    2f9c:	65 01       	movw	r12, r10
	uint32_t BytesToRead     = PM_GetStoredDataSize(Type);      // Get the byte size of the stored program
    2f9e:	0e 94 f7 13 	call	0x27ee <PM_GetStoredDataSize>
    2fa2:	2b 01       	movw	r4, r22
    2fa4:	3c 01       	movw	r6, r24
	uint16_t BytesPerProgram;
	uint16_t PageLength;
	uint8_t* EEPROMAddress;
	uint8_t  ContinuedPage   = FALSE;
    2fa6:	33 24       	eor	r3, r3
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \c addr. */
uint16_t
eeprom_read_word (const uint16_t *addr)
{
    2fa8:	c1 30       	cpi	r28, 0x01	; 1
    2faa:	19 f4       	brne	.+6      	; 0x2fb2 <PM_CreateProgrammingPackets+0x3e>
    2fac:	a1 e8       	ldi	r26, 0x81	; 129
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	02 c0       	rjmp	.+4      	; 0x2fb6 <PM_CreateProgrammingPackets+0x42>
    2fb2:	a3 e8       	ldi	r26, 0x83	; 131
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
  uint16_t result;

  asm ( 
    2fb6:	0e 94 78 1a 	call	0x34f0 <__eeprom_read_word_1F2021>
    2fba:	4f 01       	movw	r8, r30

	PageLength  = eeprom_read_word((Type == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength);
	CurrAddress = 0;
    2fbc:	10 92 4c 01 	sts	0x014C, r1
    2fc0:	10 92 4d 01 	sts	0x014D, r1
    2fc4:	10 92 4e 01 	sts	0x014E, r1
    2fc8:	10 92 4f 01 	sts	0x014F, r1

	if (Type == TYPE_FLASH)
    2fcc:	c1 30       	cpi	r28, 0x01	; 1
    2fce:	49 f4       	brne	.+18     	; 0x2fe2 <PM_CreateProgrammingPackets+0x6e>
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram;       // Set the EEPROM pointer to the write flash command bytes location
    2fd0:	c2 e0       	ldi	r28, 0x02	; 2
    2fd2:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(0, 0);
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	70 e0       	ldi	r23, 0x00	; 0
    2fd8:	cb 01       	movw	r24, r22
    2fda:	0e 94 1e 0a 	call	0x143c <DF_ContinuousReadEnable>
		PacketBytes[0] = AICB_CMD_PROGRAM_FLASH_ISP;
    2fde:	83 e1       	ldi	r24, 0x13	; 19
    2fe0:	09 c0       	rjmp	.+18     	; 0x2ff4 <PM_CreateProgrammingPackets+0x80>
	}
	else
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;        // Set the EEPROM pointer to the write EEPROM command bytes location
    2fe2:	cb e0       	ldi	r28, 0x0B	; 11
    2fe4:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(PM_EEPROM_OFFSET / DF_INTERNALDF_BUFFBYTES, PM_EEPROM_OFFSET % DF_INTERNALDF_BUFFBYTES); // Start read from the EEPROM offset location
    2fe6:	60 ee       	ldi	r22, 0xE0	; 224
    2fe8:	70 e0       	ldi	r23, 0x00	; 0
    2fea:	84 ee       	ldi	r24, 0xE4	; 228
    2fec:	93 e0       	ldi	r25, 0x03	; 3
    2fee:	0e 94 1e 0a 	call	0x143c <DF_ContinuousReadEnable>
		PacketBytes[0] = AICB_CMD_PROGRAM_EEPROM_ISP;
    2ff2:	85 e1       	ldi	r24, 0x15	; 21
    2ff4:	80 93 55 01 	sts	0x0155, r24
    2ff8:	e6 e5       	ldi	r30, 0x56	; 86
    2ffa:	f1 e0       	ldi	r31, 0x01	; 1
    2ffc:	98 e0       	ldi	r25, 0x08	; 8
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2ffe:	de 01       	movw	r26, r28
    3000:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
    3004:	80 2d       	mov	r24, r0
    3006:	81 93       	st	Z+, r24
	}

	for (uint8_t B = 1; B <= 9 ; B++)                 // Load in the write data command bytes
	{
		PacketBytes[B] = eeprom_read_byte(EEPROMAddress); // Synthesise a write packet header
		EEPROMAddress++;                               // Increment the EEPROM location counter
    3008:	21 96       	adiw	r28, 0x01	; 1
    300a:	91 50       	subi	r25, 0x01	; 1
    300c:	97 ff       	sbrs	r25, 7
    300e:	f7 cf       	rjmp	.-18     	; 0x2ffe <PM_CreateProgrammingPackets+0x8a>
	}
	
	BytesPerProgram = ((uint16_t)PacketBytes[1] << 8)
    3010:	80 91 56 01 	lds	r24, 0x0156
    3014:	99 27       	eor	r25, r25
    3016:	d8 2f       	mov	r29, r24
    3018:	cc 27       	eor	r28, r28
    301a:	80 91 57 01 	lds	r24, 0x0157
    301e:	99 27       	eor	r25, r25
    3020:	c8 2b       	or	r28, r24
    3022:	d9 2b       	or	r29, r25
	                | PacketBytes[2];

	while (BytesRead < BytesToRead)
	{
		if (PacketBytes[3] & ISPCC_PROG_MODE_PAGE)
		{
			if (PageLength > 160) // Max 160 bytes at a time
			{
				if (!(ContinuedPage))                      // Start of a new page, program in the first 150 bytes
				{
					BytesPerProgram = 160;
					PacketBytes[3] &= ~ISPCC_PROG_MODE_PAGEDONE;		
					ContinuedPage = TRUE;
				}
				else                                       // Middle of a page, program in the remainder
				{
					BytesPerProgram = PageLength - 160;
					PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
					ContinuedPage = FALSE;
				}
				
				for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page				

				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);
				PacketBytes[2] = (uint8_t)(BytesPerProgram);

				BytesRead += BytesPerProgram;                         // Increment the counter
			}
			else
			{
				for (uint16_t LoadB = 0; LoadB < PageLength; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page
			
				PacketBytes[1]  = (uint8_t)(PageLength >> 8);
				PacketBytes[2]  = (uint8_t)(PageLength);
				PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;

				BytesRead += PageLength;                            // Increment the counter
			}
		}
		else
		{
			if ((BytesRead + BytesPerProgram) > BytesToRead)        // Less than a whole BytesPerProgram left of data to write
			{
				BytesPerProgram = BytesToRead - BytesRead;          // Next lot of bytes will be the remaining data length
				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);   // \. Save the new length
				PacketBytes[2] = (uint8_t)(BytesPerProgram);        // /  into the data packet
			}

			for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
				PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);    // Load in the page
			
			BytesRead += BytesPerProgram;                           // Increment the counter
		}
	
		if (!(BytesRead & 0xFFFF) && (BytesRead & 0x00FF0000))      // Extended address required
		{
			USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);            // Load extended address command
			USI_SPITransmit(0x00);
			USI_SPITransmit((BytesRead & 0x00FF0000) >> 16);        // The 3rd byte of the long holds the extended address
			USI_SPITransmit(0x00);
		}

		ISPCC_ProgramChip();                                        // Start the program cycle
    3024:	a4 14       	cp	r10, r4
    3026:	b5 04       	cpc	r11, r5
    3028:	c6 04       	cpc	r12, r6
    302a:	d7 04       	cpc	r13, r7
    302c:	08 f0       	brcs	.+2      	; 0x3030 <PM_CreateProgrammingPackets+0xbc>
    302e:	b2 c0       	rjmp	.+356    	; 0x3194 <PM_CreateProgrammingPackets+0x220>
    3030:	20 91 58 01 	lds	r18, 0x0158
    3034:	82 2f       	mov	r24, r18
    3036:	99 27       	eor	r25, r25
    3038:	ac 01       	movw	r20, r24
    303a:	41 70       	andi	r20, 0x01	; 1
    303c:	50 70       	andi	r21, 0x00	; 0
    303e:	80 ff       	sbrs	r24, 0
    3040:	53 c0       	rjmp	.+166    	; 0x30e8 <PM_CreateProgrammingPackets+0x174>
    3042:	f1 ea       	ldi	r31, 0xA1	; 161
    3044:	8f 16       	cp	r8, r31
    3046:	91 04       	cpc	r9, r1
    3048:	60 f1       	brcs	.+88     	; 0x30a2 <PM_CreateProgrammingPackets+0x12e>
    304a:	33 20       	and	r3, r3
    304c:	41 f4       	brne	.+16     	; 0x305e <PM_CreateProgrammingPackets+0xea>
    304e:	c0 ea       	ldi	r28, 0xA0	; 160
    3050:	d0 e0       	ldi	r29, 0x00	; 0
    3052:	2f 77       	andi	r18, 0x7F	; 127
    3054:	20 93 58 01 	sts	0x0158, r18
    3058:	31 e0       	ldi	r19, 0x01	; 1
    305a:	33 2e       	mov	r3, r19
    305c:	07 c0       	rjmp	.+14     	; 0x306c <PM_CreateProgrammingPackets+0xf8>
    305e:	e4 01       	movw	r28, r8
    3060:	c0 5a       	subi	r28, 0xA0	; 160
    3062:	d0 40       	sbci	r29, 0x00	; 0
    3064:	20 68       	ori	r18, 0x80	; 128
    3066:	20 93 58 01 	sts	0x0158, r18
    306a:	33 24       	eor	r3, r3
    306c:	00 e0       	ldi	r16, 0x00	; 0
    306e:	10 e0       	ldi	r17, 0x00	; 0
    3070:	0c 17       	cp	r16, r28
    3072:	1d 07       	cpc	r17, r29
    3074:	78 f4       	brcc	.+30     	; 0x3094 <PM_CreateProgrammingPackets+0x120>
    3076:	2f e5       	ldi	r18, 0x5F	; 95
    3078:	e2 2e       	mov	r14, r18
    307a:	21 e0       	ldi	r18, 0x01	; 1
    307c:	f2 2e       	mov	r15, r18
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	0e 94 4d 09 	call	0x129a <SPI_SPITransmit>
    3084:	f7 01       	movw	r30, r14
    3086:	81 93       	st	Z+, r24
    3088:	7f 01       	movw	r14, r30
    308a:	0f 5f       	subi	r16, 0xFF	; 255
    308c:	1f 4f       	sbci	r17, 0xFF	; 255
    308e:	0c 17       	cp	r16, r28
    3090:	1d 07       	cpc	r17, r29
    3092:	a8 f3       	brcs	.-22     	; 0x307e <PM_CreateProgrammingPackets+0x10a>
    3094:	8d 2f       	mov	r24, r29
    3096:	99 27       	eor	r25, r25
    3098:	80 93 56 01 	sts	0x0156, r24
    309c:	c0 93 57 01 	sts	0x0157, r28
    30a0:	4b c0       	rjmp	.+150    	; 0x3138 <PM_CreateProgrammingPackets+0x1c4>
    30a2:	00 e0       	ldi	r16, 0x00	; 0
    30a4:	10 e0       	ldi	r17, 0x00	; 0
    30a6:	08 15       	cp	r16, r8
    30a8:	19 05       	cpc	r17, r9
    30aa:	78 f4       	brcc	.+30     	; 0x30ca <PM_CreateProgrammingPackets+0x156>
    30ac:	8f e5       	ldi	r24, 0x5F	; 95
    30ae:	e8 2e       	mov	r14, r24
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	f8 2e       	mov	r15, r24
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	0e 94 4d 09 	call	0x129a <SPI_SPITransmit>
    30ba:	f7 01       	movw	r30, r14
    30bc:	81 93       	st	Z+, r24
    30be:	7f 01       	movw	r14, r30
    30c0:	0f 5f       	subi	r16, 0xFF	; 255
    30c2:	1f 4f       	sbci	r17, 0xFF	; 255
    30c4:	08 15       	cp	r16, r8
    30c6:	19 05       	cpc	r17, r9
    30c8:	a8 f3       	brcs	.-22     	; 0x30b4 <PM_CreateProgrammingPackets+0x140>
    30ca:	89 2d       	mov	r24, r9
    30cc:	99 27       	eor	r25, r25
    30ce:	80 93 56 01 	sts	0x0156, r24
    30d2:	80 92 57 01 	sts	0x0157, r8
    30d6:	80 91 58 01 	lds	r24, 0x0158
    30da:	80 68       	ori	r24, 0x80	; 128
    30dc:	80 93 58 01 	sts	0x0158, r24
    30e0:	c4 01       	movw	r24, r8
    30e2:	aa 27       	eor	r26, r26
    30e4:	bb 27       	eor	r27, r27
    30e6:	2b c0       	rjmp	.+86     	; 0x313e <PM_CreateProgrammingPackets+0x1ca>
    30e8:	ce 01       	movw	r24, r28
    30ea:	aa 27       	eor	r26, r26
    30ec:	bb 27       	eor	r27, r27
    30ee:	8a 0d       	add	r24, r10
    30f0:	9b 1d       	adc	r25, r11
    30f2:	ac 1d       	adc	r26, r12
    30f4:	bd 1d       	adc	r27, r13
    30f6:	48 16       	cp	r4, r24
    30f8:	59 06       	cpc	r5, r25
    30fa:	6a 06       	cpc	r6, r26
    30fc:	7b 06       	cpc	r7, r27
    30fe:	48 f4       	brcc	.+18     	; 0x3112 <PM_CreateProgrammingPackets+0x19e>
    3100:	e2 01       	movw	r28, r4
    3102:	ca 19       	sub	r28, r10
    3104:	db 09       	sbc	r29, r11
    3106:	8d 2f       	mov	r24, r29
    3108:	99 27       	eor	r25, r25
    310a:	80 93 56 01 	sts	0x0156, r24
    310e:	c0 93 57 01 	sts	0x0157, r28
    3112:	8a 01       	movw	r16, r20
    3114:	4c 17       	cp	r20, r28
    3116:	5d 07       	cpc	r21, r29
    3118:	78 f4       	brcc	.+30     	; 0x3138 <PM_CreateProgrammingPackets+0x1c4>
    311a:	ff e5       	ldi	r31, 0x5F	; 95
    311c:	ef 2e       	mov	r14, r31
    311e:	f1 e0       	ldi	r31, 0x01	; 1
    3120:	ff 2e       	mov	r15, r31
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	0e 94 4d 09 	call	0x129a <SPI_SPITransmit>
    3128:	f7 01       	movw	r30, r14
    312a:	81 93       	st	Z+, r24
    312c:	7f 01       	movw	r14, r30
    312e:	0f 5f       	subi	r16, 0xFF	; 255
    3130:	1f 4f       	sbci	r17, 0xFF	; 255
    3132:	0c 17       	cp	r16, r28
    3134:	1d 07       	cpc	r17, r29
    3136:	a8 f3       	brcs	.-22     	; 0x3122 <PM_CreateProgrammingPackets+0x1ae>
    3138:	ce 01       	movw	r24, r28
    313a:	aa 27       	eor	r26, r26
    313c:	bb 27       	eor	r27, r27
    313e:	a8 0e       	add	r10, r24
    3140:	b9 1e       	adc	r11, r25
    3142:	ca 1e       	adc	r12, r26
    3144:	db 1e       	adc	r13, r27
    3146:	a1 14       	cp	r10, r1
    3148:	b1 04       	cpc	r11, r1
    314a:	e1 f4       	brne	.+56     	; 0x3184 <PM_CreateProgrammingPackets+0x210>
    314c:	e1 2c       	mov	r14, r1
    314e:	f1 2c       	mov	r15, r1
    3150:	ef ef       	ldi	r30, 0xFF	; 255
    3152:	0e 2f       	mov	r16, r30
    3154:	11 2d       	mov	r17, r1
    3156:	ea 20       	and	r14, r10
    3158:	fb 20       	and	r15, r11
    315a:	0c 21       	and	r16, r12
    315c:	1d 21       	and	r17, r13
    315e:	e1 14       	cp	r14, r1
    3160:	f1 04       	cpc	r15, r1
    3162:	01 05       	cpc	r16, r1
    3164:	11 05       	cpc	r17, r1
    3166:	71 f0       	breq	.+28     	; 0x3184 <PM_CreateProgrammingPackets+0x210>
    3168:	8d e4       	ldi	r24, 0x4D	; 77
    316a:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    3174:	c8 01       	movw	r24, r16
    3176:	aa 27       	eor	r26, r26
    3178:	bb 27       	eor	r27, r27
    317a:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	0e 94 b2 09 	call	0x1364 <USI_SPITransmit>
    3184:	0e 94 9f 11 	call	0x233e <ISPCC_ProgramChip>
    3188:	a4 14       	cp	r10, r4
    318a:	b5 04       	cpc	r11, r5
    318c:	c6 04       	cpc	r12, r6
    318e:	d7 04       	cpc	r13, r7
    3190:	08 f4       	brcc	.+2      	; 0x3194 <PM_CreateProgrammingPackets+0x220>
    3192:	4e cf       	rjmp	.-356    	; 0x3030 <PM_CreateProgrammingPackets+0xbc>
    3194:	df 91       	pop	r29
    3196:	cf 91       	pop	r28
    3198:	1f 91       	pop	r17
    319a:	0f 91       	pop	r16
    319c:	ff 90       	pop	r15
    319e:	ef 90       	pop	r14
    31a0:	df 90       	pop	r13
    31a2:	cf 90       	pop	r12
    31a4:	bf 90       	pop	r11
    31a6:	af 90       	pop	r10
    31a8:	9f 90       	pop	r9
    31aa:	8f 90       	pop	r8
    31ac:	7f 90       	pop	r7
    31ae:	6f 90       	pop	r6
    31b0:	5f 90       	pop	r5
    31b2:	4f 90       	pop	r4
    31b4:	3f 90       	pop	r3
    31b6:	08 95       	ret

000031b8 <PM_ShowStoredItemSizes>:
	}
}

void PM_ShowStoredItemSizes(void)
{
    31b8:	1f 93       	push	r17
    31ba:	cf 93       	push	r28
    31bc:	df 93       	push	r29
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	2e 97       	sbiw	r28, 0x0e	; 14
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[14];
	uint8_t ItemInfoIndex = 0;
    31ce:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t TempB;
	
	JoyStatus = 1;
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)                           // Joystick is in the non-center position
    31d4:	8e b3       	in	r24, 0x1e	; 30
    31d6:	88 23       	and	r24, r24
    31d8:	e9 f3       	breq	.-6      	; 0x31d4 <PM_ShowStoredItemSizes+0x1c>
		{
			if (JoyStatus & JOY_UP)              // Previous item
    31da:	f6 9b       	sbis	0x1e, 6	; 30
    31dc:	06 c0       	rjmp	.+12     	; 0x31ea <PM_ShowStoredItemSizes+0x32>
				(ItemInfoIndex == 0)? ItemInfoIndex = 3 : ItemInfoIndex--;
    31de:	11 23       	and	r17, r17
    31e0:	11 f4       	brne	.+4      	; 0x31e6 <PM_ShowStoredItemSizes+0x2e>
    31e2:	13 e0       	ldi	r17, 0x03	; 3
    31e4:	0c c0       	rjmp	.+24     	; 0x31fe <PM_ShowStoredItemSizes+0x46>
    31e6:	11 50       	subi	r17, 0x01	; 1
    31e8:	0a c0       	rjmp	.+20     	; 0x31fe <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_DOWN)      // Next item
    31ea:	f7 9b       	sbis	0x1e, 7	; 30
    31ec:	06 c0       	rjmp	.+12     	; 0x31fa <PM_ShowStoredItemSizes+0x42>
				(ItemInfoIndex == 3)? ItemInfoIndex = 0 : ItemInfoIndex++;
    31ee:	13 30       	cpi	r17, 0x03	; 3
    31f0:	11 f4       	brne	.+4      	; 0x31f6 <PM_ShowStoredItemSizes+0x3e>
    31f2:	10 e0       	ldi	r17, 0x00	; 0
    31f4:	04 c0       	rjmp	.+8      	; 0x31fe <PM_ShowStoredItemSizes+0x46>
    31f6:	1f 5f       	subi	r17, 0xFF	; 255
    31f8:	02 c0       	rjmp	.+4      	; 0x31fe <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_LEFT)
    31fa:	f2 99       	sbic	0x1e, 2	; 30
    31fc:	54 c0       	rjmp	.+168    	; 0x32a6 <PM_ShowStoredItemSizes+0xee>
				return;
		
			switch (ItemInfoIndex)
    31fe:	81 2f       	mov	r24, r17
    3200:	99 27       	eor	r25, r25
    3202:	81 30       	cpi	r24, 0x01	; 1
    3204:	91 05       	cpc	r25, r1
    3206:	a1 f0       	breq	.+40     	; 0x3230 <PM_ShowStoredItemSizes+0x78>
    3208:	82 30       	cpi	r24, 0x02	; 2
    320a:	91 05       	cpc	r25, r1
    320c:	1c f4       	brge	.+6      	; 0x3214 <PM_ShowStoredItemSizes+0x5c>
    320e:	89 2b       	or	r24, r25
    3210:	39 f0       	breq	.+14     	; 0x3220 <PM_ShowStoredItemSizes+0x68>
    3212:	42 c0       	rjmp	.+132    	; 0x3298 <PM_ShowStoredItemSizes+0xe0>
    3214:	82 30       	cpi	r24, 0x02	; 2
    3216:	91 05       	cpc	r25, r1
    3218:	01 f1       	breq	.+64     	; 0x325a <PM_ShowStoredItemSizes+0xa2>
    321a:	03 97       	sbiw	r24, 0x03	; 3
    321c:	39 f1       	breq	.+78     	; 0x326c <PM_ShowStoredItemSizes+0xb4>
    321e:	3c c0       	rjmp	.+120    	; 0x3298 <PM_ShowStoredItemSizes+0xe0>
			{
				case 0:
					strcpy_P(Buffer, PSTR("DATA-"));
    3220:	6b e1       	ldi	r22, 0x1B	; 27
    3222:	74 e0       	ldi	r23, 0x04	; 4
    3224:	ce 01       	movw	r24, r28
    3226:	01 96       	adiw	r24, 0x01	; 1
    3228:	0e 94 2f 1a 	call	0x345e <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_FLASH), &Buffer[5], 10);
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	07 c0       	rjmp	.+14     	; 0x323e <PM_ShowStoredItemSizes+0x86>
					break;
				case 1:
					strcpy_P(Buffer, PSTR("EPRM-"));
    3230:	61 e2       	ldi	r22, 0x21	; 33
    3232:	74 e0       	ldi	r23, 0x04	; 4
    3234:	ce 01       	movw	r24, r28
    3236:	01 96       	adiw	r24, 0x01	; 1
    3238:	0e 94 2f 1a 	call	0x345e <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_EEPROM), &Buffer[5], 10);
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	0e 94 f7 13 	call	0x27ee <PM_GetStoredDataSize>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	2a e0       	ldi	r18, 0x0A	; 10
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	ae 01       	movw	r20, r28
    324c:	4a 5f       	subi	r20, 0xFA	; 250
    324e:	5f 4f       	sbci	r21, 0xFF	; 255
    3250:	bc 01       	movw	r22, r24
    3252:	cd 01       	movw	r24, r26
    3254:	0e 94 36 1a 	call	0x346c <ultoa>
					break;
    3258:	1f c0       	rjmp	.+62     	; 0x3298 <PM_ShowStoredItemSizes+0xe0>
				case 2:
					strcpy_P(Buffer, PSTR("FUSE-"));
    325a:	67 e2       	ldi	r22, 0x27	; 39
    325c:	74 e0       	ldi	r23, 0x04	; 4
    325e:	ce 01       	movw	r24, r28
    3260:	01 96       	adiw	r24, 0x01	; 1
    3262:	0e 94 2f 1a 	call	0x345e <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    3266:	af e2       	ldi	r26, 0x2F	; 47
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	08 c0       	rjmp	.+16     	; 0x327c <PM_ShowStoredItemSizes+0xc4>
					TempB = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);
					break;
				case 3:
					strcpy_P(Buffer, PSTR("LOCK-"));
    326c:	6d e2       	ldi	r22, 0x2D	; 45
    326e:	74 e0       	ldi	r23, 0x04	; 4
    3270:	ce 01       	movw	r24, r28
    3272:	01 96       	adiw	r24, 0x01	; 1
    3274:	0e 94 2f 1a 	call	0x345e <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    3278:	a0 e3       	ldi	r26, 0x30	; 48
    327a:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    327c:	0e 94 6b 1a 	call	0x34d6 <__eeprom_read_byte_1F2021>
    3280:	80 2d       	mov	r24, r0
					TempB = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);		
    3282:	8f 3f       	cpi	r24, 0xFF	; 255
    3284:	11 f0       	breq	.+4      	; 0x328a <PM_ShowStoredItemSizes+0xd2>
    3286:	99 27       	eor	r25, r25
    3288:	02 c0       	rjmp	.+4      	; 0x328e <PM_ShowStoredItemSizes+0xd6>
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	be 01       	movw	r22, r28
    3290:	6a 5f       	subi	r22, 0xFA	; 250
    3292:	7f 4f       	sbci	r23, 0xFF	; 255
    3294:	0e 94 40 03 	call	0x680 <MAIN_IntToStr>
			}
	
			LCD_puts(Buffer);
    3298:	ce 01       	movw	r24, r28
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	0e 94 2e 08 	call	0x105c <LCD_puts>

			MAIN_WaitForJoyRelease();
    32a0:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
    32a4:	97 cf       	rjmp	.-210    	; 0x31d4 <PM_ShowStoredItemSizes+0x1c>
    32a6:	2e 96       	adiw	r28, 0x0e	; 14
    32a8:	0f b6       	in	r0, 0x3f	; 63
    32aa:	f8 94       	cli
    32ac:	de bf       	out	0x3e, r29	; 62
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	cd bf       	out	0x3d, r28	; 61
    32b2:	df 91       	pop	r29
    32b4:	cf 91       	pop	r28
    32b6:	1f 91       	pop	r17
    32b8:	08 95       	ret

000032ba <TM_FindNextTag>:
	DF_EnableDataflash(FALSE);
}

void TM_FindNextTag(void)
{
    32ba:	af 92       	push	r10
    32bc:	bf 92       	push	r11
    32be:	df 92       	push	r13
    32c0:	ef 92       	push	r14
    32c2:	ff 92       	push	r15
    32c4:	0f 93       	push	r16
    32c6:	1f 93       	push	r17
    32c8:	cf 93       	push	r28
    32ca:	df 93       	push	r29
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
    32d0:	69 97       	sbiw	r28, 0x19	; 25
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	f8 94       	cli
    32d6:	de bf       	out	0x3e, r29	; 62
    32d8:	0f be       	out	0x3f, r0	; 63
    32da:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Buffer[21];
	uint8_t  HeadBuff[4]      = BT_TAGHEADER;
    32dc:	80 e4       	ldi	r24, 0x40	; 64
    32de:	8e 8b       	std	Y+22, r24	; 0x16
    32e0:	86 e1       	ldi	r24, 0x16	; 22
    32e2:	a8 2e       	mov	r10, r24
    32e4:	b1 2c       	mov	r11, r1
    32e6:	ac 0e       	add	r10, r28
    32e8:	bd 1e       	adc	r11, r29
    32ea:	88 e2       	ldi	r24, 0x28	; 40
    32ec:	8f 8b       	std	Y+23, r24	; 0x17
    32ee:	83 e2       	ldi	r24, 0x23	; 35
    32f0:	88 8f       	std	Y+24, r24	; 0x18
    32f2:	89 e2       	ldi	r24, 0x29	; 41
    32f4:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t ProgDataSize     = PM_GetStoredDataSize(TYPE_FLASH);
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	0e 94 f7 13 	call	0x27ee <PM_GetStoredDataSize>
    32fc:	7b 01       	movw	r14, r22
    32fe:	8c 01       	movw	r16, r24
	uint8_t  TotalOkHeadBytes = 0;
    3300:	dd 24       	eor	r13, r13
	uint8_t  TagByte;
	uint8_t  BytesRead;
	
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);    // Orange = busy
    3302:	81 b3       	in	r24, 0x11	; 17
    3304:	80 63       	ori	r24, 0x30	; 48
    3306:	81 bb       	out	0x11, r24	; 17

	while (DFPos < ProgDataSize)
	{
		BytesRead = 1;
		
		if (SPI_SPITransmit(0x00) == HeadBuff[TotalOkHeadBytes++])
		{
			if (TotalOkHeadBytes == 4)
			{
				uint8_t HB;
			
				for (HB = 0; HB < 20; HB++)
				{
					TagByte = SPI_SPITransmit(0x00);
					Buffer[HB] = TagByte;
					
					if (TagByte == 0x00)
					  break;
				}
				
				Buffer[20] = '\0';             // Make sure string is null-terminated

				TagExists = TRUE;
				BytesRead = (HB + 2);

				LCD_puts(Buffer);
				MAIN_SETSTATUSLED(MAIN_STATLED_GREEN); // Green = ready
				return;
			}
		}
		else
		{
			TotalOkHeadBytes = 0;
		}

		DFPos += BytesRead;
    3308:	80 91 6c 02 	lds	r24, 0x026C
    330c:	90 91 6d 02 	lds	r25, 0x026D
    3310:	a0 91 6e 02 	lds	r26, 0x026E
    3314:	b0 91 6f 02 	lds	r27, 0x026F
    3318:	8e 15       	cp	r24, r14
    331a:	9f 05       	cpc	r25, r15
    331c:	a0 07       	cpc	r26, r16
    331e:	b1 07       	cpc	r27, r17
    3320:	08 f0       	brcs	.+2      	; 0x3324 <TM_FindNextTag+0x6a>
    3322:	43 c0       	rjmp	.+134    	; 0x33aa <TM_FindNextTag+0xf0>
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	0e 94 4d 09 	call	0x129a <SPI_SPITransmit>
    332a:	f5 01       	movw	r30, r10
    332c:	ed 0d       	add	r30, r13
    332e:	f1 1d       	adc	r31, r1
    3330:	d3 94       	inc	r13
    3332:	90 81       	ld	r25, Z
    3334:	89 17       	cp	r24, r25
    3336:	21 f5       	brne	.+72     	; 0x3380 <TM_FindNextTag+0xc6>
    3338:	84 e0       	ldi	r24, 0x04	; 4
    333a:	d8 16       	cp	r13, r24
    333c:	11 f5       	brne	.+68     	; 0x3382 <TM_FindNextTag+0xc8>
    333e:	ff 24       	eor	r15, r15
    3340:	00 e0       	ldi	r16, 0x00	; 0
    3342:	10 e0       	ldi	r17, 0x00	; 0
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	0e 94 4d 09 	call	0x129a <SPI_SPITransmit>
    334a:	9e 01       	movw	r18, r28
    334c:	2f 5f       	subi	r18, 0xFF	; 255
    334e:	3f 4f       	sbci	r19, 0xFF	; 255
    3350:	f8 01       	movw	r30, r16
    3352:	e2 0f       	add	r30, r18
    3354:	f3 1f       	adc	r31, r19
    3356:	80 83       	st	Z, r24
    3358:	88 23       	and	r24, r24
    335a:	31 f0       	breq	.+12     	; 0x3368 <TM_FindNextTag+0xae>
    335c:	f3 94       	inc	r15
    335e:	0f 5f       	subi	r16, 0xFF	; 255
    3360:	1f 4f       	sbci	r17, 0xFF	; 255
    3362:	83 e1       	ldi	r24, 0x13	; 19
    3364:	8f 15       	cp	r24, r15
    3366:	70 f7       	brcc	.-36     	; 0x3344 <TM_FindNextTag+0x8a>
    3368:	1d 8a       	std	Y+21, r1	; 0x15
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	80 93 70 02 	sts	0x0270, r24
    3370:	c9 01       	movw	r24, r18
    3372:	0e 94 2e 08 	call	0x105c <LCD_puts>
    3376:	81 b3       	in	r24, 0x11	; 17
    3378:	8f 7c       	andi	r24, 0xCF	; 207
    337a:	80 61       	ori	r24, 0x10	; 16
    337c:	81 bb       	out	0x11, r24	; 17
    337e:	31 c0       	rjmp	.+98     	; 0x33e2 <TM_FindNextTag+0x128>
    3380:	dd 24       	eor	r13, r13
    3382:	80 91 6c 02 	lds	r24, 0x026C
    3386:	90 91 6d 02 	lds	r25, 0x026D
    338a:	a0 91 6e 02 	lds	r26, 0x026E
    338e:	b0 91 6f 02 	lds	r27, 0x026F
    3392:	01 96       	adiw	r24, 0x01	; 1
    3394:	a1 1d       	adc	r26, r1
    3396:	b1 1d       	adc	r27, r1
    3398:	80 93 6c 02 	sts	0x026C, r24
    339c:	90 93 6d 02 	sts	0x026D, r25
    33a0:	a0 93 6e 02 	sts	0x026E, r26
    33a4:	b0 93 6f 02 	sts	0x026F, r27
    33a8:	b7 cf       	rjmp	.-146    	; 0x3318 <TM_FindNextTag+0x5e>
	}
	
	DF_ContinuousReadEnable(0, 0);
    33aa:	60 e0       	ldi	r22, 0x00	; 0
    33ac:	70 e0       	ldi	r23, 0x00	; 0
    33ae:	cb 01       	movw	r24, r22
    33b0:	0e 94 1e 0a 	call	0x143c <DF_ContinuousReadEnable>
	DFPos = 0;
    33b4:	10 92 6c 02 	sts	0x026C, r1
    33b8:	10 92 6d 02 	sts	0x026D, r1
    33bc:	10 92 6e 02 	sts	0x026E, r1
    33c0:	10 92 6f 02 	sts	0x026F, r1
	
	if (TagExists == FALSE)
    33c4:	80 91 70 02 	lds	r24, 0x0270
    33c8:	88 23       	and	r24, r24
    33ca:	49 f4       	brne	.+18     	; 0x33de <TM_FindNextTag+0x124>
	{
		MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);  // Green = ready
    33cc:	81 b3       	in	r24, 0x11	; 17
    33ce:	8f 7c       	andi	r24, 0xCF	; 207
    33d0:	80 61       	ori	r24, 0x10	; 16
    33d2:	81 bb       	out	0x11, r24	; 17
		MAIN_ShowError(PSTR("NO TAGS"));
    33d4:	83 e3       	ldi	r24, 0x33	; 51
    33d6:	94 e0       	ldi	r25, 0x04	; 4
    33d8:	0e 94 79 03 	call	0x6f2 <MAIN_ShowError>
    33dc:	02 c0       	rjmp	.+4      	; 0x33e2 <TM_FindNextTag+0x128>
	}
	else
	{
		/* The following line _is_ recursion, but the function will only ever call itself
		   a maximum of one time. The function will call itself upon skipping from the last
		   tag stored in the program data to the first; to guard against infinite recursion
		   if no tags are present, the system will error out if the TagExists flag is empty
		   after a full data read. Once a tag has been read and displayed onto the LCD, the
           function returns to the main tag handling routine.                               */
		TM_FindNextTag();
    33de:	0e 94 5d 19 	call	0x32ba <TM_FindNextTag>
    33e2:	69 96       	adiw	r28, 0x19	; 25
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	cd bf       	out	0x3d, r28	; 61
    33ee:	df 91       	pop	r29
    33f0:	cf 91       	pop	r28
    33f2:	1f 91       	pop	r17
    33f4:	0f 91       	pop	r16
    33f6:	ff 90       	pop	r15
    33f8:	ef 90       	pop	r14
    33fa:	df 90       	pop	r13
    33fc:	bf 90       	pop	r11
    33fe:	af 90       	pop	r10
    3400:	08 95       	ret

00003402 <TM_ShowTags>:
    3402:	60 e0       	ldi	r22, 0x00	; 0
    3404:	70 e0       	ldi	r23, 0x00	; 0
    3406:	cb 01       	movw	r24, r22
    3408:	0e 94 1e 0a 	call	0x143c <DF_ContinuousReadEnable>
    340c:	10 92 70 02 	sts	0x0270, r1
    3410:	10 92 6c 02 	sts	0x026C, r1
    3414:	10 92 6d 02 	sts	0x026D, r1
    3418:	10 92 6e 02 	sts	0x026E, r1
    341c:	10 92 6f 02 	sts	0x026F, r1
    3420:	0e 94 5d 19 	call	0x32ba <TM_FindNextTag>
    3424:	80 91 70 02 	lds	r24, 0x0270
    3428:	88 23       	and	r24, r24
    342a:	71 f0       	breq	.+28     	; 0x3448 <TM_ShowTags+0x46>
    342c:	8e b3       	in	r24, 0x1e	; 30
    342e:	88 23       	and	r24, r24
    3430:	e9 f3       	breq	.-6      	; 0x342c <TM_ShowTags+0x2a>
    3432:	f7 9b       	sbis	0x1e, 7	; 30
    3434:	03 c0       	rjmp	.+6      	; 0x343c <TM_ShowTags+0x3a>
    3436:	0e 94 5d 19 	call	0x32ba <TM_FindNextTag>
    343a:	02 c0       	rjmp	.+4      	; 0x3440 <TM_ShowTags+0x3e>
    343c:	f2 99       	sbic	0x1e, 2	; 30
    343e:	03 c0       	rjmp	.+6      	; 0x3446 <TM_ShowTags+0x44>
    3440:	0e 94 4d 02 	call	0x49a <MAIN_WaitForJoyRelease>
    3444:	f3 cf       	rjmp	.-26     	; 0x342c <TM_ShowTags+0x2a>
    3446:	80 e0       	ldi	r24, 0x00	; 0
    3448:	0e 94 e7 09 	call	0x13ce <DF_EnableDataflash>
    344c:	08 95       	ret

0000344e <__vector_2>:
.global PCINT0_vect             ; Pin change 0 (joystick)
.global PCINT1_vect             ; Pin change 1 (joystick)

PCINT0_vect:
  jmp PCINT1_vect
    344e:	0c 94 9f 03 	jmp	0x73e <__vector_3>

00003452 <__vector_10>:

.global TIMER0_COMP_vect             ; Timer 0 compare

TIMER0_COMP_vect:
  push r24
    3452:	8f 93       	push	r24
  ldi r24, (USI_CONTROL_REG_FLAGS | (1<<USITC))
    3454:	8b e5       	ldi	r24, 0x5B	; 91
  sts _SFR_MEM_ADDR(USICR), r24
    3456:	80 93 b8 00 	sts	0x00B8, r24
  pop r24
    345a:	8f 91       	pop	r24
  reti
    345c:	18 95       	reti

0000345e <strcpy_P>:
    345e:	fb 01       	movw	r30, r22
    3460:	dc 01       	movw	r26, r24
    3462:	05 90       	lpm	r0, Z+
    3464:	0d 92       	st	X+, r0
    3466:	00 20       	and	r0, r0
    3468:	e1 f7       	brne	.-8      	; 0x3462 <strcpy_P+0x4>
    346a:	08 95       	ret

0000346c <ultoa>:
    346c:	fa 01       	movw	r30, r20
    346e:	cf 93       	push	r28
    3470:	ff 93       	push	r31
    3472:	ef 93       	push	r30
    3474:	22 30       	cpi	r18, 0x02	; 2
    3476:	cc f0       	brlt	.+50     	; 0x34aa <ultoa+0x3e>
    3478:	25 32       	cpi	r18, 0x25	; 37
    347a:	bc f4       	brge	.+46     	; 0x34aa <ultoa+0x3e>
    347c:	c2 2f       	mov	r28, r18
    347e:	2c 2f       	mov	r18, r28
    3480:	33 27       	eor	r19, r19
    3482:	44 27       	eor	r20, r20
    3484:	55 27       	eor	r21, r21
    3486:	ff 93       	push	r31
    3488:	ef 93       	push	r30
    348a:	0e 94 93 1a 	call	0x3526 <__udivmodsi4>
    348e:	ef 91       	pop	r30
    3490:	ff 91       	pop	r31
    3492:	60 5d       	subi	r22, 0xD0	; 208
    3494:	6a 33       	cpi	r22, 0x3A	; 58
    3496:	0c f0       	brlt	.+2      	; 0x349a <ultoa+0x2e>
    3498:	69 5d       	subi	r22, 0xD9	; 217
    349a:	61 93       	st	Z+, r22
    349c:	b9 01       	movw	r22, r18
    349e:	ca 01       	movw	r24, r20
    34a0:	60 50       	subi	r22, 0x00	; 0
    34a2:	70 40       	sbci	r23, 0x00	; 0
    34a4:	80 40       	sbci	r24, 0x00	; 0
    34a6:	90 40       	sbci	r25, 0x00	; 0
    34a8:	51 f7       	brne	.-44     	; 0x347e <ultoa+0x12>
    34aa:	10 82       	st	Z, r1
    34ac:	8f 91       	pop	r24
    34ae:	9f 91       	pop	r25
    34b0:	cf 91       	pop	r28
    34b2:	0c 94 5b 1a 	jmp	0x34b6 <strrev>

000034b6 <strrev>:
    34b6:	dc 01       	movw	r26, r24
    34b8:	fc 01       	movw	r30, r24
    34ba:	01 90       	ld	r0, Z+
    34bc:	00 20       	and	r0, r0
    34be:	e9 f7       	brne	.-6      	; 0x34ba <strrev+0x4>
    34c0:	32 97       	sbiw	r30, 0x02	; 2
    34c2:	ae 17       	cp	r26, r30
    34c4:	bf 07       	cpc	r27, r31
    34c6:	30 f4       	brcc	.+12     	; 0x34d4 <strrev+0x1e>
    34c8:	7c 91       	ld	r23, X
    34ca:	60 81       	ld	r22, Z
    34cc:	70 83       	st	Z, r23
    34ce:	31 97       	sbiw	r30, 0x01	; 1
    34d0:	6d 93       	st	X+, r22
    34d2:	f7 cf       	rjmp	.-18     	; 0x34c2 <strrev+0xc>
    34d4:	08 95       	ret

000034d6 <__eeprom_read_byte_1F2021>:
    34d6:	f9 99       	sbic	0x1f, 1	; 31
    34d8:	fe cf       	rjmp	.-4      	; 0x34d6 <__eeprom_read_byte_1F2021>
    34da:	b2 bd       	out	0x22, r27	; 34
    34dc:	a1 bd       	out	0x21, r26	; 33
    34de:	f8 9a       	sbi	0x1f, 0	; 31
    34e0:	11 96       	adiw	r26, 0x01	; 1
    34e2:	00 b4       	in	r0, 0x20	; 32
    34e4:	08 95       	ret

000034e6 <__eeprom_read_block_1F2021>:
    34e6:	f7 df       	rcall	.-18     	; 0x34d6 <__eeprom_read_byte_1F2021>
    34e8:	01 92       	st	Z+, r0
    34ea:	1a 94       	dec	r1
    34ec:	e1 f7       	brne	.-8      	; 0x34e6 <__eeprom_read_block_1F2021>
    34ee:	08 95       	ret

000034f0 <__eeprom_read_word_1F2021>:
    34f0:	f2 df       	rcall	.-28     	; 0x34d6 <__eeprom_read_byte_1F2021>
    34f2:	e0 2d       	mov	r30, r0
    34f4:	f0 df       	rcall	.-32     	; 0x34d6 <__eeprom_read_byte_1F2021>
    34f6:	f0 2d       	mov	r31, r0
    34f8:	08 95       	ret

000034fa <__eeprom_write_byte_1F2021>:
    34fa:	f9 99       	sbic	0x1f, 1	; 31
    34fc:	fe cf       	rjmp	.-4      	; 0x34fa <__eeprom_write_byte_1F2021>
    34fe:	b2 bd       	out	0x22, r27	; 34
    3500:	a1 bd       	out	0x21, r26	; 33
    3502:	00 bc       	out	0x20, r0	; 32
    3504:	11 96       	adiw	r26, 0x01	; 1
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	fa 9a       	sbi	0x1f, 2	; 31
    350c:	f9 9a       	sbi	0x1f, 1	; 31
    350e:	0f be       	out	0x3f, r0	; 63
    3510:	08 95       	ret

00003512 <__eeprom_write_word_1F2021>:
    3512:	f3 df       	rcall	.-26     	; 0x34fa <__eeprom_write_byte_1F2021>
    3514:	01 2c       	mov	r0, r1
    3516:	f1 df       	rcall	.-30     	; 0x34fa <__eeprom_write_byte_1F2021>
    3518:	11 24       	eor	r1, r1
    351a:	08 95       	ret

0000351c <__eeprom_write_block_1F2021>:
    351c:	01 90       	ld	r0, Z+
    351e:	ed df       	rcall	.-38     	; 0x34fa <__eeprom_write_byte_1F2021>
    3520:	1a 94       	dec	r1
    3522:	e1 f7       	brne	.-8      	; 0x351c <__eeprom_write_block_1F2021>
    3524:	08 95       	ret

00003526 <__udivmodsi4>:
    3526:	a1 e2       	ldi	r26, 0x21	; 33
    3528:	1a 2e       	mov	r1, r26
    352a:	aa 1b       	sub	r26, r26
    352c:	bb 1b       	sub	r27, r27
    352e:	fd 01       	movw	r30, r26
    3530:	0d c0       	rjmp	.+26     	; 0x354c <__udivmodsi4_ep>

00003532 <__udivmodsi4_loop>:
    3532:	aa 1f       	adc	r26, r26
    3534:	bb 1f       	adc	r27, r27
    3536:	ee 1f       	adc	r30, r30
    3538:	ff 1f       	adc	r31, r31
    353a:	a2 17       	cp	r26, r18
    353c:	b3 07       	cpc	r27, r19
    353e:	e4 07       	cpc	r30, r20
    3540:	f5 07       	cpc	r31, r21
    3542:	20 f0       	brcs	.+8      	; 0x354c <__udivmodsi4_ep>
    3544:	a2 1b       	sub	r26, r18
    3546:	b3 0b       	sbc	r27, r19
    3548:	e4 0b       	sbc	r30, r20
    354a:	f5 0b       	sbc	r31, r21

0000354c <__udivmodsi4_ep>:
    354c:	66 1f       	adc	r22, r22
    354e:	77 1f       	adc	r23, r23
    3550:	88 1f       	adc	r24, r24
    3552:	99 1f       	adc	r25, r25
    3554:	1a 94       	dec	r1
    3556:	69 f7       	brne	.-38     	; 0x3532 <__udivmodsi4_loop>
    3558:	60 95       	com	r22
    355a:	70 95       	com	r23
    355c:	80 95       	com	r24
    355e:	90 95       	com	r25
    3560:	9b 01       	movw	r18, r22
    3562:	ac 01       	movw	r20, r24
    3564:	bd 01       	movw	r22, r26
    3566:	cf 01       	movw	r24, r30
    3568:	08 95       	ret
