
ButtLoad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00003420  000034d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003420  00000000  00000000  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b0  00800104  00800104  000034d8  2**0
                  ALLOC
  3 .noinit       00000000  008002b4  008002b4  00003560  2**0
                  CONTENTS
  4 .eeprom       00000088  00810000  00810000  000034d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .stab         000003e4  00000000  00000000  00003560  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000000fb  00000000  00000000  00003944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 0000012c  00000000  00000000  00003a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d26  00000000  00000000  00003b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003eb8  00000000  00000000  00004891  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f57  00000000  00000000  00008749  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003255  00000000  00000000  000096a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000010d9  00000000  00000000  0000c8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 06 02 	jmp	0x40c <__init>
       4:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
       8:	0c 94 63 19 	jmp	0x32c6 <__vector_2>
       c:	0c 94 87 03 	jmp	0x70e <__vector_3>
      10:	0c 94 85 0b 	jmp	0x170a <__vector_4>
      14:	0c 94 79 07 	jmp	0xef2 <__vector_5>
      18:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      1c:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      20:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      24:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      28:	0c 94 65 19 	jmp	0x32ca <__vector_10>
      2c:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      30:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      34:	0c 94 0b 0b 	jmp	0x1616 <__vector_13>
      38:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      3c:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      40:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      44:	0c 94 ea 08 	jmp	0x11d4 <__vector_17>
      48:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      4c:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      50:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      54:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      58:	0c 94 26 08 	jmp	0x104c <__vector_22>

0000005c <SIFOOptionPtrs>:
      5c:	6f 00 60 00                                         o.`.

00000060 <SIFO_Tags>:
      60:	56 49 45 57 20 44 41 54 41 20 54 41 47 53 00        VIEW DATA TAGS.

0000006f <SIFO_Size>:
      6f:	53 54 4f 52 41 47 45 20 53 49 5a 45 53 00           STORAGE SIZES.

0000007d <USIPSNamePtrs>:
      7d:	a3 00 99 00 8f 00 85 00                             ........

00000085 <USI_Speed3>:
      85:	32 31 30 36 35 31 20 48 5a 00                       210651 HZ.

0000008f <USI_Speed2>:
      8f:	31 31 33 34 32 37 20 48 5a 00                       113427 HZ.

00000099 <USI_Speed1>:
      99:	20 38 36 37 33 38 20 48 5a 00                        86738 HZ.

000000a3 <USI_Speed0>:
      a3:	20 35 37 31 35 33 20 48 5a 00                        57153 HZ.

000000ad <ProgOptions>:
      ad:	16 01 0a 01 fa 00 ea 00 da 00 c6 00 bb 00           ..............

000000bb <PRG_C>:
      bb:	45 52 41 53 45 20 4f 4e 4c 59 00                    ERASE ONLY.

000000c6 <PRG_FL>:
      c6:	46 55 53 45 20 41 4e 44 20 4c 4f 43 4b 20 42 59     FUSE AND LOCK BY
      d6:	54 45 53 00                                         TES.

000000da <PRG_L>:
      da:	4c 4f 43 4b 20 42 59 54 45 53 20 4f 4e 4c 59 00     LOCK BYTES ONLY.

000000ea <PRG_F>:
      ea:	46 55 53 45 20 42 59 54 45 53 20 4f 4e 4c 59 00     FUSE BYTES ONLY.

000000fa <PRG_DE>:
      fa:	44 41 54 41 20 41 4e 44 20 45 45 50 52 4f 4d 00     DATA AND EEPROM.

0000010a <PRG_E>:
     10a:	45 45 50 52 4f 4d 20 4f 4e 4c 59 00                 EEPROM ONLY.

00000116 <PRG_D>:
     116:	44 41 54 41 20 4f 4e 4c 59 00                       DATA ONLY.

00000120 <SettingFunctionPtrs>:
     120:	bd 05 10 06 4a 06 89 05 06 07                       ....J.....

0000012a <SettingFunctionNames>:
     12a:	73 01 65 01 54 01 47 01 34 01                       s.e.T.G.4.

00000134 <SFunc_GOBOOTLOADER>:
     134:	4a 55 4d 50 20 54 4f 20 42 4f 4f 54 4c 4f 41 44     JUMP TO BOOTLOAD
     144:	45 52 00                                            ER.

00000147 <SFunc_CLEARMEM>:
     147:	43 4c 45 41 52 20 4d 45 4d 4f 52 59 00              CLEAR MEMORY.

00000154 <SFunc_SETFIRMMINOR>:
     154:	53 45 54 20 46 49 52 4d 20 56 45 52 53 49 4f 4e     SET FIRM VERSION
	...

00000165 <SFunc_SETSPISPEED>:
     165:	53 45 54 20 53 50 49 20 53 50 45 45 44 00           SET SPI SPEED.

00000173 <SFunc_SETCONTRAST>:
     173:	53 45 54 20 43 4f 4e 54 52 41 53 54 00              SET CONTRAST.

00000180 <MainFunctionPtrs>:
     180:	d8 03 57 05 22 04 f1 03 ae 06 a3 03 9a 06           ..W.".........

0000018e <MainFunctionNames>:
     18e:	e5 01 da 01 ce 01 bf 01 b0 01 a7 01 9c 01           ..............

0000019c <Func_SLEEP>:
     19c:	53 4c 45 45 50 20 4d 4f 44 45 00                    SLEEP MODE.

000001a7 <Func_SETTINGS>:
     1a7:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

000001b0 <Func_PRGMSTOREINFO>:
     1b0:	44 41 54 41 53 54 4f 52 45 20 49 4e 46 4f 00        DATASTORE INFO.

000001bf <Func_PRGMDATAFLASH>:
     1bf:	44 41 54 41 46 4c 41 53 48 20 50 52 47 4d 00        DATAFLASH PRGM.

000001ce <Func_PRGMAVR>:
     1ce:	50 52 4f 47 52 41 4d 20 41 56 52 00                 PROGRAM AVR.

000001da <Func_STOREPRGM>:
     1da:	53 54 4f 52 45 20 50 52 47 4d 00                    STORE PRGM.

000001e5 <Func_ISPPRGM>:
     1e5:	41 56 52 49 53 50 20 4d 4f 44 45 00                 AVRISP MODE.

000001f1 <AboutTextPtrs>:
     1f1:	1c 02 17 02 08 02 f9 01                             ........

000001f9 <CopyRight>:
     1f9:	3c 43 3e 20 32 30 30 36 20 2d 20 47 50 4c 00        <C> 2006 - GPL.

00000208 <AuthorName>:
     208:	42 59 20 44 45 41 4e 20 43 41 4d 45 52 41 00        BY DEAN CAMERA.

00000217 <VersionInfo>:
     217:	56 31 2d 33 00                                      V1-3.

0000021c <ProgrammerName>:
     21c:	42 55 54 54 4c 4f 41 44 00                          BUTTLOAD.

00000225 <WaitText>:
     225:	2a 57 41 49 54 2a 00                                *WAIT*.

0000022c <BUTTTAG_Author>:
     22c:	40 28 23 29 42 59 20 44 45 41 4e 20 43 41 4d 45     @(#)BY DEAN CAME
     23c:	52 41 00                                            RA.

0000023f <BUTTTAG_Name>:
     23f:	40 28 23 29 42 55 54 54 4c 4f 41 44 20 41 56 52     @(#)BUTTLOAD AVR
     24f:	49 53 50 00                                         ISP.

00000253 <__c.15>:
     253:	50 52 47 3e 20 00                                   PRG> .

00000259 <__c.14>:
     259:	42 41 44 49 53 52 00                                BADISR.

00000260 <__c.7>:
     260:	4e 4f 20 45 52 41 53 45 20 43 4d 44 00              NO ERASE CMD.

0000026d <__c.8>:
     26d:	4e 4f 20 44 41 54 41 00                             NO DATA.

00000275 <__c.9>:
     275:	4e 4f 20 45 45 50 52 4f 4d 00                       NO EEPROM.

0000027f <__c.10>:
     27f:	4e 4f 20 46 55 53 45 20 42 59 54 45 53 00           NO FUSE BYTES.

0000028d <__c.11>:
     28d:	4e 4f 20 4c 4f 43 4b 20 42 59 54 45 53 00           NO LOCK BYTES.

0000029b <__c.12>:
     29b:	50 52 4f 47 52 41 4d 4d 49 4e 47 20 44 4f 4e 45     PROGRAMMING DONE
	...

000002ac <__c.13>:
     2ac:	46 41 49 4c 45 44 00                                FAILED.

000002b3 <__c.6>:
     2b3:	2a 53 54 4f 52 41 47 45 20 4d 4f 44 45 2a 00        *STORAGE MODE*.

000002c2 <__c.3>:
     2c2:	43 4f 4e 46 49 52 4d 00                             CONFIRM.

000002ca <__c.4>:
     2ca:	3c 4e 20 59 3e 00                                   <N Y>.

000002d0 <__c.5>:
     2d0:	4d 45 4d 20 43 4c 45 41 52 45 44 00                 MEM CLEARED.

000002dc <__c.2>:
     2dc:	56 32 2d 20 00                                      V2- .

000002e1 <__c.1>:
     2e1:	4e 4f 20 53 54 4f 52 45 44 20 50 52 47 4d 00        NO STORED PRGM.

000002f0 <__c.0>:
     2f0:	2a 4a 54 41 47 20 4f 4e 2a 00                       *JTAG ON*.

000002fa <LCD_SegTable>:
     2fa:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
     30a:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
     31a:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
     32a:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
     33a:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
     34a:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
     35a:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

00000366 <USIPSValues>:
     366:	03 80 02 54 01 40 00 22                             ...T.@."

0000036e <DataFlashError>:
     36e:	44 41 54 41 46 4c 41 53 48 20 45 52 52 4f 52 00     DATAFLASH ERROR.

0000037e <DF_Pages>:
     37e:	00 01 00 02 00 04 00 08 00 10 00 10 00 20 00 20     ............. . 

0000038e <DF_PageSize>:
     38e:	08 01 08 01 08 01 08 01 08 01 10 02 10 02 20 04     .............. .

0000039e <DF_PageBits>:
     39e:	09 09 09 09 09 0a 0a 0b                             ........

000003a6 <__c.0>:
     3a6:	42 55 46 46 20 4f 56 45 52 46 4c 4f 57 00           BUFF OVERFLOW.

000003b4 <DataFlashProgMode>:
     3b4:	2a 44 41 54 41 46 4c 41 53 48 20 4d 4f 44 45 2a     *DATAFLASH MODE*
	...

000003c5 <SignonResponse>:
     3c5:	01 00 08 41 56 52 49 53 50 5f 32                    ...AVRISP_2

000003d0 <SyncErrorMessage>:
     3d0:	53 59 4e 43 20 45 52 52 4f 52 00                    SYNC ERROR.

000003db <AVRISPModeMessage>:
     3db:	2a 41 54 41 56 52 49 53 50 20 4d 4f 44 45 2a 00     *ATAVRISP MODE*.

000003eb <__c.0>:
     3eb:	44 41 54 41 2d 00                                   DATA-.

000003f1 <__c.1>:
     3f1:	45 50 52 4d 2d 00                                   EPRM-.

000003f7 <__c.2>:
     3f7:	46 55 53 45 2d 00                                   FUSE-.

000003fd <__c.3>:
     3fd:	4c 4f 43 4b 2d 00                                   LOCK-.

00000403 <__c.0>:
     403:	4e 4f 20 54 41 47 53 00 00                          NO TAGS..

0000040c <__init>:
     40c:	11 24       	eor	r1, r1
     40e:	1f be       	out	0x3f, r1	; 63
     410:	cf ef       	ldi	r28, 0xFF	; 255
     412:	d4 e0       	ldi	r29, 0x04	; 4
     414:	de bf       	out	0x3e, r29	; 62
     416:	cd bf       	out	0x3d, r28	; 61

00000418 <__do_copy_data>:
     418:	11 e0       	ldi	r17, 0x01	; 1
     41a:	a0 e0       	ldi	r26, 0x00	; 0
     41c:	b1 e0       	ldi	r27, 0x01	; 1
     41e:	e0 e2       	ldi	r30, 0x20	; 32
     420:	f4 e3       	ldi	r31, 0x34	; 52
     422:	02 c0       	rjmp	.+4      	; 0x428 <.do_copy_data_start>

00000424 <.do_copy_data_loop>:
     424:	05 90       	lpm	r0, Z+
     426:	0d 92       	st	X+, r0

00000428 <.do_copy_data_start>:
     428:	a4 30       	cpi	r26, 0x04	; 4
     42a:	b1 07       	cpc	r27, r17
     42c:	d9 f7       	brne	.-10     	; 0x424 <.do_copy_data_loop>

0000042e <__do_clear_bss>:
     42e:	12 e0       	ldi	r17, 0x02	; 2
     430:	a4 e0       	ldi	r26, 0x04	; 4
     432:	b1 e0       	ldi	r27, 0x01	; 1
     434:	01 c0       	rjmp	.+2      	; 0x438 <.do_clear_bss_start>

00000436 <.do_clear_bss_loop>:
     436:	1d 92       	st	X+, r1

00000438 <.do_clear_bss_start>:
     438:	a4 3b       	cpi	r26, 0xB4	; 180
     43a:	b1 07       	cpc	r27, r17
     43c:	e1 f7       	brne	.-8      	; 0x436 <.do_clear_bss_loop>
     43e:	0c 94 67 02 	jmp	0x4ce <main>

00000442 <__bad_interrupt>:
     442:	0c 94 9e 03 	jmp	0x73c <__vector_default>

00000446 <MAIN_Delay10MS>:

// ======================================================================================

void MAIN_Delay10MS(uint8_t loops)
{
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     44a:	28 2f       	mov	r18, r24
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	2f 3f       	cpi	r18, 0xFF	; 255
     450:	49 f0       	breq	.+18     	; 0x464 <MAIN_Delay10MS+0x1e>
     452:	a0 e0       	ldi	r26, 0x00	; 0
     454:	b8 e4       	ldi	r27, 0x48	; 72
     456:	c0 e0       	ldi	r28, 0x00	; 0
     458:	d0 e0       	ldi	r29, 0x00	; 0
     45a:	cd 01       	movw	r24, r26
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <MAIN_Delay10MS+0x16>
     460:	21 50       	subi	r18, 0x01	; 1
     462:	d8 f7       	brcc	.-10     	; 0x45a <MAIN_Delay10MS+0x14>
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <MAIN_WaitForJoyRelease>:
  /* Prevents the use of floating point libraries. Delaying in groups of
     10ms increases accuracy by reducing the time overhead for each loop
     interation of the while.                                            */

	while (loops--)
	  _delay_ms(10);
}

void MAIN_Delay1MS(uint8_t loops)
{
  /* Prevents the use of floating point libraries. Less accurate than the
     Delay10MS routine, but nessesary for many commands. The overhead required
     to call the routine is substantially less than the overhead required to
     calculate the float at compile time, so this actually saves execution time. */

	while (loops--)
	  _delay_ms(1);
}

void MAIN_ResetCSLine(const uint8_t ActiveInactive)
{
	/* ActiveInactive controls the /Reset line to an AVR device or external dataflash
	/CS line. If the reset polarity parameter is a 0 then interfacing with AT89
	devices which has an active high reset. Pins are tristated when inactive.         */
	
	switch (ActiveInactive)
	{
		case MAIN_RESETCS_ACTIVE:   // The target RESET line may be either active high or low.
			DDRF |= (1 << 6);
		
			if (!(eeprom_read_byte(&EEPROMVars.ResetPolarity))) // Translate to correct logic level for target device type
			  PORTF |=  (1 << 6);
			else
			  PORTF &= ~(1 << 6);
		
			break;
		case MAIN_RESETCS_EXTDFACTIVE: // Dataflashes are always active low.
			DDRF  |=  (1 << 6);
			PORTF &= ~(1 << 6);
			
			break;
		case MAIN_RESETCS_INACTIVE: // Both modes tristate the pins when inactive.
			DDRF  &= ~(1 << 6);
			PORTF &= ~(1 << 6);
	}
}

void MAIN_WaitForJoyRelease(void)
{
	while (1)
	{
		while (JoyStatus) {};                   // Wait until joystick released
     46a:	8e b3       	in	r24, 0x1e	; 30
     46c:	88 23       	and	r24, r24
     46e:	e9 f7       	brne	.-6      	; 0x46a <MAIN_WaitForJoyRelease>

		MAIN_Delay10MS(1);
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	0e 94 23 02 	call	0x446 <MAIN_Delay10MS>

		if (!(JoyStatus))                       // Joystick still released (not bouncing), return
     476:	8e b3       	in	r24, 0x1e	; 30
     478:	88 23       	and	r24, r24
     47a:	b9 f7       	brne	.-18     	; 0x46a <MAIN_WaitForJoyRelease>
     47c:	08 95       	ret

0000047e <FUNCShowAbout>:
		  return;
	}
}

void MAIN_IntToStr(uint16_t IntV, uint8_t* Buff)
{
	// Shows leading zeros, unlike itoa.

	uint8_t Temp = 0;
	
	while (IntV >= 100)
	{
		Temp++;
		IntV -= 100;
	}

	*(Buff++) = '0' + Temp;
	
	Temp = 0;
	
	while (IntV >= 10)
	{
		Temp++;
		IntV -= 10;
	}
		
	*(Buff++) = '0' + Temp;
	*(Buff++) = '0' + IntV;
	*(Buff)   = '\0';
}

void MAIN_ShowProgType(const uint8_t Letter)
{
	uint8_t ProgTypeBuffer[7];

	strcpy_P(ProgTypeBuffer, PSTR("PRG> "));
	ProgTypeBuffer[5] = Letter;
	ProgTypeBuffer[6] = '\0';
	
	LCD_puts(ProgTypeBuffer);
}

void MAIN_ShowError(const uint8_t *pFlashStr)
{
	uint8_t ErrorBuff[LCD_TEXTBUFFER_SIZE];       // New buffer, LCD text buffer size
	
	ErrorBuff[0] = 'E';
	ErrorBuff[1] = '>';

	strcpy_P(&ErrorBuff[2], pFlashStr);       // WARNING: If error text is larger than (TEXTBUFFER_SIZE - 2),
	                                          // this will overflow the buffer and probably crash the micro!
	LCD_puts(ErrorBuff);
	
	MAIN_WaitForJoyRelease();
	while (!(JoyStatus & JOY_PRESS)) {};
	MAIN_WaitForJoyRelease();
}

// ======================================================================================

ISR(PCINT1_vect, ISR_NOBLOCK)                 // Joystick routine; PCINT0_vect is bound to this also via JoystickInterrupt.S
{
	JoyStatus = (~PINB & JOY_BMASK)
	          | (~PINE & JOY_EMASK);
}

ISR(BADISR_vect, ISR_NAKED)                   // Bad ISR routine; should never be called, here for safety
{
	MAIN_ShowError(PSTR("BADISR"));
	while (1) {};
}

// ======================================================================================

void FUNCChangeSettings(void)
{
	uint8_t CurrSFunc = 0;
	
	JoyStatus = 1;

	while (1)
	{
		if (JoyStatus)                         // Joystick is in the non-center position
		{
			if (JoyStatus & JOY_UP)            // Previous function
			  (CurrSFunc == 0)? CurrSFunc = 4 : CurrSFunc--;
			else if (JoyStatus & JOY_DOWN)     // Next function
			  (CurrSFunc == 4)? CurrSFunc = 0 : CurrSFunc++;
			else if (JoyStatus & JOY_PRESS)    // Select current function
			  ((FuncPtr)pgm_read_word(&SettingFunctionPtrs[CurrSFunc]))(); // Run associated function
			else if (JoyStatus & JOY_LEFT)
			  return;
		
			// Show current function onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&SettingFunctionNames[CurrSFunc]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCShowAbout(void)
{
     47e:	cf 93       	push	r28
	uint8_t InfoNum = 0;
     480:	c0 e0       	ldi	r28, 0x00	; 0
	
	JoyStatus = 1;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	8e bb       	out	0x1e, r24	; 30
			
	while (1)
	{
		if (JoyStatus)
     486:	8e b3       	in	r24, 0x1e	; 30
     488:	88 23       	and	r24, r24
     48a:	e9 f3       	breq	.-6      	; 0x486 <FUNCShowAbout+0x8>
		{
			if (JoyStatus & JOY_UP)
     48c:	f6 9b       	sbis	0x1e, 6	; 30
     48e:	06 c0       	rjmp	.+12     	; 0x49c <FUNCShowAbout+0x1e>
			  (InfoNum == 0)? InfoNum = 3 : InfoNum--;
     490:	cc 23       	and	r28, r28
     492:	11 f4       	brne	.+4      	; 0x498 <FUNCShowAbout+0x1a>
     494:	c3 e0       	ldi	r28, 0x03	; 3
     496:	0c c0       	rjmp	.+24     	; 0x4b0 <FUNCShowAbout+0x32>
     498:	c1 50       	subi	r28, 0x01	; 1
     49a:	0a c0       	rjmp	.+20     	; 0x4b0 <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_DOWN)
     49c:	f7 9b       	sbis	0x1e, 7	; 30
     49e:	06 c0       	rjmp	.+12     	; 0x4ac <FUNCShowAbout+0x2e>
			  (InfoNum == 3)? InfoNum = 0 : InfoNum++;
     4a0:	c3 30       	cpi	r28, 0x03	; 3
     4a2:	11 f4       	brne	.+4      	; 0x4a8 <FUNCShowAbout+0x2a>
     4a4:	c0 e0       	ldi	r28, 0x00	; 0
     4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <FUNCShowAbout+0x32>
     4a8:	cf 5f       	subi	r28, 0xFF	; 255
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_LEFT)
     4ac:	f2 99       	sbic	0x1e, 2	; 30
     4ae:	0d c0       	rjmp	.+26     	; 0x4ca <FUNCShowAbout+0x4c>
			  return;

			LCD_puts_f((uint8_t*)pgm_read_word(&AboutTextPtrs[InfoNum]));
     4b0:	ec 2f       	mov	r30, r28
     4b2:	ff 27       	eor	r31, r31
     4b4:	ee 0f       	add	r30, r30
     4b6:	ff 1f       	adc	r31, r31
     4b8:	ef 50       	subi	r30, 0x0F	; 15
     4ba:	fe 4f       	sbci	r31, 0xFE	; 254
     4bc:	85 91       	lpm	r24, Z+
     4be:	94 91       	lpm	r25, Z
     4c0:	0e 94 dd 07 	call	0xfba <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     4c4:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     4c8:	de cf       	rjmp	.-68     	; 0x486 <FUNCShowAbout+0x8>
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <main>:
     4ce:	cf ef       	ldi	r28, 0xFF	; 255
     4d0:	d4 e0       	ldi	r29, 0x04	; 4
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	cd bf       	out	0x3d, r28	; 61
     4d6:	c0 e0       	ldi	r28, 0x00	; 0
     4d8:	80 e8       	ldi	r24, 0x80	; 128
     4da:	85 bf       	out	0x35, r24	; 53
     4dc:	85 bf       	out	0x35, r24	; 53
     4de:	80 bf       	out	0x30, r24	; 48
     4e0:	85 e0       	ldi	r24, 0x05	; 5
     4e2:	80 93 64 00 	sts	0x0064, r24
     4e6:	80 e3       	ldi	r24, 0x30	; 48
     4e8:	80 bb       	out	0x10, r24	; 16
     4ea:	87 e2       	ldi	r24, 0x27	; 39
     4ec:	84 b9       	out	0x04, r24	; 4
     4ee:	8f ed       	ldi	r24, 0xDF	; 223
     4f0:	85 b9       	out	0x05, r24	; 5
     4f2:	8c e0       	ldi	r24, 0x0C	; 12
     4f4:	8e b9       	out	0x0e, r24	; 14
     4f6:	80 93 6b 00 	sts	0x006B, r24
     4fa:	80 ed       	ldi	r24, 0xD0	; 208
     4fc:	80 93 6c 00 	sts	0x006C, r24
     500:	80 ec       	ldi	r24, 0xC0	; 192
     502:	8d bb       	out	0x1d, r24	; 29
     504:	8c bb       	out	0x1c, r24	; 28
     506:	81 b3       	in	r24, 0x11	; 17
     508:	8f 7c       	andi	r24, 0xCF	; 207
     50a:	80 62       	ori	r24, 0x20	; 32
     50c:	81 bb       	out	0x11, r24	; 17
     50e:	0e 94 9a 07 	call	0xf34 <LCD_Init>
     512:	8f e0       	ldi	r24, 0x0F	; 15
     514:	80 93 e7 00 	sts	0x00E7, r24
     518:	85 e2       	ldi	r24, 0x25	; 37
     51a:	92 e0       	ldi	r25, 0x02	; 2
     51c:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
     520:	78 94       	sei
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     522:	27 e8       	ldi	r18, 0x87	; 135
     524:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t result;
  asm volatile
     526:	d9 01       	movw	r26, r18
     528:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
     52c:	80 2d       	mov	r24, r0
     52e:	8a 37       	cpi	r24, 0x7A	; 122
     530:	89 f0       	breq	.+34     	; 0x554 <__stack+0x55>
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	4f ef       	ldi	r20, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     538:	dc 01       	movw	r26, r24
     53a:	04 2e       	mov	r0, r20
     53c:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	52 e0       	ldi	r21, 0x02	; 2
     544:	80 30       	cpi	r24, 0x00	; 0
     546:	95 07       	cpc	r25, r21
     548:	b8 f3       	brcs	.-18     	; 0x538 <__stack+0x39>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
     54a:	8a e7       	ldi	r24, 0x7A	; 122
  asm volatile (
     54c:	d9 01       	movw	r26, r18
     54e:	08 2e       	mov	r0, r24
     550:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
     554:	a5 e8       	ldi	r26, 0x85	; 133
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
     55c:	80 2d       	mov	r24, r0
     55e:	8f 70       	andi	r24, 0x0F	; 15
     560:	80 93 e7 00 	sts	0x00E7, r24
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
     56a:	81 b3       	in	r24, 0x11	; 17
     56c:	80 63       	ori	r24, 0x30	; 48
     56e:	81 bb       	out	0x11, r24	; 17
     570:	0e 94 97 08 	call	0x112e <USART_Init>
     574:	0e 94 14 07 	call	0xe28 <OSCCAL_Calibrate>
     578:	81 b3       	in	r24, 0x11	; 17
     57a:	8f 7c       	andi	r24, 0xCF	; 207
     57c:	80 61       	ori	r24, 0x10	; 16
     57e:	81 bb       	out	0x11, r24	; 17
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	8e bb       	out	0x1e, r24	; 30
     584:	80 e8       	ldi	r24, 0x80	; 128
     586:	80 93 61 00 	sts	0x0061, r24
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	80 93 61 00 	sts	0x0061, r24
     590:	8e b3       	in	r24, 0x1e	; 30
     592:	88 23       	and	r24, r24
     594:	e9 f3       	breq	.-6      	; 0x590 <__stack+0x91>
     596:	f6 9b       	sbis	0x1e, 6	; 30
     598:	06 c0       	rjmp	.+12     	; 0x5a6 <__stack+0xa7>
     59a:	cc 23       	and	r28, r28
     59c:	11 f4       	brne	.+4      	; 0x5a2 <__stack+0xa3>
     59e:	c6 e0       	ldi	r28, 0x06	; 6
     5a0:	1b c0       	rjmp	.+54     	; 0x5d8 <__stack+0xd9>
     5a2:	c1 50       	subi	r28, 0x01	; 1
     5a4:	19 c0       	rjmp	.+50     	; 0x5d8 <__stack+0xd9>
     5a6:	f7 9b       	sbis	0x1e, 7	; 30
     5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <__stack+0xb7>
     5aa:	c6 30       	cpi	r28, 0x06	; 6
     5ac:	11 f4       	brne	.+4      	; 0x5b2 <__stack+0xb3>
     5ae:	c0 e0       	ldi	r28, 0x00	; 0
     5b0:	13 c0       	rjmp	.+38     	; 0x5d8 <__stack+0xd9>
     5b2:	cf 5f       	subi	r28, 0xFF	; 255
     5b4:	11 c0       	rjmp	.+34     	; 0x5d8 <__stack+0xd9>
     5b6:	f4 9b       	sbis	0x1e, 4	; 30
     5b8:	0b c0       	rjmp	.+22     	; 0x5d0 <__stack+0xd1>
     5ba:	ec 2f       	mov	r30, r28
     5bc:	ff 27       	eor	r31, r31
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	e0 58       	subi	r30, 0x80	; 128
     5c4:	fe 4f       	sbci	r31, 0xFE	; 254
     5c6:	85 91       	lpm	r24, Z+
     5c8:	94 91       	lpm	r25, Z
     5ca:	fc 01       	movw	r30, r24
     5cc:	09 95       	icall
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__stack+0xd9>
     5d0:	f3 9b       	sbis	0x1e, 3	; 30
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <__stack+0xd9>
     5d4:	0e 94 3f 02 	call	0x47e <FUNCShowAbout>
     5d8:	ec 2f       	mov	r30, r28
     5da:	ff 27       	eor	r31, r31
     5dc:	ee 0f       	add	r30, r30
     5de:	ff 1f       	adc	r31, r31
     5e0:	e2 57       	subi	r30, 0x72	; 114
     5e2:	fe 4f       	sbci	r31, 0xFE	; 254
     5e4:	85 91       	lpm	r24, Z+
     5e6:	94 91       	lpm	r25, Z
     5e8:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
     5ec:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     5f0:	cf cf       	rjmp	.-98     	; 0x590 <__stack+0x91>

000005f2 <MAIN_Delay1MS>:
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5f6:	28 2f       	mov	r18, r24
     5f8:	21 50       	subi	r18, 0x01	; 1
     5fa:	2f 3f       	cpi	r18, 0xFF	; 255
     5fc:	49 f0       	breq	.+18     	; 0x610 <MAIN_Delay1MS+0x1e>
     5fe:	a3 e3       	ldi	r26, 0x33	; 51
     600:	b7 e0       	ldi	r27, 0x07	; 7
     602:	c0 e0       	ldi	r28, 0x00	; 0
     604:	d0 e0       	ldi	r29, 0x00	; 0
     606:	cd 01       	movw	r24, r26
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <MAIN_Delay1MS+0x16>
     60c:	21 50       	subi	r18, 0x01	; 1
     60e:	d8 f7       	brcc	.-10     	; 0x606 <MAIN_Delay1MS+0x14>
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	08 95       	ret

00000616 <MAIN_ResetCSLine>:
     616:	99 27       	eor	r25, r25
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	91 05       	cpc	r25, r1
     61c:	b1 f0       	breq	.+44     	; 0x64a <MAIN_ResetCSLine+0x34>
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	91 05       	cpc	r25, r1
     622:	1c f4       	brge	.+6      	; 0x62a <MAIN_ResetCSLine+0x14>
     624:	89 2b       	or	r24, r25
     626:	21 f0       	breq	.+8      	; 0x630 <MAIN_ResetCSLine+0x1a>
     628:	08 95       	ret
     62a:	02 97       	sbiw	r24, 0x02	; 2
     62c:	59 f0       	breq	.+22     	; 0x644 <MAIN_ResetCSLine+0x2e>
     62e:	08 95       	ret
     630:	86 9a       	sbi	0x10, 6	; 16
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     632:	a0 e0       	ldi	r26, 0x00	; 0
     634:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     636:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
     63a:	80 2d       	mov	r24, r0
     63c:	88 23       	and	r24, r24
     63e:	19 f4       	brne	.+6      	; 0x646 <MAIN_ResetCSLine+0x30>
     640:	8e 9a       	sbi	0x11, 6	; 17
     642:	08 95       	ret
     644:	86 9a       	sbi	0x10, 6	; 16
     646:	8e 98       	cbi	0x11, 6	; 17
     648:	08 95       	ret
     64a:	86 98       	cbi	0x10, 6	; 16
     64c:	fc cf       	rjmp	.-8      	; 0x646 <MAIN_ResetCSLine+0x30>

0000064e <MAIN_IntToStr>:
     64e:	fb 01       	movw	r30, r22
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	84 36       	cpi	r24, 0x64	; 100
     654:	91 05       	cpc	r25, r1
     656:	20 f0       	brcs	.+8      	; 0x660 <MAIN_IntToStr+0x12>
     658:	2f 5f       	subi	r18, 0xFF	; 255
     65a:	84 56       	subi	r24, 0x64	; 100
     65c:	90 40       	sbci	r25, 0x00	; 0
     65e:	f9 cf       	rjmp	.-14     	; 0x652 <MAIN_IntToStr+0x4>
     660:	20 5d       	subi	r18, 0xD0	; 208
     662:	21 93       	st	Z+, r18
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	8a 30       	cpi	r24, 0x0A	; 10
     668:	91 05       	cpc	r25, r1
     66a:	18 f0       	brcs	.+6      	; 0x672 <MAIN_IntToStr+0x24>
     66c:	2f 5f       	subi	r18, 0xFF	; 255
     66e:	0a 97       	sbiw	r24, 0x0a	; 10
     670:	fa cf       	rjmp	.-12     	; 0x666 <MAIN_IntToStr+0x18>
     672:	20 5d       	subi	r18, 0xD0	; 208
     674:	21 93       	st	Z+, r18
     676:	80 5d       	subi	r24, 0xD0	; 208
     678:	81 93       	st	Z+, r24
     67a:	10 82       	st	Z, r1
     67c:	08 95       	ret

0000067e <MAIN_ShowProgType>:
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	27 97       	sbiw	r28, 0x07	; 7
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
     694:	18 2f       	mov	r17, r24
     696:	63 e5       	ldi	r22, 0x53	; 83
     698:	72 e0       	ldi	r23, 0x02	; 2
     69a:	ce 01       	movw	r24, r28
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	0e 94 6b 19 	call	0x32d6 <strcpy_P>
     6a2:	1e 83       	std	Y+6, r17	; 0x06
     6a4:	1f 82       	std	Y+7, r1	; 0x07
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	0e 94 a7 07 	call	0xf4e <LCD_puts>
     6ae:	27 96       	adiw	r28, 0x07	; 7
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	08 95       	ret

000006c2 <MAIN_ShowError>:
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
     6ca:	64 97       	sbiw	r28, 0x14	; 20
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	25 e4       	ldi	r18, 0x45	; 69
     6d8:	29 83       	std	Y+1, r18	; 0x01
     6da:	2e e3       	ldi	r18, 0x3E	; 62
     6dc:	2a 83       	std	Y+2, r18	; 0x02
     6de:	bc 01       	movw	r22, r24
     6e0:	ce 01       	movw	r24, r28
     6e2:	03 96       	adiw	r24, 0x03	; 3
     6e4:	0e 94 6b 19 	call	0x32d6 <strcpy_P>
     6e8:	ce 01       	movw	r24, r28
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	0e 94 a7 07 	call	0xf4e <LCD_puts>
     6f0:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     6f4:	f4 9b       	sbis	0x1e, 4	; 30
     6f6:	fe cf       	rjmp	.-4      	; 0x6f4 <MAIN_ShowError+0x32>
     6f8:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     6fc:	64 96       	adiw	r28, 0x14	; 20
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <__vector_3>:
     70e:	78 94       	sei
     710:	1f 92       	push	r1
     712:	0f 92       	push	r0
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	0f 92       	push	r0
     718:	11 24       	eor	r1, r1
     71a:	8f 93       	push	r24
     71c:	9f 93       	push	r25
     71e:	93 b1       	in	r25, 0x03	; 3
     720:	90 95       	com	r25
     722:	90 7d       	andi	r25, 0xD0	; 208
     724:	8c b1       	in	r24, 0x0c	; 12
     726:	80 95       	com	r24
     728:	8c 70       	andi	r24, 0x0C	; 12
     72a:	98 2b       	or	r25, r24
     72c:	9e bb       	out	0x1e, r25	; 30
     72e:	9f 91       	pop	r25
     730:	8f 91       	pop	r24
     732:	0f 90       	pop	r0
     734:	0f be       	out	0x3f, r0	; 63
     736:	0f 90       	pop	r0
     738:	1f 90       	pop	r1
     73a:	18 95       	reti

0000073c <__vector_default>:
     73c:	89 e5       	ldi	r24, 0x59	; 89
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
     744:	ff cf       	rjmp	.-2      	; 0x744 <__vector_default+0x8>

00000746 <FUNCChangeSettings>:
     746:	cf 93       	push	r28
     748:	c0 e0       	ldi	r28, 0x00	; 0
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	8e bb       	out	0x1e, r24	; 30
     74e:	8e b3       	in	r24, 0x1e	; 30
     750:	88 23       	and	r24, r24
     752:	e9 f3       	breq	.-6      	; 0x74e <FUNCChangeSettings+0x8>
     754:	f6 9b       	sbis	0x1e, 6	; 30
     756:	06 c0       	rjmp	.+12     	; 0x764 <FUNCChangeSettings+0x1e>
     758:	cc 23       	and	r28, r28
     75a:	11 f4       	brne	.+4      	; 0x760 <FUNCChangeSettings+0x1a>
     75c:	c4 e0       	ldi	r28, 0x04	; 4
     75e:	19 c0       	rjmp	.+50     	; 0x792 <FUNCChangeSettings+0x4c>
     760:	c1 50       	subi	r28, 0x01	; 1
     762:	17 c0       	rjmp	.+46     	; 0x792 <FUNCChangeSettings+0x4c>
     764:	f7 9b       	sbis	0x1e, 7	; 30
     766:	06 c0       	rjmp	.+12     	; 0x774 <FUNCChangeSettings+0x2e>
     768:	c4 30       	cpi	r28, 0x04	; 4
     76a:	11 f4       	brne	.+4      	; 0x770 <FUNCChangeSettings+0x2a>
     76c:	c0 e0       	ldi	r28, 0x00	; 0
     76e:	11 c0       	rjmp	.+34     	; 0x792 <FUNCChangeSettings+0x4c>
     770:	cf 5f       	subi	r28, 0xFF	; 255
     772:	0f c0       	rjmp	.+30     	; 0x792 <FUNCChangeSettings+0x4c>
     774:	f4 9b       	sbis	0x1e, 4	; 30
     776:	0b c0       	rjmp	.+22     	; 0x78e <FUNCChangeSettings+0x48>
     778:	ec 2f       	mov	r30, r28
     77a:	ff 27       	eor	r31, r31
     77c:	ee 0f       	add	r30, r30
     77e:	ff 1f       	adc	r31, r31
     780:	e0 5e       	subi	r30, 0xE0	; 224
     782:	fe 4f       	sbci	r31, 0xFE	; 254
     784:	85 91       	lpm	r24, Z+
     786:	94 91       	lpm	r25, Z
     788:	fc 01       	movw	r30, r24
     78a:	09 95       	icall
     78c:	02 c0       	rjmp	.+4      	; 0x792 <FUNCChangeSettings+0x4c>
     78e:	f2 99       	sbic	0x1e, 2	; 30
     790:	0d c0       	rjmp	.+26     	; 0x7ac <FUNCChangeSettings+0x66>
     792:	ec 2f       	mov	r30, r28
     794:	ff 27       	eor	r31, r31
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	e6 5d       	subi	r30, 0xD6	; 214
     79c:	fe 4f       	sbci	r31, 0xFE	; 254
     79e:	85 91       	lpm	r24, Z+
     7a0:	94 91       	lpm	r25, Z
     7a2:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
     7a6:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     7aa:	d1 cf       	rjmp	.-94     	; 0x74e <FUNCChangeSettings+0x8>
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <FUNCAVRISPMode>:
		}
	}
}

void FUNCAVRISPMode(void)
{
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     7b0:	85 e2       	ldi	r24, 0x25	; 37
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
     7b8:	0e 94 14 07 	call	0xe28 <OSCCAL_Calibrate>
     7bc:	80 91 c1 00 	lds	r24, 0x00C1
     7c0:	80 78       	andi	r24, 0x80	; 128
     7c2:	88 61       	ori	r24, 0x18	; 24
     7c4:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(AVRISPModeMessage);
     7c8:	8b ed       	ldi	r24, 0xDB	; 219
     7ca:	93 e0       	ldi	r25, 0x03	; 3
     7cc:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
	
	InterpretPacketRoutine = (FuncPtr)AICI_InterpretPacket;
     7d0:	80 ec       	ldi	r24, 0xC0	; 192
     7d2:	91 e1       	ldi	r25, 0x11	; 17
     7d4:	90 93 03 01 	sts	0x0103, r25
     7d8:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     7dc:	0e 94 cf 0e 	call	0x1d9e <V2P_RunStateMachine>
     7e0:	08 95       	ret

000007e2 <FUNCProgramDataflash>:
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     7e2:	a1 e0       	ldi	r26, 0x01	; 1
     7e4:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     7e6:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
     7ea:	80 2d       	mov	r24, r0
     7ec:	0e 94 20 09 	call	0x1240 <USI_SPIInitMaster>
}

void FUNCProgramDataflash(void)
{
	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	UseExernalDF = TRUE;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 61 02 	sts	0x0261, r24
	DFSPIRoutinePointer = USI_SPITransmit;
     7f6:	8a e3       	ldi	r24, 0x3A	; 58
     7f8:	99 e0       	ldi	r25, 0x09	; 9
     7fa:	90 93 01 01 	sts	0x0101, r25
     7fe:	80 93 00 01 	sts	0x0100, r24
	
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     802:	85 e2       	ldi	r24, 0x25	; 37
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
     80a:	0e 94 14 07 	call	0xe28 <OSCCAL_Calibrate>
     80e:	80 91 c1 00 	lds	r24, 0x00C1
     812:	80 78       	andi	r24, 0x80	; 128
     814:	88 61       	ori	r24, 0x18	; 24
     816:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(DataFlashProgMode);
     81a:	84 eb       	ldi	r24, 0xB4	; 180
     81c:	93 e0       	ldi	r25, 0x03	; 3
     81e:	0e 94 dd 07 	call	0xfba <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PD_InterpretAVRISPPacket;
     822:	8d ef       	ldi	r24, 0xFD	; 253
     824:	9b e0       	ldi	r25, 0x0B	; 11
     826:	90 93 03 01 	sts	0x0103, r25
     82a:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     82e:	0e 94 cf 0e 	call	0x1d9e <V2P_RunStateMachine>
	   
	DF_EnableDataflash(FALSE);
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
	SPI_SPIOFF();
     838:	80 91 64 00 	lds	r24, 0x0064
     83c:	84 60       	ori	r24, 0x04	; 4
     83e:	80 93 64 00 	sts	0x0064, r24
     842:	08 95       	ret

00000844 <FUNCProgramAVR>:
}

void FUNCProgramAVR(void)
{
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	63 97       	sbiw	r28, 0x13	; 19
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  DoneFailMessageBuff[19];
	uint8_t  Fault = ISPCC_NO_FAULT;
     85c:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t  ProgMode = 0;
     85e:	10 2f       	mov	r17, r16

	SPI_SPIInit();
     860:	0e 94 cb 08 	call	0x1196 <SPI_SPIInit>
	UseExernalDF = FALSE;
     864:	00 93 61 02 	sts	0x0261, r16
	DFSPIRoutinePointer = SPI_SPITransmit;
     868:	85 ed       	ldi	r24, 0xD5	; 213
     86a:	98 e0       	ldi	r25, 0x08	; 8
     86c:	90 93 01 01 	sts	0x0101, r25
     870:	80 93 00 01 	sts	0x0100, r24
	
	if (!(DF_CheckCorrectOnboardChip()))
     874:	0e 94 f3 0a 	call	0x15e6 <DF_CheckCorrectOnboardChip>
     878:	88 23       	and	r24, r24
     87a:	09 f4       	brne	.+2      	; 0x87e <FUNCProgramAVR+0x3a>
     87c:	0d c1       	rjmp	.+538    	; 0xa98 <FUNCProgramAVR+0x254>
	  return;

	MAIN_WaitForJoyRelease();
     87e:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
	
	JoyStatus = 1;                            // Use an invalid joystick value to force the program to write the
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	8e bb       	out	0x1e, r24	; 30
	                                          // name of the default command onto the LCD
	while (1)
	{
		if (JoyStatus)
     886:	8e b3       	in	r24, 0x1e	; 30
     888:	88 23       	and	r24, r24
     88a:	e9 f3       	breq	.-6      	; 0x886 <FUNCProgramAVR+0x42>
		{
			if (JoyStatus & JOY_LEFT)
     88c:	f2 99       	sbic	0x1e, 2	; 30
     88e:	04 c1       	rjmp	.+520    	; 0xa98 <FUNCProgramAVR+0x254>
			  return;
			else if (JoyStatus & JOY_PRESS)
     890:	f4 99       	sbic	0x1e, 4	; 30
     892:	1c c0       	rjmp	.+56     	; 0x8cc <FUNCProgramAVR+0x88>
			  break;
			else if (JoyStatus & JOY_UP)
     894:	f6 9b       	sbis	0x1e, 6	; 30
     896:	06 c0       	rjmp	.+12     	; 0x8a4 <FUNCProgramAVR+0x60>
			  (ProgMode == 0)? ProgMode = 6 : ProgMode--;
     898:	11 23       	and	r17, r17
     89a:	11 f4       	brne	.+4      	; 0x8a0 <FUNCProgramAVR+0x5c>
     89c:	16 e0       	ldi	r17, 0x06	; 6
     89e:	09 c0       	rjmp	.+18     	; 0x8b2 <FUNCProgramAVR+0x6e>
     8a0:	11 50       	subi	r17, 0x01	; 1
     8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <FUNCProgramAVR+0x6e>
			else if (JoyStatus & JOY_DOWN)
     8a4:	f7 9b       	sbis	0x1e, 7	; 30
     8a6:	05 c0       	rjmp	.+10     	; 0x8b2 <FUNCProgramAVR+0x6e>
			  (ProgMode == 6)? ProgMode = 0 : ProgMode++;
     8a8:	16 30       	cpi	r17, 0x06	; 6
     8aa:	11 f4       	brne	.+4      	; 0x8b0 <FUNCProgramAVR+0x6c>
     8ac:	10 e0       	ldi	r17, 0x00	; 0
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <FUNCProgramAVR+0x6e>
     8b0:	1f 5f       	subi	r17, 0xFF	; 255

			LCD_puts_f((uint8_t*)pgm_read_word(&ProgOptions[ProgMode])); // Show current function onto the LCD
     8b2:	e1 2f       	mov	r30, r17
     8b4:	ff 27       	eor	r31, r31
     8b6:	ee 0f       	add	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	e3 55       	subi	r30, 0x53	; 83
     8bc:	ff 4f       	sbci	r31, 0xFF	; 255
     8be:	85 91       	lpm	r24, Z+
     8c0:	94 91       	lpm	r25, Z
     8c2:	0e 94 dd 07 	call	0xfba <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     8c6:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     8ca:	dd cf       	rjmp	.-70     	; 0x886 <FUNCProgramAVR+0x42>
		}
	}

	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);                // Orange = busy
     8cc:	81 b3       	in	r24, 0x11	; 17
     8ce:	80 63       	ori	r24, 0x30	; 48
     8d0:	81 bb       	out	0x11, r24	; 17
	LCD_puts_f(WaitText);
     8d2:	85 e2       	ldi	r24, 0x25	; 37
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     8da:	a1 e0       	ldi	r26, 0x01	; 1
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     8de:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
     8e2:	80 2d       	mov	r24, r0
     8e4:	0e 94 20 09 	call	0x1240 <USI_SPIInitMaster>

	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
     8ee:	e7 e4       	ldi	r30, 0x47	; 71
     8f0:	f1 e0       	ldi	r31, 0x01	; 1
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	9b e0       	ldi	r25, 0x0B	; 11
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     8f8:	d9 01       	movw	r26, r18
     8fa:	ad 5d       	subi	r26, 0xDD	; 221
     8fc:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
     8fe:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
     902:	80 2d       	mov	r24, r0
     904:	81 93       	st	Z+, r24
			
	for (uint8_t PacketB = 0; PacketB <= 11; PacketB++) // Read the enter programming mode command bytes
     906:	91 50       	subi	r25, 0x01	; 1
     908:	2f 5f       	subi	r18, 0xFF	; 255
     90a:	3f 4f       	sbci	r19, 0xFF	; 255
     90c:	97 ff       	sbrs	r25, 7
     90e:	f4 cf       	rjmp	.-24     	; 0x8f8 <FUNCProgramAVR+0xb4>
	  PacketBytes[PacketB] = eeprom_read_byte(&EEPROMVars.EnterProgMode[PacketB]);
	
	ISPCC_EnterChipProgrammingMode();    // Try to sync with the slave AVR
     910:	0e 94 30 10 	call	0x2060 <ISPCC_EnterChipProgrammingMode>

	CurrAddress = 0;
     914:	10 92 3e 01 	sts	0x013E, r1
     918:	10 92 3f 01 	sts	0x013F, r1
     91c:	10 92 40 01 	sts	0x0140, r1
     920:	10 92 41 01 	sts	0x0141, r1

	if (PacketBytes[1] == STATUS_CMD_OK) // ISPCC_EnterChipProgrammingMode alters the PacketBytes buffer rather than returning a value
     924:	80 91 48 01 	lds	r24, 0x0148
     928:	88 23       	and	r24, r24
     92a:	09 f0       	breq	.+2      	; 0x92e <FUNCProgramAVR+0xea>
     92c:	a0 c0       	rjmp	.+320    	; 0xa6e <FUNCProgramAVR+0x22a>
	{						
		if ((ProgMode == 6) || (ProgMode == 0) || (ProgMode == 2)) // Erase chip, or program flash mode
     92e:	16 30       	cpi	r17, 0x06	; 6
     930:	21 f0       	breq	.+8      	; 0x93a <FUNCProgramAVR+0xf6>
     932:	11 23       	and	r17, r17
     934:	11 f0       	breq	.+4      	; 0x93a <FUNCProgramAVR+0xf6>
     936:	12 30       	cpi	r17, 0x02	; 2
     938:	91 f4       	brne	.+36     	; 0x95e <FUNCProgramAVR+0x11a>
		{
			MAIN_ShowProgType('C');
     93a:	83 e4       	ldi	r24, 0x43	; 67
     93c:	0e 94 3f 03 	call	0x67e <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     940:	a4 e1       	ldi	r26, 0x14	; 20
     942:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     944:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
     948:	80 2d       	mov	r24, r0
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	31 f0       	breq	.+12     	; 0x95a <FUNCProgramAVR+0x116>
			
			if (!(eeprom_read_byte(&EEPROMVars.EraseCmdStored) == TRUE))
			{
				Fault = ISPCC_FAULT_NOERASE;
     94e:	02 e0       	ldi	r16, 0x02	; 2
				MAIN_ShowError(PSTR("NO ERASE CMD"));
     950:	80 e6       	ldi	r24, 0x60	; 96
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
     958:	02 c0       	rjmp	.+4      	; 0x95e <FUNCProgramAVR+0x11a>
			}
			else
			{
				PM_SendEraseCommand();
     95a:	0e 94 c7 16 	call	0x2d8e <PM_SendEraseCommand>
			}
		}

		if (((ProgMode == 0) || (ProgMode == 2)) && (Fault == ISPCC_NO_FAULT)) // Program flash
     95e:	11 23       	and	r17, r17
     960:	11 f0       	breq	.+4      	; 0x966 <FUNCProgramAVR+0x122>
     962:	12 30       	cpi	r17, 0x02	; 2
     964:	b9 f4       	brne	.+46     	; 0x994 <FUNCProgramAVR+0x150>
     966:	00 23       	and	r16, r16
     968:	a9 f4       	brne	.+42     	; 0x994 <FUNCProgramAVR+0x150>
		{
			MAIN_ShowProgType('D');
     96a:	84 e4       	ldi	r24, 0x44	; 68
     96c:	0e 94 3f 03 	call	0x67e <MAIN_ShowProgType>

			if (!(PM_GetStoredDataSize(TYPE_FLASH))) // Check to make sure a program is present in memory
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	0e 94 30 13 	call	0x2660 <PM_GetStoredDataSize>
     976:	dc 01       	movw	r26, r24
     978:	cb 01       	movw	r24, r22
     97a:	00 97       	sbiw	r24, 0x00	; 0
     97c:	a1 05       	cpc	r26, r1
     97e:	b1 05       	cpc	r27, r1
     980:	31 f4       	brne	.+12     	; 0x98e <FUNCProgramAVR+0x14a>
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     982:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO DATA"));
     984:	8d e6       	ldi	r24, 0x6D	; 109
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
     98c:	03 c0       	rjmp	.+6      	; 0x994 <FUNCProgramAVR+0x150>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_FLASH);
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	0e 94 f6 16 	call	0x2dec <PM_CreateProgrammingPackets>
			}
		}
	
		if ((ProgMode == 1) || (ProgMode == 2)) // Program EEPROM
     994:	81 2f       	mov	r24, r17
     996:	81 50       	subi	r24, 0x01	; 1
     998:	82 30       	cpi	r24, 0x02	; 2
     99a:	a8 f4       	brcc	.+42     	; 0x9c6 <FUNCProgramAVR+0x182>
		{
			MAIN_ShowProgType('E');
     99c:	85 e4       	ldi	r24, 0x45	; 69
     99e:	0e 94 3f 03 	call	0x67e <MAIN_ShowProgType>
				
			if (!(PM_GetStoredDataSize(TYPE_EEPROM))) // Check to make sure EEPROM data is present in memory
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	0e 94 30 13 	call	0x2660 <PM_GetStoredDataSize>
     9a8:	dc 01       	movw	r26, r24
     9aa:	cb 01       	movw	r24, r22
     9ac:	00 97       	sbiw	r24, 0x00	; 0
     9ae:	a1 05       	cpc	r26, r1
     9b0:	b1 05       	cpc	r27, r1
     9b2:	31 f4       	brne	.+12     	; 0x9c0 <FUNCProgramAVR+0x17c>
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     9b4:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO EEPROM"));
     9b6:	85 e7       	ldi	r24, 0x75	; 117
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
     9be:	03 c0       	rjmp	.+6      	; 0x9c6 <FUNCProgramAVR+0x182>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_EEPROM);
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 f6 16 	call	0x2dec <PM_CreateProgrammingPackets>
			}
		}

		if ((ProgMode == 3) || (ProgMode == 5)) // Program Fuse bytes
     9c6:	13 30       	cpi	r17, 0x03	; 3
     9c8:	11 f0       	breq	.+4      	; 0x9ce <FUNCProgramAVR+0x18a>
     9ca:	15 30       	cpi	r17, 0x05	; 5
     9cc:	99 f4       	brne	.+38     	; 0x9f4 <FUNCProgramAVR+0x1b0>
		{
			MAIN_ShowProgType('F');
     9ce:	86 e4       	ldi	r24, 0x46	; 70
     9d0:	0e 94 3f 03 	call	0x67e <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     9d4:	af e2       	ldi	r26, 0x2F	; 47
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     9d8:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
     9dc:	80 2d       	mov	r24, r0
     9de:	88 23       	and	r24, r24
     9e0:	31 f4       	brne	.+12     	; 0x9ee <FUNCProgramAVR+0x1aa>
			
			if (!(eeprom_read_byte(&EEPROMVars.TotalFuseBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     9e2:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO FUSE BYTES"));
     9e4:	8f e7       	ldi	r24, 0x7F	; 127
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
     9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <FUNCProgramAVR+0x1b0>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_FUSE);
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	0e 94 96 16 	call	0x2d2c <PM_SendFuseLockBytes>
			}
		}

		if ((ProgMode == 4) || (ProgMode == 5)) // Program Lock bytes
     9f4:	81 2f       	mov	r24, r17
     9f6:	84 50       	subi	r24, 0x04	; 4
     9f8:	82 30       	cpi	r24, 0x02	; 2
     9fa:	00 f5       	brcc	.+64     	; 0xa3c <FUNCProgramAVR+0x1f8>
		{
			if (ProgMode == 5)                    // If fusebytes have already been written, we need to reenter programming mode to latch them
     9fc:	15 30       	cpi	r17, 0x05	; 5
     9fe:	59 f4       	brne	.+22     	; 0xa16 <FUNCProgramAVR+0x1d2>
			{
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line of the slave AVR
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
				MAIN_Delay10MS(1);
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	0e 94 23 02 	call	0x446 <MAIN_Delay10MS>
				MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
				ISPCC_EnterChipProgrammingMode(); // Try to sync with the slave AVR
     a12:	0e 94 30 10 	call	0x2060 <ISPCC_EnterChipProgrammingMode>
			}

			MAIN_ShowProgType('L');
     a16:	8c e4       	ldi	r24, 0x4C	; 76
     a18:	0e 94 3f 03 	call	0x67e <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     a1c:	a0 e3       	ldi	r26, 0x30	; 48
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     a20:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
     a24:	80 2d       	mov	r24, r0
     a26:	88 23       	and	r24, r24
     a28:	31 f4       	brne	.+12     	; 0xa36 <FUNCProgramAVR+0x1f2>
		
			if (!(eeprom_read_byte(&EEPROMVars.TotalLockBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     a2a:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO LOCK BYTES"));
     a2c:	8d e8       	ldi	r24, 0x8D	; 141
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
     a34:	03 c0       	rjmp	.+6      	; 0xa3c <FUNCProgramAVR+0x1f8>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_LOCK);
     a36:	83 e0       	ldi	r24, 0x03	; 3
     a38:	0e 94 96 16 	call	0x2d2c <PM_SendFuseLockBytes>
			}
		}

		strcpy_P(DoneFailMessageBuff, PSTR("PROGRAMMING DONE"));
     a3c:	6b e9       	ldi	r22, 0x9B	; 155
     a3e:	72 e0       	ldi	r23, 0x02	; 2
     a40:	ce 01       	movw	r24, r28
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	0e 94 6b 19 	call	0x32d6 <strcpy_P>

		if (Fault != ISPCC_NO_FAULT)         // Takes less code to just overwrite part of the string on fail
     a48:	00 23       	and	r16, r16
     a4a:	31 f0       	breq	.+12     	; 0xa58 <FUNCProgramAVR+0x214>
		  strcpy_P(&DoneFailMessageBuff[12], PSTR("FAILED"));
     a4c:	6c ea       	ldi	r22, 0xAC	; 172
     a4e:	72 e0       	ldi	r23, 0x02	; 2
     a50:	ce 01       	movw	r24, r28
     a52:	0d 96       	adiw	r24, 0x0d	; 13
     a54:	0e 94 6b 19 	call	0x32d6 <strcpy_P>

		LCD_puts(DoneFailMessageBuff);
     a58:	ce 01       	movw	r24, r28
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	0e 94 a7 07 	call	0xf4e <LCD_puts>

		MAIN_Delay10MS(255);
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	0e 94 23 02 	call	0x446 <MAIN_Delay10MS>
		MAIN_Delay10MS(100);
     a66:	84 e6       	ldi	r24, 0x64	; 100
     a68:	0e 94 23 02 	call	0x446 <MAIN_Delay10MS>
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <FUNCProgramAVR+0x232>
	}
	else
	{
		MAIN_ShowError(SyncErrorMessage);
     a6e:	80 ed       	ldi	r24, 0xD0	; 208
     a70:	93 e0       	ldi	r25, 0x03	; 3
     a72:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
	}
	
	MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run	
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
	USI_SPIOff();
     a7c:	0e 94 30 09 	call	0x1260 <USI_SPIOff>
	DF_EnableDataflash(FALSE);
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
	SPI_SPIOFF();
     a86:	80 91 64 00 	lds	r24, 0x0064
     a8a:	84 60       	ori	r24, 0x04	; 4
     a8c:	80 93 64 00 	sts	0x0064, r24
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Green = ready
     a90:	81 b3       	in	r24, 0x11	; 17
     a92:	8f 7c       	andi	r24, 0xCF	; 207
     a94:	80 61       	ori	r24, 0x10	; 16
     a96:	81 bb       	out	0x11, r24	; 17
     a98:	63 96       	adiw	r28, 0x13	; 19
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	08 95       	ret

00000aae <FUNCStoreProgram>:
}

void FUNCStoreProgram(void)
{
	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     aae:	85 ed       	ldi	r24, 0xD5	; 213
     ab0:	98 e0       	ldi	r25, 0x08	; 8
     ab2:	90 93 01 01 	sts	0x0101, r25
     ab6:	80 93 00 01 	sts	0x0100, r24
	SPI_SPIInit();
     aba:	0e 94 cb 08 	call	0x1196 <SPI_SPIInit>
	UseExernalDF = FALSE;
     abe:	10 92 61 02 	sts	0x0261, r1
	DF_EnableDataflash(TRUE);
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>

	if (!(DF_CheckCorrectOnboardChip()))
     ac8:	0e 94 f3 0a 	call	0x15e6 <DF_CheckCorrectOnboardChip>
     acc:	88 23       	and	r24, r24
     ace:	01 f1       	breq	.+64     	; 0xb10 <FUNCStoreProgram+0x62>
	  return;
			
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     ad0:	85 e2       	ldi	r24, 0x25	; 37
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
     ad8:	0e 94 14 07 	call	0xe28 <OSCCAL_Calibrate>
     adc:	80 91 c1 00 	lds	r24, 0x00C1
     ae0:	80 78       	andi	r24, 0x80	; 128
     ae2:	88 61       	ori	r24, 0x18	; 24
     ae4:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(PSTR("*STORAGE MODE*"));
     ae8:	83 eb       	ldi	r24, 0xB3	; 179
     aea:	92 e0       	ldi	r25, 0x02	; 2
     aec:	0e 94 dd 07 	call	0xfba <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PM_InterpretAVRISPPacket;
     af0:	8a e4       	ldi	r24, 0x4A	; 74
     af2:	94 e1       	ldi	r25, 0x14	; 20
     af4:	90 93 03 01 	sts	0x0103, r25
     af8:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     afc:	0e 94 cf 0e 	call	0x1d9e <V2P_RunStateMachine>
	DF_EnableDataflash(FALSE);
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
	SPI_SPIOFF();
     b06:	80 91 64 00 	lds	r24, 0x0064
     b0a:	84 60       	ori	r24, 0x04	; 4
     b0c:	80 93 64 00 	sts	0x0064, r24
     b10:	08 95       	ret

00000b12 <FUNCClearMem>:
}

void FUNCClearMem(void)
{
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
	LCD_puts_f(PSTR("CONFIRM"));
     b16:	82 ec       	ldi	r24, 0xC2	; 194
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
	MAIN_Delay10MS(180);
     b1e:	84 eb       	ldi	r24, 0xB4	; 180
     b20:	0e 94 23 02 	call	0x446 <MAIN_Delay10MS>

	LCD_puts_f(PSTR("<N Y>"));
     b24:	8a ec       	ldi	r24, 0xCA	; 202
     b26:	92 e0       	ldi	r25, 0x02	; 2
     b28:	0e 94 dd 07 	call	0xfba <LCD_puts_f>

	while (1)
	{
		if (JoyStatus)
     b2c:	8e b3       	in	r24, 0x1e	; 30
     b2e:	88 23       	and	r24, r24
     b30:	e9 f3       	breq	.-6      	; 0xb2c <FUNCClearMem+0x1a>
		{
			if (JoyStatus & JOY_LEFT)
     b32:	8e b3       	in	r24, 0x1e	; 30
     b34:	99 27       	eor	r25, r25
     b36:	ec 01       	movw	r28, r24
     b38:	c4 70       	andi	r28, 0x04	; 4
     b3a:	d0 70       	andi	r29, 0x00	; 0
     b3c:	82 fd       	sbrc	r24, 2
     b3e:	1a c0       	rjmp	.+52     	; 0xb74 <FUNCClearMem+0x62>
			  return;
			else if (JoyStatus & JOY_RIGHT)
     b40:	f3 9b       	sbis	0x1e, 3	; 30
     b42:	f4 cf       	rjmp	.-24     	; 0xb2c <FUNCClearMem+0x1a>
			  break;
		}
	}

	MAIN_WaitForJoyRelease();
     b44:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>

	LCD_puts_f(WaitText);
     b48:	85 e2       	ldi	r24, 0x25	; 37
     b4a:	92 e0       	ldi	r25, 0x02	; 2
     b4c:	0e 94 dd 07 	call	0xfba <LCD_puts_f>

	for (uint16_t EAddr = 0; EAddr < 512; EAddr++)
     b50:	ce 01       	movw	r24, r28
     b52:	2f ef       	ldi	r18, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     b54:	dc 01       	movw	r26, r24
     b56:	02 2e       	mov	r0, r18
     b58:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	32 e0       	ldi	r19, 0x02	; 2
     b60:	80 30       	cpi	r24, 0x00	; 0
     b62:	93 07       	cpc	r25, r19
     b64:	b8 f3       	brcs	.-18     	; 0xb54 <FUNCClearMem+0x42>
	  eeprom_write_byte((uint8_t*)EAddr, 0xFF);

	LCD_puts_f(PSTR("MEM CLEARED"));
     b66:	80 ed       	ldi	r24, 0xD0	; 208
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
	MAIN_Delay10MS(255);
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	0e 94 23 02 	call	0x446 <MAIN_Delay10MS>
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <FUNCSetContrast>:
}

void FUNCSetContrast(void)
{
     b7a:	ef 92       	push	r14
     b7c:	ff 92       	push	r15
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	26 97       	sbiw	r28, 0x06	; 6
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	de bf       	out	0x3e, r29	; 62
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     b94:	85 e8       	ldi	r24, 0x85	; 133
     b96:	e8 2e       	mov	r14, r24
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	f8 2e       	mov	r15, r24
  uint8_t result;
  asm volatile
     b9c:	d7 01       	movw	r26, r14
     b9e:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
     ba2:	80 2d       	mov	r24, r0
     ba4:	18 2f       	mov	r17, r24
     ba6:	1f 70       	andi	r17, 0x0F	; 15
	uint8_t Buffer[6];
	uint8_t Contrast = (eeprom_read_byte(&EEPROMVars.LCDContrast) & 0x0F); // Ranges from 0-15 so mask retuns 15 on blank EEPROM (0xFF)
	
	JoyStatus = 1;                          // Invalid value to force the LCD to update
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)
     bac:	8e b3       	in	r24, 0x1e	; 30
     bae:	88 23       	and	r24, r24
     bb0:	e9 f3       	breq	.-6      	; 0xbac <FUNCSetContrast+0x32>
		{
			if (JoyStatus & JOY_UP)
     bb2:	f6 9b       	sbis	0x1e, 6	; 30
     bb4:	04 c0       	rjmp	.+8      	; 0xbbe <FUNCSetContrast+0x44>
			{
				if (Contrast < 15)
     bb6:	1f 30       	cpi	r17, 0x0F	; 15
     bb8:	78 f4       	brcc	.+30     	; 0xbd8 <FUNCSetContrast+0x5e>
				  Contrast++;
     bba:	1f 5f       	subi	r17, 0xFF	; 255
     bbc:	0d c0       	rjmp	.+26     	; 0xbd8 <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_DOWN)
     bbe:	f7 9b       	sbis	0x1e, 7	; 30
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <FUNCSetContrast+0x50>
			{
				if (Contrast > 1)          // Zero is non-visible, so 1 is the minimum
     bc2:	12 30       	cpi	r17, 0x02	; 2
     bc4:	48 f0       	brcs	.+18     	; 0xbd8 <FUNCSetContrast+0x5e>
				  Contrast--;
     bc6:	11 50       	subi	r17, 0x01	; 1
     bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_LEFT)
     bca:	f2 9b       	sbis	0x1e, 2	; 30
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <FUNCSetContrast+0x5e>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     bce:	d7 01       	movw	r26, r14
     bd0:	01 2e       	mov	r0, r17
     bd2:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.LCDContrast, Contrast);
				return;
     bd6:	18 c0       	rjmp	.+48     	; 0xc08 <FUNCSetContrast+0x8e>
			}
					
			Buffer[0] = 'C';
     bd8:	83 e4       	ldi	r24, 0x43	; 67
     bda:	89 83       	std	Y+1, r24	; 0x01
			Buffer[1] = 'T';
     bdc:	84 e5       	ldi	r24, 0x54	; 84
     bde:	8a 83       	std	Y+2, r24	; 0x02
			Buffer[2] = ' ';
     be0:	80 e2       	ldi	r24, 0x20	; 32
     be2:	8b 83       	std	Y+3, r24	; 0x03

			MAIN_IntToStr((uint16_t)Contrast, &Buffer[3]);
     be4:	be 01       	movw	r22, r28
     be6:	6c 5f       	subi	r22, 0xFC	; 252
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	81 2f       	mov	r24, r17
     bec:	99 27       	eor	r25, r25
     bee:	0e 94 27 03 	call	0x64e <MAIN_IntToStr>
			LCD_puts(Buffer);
     bf2:	ce 01       	movw	r24, r28
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	0e 94 a7 07 	call	0xf4e <LCD_puts>

			LCD_CONTRAST_LEVEL(Contrast);
     bfa:	81 2f       	mov	r24, r17
     bfc:	8f 70       	andi	r24, 0x0F	; 15
     bfe:	80 93 e7 00 	sts	0x00E7, r24

			MAIN_WaitForJoyRelease();
     c02:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     c06:	d2 cf       	rjmp	.-92     	; 0xbac <FUNCSetContrast+0x32>
     c08:	26 96       	adiw	r28, 0x06	; 6
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	08 95       	ret

00000c20 <FUNCSetISPSpeed>:
		}
	}
}

void FUNCSetISPSpeed(void)
{
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     c26:	01 e0       	ldi	r16, 0x01	; 1
     c28:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t result;
  asm volatile
     c2a:	d8 01       	movw	r26, r16
     c2c:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
     c30:	80 2d       	mov	r24, r0
     c32:	c8 2f       	mov	r28, r24
	uint8_t CurrSpeed = eeprom_read_byte(&EEPROMVars.SCKDuration);

	if (CurrSpeed > (USI_PRESET_SPEEDS - 1)) CurrSpeed = 0; // Protection against blank EEPROM
     c34:	84 30       	cpi	r24, 0x04	; 4
     c36:	08 f0       	brcs	.+2      	; 0xc3a <FUNCSetISPSpeed+0x1a>
     c38:	c0 e0       	ldi	r28, 0x00	; 0

	JoyStatus = 1;                         // Invalid value to force the LCD to update
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     c3e:	8e b3       	in	r24, 0x1e	; 30
     c40:	88 23       	and	r24, r24
     c42:	e9 f3       	breq	.-6      	; 0xc3e <FUNCSetISPSpeed+0x1e>
		{
			if (JoyStatus & JOY_UP)
     c44:	f6 9b       	sbis	0x1e, 6	; 30
     c46:	06 c0       	rjmp	.+12     	; 0xc54 <FUNCSetISPSpeed+0x34>
			{
				(CurrSpeed == 0)? CurrSpeed = (USI_PRESET_SPEEDS - 1) : CurrSpeed--;
     c48:	cc 23       	and	r28, r28
     c4a:	11 f4       	brne	.+4      	; 0xc50 <FUNCSetISPSpeed+0x30>
     c4c:	c3 e0       	ldi	r28, 0x03	; 3
     c4e:	11 c0       	rjmp	.+34     	; 0xc72 <FUNCSetISPSpeed+0x52>
     c50:	c1 50       	subi	r28, 0x01	; 1
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_DOWN)
     c54:	f7 9b       	sbis	0x1e, 7	; 30
     c56:	06 c0       	rjmp	.+12     	; 0xc64 <FUNCSetISPSpeed+0x44>
			{
				(CurrSpeed == (USI_PRESET_SPEEDS - 1))? CurrSpeed = 0 : CurrSpeed++;
     c58:	c3 30       	cpi	r28, 0x03	; 3
     c5a:	11 f4       	brne	.+4      	; 0xc60 <FUNCSetISPSpeed+0x40>
     c5c:	c0 e0       	ldi	r28, 0x00	; 0
     c5e:	09 c0       	rjmp	.+18     	; 0xc72 <FUNCSetISPSpeed+0x52>
     c60:	cf 5f       	subi	r28, 0xFF	; 255
     c62:	07 c0       	rjmp	.+14     	; 0xc72 <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_LEFT)
     c64:	f2 9b       	sbis	0x1e, 2	; 30
     c66:	05 c0       	rjmp	.+10     	; 0xc72 <FUNCSetISPSpeed+0x52>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     c68:	d8 01       	movw	r26, r16
     c6a:	0c 2e       	mov	r0, r28
     c6c:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.SCKDuration, CurrSpeed);
				return;
     c70:	0d c0       	rjmp	.+26     	; 0xc8c <FUNCSetISPSpeed+0x6c>
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&USIPSNamePtrs[CurrSpeed]));
     c72:	ec 2f       	mov	r30, r28
     c74:	ff 27       	eor	r31, r31
     c76:	ee 0f       	add	r30, r30
     c78:	ff 1f       	adc	r31, r31
     c7a:	e3 58       	subi	r30, 0x83	; 131
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	85 91       	lpm	r24, Z+
     c80:	94 91       	lpm	r25, Z
     c82:	0e 94 dd 07 	call	0xfba <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     c86:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     c8a:	d9 cf       	rjmp	.-78     	; 0xc3e <FUNCSetISPSpeed+0x1e>
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	08 95       	ret

00000c94 <FUNCSetFirmMinorVer>:
		}
	}
}

void FUNCSetFirmMinorVer(void)
{
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	25 97       	sbiw	r28, 0x05	; 5
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     cae:	96 e8       	ldi	r25, 0x86	; 134
     cb0:	e9 2e       	mov	r14, r25
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	f9 2e       	mov	r15, r25
  uint8_t result;
  asm volatile
     cb6:	d7 01       	movw	r26, r14
     cb8:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
     cbc:	80 2d       	mov	r24, r0
     cbe:	18 2f       	mov	r17, r24
	uint8_t VerBuffer[5];
	uint8_t VerMinor = eeprom_read_byte(&EEPROMVars.FirmVerMinor);

	if (VerMinor > 0x09)
     cc0:	8a 30       	cpi	r24, 0x0A	; 10
     cc2:	08 f0       	brcs	.+2      	; 0xcc6 <FUNCSetFirmMinorVer+0x32>
	  VerMinor = V2P_SW_VERSION_MINOR_DEFAULT;
     cc4:	14 e0       	ldi	r17, 0x04	; 4
	
	strcpy_P(VerBuffer, PSTR("V2- "));
     cc6:	6c ed       	ldi	r22, 0xDC	; 220
     cc8:	72 e0       	ldi	r23, 0x02	; 2
     cca:	ce 01       	movw	r24, r28
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	0e 94 6b 19 	call	0x32d6 <strcpy_P>

	JoyStatus = 1;                        // Invalid value to force the LCD to update
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     cd6:	8e b3       	in	r24, 0x1e	; 30
     cd8:	88 23       	and	r24, r24
     cda:	e9 f3       	breq	.-6      	; 0xcd6 <FUNCSetFirmMinorVer+0x42>
		{
			if (JoyStatus & JOY_UP)
     cdc:	f6 9b       	sbis	0x1e, 6	; 30
     cde:	05 c0       	rjmp	.+10     	; 0xcea <FUNCSetFirmMinorVer+0x56>
			{
				(VerMinor == 9)? VerMinor = 0 : VerMinor++;
     ce0:	19 30       	cpi	r17, 0x09	; 9
     ce2:	11 f4       	brne	.+4      	; 0xce8 <FUNCSetFirmMinorVer+0x54>
     ce4:	10 e0       	ldi	r17, 0x00	; 0
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <FUNCSetFirmMinorVer+0x56>
     ce8:	1f 5f       	subi	r17, 0xFF	; 255
			}
			if (JoyStatus & JOY_DOWN)
     cea:	f7 9b       	sbis	0x1e, 7	; 30
     cec:	06 c0       	rjmp	.+12     	; 0xcfa <FUNCSetFirmMinorVer+0x66>
			{
				(VerMinor == 0)? VerMinor = 9 : VerMinor--;
     cee:	11 23       	and	r17, r17
     cf0:	11 f4       	brne	.+4      	; 0xcf6 <FUNCSetFirmMinorVer+0x62>
     cf2:	19 e0       	ldi	r17, 0x09	; 9
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <FUNCSetFirmMinorVer+0x74>
     cf6:	11 50       	subi	r17, 0x01	; 1
     cf8:	07 c0       	rjmp	.+14     	; 0xd08 <FUNCSetFirmMinorVer+0x74>
			}
			else if (JoyStatus & JOY_LEFT)
     cfa:	f2 9b       	sbis	0x1e, 2	; 30
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <FUNCSetFirmMinorVer+0x74>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     cfe:	d7 01       	movw	r26, r14
     d00:	01 2e       	mov	r0, r17
     d02:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.FirmVerMinor, VerMinor);
				return;
     d06:	0a c0       	rjmp	.+20     	; 0xd1c <FUNCSetFirmMinorVer+0x88>
			}
			
			VerBuffer[3] = ('0' + VerMinor);
     d08:	10 5d       	subi	r17, 0xD0	; 208
     d0a:	1c 83       	std	Y+4, r17	; 0x04
     d0c:	10 53       	subi	r17, 0x30	; 48
			LCD_puts(VerBuffer);
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	0e 94 a7 07 	call	0xf4e <LCD_puts>

			MAIN_WaitForJoyRelease();
     d16:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     d1a:	dd cf       	rjmp	.-70     	; 0xcd6 <FUNCSetFirmMinorVer+0x42>
     d1c:	25 96       	adiw	r28, 0x05	; 5
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	08 95       	ret

00000d34 <FUNCSleepMode>:
		}
	}	
}

void FUNCSleepMode(void)
{
	SMCR    = ((1 << SM1) | (1 << SE));    // Power down sleep mode
     d34:	85 e0       	ldi	r24, 0x05	; 5
     d36:	83 bf       	out	0x33, r24	; 51
	LCDCRA &= ~(1 << LCDEN); 
     d38:	80 91 e4 00 	lds	r24, 0x00E4
     d3c:	8f 77       	andi	r24, 0x7F	; 127
     d3e:	80 93 e4 00 	sts	0x00E4, r24
	
	while (!(JoyStatus & JOY_UP))         // Joystick interrupt wakes the micro
	  SLEEP();
     d42:	f6 99       	sbic	0x1e, 6	; 30
     d44:	03 c0       	rjmp	.+6      	; 0xd4c <FUNCSleepMode+0x18>
     d46:	88 95       	sleep
     d48:	f6 9b       	sbis	0x1e, 6	; 30
     d4a:	fd cf       	rjmp	.-6      	; 0xd46 <FUNCSleepMode+0x12>
	   
	LCDCRA |= (1 << LCDEN);
     d4c:	80 91 e4 00 	lds	r24, 0x00E4
     d50:	80 68       	ori	r24, 0x80	; 128
     d52:	80 93 e4 00 	sts	0x00E4, r24
	
	MAIN_WaitForJoyRelease();
     d56:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     d5a:	08 95       	ret

00000d5c <FUNCStorageInfo>:
}

void FUNCStorageInfo(void)
{
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
	uint8_t SelectedItem = 0;
     d60:	10 e0       	ldi	r17, 0x00	; 0

	MAIN_WaitForJoyRelease();
     d62:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>

	JoyStatus = 1;                        // Invalid value to force the LCD to update
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     d6a:	8e b3       	in	r24, 0x1e	; 30
     d6c:	88 23       	and	r24, r24
     d6e:	e9 f3       	breq	.-6      	; 0xd6a <FUNCStorageInfo+0xe>
		{
			if (JoyStatus & (JOY_UP | JOY_DOWN))
     d70:	ce b3       	in	r28, 0x1e	; 30
     d72:	c0 7c       	andi	r28, 0xC0	; 192
     d74:	19 f0       	breq	.+6      	; 0xd7c <FUNCStorageInfo+0x20>
			{
				SelectedItem ^= 1;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	18 27       	eor	r17, r24
     d7a:	38 c0       	rjmp	.+112    	; 0xdec <FUNCStorageInfo+0x90>
			}
			else if (JoyStatus & JOY_LEFT)
     d7c:	f2 99       	sbic	0x1e, 2	; 30
     d7e:	43 c0       	rjmp	.+134    	; 0xe06 <FUNCStorageInfo+0xaa>
			{
				return;
			}
			else if (JoyStatus & JOY_PRESS)
     d80:	f4 9b       	sbis	0x1e, 4	; 30
     d82:	34 c0       	rjmp	.+104    	; 0xdec <FUNCStorageInfo+0x90>
			{
				if (SelectedItem == 1)    // View storage tags
     d84:	11 30       	cpi	r17, 0x01	; 1
     d86:	81 f5       	brne	.+96     	; 0xde8 <FUNCStorageInfo+0x8c>
				{
					DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     d88:	85 ed       	ldi	r24, 0xD5	; 213
     d8a:	98 e0       	ldi	r25, 0x08	; 8
     d8c:	90 93 01 01 	sts	0x0101, r25
     d90:	80 93 00 01 	sts	0x0100, r24
					SPI_SPIInit();
     d94:	0e 94 cb 08 	call	0x1196 <SPI_SPIInit>
					UseExernalDF = FALSE;
     d98:	c0 93 61 02 	sts	0x0261, r28
					DF_EnableDataflash(TRUE);
     d9c:	81 2f       	mov	r24, r17
     d9e:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>

					if (DF_CheckCorrectOnboardChip())
     da2:	0e 94 f3 0a 	call	0x15e6 <DF_CheckCorrectOnboardChip>
     da6:	c8 2f       	mov	r28, r24
     da8:	88 23       	and	r24, r24
     daa:	41 f0       	breq	.+16     	; 0xdbc <FUNCStorageInfo+0x60>
					{
						TM_ShowTags();
     dac:	0e 94 3d 19 	call	0x327a <TM_ShowTags>
						SPI_SPIOFF();
     db0:	80 91 64 00 	lds	r24, 0x0064
     db4:	84 60       	ori	r24, 0x04	; 4
     db6:	80 93 64 00 	sts	0x0064, r24
     dba:	18 c0       	rjmp	.+48     	; 0xdec <FUNCStorageInfo+0x90>
					}
					else if (!(PM_GetStoredDataSize(TYPE_FLASH)))
     dbc:	81 2f       	mov	r24, r17
     dbe:	0e 94 30 13 	call	0x2660 <PM_GetStoredDataSize>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	a1 05       	cpc	r26, r1
     dca:	b1 05       	cpc	r27, r1
     dcc:	79 f4       	brne	.+30     	; 0xdec <FUNCStorageInfo+0x90>
					{
						DF_EnableDataflash(FALSE);
     dce:	8c 2f       	mov	r24, r28
     dd0:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
						SPI_SPIOFF();
     dd4:	80 91 64 00 	lds	r24, 0x0064
     dd8:	84 60       	ori	r24, 0x04	; 4
     dda:	80 93 64 00 	sts	0x0064, r24

						MAIN_ShowError(PSTR("NO STORED PRGM"));
     dde:	81 ee       	ldi	r24, 0xE1	; 225
     de0:	92 e0       	ldi	r25, 0x02	; 2
     de2:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
     de6:	02 c0       	rjmp	.+4      	; 0xdec <FUNCStorageInfo+0x90>
					}	
				}
				else                      // View stored data sizes
				{
					PM_ShowStoredItemSizes();
     de8:	0e 94 18 18 	call	0x3030 <PM_ShowStoredItemSizes>
				}
			}
			
			LCD_puts_f((uint8_t*)pgm_read_word(&SIFOOptionPtrs[SelectedItem]));
     dec:	e1 2f       	mov	r30, r17
     dee:	ff 27       	eor	r31, r31
     df0:	ee 0f       	add	r30, r30
     df2:	ff 1f       	adc	r31, r31
     df4:	e4 5a       	subi	r30, 0xA4	; 164
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	85 91       	lpm	r24, Z+
     dfa:	94 91       	lpm	r25, Z
     dfc:	0e 94 dd 07 	call	0xfba <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     e00:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     e04:	b2 cf       	rjmp	.-156    	; 0xd6a <FUNCStorageInfo+0xe>
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	08 95       	ret

00000e0c <FUNCGoBootloader>:
		}
	}
}

void FUNCGoBootloader(void)
{
	uint8_t MD = (MCUCR & ~(1 << JTD));   // Forces compiler to use IN, AND plus two OUTs rather than two lots of IN/AND/OUTs
     e0c:	85 b7       	in	r24, 0x35	; 53
     e0e:	8f 77       	andi	r24, 0x7F	; 127
	MCUCR = MD;                           // Turn on JTAG via code
     e10:	85 bf       	out	0x35, r24	; 53
	MCUCR = MD;                           // Set bit twice as specified in datasheet        
     e12:	85 bf       	out	0x35, r24	; 53
	
	LCD_puts_f(PSTR("*JTAG ON*"));
     e14:	80 ef       	ldi	r24, 0xF0	; 240
     e16:	92 e0       	ldi	r25, 0x02	; 2
     e18:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
	
	MAIN_WaitForJoyRelease();
     e1c:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
	
	WDTCR = ((1<<WDCE) | (1<<WDE));       // Enable Watchdog Timer to give reset after minimum timeout
     e20:	88 e1       	ldi	r24, 0x18	; 24
     e22:	80 93 60 00 	sts	0x0060, r24
	while (1) {};                        // Eternal loop - when watchdog resets the AVR it will enter the bootloader
     e26:	ff cf       	rjmp	.-2      	; 0xe26 <FUNCGoBootloader+0x1a>

00000e28 <OSCCAL_Calibrate>:

static volatile uint16_t ActualCount;

void OSCCAL_Calibrate(void)
{
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
	uint8_t SREG_Backup;
	uint8_t LoopCount = (0x7F / 2); // Maximum range is 128, and starts from the middle, so 64 is the max number of iterations required
     e2c:	4f e3       	ldi	r20, 0x3F	; 63
	uint8_t PrevOSCALValues[2];
   
	// Reset ActualCount
	ActualCount = 0;
     e2e:	10 92 05 01 	sts	0x0105, r1
     e32:	10 92 04 01 	sts	0x0104, r1
   
	// Make sure all clock division is turned off (8Mhz RC clock)
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_8MHZ);
     e36:	80 e8       	ldi	r24, 0x80	; 128
     e38:	80 93 61 00 	sts	0x0061, r24
     e3c:	10 92 61 00 	sts	0x0061, r1

	// Inital OSCCAL of half its maximum for speed
	OSCCAL = (0x7F / 2);
     e40:	40 93 66 00 	sts	0x0066, r20

	// Save the SREG
	SREG_Backup = SREG;
     e44:	5f b7       	in	r21, 0x3f	; 63
    
	// Disable all timer 1 interrupts
	TIMSK1 = 0;
     e46:	10 92 6f 00 	sts	0x006F, r1
        
	// Set timer 2 to asyncronous mode (32.768KHz crystal)
	ASSR   = (1 << AS2);
     e4a:	88 e0       	ldi	r24, 0x08	; 8
     e4c:	80 93 b6 00 	sts	0x00B6, r24
        
	// Timer 2 overflow interrupt enable
	TIMSK2 = (1 << TOIE2);
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	80 93 70 00 	sts	0x0070, r24

	// Enable interrupts
	sei();
     e56:	78 94       	sei

	// Start both counters with no prescaling
	TCCR1B = (1 << CS10);
     e58:	80 93 81 00 	sts	0x0081, r24
	TCCR2A = (1 << CS20);
     e5c:	80 93 b0 00 	sts	0x00B0, r24
	 	 
	// Previous OSCCAL value of 0
	PrevOSCALValues[0] = 0;
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0

	// Wait until timer 2's external 32.768KHz crystal is stable
	while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB) | (1 << OCR2UB)));
     e64:	80 91 b6 00 	lds	r24, 0x00B6
     e68:	99 27       	eor	r25, r25
     e6a:	87 70       	andi	r24, 0x07	; 7
     e6c:	90 70       	andi	r25, 0x00	; 0
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	c9 f7       	brne	.-14     	; 0xe64 <OSCCAL_Calibrate+0x3c>
    
	// Clear the timer values
	TCNT1  = 0;
     e72:	90 93 85 00 	sts	0x0085, r25
     e76:	80 93 84 00 	sts	0x0084, r24
	TCNT2  = 0;
     e7a:	10 92 b2 00 	sts	0x00B2, r1
    
	while (LoopCount--)
	{
		// Let it take a few readings (14ms, approx 2 readings)
		_delay_ms(14);

		PrevOSCALValues[1] = PrevOSCALValues[0];
		PrevOSCALValues[0] = OSCCAL;
        
		if (ActualCount > OSCCAL_UPPERCOUNTBOUND)       // Clock is running too fast
			OSCCAL--;
		else if (ActualCount < OSCCAL_LOWERCOUNTBOUND) // Clock is running too slow
			OSCCAL++;
		else		                                     // Clock is just right
			break;
		
		// If the routine cannot find a value withing the count tollerance,
		// it will cause the OSCCAL to hover around the closest two values.
		// If the current value is the same as the 2*n previous, exit the
		// routine as the best value has been found.
		if (OSCCAL == PrevOSCALValues[1])
		  break;
     e7e:	4e e3       	ldi	r20, 0x3E	; 62
     e80:	ac ec       	ldi	r26, 0xCC	; 204
     e82:	b4 e6       	ldi	r27, 0x64	; 100
     e84:	c0 e0       	ldi	r28, 0x00	; 0
     e86:	d0 e0       	ldi	r29, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e88:	cd 01       	movw	r24, r26
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <OSCCAL_Calibrate+0x62>
     e8e:	32 2f       	mov	r19, r18
     e90:	80 91 66 00 	lds	r24, 0x0066
     e94:	28 2f       	mov	r18, r24
     e96:	80 91 04 01 	lds	r24, 0x0104
     e9a:	90 91 05 01 	lds	r25, 0x0105
     e9e:	81 50       	subi	r24, 0x01	; 1
     ea0:	91 4e       	sbci	r25, 0xE1	; 225
     ea2:	20 f0       	brcs	.+8      	; 0xeac <OSCCAL_Calibrate+0x84>
     ea4:	80 91 66 00 	lds	r24, 0x0066
     ea8:	81 50       	subi	r24, 0x01	; 1
     eaa:	0a c0       	rjmp	.+20     	; 0xec0 <OSCCAL_Calibrate+0x98>
     eac:	80 91 04 01 	lds	r24, 0x0104
     eb0:	90 91 05 01 	lds	r25, 0x0105
     eb4:	86 5f       	subi	r24, 0xF6	; 246
     eb6:	90 4e       	sbci	r25, 0xE0	; 224
     eb8:	58 f4       	brcc	.+22     	; 0xed0 <OSCCAL_Calibrate+0xa8>
     eba:	80 91 66 00 	lds	r24, 0x0066
     ebe:	8f 5f       	subi	r24, 0xFF	; 255
     ec0:	80 93 66 00 	sts	0x0066, r24
     ec4:	80 91 66 00 	lds	r24, 0x0066
     ec8:	83 17       	cp	r24, r19
     eca:	11 f0       	breq	.+4      	; 0xed0 <OSCCAL_Calibrate+0xa8>
     ecc:	41 50       	subi	r20, 0x01	; 1
     ece:	e0 f6       	brcc	.-72     	; 0xe88 <OSCCAL_Calibrate+0x60>
	}

	// Disable all timer interrupts
	TIMSK1 = 0;
     ed0:	10 92 6f 00 	sts	0x006F, r1
	TIMSK2 = 0;
     ed4:	10 92 70 00 	sts	0x0070, r1
    
	// Stop the timers
	TCCR1B = 0x00;
     ed8:	10 92 81 00 	sts	0x0081, r1
	TCCR2A = 0x00;
     edc:	10 92 b0 00 	sts	0x00B0, r1

	// Turn off timer 2 asynchronous mode
	ASSR  &= ~(1 << AS2);
     ee0:	80 91 b6 00 	lds	r24, 0x00B6
     ee4:	87 7f       	andi	r24, 0xF7	; 247
     ee6:	80 93 b6 00 	sts	0x00B6, r24

	// Restore SREG
	SREG = SREG_Backup;
     eea:	5f bf       	out	0x3f, r21	; 63
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	08 95       	ret

00000ef2 <__vector_5>:
        
	return;
}

ISR(TIMER2_OVF_vect, ISR_BLOCK) // Occurs 32768/256 timers per second, or 128Hz
{
     ef2:	1f 92       	push	r1
     ef4:	0f 92       	push	r0
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	0f 92       	push	r0
     efa:	11 24       	eor	r1, r1
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
	// Stop timer 1 so it can be read
	TCCR1B = 0x00;
     f00:	10 92 81 00 	sts	0x0081, r1
    
	// Record timer 1's value
	ActualCount = TCNT1;
     f04:	80 91 84 00 	lds	r24, 0x0084
     f08:	90 91 85 00 	lds	r25, 0x0085
     f0c:	90 93 05 01 	sts	0x0105, r25
     f10:	80 93 04 01 	sts	0x0104, r24
	     
	// Reset counters and restart timer 1
	TCNT1  = 0;
     f14:	10 92 85 00 	sts	0x0085, r1
     f18:	10 92 84 00 	sts	0x0084, r1
	TCNT2  = 0;
     f1c:	10 92 b2 00 	sts	0x00B2, r1
	TCCR1B = (1 << CS10);
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	80 93 81 00 	sts	0x0081, r24
     f26:	9f 91       	pop	r25
     f28:	8f 91       	pop	r24
     f2a:	0f 90       	pop	r0
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	0f 90       	pop	r0
     f30:	1f 90       	pop	r1
     f32:	18 95       	reti

00000f34 <LCD_Init>:

void LCD_Init(void)
{
	// Set the initial contrast level to maximum:
	LCDCCR = 0x0F;
     f34:	8f e0       	ldi	r24, 0x0F	; 15
     f36:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all segment pins:
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
     f3a:	87 eb       	ldi	r24, 0xB7	; 183
     f3c:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32Hz:
    LCDFRR  = (7<<LCDCD0);    
     f40:	87 e0       	ldi	r24, 0x07	; 7
     f42:	80 93 e6 00 	sts	0x00E6, r24

	// Enable LCD and set low power waveform, enable start of frame interrupt:
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB) | (1<<LCDIE);
     f46:	88 ec       	ldi	r24, 0xC8	; 200
     f48:	80 93 e4 00 	sts	0x00E4, r24
     f4c:	08 95       	ret

00000f4e <LCD_puts>:
}

void LCD_puts_f(const uint8_t *FlashData)
{
	uint8_t StrBuff[LCD_TEXTBUFFER_SIZE];

	strcpy_P(StrBuff, FlashData);
	LCD_puts(StrBuff);
}

void LCD_puts(const uint8_t *Data)
{
     f4e:	dc 01       	movw	r26, r24
	uint8_t LoadB;
	
	for (LoadB = 0; LoadB < 20; LoadB++)
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	e6 e0       	ldi	r30, 0x06	; 6
     f56:	f1 e0       	ldi	r31, 0x01	; 1
	{
		uint8_t CByte = *(Data++);
     f58:	9d 91       	ld	r25, X+
	
		if ((CByte >= '*') && (CByte <= 'z') && (CByte != ' '))
     f5a:	89 2f       	mov	r24, r25
     f5c:	8a 52       	subi	r24, 0x2A	; 42
     f5e:	81 35       	cpi	r24, 0x51	; 81
     f60:	10 f4       	brcc	.+4      	; 0xf66 <LCD_puts+0x18>
		  TextBuffer[LoadB] = (CByte - '*');
     f62:	80 83       	st	Z, r24
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <LCD_puts+0x1e>
		else if (CByte == 0x00)
     f66:	99 23       	and	r25, r25
     f68:	29 f0       	breq	.+10     	; 0xf74 <LCD_puts+0x26>
		  break;
		else
		  TextBuffer[LoadB] = 0xFF;		
     f6a:	30 83       	st	Z, r19
     f6c:	2f 5f       	subi	r18, 0xFF	; 255
     f6e:	31 96       	adiw	r30, 0x01	; 1
     f70:	24 31       	cpi	r18, 0x14	; 20
     f72:	90 f3       	brcs	.-28     	; 0xf58 <LCD_puts+0xa>
	}

	ScrollMode  = ((LoadB > 6)? TRUE : FALSE);
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	27 30       	cpi	r18, 0x07	; 7
     f78:	08 f0       	brcs	.+2      	; 0xf7c <LCD_puts+0x2e>
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	80 93 37 01 	sts	0x0137, r24
	ScrollCount = 0;
     f80:	10 92 38 01 	sts	0x0138, r1
     f84:	9f ef       	ldi	r25, 0xFF	; 255
     f86:	86 e0       	ldi	r24, 0x06	; 6

	for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
		TextBuffer[LoadB++] = 0xFF;
     f88:	e2 2f       	mov	r30, r18
     f8a:	ff 27       	eor	r31, r31
     f8c:	ea 5f       	subi	r30, 0xFA	; 250
     f8e:	fe 4f       	sbci	r31, 0xFE	; 254
     f90:	90 83       	st	Z, r25
     f92:	2f 5f       	subi	r18, 0xFF	; 255
     f94:	81 50       	subi	r24, 0x01	; 1
     f96:	87 ff       	sbrs	r24, 7
     f98:	f7 cf       	rjmp	.-18     	; 0xf88 <LCD_puts+0x3a>
	
	TextBuffer[LoadB] = 0x00;
     f9a:	e2 2f       	mov	r30, r18
     f9c:	ff 27       	eor	r31, r31
     f9e:	ea 5f       	subi	r30, 0xFA	; 250
     fa0:	fe 4f       	sbci	r31, 0xFE	; 254
     fa2:	10 82       	st	Z, r1
	StrStart   = 0;
     fa4:	10 92 35 01 	sts	0x0135, r1
	StrEnd     = LoadB;	
     fa8:	20 93 36 01 	sts	0x0136, r18
	DelayCount = LCD_DELAYCOUNT_DEFAULT;
     fac:	8a e0       	ldi	r24, 0x0A	; 10
     fae:	80 93 39 01 	sts	0x0139, r24

	UpdateLCD  = TRUE;
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 3a 01 	sts	0x013A, r24
     fb8:	08 95       	ret

00000fba <LCD_puts_f>:
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	64 97       	sbiw	r28, 0x14	; 20
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	bc 01       	movw	r22, r24
     fd0:	ce 01       	movw	r24, r28
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	0e 94 6b 19 	call	0x32d6 <strcpy_P>
     fd8:	ce 01       	movw	r24, r28
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	0e 94 a7 07 	call	0xf4e <LCD_puts>
     fe0:	64 96       	adiw	r28, 0x14	; 20
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	08 95       	ret

00000ff2 <LCD_WriteChar>:
}

void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit)
{
     ff2:	e8 2f       	mov	r30, r24
	uint16_t SegData  = 0x00;
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1));
     ff8:	86 2f       	mov	r24, r22
     ffa:	86 95       	lsr	r24
     ffc:	a8 2f       	mov	r26, r24
     ffe:	bb 27       	eor	r27, r27
    1000:	af 5d       	subi	r26, 0xDF	; 223
    1002:	be 4f       	sbci	r27, 0xFE	; 254

	if (Byte != 0xFF)
    1004:	ef 3f       	cpi	r30, 0xFF	; 255
    1006:	39 f0       	breq	.+14     	; 0x1016 <LCD_WriteChar+0x24>
	  SegData = pgm_read_word(&LCD_SegTable[Byte]);	
    1008:	ff 27       	eor	r31, r31
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	e6 50       	subi	r30, 0x06	; 6
    1010:	fd 4f       	sbci	r31, 0xFD	; 253
    1012:	25 91       	lpm	r18, Z+
    1014:	34 91       	lpm	r19, Z
    1016:	77 27       	eor	r23, r23
    1018:	61 70       	andi	r22, 0x01	; 1
    101a:	70 70       	andi	r23, 0x00	; 0
    101c:	43 e0       	ldi	r20, 0x03	; 3

	for (uint8_t BNib = 0; BNib < 4; BNib++)
	{
		uint8_t Mask          = 0xF0;
    101e:	50 ef       	ldi	r21, 0xF0	; 240
		uint8_t MaskedSegData = (SegData & 0x0000F);
    1020:	92 2f       	mov	r25, r18
    1022:	9f 70       	andi	r25, 0x0F	; 15
	
		if (Digit & 0x01)
    1024:	61 15       	cp	r22, r1
    1026:	71 05       	cpc	r23, r1
    1028:	19 f0       	breq	.+6      	; 0x1030 <LCD_WriteChar+0x3e>
		{
			Mask = 0x0F;
    102a:	5f e0       	ldi	r21, 0x0F	; 15
			MaskedSegData <<= 4;
    102c:	92 95       	swap	r25
    102e:	90 7f       	andi	r25, 0xF0	; 240
		}
		
		*BuffPtr = ((*BuffPtr & Mask) | MaskedSegData);
    1030:	8c 91       	ld	r24, X
    1032:	85 23       	and	r24, r21
    1034:	89 2b       	or	r24, r25
    1036:	8c 93       	st	X, r24

		SegData >>= 4;
    1038:	84 e0       	ldi	r24, 0x04	; 4
    103a:	36 95       	lsr	r19
    103c:	27 95       	ror	r18
    103e:	8a 95       	dec	r24
    1040:	e1 f7       	brne	.-8      	; 0x103a <LCD_WriteChar+0x48>
		BuffPtr  += 5;
    1042:	15 96       	adiw	r26, 0x05	; 5
    1044:	41 50       	subi	r20, 0x01	; 1
    1046:	47 ff       	sbrs	r20, 7
    1048:	ea cf       	rjmp	.-44     	; 0x101e <LCD_WriteChar+0x2c>
    104a:	08 95       	ret

0000104c <__vector_22>:
	}
}

ISR(LCD_vect, ISR_NOBLOCK)
{
    104c:	78 94       	sei
    104e:	1f 92       	push	r1
    1050:	0f 92       	push	r0
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	0f 92       	push	r0
    1056:	11 24       	eor	r1, r1
    1058:	2f 93       	push	r18
    105a:	3f 93       	push	r19
    105c:	4f 93       	push	r20
    105e:	5f 93       	push	r21
    1060:	6f 93       	push	r22
    1062:	7f 93       	push	r23
    1064:	8f 93       	push	r24
    1066:	9f 93       	push	r25
    1068:	af 93       	push	r26
    106a:	bf 93       	push	r27
    106c:	cf 93       	push	r28
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
	if (ScrollMode)
    1072:	80 91 37 01 	lds	r24, 0x0137
    1076:	88 23       	and	r24, r24
    1078:	99 f0       	breq	.+38     	; 0x10a0 <__vector_22+0x54>
	{
		if (DelayCount)
    107a:	80 91 39 01 	lds	r24, 0x0139
    107e:	88 23       	and	r24, r24
    1080:	21 f0       	breq	.+8      	; 0x108a <__vector_22+0x3e>
		{
			DelayCount--;
    1082:	81 50       	subi	r24, 0x01	; 1
    1084:	80 93 39 01 	sts	0x0139, r24
    1088:	0b c0       	rjmp	.+22     	; 0x10a0 <__vector_22+0x54>
		}
		else
		{
			if (!(ScrollCount))
    108a:	80 91 38 01 	lds	r24, 0x0138
    108e:	88 23       	and	r24, r24
    1090:	21 f4       	brne	.+8      	; 0x109a <__vector_22+0x4e>
			  UpdateLCD = TRUE;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	80 93 3a 01 	sts	0x013A, r24
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <__vector_22+0x54>
			else
			  ScrollCount--;
    109a:	81 50       	subi	r24, 0x01	; 1
    109c:	80 93 38 01 	sts	0x0138, r24
		}
	}

	if (UpdateLCD)
    10a0:	80 91 3a 01 	lds	r24, 0x013A
    10a4:	88 23       	and	r24, r24
    10a6:	39 f1       	breq	.+78     	; 0x10f6 <__vector_22+0xaa>
	{
		for (uint8_t Character = 0; Character < 6; Character++)
    10a8:	c0 e0       	ldi	r28, 0x00	; 0
		{
			uint8_t Byte = (StrStart + Character);
    10aa:	80 91 35 01 	lds	r24, 0x0135
    10ae:	8c 0f       	add	r24, r28

			if (Byte >= StrEnd)
    10b0:	90 91 36 01 	lds	r25, 0x0136
    10b4:	e8 2f       	mov	r30, r24
    10b6:	ff 27       	eor	r31, r31
    10b8:	89 17       	cp	r24, r25
    10ba:	10 f0       	brcs	.+4      	; 0x10c0 <__vector_22+0x74>
			  Byte = TextBuffer[Byte - StrEnd];
    10bc:	e9 1b       	sub	r30, r25
    10be:	f1 09       	sbc	r31, r1
			else
			  Byte = TextBuffer[Byte];
    10c0:	ea 5f       	subi	r30, 0xFA	; 250
    10c2:	fe 4f       	sbci	r31, 0xFE	; 254
    10c4:	80 81       	ld	r24, Z
			
			LCD_WriteChar(Byte, Character);
    10c6:	6c 2f       	mov	r22, r28
    10c8:	0e 94 f9 07 	call	0xff2 <LCD_WriteChar>
    10cc:	cf 5f       	subi	r28, 0xFF	; 255
    10ce:	c6 30       	cpi	r28, 0x06	; 6
    10d0:	60 f3       	brcs	.-40     	; 0x10aa <__vector_22+0x5e>
		}
		
		if (StrStart++ == StrEnd)
    10d2:	80 91 35 01 	lds	r24, 0x0135
    10d6:	98 2f       	mov	r25, r24
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
    10da:	80 93 35 01 	sts	0x0135, r24
    10de:	80 91 36 01 	lds	r24, 0x0136
    10e2:	98 17       	cp	r25, r24
    10e4:	19 f4       	brne	.+6      	; 0x10ec <__vector_22+0xa0>
		  StrStart = 1;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	80 93 35 01 	sts	0x0135, r24
		
		ScrollCount = LCD_SCROLLCOUNT_DEFAULT;
    10ec:	83 e0       	ldi	r24, 0x03	; 3
    10ee:	80 93 38 01 	sts	0x0138, r24
		UpdateLCD = FALSE;
    10f2:	10 92 3a 01 	sts	0x013A, r1
    10f6:	ac ee       	ldi	r26, 0xEC	; 236
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e1 e2       	ldi	r30, 0x21	; 33
    10fc:	f1 e0       	ldi	r31, 0x01	; 1
    10fe:	93 e1       	ldi	r25, 0x13	; 19
	}

	for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++)
	  *(pLCDREG + LCDChar) = SegBuffer[LCDChar];
    1100:	81 91       	ld	r24, Z+
    1102:	8d 93       	st	X+, r24
    1104:	91 50       	subi	r25, 0x01	; 1
    1106:	97 ff       	sbrs	r25, 7
    1108:	fb cf       	rjmp	.-10     	; 0x1100 <__vector_22+0xb4>
    110a:	ff 91       	pop	r31
    110c:	ef 91       	pop	r30
    110e:	cf 91       	pop	r28
    1110:	bf 91       	pop	r27
    1112:	af 91       	pop	r26
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	7f 91       	pop	r23
    111a:	6f 91       	pop	r22
    111c:	5f 91       	pop	r21
    111e:	4f 91       	pop	r20
    1120:	3f 91       	pop	r19
    1122:	2f 91       	pop	r18
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <USART_Init>:
*****************************************************************************/
void USART_Init(void)
{
    // Set baud rate
    UBRRH = (uint8_t)(USART_BAUDVALUE >> 8);
    112e:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = (uint8_t)(USART_BAUDVALUE);
    1132:	87 e0       	ldi	r24, 0x07	; 7
    1134:	80 93 c4 00 	sts	0x00C4, r24

    // Double speed
	UCSRA = (USART_DOUBLESPEED << U2X);
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	80 93 c0 00 	sts	0x00C0, r24

    // Enable recieve complete interrupt
	UCSRB = (1 << RXCIE);
    113e:	80 e8       	ldi	r24, 0x80	; 128
    1140:	80 93 c1 00 	sts	0x00C1, r24
	 
    // Async. mode, 8N1
    UCSRC = (3 << UCSZ0);
    1144:	86 e0       	ldi	r24, 0x06	; 6
    1146:	80 93 c2 00 	sts	0x00C2, r24
	 
	 // Initalise ringbuffer
	BUFF_InitialiseBuffer();
    114a:	0e 94 56 0b 	call	0x16ac <BUFF_InitialiseBuffer>
    114e:	08 95       	ret

00001150 <USART_Tx>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_Tx(const char data)
{
    1150:	98 2f       	mov	r25, r24
    while (!(UCSRA & (1 << UDRE)));
    1152:	80 91 c0 00 	lds	r24, 0x00C0
    1156:	85 ff       	sbrs	r24, 5
    1158:	fc cf       	rjmp	.-8      	; 0x1152 <USART_Tx+0x2>
    UDR = data;
    115a:	90 93 c6 00 	sts	0x00C6, r25
    115e:	08 95       	ret

00001160 <USART_TxString>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_TxString(const char *data)
{
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	ec 01       	movw	r28, r24
	while (*data != '\0')
	  USART_Tx(*data++);
    1166:	88 81       	ld	r24, Y
    1168:	88 23       	and	r24, r24
    116a:	31 f0       	breq	.+12     	; 0x1178 <USART_TxString+0x18>
    116c:	89 91       	ld	r24, Y+
    116e:	0e 94 a8 08 	call	0x1150 <USART_Tx>
    1172:	88 81       	ld	r24, Y
    1174:	88 23       	and	r24, r24
    1176:	d1 f7       	brne	.-12     	; 0x116c <USART_TxString+0xc>
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	08 95       	ret

0000117e <USART_Rx>:
}

/*****************************************************************************
*
*   Function name : Usart_Rx
*
*   Returns :       char: byte received
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART
*
*****************************************************************************/
char USART_Rx(void)
{
    while (!(BuffElements) && !(TimeOut)) {};
    117e:	80 91 af 02 	lds	r24, 0x02AF
    1182:	88 23       	and	r24, r24
    1184:	21 f4       	brne	.+8      	; 0x118e <USART_Rx+0x10>
    1186:	80 91 3b 01 	lds	r24, 0x013B
    118a:	88 23       	and	r24, r24
    118c:	c1 f3       	breq	.-16     	; 0x117e <USART_Rx>
    return BUFF_GetBuffByte();
    118e:	0e 94 63 0b 	call	0x16c6 <BUFF_GetBuffByte>
}
    1192:	99 27       	eor	r25, r25
    1194:	08 95       	ret

00001196 <SPI_SPIInit>:
// ======================================================================================

void SPI_SPIInit(void)
{
	PRR &= ~(1 << PRSPI);              // Enable the SPI system by clearing the power save register SPI disable bit
    1196:	80 91 64 00 	lds	r24, 0x0064
    119a:	8b 7f       	andi	r24, 0xFB	; 251
    119c:	80 93 64 00 	sts	0x0064, r24

	// Master, Sample falling edge (setup rising), Fosc/2 speed (8Mhz/2 = 4MHz)
	SPSR = (1 << SPI2X);
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	8d bd       	out	0x2d, r24	; 45
	SPCR = ((1 << SPE) | (1 << MSTR) | (1 << CPHA) | (1 << CPOL));
    11a4:	8c e5       	ldi	r24, 0x5C	; 92
    11a6:	8c bd       	out	0x2c, r24	; 44
    11a8:	08 95       	ret

000011aa <SPI_SPITransmit>:
}

uint8_t SPI_SPITransmit(const uint8_t Data)
{
	SPDR = Data;                       // Loading a byte into the register starts the transmission
    11aa:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));    // Wait until transmission completed
    11ac:	0d b4       	in	r0, 0x2d	; 45
    11ae:	07 fe       	sbrs	r0, 7
    11b0:	fd cf       	rjmp	.-6      	; 0x11ac <SPI_SPITransmit+0x2>
	return SPDR;
    11b2:	8e b5       	in	r24, 0x2e	; 46
}
    11b4:	99 27       	eor	r25, r25
    11b6:	08 95       	ret

000011b8 <SPI_SPITransmitWord>:

uint8_t SPI_SPITransmitWord(const uint16_t Data)
{
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	8c 01       	movw	r16, r24
	SPI_SPITransmit((uint8_t)(Data >> 8));
    11be:	81 2f       	mov	r24, r17
    11c0:	99 27       	eor	r25, r25
    11c2:	0e 94 d5 08 	call	0x11aa <SPI_SPITransmit>
	return SPI_SPITransmit((uint8_t)Data);
    11c6:	80 2f       	mov	r24, r16
    11c8:	0e 94 d5 08 	call	0x11aa <SPI_SPITransmit>
}
    11cc:	99 27       	eor	r25, r25
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	08 95       	ret

000011d4 <__vector_17>:
 *  have to stop the timer tick.
 *  For all modes the USIDR contents are stored and flags are updated.
 */
ISR(USI_OVERFLOW_vect, ISR_BLOCK)
{
    11d4:	1f 92       	push	r1
    11d6:	0f 92       	push	r0
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	0f 92       	push	r0
    11dc:	11 24       	eor	r1, r1
    11de:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	TIMSK0 &= ~(1<<OCIE0A);
    11e0:	80 91 6e 00 	lds	r24, 0x006E
    11e4:	8d 7f       	andi	r24, 0xFD	; 253
    11e6:	80 93 6e 00 	sts	0x006E, r24
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
    11ea:	80 e4       	ldi	r24, 0x40	; 64
    11ec:	80 93 b9 00 	sts	0x00B9, r24
	TransferComplete = 1;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	80 93 5f 02 	sts	0x025F, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
    11f6:	80 91 ba 00 	lds	r24, 0x00BA
    11fa:	80 93 60 02 	sts	0x0260, r24
    11fe:	8f 91       	pop	r24
    1200:	0f 90       	pop	r0
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	0f 90       	pop	r0
    1206:	1f 90       	pop	r1
    1208:	18 95       	reti

0000120a <USI_SPISetSpeed>:
}



/*! \brief  Initialize USI as SPI master.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from slave to master mode.
 *  Note that the stored USIDR value is cleared.
 *
 */
void USI_SPIInitMaster(const uint8_t Freq)
{
	// Configure port directions.
 	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN);  // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                       // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                        // Pull-ups.
	USI_OUT_REG &= ~(1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Pull-ups.
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = USI_CONTROL_REG_FLAGS;

	// Set the compare and prescaler for the requested frequency:
	USI_SPISetSpeed(Freq);
	
	// Init driver status register.
	TransferComplete = 0;
	
	storedUSIDR = 0;
}

void USI_SPIOff(void)
{
	USI_DIR_REG &= ~((1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN));                        // Inputs.
	USI_OUT_REG &= ~((1<<USI_DATAIN_PIN)  | (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN)); // Pull-ups.
	DDRF  &= ~(1 << 6);
	PORTF &= ~(1 << 6);
	
	USI_STOPUSITIMER();
}

/*! \brief  Put one byte on bus.
 *
 *  Use this function like you would write to the SPDR register in the native SPI module.
 *  Calling this function in master mode starts a transfer, while in slave mode, a
 *  byte will be prepared for the next transfer initiated by the master device.
 *  If a transfer is in progress, this function will set the write collision flag
 *  and return without altering the data registers.
 *
 *  \returns  0 if a write collision occurred, 1 otherwise.
 */
uint8_t USI_SPITransmit(uint8_t val)
{
	// Reinit flags.
	TransferComplete = 0;

	// Put data in USI data register.
	USIDR = val;
	
	TIFR0  |= (1<<OCF0A);  // Clear compare match flag.
	TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.

	// Clear the timer 0 value
	TCNT0 = 0;

	while (!(TransferComplete));

	return storedUSIDR;
}

uint8_t USI_SPITransmitWord(const uint16_t val )
{
	USI_SPITransmit((uint8_t)(val >> 8));
	return USI_SPITransmit((uint8_t)val);
}

void USI_SPIToggleClock(void)
{
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);	
}

void USI_SPISetSpeed(const uint8_t Freq)
{
    120a:	48 2f       	mov	r20, r24
	for (uint8_t MatchIndex = 0; MatchIndex < USI_PRESET_SPEEDS; MatchIndex++)
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	67 e6       	ldi	r22, 0x67	; 103
    1210:	73 e0       	ldi	r23, 0x03	; 3
    1212:	9b 01       	movw	r18, r22
    1214:	21 50       	subi	r18, 0x01	; 1
    1216:	30 40       	sbci	r19, 0x00	; 0
	{
		if ((pgm_read_byte(&USIPSValues[MatchIndex][0]) == Freq) || (MatchIndex == (USI_PRESET_SPEEDS - 1)))
    1218:	f9 01       	movw	r30, r18
    121a:	84 91       	lpm	r24, Z
    121c:	84 17       	cp	r24, r20
    121e:	11 f0       	breq	.+4      	; 0x1224 <USI_SPISetSpeed+0x1a>
    1220:	93 30       	cpi	r25, 0x03	; 3
    1222:	31 f4       	brne	.+12     	; 0x1230 <USI_SPISetSpeed+0x26>
		{
			// Init Output Compare Register.
			OCR0A = pgm_read_byte(&USIPSValues[MatchIndex][1]);
    1224:	fb 01       	movw	r30, r22
    1226:	84 91       	lpm	r24, Z
    1228:	87 bd       	out	0x27, r24	; 39

			// Enable 'Clear Timer on Compare match' and set prescaler, which starts the timer
			TCCR0A = ((1<<WGM01) | TC0_PS_1);
    122a:	89 e0       	ldi	r24, 0x09	; 9
    122c:	84 bd       	out	0x24, r24	; 36
				
			return;
    122e:	08 95       	ret
    1230:	9f 5f       	subi	r25, 0xFF	; 255
    1232:	2e 5f       	subi	r18, 0xFE	; 254
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
    1236:	6e 5f       	subi	r22, 0xFE	; 254
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	94 30       	cpi	r25, 0x04	; 4
    123c:	68 f3       	brcs	.-38     	; 0x1218 <USI_SPISetSpeed+0xe>
    123e:	08 95       	ret

00001240 <USI_SPIInitMaster>:
    1240:	9d b1       	in	r25, 0x0d	; 13
    1242:	90 65       	ori	r25, 0x50	; 80
    1244:	9d b9       	out	0x0d, r25	; 13
    1246:	6d 98       	cbi	0x0d, 5	; 13
    1248:	75 9a       	sbi	0x0e, 5	; 14
    124a:	76 98       	cbi	0x0e, 6	; 14
    124c:	9a e5       	ldi	r25, 0x5A	; 90
    124e:	90 93 b8 00 	sts	0x00B8, r25
    1252:	0e 94 05 09 	call	0x120a <USI_SPISetSpeed>
    1256:	10 92 5f 02 	sts	0x025F, r1
    125a:	10 92 60 02 	sts	0x0260, r1
    125e:	08 95       	ret

00001260 <USI_SPIOff>:
    1260:	8d b1       	in	r24, 0x0d	; 13
    1262:	8f 7a       	andi	r24, 0xAF	; 175
    1264:	8d b9       	out	0x0d, r24	; 13
    1266:	8e b1       	in	r24, 0x0e	; 14
    1268:	8f 78       	andi	r24, 0x8F	; 143
    126a:	8e b9       	out	0x0e, r24	; 14
    126c:	86 98       	cbi	0x10, 6	; 16
    126e:	8e 98       	cbi	0x11, 6	; 17
    1270:	14 bc       	out	0x24, r1	; 36
    1272:	08 95       	ret

00001274 <USI_SPITransmit>:
    1274:	10 92 5f 02 	sts	0x025F, r1
    1278:	80 93 ba 00 	sts	0x00BA, r24
    127c:	a9 9a       	sbi	0x15, 1	; 21
    127e:	80 91 6e 00 	lds	r24, 0x006E
    1282:	82 60       	ori	r24, 0x02	; 2
    1284:	80 93 6e 00 	sts	0x006E, r24
    1288:	16 bc       	out	0x26, r1	; 38
    128a:	80 91 5f 02 	lds	r24, 0x025F
    128e:	88 23       	and	r24, r24
    1290:	e1 f3       	breq	.-8      	; 0x128a <USI_SPITransmit+0x16>
    1292:	80 91 60 02 	lds	r24, 0x0260
    1296:	99 27       	eor	r25, r25
    1298:	08 95       	ret

0000129a <USI_SPITransmitWord>:
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	8c 01       	movw	r16, r24
    12a0:	81 2f       	mov	r24, r17
    12a2:	99 27       	eor	r25, r25
    12a4:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    12a8:	80 2f       	mov	r24, r16
    12aa:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    12ae:	99 27       	eor	r25, r25
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <USI_SPIToggleClock>:
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    12bc:	80 91 b8 00 	lds	r24, 0x00B8
    12c0:	81 60       	ori	r24, 0x01	; 1
    12c2:	80 93 b8 00 	sts	0x00B8, r24
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    12cc:	80 91 b8 00 	lds	r24, 0x00B8
    12d0:	81 60       	ori	r24, 0x01	; 1
    12d2:	80 93 b8 00 	sts	0x00B8, r24
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    12dc:	08 95       	ret

000012de <DF_EnableDataflash>:
	DF_WaitWhileBusy();
}

void DF_EnableDataflash(const uint8_t Enabled)
{
    12de:	90 91 61 02 	lds	r25, 0x0261
	if (Enabled == TRUE)
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	31 f4       	brne	.+12     	; 0x12f2 <DF_EnableDataflash+0x14>
	{
		if (UseExernalDF == TRUE)
    12e6:	91 30       	cpi	r25, 0x01	; 1
    12e8:	11 f4       	brne	.+4      	; 0x12ee <DF_EnableDataflash+0x10>
		  MAIN_ResetCSLine(MAIN_RESETCS_EXTDFACTIVE);
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	05 c0       	rjmp	.+10     	; 0x12f8 <DF_EnableDataflash+0x1a>
		else
		  PORTB &= ~(1 << 0);
    12ee:	28 98       	cbi	0x05, 0	; 5
    12f0:	08 95       	ret
	}
	else
	{
		if (UseExernalDF == TRUE)
    12f2:	91 30       	cpi	r25, 0x01	; 1
    12f4:	21 f4       	brne	.+8      	; 0x12fe <DF_EnableDataflash+0x20>
		  MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE);
    12f6:	89 2f       	mov	r24, r25
    12f8:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
    12fc:	08 95       	ret
		else
		  PORTB |= (1 << 0);
    12fe:	28 9a       	sbi	0x05, 0	; 5
    1300:	08 95       	ret

00001302 <DF_ReadBufferByte>:
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	8c 01       	movw	r16, r24
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    1314:	e0 91 00 01 	lds	r30, 0x0100
    1318:	f0 91 01 01 	lds	r31, 0x0101
    131c:	84 e5       	ldi	r24, 0x54	; 84
    131e:	09 95       	icall
    1320:	81 2f       	mov	r24, r17
    1322:	99 27       	eor	r25, r25
    1324:	e0 91 00 01 	lds	r30, 0x0100
    1328:	f0 91 01 01 	lds	r31, 0x0101
    132c:	09 95       	icall
    132e:	e0 91 00 01 	lds	r30, 0x0100
    1332:	f0 91 01 01 	lds	r31, 0x0101
    1336:	80 2f       	mov	r24, r16
    1338:	09 95       	icall
    133a:	e0 91 00 01 	lds	r30, 0x0100
    133e:	f0 91 01 01 	lds	r31, 0x0101
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	09 95       	icall
    1346:	e0 91 00 01 	lds	r30, 0x0100
    134a:	f0 91 01 01 	lds	r31, 0x0101
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	09 95       	icall
    1352:	99 27       	eor	r25, r25
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	08 95       	ret

0000135a <DF_ContinuousReadEnable>:
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	8c 01       	movw	r16, r24
    1364:	7b 01       	movw	r14, r22
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    1372:	e0 91 00 01 	lds	r30, 0x0100
    1376:	f0 91 01 01 	lds	r31, 0x0101
    137a:	88 e6       	ldi	r24, 0x68	; 104
    137c:	09 95       	icall
    137e:	8a b5       	in	r24, 0x2a	; 42
    1380:	98 01       	movw	r18, r16
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DF_ContinuousReadEnable+0x2e>
    1384:	36 95       	lsr	r19
    1386:	27 95       	ror	r18
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DF_ContinuousReadEnable+0x2a>
    138c:	c9 01       	movw	r24, r18
    138e:	e0 91 00 01 	lds	r30, 0x0100
    1392:	f0 91 01 01 	lds	r31, 0x0101
    1396:	09 95       	icall
    1398:	8b b5       	in	r24, 0x2b	; 43
    139a:	98 01       	movw	r18, r16
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DF_ContinuousReadEnable+0x48>
    139e:	22 0f       	add	r18, r18
    13a0:	33 1f       	adc	r19, r19
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DF_ContinuousReadEnable+0x44>
    13a6:	8f 2d       	mov	r24, r15
    13a8:	99 27       	eor	r25, r25
    13aa:	e0 91 00 01 	lds	r30, 0x0100
    13ae:	f0 91 01 01 	lds	r31, 0x0101
    13b2:	82 0f       	add	r24, r18
    13b4:	09 95       	icall
    13b6:	e0 91 00 01 	lds	r30, 0x0100
    13ba:	f0 91 01 01 	lds	r31, 0x0101
    13be:	8e 2d       	mov	r24, r14
    13c0:	09 95       	icall
    13c2:	03 e0       	ldi	r16, 0x03	; 3
    13c4:	e0 91 00 01 	lds	r30, 0x0100
    13c8:	f0 91 01 01 	lds	r31, 0x0101
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	09 95       	icall
    13d0:	01 50       	subi	r16, 0x01	; 1
    13d2:	07 ff       	sbrs	r16, 7
    13d4:	f7 cf       	rjmp	.-18     	; 0x13c4 <DF_ContinuousReadEnable+0x6a>
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	ff 90       	pop	r15
    13dc:	ef 90       	pop	r14
    13de:	08 95       	ret

000013e0 <DF_BufferWriteEnable>:
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	8c 01       	movw	r16, r24
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    13f2:	e0 91 00 01 	lds	r30, 0x0100
    13f6:	f0 91 01 01 	lds	r31, 0x0101
    13fa:	84 e8       	ldi	r24, 0x84	; 132
    13fc:	09 95       	icall
    13fe:	e0 91 00 01 	lds	r30, 0x0100
    1402:	f0 91 01 01 	lds	r31, 0x0101
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	09 95       	icall
    140a:	81 2f       	mov	r24, r17
    140c:	99 27       	eor	r25, r25
    140e:	e0 91 00 01 	lds	r30, 0x0100
    1412:	f0 91 01 01 	lds	r31, 0x0101
    1416:	09 95       	icall
    1418:	e0 91 00 01 	lds	r30, 0x0100
    141c:	f0 91 01 01 	lds	r31, 0x0101
    1420:	80 2f       	mov	r24, r16
    1422:	09 95       	icall
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	08 95       	ret

0000142a <DF_WaitWhileBusy>:
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    1436:	e0 91 00 01 	lds	r30, 0x0100
    143a:	f0 91 01 01 	lds	r31, 0x0101
    143e:	87 e5       	ldi	r24, 0x57	; 87
    1440:	09 95       	icall
    1442:	e0 91 00 01 	lds	r30, 0x0100
    1446:	f0 91 01 01 	lds	r31, 0x0101
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	09 95       	icall
    144e:	88 23       	and	r24, r24
    1450:	c4 f7       	brge	.-16     	; 0x1442 <DF_WaitWhileBusy+0x18>
    1452:	08 95       	ret

00001454 <DF_EraseBlock>:
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	8c 01       	movw	r16, r24
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    1466:	e0 91 00 01 	lds	r30, 0x0100
    146a:	f0 91 01 01 	lds	r31, 0x0101
    146e:	80 e5       	ldi	r24, 0x50	; 80
    1470:	09 95       	icall
    1472:	81 2f       	mov	r24, r17
    1474:	99 27       	eor	r25, r25
    1476:	e0 91 00 01 	lds	r30, 0x0100
    147a:	f0 91 01 01 	lds	r31, 0x0101
    147e:	09 95       	icall
    1480:	e0 91 00 01 	lds	r30, 0x0100
    1484:	f0 91 01 01 	lds	r31, 0x0101
    1488:	80 2f       	mov	r24, r16
    148a:	09 95       	icall
    148c:	e0 91 00 01 	lds	r30, 0x0100
    1490:	f0 91 01 01 	lds	r31, 0x0101
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	09 95       	icall
    1498:	0e 94 15 0a 	call	0x142a <DF_WaitWhileBusy>
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	08 95       	ret

000014a2 <DF_CopyFlashPageToBuffer>:
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	8c 01       	movw	r16, r24
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    14b4:	e0 91 00 01 	lds	r30, 0x0100
    14b8:	f0 91 01 01 	lds	r31, 0x0101
    14bc:	83 e5       	ldi	r24, 0x53	; 83
    14be:	09 95       	icall
    14c0:	8a b5       	in	r24, 0x2a	; 42
    14c2:	98 01       	movw	r18, r16
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <DF_CopyFlashPageToBuffer+0x28>
    14c6:	36 95       	lsr	r19
    14c8:	27 95       	ror	r18
    14ca:	8a 95       	dec	r24
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <DF_CopyFlashPageToBuffer+0x24>
    14ce:	c9 01       	movw	r24, r18
    14d0:	e0 91 00 01 	lds	r30, 0x0100
    14d4:	f0 91 01 01 	lds	r31, 0x0101
    14d8:	09 95       	icall
    14da:	8b b5       	in	r24, 0x2b	; 43
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <DF_CopyFlashPageToBuffer+0x40>
    14de:	00 0f       	add	r16, r16
    14e0:	11 1f       	adc	r17, r17
    14e2:	8a 95       	dec	r24
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <DF_CopyFlashPageToBuffer+0x3c>
    14e6:	c8 01       	movw	r24, r16
    14e8:	e0 91 00 01 	lds	r30, 0x0100
    14ec:	f0 91 01 01 	lds	r31, 0x0101
    14f0:	09 95       	icall
    14f2:	e0 91 00 01 	lds	r30, 0x0100
    14f6:	f0 91 01 01 	lds	r31, 0x0101
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	09 95       	icall
    14fe:	0e 94 15 0a 	call	0x142a <DF_WaitWhileBusy>
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	08 95       	ret

00001508 <DF_CopyBufferToFlashPage>:
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	8c 01       	movw	r16, r24
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    151a:	e0 91 00 01 	lds	r30, 0x0100
    151e:	f0 91 01 01 	lds	r31, 0x0101
    1522:	83 e8       	ldi	r24, 0x83	; 131
    1524:	09 95       	icall
    1526:	8a b5       	in	r24, 0x2a	; 42
    1528:	98 01       	movw	r18, r16
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DF_CopyBufferToFlashPage+0x28>
    152c:	36 95       	lsr	r19
    152e:	27 95       	ror	r18
    1530:	8a 95       	dec	r24
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DF_CopyBufferToFlashPage+0x24>
    1534:	c9 01       	movw	r24, r18
    1536:	e0 91 00 01 	lds	r30, 0x0100
    153a:	f0 91 01 01 	lds	r31, 0x0101
    153e:	09 95       	icall
    1540:	8b b5       	in	r24, 0x2b	; 43
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DF_CopyBufferToFlashPage+0x40>
    1544:	00 0f       	add	r16, r16
    1546:	11 1f       	adc	r17, r17
    1548:	8a 95       	dec	r24
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DF_CopyBufferToFlashPage+0x3c>
    154c:	c8 01       	movw	r24, r16
    154e:	e0 91 00 01 	lds	r30, 0x0100
    1552:	f0 91 01 01 	lds	r31, 0x0101
    1556:	09 95       	icall
    1558:	e0 91 00 01 	lds	r30, 0x0100
    155c:	f0 91 01 01 	lds	r31, 0x0101
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	09 95       	icall
    1564:	0e 94 15 0a 	call	0x142a <DF_WaitWhileBusy>
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	08 95       	ret

0000156e <DF_GetChipCharacteristics>:
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    157a:	e0 91 00 01 	lds	r30, 0x0100
    157e:	f0 91 01 01 	lds	r31, 0x0101
    1582:	87 e5       	ldi	r24, 0x57	; 87
    1584:	09 95       	icall
    1586:	e0 91 00 01 	lds	r30, 0x0100
    158a:	f0 91 01 01 	lds	r31, 0x0101
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	09 95       	icall
    1592:	99 27       	eor	r25, r25
    1594:	88 73       	andi	r24, 0x38	; 56
    1596:	90 70       	andi	r25, 0x00	; 0
    1598:	43 e0       	ldi	r20, 0x03	; 3
    159a:	95 95       	asr	r25
    159c:	87 95       	ror	r24
    159e:	4a 95       	dec	r20
    15a0:	e1 f7       	brne	.-8      	; 0x159a <DF_GetChipCharacteristics+0x2c>
    15a2:	99 27       	eor	r25, r25
    15a4:	fc 01       	movw	r30, r24
    15a6:	e2 56       	subi	r30, 0x62	; 98
    15a8:	fc 4f       	sbci	r31, 0xFC	; 252
    15aa:	44 91       	lpm	r20, Z
    15ac:	40 93 64 02 	sts	0x0264, r20
    15b0:	9c 01       	movw	r18, r24
    15b2:	28 0f       	add	r18, r24
    15b4:	39 1f       	adc	r19, r25
    15b6:	f9 01       	movw	r30, r18
    15b8:	e2 57       	subi	r30, 0x72	; 114
    15ba:	fc 4f       	sbci	r31, 0xFC	; 252
    15bc:	85 91       	lpm	r24, Z+
    15be:	94 91       	lpm	r25, Z
    15c0:	90 93 66 02 	sts	0x0266, r25
    15c4:	80 93 65 02 	sts	0x0265, r24
    15c8:	f9 01       	movw	r30, r18
    15ca:	e2 58       	subi	r30, 0x82	; 130
    15cc:	fc 4f       	sbci	r31, 0xFC	; 252
    15ce:	85 91       	lpm	r24, Z+
    15d0:	94 91       	lpm	r25, Z
    15d2:	90 93 68 02 	sts	0x0268, r25
    15d6:	80 93 67 02 	sts	0x0267, r24
    15da:	80 e1       	ldi	r24, 0x10	; 16
    15dc:	84 1b       	sub	r24, r20
    15de:	8a bd       	out	0x2a, r24	; 42
    15e0:	48 50       	subi	r20, 0x08	; 8
    15e2:	4b bd       	out	0x2b, r20	; 43
    15e4:	08 95       	ret

000015e6 <DF_CheckCorrectOnboardChip>:
    15e6:	0e 94 b7 0a 	call	0x156e <DF_GetChipCharacteristics>
    15ea:	80 91 67 02 	lds	r24, 0x0267
    15ee:	90 91 68 02 	lds	r25, 0x0268
    15f2:	80 50       	subi	r24, 0x00	; 0
    15f4:	98 40       	sbci	r25, 0x08	; 8
    15f6:	61 f0       	breq	.+24     	; 0x1610 <DF_CheckCorrectOnboardChip+0x2a>
    15f8:	80 91 64 00 	lds	r24, 0x0064
    15fc:	84 60       	ori	r24, 0x04	; 4
    15fe:	80 93 64 00 	sts	0x0064, r24
    1602:	8e e6       	ldi	r24, 0x6E	; 110
    1604:	93 e0       	ldi	r25, 0x03	; 3
    1606:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	08 95       	ret
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	08 95       	ret

00001616 <__vector_13>:

// ======================================================================================

ISR(USART0_RX_vect, ISR_BLOCK)
{
    1616:	1f 92       	push	r1
    1618:	0f 92       	push	r0
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	0f 92       	push	r0
    161e:	11 24       	eor	r1, r1
    1620:	2f 93       	push	r18
    1622:	3f 93       	push	r19
    1624:	4f 93       	push	r20
    1626:	5f 93       	push	r21
    1628:	6f 93       	push	r22
    162a:	7f 93       	push	r23
    162c:	8f 93       	push	r24
    162e:	9f 93       	push	r25
    1630:	af 93       	push	r26
    1632:	bf 93       	push	r27
    1634:	ef 93       	push	r30
    1636:	ff 93       	push	r31
	if (BuffElements == BuffLen)          // Buffer full
    1638:	80 91 af 02 	lds	r24, 0x02AF
    163c:	80 34       	cpi	r24, 0x40	; 64
    163e:	29 f4       	brne	.+10     	; 0x164a <__vector_13+0x34>
	{
		MAIN_ShowError(PSTR("BUFF OVERFLOW"));
    1640:	86 ea       	ldi	r24, 0xA6	; 166
    1642:	93 e0       	ldi	r25, 0x03	; 3
    1644:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
		return;
    1648:	20 c0       	rjmp	.+64     	; 0x168a <__vector_13+0x74>
	}
		
	*StoreLoc = UDR;                      // Store the data
    164a:	e0 91 ab 02 	lds	r30, 0x02AB
    164e:	f0 91 ac 02 	lds	r31, 0x02AC
    1652:	80 91 c6 00 	lds	r24, 0x00C6
    1656:	80 83       	st	Z, r24

	StoreLoc++;                           // Increment the IN pointer to the next element
    1658:	40 91 ab 02 	lds	r20, 0x02AB
    165c:	50 91 ac 02 	lds	r21, 0x02AC
    1660:	9a 01       	movw	r18, r20
    1662:	2f 5f       	subi	r18, 0xFF	; 255
    1664:	3f 4f       	sbci	r19, 0xFF	; 255
    1666:	30 93 ac 02 	sts	0x02AC, r19
    166a:	20 93 ab 02 	sts	0x02AB, r18
	BuffElements++;                       // Increment the total elements variable
    166e:	80 91 af 02 	lds	r24, 0x02AF
    1672:	8f 5f       	subi	r24, 0xFF	; 255
    1674:	80 93 af 02 	sts	0x02AF, r24

	if (StoreLoc == (BuffType*)&RingBuffer[BuffLen])
    1678:	2b 5a       	subi	r18, 0xAB	; 171
    167a:	32 40       	sbci	r19, 0x02	; 2
    167c:	31 f4       	brne	.+12     	; 0x168a <__vector_13+0x74>
		StoreLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    167e:	4f 53       	subi	r20, 0x3F	; 63
    1680:	50 40       	sbci	r21, 0x00	; 0
    1682:	50 93 ac 02 	sts	0x02AC, r21
    1686:	40 93 ab 02 	sts	0x02AB, r20
    168a:	ff 91       	pop	r31
    168c:	ef 91       	pop	r30
    168e:	bf 91       	pop	r27
    1690:	af 91       	pop	r26
    1692:	9f 91       	pop	r25
    1694:	8f 91       	pop	r24
    1696:	7f 91       	pop	r23
    1698:	6f 91       	pop	r22
    169a:	5f 91       	pop	r21
    169c:	4f 91       	pop	r20
    169e:	3f 91       	pop	r19
    16a0:	2f 91       	pop	r18
    16a2:	0f 90       	pop	r0
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	0f 90       	pop	r0
    16a8:	1f 90       	pop	r1
    16aa:	18 95       	reti

000016ac <BUFF_InitialiseBuffer>:
}	

// ======================================================================================

void BUFF_InitialiseBuffer(void)
{
	StoreLoc    = (BuffType*)&RingBuffer[0]; // Set up the IN pointer to the start of the buffer
    16ac:	8b e6       	ldi	r24, 0x6B	; 107
    16ae:	92 e0       	ldi	r25, 0x02	; 2
    16b0:	90 93 ac 02 	sts	0x02AC, r25
    16b4:	80 93 ab 02 	sts	0x02AB, r24
	RetrieveLoc = (BuffType*)&RingBuffer[0]; // Set up the OUT pointer to the start of the buffer
    16b8:	90 93 ae 02 	sts	0x02AE, r25
    16bc:	80 93 ad 02 	sts	0x02AD, r24

	BuffElements = 0;                     // Reset the buffer elements counter
    16c0:	10 92 af 02 	sts	0x02AF, r1
    16c4:	08 95       	ret

000016c6 <BUFF_GetBuffByte>:
}

BuffType BUFF_GetBuffByte(void)
{
	if (!(BuffElements))                  // No elements in the buffer
    16c6:	80 91 af 02 	lds	r24, 0x02AF
    16ca:	88 23       	and	r24, r24
    16cc:	19 f4       	brne	.+6      	; 0x16d4 <BUFF_GetBuffByte+0xe>
		return 0;
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	08 95       	ret

	BuffType RetrievedData = *RetrieveLoc; // Grab the stored byte into a temp variable
    16d4:	20 91 ad 02 	lds	r18, 0x02AD
    16d8:	30 91 ae 02 	lds	r19, 0x02AE
    16dc:	f9 01       	movw	r30, r18
    16de:	91 91       	ld	r25, Z+

	RetrieveLoc++;                         // Increment the OUT pointer to the next element if flag set
    16e0:	f0 93 ae 02 	sts	0x02AE, r31
    16e4:	e0 93 ad 02 	sts	0x02AD, r30
	BuffElements--;                        // Decrement the total elements variable
    16e8:	80 91 af 02 	lds	r24, 0x02AF
    16ec:	81 50       	subi	r24, 0x01	; 1
    16ee:	80 93 af 02 	sts	0x02AF, r24
	
	if (RetrieveLoc == (BuffType*)&RingBuffer[BuffLen])
    16f2:	eb 5a       	subi	r30, 0xAB	; 171
    16f4:	f2 40       	sbci	r31, 0x02	; 2
    16f6:	31 f4       	brne	.+12     	; 0x1704 <BUFF_GetBuffByte+0x3e>
		RetrieveLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    16f8:	2f 53       	subi	r18, 0x3F	; 63
    16fa:	30 40       	sbci	r19, 0x00	; 0
    16fc:	30 93 ae 02 	sts	0x02AE, r19
    1700:	20 93 ad 02 	sts	0x02AD, r18
		
	return RetrievedData;                 // Return the retrieved data
    1704:	89 2f       	mov	r24, r25
    1706:	99 27       	eor	r25, r25
}
    1708:	08 95       	ret

0000170a <__vector_4>:
// ======================================================================================

// Timeout = ((F_CPU / 1024) / (240 * TIMEOUT_TICKSBEFORETIMEOUT)) per second
ISR(TIMER2_COMP_vect, ISR_NOBLOCK)
{
    170a:	78 94       	sei
    170c:	1f 92       	push	r1
    170e:	0f 92       	push	r0
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	0f 92       	push	r0
    1714:	11 24       	eor	r1, r1
    1716:	8f 93       	push	r24
	if (Ticks++ == TIMEOUT_TICKSBEFORETIMEOUT)
    1718:	80 91 3c 01 	lds	r24, 0x013C
    171c:	8f 5f       	subi	r24, 0xFF	; 255
    171e:	80 93 3c 01 	sts	0x013C, r24
    1722:	80 91 3c 01 	lds	r24, 0x013C
    1726:	87 39       	cpi	r24, 0x97	; 151
    1728:	29 f4       	brne	.+10     	; 0x1734 <__vector_4+0x2a>
	{
	   Ticks   = 0;
    172a:	10 92 3c 01 	sts	0x013C, r1
	   TimeOut = TRUE;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	80 93 3b 01 	sts	0x013B, r24
    1734:	8f 91       	pop	r24
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	0f 90       	pop	r0
    173c:	1f 90       	pop	r1
    173e:	18 95       	reti

00001740 <PD_SetupDFAddressCounters>:
}

void PD_SetupDFAddressCounters(void)
{
	uint32_t StartAddress = CurrAddress;
    1740:	20 91 3e 01 	lds	r18, 0x013E
    1744:	30 91 3f 01 	lds	r19, 0x013F
    1748:	40 91 40 01 	lds	r20, 0x0140
    174c:	50 91 41 01 	lds	r21, 0x0141

	CurrPageAddress = 0;
    1750:	10 92 6a 02 	sts	0x026A, r1
    1754:	10 92 69 02 	sts	0x0269, r1

	while (StartAddress > DataflashInfo.PageSize)      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DataflashInfo.PageSize;         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    1758:	80 91 65 02 	lds	r24, 0x0265
    175c:	90 91 66 02 	lds	r25, 0x0266
    1760:	aa 27       	eor	r26, r26
    1762:	bb 27       	eor	r27, r27
    1764:	82 17       	cp	r24, r18
    1766:	93 07       	cpc	r25, r19
    1768:	a4 07       	cpc	r26, r20
    176a:	b5 07       	cpc	r27, r21
    176c:	88 f4       	brcc	.+34     	; 0x1790 <PD_SetupDFAddressCounters+0x50>
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	28 1b       	sub	r18, r24
    1774:	39 0b       	sbc	r19, r25
    1776:	4a 0b       	sbc	r20, r26
    1778:	5b 0b       	sbc	r21, r27
    177a:	6f 5f       	subi	r22, 0xFF	; 255
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
    177e:	82 17       	cp	r24, r18
    1780:	93 07       	cpc	r25, r19
    1782:	a4 07       	cpc	r26, r20
    1784:	b5 07       	cpc	r27, r21
    1786:	a8 f3       	brcs	.-22     	; 0x1772 <PD_SetupDFAddressCounters+0x32>
    1788:	70 93 6a 02 	sts	0x026A, r23
    178c:	60 93 69 02 	sts	0x0269, r22
	}
	
	CurrBuffByte = (uint16_t)StartAddress;              // The buffer byte is the remainder
    1790:	30 93 63 02 	sts	0x0263, r19
    1794:	20 93 62 02 	sts	0x0262, r18
    1798:	08 95       	ret

0000179a <PD_StoreDataflashByte>:
}

void PD_StoreDataflashByte(const uint8_t Data)
{
    179a:	cf 93       	push	r28
    179c:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DataflashInfo.PageSize)
    179e:	20 91 62 02 	lds	r18, 0x0262
    17a2:	30 91 63 02 	lds	r19, 0x0263
    17a6:	80 91 65 02 	lds	r24, 0x0265
    17aa:	90 91 66 02 	lds	r25, 0x0266
    17ae:	28 17       	cp	r18, r24
    17b0:	39 07       	cpc	r19, r25
    17b2:	a9 f4       	brne	.+42     	; 0x17de <PD_StoreDataflashByte+0x44>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    17b4:	80 91 69 02 	lds	r24, 0x0269
    17b8:	90 91 6a 02 	lds	r25, 0x026A
    17bc:	9c 01       	movw	r18, r24
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	90 93 6a 02 	sts	0x026A, r25
    17c4:	80 93 69 02 	sts	0x0269, r24
    17c8:	c9 01       	movw	r24, r18
    17ca:	0e 94 84 0a 	call	0x1508 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	0e 94 f0 09 	call	0x13e0 <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    17d6:	10 92 63 02 	sts	0x0263, r1
    17da:	10 92 62 02 	sts	0x0262, r1
	}
	
	USI_SPITransmit(Data);                                 // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    17de:	8c 2f       	mov	r24, r28
    17e0:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
	CurrBuffByte++;
    17e4:	80 91 62 02 	lds	r24, 0x0262
    17e8:	90 91 63 02 	lds	r25, 0x0263
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	90 93 63 02 	sts	0x0263, r25
    17f2:	80 93 62 02 	sts	0x0262, r24
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <PD_InterpretAVRISPPacket>:
    17fa:	df 92       	push	r13
    17fc:	ef 92       	push	r14
    17fe:	ff 92       	push	r15
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	dd 24       	eor	r13, r13
    180a:	80 91 47 01 	lds	r24, 0x0147
    180e:	99 27       	eor	r25, r25
    1810:	86 31       	cpi	r24, 0x16	; 22
    1812:	91 05       	cpc	r25, r1
    1814:	09 f4       	brne	.+2      	; 0x1818 <PD_InterpretAVRISPPacket+0x1e>
    1816:	00 c1       	rjmp	.+512    	; 0x1a18 <PD_InterpretAVRISPPacket+0x21e>
    1818:	87 31       	cpi	r24, 0x17	; 23
    181a:	91 05       	cpc	r25, r1
    181c:	b4 f4       	brge	.+44     	; 0x184a <PD_InterpretAVRISPPacket+0x50>
    181e:	82 31       	cpi	r24, 0x12	; 18
    1820:	91 05       	cpc	r25, r1
    1822:	09 f4       	brne	.+2      	; 0x1826 <PD_InterpretAVRISPPacket+0x2c>
    1824:	6f c0       	rjmp	.+222    	; 0x1904 <PD_InterpretAVRISPPacket+0x10a>
    1826:	83 31       	cpi	r24, 0x13	; 19
    1828:	91 05       	cpc	r25, r1
    182a:	3c f4       	brge	.+14     	; 0x183a <PD_InterpretAVRISPPacket+0x40>
    182c:	80 31       	cpi	r24, 0x10	; 16
    182e:	91 05       	cpc	r25, r1
    1830:	31 f1       	breq	.+76     	; 0x187e <PD_InterpretAVRISPPacket+0x84>
    1832:	41 97       	sbiw	r24, 0x11	; 17
    1834:	09 f4       	brne	.+2      	; 0x1838 <PD_InterpretAVRISPPacket+0x3e>
    1836:	46 c0       	rjmp	.+140    	; 0x18c4 <PD_InterpretAVRISPPacket+0xca>
    1838:	40 c1       	rjmp	.+640    	; 0x1aba <PD_InterpretAVRISPPacket+0x2c0>
    183a:	84 31       	cpi	r24, 0x14	; 20
    183c:	91 05       	cpc	r25, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <PD_InterpretAVRISPPacket+0x48>
    1840:	8a c0       	rjmp	.+276    	; 0x1956 <PD_InterpretAVRISPPacket+0x15c>
    1842:	45 97       	sbiw	r24, 0x15	; 21
    1844:	0c f0       	brlt	.+2      	; 0x1848 <PD_InterpretAVRISPPacket+0x4e>
    1846:	af c0       	rjmp	.+350    	; 0x19a6 <PD_InterpretAVRISPPacket+0x1ac>
    1848:	7f c0       	rjmp	.+254    	; 0x1948 <PD_InterpretAVRISPPacket+0x14e>
    184a:	89 31       	cpi	r24, 0x19	; 25
    184c:	91 05       	cpc	r25, r1
    184e:	09 f4       	brne	.+2      	; 0x1852 <PD_InterpretAVRISPPacket+0x58>
    1850:	70 c0       	rjmp	.+224    	; 0x1932 <PD_InterpretAVRISPPacket+0x138>
    1852:	8a 31       	cpi	r24, 0x1A	; 26
    1854:	91 05       	cpc	r25, r1
    1856:	44 f4       	brge	.+16     	; 0x1868 <PD_InterpretAVRISPPacket+0x6e>
    1858:	87 31       	cpi	r24, 0x17	; 23
    185a:	91 05       	cpc	r25, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <PD_InterpretAVRISPPacket+0x66>
    185e:	69 c0       	rjmp	.+210    	; 0x1932 <PD_InterpretAVRISPPacket+0x138>
    1860:	48 97       	sbiw	r24, 0x18	; 24
    1862:	09 f4       	brne	.+2      	; 0x1866 <PD_InterpretAVRISPPacket+0x6c>
    1864:	58 c0       	rjmp	.+176    	; 0x1916 <PD_InterpretAVRISPPacket+0x11c>
    1866:	29 c1       	rjmp	.+594    	; 0x1aba <PD_InterpretAVRISPPacket+0x2c0>
    1868:	8b 31       	cpi	r24, 0x1B	; 27
    186a:	91 05       	cpc	r25, r1
    186c:	e9 f1       	breq	.+122    	; 0x18e8 <PD_InterpretAVRISPPacket+0xee>
    186e:	8b 31       	cpi	r24, 0x1B	; 27
    1870:	91 05       	cpc	r25, r1
    1872:	0c f4       	brge	.+2      	; 0x1876 <PD_InterpretAVRISPPacket+0x7c>
    1874:	50 c0       	rjmp	.+160    	; 0x1916 <PD_InterpretAVRISPPacket+0x11c>
    1876:	4c 97       	sbiw	r24, 0x1c	; 28
    1878:	09 f4       	brne	.+2      	; 0x187c <PD_InterpretAVRISPPacket+0x82>
    187a:	4d c0       	rjmp	.+154    	; 0x1916 <PD_InterpretAVRISPPacket+0x11c>
    187c:	1e c1       	rjmp	.+572    	; 0x1aba <PD_InterpretAVRISPPacket+0x2c0>
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	90 93 44 01 	sts	0x0144, r25
    1886:	80 93 43 01 	sts	0x0143, r24
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    1890:	0e 94 b7 0a 	call	0x156e <DF_GetChipCharacteristics>
    1894:	80 91 64 02 	lds	r24, 0x0264
    1898:	88 23       	and	r24, r24
    189a:	59 f0       	breq	.+22     	; 0x18b2 <PD_InterpretAVRISPPacket+0xb8>
    189c:	84 eb       	ldi	r24, 0xB4	; 180
    189e:	93 e0       	ldi	r25, 0x03	; 3
    18a0:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	80 93 42 01 	sts	0x0142, r24
    18aa:	81 b3       	in	r24, 0x11	; 17
    18ac:	8f 7c       	andi	r24, 0xCF	; 207
    18ae:	80 62       	ori	r24, 0x20	; 32
    18b0:	17 c0       	rjmp	.+46     	; 0x18e0 <PD_InterpretAVRISPPacket+0xe6>
    18b2:	8e e6       	ldi	r24, 0x6E	; 110
    18b4:	93 e0       	ldi	r25, 0x03	; 3
    18b6:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
    18ba:	8d 2d       	mov	r24, r13
    18bc:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    18c0:	80 ec       	ldi	r24, 0xC0	; 192
    18c2:	02 c1       	rjmp	.+516    	; 0x1ac8 <PD_InterpretAVRISPPacket+0x2ce>
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	90 93 44 01 	sts	0x0144, r25
    18cc:	80 93 43 01 	sts	0x0143, r24
    18d0:	d0 92 42 01 	sts	0x0142, r13
    18d4:	8d 2d       	mov	r24, r13
    18d6:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    18da:	81 b3       	in	r24, 0x11	; 17
    18dc:	8f 7c       	andi	r24, 0xCF	; 207
    18de:	80 61       	ori	r24, 0x10	; 16
    18e0:	81 bb       	out	0x11, r24	; 17
    18e2:	d0 92 48 01 	sts	0x0148, r13
    18e6:	f2 c0       	rjmp	.+484    	; 0x1acc <PD_InterpretAVRISPPacket+0x2d2>
    18e8:	84 e0       	ldi	r24, 0x04	; 4
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	90 93 44 01 	sts	0x0144, r25
    18f0:	80 93 43 01 	sts	0x0143, r24
    18f4:	d0 92 48 01 	sts	0x0148, r13
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	80 93 49 01 	sts	0x0149, r24
    18fe:	d0 92 4a 01 	sts	0x014A, r13
    1902:	e4 c0       	rjmp	.+456    	; 0x1acc <PD_InterpretAVRISPPacket+0x2d2>
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	90 93 44 01 	sts	0x0144, r25
    190c:	80 93 43 01 	sts	0x0143, r24
    1910:	e1 e0       	ldi	r30, 0x01	; 1
    1912:	de 2e       	mov	r13, r30
    1914:	7e c0       	rjmp	.+252    	; 0x1a12 <PD_InterpretAVRISPPacket+0x218>
    1916:	84 e0       	ldi	r24, 0x04	; 4
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	90 93 44 01 	sts	0x0144, r25
    191e:	80 93 43 01 	sts	0x0143, r24
    1922:	10 92 48 01 	sts	0x0148, r1
    1926:	8f ef       	ldi	r24, 0xFF	; 255
    1928:	80 93 49 01 	sts	0x0149, r24
    192c:	10 92 4a 01 	sts	0x014A, r1
    1930:	cd c0       	rjmp	.+410    	; 0x1acc <PD_InterpretAVRISPPacket+0x2d2>
    1932:	83 e0       	ldi	r24, 0x03	; 3
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	90 93 44 01 	sts	0x0144, r25
    193a:	80 93 43 01 	sts	0x0143, r24
    193e:	10 92 48 01 	sts	0x0148, r1
    1942:	10 92 49 01 	sts	0x0149, r1
    1946:	c2 c0       	rjmp	.+388    	; 0x1acc <PD_InterpretAVRISPPacket+0x2d2>
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	90 93 44 01 	sts	0x0144, r25
    1950:	80 93 43 01 	sts	0x0143, r24
    1954:	5e c0       	rjmp	.+188    	; 0x1a12 <PD_InterpretAVRISPPacket+0x218>
    1956:	80 91 48 01 	lds	r24, 0x0148
    195a:	99 27       	eor	r25, r25
    195c:	98 2f       	mov	r25, r24
    195e:	88 27       	eor	r24, r24
    1960:	20 91 49 01 	lds	r18, 0x0149
    1964:	33 27       	eor	r19, r19
    1966:	82 2b       	or	r24, r18
    1968:	93 2b       	or	r25, r19
    196a:	03 96       	adiw	r24, 0x03	; 3
    196c:	90 93 44 01 	sts	0x0144, r25
    1970:	80 93 43 01 	sts	0x0143, r24
    1974:	21 e0       	ldi	r18, 0x01	; 1
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	02 97       	sbiw	r24, 0x02	; 2
    197a:	28 17       	cp	r18, r24
    197c:	39 07       	cpc	r19, r25
    197e:	48 f4       	brcc	.+18     	; 0x1992 <PD_InterpretAVRISPPacket+0x198>
    1980:	4f ef       	ldi	r20, 0xFF	; 255
    1982:	e8 e4       	ldi	r30, 0x48	; 72
    1984:	f1 e0       	ldi	r31, 0x01	; 1
    1986:	41 93       	st	Z+, r20
    1988:	2f 5f       	subi	r18, 0xFF	; 255
    198a:	3f 4f       	sbci	r19, 0xFF	; 255
    198c:	28 17       	cp	r18, r24
    198e:	39 07       	cpc	r19, r25
    1990:	d0 f3       	brcs	.-12     	; 0x1986 <PD_InterpretAVRISPPacket+0x18c>
    1992:	10 92 48 01 	sts	0x0148, r1
    1996:	e0 91 43 01 	lds	r30, 0x0143
    199a:	f0 91 44 01 	lds	r31, 0x0144
    199e:	ea 5b       	subi	r30, 0xBA	; 186
    19a0:	fe 4f       	sbci	r31, 0xFE	; 254
    19a2:	10 82       	st	Z, r1
    19a4:	93 c0       	rjmp	.+294    	; 0x1acc <PD_InterpretAVRISPPacket+0x2d2>
    19a6:	0e 94 a0 0b 	call	0x1740 <PD_SetupDFAddressCounters>
    19aa:	80 91 69 02 	lds	r24, 0x0269
    19ae:	90 91 6a 02 	lds	r25, 0x026A
    19b2:	0e 94 51 0a 	call	0x14a2 <DF_CopyFlashPageToBuffer>
    19b6:	80 91 62 02 	lds	r24, 0x0262
    19ba:	90 91 63 02 	lds	r25, 0x0263
    19be:	0e 94 f0 09 	call	0x13e0 <DF_BufferWriteEnable>
    19c2:	80 91 48 01 	lds	r24, 0x0148
    19c6:	99 27       	eor	r25, r25
    19c8:	d8 2f       	mov	r29, r24
    19ca:	cc 27       	eor	r28, r28
    19cc:	80 91 49 01 	lds	r24, 0x0149
    19d0:	99 27       	eor	r25, r25
    19d2:	c8 2b       	or	r28, r24
    19d4:	d9 2b       	or	r29, r25
    19d6:	00 e0       	ldi	r16, 0x00	; 0
    19d8:	10 e0       	ldi	r17, 0x00	; 0
    19da:	0c 17       	cp	r16, r28
    19dc:	1d 07       	cpc	r17, r29
    19de:	c8 f4       	brcc	.+50     	; 0x1a12 <PD_InterpretAVRISPPacket+0x218>
    19e0:	51 e5       	ldi	r21, 0x51	; 81
    19e2:	e5 2e       	mov	r14, r21
    19e4:	51 e0       	ldi	r21, 0x01	; 1
    19e6:	f5 2e       	mov	r15, r21
    19e8:	f7 01       	movw	r30, r14
    19ea:	81 91       	ld	r24, Z+
    19ec:	7f 01       	movw	r14, r30
    19ee:	0e 94 cd 0b 	call	0x179a <PD_StoreDataflashByte>
    19f2:	80 91 62 02 	lds	r24, 0x0262
    19f6:	90 91 63 02 	lds	r25, 0x0263
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	90 93 63 02 	sts	0x0263, r25
    1a00:	80 93 62 02 	sts	0x0262, r24
    1a04:	0e 94 92 0e 	call	0x1d24 <V2P_IncrementCurrAddress>
    1a08:	0f 5f       	subi	r16, 0xFF	; 255
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0c:	0c 17       	cp	r16, r28
    1a0e:	1d 07       	cpc	r17, r29
    1a10:	58 f3       	brcs	.-42     	; 0x19e8 <PD_InterpretAVRISPPacket+0x1ee>
    1a12:	10 92 48 01 	sts	0x0148, r1
    1a16:	5a c0       	rjmp	.+180    	; 0x1acc <PD_InterpretAVRISPPacket+0x2d2>
    1a18:	0e 94 a0 0b 	call	0x1740 <PD_SetupDFAddressCounters>
    1a1c:	80 91 69 02 	lds	r24, 0x0269
    1a20:	90 91 6a 02 	lds	r25, 0x026A
    1a24:	0e 94 51 0a 	call	0x14a2 <DF_CopyFlashPageToBuffer>
    1a28:	80 91 48 01 	lds	r24, 0x0148
    1a2c:	99 27       	eor	r25, r25
    1a2e:	d8 2f       	mov	r29, r24
    1a30:	cc 27       	eor	r28, r28
    1a32:	80 91 49 01 	lds	r24, 0x0149
    1a36:	99 27       	eor	r25, r25
    1a38:	c8 2b       	or	r28, r24
    1a3a:	d9 2b       	or	r29, r25
    1a3c:	00 e0       	ldi	r16, 0x00	; 0
    1a3e:	10 e0       	ldi	r17, 0x00	; 0
    1a40:	0c 17       	cp	r16, r28
    1a42:	1d 07       	cpc	r17, r29
    1a44:	70 f5       	brcc	.+92     	; 0x1aa2 <PD_InterpretAVRISPPacket+0x2a8>
    1a46:	39 e4       	ldi	r19, 0x49	; 73
    1a48:	e3 2e       	mov	r14, r19
    1a4a:	31 e0       	ldi	r19, 0x01	; 1
    1a4c:	f3 2e       	mov	r15, r19
    1a4e:	20 91 62 02 	lds	r18, 0x0262
    1a52:	30 91 63 02 	lds	r19, 0x0263
    1a56:	80 91 65 02 	lds	r24, 0x0265
    1a5a:	90 91 66 02 	lds	r25, 0x0266
    1a5e:	28 17       	cp	r18, r24
    1a60:	39 07       	cpc	r19, r25
    1a62:	41 f4       	brne	.+16     	; 0x1a74 <PD_InterpretAVRISPPacket+0x27a>
    1a64:	0e 94 a0 0b 	call	0x1740 <PD_SetupDFAddressCounters>
    1a68:	80 91 69 02 	lds	r24, 0x0269
    1a6c:	90 91 6a 02 	lds	r25, 0x026A
    1a70:	0e 94 51 0a 	call	0x14a2 <DF_CopyFlashPageToBuffer>
    1a74:	80 91 62 02 	lds	r24, 0x0262
    1a78:	90 91 63 02 	lds	r25, 0x0263
    1a7c:	9c 01       	movw	r18, r24
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	90 93 63 02 	sts	0x0263, r25
    1a84:	80 93 62 02 	sts	0x0262, r24
    1a88:	c9 01       	movw	r24, r18
    1a8a:	0e 94 81 09 	call	0x1302 <DF_ReadBufferByte>
    1a8e:	f7 01       	movw	r30, r14
    1a90:	81 93       	st	Z+, r24
    1a92:	7f 01       	movw	r14, r30
    1a94:	0e 94 92 0e 	call	0x1d24 <V2P_IncrementCurrAddress>
    1a98:	0f 5f       	subi	r16, 0xFF	; 255
    1a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9c:	0c 17       	cp	r16, r28
    1a9e:	1d 07       	cpc	r17, r29
    1aa0:	b0 f2       	brcs	.-84     	; 0x1a4e <PD_InterpretAVRISPPacket+0x254>
    1aa2:	23 96       	adiw	r28, 0x03	; 3
    1aa4:	d0 93 44 01 	sts	0x0144, r29
    1aa8:	c0 93 43 01 	sts	0x0143, r28
    1aac:	23 97       	sbiw	r28, 0x03	; 3
    1aae:	10 92 48 01 	sts	0x0148, r1
    1ab2:	c9 5b       	subi	r28, 0xB9	; 185
    1ab4:	de 4f       	sbci	r29, 0xFE	; 254
    1ab6:	1a 82       	std	Y+2, r1	; 0x02
    1ab8:	09 c0       	rjmp	.+18     	; 0x1acc <PD_InterpretAVRISPPacket+0x2d2>
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	90 93 44 01 	sts	0x0144, r25
    1ac2:	80 93 43 01 	sts	0x0143, r24
    1ac6:	89 ec       	ldi	r24, 0xC9	; 201
    1ac8:	80 93 48 01 	sts	0x0148, r24
    1acc:	0e 94 ae 0d 	call	0x1b5c <V2P_SendPacket>
    1ad0:	dd 20       	and	r13, r13
    1ad2:	d9 f0       	breq	.+54     	; 0x1b0a <PD_InterpretAVRISPPacket+0x310>
    1ad4:	85 e2       	ldi	r24, 0x25	; 37
    1ad6:	92 e0       	ldi	r25, 0x02	; 2
    1ad8:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
    1adc:	c0 e0       	ldi	r28, 0x00	; 0
    1ade:	d0 e0       	ldi	r29, 0x00	; 0
    1ae0:	80 91 67 02 	lds	r24, 0x0267
    1ae4:	90 91 68 02 	lds	r25, 0x0268
    1ae8:	23 e0       	ldi	r18, 0x03	; 3
    1aea:	96 95       	lsr	r25
    1aec:	87 95       	ror	r24
    1aee:	2a 95       	dec	r18
    1af0:	e1 f7       	brne	.-8      	; 0x1aea <PD_InterpretAVRISPPacket+0x2f0>
    1af2:	c8 17       	cp	r28, r24
    1af4:	d9 07       	cpc	r29, r25
    1af6:	28 f4       	brcc	.+10     	; 0x1b02 <PD_InterpretAVRISPPacket+0x308>
    1af8:	ce 01       	movw	r24, r28
    1afa:	0e 94 2a 0a 	call	0x1454 <DF_EraseBlock>
    1afe:	21 96       	adiw	r28, 0x01	; 1
    1b00:	ef cf       	rjmp	.-34     	; 0x1ae0 <PD_InterpretAVRISPPacket+0x2e6>
    1b02:	84 eb       	ldi	r24, 0xB4	; 180
    1b04:	93 e0       	ldi	r25, 0x03	; 3
    1b06:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	ff 90       	pop	r15
    1b14:	ef 90       	pop	r14
    1b16:	df 90       	pop	r13
    1b18:	08 95       	ret

00001b1a <V2P_GetChecksum>:
	
	/* Checksum for the V2 protocol is comprised of an XOR of all the packet 
      bytes, including the start, sequence number, size and token bytes.    */
	
	CheckSumByte  = MESSAGE_START;
    1b1a:	6b e1       	ldi	r22, 0x1B	; 27
	CheckSumByte ^= SequenceNum;
    1b1c:	80 91 45 01 	lds	r24, 0x0145
    1b20:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize >> 8);
    1b22:	20 91 43 01 	lds	r18, 0x0143
    1b26:	30 91 44 01 	lds	r19, 0x0144
    1b2a:	83 2f       	mov	r24, r19
    1b2c:	99 27       	eor	r25, r25
    1b2e:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize);
    1b30:	80 91 43 01 	lds	r24, 0x0143
    1b34:	68 27       	eor	r22, r24
	CheckSumByte ^= TOKEN;
    1b36:	8e e0       	ldi	r24, 0x0E	; 14
    1b38:	68 27       	eor	r22, r24
	
	for (uint16_t CByteIndex = 0; CByteIndex < MessageSize; CByteIndex++)
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	42 17       	cp	r20, r18
    1b40:	53 07       	cpc	r21, r19
    1b42:	48 f4       	brcc	.+18     	; 0x1b56 <V2P_GetChecksum+0x3c>
    1b44:	e7 e4       	ldi	r30, 0x47	; 71
    1b46:	f1 e0       	ldi	r31, 0x01	; 1
	   CheckSumByte ^= PacketBytes[CByteIndex];
    1b48:	81 91       	ld	r24, Z+
    1b4a:	68 27       	eor	r22, r24
    1b4c:	4f 5f       	subi	r20, 0xFF	; 255
    1b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b50:	42 17       	cp	r20, r18
    1b52:	53 07       	cpc	r21, r19
    1b54:	c8 f3       	brcs	.-14     	; 0x1b48 <V2P_GetChecksum+0x2e>

	return CheckSumByte;
}
    1b56:	86 2f       	mov	r24, r22
    1b58:	99 27       	eor	r25, r25
    1b5a:	08 95       	ret

00001b5c <V2P_SendPacket>:
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	8b e1       	ldi	r24, 0x1B	; 27
    1b66:	0e 94 a8 08 	call	0x1150 <USART_Tx>
    1b6a:	80 91 45 01 	lds	r24, 0x0145
    1b6e:	0e 94 a8 08 	call	0x1150 <USART_Tx>
    1b72:	80 91 44 01 	lds	r24, 0x0144
    1b76:	0e 94 a8 08 	call	0x1150 <USART_Tx>
    1b7a:	80 91 43 01 	lds	r24, 0x0143
    1b7e:	0e 94 a8 08 	call	0x1150 <USART_Tx>
    1b82:	8e e0       	ldi	r24, 0x0E	; 14
    1b84:	0e 94 a8 08 	call	0x1150 <USART_Tx>
    1b88:	c0 e0       	ldi	r28, 0x00	; 0
    1b8a:	d0 e0       	ldi	r29, 0x00	; 0
    1b8c:	80 91 43 01 	lds	r24, 0x0143
    1b90:	90 91 44 01 	lds	r25, 0x0144
    1b94:	c8 17       	cp	r28, r24
    1b96:	d9 07       	cpc	r29, r25
    1b98:	78 f4       	brcc	.+30     	; 0x1bb8 <V2P_SendPacket+0x5c>
    1b9a:	07 e4       	ldi	r16, 0x47	; 71
    1b9c:	11 e0       	ldi	r17, 0x01	; 1
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	81 91       	ld	r24, Z+
    1ba2:	8f 01       	movw	r16, r30
    1ba4:	0e 94 a8 08 	call	0x1150 <USART_Tx>
    1ba8:	21 96       	adiw	r28, 0x01	; 1
    1baa:	80 91 43 01 	lds	r24, 0x0143
    1bae:	90 91 44 01 	lds	r25, 0x0144
    1bb2:	c8 17       	cp	r28, r24
    1bb4:	d9 07       	cpc	r29, r25
    1bb6:	98 f3       	brcs	.-26     	; 0x1b9e <V2P_SendPacket+0x42>
    1bb8:	0e 94 8d 0d 	call	0x1b1a <V2P_GetChecksum>
    1bbc:	0e 94 a8 08 	call	0x1150 <USART_Tx>
    1bc0:	80 91 45 01 	lds	r24, 0x0145
    1bc4:	90 91 46 01 	lds	r25, 0x0146
    1bc8:	01 96       	adiw	r24, 0x01	; 1
    1bca:	90 93 46 01 	sts	0x0146, r25
    1bce:	80 93 45 01 	sts	0x0145, r24
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	08 95       	ret

00001bdc <V2P_GetSetParamater>:

void V2P_GetSetParamater(void)
{
	uint8_t Param_Name = PacketBytes[1];    // Save the parameter number
    1bdc:	20 91 48 01 	lds	r18, 0x0148

	MessageSize = 3;                        // Set the default response message size to 3 bytes     
    1be0:	83 e0       	ldi	r24, 0x03	; 3
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	90 93 44 01 	sts	0x0144, r25
    1be8:	80 93 43 01 	sts	0x0143, r24
	PacketBytes[1] = STATUS_CMD_OK;         // Set the default response to OK
    1bec:	10 92 48 01 	sts	0x0148, r1

	switch (Param_Name)                    // Switch based on the recieved parameter byte
    1bf0:	33 27       	eor	r19, r19
    1bf2:	22 39       	cpi	r18, 0x92	; 146
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	69 f1       	breq	.+90     	; 0x1c52 <V2P_GetSetParamater+0x76>
    1bf8:	23 39       	cpi	r18, 0x93	; 147
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	8c f4       	brge	.+34     	; 0x1c20 <V2P_GetSetParamater+0x44>
    1bfe:	21 38       	cpi	r18, 0x81	; 129
    1c00:	31 05       	cpc	r19, r1
    1c02:	19 f1       	breq	.+70     	; 0x1c4a <V2P_GetSetParamater+0x6e>
    1c04:	22 38       	cpi	r18, 0x82	; 130
    1c06:	31 05       	cpc	r19, r1
    1c08:	24 f4       	brge	.+8      	; 0x1c12 <V2P_GetSetParamater+0x36>
    1c0a:	20 38       	cpi	r18, 0x80	; 128
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	d9 f0       	breq	.+54     	; 0x1c46 <V2P_GetSetParamater+0x6a>
    1c10:	7d c0       	rjmp	.+250    	; 0x1d0c <V2P_GetSetParamater+0x130>
    1c12:	20 39       	cpi	r18, 0x90	; 144
    1c14:	31 05       	cpc	r19, r1
    1c16:	d9 f0       	breq	.+54     	; 0x1c4e <V2P_GetSetParamater+0x72>
    1c18:	21 39       	cpi	r18, 0x91	; 145
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	c1 f0       	breq	.+48     	; 0x1c4e <V2P_GetSetParamater+0x72>
    1c1e:	76 c0       	rjmp	.+236    	; 0x1d0c <V2P_GetSetParamater+0x130>
    1c20:	28 39       	cpi	r18, 0x98	; 152
    1c22:	31 05       	cpc	r19, r1
    1c24:	a1 f1       	breq	.+104    	; 0x1c8e <V2P_GetSetParamater+0xb2>
    1c26:	29 39       	cpi	r18, 0x99	; 153
    1c28:	31 05       	cpc	r19, r1
    1c2a:	2c f4       	brge	.+10     	; 0x1c36 <V2P_GetSetParamater+0x5a>
    1c2c:	26 39       	cpi	r18, 0x96	; 150
    1c2e:	31 05       	cpc	r19, r1
    1c30:	0c f4       	brge	.+2      	; 0x1c34 <V2P_GetSetParamater+0x58>
    1c32:	6c c0       	rjmp	.+216    	; 0x1d0c <V2P_GetSetParamater+0x130>
    1c34:	5d c0       	rjmp	.+186    	; 0x1cf0 <V2P_GetSetParamater+0x114>
    1c36:	2e 39       	cpi	r18, 0x9E	; 158
    1c38:	31 05       	cpc	r19, r1
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <V2P_GetSetParamater+0x62>
    1c3c:	3e c0       	rjmp	.+124    	; 0x1cba <V2P_GetSetParamater+0xde>
    1c3e:	2f 39       	cpi	r18, 0x9F	; 159
    1c40:	31 05       	cpc	r19, r1
    1c42:	99 f0       	breq	.+38     	; 0x1c6a <V2P_GetSetParamater+0x8e>
    1c44:	63 c0       	rjmp	.+198    	; 0x1d0c <V2P_GetSetParamater+0x130>
	{
		case PARAM_BUILD_NUMBER_LOW:
			PacketBytes[2] = VERSION_MINOR;
    1c46:	83 e0       	ldi	r24, 0x03	; 3
    1c48:	41 c0       	rjmp	.+130    	; 0x1ccc <V2P_GetSetParamater+0xf0>

			break;
		case PARAM_BUILD_NUMBER_HIGH:
			PacketBytes[2] = VERSION_MAJOR;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	3f c0       	rjmp	.+126    	; 0x1ccc <V2P_GetSetParamater+0xf0>

			break;
		case PARAM_HARDWARE_VERSION:
			PacketBytes[2] = V2P_HW_VERSION;

			break;
		case PARAM_SW_MAJOR:
			PacketBytes[2] = V2P_SW_VERSION_MAJOR;
    1c4e:	82 e0       	ldi	r24, 0x02	; 2
    1c50:	3d c0       	rjmp	.+122    	; 0x1ccc <V2P_GetSetParamater+0xf0>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    1c52:	a6 e8       	ldi	r26, 0x86	; 134
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	9d 01       	movw	r18, r26
  uint8_t result;
  asm volatile
    1c58:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
    1c5c:	80 2d       	mov	r24, r0
    1c5e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c60:	11 f0       	breq	.+4      	; 0x1c66 <V2P_GetSetParamater+0x8a>
    1c62:	d9 01       	movw	r26, r18
    1c64:	30 c0       	rjmp	.+96     	; 0x1cc6 <V2P_GetSetParamater+0xea>
    1c66:	84 e0       	ldi	r24, 0x04	; 4
    1c68:	31 c0       	rjmp	.+98     	; 0x1ccc <V2P_GetSetParamater+0xf0>

			break;
		case PARAM_SW_MINOR:
			PacketBytes[2] = ((eeprom_read_byte(&EEPROMVars.FirmVerMinor) == 0xFF)? V2P_SW_VERSION_MINOR_DEFAULT : eeprom_read_byte(&EEPROMVars.FirmVerMinor));

			break;
		case PARAM_CONTROLLER_INIT:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1c6a:	80 91 47 01 	lds	r24, 0x0147
    1c6e:	83 30       	cpi	r24, 0x03	; 3
    1c70:	19 f4       	brne	.+6      	; 0x1c78 <V2P_GetSetParamater+0x9c>
			{
				PacketBytes[2] = Param_ControllerInit;
    1c72:	80 91 3d 01 	lds	r24, 0x013D
    1c76:	2a c0       	rjmp	.+84     	; 0x1ccc <V2P_GetSetParamater+0xf0>
			}
			else
			{
				MessageSize = 2;
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	90 93 44 01 	sts	0x0144, r25
    1c80:	80 93 43 01 	sts	0x0143, r24
				Param_ControllerInit = PacketBytes[2];
    1c84:	80 91 49 01 	lds	r24, 0x0149
    1c88:	80 93 3d 01 	sts	0x013D, r24
			}
			
			break;
    1c8c:	48 c0       	rjmp	.+144    	; 0x1d1e <V2P_GetSetParamater+0x142>
		case PARAM_SCK_DURATION:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1c8e:	80 91 47 01 	lds	r24, 0x0147
    1c92:	a1 e0       	ldi	r26, 0x01	; 1
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	83 30       	cpi	r24, 0x03	; 3
    1c98:	b1 f0       	breq	.+44     	; 0x1cc6 <V2P_GetSetParamater+0xea>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.SCKDuration);
			}
			else
			{
				MessageSize = 2;
    1c9a:	82 e0       	ldi	r24, 0x02	; 2
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	90 93 44 01 	sts	0x0144, r25
    1ca2:	80 93 43 01 	sts	0x0143, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1ca6:	80 91 49 01 	lds	r24, 0x0149
  asm volatile (
    1caa:	08 2e       	mov	r0, r24
    1cac:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.SCKDuration, PacketBytes[2]);
				USI_SPISetSpeed(PacketBytes[2]); // Re-Initialise the USI system with the new frequency
    1cb0:	80 91 49 01 	lds	r24, 0x0149
    1cb4:	0e 94 05 09 	call	0x120a <USI_SPISetSpeed>
			}
					
			break;
    1cb8:	32 c0       	rjmp	.+100    	; 0x1d1e <V2P_GetSetParamater+0x142>
		case PARAM_RESET_POLARITY:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1cba:	80 91 47 01 	lds	r24, 0x0147
    1cbe:	a0 e0       	ldi	r26, 0x00	; 0
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	83 30       	cpi	r24, 0x03	; 3
    1cc4:	31 f4       	brne	.+12     	; 0x1cd2 <V2P_GetSetParamater+0xf6>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1cc6:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
    1cca:	80 2d       	mov	r24, r0
    1ccc:	80 93 49 01 	sts	0x0149, r24
    1cd0:	26 c0       	rjmp	.+76     	; 0x1d1e <V2P_GetSetParamater+0x142>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.ResetPolarity);		
			}
			else
			{
				MessageSize = 2;
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	90 93 44 01 	sts	0x0144, r25
    1cda:	80 93 43 01 	sts	0x0143, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1cde:	80 91 49 01 	lds	r24, 0x0149
  asm volatile (
    1ce2:	08 2e       	mov	r0, r24
    1ce4:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.ResetPolarity, PacketBytes[2]);
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Change takes effect immediatly
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
			}
			
			break;
    1cee:	17 c0       	rjmp	.+46     	; 0x1d1e <V2P_GetSetParamater+0x142>
		case PARAM_OSC_PSCALE:
		case PARAM_OSC_CMATCH:
			/* Despite not supporting these parameters (STK500 only), the AVR Studio programmer
			   sends them along with the SCK duration. A OK must be returned or the sequence will fail
			   and the SCK duration byte will not be sent.                                             */
		
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1cf0:	80 91 47 01 	lds	r24, 0x0147
    1cf4:	83 30       	cpi	r24, 0x03	; 3
    1cf6:	19 f4       	brne	.+6      	; 0x1cfe <V2P_GetSetParamater+0x122>
			{
			   PacketBytes[2] = 0;            // If the command is a read, return a 0 for both parameters
    1cf8:	10 92 49 01 	sts	0x0149, r1
    1cfc:	10 c0       	rjmp	.+32     	; 0x1d1e <V2P_GetSetParamater+0x142>
			}
			else
			{
				MessageSize = 2;              // Otherwise just send back an OK if the command is a set		
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	90 93 44 01 	sts	0x0144, r25
    1d06:	80 93 43 01 	sts	0x0143, r24
			}
			
			break;
    1d0a:	09 c0       	rjmp	.+18     	; 0x1d1e <V2P_GetSetParamater+0x142>
		default:                             // Unrecognised parameter
			MessageSize = 2;
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	90 93 44 01 	sts	0x0144, r25
    1d14:	80 93 43 01 	sts	0x0143, r24
			PacketBytes[1] = STATUS_CMD_FAILED;			
    1d18:	80 ec       	ldi	r24, 0xC0	; 192
    1d1a:	80 93 48 01 	sts	0x0148, r24
	}
	
	V2P_SendPacket();
    1d1e:	0e 94 ae 0d 	call	0x1b5c <V2P_SendPacket>
    1d22:	08 95       	ret

00001d24 <V2P_IncrementCurrAddress>:
}

void V2P_IncrementCurrAddress(void)
{
	// Incrementing a 32-bit unsigned variable takes a lot of code. Because much of the code is
	// not very time critical (much of it is waiting for the hardware), i've chosen to waste
	// a few extra cycles per increment and save a good 60 bytes or so of code space by putting
	// the incrmement inside a function.

	CurrAddress++;
    1d24:	80 91 3e 01 	lds	r24, 0x013E
    1d28:	90 91 3f 01 	lds	r25, 0x013F
    1d2c:	a0 91 40 01 	lds	r26, 0x0140
    1d30:	b0 91 41 01 	lds	r27, 0x0141
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	a1 1d       	adc	r26, r1
    1d38:	b1 1d       	adc	r27, r1
    1d3a:	80 93 3e 01 	sts	0x013E, r24
    1d3e:	90 93 3f 01 	sts	0x013F, r25
    1d42:	a0 93 40 01 	sts	0x0140, r26
    1d46:	b0 93 41 01 	sts	0x0141, r27
    1d4a:	08 95       	ret

00001d4c <V2P_CheckForExtendedAddress>:
}

void V2P_CheckForExtendedAddress(void)
{
	if (CurrAddress & (1UL << 31))                     // MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
    1d4c:	80 91 3e 01 	lds	r24, 0x013E
    1d50:	90 91 3f 01 	lds	r25, 0x013F
    1d54:	a0 91 40 01 	lds	r26, 0x0140
    1d58:	b0 91 41 01 	lds	r27, 0x0141
    1d5c:	b7 ff       	sbrs	r27, 7
    1d5e:	1e c0       	rjmp	.+60     	; 0x1d9c <V2P_CheckForExtendedAddress+0x50>
	{
		USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);   // Load extended address command
    1d60:	8d e4       	ldi	r24, 0x4D	; 77
    1d62:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
		USI_SPITransmit((CurrAddress & 0x00FF0000) >> 16); // The 3rd byte of the long holds the extended address
    1d6c:	80 91 40 01 	lds	r24, 0x0140
    1d70:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
		
		CurrAddress &= ~(1UL << 31);                   // Clear the flag
    1d7a:	80 91 3e 01 	lds	r24, 0x013E
    1d7e:	90 91 3f 01 	lds	r25, 0x013F
    1d82:	a0 91 40 01 	lds	r26, 0x0140
    1d86:	b0 91 41 01 	lds	r27, 0x0141
    1d8a:	bf 77       	andi	r27, 0x7F	; 127
    1d8c:	80 93 3e 01 	sts	0x013E, r24
    1d90:	90 93 3f 01 	sts	0x013F, r25
    1d94:	a0 93 40 01 	sts	0x0140, r26
    1d98:	b0 93 41 01 	sts	0x0141, r27
    1d9c:	08 95       	ret

00001d9e <V2P_RunStateMachine>:
    1d9e:	ef 92       	push	r14
    1da0:	ff 92       	push	r15
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	cf 93       	push	r28
    1da8:	c0 e0       	ldi	r28, 0x00	; 0
    1daa:	ee 24       	eor	r14, r14
    1dac:	ff 24       	eor	r15, r15
    1dae:	0e 94 56 0b 	call	0x16ac <BUFF_InitialiseBuffer>
    1db2:	c0 93 42 01 	sts	0x0142, r28
    1db6:	10 92 3e 01 	sts	0x013E, r1
    1dba:	10 92 3f 01 	sts	0x013F, r1
    1dbe:	10 92 40 01 	sts	0x0140, r1
    1dc2:	10 92 41 01 	sts	0x0141, r1
    1dc6:	80 91 3b 01 	lds	r24, 0x013B
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	11 f4       	brne	.+4      	; 0x1dd2 <V2P_RunStateMachine+0x34>
    1dce:	c9 e0       	ldi	r28, 0x09	; 9
    1dd0:	11 c0       	rjmp	.+34     	; 0x1df4 <V2P_RunStateMachine+0x56>
    1dd2:	cc 23       	and	r28, r28
    1dd4:	79 f0       	breq	.+30     	; 0x1df4 <V2P_RunStateMachine+0x56>
    1dd6:	10 92 3b 01 	sts	0x013B, r1
    1dda:	10 92 3c 01 	sts	0x013C, r1
    1dde:	10 92 b2 00 	sts	0x00B2, r1
    1de2:	80 ef       	ldi	r24, 0xF0	; 240
    1de4:	80 93 b3 00 	sts	0x00B3, r24
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	80 93 70 00 	sts	0x0070, r24
    1dee:	8f e0       	ldi	r24, 0x0F	; 15
    1df0:	80 93 b0 00 	sts	0x00B0, r24
    1df4:	8c 2f       	mov	r24, r28
    1df6:	99 27       	eor	r25, r25
    1df8:	84 30       	cpi	r24, 0x04	; 4
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <V2P_RunStateMachine+0x62>
    1dfe:	70 c0       	rjmp	.+224    	; 0x1ee0 <V2P_RunStateMachine+0x142>
    1e00:	85 30       	cpi	r24, 0x05	; 5
    1e02:	91 05       	cpc	r25, r1
    1e04:	94 f4       	brge	.+36     	; 0x1e2a <V2P_RunStateMachine+0x8c>
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	91 05       	cpc	r25, r1
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <V2P_RunStateMachine+0x70>
    1e0c:	4f c0       	rjmp	.+158    	; 0x1eac <V2P_RunStateMachine+0x10e>
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	91 05       	cpc	r25, r1
    1e12:	1c f4       	brge	.+6      	; 0x1e1a <V2P_RunStateMachine+0x7c>
    1e14:	89 2b       	or	r24, r25
    1e16:	99 f1       	breq	.+102    	; 0x1e7e <V2P_RunStateMachine+0xe0>
    1e18:	d6 cf       	rjmp	.-84     	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1e1a:	82 30       	cpi	r24, 0x02	; 2
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <V2P_RunStateMachine+0x84>
    1e20:	4b c0       	rjmp	.+150    	; 0x1eb8 <V2P_RunStateMachine+0x11a>
    1e22:	03 97       	sbiw	r24, 0x03	; 3
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <V2P_RunStateMachine+0x8a>
    1e26:	51 c0       	rjmp	.+162    	; 0x1eca <V2P_RunStateMachine+0x12c>
    1e28:	ce cf       	rjmp	.-100    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1e2a:	87 30       	cpi	r24, 0x07	; 7
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <V2P_RunStateMachine+0x94>
    1e30:	88 c0       	rjmp	.+272    	; 0x1f42 <V2P_RunStateMachine+0x1a4>
    1e32:	88 30       	cpi	r24, 0x08	; 8
    1e34:	91 05       	cpc	r25, r1
    1e36:	44 f4       	brge	.+16     	; 0x1e48 <V2P_RunStateMachine+0xaa>
    1e38:	85 30       	cpi	r24, 0x05	; 5
    1e3a:	91 05       	cpc	r25, r1
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <V2P_RunStateMachine+0xa2>
    1e3e:	65 c0       	rjmp	.+202    	; 0x1f0a <V2P_RunStateMachine+0x16c>
    1e40:	06 97       	sbiw	r24, 0x06	; 6
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <V2P_RunStateMachine+0xa8>
    1e44:	6a c0       	rjmp	.+212    	; 0x1f1a <V2P_RunStateMachine+0x17c>
    1e46:	bf cf       	rjmp	.-130    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1e48:	88 30       	cpi	r24, 0x08	; 8
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	81 f0       	breq	.+32     	; 0x1e6e <V2P_RunStateMachine+0xd0>
    1e4e:	09 97       	sbiw	r24, 0x09	; 9
    1e50:	09 f0       	breq	.+2      	; 0x1e54 <V2P_RunStateMachine+0xb6>
    1e52:	b9 cf       	rjmp	.-142    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	90 93 44 01 	sts	0x0144, r25
    1e5c:	80 93 43 01 	sts	0x0143, r24
    1e60:	80 ec       	ldi	r24, 0xC0	; 192
    1e62:	80 93 48 01 	sts	0x0148, r24
    1e66:	10 92 3b 01 	sts	0x013B, r1
    1e6a:	0e 94 ae 0d 	call	0x1b5c <V2P_SendPacket>
    1e6e:	0e 94 56 0b 	call	0x16ac <BUFF_InitialiseBuffer>
    1e72:	10 92 b0 00 	sts	0x00B0, r1
    1e76:	10 92 70 00 	sts	0x0070, r1
    1e7a:	c0 e0       	ldi	r28, 0x00	; 0
    1e7c:	a4 cf       	rjmp	.-184    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1e7e:	80 91 af 02 	lds	r24, 0x02AF
    1e82:	81 11       	cpse	r24, r1
    1e84:	c1 e0       	ldi	r28, 0x01	; 1
    1e86:	f2 9b       	sbis	0x1e, 2	; 30
    1e88:	9e cf       	rjmp	.-196    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1e8a:	80 91 42 01 	lds	r24, 0x0142
    1e8e:	88 23       	and	r24, r24
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <V2P_RunStateMachine+0xf6>
    1e92:	99 cf       	rjmp	.-206    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1e94:	80 e8       	ldi	r24, 0x80	; 128
    1e96:	80 93 61 00 	sts	0x0061, r24
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	80 93 61 00 	sts	0x0061, r24
    1ea0:	80 91 c1 00 	lds	r24, 0x00C1
    1ea4:	80 78       	andi	r24, 0x80	; 128
    1ea6:	80 93 c1 00 	sts	0x00C1, r24
    1eaa:	d4 c0       	rjmp	.+424    	; 0x2054 <V2P_RunStateMachine+0x2b6>
    1eac:	0e 94 bf 08 	call	0x117e <USART_Rx>
    1eb0:	8b 31       	cpi	r24, 0x1B	; 27
    1eb2:	89 f5       	brne	.+98     	; 0x1f16 <V2P_RunStateMachine+0x178>
    1eb4:	c2 e0       	ldi	r28, 0x02	; 2
    1eb6:	87 cf       	rjmp	.-242    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1eb8:	0e 94 bf 08 	call	0x117e <USART_Rx>
    1ebc:	99 27       	eor	r25, r25
    1ebe:	90 93 46 01 	sts	0x0146, r25
    1ec2:	80 93 45 01 	sts	0x0145, r24
    1ec6:	c3 e0       	ldi	r28, 0x03	; 3
    1ec8:	7e cf       	rjmp	.-260    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1eca:	0e 94 bf 08 	call	0x117e <USART_Rx>
    1ece:	99 27       	eor	r25, r25
    1ed0:	98 2f       	mov	r25, r24
    1ed2:	88 27       	eor	r24, r24
    1ed4:	90 93 44 01 	sts	0x0144, r25
    1ed8:	80 93 43 01 	sts	0x0143, r24
    1edc:	c4 e0       	ldi	r28, 0x04	; 4
    1ede:	73 cf       	rjmp	.-282    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1ee0:	0e 94 bf 08 	call	0x117e <USART_Rx>
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	33 27       	eor	r19, r19
    1ee8:	80 91 43 01 	lds	r24, 0x0143
    1eec:	90 91 44 01 	lds	r25, 0x0144
    1ef0:	82 2b       	or	r24, r18
    1ef2:	93 2b       	or	r25, r19
    1ef4:	90 93 44 01 	sts	0x0144, r25
    1ef8:	80 93 43 01 	sts	0x0143, r24
    1efc:	83 51       	subi	r24, 0x13	; 19
    1efe:	91 40       	sbci	r25, 0x01	; 1
    1f00:	50 f4       	brcc	.+20     	; 0x1f16 <V2P_RunStateMachine+0x178>
    1f02:	c5 e0       	ldi	r28, 0x05	; 5
    1f04:	ee 24       	eor	r14, r14
    1f06:	ff 24       	eor	r15, r15
    1f08:	5e cf       	rjmp	.-324    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1f0a:	0e 94 bf 08 	call	0x117e <USART_Rx>
    1f0e:	8e 30       	cpi	r24, 0x0E	; 14
    1f10:	11 f4       	brne	.+4      	; 0x1f16 <V2P_RunStateMachine+0x178>
    1f12:	c6 e0       	ldi	r28, 0x06	; 6
    1f14:	58 cf       	rjmp	.-336    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1f16:	c9 e0       	ldi	r28, 0x09	; 9
    1f18:	56 cf       	rjmp	.-340    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1f1a:	80 91 43 01 	lds	r24, 0x0143
    1f1e:	90 91 44 01 	lds	r25, 0x0144
    1f22:	e8 16       	cp	r14, r24
    1f24:	f9 06       	cpc	r15, r25
    1f26:	11 f4       	brne	.+4      	; 0x1f2c <V2P_RunStateMachine+0x18e>
    1f28:	c7 e0       	ldi	r28, 0x07	; 7
    1f2a:	4d cf       	rjmp	.-358    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1f2c:	87 01       	movw	r16, r14
    1f2e:	09 5b       	subi	r16, 0xB9	; 185
    1f30:	1e 4f       	sbci	r17, 0xFE	; 254
    1f32:	08 94       	sec
    1f34:	e1 1c       	adc	r14, r1
    1f36:	f1 1c       	adc	r15, r1
    1f38:	0e 94 bf 08 	call	0x117e <USART_Rx>
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	80 83       	st	Z, r24
    1f40:	42 cf       	rjmp	.-380    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    1f42:	0e 94 8d 0d 	call	0x1b1a <V2P_GetChecksum>
    1f46:	18 2f       	mov	r17, r24
    1f48:	0e 94 bf 08 	call	0x117e <USART_Rx>
    1f4c:	18 17       	cp	r17, r24
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <V2P_RunStateMachine+0x1b4>
    1f50:	74 c0       	rjmp	.+232    	; 0x203a <V2P_RunStateMachine+0x29c>
    1f52:	80 91 47 01 	lds	r24, 0x0147
    1f56:	99 27       	eor	r25, r25
    1f58:	84 30       	cpi	r24, 0x04	; 4
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	3c f4       	brge	.+14     	; 0x1f6c <V2P_RunStateMachine+0x1ce>
    1f5e:	82 30       	cpi	r24, 0x02	; 2
    1f60:	91 05       	cpc	r25, r1
    1f62:	0c f0       	brlt	.+2      	; 0x1f66 <V2P_RunStateMachine+0x1c8>
    1f64:	61 c0       	rjmp	.+194    	; 0x2028 <V2P_RunStateMachine+0x28a>
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	39 f0       	breq	.+14     	; 0x1f78 <V2P_RunStateMachine+0x1da>
    1f6a:	61 c0       	rjmp	.+194    	; 0x202e <V2P_RunStateMachine+0x290>
    1f6c:	86 30       	cpi	r24, 0x06	; 6
    1f6e:	91 05       	cpc	r25, r1
    1f70:	e9 f0       	breq	.+58     	; 0x1fac <V2P_RunStateMachine+0x20e>
    1f72:	07 97       	sbiw	r24, 0x07	; 7
    1f74:	99 f0       	breq	.+38     	; 0x1f9c <V2P_RunStateMachine+0x1fe>
    1f76:	5b c0       	rjmp	.+182    	; 0x202e <V2P_RunStateMachine+0x290>
    1f78:	8b e0       	ldi	r24, 0x0B	; 11
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	90 93 44 01 	sts	0x0144, r25
    1f80:	80 93 43 01 	sts	0x0143, r24
    1f84:	a7 e4       	ldi	r26, 0x47	; 71
    1f86:	b1 e0       	ldi	r27, 0x01	; 1
    1f88:	e5 ec       	ldi	r30, 0xC5	; 197
    1f8a:	f3 e0       	ldi	r31, 0x03	; 3
    1f8c:	9a e0       	ldi	r25, 0x0A	; 10
    1f8e:	84 91       	lpm	r24, Z
    1f90:	8d 93       	st	X+, r24
    1f92:	91 50       	subi	r25, 0x01	; 1
    1f94:	31 96       	adiw	r30, 0x01	; 1
    1f96:	97 ff       	sbrs	r25, 7
    1f98:	fa cf       	rjmp	.-12     	; 0x1f8e <V2P_RunStateMachine+0x1f0>
    1f9a:	58 c0       	rjmp	.+176    	; 0x204c <V2P_RunStateMachine+0x2ae>
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	90 93 44 01 	sts	0x0144, r25
    1fa4:	80 93 43 01 	sts	0x0143, r24
    1fa8:	80 ec       	ldi	r24, 0xC0	; 192
    1faa:	4e c0       	rjmp	.+156    	; 0x2048 <V2P_RunStateMachine+0x2aa>
    1fac:	82 e0       	ldi	r24, 0x02	; 2
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	90 93 44 01 	sts	0x0144, r25
    1fb4:	80 93 43 01 	sts	0x0143, r24
    1fb8:	0e 94 a6 0e 	call	0x1d4c <V2P_CheckForExtendedAddress>
    1fbc:	80 91 48 01 	lds	r24, 0x0148
    1fc0:	99 27       	eor	r25, r25
    1fc2:	aa 27       	eor	r26, r26
    1fc4:	bb 27       	eor	r27, r27
    1fc6:	b8 2f       	mov	r27, r24
    1fc8:	aa 27       	eor	r26, r26
    1fca:	99 27       	eor	r25, r25
    1fcc:	88 27       	eor	r24, r24
    1fce:	20 91 49 01 	lds	r18, 0x0149
    1fd2:	33 27       	eor	r19, r19
    1fd4:	44 27       	eor	r20, r20
    1fd6:	55 27       	eor	r21, r21
    1fd8:	a9 01       	movw	r20, r18
    1fda:	33 27       	eor	r19, r19
    1fdc:	22 27       	eor	r18, r18
    1fde:	82 2b       	or	r24, r18
    1fe0:	93 2b       	or	r25, r19
    1fe2:	a4 2b       	or	r26, r20
    1fe4:	b5 2b       	or	r27, r21
    1fe6:	20 91 4a 01 	lds	r18, 0x014A
    1fea:	33 27       	eor	r19, r19
    1fec:	44 27       	eor	r20, r20
    1fee:	55 27       	eor	r21, r21
    1ff0:	54 2f       	mov	r21, r20
    1ff2:	43 2f       	mov	r20, r19
    1ff4:	32 2f       	mov	r19, r18
    1ff6:	22 27       	eor	r18, r18
    1ff8:	82 2b       	or	r24, r18
    1ffa:	93 2b       	or	r25, r19
    1ffc:	a4 2b       	or	r26, r20
    1ffe:	b5 2b       	or	r27, r21
    2000:	20 91 4b 01 	lds	r18, 0x014B
    2004:	33 27       	eor	r19, r19
    2006:	44 27       	eor	r20, r20
    2008:	55 27       	eor	r21, r21
    200a:	82 2b       	or	r24, r18
    200c:	93 2b       	or	r25, r19
    200e:	a4 2b       	or	r26, r20
    2010:	b5 2b       	or	r27, r21
    2012:	80 93 3e 01 	sts	0x013E, r24
    2016:	90 93 3f 01 	sts	0x013F, r25
    201a:	a0 93 40 01 	sts	0x0140, r26
    201e:	b0 93 41 01 	sts	0x0141, r27
    2022:	10 92 48 01 	sts	0x0148, r1
    2026:	12 c0       	rjmp	.+36     	; 0x204c <V2P_RunStateMachine+0x2ae>
    2028:	0e 94 ee 0d 	call	0x1bdc <V2P_GetSetParamater>
    202c:	11 c0       	rjmp	.+34     	; 0x2050 <V2P_RunStateMachine+0x2b2>
    202e:	e0 91 02 01 	lds	r30, 0x0102
    2032:	f0 91 03 01 	lds	r31, 0x0103
    2036:	09 95       	icall
    2038:	0b c0       	rjmp	.+22     	; 0x2050 <V2P_RunStateMachine+0x2b2>
    203a:	82 e0       	ldi	r24, 0x02	; 2
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	90 93 44 01 	sts	0x0144, r25
    2042:	80 93 43 01 	sts	0x0143, r24
    2046:	81 ec       	ldi	r24, 0xC1	; 193
    2048:	80 93 48 01 	sts	0x0148, r24
    204c:	0e 94 ae 0d 	call	0x1b5c <V2P_SendPacket>
    2050:	c8 e0       	ldi	r28, 0x08	; 8
    2052:	b9 ce       	rjmp	.-654    	; 0x1dc6 <V2P_RunStateMachine+0x28>
    2054:	cf 91       	pop	r28
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	08 95       	ret

00002060 <ISPCC_EnterChipProgrammingMode>:

// ======================================================================================

void ISPCC_EnterChipProgrammingMode(void)
{
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	cf 93       	push	r28
	uint8_t ByteDelay = PacketBytes[5];
    2066:	10 91 4c 01 	lds	r17, 0x014C
	uint8_t Attempts  = PacketBytes[4];
    206a:	c0 91 4b 01 	lds	r28, 0x014B
	uint8_t Response;

	MAIN_Delay1MS(PacketBytes[2]);         // Wait before continuing, amount specified in the packet
    206e:	80 91 49 01 	lds	r24, 0x0149
    2072:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>

	if ((!(Attempts)) || (Attempts > 100)) // if no attempts or too high a value is specified, a fixed number is chosen
    2076:	8c 2f       	mov	r24, r28
    2078:	81 50       	subi	r24, 0x01	; 1
    207a:	84 36       	cpi	r24, 0x64	; 100
    207c:	08 f0       	brcs	.+2      	; 0x2080 <ISPCC_EnterChipProgrammingMode+0x20>
	   Attempts = 24;
    207e:	c8 e1       	ldi	r28, 0x18	; 24
		
	while (Attempts--)
	{
		USI_SPITransmit(PacketBytes[8]);
		MAIN_Delay1MS(ByteDelay);
		USI_SPITransmit(PacketBytes[9]);
		MAIN_Delay1MS(ByteDelay);
			
		Response = USI_SPITransmit(PacketBytes[10]);
		MAIN_Delay1MS(ByteDelay);

		if (PacketBytes[7] == ISPCC_POLL_MODE_AVR)
		  USI_SPITransmit(PacketBytes[11]);
		else
		  Response = USI_SPITransmit(PacketBytes[11]);
				
		if (!(PacketBytes[7]) || (Response == PacketBytes[6])) // Polling disabled, or returned value matches expected poll value
		{
			MAIN_Delay1MS(ByteDelay);

			InProgrammingMode = TRUE;
			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;
			return;
		}
		
		MAIN_Delay1MS(ByteDelay);
		USI_SPIToggleClock();            // Out of sync, shift in one bit and try again
    2080:	c1 50       	subi	r28, 0x01	; 1
    2082:	cf 3f       	cpi	r28, 0xFF	; 255
    2084:	09 f4       	brne	.+2      	; 0x2088 <ISPCC_EnterChipProgrammingMode+0x28>
    2086:	3f c0       	rjmp	.+126    	; 0x2106 <ISPCC_EnterChipProgrammingMode+0xa6>
    2088:	80 91 4f 01 	lds	r24, 0x014F
    208c:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    2090:	81 2f       	mov	r24, r17
    2092:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    2096:	80 91 50 01 	lds	r24, 0x0150
    209a:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    209e:	81 2f       	mov	r24, r17
    20a0:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    20a4:	80 91 51 01 	lds	r24, 0x0151
    20a8:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    20ac:	08 2f       	mov	r16, r24
    20ae:	81 2f       	mov	r24, r17
    20b0:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    20b4:	80 91 4e 01 	lds	r24, 0x014E
    20b8:	83 30       	cpi	r24, 0x03	; 3
    20ba:	29 f4       	brne	.+10     	; 0x20c6 <ISPCC_EnterChipProgrammingMode+0x66>
    20bc:	80 91 52 01 	lds	r24, 0x0152
    20c0:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    20c4:	05 c0       	rjmp	.+10     	; 0x20d0 <ISPCC_EnterChipProgrammingMode+0x70>
    20c6:	80 91 52 01 	lds	r24, 0x0152
    20ca:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    20ce:	08 2f       	mov	r16, r24
    20d0:	80 91 4e 01 	lds	r24, 0x014E
    20d4:	88 23       	and	r24, r24
    20d6:	21 f0       	breq	.+8      	; 0x20e0 <ISPCC_EnterChipProgrammingMode+0x80>
    20d8:	80 91 4d 01 	lds	r24, 0x014D
    20dc:	08 17       	cp	r16, r24
    20de:	69 f4       	brne	.+26     	; 0x20fa <ISPCC_EnterChipProgrammingMode+0x9a>
    20e0:	81 2f       	mov	r24, r17
    20e2:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	80 93 42 01 	sts	0x0142, r24
    20ec:	81 b3       	in	r24, 0x11	; 17
    20ee:	8f 7c       	andi	r24, 0xCF	; 207
    20f0:	80 62       	ori	r24, 0x20	; 32
    20f2:	81 bb       	out	0x11, r24	; 17
    20f4:	10 92 48 01 	sts	0x0148, r1
    20f8:	0d c0       	rjmp	.+26     	; 0x2114 <ISPCC_EnterChipProgrammingMode+0xb4>
    20fa:	81 2f       	mov	r24, r17
    20fc:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    2100:	0e 94 5b 09 	call	0x12b6 <USI_SPIToggleClock>
    2104:	bd cf       	rjmp	.-134    	; 0x2080 <ISPCC_EnterChipProgrammingMode+0x20>
	}

	// If function hasn't returned by now, all the attempts have failed. Show this by
	// resetting the status leds to green (ready) and send a fail message.

	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
    2106:	81 b3       	in	r24, 0x11	; 17
    2108:	8f 7c       	andi	r24, 0xCF	; 207
    210a:	80 61       	ori	r24, 0x10	; 16
    210c:	81 bb       	out	0x11, r24	; 17
	PacketBytes[1] = STATUS_CMD_FAILED;
    210e:	80 ec       	ldi	r24, 0xC0	; 192
    2110:	80 93 48 01 	sts	0x0148, r24
    2114:	cf 91       	pop	r28
    2116:	1f 91       	pop	r17
    2118:	0f 91       	pop	r16
    211a:	08 95       	ret

0000211c <ISPCC_PollForProgComplete>:
}

void ISPCC_ProgramChip(void)
{
	uint16_t PollAddress  = 0;
	uint8_t  ProgMode     = PacketBytes[3];
	uint8_t  WriteCommand = PacketBytes[5];
	uint16_t StartAddress = (uint16_t)CurrAddress;
	uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
	                      | PacketBytes[2];
	uint8_t  PollType;
	uint8_t  ByteToWrite;
			
	if (ProgMode & ISPCC_PROG_MODE_PAGE)                 // Page writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++) // Transmit the page bytes
		{
			ByteToWrite = PacketBytes[10 + WriteByte];
		
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash write mode - word addresses so MSB/LSB masking 
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else                                         // EEPROM write mode - byte addresses so no masking 
			   USI_SPITransmit(WriteCommand);

			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Only the LSW of the address should be sent
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			if (!(PollAddress))
			{
				if ((PacketBytes[8] != ByteToWrite)       // Can do polling
				   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
				{
					PollAddress = (CurrAddress & 0xFFFF); // Save the current address
				
					if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
					   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
				}
			}

			// Flash addresses are in words; only increment address on odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();
		}

		PollType = ProgMode;

		if (ProgMode & ISPCC_PROG_MODE_PAGEDONE)         // If this packet is the end of a page, we need to send the program page command
		{
			USI_SPITransmit(PacketBytes[6]);             // Send the write program memory page command
			USI_SPITransmitWord(StartAddress);           // Send the page address word
			USI_SPITransmit(0x00);

			if (!(PollAddress))                          // No polling address
			   PollType = ((ProgMode & ~ISPCC_PAGE_POLLTYPE_MASK) | ISPCC_PAGE_POLLTYPE_WAIT);

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
	else                                                 // Flash Word writing mode or EEPROM byte writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++)
		{
			ByteToWrite = PacketBytes[10 + WriteByte];

			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else
			   USI_SPITransmit(WriteCommand);					
					
			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Transmit the current address to the slave AVR
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			PollType = ProgMode;

			if ((PacketBytes[8] != ByteToWrite)           // Can do polling
			   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
			{
				PollAddress = (CurrAddress & 0xFFFF);     // Save the current address;

				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
				   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
			}
			else
			{
				PollType = ((ProgMode & ~ISPCC_WORD_POLLTYPE_MASK) | ISPCC_WORD_POLLTYPE_WAIT);
			}					

			// Flash addresses are in words; only increment address on the odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
}

void ISPCC_PollForProgComplete(const uint8_t PollData, uint16_t PollAddr)
{
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	eb 01       	movw	r28, r22
	uint8_t PollType;
	uint8_t ProgCommand;

	if (PollData & ISPCC_PROG_MODE_PAGE)
    2124:	99 27       	eor	r25, r25
    2126:	80 ff       	sbrs	r24, 0
    2128:	08 c0       	rjmp	.+16     	; 0x213a <ISPCC_PollForProgComplete+0x1e>
	   PollType = ((PollData & ISPCC_PAGE_POLLTYPE_MASK) >> ISPCC_PAGE_POLLTYPE_MASKSHIFT);
    212a:	80 77       	andi	r24, 0x70	; 112
    212c:	90 70       	andi	r25, 0x00	; 0
    212e:	34 e0       	ldi	r19, 0x04	; 4
    2130:	95 95       	asr	r25
    2132:	87 95       	ror	r24
    2134:	3a 95       	dec	r19
    2136:	e1 f7       	brne	.-8      	; 0x2130 <ISPCC_PollForProgComplete+0x14>
    2138:	04 c0       	rjmp	.+8      	; 0x2142 <ISPCC_PollForProgComplete+0x26>
	else
	   PollType = ((PollData & ISPCC_WORD_POLLTYPE_MASK) >> ISPCC_WORD_POLLTYPE_MASKSHIFT);	
    213a:	8e 70       	andi	r24, 0x0E	; 14
    213c:	90 70       	andi	r25, 0x00	; 0
    213e:	95 95       	asr	r25
    2140:	87 95       	ror	r24

	switch (PollType & ISPCC_POLLTYPE_MASK)
    2142:	99 27       	eor	r25, r25
    2144:	87 70       	andi	r24, 0x07	; 7
    2146:	90 70       	andi	r25, 0x00	; 0
    2148:	82 30       	cpi	r24, 0x02	; 2
    214a:	91 05       	cpc	r25, r1
    214c:	19 f0       	breq	.+6      	; 0x2154 <ISPCC_PollForProgComplete+0x38>
    214e:	04 97       	sbiw	r24, 0x04	; 4
    2150:	e1 f0       	breq	.+56     	; 0x218a <ISPCC_PollForProgComplete+0x6e>
    2152:	26 c0       	rjmp	.+76     	; 0x21a0 <ISPCC_PollForProgComplete+0x84>
	{
		case ISPCC_POLLTYPE_DATA:
			ProgCommand = PacketBytes[7];
    2154:	10 91 4e 01 	lds	r17, 0x014E
			
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash uses word addresses
    2158:	80 91 47 01 	lds	r24, 0x0147
    215c:	83 31       	cpi	r24, 0x13	; 19
    215e:	39 f4       	brne	.+14     	; 0x216e <ISPCC_PollForProgComplete+0x52>
			{
				ProgCommand  |= ((PollAddr & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ);
    2160:	81 2f       	mov	r24, r17
    2162:	99 27       	eor	r25, r25
    2164:	c0 fd       	sbrc	r28, 0
    2166:	88 60       	ori	r24, 0x08	; 8
    2168:	18 2f       	mov	r17, r24
				PollAddr    >>= 1;
    216a:	d6 95       	lsr	r29
    216c:	c7 95       	ror	r28
			}

			do
			{
				USI_SPITransmit(ProgCommand);
    216e:	81 2f       	mov	r24, r17
    2170:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
				USI_SPITransmitWord(PollAddr);
    2174:	ce 01       	movw	r24, r28
    2176:	0e 94 4d 09 	call	0x129a <USI_SPITransmitWord>
			}
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    2180:	90 91 4f 01 	lds	r25, 0x014F
    2184:	89 17       	cp	r24, r25
    2186:	99 f3       	breq	.-26     	; 0x216e <ISPCC_PollForProgComplete+0x52>
			while (USI_SPITransmit(0x00) == PacketBytes[8]);
						
			break;
    2188:	0f c0       	rjmp	.+30     	; 0x21a8 <ISPCC_PollForProgComplete+0x8c>
		case ISPCC_POLLTYPE_READY:
			do
			   USI_SPITransmitWord(0xF000);
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	90 ef       	ldi	r25, 0xF0	; 240
    218e:	0e 94 4d 09 	call	0x129a <USI_SPITransmitWord>
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 4d 09 	call	0x129a <USI_SPITransmitWord>
    219a:	80 fd       	sbrc	r24, 0
    219c:	f6 cf       	rjmp	.-20     	; 0x218a <ISPCC_PollForProgComplete+0x6e>
			while (USI_SPITransmitWord(0x0000) & ISPCC_POLL_BUSYFLAG);

			break;
    219e:	04 c0       	rjmp	.+8      	; 0x21a8 <ISPCC_PollForProgComplete+0x8c>
		default:                                      // Default is Wait polling
			MAIN_Delay1MS(PacketBytes[4]);	
    21a0:	80 91 4b 01 	lds	r24, 0x014B
    21a4:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	1f 91       	pop	r17
    21ae:	08 95       	ret

000021b0 <ISPCC_ProgramChip>:
    21b0:	6f 92       	push	r6
    21b2:	7f 92       	push	r7
    21b4:	9f 92       	push	r9
    21b6:	af 92       	push	r10
    21b8:	bf 92       	push	r11
    21ba:	cf 92       	push	r12
    21bc:	df 92       	push	r13
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	00 e0       	ldi	r16, 0x00	; 0
    21cc:	10 e0       	ldi	r17, 0x00	; 0
    21ce:	90 90 4a 01 	lds	r9, 0x014A
    21d2:	c0 90 4c 01 	lds	r12, 0x014C
    21d6:	60 90 3e 01 	lds	r6, 0x013E
    21da:	70 90 3f 01 	lds	r7, 0x013F
    21de:	80 91 48 01 	lds	r24, 0x0148
    21e2:	99 27       	eor	r25, r25
    21e4:	b8 2e       	mov	r11, r24
    21e6:	aa 24       	eor	r10, r10
    21e8:	80 91 49 01 	lds	r24, 0x0149
    21ec:	99 27       	eor	r25, r25
    21ee:	a8 2a       	or	r10, r24
    21f0:	b9 2a       	or	r11, r25
    21f2:	90 fe       	sbrs	r9, 0
    21f4:	62 c0       	rjmp	.+196    	; 0x22ba <ISPCC_ProgramChip+0x10a>
    21f6:	78 01       	movw	r14, r16
    21f8:	0a 15       	cp	r16, r10
    21fa:	1b 05       	cpc	r17, r11
    21fc:	08 f0       	brcs	.+2      	; 0x2200 <ISPCC_ProgramChip+0x50>
    21fe:	46 c0       	rjmp	.+140    	; 0x228c <ISPCC_ProgramChip+0xdc>
    2200:	c1 e5       	ldi	r28, 0x51	; 81
    2202:	d1 e0       	ldi	r29, 0x01	; 1
    2204:	d9 90       	ld	r13, Y+
    2206:	80 91 47 01 	lds	r24, 0x0147
    220a:	83 31       	cpi	r24, 0x13	; 19
    220c:	31 f4       	brne	.+12     	; 0x221a <ISPCC_ProgramChip+0x6a>
    220e:	8c 2d       	mov	r24, r12
    2210:	99 27       	eor	r25, r25
    2212:	e0 fe       	sbrs	r14, 0
    2214:	03 c0       	rjmp	.+6      	; 0x221c <ISPCC_ProgramChip+0x6c>
    2216:	88 60       	ori	r24, 0x08	; 8
    2218:	01 c0       	rjmp	.+2      	; 0x221c <ISPCC_ProgramChip+0x6c>
    221a:	8c 2d       	mov	r24, r12
    221c:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    2220:	80 91 3e 01 	lds	r24, 0x013E
    2224:	90 91 3f 01 	lds	r25, 0x013F
    2228:	0e 94 4d 09 	call	0x129a <USI_SPITransmitWord>
    222c:	8d 2d       	mov	r24, r13
    222e:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    2232:	01 15       	cp	r16, r1
    2234:	11 05       	cpc	r17, r1
    2236:	d9 f4       	brne	.+54     	; 0x226e <ISPCC_ProgramChip+0xbe>
    2238:	80 91 4f 01 	lds	r24, 0x014F
    223c:	8d 15       	cp	r24, r13
    223e:	b9 f0       	breq	.+46     	; 0x226e <ISPCC_ProgramChip+0xbe>
    2240:	90 91 47 01 	lds	r25, 0x0147
    2244:	93 31       	cpi	r25, 0x13	; 19
    2246:	31 f0       	breq	.+12     	; 0x2254 <ISPCC_ProgramChip+0xa4>
    2248:	95 31       	cpi	r25, 0x15	; 21
    224a:	89 f4       	brne	.+34     	; 0x226e <ISPCC_ProgramChip+0xbe>
    224c:	80 91 50 01 	lds	r24, 0x0150
    2250:	8d 15       	cp	r24, r13
    2252:	69 f0       	breq	.+26     	; 0x226e <ISPCC_ProgramChip+0xbe>
    2254:	00 91 3e 01 	lds	r16, 0x013E
    2258:	10 91 3f 01 	lds	r17, 0x013F
    225c:	93 31       	cpi	r25, 0x13	; 19
    225e:	39 f4       	brne	.+14     	; 0x226e <ISPCC_ProgramChip+0xbe>
    2260:	00 0f       	add	r16, r16
    2262:	11 1f       	adc	r17, r17
    2264:	c7 01       	movw	r24, r14
    2266:	81 70       	andi	r24, 0x01	; 1
    2268:	90 70       	andi	r25, 0x00	; 0
    226a:	08 0f       	add	r16, r24
    226c:	19 1f       	adc	r17, r25
    226e:	e0 fc       	sbrc	r14, 0
    2270:	04 c0       	rjmp	.+8      	; 0x227a <ISPCC_ProgramChip+0xca>
    2272:	80 91 47 01 	lds	r24, 0x0147
    2276:	85 31       	cpi	r24, 0x15	; 21
    2278:	11 f4       	brne	.+4      	; 0x227e <ISPCC_ProgramChip+0xce>
    227a:	0e 94 92 0e 	call	0x1d24 <V2P_IncrementCurrAddress>
    227e:	08 94       	sec
    2280:	e1 1c       	adc	r14, r1
    2282:	f1 1c       	adc	r15, r1
    2284:	ea 14       	cp	r14, r10
    2286:	fb 04       	cpc	r15, r11
    2288:	08 f4       	brcc	.+2      	; 0x228c <ISPCC_ProgramChip+0xdc>
    228a:	bc cf       	rjmp	.-136    	; 0x2204 <ISPCC_ProgramChip+0x54>
    228c:	c9 2d       	mov	r28, r9
    228e:	97 fe       	sbrs	r9, 7
    2290:	69 c0       	rjmp	.+210    	; 0x2364 <ISPCC_ProgramChip+0x1b4>
    2292:	80 91 4d 01 	lds	r24, 0x014D
    2296:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    229a:	c3 01       	movw	r24, r6
    229c:	0e 94 4d 09 	call	0x129a <USI_SPITransmitWord>
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    22a6:	01 15       	cp	r16, r1
    22a8:	11 05       	cpc	r17, r1
    22aa:	11 f4       	brne	.+4      	; 0x22b0 <ISPCC_ProgramChip+0x100>
    22ac:	cf 78       	andi	r28, 0x8F	; 143
    22ae:	c0 61       	ori	r28, 0x10	; 16
    22b0:	b8 01       	movw	r22, r16
    22b2:	8c 2f       	mov	r24, r28
    22b4:	0e 94 8e 10 	call	0x211c <ISPCC_PollForProgComplete>
    22b8:	55 c0       	rjmp	.+170    	; 0x2364 <ISPCC_ProgramChip+0x1b4>
    22ba:	78 01       	movw	r14, r16
    22bc:	0a 15       	cp	r16, r10
    22be:	1b 05       	cpc	r17, r11
    22c0:	08 f0       	brcs	.+2      	; 0x22c4 <ISPCC_ProgramChip+0x114>
    22c2:	50 c0       	rjmp	.+160    	; 0x2364 <ISPCC_ProgramChip+0x1b4>
    22c4:	51 e5       	ldi	r21, 0x51	; 81
    22c6:	65 2e       	mov	r6, r21
    22c8:	51 e0       	ldi	r21, 0x01	; 1
    22ca:	75 2e       	mov	r7, r21
    22cc:	f3 01       	movw	r30, r6
    22ce:	d1 90       	ld	r13, Z+
    22d0:	3f 01       	movw	r6, r30
    22d2:	80 91 47 01 	lds	r24, 0x0147
    22d6:	83 31       	cpi	r24, 0x13	; 19
    22d8:	31 f4       	brne	.+12     	; 0x22e6 <ISPCC_ProgramChip+0x136>
    22da:	8c 2d       	mov	r24, r12
    22dc:	99 27       	eor	r25, r25
    22de:	e0 fe       	sbrs	r14, 0
    22e0:	03 c0       	rjmp	.+6      	; 0x22e8 <ISPCC_ProgramChip+0x138>
    22e2:	88 60       	ori	r24, 0x08	; 8
    22e4:	01 c0       	rjmp	.+2      	; 0x22e8 <ISPCC_ProgramChip+0x138>
    22e6:	8c 2d       	mov	r24, r12
    22e8:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    22ec:	80 91 3e 01 	lds	r24, 0x013E
    22f0:	90 91 3f 01 	lds	r25, 0x013F
    22f4:	0e 94 4d 09 	call	0x129a <USI_SPITransmitWord>
    22f8:	8d 2d       	mov	r24, r13
    22fa:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    22fe:	c9 2d       	mov	r28, r9
    2300:	80 91 4f 01 	lds	r24, 0x014F
    2304:	8d 15       	cp	r24, r13
    2306:	c1 f0       	breq	.+48     	; 0x2338 <ISPCC_ProgramChip+0x188>
    2308:	90 91 47 01 	lds	r25, 0x0147
    230c:	93 31       	cpi	r25, 0x13	; 19
    230e:	31 f0       	breq	.+12     	; 0x231c <ISPCC_ProgramChip+0x16c>
    2310:	95 31       	cpi	r25, 0x15	; 21
    2312:	91 f4       	brne	.+36     	; 0x2338 <ISPCC_ProgramChip+0x188>
    2314:	80 91 50 01 	lds	r24, 0x0150
    2318:	8d 15       	cp	r24, r13
    231a:	71 f0       	breq	.+28     	; 0x2338 <ISPCC_ProgramChip+0x188>
    231c:	00 91 3e 01 	lds	r16, 0x013E
    2320:	10 91 3f 01 	lds	r17, 0x013F
    2324:	93 31       	cpi	r25, 0x13	; 19
    2326:	59 f4       	brne	.+22     	; 0x233e <ISPCC_ProgramChip+0x18e>
    2328:	00 0f       	add	r16, r16
    232a:	11 1f       	adc	r17, r17
    232c:	c7 01       	movw	r24, r14
    232e:	81 70       	andi	r24, 0x01	; 1
    2330:	90 70       	andi	r25, 0x00	; 0
    2332:	08 0f       	add	r16, r24
    2334:	19 1f       	adc	r17, r25
    2336:	03 c0       	rjmp	.+6      	; 0x233e <ISPCC_ProgramChip+0x18e>
    2338:	c9 2d       	mov	r28, r9
    233a:	c1 7f       	andi	r28, 0xF1	; 241
    233c:	c2 60       	ori	r28, 0x02	; 2
    233e:	e0 fc       	sbrc	r14, 0
    2340:	04 c0       	rjmp	.+8      	; 0x234a <ISPCC_ProgramChip+0x19a>
    2342:	80 91 47 01 	lds	r24, 0x0147
    2346:	85 31       	cpi	r24, 0x15	; 21
    2348:	11 f4       	brne	.+4      	; 0x234e <ISPCC_ProgramChip+0x19e>
    234a:	0e 94 92 0e 	call	0x1d24 <V2P_IncrementCurrAddress>
    234e:	b8 01       	movw	r22, r16
    2350:	8c 2f       	mov	r24, r28
    2352:	0e 94 8e 10 	call	0x211c <ISPCC_PollForProgComplete>
    2356:	08 94       	sec
    2358:	e1 1c       	adc	r14, r1
    235a:	f1 1c       	adc	r15, r1
    235c:	ea 14       	cp	r14, r10
    235e:	fb 04       	cpc	r15, r11
    2360:	08 f4       	brcc	.+2      	; 0x2364 <ISPCC_ProgramChip+0x1b4>
    2362:	b4 cf       	rjmp	.-152    	; 0x22cc <ISPCC_ProgramChip+0x11c>
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	1f 91       	pop	r17
    236a:	0f 91       	pop	r16
    236c:	ff 90       	pop	r15
    236e:	ef 90       	pop	r14
    2370:	df 90       	pop	r13
    2372:	cf 90       	pop	r12
    2374:	bf 90       	pop	r11
    2376:	af 90       	pop	r10
    2378:	9f 90       	pop	r9
    237a:	7f 90       	pop	r7
    237c:	6f 90       	pop	r6
    237e:	08 95       	ret

00002380 <AICI_InterpretPacket>:

// ======================================================================================

void AICI_InterpretPacket(void)
{
    2380:	df 92       	push	r13
    2382:	ef 92       	push	r14
    2384:	ff 92       	push	r15
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
	switch (PacketBytes[0])
    238e:	80 91 47 01 	lds	r24, 0x0147
    2392:	99 27       	eor	r25, r25
    2394:	86 31       	cpi	r24, 0x16	; 22
    2396:	91 05       	cpc	r25, r1
    2398:	09 f4       	brne	.+2      	; 0x239c <AICI_InterpretPacket+0x1c>
    239a:	fb c0       	rjmp	.+502    	; 0x2592 <AICI_InterpretPacket+0x212>
    239c:	87 31       	cpi	r24, 0x17	; 23
    239e:	91 05       	cpc	r25, r1
    23a0:	94 f4       	brge	.+36     	; 0x23c6 <AICI_InterpretPacket+0x46>
    23a2:	82 31       	cpi	r24, 0x12	; 18
    23a4:	91 05       	cpc	r25, r1
    23a6:	09 f4       	brne	.+2      	; 0x23aa <AICI_InterpretPacket+0x2a>
    23a8:	60 c0       	rjmp	.+192    	; 0x246a <AICI_InterpretPacket+0xea>
    23aa:	83 31       	cpi	r24, 0x13	; 19
    23ac:	91 05       	cpc	r25, r1
    23ae:	3c f4       	brge	.+14     	; 0x23be <AICI_InterpretPacket+0x3e>
    23b0:	80 31       	cpi	r24, 0x10	; 16
    23b2:	91 05       	cpc	r25, r1
    23b4:	f9 f0       	breq	.+62     	; 0x23f4 <AICI_InterpretPacket+0x74>
    23b6:	41 97       	sbiw	r24, 0x11	; 17
    23b8:	09 f4       	brne	.+2      	; 0x23bc <AICI_InterpretPacket+0x3c>
    23ba:	3d c0       	rjmp	.+122    	; 0x2436 <AICI_InterpretPacket+0xb6>
    23bc:	3e c1       	rjmp	.+636    	; 0x263a <AICI_InterpretPacket+0x2ba>
    23be:	44 97       	sbiw	r24, 0x14	; 20
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <AICI_InterpretPacket+0x44>
    23c2:	e7 c0       	rjmp	.+462    	; 0x2592 <AICI_InterpretPacket+0x212>
    23c4:	2f c1       	rjmp	.+606    	; 0x2624 <AICI_InterpretPacket+0x2a4>
    23c6:	89 31       	cpi	r24, 0x19	; 25
    23c8:	91 05       	cpc	r25, r1
    23ca:	09 f4       	brne	.+2      	; 0x23ce <AICI_InterpretPacket+0x4e>
    23cc:	cc c0       	rjmp	.+408    	; 0x2566 <AICI_InterpretPacket+0x1e6>
    23ce:	8a 31       	cpi	r24, 0x1A	; 26
    23d0:	91 05       	cpc	r25, r1
    23d2:	44 f4       	brge	.+16     	; 0x23e4 <AICI_InterpretPacket+0x64>
    23d4:	87 31       	cpi	r24, 0x17	; 23
    23d6:	91 05       	cpc	r25, r1
    23d8:	09 f4       	brne	.+2      	; 0x23dc <AICI_InterpretPacket+0x5c>
    23da:	c5 c0       	rjmp	.+394    	; 0x2566 <AICI_InterpretPacket+0x1e6>
    23dc:	48 97       	sbiw	r24, 0x18	; 24
    23de:	09 f4       	brne	.+2      	; 0x23e2 <AICI_InterpretPacket+0x62>
    23e0:	a5 c0       	rjmp	.+330    	; 0x252c <AICI_InterpretPacket+0x1ac>
    23e2:	2b c1       	rjmp	.+598    	; 0x263a <AICI_InterpretPacket+0x2ba>
    23e4:	8d 31       	cpi	r24, 0x1D	; 29
    23e6:	91 05       	cpc	r25, r1
    23e8:	0c f4       	brge	.+2      	; 0x23ec <AICI_InterpretPacket+0x6c>
    23ea:	a0 c0       	rjmp	.+320    	; 0x252c <AICI_InterpretPacket+0x1ac>
    23ec:	4d 97       	sbiw	r24, 0x1d	; 29
    23ee:	09 f4       	brne	.+2      	; 0x23f2 <AICI_InterpretPacket+0x72>
    23f0:	61 c0       	rjmp	.+194    	; 0x24b4 <AICI_InterpretPacket+0x134>
    23f2:	23 c1       	rjmp	.+582    	; 0x263a <AICI_InterpretPacket+0x2ba>
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
    23f4:	82 e0       	ldi	r24, 0x02	; 2
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	90 93 44 01 	sts	0x0144, r25
    23fc:	80 93 43 01 	sts	0x0143, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2400:	a1 e0       	ldi	r26, 0x01	; 1
    2402:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2404:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
    2408:	80 2d       	mov	r24, r0
    240a:	0e 94 20 09 	call	0x1240 <USI_SPIInitMaster>
			
			USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));

			MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);  // Pull the slave AVR's RESET line to active
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
			MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE); // Orange = Busy
    2414:	81 b3       	in	r24, 0x11	; 17
    2416:	80 63       	ori	r24, 0x30	; 48
    2418:	81 bb       	out	0x11, r24	; 17
			ISPCC_EnterChipProgrammingMode();       // Run the Enter Programming Mode routine
    241a:	0e 94 30 10 	call	0x2060 <ISPCC_EnterChipProgrammingMode>

			if (InProgrammingMode)
    241e:	80 91 42 01 	lds	r24, 0x0142
    2422:	88 23       	and	r24, r24
    2424:	19 f0       	breq	.+6      	; 0x242c <AICI_InterpretPacket+0xac>
			   LCD_puts_f(AVRISPModeMessage);
    2426:	8b ed       	ldi	r24, 0xDB	; 219
    2428:	93 e0       	ldi	r25, 0x03	; 3
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <AICI_InterpretPacket+0xb0>
			else
			   LCD_puts_f(SyncErrorMessage);
    242c:	80 ed       	ldi	r24, 0xD0	; 208
    242e:	93 e0       	ldi	r25, 0x03	; 3
    2430:	0e 94 dd 07 	call	0xfba <LCD_puts_f>
			
			break;
    2434:	0b c1       	rjmp	.+534    	; 0x264c <AICI_InterpretPacket+0x2cc>
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;
    2436:	82 e0       	ldi	r24, 0x02	; 2
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	90 93 44 01 	sts	0x0144, r25
    243e:	80 93 43 01 	sts	0x0143, r24

			MAIN_Delay1MS(PacketBytes[1]);           // Wait for the "PreDelay" amount specified in the packet
    2442:	80 91 48 01 	lds	r24, 0x0148
    2446:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Non programming mode = green status led
    244a:	81 b3       	in	r24, 0x11	; 17
    244c:	8f 7c       	andi	r24, 0xCF	; 207
    244e:	80 61       	ori	r24, 0x10	; 16
    2450:	81 bb       	out	0x11, r24	; 17
			InProgrammingMode = FALSE;
    2452:	10 92 42 01 	sts	0x0142, r1
			MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
			MAIN_Delay1MS(PacketBytes[2]);           // Wait for the "PostDelay" amount specified in the packet
    245c:	80 91 49 01 	lds	r24, 0x0149
    2460:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
			
			USI_SPIOff();
    2464:	0e 94 30 09 	call	0x1260 <USI_SPIOff>
    2468:	e5 c0       	rjmp	.+458    	; 0x2634 <AICI_InterpretPacket+0x2b4>

			PacketBytes[1] = STATUS_CMD_OK;      // Return OK

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	90 93 44 01 	sts	0x0144, r25
    2472:	80 93 43 01 	sts	0x0143, r24
			
			for (uint8_t PacketB = 3; PacketB <= 6; PacketB++) // Send the erase commands to the slave AVR
    2476:	c3 e0       	ldi	r28, 0x03	; 3
    2478:	0a e4       	ldi	r16, 0x4A	; 74
    247a:	11 e0       	ldi	r17, 0x01	; 1
				USI_SPITransmit(PacketBytes[PacketB]);
    247c:	f8 01       	movw	r30, r16
    247e:	81 91       	ld	r24, Z+
    2480:	8f 01       	movw	r16, r30
    2482:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    2486:	c1 50       	subi	r28, 0x01	; 1
    2488:	c7 ff       	sbrs	r28, 7
    248a:	f8 cf       	rjmp	.-16     	; 0x247c <AICI_InterpretPacket+0xfc>

			if (PacketBytes[2])                  // Poll mode, value of 1 indicates a busy flag wait
    248c:	80 91 49 01 	lds	r24, 0x0149
    2490:	88 23       	and	r24, r24
    2492:	59 f0       	breq	.+22     	; 0x24aa <AICI_InterpretPacket+0x12a>
			{
				do
					USI_SPITransmitWord(0xF000);
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	90 ef       	ldi	r25, 0xF0	; 240
    2498:	0e 94 4d 09 	call	0x129a <USI_SPITransmitWord>
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	0e 94 4d 09 	call	0x129a <USI_SPITransmitWord>
    24a4:	80 fd       	sbrc	r24, 0
    24a6:	f6 cf       	rjmp	.-20     	; 0x2494 <AICI_InterpretPacket+0x114>
    24a8:	c5 c0       	rjmp	.+394    	; 0x2634 <AICI_InterpretPacket+0x2b4>
				while (USI_SPITransmitWord(0x0000) & 0x01);
			}
			else                                // Poll mode flag of 0 indicates a predefined delay
			{
				MAIN_Delay1MS(PacketBytes[1]);   // Wait the specified interval to ensure erase complete
    24aa:	80 91 48 01 	lds	r24, 0x0148
    24ae:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    24b2:	c0 c0       	rjmp	.+384    	; 0x2634 <AICI_InterpretPacket+0x2b4>
			}
			
			PacketBytes[1] = STATUS_CMD_OK;      // Always return OK
			
			break;
		case CMD_SPI_MULTI:
				MessageSize = (3 + PacketBytes[2]);    // Number of recieved bytes, plus two OKs and the command byte
    24b4:	e0 90 49 01 	lds	r14, 0x0149
    24b8:	8e 2d       	mov	r24, r14
    24ba:	99 27       	eor	r25, r25
    24bc:	03 96       	adiw	r24, 0x03	; 3
    24be:	90 93 44 01 	sts	0x0144, r25
    24c2:	80 93 43 01 	sts	0x0143, r24
		
				uint8_t TxBytes      = PacketBytes[1]; // \. The packet data is overwritten during the transfer. Because
    24c6:	00 91 48 01 	lds	r16, 0x0148
				uint8_t RxStartByte  = PacketBytes[2]; // |  of this each data byte must be stored into temp variables
				uint8_t RxBytes      = PacketBytes[3]; // /  so that their contents are not lost.
    24ca:	f0 90 4a 01 	lds	r15, 0x014A
				uint8_t RxByteNum    = 1;
    24ce:	c1 e0       	ldi	r28, 0x01	; 1
				uint8_t TxByteNum    = 1;
				uint8_t RecievedByte = 0;

				while (TxByteNum++ < TxBytes)          // Still bytes to transfer
				{
					RecievedByte = USI_SPITransmit(PacketBytes[3 + TxByteNum]); // Transmit the byte, store the answer

					if ((TxByteNum >= RxStartByte) && (RxByteNum < RxBytes))
					   PacketBytes[2 + RxByteNum++] = RecievedByte;
    24d0:	12 e0       	ldi	r17, 0x02	; 2
    24d2:	c0 17       	cp	r28, r16
    24d4:	a8 f4       	brcc	.+42     	; 0x2500 <AICI_InterpretPacket+0x180>
    24d6:	e1 2f       	mov	r30, r17
    24d8:	ff 27       	eor	r31, r31
    24da:	e9 5b       	subi	r30, 0xB9	; 185
    24dc:	fe 4f       	sbci	r31, 0xFE	; 254
    24de:	83 81       	ldd	r24, Z+3	; 0x03
    24e0:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    24e4:	1e 15       	cp	r17, r14
    24e6:	40 f0       	brcs	.+16     	; 0x24f8 <AICI_InterpretPacket+0x178>
    24e8:	cf 15       	cp	r28, r15
    24ea:	30 f4       	brcc	.+12     	; 0x24f8 <AICI_InterpretPacket+0x178>
    24ec:	ec 2f       	mov	r30, r28
    24ee:	ff 27       	eor	r31, r31
    24f0:	e9 5b       	subi	r30, 0xB9	; 185
    24f2:	fe 4f       	sbci	r31, 0xFE	; 254
    24f4:	82 83       	std	Z+2, r24	; 0x02
    24f6:	cf 5f       	subi	r28, 0xFF	; 255
    24f8:	81 2f       	mov	r24, r17
    24fa:	1f 5f       	subi	r17, 0xFF	; 255
    24fc:	80 17       	cp	r24, r16
    24fe:	58 f3       	brcs	.-42     	; 0x24d6 <AICI_InterpretPacket+0x156>
				}

				while (RxByteNum++ < RxBytes)                         // Still more bytes to recieve
				   PacketBytes[2 + RxByteNum] = USI_SPITransmit(0x00); // its answer to be recorded (or more bytes than sent need responses), send dummy bytes to fetch the response(s)
    2500:	8c 2f       	mov	r24, r28
    2502:	cf 5f       	subi	r28, 0xFF	; 255
    2504:	8f 15       	cp	r24, r15
    2506:	50 f4       	brcc	.+20     	; 0x251c <AICI_InterpretPacket+0x19c>
    2508:	0c 2f       	mov	r16, r28
    250a:	11 27       	eor	r17, r17
    250c:	09 5b       	subi	r16, 0xB9	; 185
    250e:	1e 4f       	sbci	r17, 0xFE	; 254
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    2516:	f8 01       	movw	r30, r16
    2518:	82 83       	std	Z+2, r24	; 0x02
    251a:	f2 cf       	rjmp	.-28     	; 0x2500 <AICI_InterpretPacket+0x180>

				PacketBytes[1]             = STATUS_CMD_OK; // Data should be encompassed
    251c:	10 92 48 01 	sts	0x0148, r1
				PacketBytes[3 + RxByteNum] = STATUS_CMD_OK; //  by STATS_CMD_OKs
    2520:	ec 2f       	mov	r30, r28
    2522:	ff 27       	eor	r31, r31
    2524:	e9 5b       	subi	r30, 0xB9	; 185
    2526:	fe 4f       	sbci	r31, 0xFE	; 254
    2528:	13 82       	std	Z+3, r1	; 0x03

				break;
    252a:	90 c0       	rjmp	.+288    	; 0x264c <AICI_InterpretPacket+0x2cc>
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;
    252c:	84 e0       	ldi	r24, 0x04	; 4
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	90 93 44 01 	sts	0x0144, r25
    2534:	80 93 43 01 	sts	0x0143, r24
	
			for (uint8_t ByteNum = 1; ByteNum <= 4; ByteNum++)
    2538:	c1 e0       	ldi	r28, 0x01	; 1
    253a:	09 e4       	ldi	r16, 0x49	; 73
    253c:	11 e0       	ldi	r17, 0x01	; 1
			{
				uint8_t Response = USI_SPITransmit(PacketBytes[1 + ByteNum]); // Transmit the four signature request bytes
    253e:	f8 01       	movw	r30, r16
    2540:	81 91       	ld	r24, Z+
    2542:	8f 01       	movw	r16, r30
    2544:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    2548:	98 2f       	mov	r25, r24

				if (ByteNum == PacketBytes[1])         // If the current byte is the requested signature byte, save the reponse in the packet
    254a:	80 91 48 01 	lds	r24, 0x0148
    254e:	c8 17       	cp	r28, r24
    2550:	11 f4       	brne	.+4      	; 0x2556 <AICI_InterpretPacket+0x1d6>
					PacketBytes[2] = Response;
    2552:	90 93 49 01 	sts	0x0149, r25
    2556:	cf 5f       	subi	r28, 0xFF	; 255
    2558:	c5 30       	cpi	r28, 0x05	; 5
    255a:	88 f3       	brcs	.-30     	; 0x253e <AICI_InterpretPacket+0x1be>
			}

			PacketBytes[1] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    255c:	10 92 48 01 	sts	0x0148, r1
			PacketBytes[3] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    2560:	10 92 4a 01 	sts	0x014A, r1

			break;
    2564:	73 c0       	rjmp	.+230    	; 0x264c <AICI_InterpretPacket+0x2cc>
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;
    2566:	83 e0       	ldi	r24, 0x03	; 3
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	90 93 44 01 	sts	0x0144, r25
    256e:	80 93 43 01 	sts	0x0143, r24
    2572:	08 e4       	ldi	r16, 0x48	; 72
    2574:	11 e0       	ldi	r17, 0x01	; 1
    2576:	c3 e0       	ldi	r28, 0x03	; 3
			
			for (uint8_t PacketB = 1; PacketB <= 4; PacketB++) // Send the lock-byte values to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    2578:	f8 01       	movw	r30, r16
    257a:	81 91       	ld	r24, Z+
    257c:	8f 01       	movw	r16, r30
    257e:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    2582:	c1 50       	subi	r28, 0x01	; 1
    2584:	c7 ff       	sbrs	r28, 7
    2586:	f8 cf       	rjmp	.-16     	; 0x2578 <AICI_InterpretPacket+0x1f8>

			PacketBytes[1] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    2588:	10 92 48 01 	sts	0x0148, r1
			PacketBytes[2] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    258c:	10 92 49 01 	sts	0x0149, r1

			break;
    2590:	5d c0       	rjmp	.+186    	; 0x264c <AICI_InterpretPacket+0x2cc>
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			MessageSize = 0;                           // Here to prevent compiler from complaining if a var dec appears straight after a case

			uint8_t  ReadCommand = PacketBytes[3];
    2592:	d0 90 4a 01 	lds	r13, 0x014A
			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8) // Load in the number of bytes that is to
    2596:	80 91 48 01 	lds	r24, 0x0148
    259a:	99 27       	eor	r25, r25
    259c:	d8 2f       	mov	r29, r24
    259e:	cc 27       	eor	r28, r28
    25a0:	80 91 49 01 	lds	r24, 0x0149
    25a4:	99 27       	eor	r25, r25
    25a6:	c8 2b       	or	r28, r24
    25a8:	d9 2b       	or	r29, r25
			                     | PacketBytes[2];                 // be read into a temp variable (MSB first)

			MessageSize = BytesToRead + 3;
    25aa:	23 96       	adiw	r28, 0x03	; 3
    25ac:	d0 93 44 01 	sts	0x0144, r29
    25b0:	c0 93 43 01 	sts	0x0143, r28
    25b4:	23 97       	sbiw	r28, 0x03	; 3

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
    25b6:	00 e0       	ldi	r16, 0x00	; 0
    25b8:	10 e0       	ldi	r17, 0x00	; 0
    25ba:	0c 17       	cp	r16, r28
    25bc:	1d 07       	cpc	r17, r29
    25be:	60 f5       	brcc	.+88     	; 0x2618 <AICI_InterpretPacket+0x298>
    25c0:	89 e4       	ldi	r24, 0x49	; 73
    25c2:	e8 2e       	mov	r14, r24
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	f8 2e       	mov	r15, r24
			{
				if (PacketBytes[0] == CMD_READ_FLASH_ISP)  // Flash read mode - word addresses so MSB/LSB masking nessesary
    25c8:	80 91 47 01 	lds	r24, 0x0147
    25cc:	84 31       	cpi	r24, 0x14	; 20
    25ce:	31 f4       	brne	.+12     	; 0x25dc <AICI_InterpretPacket+0x25c>
				{
					USI_SPITransmit(ReadCommand | ((ReadByte & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ));
    25d0:	8d 2d       	mov	r24, r13
    25d2:	99 27       	eor	r25, r25
    25d4:	00 ff       	sbrs	r16, 0
    25d6:	03 c0       	rjmp	.+6      	; 0x25de <AICI_InterpretPacket+0x25e>
    25d8:	88 60       	ori	r24, 0x08	; 8
    25da:	01 c0       	rjmp	.+2      	; 0x25de <AICI_InterpretPacket+0x25e>
				}
				else                                       // EEPROM read mode, address is in bytes and so no masking nessesary
				{
					USI_SPITransmit(ReadCommand);
    25dc:	8d 2d       	mov	r24, r13
    25de:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
				}
				
				USI_SPITransmitWord(CurrAddress);          // Transmit the current address to the slave AVR
    25e2:	80 91 3e 01 	lds	r24, 0x013E
    25e6:	90 91 3f 01 	lds	r25, 0x013F
    25ea:	0e 94 4d 09 	call	0x129a <USI_SPITransmitWord>

				PacketBytes[2 + ReadByte] = USI_SPITransmit(0x00); // Read in the byte stored at the requested location
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    25f4:	f7 01       	movw	r30, r14
    25f6:	80 83       	st	Z, r24

				if ((ReadByte & 0x01) || (PacketBytes[0] == CMD_READ_EEPROM_ISP)) // Flash addresses are given in words; only increment on the odd byte if reading the flash.
    25f8:	00 fd       	sbrc	r16, 0
    25fa:	04 c0       	rjmp	.+8      	; 0x2604 <AICI_InterpretPacket+0x284>
    25fc:	80 91 47 01 	lds	r24, 0x0147
    2600:	86 31       	cpi	r24, 0x16	; 22
    2602:	11 f4       	brne	.+4      	; 0x2608 <AICI_InterpretPacket+0x288>
				{
					V2P_IncrementCurrAddress();             // Increment the address counter
    2604:	0e 94 92 0e 	call	0x1d24 <V2P_IncrementCurrAddress>
    2608:	0f 5f       	subi	r16, 0xFF	; 255
    260a:	1f 4f       	sbci	r17, 0xFF	; 255
    260c:	08 94       	sec
    260e:	e1 1c       	adc	r14, r1
    2610:	f1 1c       	adc	r15, r1
    2612:	0c 17       	cp	r16, r28
    2614:	1d 07       	cpc	r17, r29
    2616:	c0 f2       	brcs	.-80     	; 0x25c8 <AICI_InterpretPacket+0x248>
				}
				else
				{
					if ((CurrAddress & 0x00FF0000) & !(CurrAddress & 0x0000FFFF))
					{
						CurrAddress |= (1UL << 31);        // Set MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
						V2P_CheckForExtendedAddress();
					}
				}
			}
			
			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    2618:	10 92 48 01 	sts	0x0148, r1
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    261c:	c9 5b       	subi	r28, 0xB9	; 185
    261e:	de 4f       	sbci	r29, 0xFE	; 254
    2620:	1a 82       	std	Y+2, r1	; 0x02

			break;
    2622:	14 c0       	rjmp	.+40     	; 0x264c <AICI_InterpretPacket+0x2cc>
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPCC_ProgramChip();                          // Program the bytes into the chip
    2624:	0e 94 d8 10 	call	0x21b0 <ISPCC_ProgramChip>
			
			MessageSize = 2;
    2628:	82 e0       	ldi	r24, 0x02	; 2
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	90 93 44 01 	sts	0x0144, r25
    2630:	80 93 43 01 	sts	0x0143, r24

			PacketBytes[1] = STATUS_CMD_OK;
    2634:	10 92 48 01 	sts	0x0148, r1
			
			break;
    2638:	09 c0       	rjmp	.+18     	; 0x264c <AICI_InterpretPacket+0x2cc>
		default:                                        // Unknown command, return error
			MessageSize = 1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	90 93 44 01 	sts	0x0144, r25
    2642:	80 93 43 01 	sts	0x0143, r24
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
    2646:	89 ec       	ldi	r24, 0xC9	; 201
    2648:	80 93 48 01 	sts	0x0148, r24
	}

	V2P_SendPacket();                                   // Send the response packet
    264c:	0e 94 ae 0d 	call	0x1b5c <V2P_SendPacket>
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	1f 91       	pop	r17
    2656:	0f 91       	pop	r16
    2658:	ff 90       	pop	r15
    265a:	ef 90       	pop	r14
    265c:	df 90       	pop	r13
    265e:	08 95       	ret

00002660 <PM_GetStoredDataSize>:

// ======================================================================================

uint32_t PM_GetStoredDataSize(const uint8_t Type)
{
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	24 97       	sbiw	r28, 0x04	; 4
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
	/* This take a **LOT** of code (202 bytes), and is accessed several times throughout
	   the program, so I've put it into a seperate function to save on flash.            */

	uint32_t ProgDataSize = 0;
    2674:	19 82       	std	Y+1, r1	; 0x01
    2676:	1a 82       	std	Y+2, r1	; 0x02
    2678:	1b 82       	std	Y+3, r1	; 0x03
    267a:	1c 82       	std	Y+4, r1	; 0x04
void 
eeprom_read_block (void *pointer_ram,
                   const void *pointer_eeprom,
                   size_t n)
{
    267c:	fe 01       	movw	r30, r28
    267e:	31 96       	adiw	r30, 0x01	; 1
    2680:	81 30       	cpi	r24, 0x01	; 1
    2682:	19 f4       	brne	.+6      	; 0x268a <PM_GetStoredDataSize+0x2a>
    2684:	ab e1       	ldi	r26, 0x1B	; 27
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	02 c0       	rjmp	.+4      	; 0x268e <PM_GetStoredDataSize+0x2e>
    268a:	af e1       	ldi	r26, 0x1F	; 31
    268c:	b0 e0       	ldi	r27, 0x00	; 0
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
             XCALL " __eeprom_read_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "st z+,__tmp_reg__" CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                  XCALL " __eeprom_read_block_" _REG_LOCATION_SUFFIX 
                : "+x" (pointer_eeprom),
                  "=z" (pointer_ram)
                : "z"  (pointer_ram)
                : "memory");
            }
          else
            {
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 
    268e:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    2690:	18 2e       	mov	r1, r24
    2692:	0e 94 ce 19 	call	0x339c <__eeprom_read_block_1F2021>

	eeprom_read_block((void*)&ProgDataSize, (const void*)((Type == TYPE_FLASH)? &EEPROMVars.DataSize : &EEPROMVars.EEPROMSize), 4);

	if (ProgDataSize == 0xFFFFFFFF)                                      // Blank EEPROM, return a size  of 0 bytes
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	9a 81       	ldd	r25, Y+2	; 0x02
    269a:	ab 81       	ldd	r26, Y+3	; 0x03
    269c:	bc 81       	ldd	r27, Y+4	; 0x04
    269e:	8f 5f       	subi	r24, 0xFF	; 255
    26a0:	9f 4f       	sbci	r25, 0xFF	; 255
    26a2:	af 4f       	sbci	r26, 0xFF	; 255
    26a4:	bf 4f       	sbci	r27, 0xFF	; 255
    26a6:	21 f4       	brne	.+8      	; 0x26b0 <PM_GetStoredDataSize+0x50>
	   ProgDataSize = 0x00;
    26a8:	19 82       	std	Y+1, r1	; 0x01
    26aa:	1a 82       	std	Y+2, r1	; 0x02
    26ac:	1b 82       	std	Y+3, r1	; 0x03
    26ae:	1c 82       	std	Y+4, r1	; 0x04

	return ProgDataSize;
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	9a 81       	ldd	r25, Y+2	; 0x02
    26b4:	ab 81       	ldd	r26, Y+3	; 0x03
    26b6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	24 96       	adiw	r28, 0x04	; 4
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	08 95       	ret

000026ce <PM_SetupDFAddressCounters>:

void PM_SetupDFAddressCounters(const uint8_t Type)
{
	uint32_t StartAddress;
	
	MemoryType  = Type;
    26ce:	80 93 5d 02 	sts	0x025D, r24
	GPageLength = 0;
    26d2:	10 92 5b 02 	sts	0x025B, r1
    26d6:	10 92 5a 02 	sts	0x025A, r1
    26da:	20 91 3e 01 	lds	r18, 0x013E
    26de:	30 91 3f 01 	lds	r19, 0x013F
    26e2:	40 91 40 01 	lds	r20, 0x0140
    26e6:	50 91 41 01 	lds	r21, 0x0141

	if (Type == TYPE_FLASH)                                              // Type 1 = Flash
    26ea:	81 30       	cpi	r24, 0x01	; 1
    26ec:	39 f4       	brne	.+14     	; 0x26fc <PM_SetupDFAddressCounters+0x2e>
		StartAddress = (CurrAddress << 1);                               // Convert flash word address to byte address
    26ee:	da 01       	movw	r26, r20
    26f0:	c9 01       	movw	r24, r18
    26f2:	88 0f       	add	r24, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	aa 1f       	adc	r26, r26
    26f8:	bb 1f       	adc	r27, r27
    26fa:	06 c0       	rjmp	.+12     	; 0x2708 <PM_SetupDFAddressCounters+0x3a>
	else
		StartAddress = CurrAddress + PM_EEPROM_OFFSET;                   // EEPROM uses byte addresses, and starts at the 257th kilobyte in Dataflash
    26fc:	da 01       	movw	r26, r20
    26fe:	c9 01       	movw	r24, r18
    2700:	80 50       	subi	r24, 0x00	; 0
    2702:	9c 4f       	sbci	r25, 0xFC	; 252
    2704:	ab 4f       	sbci	r26, 0xFB	; 251
    2706:	bf 4f       	sbci	r27, 0xFF	; 255
	
	CurrPageAddress = 0;
    2708:	10 92 6a 02 	sts	0x026A, r1
    270c:	10 92 69 02 	sts	0x0269, r1

	while (StartAddress >= DF_INTERNALDF_BUFFBYTES)                      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DF_INTERNALDF_BUFFBYTES;                         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    2710:	88 30       	cpi	r24, 0x08	; 8
    2712:	21 e0       	ldi	r18, 0x01	; 1
    2714:	92 07       	cpc	r25, r18
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	a2 07       	cpc	r26, r18
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	b2 07       	cpc	r27, r18
    271e:	a0 f0       	brcs	.+40     	; 0x2748 <PM_SetupDFAddressCounters+0x7a>
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	88 50       	subi	r24, 0x08	; 8
    2726:	91 40       	sbci	r25, 0x01	; 1
    2728:	a0 40       	sbci	r26, 0x00	; 0
    272a:	b0 40       	sbci	r27, 0x00	; 0
    272c:	2f 5f       	subi	r18, 0xFF	; 255
    272e:	3f 4f       	sbci	r19, 0xFF	; 255
    2730:	88 30       	cpi	r24, 0x08	; 8
    2732:	41 e0       	ldi	r20, 0x01	; 1
    2734:	94 07       	cpc	r25, r20
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	a4 07       	cpc	r26, r20
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	b4 07       	cpc	r27, r20
    273e:	90 f7       	brcc	.-28     	; 0x2724 <PM_SetupDFAddressCounters+0x56>
    2740:	30 93 6a 02 	sts	0x026A, r19
    2744:	20 93 69 02 	sts	0x0269, r18
	}
	
	CurrBuffByte = (uint16_t)StartAddress;                               // The buffer byte is the remainder
    2748:	90 93 63 02 	sts	0x0263, r25
    274c:	80 93 62 02 	sts	0x0262, r24
    2750:	08 95       	ret

00002752 <PM_StoreProgramByte>:
}

void PM_StoreProgramByte(const uint8_t Data)
{
    2752:	cf 93       	push	r28
    2754:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DF_INTERNALDF_BUFFBYTES)
    2756:	80 91 62 02 	lds	r24, 0x0262
    275a:	90 91 63 02 	lds	r25, 0x0263
    275e:	88 50       	subi	r24, 0x08	; 8
    2760:	91 40       	sbci	r25, 0x01	; 1
    2762:	a9 f4       	brne	.+42     	; 0x278e <PM_StoreProgramByte+0x3c>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    2764:	80 91 69 02 	lds	r24, 0x0269
    2768:	90 91 6a 02 	lds	r25, 0x026A
    276c:	9c 01       	movw	r18, r24
    276e:	01 96       	adiw	r24, 0x01	; 1
    2770:	90 93 6a 02 	sts	0x026A, r25
    2774:	80 93 69 02 	sts	0x0269, r24
    2778:	c9 01       	movw	r24, r18
    277a:	0e 94 84 0a 	call	0x1508 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 f0 09 	call	0x13e0 <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    2786:	10 92 63 02 	sts	0x0263, r1
    278a:	10 92 62 02 	sts	0x0262, r1
	}
	
	SPI_SPITransmit(Data);                                               // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    278e:	8c 2f       	mov	r24, r28
    2790:	0e 94 d5 08 	call	0x11aa <SPI_SPITransmit>
	CurrBuffByte++;
    2794:	80 91 62 02 	lds	r24, 0x0262
    2798:	90 91 63 02 	lds	r25, 0x0263
    279c:	01 96       	adiw	r24, 0x01	; 1
    279e:	90 93 63 02 	sts	0x0263, r25
    27a2:	80 93 62 02 	sts	0x0262, r24
	GPageLength++;
    27a6:	80 91 5a 02 	lds	r24, 0x025A
    27aa:	90 91 5b 02 	lds	r25, 0x025B
    27ae:	01 96       	adiw	r24, 0x01	; 1
    27b0:	90 93 5b 02 	sts	0x025B, r25
    27b4:	80 93 5a 02 	sts	0x025A, r24
    27b8:	cf 91       	pop	r28
    27ba:	08 95       	ret

000027bc <PM_CheckEndOfProgramming>:
}

void PM_InterpretAVRISPPacket(void)
{
	uint8_t* EEPROMAddress;

	switch (PacketBytes[0])
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
						
			for (uint8_t PacketB = 0; PacketB <= 11; PacketB++)          // Save the enter programming mode command bytes
			  eeprom_write_byte(&EEPROMVars.EnterProgMode[PacketB], PacketBytes[PacketB]);
			
			InProgrammingMode = TRUE;                                    // Set the flag, prevent the user from exiting the V2P state machine			
			CurrentMode = PM_NO_SETUP;                                   // Clear the current mode variable

			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;

			break;			
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;

			PM_CheckEndOfProgramming();                                  // Check if the last command was a program - if so store the program length
			PM_CheckEndOfFuseLockStore();                                // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
			
			InProgrammingMode = FALSE;                                   // Clear the flag, allow the user to exit the V2P state machine

			DF_EnableDataflash(FALSE);

			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
			PacketBytes[1] = STATUS_CMD_OK;

			break;
		case CMD_READ_SIGNATURE_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x01;                                       // Signature bytes all return "01" in storage mode
			PacketBytes[3] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;

			for (uint8_t PacketB = 1; PacketB <= 6; PacketB++)          // Save the erase chip command bytes to EEPROM
			  eeprom_write_byte(&EEPROMVars.EraseChip[PacketB], PacketBytes[PacketB]);

			for (uint8_t Byte = 0; Byte < 8; Byte++)                    // Clear the program and EEPROM size counters
			{
				eeprom_write_byte(&EEPROMVars.DataSize[Byte], 0x00);
				eeprom_write_byte(&EEPROMVars.EEPROMSize[Byte], 0x00);
			}
						
			eeprom_write_byte(&EEPROMVars.EraseCmdStored, TRUE);
			
			PacketBytes[1] = STATUS_CMD_OK;
			
			break;
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x00;                                      // Return 0x00 for the OSCCAL byte
			PacketBytes[3] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs

			break;
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
			MessageSize = 4;
	
			if (CurrentMode != PM_LOCKFUSEBITS_READ)                    // First lock or fuse byte being read, set the EEPROM pointer
			{
				PM_CheckEndOfProgramming();                             // Check if the last command was a program - if so store the program length
				PM_CheckEndOfFuseLockStore();                           // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
				
				CurrBuffByte = 0;
				CurrentMode  = PM_LOCKFUSEBITS_READ;
			}
			
			if (CurrBuffByte > eeprom_read_byte((uint8_t*)((PacketBytes[0] == CMD_READ_FUSE_ISP)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes)))    // Trying to read more fuse/lock bytes than are stored in memory
			{
				PacketBytes[2] = 0xFF;                                  // Return 0xFF for the fuse/lock byte
			}
			else
			{
				PacketBytes[2] = eeprom_read_byte((uint8_t*)((PacketBytes[0] == CMD_READ_FUSE_ISP)? &EEPROMVars.FuseBytes : &EEPROMVars.LockBytes) // Starting location
									                         + (CurrBuffByte << 2) + (PacketBytes[1] - 1));                                        // The start position of the actual fuse/lock byte to read (4 bytes each));
			}

			PacketBytes[1] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs
			PacketBytes[3] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs

			CurrBuffByte++;

			break;
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;

			if (CurrentMode != PM_LOCKFUSEBITS_WRITE)                  // First lock or fuse byte being written, set the EEPROM pointer
			{
				CurrentMode   = PM_LOCKFUSEBITS_WRITE;
				CurrBuffByte  = 0;                                     // CurrBuffByte is used to store the total fuse/lock bytes written
			}

			if (PacketBytes[0] == CMD_PROGRAM_FUSE_ISP)
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.FuseBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_FUSE;
			}
			else
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.LockBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_LOCK;
			}				
			
			if (CurrBuffByte < PM_MAX_FUSELOCKBITS)
			{
				for (uint8_t FLByte = 1; FLByte <= 4; FLByte++)
				{
					eeprom_write_byte(EEPROMAddress, PacketBytes[FLByte]);
					EEPROMAddress++;
				}

				CurrBuffByte++;                                        // Increment the total fuse/lock bytes written counter
			}
			
			PacketBytes[1] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned
			PacketBytes[2] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned

			break;
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			MessageSize = 2;

			if (CurrentMode != PM_DATAFLASH_WRITE)                     // First programming packet
			{
				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)           // Flash programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram; // Set the eeprom address to the Program command bytes location
					PM_SetupDFAddressCounters(TYPE_FLASH);
				}
				else                                                   // EEPROM programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;  // Set the eeprom address to the EEPROM command bytes location
					PM_SetupDFAddressCounters(TYPE_EEPROM);
				}
				
				DF_BufferWriteEnable(CurrBuffByte);
				CurrentMode = PM_DATAFLASH_WRITE;
				
				for (uint8_t B = 1; B <= 9; B++)                       // Save the command bytes
				  eeprom_write_byte(EEPROMAddress, PacketBytes[B]);
			}

			uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
			                      | PacketBytes[2];

			for (uint16_t CurrByte = 0; CurrByte < BytesToWrite; CurrByte++)
				PM_StoreProgramByte(PacketBytes[10 + CurrByte]);

			if (!(GPageLength & PM_PAGELENGTH_FOUNDBIT) && (PacketBytes[3] & ISPCC_PROG_MODE_PAGEDONE) && GPageLength)
			{
				eeprom_write_word(((MemoryType == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength), GPageLength);
		
				GPageLength |= PM_PAGELENGTH_FOUNDBIT;                 // Bit 15 is used to indicate if the length has been found
			}

			PacketBytes[1] = STATUS_CMD_OK;
		
			break;
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:	
			if (CurrentMode != PM_DATAFLASH_READ)
			{
				PM_CheckEndOfProgramming();                           // Check if the last command was a program - if so store the program length
				PM_CheckEndOfFuseLockStore();                         // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
				
				PM_SetupDFAddressCounters((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);
				DF_ContinuousReadEnable(CurrPageAddress, CurrBuffByte);
				
				CurrentMode = PM_DATAFLASH_READ;
				CurrAddress = 0;
			}

			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8)    // \. Load in the number of bytes that is to
			                     | PacketBytes[2];                    // /  be read into a temp variable (MSB first)
						
			uint16_t BytesInMem  = PM_GetStoredDataSize((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
			   PacketBytes[2 + ReadByte] = ((CurrAddress < BytesInMem)? SPI_SPITransmit(0x00) : 0xFF); // Read in the next dataflash byte if present
			   V2P_IncrementCurrAddress();
			}
			
			MessageSize = BytesToRead + 3;

			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
		
			break;
		default:
			MessageSize = 1;
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
	}

	V2P_SendPacket();                                   // Send the response packet
}

void PM_CheckEndOfProgramming(void)
{
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	24 97       	sbiw	r28, 0x04	; 4
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
	uint8_t* EEPROMAddress;

	if (CurrentMode == PM_DATAFLASH_WRITE)
    27d0:	80 91 5c 02 	lds	r24, 0x025C
    27d4:	81 30       	cpi	r24, 0x01	; 1
    27d6:	09 f0       	breq	.+2      	; 0x27da <PM_CheckEndOfProgramming+0x1e>
    27d8:	41 c0       	rjmp	.+130    	; 0x285c <PM_CheckEndOfProgramming+0xa0>
	{
		if (CurrBuffByte)                               // Data in the dataflash buffer, pending to be written
    27da:	80 91 62 02 	lds	r24, 0x0262
    27de:	90 91 63 02 	lds	r25, 0x0263
    27e2:	89 2b       	or	r24, r25
    27e4:	31 f0       	breq	.+12     	; 0x27f2 <PM_CheckEndOfProgramming+0x36>
		  DF_CopyBufferToFlashPage(CurrPageAddress);   // Save the buffer
    27e6:	80 91 69 02 	lds	r24, 0x0269
    27ea:	90 91 6a 02 	lds	r25, 0x026A
    27ee:	0e 94 84 0a 	call	0x1508 <DF_CopyBufferToFlashPage>

		uint32_t DataSize = ((uint32_t)CurrPageAddress * DF_INTERNALDF_BUFFBYTES) + CurrBuffByte;
    27f2:	80 91 69 02 	lds	r24, 0x0269
    27f6:	90 91 6a 02 	lds	r25, 0x026A
    27fa:	aa 27       	eor	r26, r26
    27fc:	bb 27       	eor	r27, r27
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	28 e0       	ldi	r18, 0x08	; 8
    2804:	31 e0       	ldi	r19, 0x01	; 1
    2806:	40 e0       	ldi	r20, 0x00	; 0
    2808:	50 e0       	ldi	r21, 0x00	; 0
    280a:	0e 94 a7 19 	call	0x334e <__mulsi3>
    280e:	9b 01       	movw	r18, r22
    2810:	ac 01       	movw	r20, r24
    2812:	80 91 62 02 	lds	r24, 0x0262
    2816:	90 91 63 02 	lds	r25, 0x0263
    281a:	aa 27       	eor	r26, r26
    281c:	bb 27       	eor	r27, r27
    281e:	28 0f       	add	r18, r24
    2820:	39 1f       	adc	r19, r25
    2822:	4a 1f       	adc	r20, r26
    2824:	5b 1f       	adc	r21, r27
    2826:	29 83       	std	Y+1, r18	; 0x01
    2828:	3a 83       	std	Y+2, r19	; 0x02
    282a:	4b 83       	std	Y+3, r20	; 0x03
    282c:	5c 83       	std	Y+4, r21	; 0x04

		if (MemoryType == TYPE_FLASH)
    282e:	80 91 5d 02 	lds	r24, 0x025D
    2832:	81 30       	cpi	r24, 0x01	; 1
    2834:	19 f4       	brne	.+6      	; 0x283c <PM_CheckEndOfProgramming+0x80>
		{
			EEPROMAddress = (uint8_t*)&EEPROMVars.DataSize;       
    2836:	ab e1       	ldi	r26, 0x1B	; 27
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	0a c0       	rjmp	.+20     	; 0x2850 <PM_CheckEndOfProgramming+0x94>
		}
		else
		{
			EEPROMAddress = (uint8_t*)&EEPROMVars.EEPROMSize;
    283c:	af e1       	ldi	r26, 0x1F	; 31
    283e:	b0 e0       	ldi	r27, 0x00	; 0
			DataSize -= PM_EEPROM_OFFSET;                // Remove DataFlash starting offset
    2840:	20 50       	subi	r18, 0x00	; 0
    2842:	34 40       	sbci	r19, 0x04	; 4
    2844:	44 40       	sbci	r20, 0x04	; 4
    2846:	50 40       	sbci	r21, 0x00	; 0
    2848:	29 83       	std	Y+1, r18	; 0x01
    284a:	3a 83       	std	Y+2, r19	; 0x02
    284c:	4b 83       	std	Y+3, r20	; 0x03
    284e:	5c 83       	std	Y+4, r21	; 0x04
void 
eeprom_write_block (const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t n)
{
    2850:	fe 01       	movw	r30, r28
    2852:	31 96       	adiw	r30, 0x01	; 1
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
            "ld __tmp_reg__,z+" CR_TAB
             XCALL " __eeprom_write_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      /* Do nothing for compile time constant transfer size n == 0.  */
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                 XCALL " __eeprom_write_block_" _REG_LOCATION_SUFFIX
               : "+x" (pointer_eeprom),
                 "=z" (pointer_ram)
               : "z"  (pointer_ram)
               : "memory" );
            }
          else
            {
              uint8_t len;
              len = (uint8_t) n;
    2854:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    2856:	18 2e       	mov	r1, r24
    2858:	0e 94 e9 19 	call	0x33d2 <__eeprom_write_block_1F2021>
    285c:	24 96       	adiw	r28, 0x04	; 4
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	df 91       	pop	r29
    286a:	cf 91       	pop	r28
    286c:	08 95       	ret

0000286e <PM_CheckEndOfFuseLockStore>:
		}

		eeprom_write_block((const void*)&DataSize, (void*)EEPROMAddress, 4);
	}
}

void PM_CheckEndOfFuseLockStore(void)
{
	if (CurrentMode == PM_LOCKFUSEBITS_WRITE)
    286e:	80 91 5c 02 	lds	r24, 0x025C
    2872:	83 30       	cpi	r24, 0x03	; 3
    2874:	71 f4       	brne	.+28     	; 0x2892 <PM_CheckEndOfFuseLockStore+0x24>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2876:	80 91 5d 02 	lds	r24, 0x025D
    287a:	82 30       	cpi	r24, 0x02	; 2
    287c:	19 f4       	brne	.+6      	; 0x2884 <PM_CheckEndOfFuseLockStore+0x16>
    287e:	af e2       	ldi	r26, 0x2F	; 47
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <PM_CheckEndOfFuseLockStore+0x1a>
    2884:	a0 e3       	ldi	r26, 0x30	; 48
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	80 91 62 02 	lds	r24, 0x0262
  asm volatile (
    288c:	08 2e       	mov	r0, r24
    288e:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
    2892:	08 95       	ret

00002894 <PM_InterpretAVRISPPacket>:
    2894:	cf 92       	push	r12
    2896:	df 92       	push	r13
    2898:	ef 92       	push	r14
    289a:	ff 92       	push	r15
    289c:	0f 93       	push	r16
    289e:	1f 93       	push	r17
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	40 91 47 01 	lds	r20, 0x0147
    28a8:	84 2f       	mov	r24, r20
    28aa:	99 27       	eor	r25, r25
    28ac:	86 31       	cpi	r24, 0x16	; 22
    28ae:	91 05       	cpc	r25, r1
    28b0:	09 f4       	brne	.+2      	; 0x28b4 <PM_InterpretAVRISPPacket+0x20>
    28b2:	b8 c1       	rjmp	.+880    	; 0x2c24 <PM_InterpretAVRISPPacket+0x390>
    28b4:	87 31       	cpi	r24, 0x17	; 23
    28b6:	91 05       	cpc	r25, r1
    28b8:	94 f4       	brge	.+36     	; 0x28de <PM_InterpretAVRISPPacket+0x4a>
    28ba:	82 31       	cpi	r24, 0x12	; 18
    28bc:	91 05       	cpc	r25, r1
    28be:	09 f4       	brne	.+2      	; 0x28c2 <PM_InterpretAVRISPPacket+0x2e>
    28c0:	68 c0       	rjmp	.+208    	; 0x2992 <PM_InterpretAVRISPPacket+0xfe>
    28c2:	83 31       	cpi	r24, 0x13	; 19
    28c4:	91 05       	cpc	r25, r1
    28c6:	3c f4       	brge	.+14     	; 0x28d6 <PM_InterpretAVRISPPacket+0x42>
    28c8:	80 31       	cpi	r24, 0x10	; 16
    28ca:	91 05       	cpc	r25, r1
    28cc:	11 f1       	breq	.+68     	; 0x2912 <PM_InterpretAVRISPPacket+0x7e>
    28ce:	41 97       	sbiw	r24, 0x11	; 17
    28d0:	09 f4       	brne	.+2      	; 0x28d4 <PM_InterpretAVRISPPacket+0x40>
    28d2:	3f c0       	rjmp	.+126    	; 0x2952 <PM_InterpretAVRISPPacket+0xbe>
    28d4:	17 c2       	rjmp	.+1070   	; 0x2d04 <PM_InterpretAVRISPPacket+0x470>
    28d6:	44 97       	sbiw	r24, 0x14	; 20
    28d8:	09 f4       	brne	.+2      	; 0x28dc <PM_InterpretAVRISPPacket+0x48>
    28da:	a4 c1       	rjmp	.+840    	; 0x2c24 <PM_InterpretAVRISPPacket+0x390>
    28dc:	38 c1       	rjmp	.+624    	; 0x2b4e <PM_InterpretAVRISPPacket+0x2ba>
    28de:	89 31       	cpi	r24, 0x19	; 25
    28e0:	91 05       	cpc	r25, r1
    28e2:	09 f4       	brne	.+2      	; 0x28e6 <PM_InterpretAVRISPPacket+0x52>
    28e4:	e2 c0       	rjmp	.+452    	; 0x2aaa <PM_InterpretAVRISPPacket+0x216>
    28e6:	8a 31       	cpi	r24, 0x1A	; 26
    28e8:	91 05       	cpc	r25, r1
    28ea:	44 f4       	brge	.+16     	; 0x28fc <PM_InterpretAVRISPPacket+0x68>
    28ec:	87 31       	cpi	r24, 0x17	; 23
    28ee:	91 05       	cpc	r25, r1
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <PM_InterpretAVRISPPacket+0x60>
    28f2:	db c0       	rjmp	.+438    	; 0x2aaa <PM_InterpretAVRISPPacket+0x216>
    28f4:	48 97       	sbiw	r24, 0x18	; 24
    28f6:	09 f4       	brne	.+2      	; 0x28fa <PM_InterpretAVRISPPacket+0x66>
    28f8:	8b c0       	rjmp	.+278    	; 0x2a10 <PM_InterpretAVRISPPacket+0x17c>
    28fa:	04 c2       	rjmp	.+1032   	; 0x2d04 <PM_InterpretAVRISPPacket+0x470>
    28fc:	8b 31       	cpi	r24, 0x1B	; 27
    28fe:	91 05       	cpc	r25, r1
    2900:	e1 f1       	breq	.+120    	; 0x297a <PM_InterpretAVRISPPacket+0xe6>
    2902:	8b 31       	cpi	r24, 0x1B	; 27
    2904:	91 05       	cpc	r25, r1
    2906:	0c f4       	brge	.+2      	; 0x290a <PM_InterpretAVRISPPacket+0x76>
    2908:	83 c0       	rjmp	.+262    	; 0x2a10 <PM_InterpretAVRISPPacket+0x17c>
    290a:	4c 97       	sbiw	r24, 0x1c	; 28
    290c:	09 f4       	brne	.+2      	; 0x2910 <PM_InterpretAVRISPPacket+0x7c>
    290e:	73 c0       	rjmp	.+230    	; 0x29f6 <PM_InterpretAVRISPPacket+0x162>
    2910:	f9 c1       	rjmp	.+1010   	; 0x2d04 <PM_InterpretAVRISPPacket+0x470>
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	90 93 44 01 	sts	0x0144, r25
    291a:	80 93 43 01 	sts	0x0143, r24
    291e:	e7 e4       	ldi	r30, 0x47	; 71
    2920:	f1 e0       	ldi	r31, 0x01	; 1
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	9b e0       	ldi	r25, 0x0B	; 11
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2928:	d9 01       	movw	r26, r18
    292a:	ad 5d       	subi	r26, 0xDD	; 221
    292c:	bf 4f       	sbci	r27, 0xFF	; 255
    292e:	81 91       	ld	r24, Z+
  asm volatile (
    2930:	08 2e       	mov	r0, r24
    2932:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
    2936:	91 50       	subi	r25, 0x01	; 1
    2938:	2f 5f       	subi	r18, 0xFF	; 255
    293a:	3f 4f       	sbci	r19, 0xFF	; 255
    293c:	97 ff       	sbrs	r25, 7
    293e:	f4 cf       	rjmp	.-24     	; 0x2928 <PM_InterpretAVRISPPacket+0x94>
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	80 93 42 01 	sts	0x0142, r24
    2946:	10 92 5c 02 	sts	0x025C, r1
    294a:	81 b3       	in	r24, 0x11	; 17
    294c:	8f 7c       	andi	r24, 0xCF	; 207
    294e:	80 62       	ori	r24, 0x20	; 32
    2950:	12 c0       	rjmp	.+36     	; 0x2976 <PM_InterpretAVRISPPacket+0xe2>
    2952:	82 e0       	ldi	r24, 0x02	; 2
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	90 93 44 01 	sts	0x0144, r25
    295a:	80 93 43 01 	sts	0x0143, r24
    295e:	0e 94 de 13 	call	0x27bc <PM_CheckEndOfProgramming>
    2962:	0e 94 37 14 	call	0x286e <PM_CheckEndOfFuseLockStore>
    2966:	10 92 42 01 	sts	0x0142, r1
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    2970:	81 b3       	in	r24, 0x11	; 17
    2972:	8f 7c       	andi	r24, 0xCF	; 207
    2974:	80 61       	ori	r24, 0x10	; 16
    2976:	81 bb       	out	0x11, r24	; 17
    2978:	52 c1       	rjmp	.+676    	; 0x2c1e <PM_InterpretAVRISPPacket+0x38a>
    297a:	84 e0       	ldi	r24, 0x04	; 4
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	90 93 44 01 	sts	0x0144, r25
    2982:	80 93 43 01 	sts	0x0143, r24
    2986:	10 92 48 01 	sts	0x0148, r1
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	80 93 49 01 	sts	0x0149, r24
    2990:	3c c0       	rjmp	.+120    	; 0x2a0a <PM_InterpretAVRISPPacket+0x176>
    2992:	82 e0       	ldi	r24, 0x02	; 2
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	90 93 44 01 	sts	0x0144, r25
    299a:	80 93 43 01 	sts	0x0143, r24
    299e:	e8 e4       	ldi	r30, 0x48	; 72
    29a0:	f1 e0       	ldi	r31, 0x01	; 1
    29a2:	21 e0       	ldi	r18, 0x01	; 1
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	95 e0       	ldi	r25, 0x05	; 5
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    29a8:	d9 01       	movw	r26, r18
    29aa:	ab 5e       	subi	r26, 0xEB	; 235
    29ac:	bf 4f       	sbci	r27, 0xFF	; 255
    29ae:	81 91       	ld	r24, Z+
  asm volatile (
    29b0:	08 2e       	mov	r0, r24
    29b2:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
    29b6:	91 50       	subi	r25, 0x01	; 1
    29b8:	2f 5f       	subi	r18, 0xFF	; 255
    29ba:	3f 4f       	sbci	r19, 0xFF	; 255
    29bc:	97 ff       	sbrs	r25, 7
    29be:	f4 cf       	rjmp	.-24     	; 0x29a8 <PM_InterpretAVRISPPacket+0x114>
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	37 e0       	ldi	r19, 0x07	; 7
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    29c8:	dc 01       	movw	r26, r24
    29ca:	a5 5e       	subi	r26, 0xE5	; 229
    29cc:	bf 4f       	sbci	r27, 0xFF	; 255
  asm volatile (
    29ce:	02 2e       	mov	r0, r18
    29d0:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
    29d4:	dc 01       	movw	r26, r24
    29d6:	a1 5e       	subi	r26, 0xE1	; 225
    29d8:	bf 4f       	sbci	r27, 0xFF	; 255
    29da:	02 2e       	mov	r0, r18
    29dc:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
    29e0:	31 50       	subi	r19, 0x01	; 1
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	37 ff       	sbrs	r19, 7
    29e6:	f0 cf       	rjmp	.-32     	; 0x29c8 <PM_InterpretAVRISPPacket+0x134>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    29e8:	a4 e1       	ldi	r26, 0x14	; 20
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	81 e0       	ldi	r24, 0x01	; 1
  asm volatile (
    29ee:	08 2e       	mov	r0, r24
    29f0:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
    29f4:	14 c1       	rjmp	.+552    	; 0x2c1e <PM_InterpretAVRISPPacket+0x38a>
    29f6:	84 e0       	ldi	r24, 0x04	; 4
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	90 93 44 01 	sts	0x0144, r25
    29fe:	80 93 43 01 	sts	0x0143, r24
    2a02:	10 92 48 01 	sts	0x0148, r1
    2a06:	10 92 49 01 	sts	0x0149, r1
    2a0a:	10 92 4a 01 	sts	0x014A, r1
    2a0e:	83 c1       	rjmp	.+774    	; 0x2d16 <PM_InterpretAVRISPPacket+0x482>
    2a10:	84 e0       	ldi	r24, 0x04	; 4
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	90 93 44 01 	sts	0x0144, r25
    2a18:	80 93 43 01 	sts	0x0143, r24
    2a1c:	80 91 5c 02 	lds	r24, 0x025C
    2a20:	84 30       	cpi	r24, 0x04	; 4
    2a22:	59 f0       	breq	.+22     	; 0x2a3a <PM_InterpretAVRISPPacket+0x1a6>
    2a24:	0e 94 de 13 	call	0x27bc <PM_CheckEndOfProgramming>
    2a28:	0e 94 37 14 	call	0x286e <PM_CheckEndOfFuseLockStore>
    2a2c:	10 92 63 02 	sts	0x0263, r1
    2a30:	10 92 62 02 	sts	0x0262, r1
    2a34:	84 e0       	ldi	r24, 0x04	; 4
    2a36:	80 93 5c 02 	sts	0x025C, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2a3a:	60 91 47 01 	lds	r22, 0x0147
    2a3e:	68 31       	cpi	r22, 0x18	; 24
    2a40:	19 f4       	brne	.+6      	; 0x2a48 <PM_InterpretAVRISPPacket+0x1b4>
    2a42:	af e2       	ldi	r26, 0x2F	; 47
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <PM_InterpretAVRISPPacket+0x1b8>
    2a48:	a0 e3       	ldi	r26, 0x30	; 48
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2a4c:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
    2a50:	80 2d       	mov	r24, r0
    2a52:	99 27       	eor	r25, r25
    2a54:	40 91 62 02 	lds	r20, 0x0262
    2a58:	50 91 63 02 	lds	r21, 0x0263
    2a5c:	84 17       	cp	r24, r20
    2a5e:	95 07       	cpc	r25, r21
    2a60:	10 f4       	brcc	.+4      	; 0x2a66 <PM_InterpretAVRISPPacket+0x1d2>
    2a62:	8f ef       	ldi	r24, 0xFF	; 255
    2a64:	15 c0       	rjmp	.+42     	; 0x2a90 <PM_InterpretAVRISPPacket+0x1fc>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2a66:	9a 01       	movw	r18, r20
    2a68:	22 0f       	add	r18, r18
    2a6a:	33 1f       	adc	r19, r19
    2a6c:	22 0f       	add	r18, r18
    2a6e:	33 1f       	adc	r19, r19
    2a70:	80 91 48 01 	lds	r24, 0x0148
    2a74:	28 0f       	add	r18, r24
    2a76:	31 1d       	adc	r19, r1
    2a78:	68 31       	cpi	r22, 0x18	; 24
    2a7a:	21 f4       	brne	.+8      	; 0x2a84 <PM_InterpretAVRISPPacket+0x1f0>
    2a7c:	d9 01       	movw	r26, r18
    2a7e:	a0 5d       	subi	r26, 0xD0	; 208
    2a80:	bf 4f       	sbci	r27, 0xFF	; 255
    2a82:	03 c0       	rjmp	.+6      	; 0x2a8a <PM_InterpretAVRISPPacket+0x1f6>
    2a84:	d9 01       	movw	r26, r18
    2a86:	a8 5a       	subi	r26, 0xA8	; 168
    2a88:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2a8a:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
    2a8e:	80 2d       	mov	r24, r0
    2a90:	80 93 49 01 	sts	0x0149, r24
    2a94:	10 92 48 01 	sts	0x0148, r1
    2a98:	10 92 4a 01 	sts	0x014A, r1
    2a9c:	4f 5f       	subi	r20, 0xFF	; 255
    2a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa0:	50 93 63 02 	sts	0x0263, r21
    2aa4:	40 93 62 02 	sts	0x0262, r20
    2aa8:	36 c1       	rjmp	.+620    	; 0x2d16 <PM_InterpretAVRISPPacket+0x482>
    2aaa:	83 e0       	ldi	r24, 0x03	; 3
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	90 93 44 01 	sts	0x0144, r25
    2ab2:	80 93 43 01 	sts	0x0143, r24
    2ab6:	80 91 5c 02 	lds	r24, 0x025C
    2aba:	83 30       	cpi	r24, 0x03	; 3
    2abc:	39 f0       	breq	.+14     	; 0x2acc <PM_InterpretAVRISPPacket+0x238>
    2abe:	83 e0       	ldi	r24, 0x03	; 3
    2ac0:	80 93 5c 02 	sts	0x025C, r24
    2ac4:	10 92 63 02 	sts	0x0263, r1
    2ac8:	10 92 62 02 	sts	0x0262, r1
    2acc:	20 91 62 02 	lds	r18, 0x0262
    2ad0:	30 91 63 02 	lds	r19, 0x0263
    2ad4:	47 31       	cpi	r20, 0x17	; 23
    2ad6:	69 f4       	brne	.+26     	; 0x2af2 <PM_InterpretAVRISPPacket+0x25e>
    2ad8:	80 ea       	ldi	r24, 0xA0	; 160
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	28 9f       	mul	r18, r24
    2ade:	e0 01       	movw	r28, r0
    2ae0:	29 9f       	mul	r18, r25
    2ae2:	d0 0d       	add	r29, r0
    2ae4:	38 9f       	mul	r19, r24
    2ae6:	d0 0d       	add	r29, r0
    2ae8:	11 24       	eor	r1, r1
    2aea:	cf 5c       	subi	r28, 0xCF	; 207
    2aec:	df 4f       	sbci	r29, 0xFF	; 255
    2aee:	82 e0       	ldi	r24, 0x02	; 2
    2af0:	0c c0       	rjmp	.+24     	; 0x2b0a <PM_InterpretAVRISPPacket+0x276>
    2af2:	80 ea       	ldi	r24, 0xA0	; 160
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	28 9f       	mul	r18, r24
    2af8:	e0 01       	movw	r28, r0
    2afa:	29 9f       	mul	r18, r25
    2afc:	d0 0d       	add	r29, r0
    2afe:	38 9f       	mul	r19, r24
    2b00:	d0 0d       	add	r29, r0
    2b02:	11 24       	eor	r1, r1
    2b04:	c7 5a       	subi	r28, 0xA7	; 167
    2b06:	df 4f       	sbci	r29, 0xFF	; 255
    2b08:	83 e0       	ldi	r24, 0x03	; 3
    2b0a:	80 93 5d 02 	sts	0x025D, r24
    2b0e:	80 91 62 02 	lds	r24, 0x0262
    2b12:	90 91 63 02 	lds	r25, 0x0263
    2b16:	0a 97       	sbiw	r24, 0x0a	; 10
    2b18:	a8 f4       	brcc	.+42     	; 0x2b44 <PM_InterpretAVRISPPacket+0x2b0>
    2b1a:	e8 e4       	ldi	r30, 0x48	; 72
    2b1c:	f1 e0       	ldi	r31, 0x01	; 1
    2b1e:	93 e0       	ldi	r25, 0x03	; 3
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b20:	81 91       	ld	r24, Z+
  asm volatile (
    2b22:	de 01       	movw	r26, r28
    2b24:	08 2e       	mov	r0, r24
    2b26:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
    2b2a:	21 96       	adiw	r28, 0x01	; 1
    2b2c:	91 50       	subi	r25, 0x01	; 1
    2b2e:	97 ff       	sbrs	r25, 7
    2b30:	f7 cf       	rjmp	.-18     	; 0x2b20 <PM_InterpretAVRISPPacket+0x28c>
    2b32:	80 91 62 02 	lds	r24, 0x0262
    2b36:	90 91 63 02 	lds	r25, 0x0263
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	90 93 63 02 	sts	0x0263, r25
    2b40:	80 93 62 02 	sts	0x0262, r24
    2b44:	10 92 48 01 	sts	0x0148, r1
    2b48:	10 92 49 01 	sts	0x0149, r1
    2b4c:	e4 c0       	rjmp	.+456    	; 0x2d16 <PM_InterpretAVRISPPacket+0x482>
    2b4e:	82 e0       	ldi	r24, 0x02	; 2
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	90 93 44 01 	sts	0x0144, r25
    2b56:	80 93 43 01 	sts	0x0143, r24
    2b5a:	80 91 5c 02 	lds	r24, 0x025C
    2b5e:	81 30       	cpi	r24, 0x01	; 1
    2b60:	f9 f0       	breq	.+62     	; 0x2ba0 <PM_InterpretAVRISPPacket+0x30c>
    2b62:	43 31       	cpi	r20, 0x13	; 19
    2b64:	21 f4       	brne	.+8      	; 0x2b6e <PM_InterpretAVRISPPacket+0x2da>
    2b66:	c2 e0       	ldi	r28, 0x02	; 2
    2b68:	d0 e0       	ldi	r29, 0x00	; 0
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	03 c0       	rjmp	.+6      	; 0x2b74 <PM_InterpretAVRISPPacket+0x2e0>
    2b6e:	cb e0       	ldi	r28, 0x0B	; 11
    2b70:	d0 e0       	ldi	r29, 0x00	; 0
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	0e 94 67 13 	call	0x26ce <PM_SetupDFAddressCounters>
    2b78:	80 91 62 02 	lds	r24, 0x0262
    2b7c:	90 91 63 02 	lds	r25, 0x0263
    2b80:	0e 94 f0 09 	call	0x13e0 <DF_BufferWriteEnable>
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	80 93 5c 02 	sts	0x025C, r24
    2b8a:	e8 e4       	ldi	r30, 0x48	; 72
    2b8c:	f1 e0       	ldi	r31, 0x01	; 1
    2b8e:	98 e0       	ldi	r25, 0x08	; 8
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b90:	81 91       	ld	r24, Z+
  asm volatile (
    2b92:	de 01       	movw	r26, r28
    2b94:	08 2e       	mov	r0, r24
    2b96:	0e 94 d8 19 	call	0x33b0 <__eeprom_write_byte_1F2021>
    2b9a:	91 50       	subi	r25, 0x01	; 1
    2b9c:	97 ff       	sbrs	r25, 7
    2b9e:	f8 cf       	rjmp	.-16     	; 0x2b90 <PM_InterpretAVRISPPacket+0x2fc>
    2ba0:	80 91 48 01 	lds	r24, 0x0148
    2ba4:	99 27       	eor	r25, r25
    2ba6:	d8 2f       	mov	r29, r24
    2ba8:	cc 27       	eor	r28, r28
    2baa:	80 91 49 01 	lds	r24, 0x0149
    2bae:	99 27       	eor	r25, r25
    2bb0:	c8 2b       	or	r28, r24
    2bb2:	d9 2b       	or	r29, r25
    2bb4:	00 e0       	ldi	r16, 0x00	; 0
    2bb6:	10 e0       	ldi	r17, 0x00	; 0
    2bb8:	0c 17       	cp	r16, r28
    2bba:	1d 07       	cpc	r17, r29
    2bbc:	70 f4       	brcc	.+28     	; 0x2bda <PM_InterpretAVRISPPacket+0x346>
    2bbe:	51 e5       	ldi	r21, 0x51	; 81
    2bc0:	e5 2e       	mov	r14, r21
    2bc2:	51 e0       	ldi	r21, 0x01	; 1
    2bc4:	f5 2e       	mov	r15, r21
    2bc6:	f7 01       	movw	r30, r14
    2bc8:	81 91       	ld	r24, Z+
    2bca:	7f 01       	movw	r14, r30
    2bcc:	0e 94 a9 13 	call	0x2752 <PM_StoreProgramByte>
    2bd0:	0f 5f       	subi	r16, 0xFF	; 255
    2bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd4:	0c 17       	cp	r16, r28
    2bd6:	1d 07       	cpc	r17, r29
    2bd8:	b0 f3       	brcs	.-20     	; 0x2bc6 <PM_InterpretAVRISPPacket+0x332>
    2bda:	20 91 5a 02 	lds	r18, 0x025A
    2bde:	30 91 5b 02 	lds	r19, 0x025B
    2be2:	37 fd       	sbrc	r19, 7
    2be4:	1c c0       	rjmp	.+56     	; 0x2c1e <PM_InterpretAVRISPPacket+0x38a>
    2be6:	80 91 4a 01 	lds	r24, 0x014A
    2bea:	87 ff       	sbrs	r24, 7
    2bec:	18 c0       	rjmp	.+48     	; 0x2c1e <PM_InterpretAVRISPPacket+0x38a>
    2bee:	21 15       	cp	r18, r1
    2bf0:	31 05       	cpc	r19, r1
    2bf2:	a9 f0       	breq	.+42     	; 0x2c1e <PM_InterpretAVRISPPacket+0x38a>
    Write a word \c value to EEPROM address \c addr. */

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
    2bf4:	80 91 5d 02 	lds	r24, 0x025D
    2bf8:	81 30       	cpi	r24, 0x01	; 1
    2bfa:	19 f4       	brne	.+6      	; 0x2c02 <PM_InterpretAVRISPPacket+0x36e>
    2bfc:	a1 e8       	ldi	r26, 0x81	; 129
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <PM_InterpretAVRISPPacket+0x372>
    2c02:	a3 e8       	ldi	r26, 0x83	; 131
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
  asm volatile (
    2c06:	09 01       	movw	r0, r18
    2c08:	0e 94 e4 19 	call	0x33c8 <__eeprom_write_word_1F2021>
    2c0c:	80 91 5a 02 	lds	r24, 0x025A
    2c10:	90 91 5b 02 	lds	r25, 0x025B
    2c14:	90 68       	ori	r25, 0x80	; 128
    2c16:	90 93 5b 02 	sts	0x025B, r25
    2c1a:	80 93 5a 02 	sts	0x025A, r24
    2c1e:	10 92 48 01 	sts	0x0148, r1
    2c22:	79 c0       	rjmp	.+242    	; 0x2d16 <PM_InterpretAVRISPPacket+0x482>
    2c24:	80 91 5c 02 	lds	r24, 0x025C
    2c28:	82 30       	cpi	r24, 0x02	; 2
    2c2a:	11 f1       	breq	.+68     	; 0x2c70 <PM_InterpretAVRISPPacket+0x3dc>
    2c2c:	0e 94 de 13 	call	0x27bc <PM_CheckEndOfProgramming>
    2c30:	0e 94 37 14 	call	0x286e <PM_CheckEndOfFuseLockStore>
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	80 91 47 01 	lds	r24, 0x0147
    2c3a:	84 31       	cpi	r24, 0x14	; 20
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <PM_InterpretAVRISPPacket+0x3ac>
    2c3e:	91 e0       	ldi	r25, 0x01	; 1
    2c40:	89 2f       	mov	r24, r25
    2c42:	0e 94 67 13 	call	0x26ce <PM_SetupDFAddressCounters>
    2c46:	60 91 62 02 	lds	r22, 0x0262
    2c4a:	70 91 63 02 	lds	r23, 0x0263
    2c4e:	80 91 69 02 	lds	r24, 0x0269
    2c52:	90 91 6a 02 	lds	r25, 0x026A
    2c56:	0e 94 ad 09 	call	0x135a <DF_ContinuousReadEnable>
    2c5a:	82 e0       	ldi	r24, 0x02	; 2
    2c5c:	80 93 5c 02 	sts	0x025C, r24
    2c60:	10 92 3e 01 	sts	0x013E, r1
    2c64:	10 92 3f 01 	sts	0x013F, r1
    2c68:	10 92 40 01 	sts	0x0140, r1
    2c6c:	10 92 41 01 	sts	0x0141, r1
    2c70:	80 91 48 01 	lds	r24, 0x0148
    2c74:	99 27       	eor	r25, r25
    2c76:	d8 2f       	mov	r29, r24
    2c78:	cc 27       	eor	r28, r28
    2c7a:	80 91 49 01 	lds	r24, 0x0149
    2c7e:	99 27       	eor	r25, r25
    2c80:	c8 2b       	or	r28, r24
    2c82:	d9 2b       	or	r29, r25
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	80 91 47 01 	lds	r24, 0x0147
    2c8a:	84 31       	cpi	r24, 0x14	; 20
    2c8c:	09 f4       	brne	.+2      	; 0x2c90 <PM_InterpretAVRISPPacket+0x3fc>
    2c8e:	91 e0       	ldi	r25, 0x01	; 1
    2c90:	89 2f       	mov	r24, r25
    2c92:	0e 94 30 13 	call	0x2660 <PM_GetStoredDataSize>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	7c 01       	movw	r14, r24
    2c9c:	00 e0       	ldi	r16, 0x00	; 0
    2c9e:	10 e0       	ldi	r17, 0x00	; 0
    2ca0:	0c 17       	cp	r16, r28
    2ca2:	1d 07       	cpc	r17, r29
    2ca4:	18 f5       	brcc	.+70     	; 0x2cec <PM_InterpretAVRISPPacket+0x458>
    2ca6:	39 e4       	ldi	r19, 0x49	; 73
    2ca8:	c3 2e       	mov	r12, r19
    2caa:	31 e0       	ldi	r19, 0x01	; 1
    2cac:	d3 2e       	mov	r13, r19
    2cae:	97 01       	movw	r18, r14
    2cb0:	44 27       	eor	r20, r20
    2cb2:	55 27       	eor	r21, r21
    2cb4:	80 91 3e 01 	lds	r24, 0x013E
    2cb8:	90 91 3f 01 	lds	r25, 0x013F
    2cbc:	a0 91 40 01 	lds	r26, 0x0140
    2cc0:	b0 91 41 01 	lds	r27, 0x0141
    2cc4:	82 17       	cp	r24, r18
    2cc6:	93 07       	cpc	r25, r19
    2cc8:	a4 07       	cpc	r26, r20
    2cca:	b5 07       	cpc	r27, r21
    2ccc:	20 f4       	brcc	.+8      	; 0x2cd6 <PM_InterpretAVRISPPacket+0x442>
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	0e 94 d5 08 	call	0x11aa <SPI_SPITransmit>
    2cd4:	01 c0       	rjmp	.+2      	; 0x2cd8 <PM_InterpretAVRISPPacket+0x444>
    2cd6:	8f ef       	ldi	r24, 0xFF	; 255
    2cd8:	f6 01       	movw	r30, r12
    2cda:	81 93       	st	Z+, r24
    2cdc:	6f 01       	movw	r12, r30
    2cde:	0e 94 92 0e 	call	0x1d24 <V2P_IncrementCurrAddress>
    2ce2:	0f 5f       	subi	r16, 0xFF	; 255
    2ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce6:	0c 17       	cp	r16, r28
    2ce8:	1d 07       	cpc	r17, r29
    2cea:	08 f3       	brcs	.-62     	; 0x2cae <PM_InterpretAVRISPPacket+0x41a>
    2cec:	23 96       	adiw	r28, 0x03	; 3
    2cee:	d0 93 44 01 	sts	0x0144, r29
    2cf2:	c0 93 43 01 	sts	0x0143, r28
    2cf6:	23 97       	sbiw	r28, 0x03	; 3
    2cf8:	10 92 48 01 	sts	0x0148, r1
    2cfc:	c9 5b       	subi	r28, 0xB9	; 185
    2cfe:	de 4f       	sbci	r29, 0xFE	; 254
    2d00:	1a 82       	std	Y+2, r1	; 0x02
    2d02:	09 c0       	rjmp	.+18     	; 0x2d16 <PM_InterpretAVRISPPacket+0x482>
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	90 93 44 01 	sts	0x0144, r25
    2d0c:	80 93 43 01 	sts	0x0143, r24
    2d10:	89 ec       	ldi	r24, 0xC9	; 201
    2d12:	80 93 48 01 	sts	0x0148, r24
    2d16:	0e 94 ae 0d 	call	0x1b5c <V2P_SendPacket>
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	1f 91       	pop	r17
    2d20:	0f 91       	pop	r16
    2d22:	ff 90       	pop	r15
    2d24:	ef 90       	pop	r14
    2d26:	df 90       	pop	r13
    2d28:	cf 90       	pop	r12
    2d2a:	08 95       	ret

00002d2c <PM_SendFuseLockBytes>:
	  eeprom_write_byte(((MemoryType == TYPE_FUSE)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes), CurrBuffByte); // CurrBuffByte stores the total number of fuse/lock bytes written in this case
}

void PM_SendFuseLockBytes(const uint8_t Type)
{
    2d2c:	0f 93       	push	r16
    2d2e:	1f 93       	push	r17
    2d30:	cf 93       	push	r28
    2d32:	df 93       	push	r29
    2d34:	98 2f       	mov	r25, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2d36:	82 30       	cpi	r24, 0x02	; 2
    2d38:	19 f4       	brne	.+6      	; 0x2d40 <PM_SendFuseLockBytes+0x14>
    2d3a:	af e2       	ldi	r26, 0x2F	; 47
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <PM_SendFuseLockBytes+0x18>
    2d40:	a0 e3       	ldi	r26, 0x30	; 48
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2d44:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
    2d48:	80 2d       	mov	r24, r0
    2d4a:	18 2f       	mov	r17, r24
	uint8_t* EEPROMAddress;
	uint8_t  TotalBytes;
	
	TotalBytes = eeprom_read_byte((Type == TYPE_FUSE)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes);

	EEPROMAddress = (uint8_t*)((Type == TYPE_FUSE)? &EEPROMVars.FuseBytes : &EEPROMVars.LockBytes); // Set the EEPROM pointer to the fuse/lock bytes start (each fuse or lock byte takes four bytes in EEPROM)
    2d4c:	92 30       	cpi	r25, 0x02	; 2
    2d4e:	19 f4       	brne	.+6      	; 0x2d56 <PM_SendFuseLockBytes+0x2a>
    2d50:	c1 e3       	ldi	r28, 0x31	; 49
    2d52:	d0 e0       	ldi	r29, 0x00	; 0
    2d54:	02 c0       	rjmp	.+4      	; 0x2d5a <PM_SendFuseLockBytes+0x2e>
    2d56:	c9 e5       	ldi	r28, 0x59	; 89
    2d58:	d0 e0       	ldi	r29, 0x00	; 0

	while (TotalBytes--)                              // Write each of the fuse/lock bytes stored in memory to the slave AVR
	{
		for (uint8_t CommandByte = 0; CommandByte < 4; CommandByte++)      // Write each individual command byte
		{
			USI_SPITransmit(eeprom_read_byte(EEPROMAddress));
			EEPROMAddress++;
		}
		
		// Add some delay before programming next byte, if there is one:
		if (TotalBytes)
		   MAIN_Delay10MS(5);
    2d5a:	11 50       	subi	r17, 0x01	; 1
    2d5c:	1f 3f       	cpi	r17, 0xFF	; 255
    2d5e:	91 f0       	breq	.+36     	; 0x2d84 <PM_SendFuseLockBytes+0x58>
    2d60:	03 e0       	ldi	r16, 0x03	; 3
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2d62:	de 01       	movw	r26, r28
    2d64:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
    2d68:	80 2d       	mov	r24, r0
    2d6a:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    2d6e:	21 96       	adiw	r28, 0x01	; 1
    2d70:	01 50       	subi	r16, 0x01	; 1
    2d72:	07 ff       	sbrs	r16, 7
    2d74:	f6 cf       	rjmp	.-20     	; 0x2d62 <PM_SendFuseLockBytes+0x36>
    2d76:	11 23       	and	r17, r17
    2d78:	19 f0       	breq	.+6      	; 0x2d80 <PM_SendFuseLockBytes+0x54>
    2d7a:	85 e0       	ldi	r24, 0x05	; 5
    2d7c:	0e 94 23 02 	call	0x446 <MAIN_Delay10MS>
    2d80:	11 50       	subi	r17, 0x01	; 1
    2d82:	70 f7       	brcc	.-36     	; 0x2d60 <PM_SendFuseLockBytes+0x34>
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	1f 91       	pop	r17
    2d8a:	0f 91       	pop	r16
    2d8c:	08 95       	ret

00002d8e <PM_SendEraseCommand>:
	}
}

void PM_SendEraseCommand(void)
{			
    2d8e:	1f 93       	push	r17
    2d90:	cf 93       	push	r28
    2d92:	df 93       	push	r29
    2d94:	c2 e0       	ldi	r28, 0x02	; 2
    2d96:	d0 e0       	ldi	r29, 0x00	; 0
    2d98:	13 e0       	ldi	r17, 0x03	; 3
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2d9a:	de 01       	movw	r26, r28
    2d9c:	ab 5e       	subi	r26, 0xEB	; 235
    2d9e:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2da0:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
    2da4:	80 2d       	mov	r24, r0
    2da6:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
	for (uint8_t B = 2; B < 6 ; B++)                  // Read out the erase chip command bytes
    2daa:	11 50       	subi	r17, 0x01	; 1
    2dac:	21 96       	adiw	r28, 0x01	; 1
    2dae:	17 ff       	sbrs	r17, 7
    2db0:	f4 cf       	rjmp	.-24     	; 0x2d9a <PM_SendEraseCommand+0xc>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2db2:	a6 e1       	ldi	r26, 0x16	; 22
    2db4:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2db6:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
    2dba:	80 2d       	mov	r24, r0
    2dbc:	88 23       	and	r24, r24
    2dbe:	59 f0       	breq	.+22     	; 0x2dd6 <PM_SendEraseCommand+0x48>
	  USI_SPITransmit(eeprom_read_byte(&EEPROMVars.EraseChip[B])); // Send the erase chip commands
			
	if (eeprom_read_byte(&EEPROMVars.EraseChip[1]))   // Value of 1 indicates a busy flag test
	{
		do
			USI_SPITransmitWord(0xF000);
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	90 ef       	ldi	r25, 0xF0	; 240
    2dc4:	0e 94 4d 09 	call	0x129a <USI_SPITransmitWord>
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	0e 94 4d 09 	call	0x129a <USI_SPITransmitWord>
    2dd0:	80 fd       	sbrc	r24, 0
    2dd2:	f6 cf       	rjmp	.-20     	; 0x2dc0 <PM_SendEraseCommand+0x32>
    2dd4:	07 c0       	rjmp	.+14     	; 0x2de4 <PM_SendEraseCommand+0x56>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2dd6:	a5 e1       	ldi	r26, 0x15	; 21
    2dd8:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2dda:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
    2dde:	80 2d       	mov	r24, r0
    2de0:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	1f 91       	pop	r17
    2dea:	08 95       	ret

00002dec <PM_CreateProgrammingPackets>:
		while (USI_SPITransmitWord(0x0000) & 0x01);
	}
	else                                              // Cleared flag means use a predefined delay
	{		
		MAIN_Delay1MS(eeprom_read_byte((uint8_t*)&EEPROMVars.EraseChip)); // Wait the erase delay
	}
}

void PM_CreateProgrammingPackets(const uint8_t Type)
{			
    2dec:	3f 92       	push	r3
    2dee:	4f 92       	push	r4
    2df0:	5f 92       	push	r5
    2df2:	6f 92       	push	r6
    2df4:	7f 92       	push	r7
    2df6:	8f 92       	push	r8
    2df8:	9f 92       	push	r9
    2dfa:	af 92       	push	r10
    2dfc:	bf 92       	push	r11
    2dfe:	cf 92       	push	r12
    2e00:	df 92       	push	r13
    2e02:	ef 92       	push	r14
    2e04:	ff 92       	push	r15
    2e06:	0f 93       	push	r16
    2e08:	1f 93       	push	r17
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	c8 2f       	mov	r28, r24
	uint32_t BytesRead       = 0;
    2e10:	aa 24       	eor	r10, r10
    2e12:	bb 24       	eor	r11, r11
    2e14:	65 01       	movw	r12, r10
	uint32_t BytesToRead     = PM_GetStoredDataSize(Type);      // Get the byte size of the stored program
    2e16:	0e 94 30 13 	call	0x2660 <PM_GetStoredDataSize>
    2e1a:	2b 01       	movw	r4, r22
    2e1c:	3c 01       	movw	r6, r24
	uint16_t BytesPerProgram;
	uint16_t PageLength;
	uint8_t* EEPROMAddress;
	uint8_t  ContinuedPage   = FALSE;
    2e1e:	33 24       	eor	r3, r3
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \c addr. */
uint16_t
eeprom_read_word (const uint16_t *addr)
{
    2e20:	c1 30       	cpi	r28, 0x01	; 1
    2e22:	19 f4       	brne	.+6      	; 0x2e2a <PM_CreateProgrammingPackets+0x3e>
    2e24:	a1 e8       	ldi	r26, 0x81	; 129
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	02 c0       	rjmp	.+4      	; 0x2e2e <PM_CreateProgrammingPackets+0x42>
    2e2a:	a3 e8       	ldi	r26, 0x83	; 131
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
  uint16_t result;

  asm ( 
    2e2e:	0e 94 d3 19 	call	0x33a6 <__eeprom_read_word_1F2021>
    2e32:	4f 01       	movw	r8, r30

	PageLength  = eeprom_read_word((uint16_t*)(Type == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength);
	CurrAddress = 0;
    2e34:	10 92 3e 01 	sts	0x013E, r1
    2e38:	10 92 3f 01 	sts	0x013F, r1
    2e3c:	10 92 40 01 	sts	0x0140, r1
    2e40:	10 92 41 01 	sts	0x0141, r1

	if (Type == TYPE_FLASH)
    2e44:	c1 30       	cpi	r28, 0x01	; 1
    2e46:	49 f4       	brne	.+18     	; 0x2e5a <PM_CreateProgrammingPackets+0x6e>
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram;       // Set the EEPROM pointer to the write flash command bytes location
    2e48:	c2 e0       	ldi	r28, 0x02	; 2
    2e4a:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(0, 0);
    2e4c:	60 e0       	ldi	r22, 0x00	; 0
    2e4e:	70 e0       	ldi	r23, 0x00	; 0
    2e50:	cb 01       	movw	r24, r22
    2e52:	0e 94 ad 09 	call	0x135a <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_FLASH_ISP;
    2e56:	83 e1       	ldi	r24, 0x13	; 19
    2e58:	09 c0       	rjmp	.+18     	; 0x2e6c <PM_CreateProgrammingPackets+0x80>
	}
	else
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;        // Set the EEPROM pointer to the write EEPROM command bytes location
    2e5a:	cb e0       	ldi	r28, 0x0B	; 11
    2e5c:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(PM_EEPROM_OFFSET / DF_INTERNALDF_BUFFBYTES, PM_EEPROM_OFFSET % DF_INTERNALDF_BUFFBYTES); // Start read from the EEPROM offset location
    2e5e:	60 ee       	ldi	r22, 0xE0	; 224
    2e60:	70 e0       	ldi	r23, 0x00	; 0
    2e62:	84 ee       	ldi	r24, 0xE4	; 228
    2e64:	93 e0       	ldi	r25, 0x03	; 3
    2e66:	0e 94 ad 09 	call	0x135a <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_EEPROM_ISP;
    2e6a:	85 e1       	ldi	r24, 0x15	; 21
    2e6c:	80 93 47 01 	sts	0x0147, r24
    2e70:	e8 e4       	ldi	r30, 0x48	; 72
    2e72:	f1 e0       	ldi	r31, 0x01	; 1
    2e74:	98 e0       	ldi	r25, 0x08	; 8
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2e76:	de 01       	movw	r26, r28
    2e78:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
    2e7c:	80 2d       	mov	r24, r0
    2e7e:	81 93       	st	Z+, r24
	}

	for (uint8_t B = 1; B <= 9 ; B++)                 // Load in the write data command bytes
	{
		PacketBytes[B] = eeprom_read_byte(EEPROMAddress); // Synthesise a write packet header
		EEPROMAddress++;                               // Increment the EEPROM location counter
    2e80:	21 96       	adiw	r28, 0x01	; 1
    2e82:	91 50       	subi	r25, 0x01	; 1
    2e84:	97 ff       	sbrs	r25, 7
    2e86:	f7 cf       	rjmp	.-18     	; 0x2e76 <PM_CreateProgrammingPackets+0x8a>
	}
	
	BytesPerProgram = ((uint16_t)PacketBytes[1] << 8)
    2e88:	80 91 48 01 	lds	r24, 0x0148
    2e8c:	99 27       	eor	r25, r25
    2e8e:	d8 2f       	mov	r29, r24
    2e90:	cc 27       	eor	r28, r28
    2e92:	80 91 49 01 	lds	r24, 0x0149
    2e96:	99 27       	eor	r25, r25
    2e98:	c8 2b       	or	r28, r24
    2e9a:	d9 2b       	or	r29, r25
	                | PacketBytes[2];

	while (BytesRead < BytesToRead)
	{
		if (PacketBytes[3] & ISPCC_PROG_MODE_PAGE)
		{
			if (PageLength > 160) // Max 160 bytes at a time
			{
				if (!(ContinuedPage))                      // Start of a new page, program in the first 150 bytes
				{
					BytesPerProgram = 160;
					PacketBytes[3] &= ~ISPCC_PROG_MODE_PAGEDONE;		
					ContinuedPage = TRUE;
				}
				else                                       // Middle of a page, program in the remainder
				{
					BytesPerProgram = PageLength - 160;
					PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
					ContinuedPage = FALSE;
				}
				
				for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page				

				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);
				PacketBytes[2] = (uint8_t)(BytesPerProgram);

				BytesRead += BytesPerProgram;                         // Increment the counter
			}
			else
			{
				for (uint16_t LoadB = 0; LoadB < PageLength; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page
			
				PacketBytes[1]  = (uint8_t)(PageLength >> 8);
				PacketBytes[2]  = (uint8_t)(PageLength);
				PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;

				BytesRead += PageLength;                            // Increment the counter
			}
		}
		else
		{
			if ((BytesRead + BytesPerProgram) > BytesToRead)        // Less than a whole BytesPerProgram left of data to write
			{
				BytesPerProgram = BytesToRead - BytesRead;          // Next lot of bytes will be the remaining data length
				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);   // \. Save the new length
				PacketBytes[2] = (uint8_t)(BytesPerProgram);        // /  into the data packet
			}

			for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
				PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);    // Load in the page
			
			BytesRead += BytesPerProgram;                           // Increment the counter
		}
	
		if (!(BytesRead & 0xFFFF) && (BytesRead & 0x00FF0000))      // Extended address required
		{
			USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);            // Load extended address command
			USI_SPITransmit(0x00);
			USI_SPITransmit((BytesRead & 0x00FF0000) >> 16);        // The 3rd byte of the long holds the extended address
			USI_SPITransmit(0x00);
		}

		ISPCC_ProgramChip();                                        // Start the program cycle
    2e9c:	a4 14       	cp	r10, r4
    2e9e:	b5 04       	cpc	r11, r5
    2ea0:	c6 04       	cpc	r12, r6
    2ea2:	d7 04       	cpc	r13, r7
    2ea4:	08 f0       	brcs	.+2      	; 0x2ea8 <PM_CreateProgrammingPackets+0xbc>
    2ea6:	b2 c0       	rjmp	.+356    	; 0x300c <PM_CreateProgrammingPackets+0x220>
    2ea8:	20 91 4a 01 	lds	r18, 0x014A
    2eac:	82 2f       	mov	r24, r18
    2eae:	99 27       	eor	r25, r25
    2eb0:	ac 01       	movw	r20, r24
    2eb2:	41 70       	andi	r20, 0x01	; 1
    2eb4:	50 70       	andi	r21, 0x00	; 0
    2eb6:	80 ff       	sbrs	r24, 0
    2eb8:	53 c0       	rjmp	.+166    	; 0x2f60 <PM_CreateProgrammingPackets+0x174>
    2eba:	f1 ea       	ldi	r31, 0xA1	; 161
    2ebc:	8f 16       	cp	r8, r31
    2ebe:	91 04       	cpc	r9, r1
    2ec0:	60 f1       	brcs	.+88     	; 0x2f1a <PM_CreateProgrammingPackets+0x12e>
    2ec2:	33 20       	and	r3, r3
    2ec4:	41 f4       	brne	.+16     	; 0x2ed6 <PM_CreateProgrammingPackets+0xea>
    2ec6:	c0 ea       	ldi	r28, 0xA0	; 160
    2ec8:	d0 e0       	ldi	r29, 0x00	; 0
    2eca:	2f 77       	andi	r18, 0x7F	; 127
    2ecc:	20 93 4a 01 	sts	0x014A, r18
    2ed0:	31 e0       	ldi	r19, 0x01	; 1
    2ed2:	33 2e       	mov	r3, r19
    2ed4:	07 c0       	rjmp	.+14     	; 0x2ee4 <PM_CreateProgrammingPackets+0xf8>
    2ed6:	e4 01       	movw	r28, r8
    2ed8:	c0 5a       	subi	r28, 0xA0	; 160
    2eda:	d0 40       	sbci	r29, 0x00	; 0
    2edc:	20 68       	ori	r18, 0x80	; 128
    2ede:	20 93 4a 01 	sts	0x014A, r18
    2ee2:	33 24       	eor	r3, r3
    2ee4:	00 e0       	ldi	r16, 0x00	; 0
    2ee6:	10 e0       	ldi	r17, 0x00	; 0
    2ee8:	0c 17       	cp	r16, r28
    2eea:	1d 07       	cpc	r17, r29
    2eec:	78 f4       	brcc	.+30     	; 0x2f0c <PM_CreateProgrammingPackets+0x120>
    2eee:	21 e5       	ldi	r18, 0x51	; 81
    2ef0:	e2 2e       	mov	r14, r18
    2ef2:	21 e0       	ldi	r18, 0x01	; 1
    2ef4:	f2 2e       	mov	r15, r18
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	0e 94 d5 08 	call	0x11aa <SPI_SPITransmit>
    2efc:	f7 01       	movw	r30, r14
    2efe:	81 93       	st	Z+, r24
    2f00:	7f 01       	movw	r14, r30
    2f02:	0f 5f       	subi	r16, 0xFF	; 255
    2f04:	1f 4f       	sbci	r17, 0xFF	; 255
    2f06:	0c 17       	cp	r16, r28
    2f08:	1d 07       	cpc	r17, r29
    2f0a:	a8 f3       	brcs	.-22     	; 0x2ef6 <PM_CreateProgrammingPackets+0x10a>
    2f0c:	8d 2f       	mov	r24, r29
    2f0e:	99 27       	eor	r25, r25
    2f10:	80 93 48 01 	sts	0x0148, r24
    2f14:	c0 93 49 01 	sts	0x0149, r28
    2f18:	4b c0       	rjmp	.+150    	; 0x2fb0 <PM_CreateProgrammingPackets+0x1c4>
    2f1a:	00 e0       	ldi	r16, 0x00	; 0
    2f1c:	10 e0       	ldi	r17, 0x00	; 0
    2f1e:	08 15       	cp	r16, r8
    2f20:	19 05       	cpc	r17, r9
    2f22:	78 f4       	brcc	.+30     	; 0x2f42 <PM_CreateProgrammingPackets+0x156>
    2f24:	81 e5       	ldi	r24, 0x51	; 81
    2f26:	e8 2e       	mov	r14, r24
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	f8 2e       	mov	r15, r24
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	0e 94 d5 08 	call	0x11aa <SPI_SPITransmit>
    2f32:	f7 01       	movw	r30, r14
    2f34:	81 93       	st	Z+, r24
    2f36:	7f 01       	movw	r14, r30
    2f38:	0f 5f       	subi	r16, 0xFF	; 255
    2f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3c:	08 15       	cp	r16, r8
    2f3e:	19 05       	cpc	r17, r9
    2f40:	a8 f3       	brcs	.-22     	; 0x2f2c <PM_CreateProgrammingPackets+0x140>
    2f42:	89 2d       	mov	r24, r9
    2f44:	99 27       	eor	r25, r25
    2f46:	80 93 48 01 	sts	0x0148, r24
    2f4a:	80 92 49 01 	sts	0x0149, r8
    2f4e:	80 91 4a 01 	lds	r24, 0x014A
    2f52:	80 68       	ori	r24, 0x80	; 128
    2f54:	80 93 4a 01 	sts	0x014A, r24
    2f58:	c4 01       	movw	r24, r8
    2f5a:	aa 27       	eor	r26, r26
    2f5c:	bb 27       	eor	r27, r27
    2f5e:	2b c0       	rjmp	.+86     	; 0x2fb6 <PM_CreateProgrammingPackets+0x1ca>
    2f60:	ce 01       	movw	r24, r28
    2f62:	aa 27       	eor	r26, r26
    2f64:	bb 27       	eor	r27, r27
    2f66:	8a 0d       	add	r24, r10
    2f68:	9b 1d       	adc	r25, r11
    2f6a:	ac 1d       	adc	r26, r12
    2f6c:	bd 1d       	adc	r27, r13
    2f6e:	48 16       	cp	r4, r24
    2f70:	59 06       	cpc	r5, r25
    2f72:	6a 06       	cpc	r6, r26
    2f74:	7b 06       	cpc	r7, r27
    2f76:	48 f4       	brcc	.+18     	; 0x2f8a <PM_CreateProgrammingPackets+0x19e>
    2f78:	e2 01       	movw	r28, r4
    2f7a:	ca 19       	sub	r28, r10
    2f7c:	db 09       	sbc	r29, r11
    2f7e:	8d 2f       	mov	r24, r29
    2f80:	99 27       	eor	r25, r25
    2f82:	80 93 48 01 	sts	0x0148, r24
    2f86:	c0 93 49 01 	sts	0x0149, r28
    2f8a:	8a 01       	movw	r16, r20
    2f8c:	4c 17       	cp	r20, r28
    2f8e:	5d 07       	cpc	r21, r29
    2f90:	78 f4       	brcc	.+30     	; 0x2fb0 <PM_CreateProgrammingPackets+0x1c4>
    2f92:	a1 e5       	ldi	r26, 0x51	; 81
    2f94:	ea 2e       	mov	r14, r26
    2f96:	a1 e0       	ldi	r26, 0x01	; 1
    2f98:	fa 2e       	mov	r15, r26
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	0e 94 d5 08 	call	0x11aa <SPI_SPITransmit>
    2fa0:	f7 01       	movw	r30, r14
    2fa2:	81 93       	st	Z+, r24
    2fa4:	7f 01       	movw	r14, r30
    2fa6:	0f 5f       	subi	r16, 0xFF	; 255
    2fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    2faa:	0c 17       	cp	r16, r28
    2fac:	1d 07       	cpc	r17, r29
    2fae:	a8 f3       	brcs	.-22     	; 0x2f9a <PM_CreateProgrammingPackets+0x1ae>
    2fb0:	ce 01       	movw	r24, r28
    2fb2:	aa 27       	eor	r26, r26
    2fb4:	bb 27       	eor	r27, r27
    2fb6:	a8 0e       	add	r10, r24
    2fb8:	b9 1e       	adc	r11, r25
    2fba:	ca 1e       	adc	r12, r26
    2fbc:	db 1e       	adc	r13, r27
    2fbe:	a1 14       	cp	r10, r1
    2fc0:	b1 04       	cpc	r11, r1
    2fc2:	e1 f4       	brne	.+56     	; 0x2ffc <PM_CreateProgrammingPackets+0x210>
    2fc4:	e1 2c       	mov	r14, r1
    2fc6:	f1 2c       	mov	r15, r1
    2fc8:	ff ef       	ldi	r31, 0xFF	; 255
    2fca:	0f 2f       	mov	r16, r31
    2fcc:	11 2d       	mov	r17, r1
    2fce:	ea 20       	and	r14, r10
    2fd0:	fb 20       	and	r15, r11
    2fd2:	0c 21       	and	r16, r12
    2fd4:	1d 21       	and	r17, r13
    2fd6:	e1 14       	cp	r14, r1
    2fd8:	f1 04       	cpc	r15, r1
    2fda:	01 05       	cpc	r16, r1
    2fdc:	11 05       	cpc	r17, r1
    2fde:	71 f0       	breq	.+28     	; 0x2ffc <PM_CreateProgrammingPackets+0x210>
    2fe0:	8d e4       	ldi	r24, 0x4D	; 77
    2fe2:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    2fec:	c8 01       	movw	r24, r16
    2fee:	aa 27       	eor	r26, r26
    2ff0:	bb 27       	eor	r27, r27
    2ff2:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	0e 94 3a 09 	call	0x1274 <USI_SPITransmit>
    2ffc:	0e 94 d8 10 	call	0x21b0 <ISPCC_ProgramChip>
    3000:	a4 14       	cp	r10, r4
    3002:	b5 04       	cpc	r11, r5
    3004:	c6 04       	cpc	r12, r6
    3006:	d7 04       	cpc	r13, r7
    3008:	08 f4       	brcc	.+2      	; 0x300c <PM_CreateProgrammingPackets+0x220>
    300a:	4e cf       	rjmp	.-356    	; 0x2ea8 <PM_CreateProgrammingPackets+0xbc>
    300c:	df 91       	pop	r29
    300e:	cf 91       	pop	r28
    3010:	1f 91       	pop	r17
    3012:	0f 91       	pop	r16
    3014:	ff 90       	pop	r15
    3016:	ef 90       	pop	r14
    3018:	df 90       	pop	r13
    301a:	cf 90       	pop	r12
    301c:	bf 90       	pop	r11
    301e:	af 90       	pop	r10
    3020:	9f 90       	pop	r9
    3022:	8f 90       	pop	r8
    3024:	7f 90       	pop	r7
    3026:	6f 90       	pop	r6
    3028:	5f 90       	pop	r5
    302a:	4f 90       	pop	r4
    302c:	3f 90       	pop	r3
    302e:	08 95       	ret

00003030 <PM_ShowStoredItemSizes>:
	}
}

void PM_ShowStoredItemSizes(void)
{
    3030:	1f 93       	push	r17
    3032:	cf 93       	push	r28
    3034:	df 93       	push	r29
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	2e 97       	sbiw	r28, 0x0e	; 14
    303c:	0f b6       	in	r0, 0x3f	; 63
    303e:	f8 94       	cli
    3040:	de bf       	out	0x3e, r29	; 62
    3042:	0f be       	out	0x3f, r0	; 63
    3044:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[14];
	uint8_t ItemInfoIndex = 0;
    3046:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t TempB;
	
	JoyStatus = 1;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)                           // Joystick is in the non-center position
    304c:	8e b3       	in	r24, 0x1e	; 30
    304e:	88 23       	and	r24, r24
    3050:	e9 f3       	breq	.-6      	; 0x304c <PM_ShowStoredItemSizes+0x1c>
		{
			if (JoyStatus & JOY_UP)              // Previous item
    3052:	f6 9b       	sbis	0x1e, 6	; 30
    3054:	06 c0       	rjmp	.+12     	; 0x3062 <PM_ShowStoredItemSizes+0x32>
				(ItemInfoIndex == 0)? ItemInfoIndex = 3 : ItemInfoIndex--;
    3056:	11 23       	and	r17, r17
    3058:	11 f4       	brne	.+4      	; 0x305e <PM_ShowStoredItemSizes+0x2e>
    305a:	13 e0       	ldi	r17, 0x03	; 3
    305c:	0c c0       	rjmp	.+24     	; 0x3076 <PM_ShowStoredItemSizes+0x46>
    305e:	11 50       	subi	r17, 0x01	; 1
    3060:	0a c0       	rjmp	.+20     	; 0x3076 <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_DOWN)      // Next item
    3062:	f7 9b       	sbis	0x1e, 7	; 30
    3064:	06 c0       	rjmp	.+12     	; 0x3072 <PM_ShowStoredItemSizes+0x42>
				(ItemInfoIndex == 3)? ItemInfoIndex = 0 : ItemInfoIndex++;
    3066:	13 30       	cpi	r17, 0x03	; 3
    3068:	11 f4       	brne	.+4      	; 0x306e <PM_ShowStoredItemSizes+0x3e>
    306a:	10 e0       	ldi	r17, 0x00	; 0
    306c:	04 c0       	rjmp	.+8      	; 0x3076 <PM_ShowStoredItemSizes+0x46>
    306e:	1f 5f       	subi	r17, 0xFF	; 255
    3070:	02 c0       	rjmp	.+4      	; 0x3076 <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_LEFT)
    3072:	f2 99       	sbic	0x1e, 2	; 30
    3074:	54 c0       	rjmp	.+168    	; 0x311e <PM_ShowStoredItemSizes+0xee>
				return;
		
			switch (ItemInfoIndex)
    3076:	81 2f       	mov	r24, r17
    3078:	99 27       	eor	r25, r25
    307a:	81 30       	cpi	r24, 0x01	; 1
    307c:	91 05       	cpc	r25, r1
    307e:	a1 f0       	breq	.+40     	; 0x30a8 <PM_ShowStoredItemSizes+0x78>
    3080:	82 30       	cpi	r24, 0x02	; 2
    3082:	91 05       	cpc	r25, r1
    3084:	1c f4       	brge	.+6      	; 0x308c <PM_ShowStoredItemSizes+0x5c>
    3086:	89 2b       	or	r24, r25
    3088:	39 f0       	breq	.+14     	; 0x3098 <PM_ShowStoredItemSizes+0x68>
    308a:	42 c0       	rjmp	.+132    	; 0x3110 <PM_ShowStoredItemSizes+0xe0>
    308c:	82 30       	cpi	r24, 0x02	; 2
    308e:	91 05       	cpc	r25, r1
    3090:	01 f1       	breq	.+64     	; 0x30d2 <PM_ShowStoredItemSizes+0xa2>
    3092:	03 97       	sbiw	r24, 0x03	; 3
    3094:	39 f1       	breq	.+78     	; 0x30e4 <PM_ShowStoredItemSizes+0xb4>
    3096:	3c c0       	rjmp	.+120    	; 0x3110 <PM_ShowStoredItemSizes+0xe0>
			{
				case 0:
					strcpy_P(Buffer, PSTR("DATA-"));
    3098:	6b ee       	ldi	r22, 0xEB	; 235
    309a:	73 e0       	ldi	r23, 0x03	; 3
    309c:	ce 01       	movw	r24, r28
    309e:	01 96       	adiw	r24, 0x01	; 1
    30a0:	0e 94 6b 19 	call	0x32d6 <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_FLASH), &Buffer[5], 10);
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	07 c0       	rjmp	.+14     	; 0x30b6 <PM_ShowStoredItemSizes+0x86>
					break;
				case 1:
					strcpy_P(Buffer, PSTR("EPRM-"));
    30a8:	61 ef       	ldi	r22, 0xF1	; 241
    30aa:	73 e0       	ldi	r23, 0x03	; 3
    30ac:	ce 01       	movw	r24, r28
    30ae:	01 96       	adiw	r24, 0x01	; 1
    30b0:	0e 94 6b 19 	call	0x32d6 <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_EEPROM), &Buffer[5], 10);
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	0e 94 30 13 	call	0x2660 <PM_GetStoredDataSize>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	2a e0       	ldi	r18, 0x0A	; 10
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	ae 01       	movw	r20, r28
    30c4:	4a 5f       	subi	r20, 0xFA	; 250
    30c6:	5f 4f       	sbci	r21, 0xFF	; 255
    30c8:	bc 01       	movw	r22, r24
    30ca:	cd 01       	movw	r24, r26
    30cc:	0e 94 72 19 	call	0x32e4 <ultoa>
					break;
    30d0:	1f c0       	rjmp	.+62     	; 0x3110 <PM_ShowStoredItemSizes+0xe0>
				case 2:
					strcpy_P(Buffer, PSTR("FUSE-"));
    30d2:	67 ef       	ldi	r22, 0xF7	; 247
    30d4:	73 e0       	ldi	r23, 0x03	; 3
    30d6:	ce 01       	movw	r24, r28
    30d8:	01 96       	adiw	r24, 0x01	; 1
    30da:	0e 94 6b 19 	call	0x32d6 <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    30de:	af e2       	ldi	r26, 0x2F	; 47
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	08 c0       	rjmp	.+16     	; 0x30f4 <PM_ShowStoredItemSizes+0xc4>
					TempB = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);
					break;
				case 3:
					strcpy_P(Buffer, PSTR("LOCK-"));
    30e4:	6d ef       	ldi	r22, 0xFD	; 253
    30e6:	73 e0       	ldi	r23, 0x03	; 3
    30e8:	ce 01       	movw	r24, r28
    30ea:	01 96       	adiw	r24, 0x01	; 1
    30ec:	0e 94 6b 19 	call	0x32d6 <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    30f0:	a0 e3       	ldi	r26, 0x30	; 48
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    30f4:	0e 94 c6 19 	call	0x338c <__eeprom_read_byte_1F2021>
    30f8:	80 2d       	mov	r24, r0
					TempB = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);		
    30fa:	8f 3f       	cpi	r24, 0xFF	; 255
    30fc:	11 f0       	breq	.+4      	; 0x3102 <PM_ShowStoredItemSizes+0xd2>
    30fe:	99 27       	eor	r25, r25
    3100:	02 c0       	rjmp	.+4      	; 0x3106 <PM_ShowStoredItemSizes+0xd6>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	be 01       	movw	r22, r28
    3108:	6a 5f       	subi	r22, 0xFA	; 250
    310a:	7f 4f       	sbci	r23, 0xFF	; 255
    310c:	0e 94 27 03 	call	0x64e <MAIN_IntToStr>
			}
	
			LCD_puts(Buffer);
    3110:	ce 01       	movw	r24, r28
    3112:	01 96       	adiw	r24, 0x01	; 1
    3114:	0e 94 a7 07 	call	0xf4e <LCD_puts>

			MAIN_WaitForJoyRelease();
    3118:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
    311c:	97 cf       	rjmp	.-210    	; 0x304c <PM_ShowStoredItemSizes+0x1c>
    311e:	2e 96       	adiw	r28, 0x0e	; 14
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	f8 94       	cli
    3124:	de bf       	out	0x3e, r29	; 62
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	cd bf       	out	0x3d, r28	; 61
    312a:	df 91       	pop	r29
    312c:	cf 91       	pop	r28
    312e:	1f 91       	pop	r17
    3130:	08 95       	ret

00003132 <TM_FindNextTag>:
	DF_EnableDataflash(FALSE);
}

void TM_FindNextTag(void)
{
    3132:	af 92       	push	r10
    3134:	bf 92       	push	r11
    3136:	df 92       	push	r13
    3138:	ef 92       	push	r14
    313a:	ff 92       	push	r15
    313c:	0f 93       	push	r16
    313e:	1f 93       	push	r17
    3140:	cf 93       	push	r28
    3142:	df 93       	push	r29
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
    3148:	69 97       	sbiw	r28, 0x19	; 25
    314a:	0f b6       	in	r0, 0x3f	; 63
    314c:	f8 94       	cli
    314e:	de bf       	out	0x3e, r29	; 62
    3150:	0f be       	out	0x3f, r0	; 63
    3152:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Buffer[21];
	uint8_t  HeadBuff[4]      = BT_TAGHEADER;
    3154:	80 e4       	ldi	r24, 0x40	; 64
    3156:	8e 8b       	std	Y+22, r24	; 0x16
    3158:	86 e1       	ldi	r24, 0x16	; 22
    315a:	a8 2e       	mov	r10, r24
    315c:	b1 2c       	mov	r11, r1
    315e:	ac 0e       	add	r10, r28
    3160:	bd 1e       	adc	r11, r29
    3162:	88 e2       	ldi	r24, 0x28	; 40
    3164:	8f 8b       	std	Y+23, r24	; 0x17
    3166:	83 e2       	ldi	r24, 0x23	; 35
    3168:	88 8f       	std	Y+24, r24	; 0x18
    316a:	89 e2       	ldi	r24, 0x29	; 41
    316c:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t ProgDataSize     = PM_GetStoredDataSize(TYPE_FLASH);
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	0e 94 30 13 	call	0x2660 <PM_GetStoredDataSize>
    3174:	7b 01       	movw	r14, r22
    3176:	8c 01       	movw	r16, r24
	uint8_t  TotalOkHeadBytes = 0;
    3178:	dd 24       	eor	r13, r13
	uint8_t  TagByte;
	uint8_t  BytesRead;
	
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);    // Orange = busy
    317a:	81 b3       	in	r24, 0x11	; 17
    317c:	80 63       	ori	r24, 0x30	; 48
    317e:	81 bb       	out	0x11, r24	; 17

	while (DFPos < ProgDataSize)
	{
		BytesRead = 1;
		
		if (SPI_SPITransmit(0x00) == HeadBuff[TotalOkHeadBytes++])
		{
			if (TotalOkHeadBytes == 4)
			{
				uint8_t HB;
			
				for (HB = 0; HB < 20; HB++)
				{
					TagByte = SPI_SPITransmit(0x00);
					Buffer[HB] = TagByte;
					
					if (TagByte == 0x00)
					  break;
				}
				
				Buffer[20] = '\0';             // Make sure string is null-terminated

				TagExists = TRUE;
				BytesRead = (HB + 2);

				LCD_puts(Buffer);
				MAIN_SETSTATUSLED(MAIN_STATLED_GREEN); // Green = ready
				return;
			}
		}
		else
		{
			TotalOkHeadBytes = 0;
		}

		DFPos += BytesRead;
    3180:	80 91 b0 02 	lds	r24, 0x02B0
    3184:	90 91 b1 02 	lds	r25, 0x02B1
    3188:	a0 91 b2 02 	lds	r26, 0x02B2
    318c:	b0 91 b3 02 	lds	r27, 0x02B3
    3190:	8e 15       	cp	r24, r14
    3192:	9f 05       	cpc	r25, r15
    3194:	a0 07       	cpc	r26, r16
    3196:	b1 07       	cpc	r27, r17
    3198:	08 f0       	brcs	.+2      	; 0x319c <TM_FindNextTag+0x6a>
    319a:	43 c0       	rjmp	.+134    	; 0x3222 <TM_FindNextTag+0xf0>
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	0e 94 d5 08 	call	0x11aa <SPI_SPITransmit>
    31a2:	f5 01       	movw	r30, r10
    31a4:	ed 0d       	add	r30, r13
    31a6:	f1 1d       	adc	r31, r1
    31a8:	d3 94       	inc	r13
    31aa:	90 81       	ld	r25, Z
    31ac:	89 17       	cp	r24, r25
    31ae:	21 f5       	brne	.+72     	; 0x31f8 <TM_FindNextTag+0xc6>
    31b0:	84 e0       	ldi	r24, 0x04	; 4
    31b2:	d8 16       	cp	r13, r24
    31b4:	11 f5       	brne	.+68     	; 0x31fa <TM_FindNextTag+0xc8>
    31b6:	ff 24       	eor	r15, r15
    31b8:	00 e0       	ldi	r16, 0x00	; 0
    31ba:	10 e0       	ldi	r17, 0x00	; 0
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	0e 94 d5 08 	call	0x11aa <SPI_SPITransmit>
    31c2:	9e 01       	movw	r18, r28
    31c4:	2f 5f       	subi	r18, 0xFF	; 255
    31c6:	3f 4f       	sbci	r19, 0xFF	; 255
    31c8:	f8 01       	movw	r30, r16
    31ca:	e2 0f       	add	r30, r18
    31cc:	f3 1f       	adc	r31, r19
    31ce:	80 83       	st	Z, r24
    31d0:	88 23       	and	r24, r24
    31d2:	31 f0       	breq	.+12     	; 0x31e0 <TM_FindNextTag+0xae>
    31d4:	f3 94       	inc	r15
    31d6:	0f 5f       	subi	r16, 0xFF	; 255
    31d8:	1f 4f       	sbci	r17, 0xFF	; 255
    31da:	83 e1       	ldi	r24, 0x13	; 19
    31dc:	8f 15       	cp	r24, r15
    31de:	70 f7       	brcc	.-36     	; 0x31bc <TM_FindNextTag+0x8a>
    31e0:	1d 8a       	std	Y+21, r1	; 0x15
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	80 93 5e 02 	sts	0x025E, r24
    31e8:	c9 01       	movw	r24, r18
    31ea:	0e 94 a7 07 	call	0xf4e <LCD_puts>
    31ee:	81 b3       	in	r24, 0x11	; 17
    31f0:	8f 7c       	andi	r24, 0xCF	; 207
    31f2:	80 61       	ori	r24, 0x10	; 16
    31f4:	81 bb       	out	0x11, r24	; 17
    31f6:	31 c0       	rjmp	.+98     	; 0x325a <TM_FindNextTag+0x128>
    31f8:	dd 24       	eor	r13, r13
    31fa:	80 91 b0 02 	lds	r24, 0x02B0
    31fe:	90 91 b1 02 	lds	r25, 0x02B1
    3202:	a0 91 b2 02 	lds	r26, 0x02B2
    3206:	b0 91 b3 02 	lds	r27, 0x02B3
    320a:	01 96       	adiw	r24, 0x01	; 1
    320c:	a1 1d       	adc	r26, r1
    320e:	b1 1d       	adc	r27, r1
    3210:	80 93 b0 02 	sts	0x02B0, r24
    3214:	90 93 b1 02 	sts	0x02B1, r25
    3218:	a0 93 b2 02 	sts	0x02B2, r26
    321c:	b0 93 b3 02 	sts	0x02B3, r27
    3220:	b7 cf       	rjmp	.-146    	; 0x3190 <TM_FindNextTag+0x5e>
	}
	
	DF_ContinuousReadEnable(0, 0);
    3222:	60 e0       	ldi	r22, 0x00	; 0
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	cb 01       	movw	r24, r22
    3228:	0e 94 ad 09 	call	0x135a <DF_ContinuousReadEnable>
	DFPos = 0;
    322c:	10 92 b0 02 	sts	0x02B0, r1
    3230:	10 92 b1 02 	sts	0x02B1, r1
    3234:	10 92 b2 02 	sts	0x02B2, r1
    3238:	10 92 b3 02 	sts	0x02B3, r1
	
	if (TagExists == FALSE)
    323c:	80 91 5e 02 	lds	r24, 0x025E
    3240:	88 23       	and	r24, r24
    3242:	49 f4       	brne	.+18     	; 0x3256 <TM_FindNextTag+0x124>
	{
		MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);  // Green = ready
    3244:	81 b3       	in	r24, 0x11	; 17
    3246:	8f 7c       	andi	r24, 0xCF	; 207
    3248:	80 61       	ori	r24, 0x10	; 16
    324a:	81 bb       	out	0x11, r24	; 17
		MAIN_ShowError(PSTR("NO TAGS"));
    324c:	83 e0       	ldi	r24, 0x03	; 3
    324e:	94 e0       	ldi	r25, 0x04	; 4
    3250:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
    3254:	02 c0       	rjmp	.+4      	; 0x325a <TM_FindNextTag+0x128>
	}
	else
	{
		/* The following line _is_ recursion, but the function will only ever call itself
		   a maximum of one time. The function will call itself upon skipping from the last
		   tag stored in the program data to the first; to guard against infinite recursion
		   if no tags are present, the system will error out if the TagExists flag is empty
		   after a full data read. Once a tag has been read and displayed onto the LCD, the
           function returns to the main tag handling routine.                               */
		TM_FindNextTag();
    3256:	0e 94 99 18 	call	0x3132 <TM_FindNextTag>
    325a:	69 96       	adiw	r28, 0x19	; 25
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	de bf       	out	0x3e, r29	; 62
    3262:	0f be       	out	0x3f, r0	; 63
    3264:	cd bf       	out	0x3d, r28	; 61
    3266:	df 91       	pop	r29
    3268:	cf 91       	pop	r28
    326a:	1f 91       	pop	r17
    326c:	0f 91       	pop	r16
    326e:	ff 90       	pop	r15
    3270:	ef 90       	pop	r14
    3272:	df 90       	pop	r13
    3274:	bf 90       	pop	r11
    3276:	af 90       	pop	r10
    3278:	08 95       	ret

0000327a <TM_ShowTags>:
    327a:	60 e0       	ldi	r22, 0x00	; 0
    327c:	70 e0       	ldi	r23, 0x00	; 0
    327e:	cb 01       	movw	r24, r22
    3280:	0e 94 ad 09 	call	0x135a <DF_ContinuousReadEnable>
    3284:	10 92 5e 02 	sts	0x025E, r1
    3288:	10 92 b0 02 	sts	0x02B0, r1
    328c:	10 92 b1 02 	sts	0x02B1, r1
    3290:	10 92 b2 02 	sts	0x02B2, r1
    3294:	10 92 b3 02 	sts	0x02B3, r1
    3298:	0e 94 99 18 	call	0x3132 <TM_FindNextTag>
    329c:	80 91 5e 02 	lds	r24, 0x025E
    32a0:	88 23       	and	r24, r24
    32a2:	71 f0       	breq	.+28     	; 0x32c0 <TM_ShowTags+0x46>
    32a4:	8e b3       	in	r24, 0x1e	; 30
    32a6:	88 23       	and	r24, r24
    32a8:	e9 f3       	breq	.-6      	; 0x32a4 <TM_ShowTags+0x2a>
    32aa:	f7 9b       	sbis	0x1e, 7	; 30
    32ac:	03 c0       	rjmp	.+6      	; 0x32b4 <TM_ShowTags+0x3a>
    32ae:	0e 94 99 18 	call	0x3132 <TM_FindNextTag>
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <TM_ShowTags+0x3e>
    32b4:	f2 99       	sbic	0x1e, 2	; 30
    32b6:	03 c0       	rjmp	.+6      	; 0x32be <TM_ShowTags+0x44>
    32b8:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
    32bc:	f3 cf       	rjmp	.-26     	; 0x32a4 <TM_ShowTags+0x2a>
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	0e 94 6f 09 	call	0x12de <DF_EnableDataflash>
    32c4:	08 95       	ret

000032c6 <__vector_2>:
.global PCINT0_vect             ; Pin change 0 (joystick)
.global PCINT1_vect             ; Pin change 1 (joystick)

PCINT0_vect:
  jmp PCINT1_vect
    32c6:	0c 94 87 03 	jmp	0x70e <__vector_3>

000032ca <__vector_10>:

.global TIMER0_COMP_vect             ; Timer 0 compare

TIMER0_COMP_vect:
  push r24
    32ca:	8f 93       	push	r24
  ldi r24, (USI_CONTROL_REG_FLAGS | (1<<USITC))
    32cc:	8b e5       	ldi	r24, 0x5B	; 91
  sts _SFR_MEM_ADDR(USICR), r24
    32ce:	80 93 b8 00 	sts	0x00B8, r24
  pop r24
    32d2:	8f 91       	pop	r24
  reti
    32d4:	18 95       	reti

000032d6 <strcpy_P>:
    32d6:	fb 01       	movw	r30, r22
    32d8:	dc 01       	movw	r26, r24
    32da:	05 90       	lpm	r0, Z+
    32dc:	0d 92       	st	X+, r0
    32de:	00 20       	and	r0, r0
    32e0:	e1 f7       	brne	.-8      	; 0x32da <strcpy_P+0x4>
    32e2:	08 95       	ret

000032e4 <ultoa>:
    32e4:	fa 01       	movw	r30, r20
    32e6:	cf 93       	push	r28
    32e8:	ff 93       	push	r31
    32ea:	ef 93       	push	r30
    32ec:	22 30       	cpi	r18, 0x02	; 2
    32ee:	cc f0       	brlt	.+50     	; 0x3322 <ultoa+0x3e>
    32f0:	25 32       	cpi	r18, 0x25	; 37
    32f2:	bc f4       	brge	.+46     	; 0x3322 <ultoa+0x3e>
    32f4:	c2 2f       	mov	r28, r18
    32f6:	2c 2f       	mov	r18, r28
    32f8:	33 27       	eor	r19, r19
    32fa:	44 27       	eor	r20, r20
    32fc:	55 27       	eor	r21, r21
    32fe:	ff 93       	push	r31
    3300:	ef 93       	push	r30
    3302:	0e 94 ee 19 	call	0x33dc <__udivmodsi4>
    3306:	ef 91       	pop	r30
    3308:	ff 91       	pop	r31
    330a:	60 5d       	subi	r22, 0xD0	; 208
    330c:	6a 33       	cpi	r22, 0x3A	; 58
    330e:	0c f0       	brlt	.+2      	; 0x3312 <ultoa+0x2e>
    3310:	69 5d       	subi	r22, 0xD9	; 217
    3312:	61 93       	st	Z+, r22
    3314:	b9 01       	movw	r22, r18
    3316:	ca 01       	movw	r24, r20
    3318:	60 50       	subi	r22, 0x00	; 0
    331a:	70 40       	sbci	r23, 0x00	; 0
    331c:	80 40       	sbci	r24, 0x00	; 0
    331e:	90 40       	sbci	r25, 0x00	; 0
    3320:	51 f7       	brne	.-44     	; 0x32f6 <ultoa+0x12>
    3322:	10 82       	st	Z, r1
    3324:	8f 91       	pop	r24
    3326:	9f 91       	pop	r25
    3328:	cf 91       	pop	r28
    332a:	0c 94 97 19 	jmp	0x332e <strrev>

0000332e <strrev>:
    332e:	dc 01       	movw	r26, r24
    3330:	fc 01       	movw	r30, r24
    3332:	01 90       	ld	r0, Z+
    3334:	00 20       	and	r0, r0
    3336:	e9 f7       	brne	.-6      	; 0x3332 <strrev+0x4>
    3338:	32 97       	sbiw	r30, 0x02	; 2
    333a:	ae 17       	cp	r26, r30
    333c:	bf 07       	cpc	r27, r31
    333e:	30 f4       	brcc	.+12     	; 0x334c <strrev+0x1e>
    3340:	7c 91       	ld	r23, X
    3342:	60 81       	ld	r22, Z
    3344:	70 83       	st	Z, r23
    3346:	31 97       	sbiw	r30, 0x01	; 1
    3348:	6d 93       	st	X+, r22
    334a:	f7 cf       	rjmp	.-18     	; 0x333a <strrev+0xc>
    334c:	08 95       	ret

0000334e <__mulsi3>:
    334e:	62 9f       	mul	r22, r18
    3350:	d0 01       	movw	r26, r0
    3352:	73 9f       	mul	r23, r19
    3354:	f0 01       	movw	r30, r0
    3356:	82 9f       	mul	r24, r18
    3358:	e0 0d       	add	r30, r0
    335a:	f1 1d       	adc	r31, r1
    335c:	64 9f       	mul	r22, r20
    335e:	e0 0d       	add	r30, r0
    3360:	f1 1d       	adc	r31, r1
    3362:	92 9f       	mul	r25, r18
    3364:	f0 0d       	add	r31, r0
    3366:	83 9f       	mul	r24, r19
    3368:	f0 0d       	add	r31, r0
    336a:	74 9f       	mul	r23, r20
    336c:	f0 0d       	add	r31, r0
    336e:	65 9f       	mul	r22, r21
    3370:	f0 0d       	add	r31, r0
    3372:	99 27       	eor	r25, r25
    3374:	72 9f       	mul	r23, r18
    3376:	b0 0d       	add	r27, r0
    3378:	e1 1d       	adc	r30, r1
    337a:	f9 1f       	adc	r31, r25
    337c:	63 9f       	mul	r22, r19
    337e:	b0 0d       	add	r27, r0
    3380:	e1 1d       	adc	r30, r1
    3382:	f9 1f       	adc	r31, r25
    3384:	bd 01       	movw	r22, r26
    3386:	cf 01       	movw	r24, r30
    3388:	11 24       	eor	r1, r1
    338a:	08 95       	ret

0000338c <__eeprom_read_byte_1F2021>:
    338c:	f9 99       	sbic	0x1f, 1	; 31
    338e:	fe cf       	rjmp	.-4      	; 0x338c <__eeprom_read_byte_1F2021>
    3390:	b2 bd       	out	0x22, r27	; 34
    3392:	a1 bd       	out	0x21, r26	; 33
    3394:	f8 9a       	sbi	0x1f, 0	; 31
    3396:	11 96       	adiw	r26, 0x01	; 1
    3398:	00 b4       	in	r0, 0x20	; 32
    339a:	08 95       	ret

0000339c <__eeprom_read_block_1F2021>:
    339c:	f7 df       	rcall	.-18     	; 0x338c <__eeprom_read_byte_1F2021>
    339e:	01 92       	st	Z+, r0
    33a0:	1a 94       	dec	r1
    33a2:	e1 f7       	brne	.-8      	; 0x339c <__eeprom_read_block_1F2021>
    33a4:	08 95       	ret

000033a6 <__eeprom_read_word_1F2021>:
    33a6:	f2 df       	rcall	.-28     	; 0x338c <__eeprom_read_byte_1F2021>
    33a8:	e0 2d       	mov	r30, r0
    33aa:	f0 df       	rcall	.-32     	; 0x338c <__eeprom_read_byte_1F2021>
    33ac:	f0 2d       	mov	r31, r0
    33ae:	08 95       	ret

000033b0 <__eeprom_write_byte_1F2021>:
    33b0:	f9 99       	sbic	0x1f, 1	; 31
    33b2:	fe cf       	rjmp	.-4      	; 0x33b0 <__eeprom_write_byte_1F2021>
    33b4:	b2 bd       	out	0x22, r27	; 34
    33b6:	a1 bd       	out	0x21, r26	; 33
    33b8:	00 bc       	out	0x20, r0	; 32
    33ba:	11 96       	adiw	r26, 0x01	; 1
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	f8 94       	cli
    33c0:	fa 9a       	sbi	0x1f, 2	; 31
    33c2:	f9 9a       	sbi	0x1f, 1	; 31
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	08 95       	ret

000033c8 <__eeprom_write_word_1F2021>:
    33c8:	f3 df       	rcall	.-26     	; 0x33b0 <__eeprom_write_byte_1F2021>
    33ca:	01 2c       	mov	r0, r1
    33cc:	f1 df       	rcall	.-30     	; 0x33b0 <__eeprom_write_byte_1F2021>
    33ce:	11 24       	eor	r1, r1
    33d0:	08 95       	ret

000033d2 <__eeprom_write_block_1F2021>:
    33d2:	01 90       	ld	r0, Z+
    33d4:	ed df       	rcall	.-38     	; 0x33b0 <__eeprom_write_byte_1F2021>
    33d6:	1a 94       	dec	r1
    33d8:	e1 f7       	brne	.-8      	; 0x33d2 <__eeprom_write_block_1F2021>
    33da:	08 95       	ret

000033dc <__udivmodsi4>:
    33dc:	a1 e2       	ldi	r26, 0x21	; 33
    33de:	1a 2e       	mov	r1, r26
    33e0:	aa 1b       	sub	r26, r26
    33e2:	bb 1b       	sub	r27, r27
    33e4:	fd 01       	movw	r30, r26
    33e6:	0d c0       	rjmp	.+26     	; 0x3402 <__udivmodsi4_ep>

000033e8 <__udivmodsi4_loop>:
    33e8:	aa 1f       	adc	r26, r26
    33ea:	bb 1f       	adc	r27, r27
    33ec:	ee 1f       	adc	r30, r30
    33ee:	ff 1f       	adc	r31, r31
    33f0:	a2 17       	cp	r26, r18
    33f2:	b3 07       	cpc	r27, r19
    33f4:	e4 07       	cpc	r30, r20
    33f6:	f5 07       	cpc	r31, r21
    33f8:	20 f0       	brcs	.+8      	; 0x3402 <__udivmodsi4_ep>
    33fa:	a2 1b       	sub	r26, r18
    33fc:	b3 0b       	sbc	r27, r19
    33fe:	e4 0b       	sbc	r30, r20
    3400:	f5 0b       	sbc	r31, r21

00003402 <__udivmodsi4_ep>:
    3402:	66 1f       	adc	r22, r22
    3404:	77 1f       	adc	r23, r23
    3406:	88 1f       	adc	r24, r24
    3408:	99 1f       	adc	r25, r25
    340a:	1a 94       	dec	r1
    340c:	69 f7       	brne	.-38     	; 0x33e8 <__udivmodsi4_loop>
    340e:	60 95       	com	r22
    3410:	70 95       	com	r23
    3412:	80 95       	com	r24
    3414:	90 95       	com	r25
    3416:	9b 01       	movw	r18, r22
    3418:	ac 01       	movw	r20, r24
    341a:	bd 01       	movw	r22, r26
    341c:	cf 01       	movw	r24, r30
    341e:	08 95       	ret
