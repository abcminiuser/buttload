
ButtLoad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000035c8  0000367c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035c8  00000000  00000000  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b4  00800104  00800104  00003680  2**0
                  ALLOC
  3 .noinit       00000000  008002b8  008002b8  00003709  2**0
                  CONTENTS
  4 .eeprom       00000089  00810000  00810000  00003680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .stab         000003e4  00000000  00000000  0000370c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000000fb  00000000  00000000  00003af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 0000012c  00000000  00000000  00003beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d7c  00000000  00000000  00003d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004167  00000000  00000000  00004a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000101f  00000000  00000000  00008bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003371  00000000  00000000  00009c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001163  00000000  00000000  0000cf8a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 02 	jmp	0x42c <__init>
       4:	0c 94 31 02 	jmp	0x462 <__bad_interrupt>
       8:	0c 94 37 1a 	jmp	0x346e <__vector_2>
       c:	0c 94 96 03 	jmp	0x72c <__vector_3>
      10:	0c 94 e8 0b 	jmp	0x17d0 <__vector_4>
      14:	0c 94 eb 07 	jmp	0xfd6 <__vector_5>
      18:	0c 94 31 02 	jmp	0x462 <__bad_interrupt>
      1c:	0c 94 31 02 	jmp	0x462 <__bad_interrupt>
      20:	0c 94 31 02 	jmp	0x462 <__bad_interrupt>
      24:	0c 94 2b 0c 	jmp	0x1856 <__vector_9>
      28:	0c 94 39 1a 	jmp	0x3472 <__vector_10>
      2c:	0c 94 31 02 	jmp	0x462 <__bad_interrupt>
      30:	0c 94 31 02 	jmp	0x462 <__bad_interrupt>
      34:	0c 94 6e 0b 	jmp	0x16dc <__vector_13>
      38:	0c 94 31 02 	jmp	0x462 <__bad_interrupt>
      3c:	0c 94 31 02 	jmp	0x462 <__bad_interrupt>
      40:	0c 94 31 02 	jmp	0x462 <__bad_interrupt>
      44:	0c 94 4d 09 	jmp	0x129a <__vector_17>
      48:	0c 94 31 02 	jmp	0x462 <__bad_interrupt>
      4c:	0c 94 31 02 	jmp	0x462 <__bad_interrupt>
      50:	0c 94 31 02 	jmp	0x462 <__bad_interrupt>
      54:	0c 94 31 02 	jmp	0x462 <__bad_interrupt>
      58:	0c 94 98 08 	jmp	0x1130 <__vector_22>

0000005c <SIFONames>:
      5c:	53 54 4f 52 41 47 45 20 53 49 5a 45 53 20 56 49     STORAGE SIZES VI
      6c:	45 57 20 44 41 54 41 20 54 41 47 53                 EW DATA TAGS

00000078 <USISpeeds>:
      78:	20 35 37 31 35 33 20 48 5a 20 38 36 37 33 38 20      57153 HZ 86738 
      88:	48 5a 31 31 33 34 32 37 20 48 5a 32 31 30 36 35     HZ113427 HZ21065
      98:	31 20 48 5a                                         1 HZ

0000009c <ProgOptions>:
      9c:	05 01 f9 00 e9 00 d9 00 c9 00 b5 00 aa 00           ..............

000000aa <PRG_C>:
      aa:	45 52 41 53 45 20 4f 4e 4c 59 00                    ERASE ONLY.

000000b5 <PRG_FL>:
      b5:	46 55 53 45 20 41 4e 44 20 4c 4f 43 4b 20 42 59     FUSE AND LOCK BY
      c5:	54 45 53 00                                         TES.

000000c9 <PRG_L>:
      c9:	4c 4f 43 4b 20 42 59 54 45 53 20 4f 4e 4c 59 00     LOCK BYTES ONLY.

000000d9 <PRG_F>:
      d9:	46 55 53 45 20 42 59 54 45 53 20 4f 4e 4c 59 00     FUSE BYTES ONLY.

000000e9 <PRG_DE>:
      e9:	44 41 54 41 20 41 4e 44 20 45 45 50 52 4f 4d 00     DATA AND EEPROM.

000000f9 <PRG_E>:
      f9:	45 45 50 52 4f 4d 20 4f 4e 4c 59 00                 EEPROM ONLY.

00000105 <PRG_D>:
     105:	44 41 54 41 20 4f 4e 4c 59 00                       DATA ONLY.

0000010f <SettingFunctionPtrs>:
     10f:	d4 05 27 06 5f 06 ab 06 a0 05 78 07                 ..'._.....x.

0000011b <SettingFunctionNames>:
     11b:	78 01 6a 01 59 01 47 01 3a 01 27 01                 x.j.Y.G.:.'.

00000127 <SFunc_GOBOOTLOADER>:
     127:	4a 55 4d 50 20 54 4f 20 42 4f 4f 54 4c 4f 41 44     JUMP TO BOOTLOAD
     137:	45 52 00                                            ER.

0000013a <SFunc_CLEARMEM>:
     13a:	43 4c 45 41 52 20 4d 45 4d 4f 52 59 00              CLEAR MEMORY.

00000147 <SFunc_SETAUTOSLEEPTO>:
     147:	53 45 54 20 53 4c 45 45 50 20 54 49 4d 45 4f 55     SET SLEEP TIMEOU
     157:	54 00                                               T.

00000159 <SFunc_SETFIRMMINOR>:
     159:	53 45 54 20 46 49 52 4d 20 56 45 52 53 49 4f 4e     SET FIRM VERSION
	...

0000016a <SFunc_SETSPISPEED>:
     16a:	53 45 54 20 53 50 49 20 53 50 45 45 44 00           SET SPI SPEED.

00000178 <SFunc_SETCONTRAST>:
     178:	53 45 54 20 43 4f 4e 54 52 41 53 54 00              SET CONTRAST.

00000185 <MainFunctionPtrs>:
     185:	ef 03 6e 05 39 04 08 04 22 07 ba 03 0e 07           ..n.9...".....

00000193 <MainFunctionNames>:
     193:	ea 01 df 01 d3 01 c4 01 b5 01 ac 01 a1 01           ..............

000001a1 <Func_SLEEP>:
     1a1:	53 4c 45 45 50 20 4d 4f 44 45 00                    SLEEP MODE.

000001ac <Func_SETTINGS>:
     1ac:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

000001b5 <Func_PRGMSTOREINFO>:
     1b5:	44 41 54 41 53 54 4f 52 45 20 49 4e 46 4f 00        DATASTORE INFO.

000001c4 <Func_PRGMDATAFLASH>:
     1c4:	44 41 54 41 46 4c 41 53 48 20 50 52 47 4d 00        DATAFLASH PRGM.

000001d3 <Func_PRGMAVR>:
     1d3:	50 52 4f 47 52 41 4d 20 41 56 52 00                 PROGRAM AVR.

000001df <Func_STOREPRGM>:
     1df:	53 54 4f 52 45 20 50 52 47 4d 00                    STORE PRGM.

000001ea <Func_ISPPRGM>:
     1ea:	41 56 52 49 53 50 20 4d 4f 44 45 00                 AVRISP MODE.

000001f6 <AboutTextPtrs>:
     1f6:	21 02 1c 02 0d 02 fe 01                             !.......

000001fe <CopyRight>:
     1fe:	3c 43 3e 20 32 30 30 36 20 2d 20 47 50 4c 00        <C> 2006 - GPL.

0000020d <AuthorName>:
     20d:	42 59 20 44 45 41 4e 20 43 41 4d 45 52 41 00        BY DEAN CAMERA.

0000021c <VersionInfo>:
     21c:	56 31 2d 34 00                                      V1-4.

00000221 <ProgrammerName>:
     221:	42 55 54 54 4c 4f 41 44 00                          BUTTLOAD.

0000022a <WaitText>:
     22a:	2a 57 41 49 54 2a 00                                *WAIT*.

00000231 <BUTTTAG_Author>:
     231:	40 28 23 29 42 59 20 44 45 41 4e 20 43 41 4d 45     @(#)BY DEAN CAME
     241:	52 41 00                                            RA.

00000244 <BUTTTAG_Name>:
     244:	40 28 23 29 42 55 54 54 4c 4f 41 44 20 41 56 52     @(#)BUTTLOAD AVR
     254:	49 53 50 00                                         ISP.

00000258 <__c.17>:
     258:	50 52 47 3e 20 20 00                                PRG>  .

0000025f <__c.16>:
     25f:	42 41 44 49 53 52 00                                BADISR.

00000266 <__c.9>:
     266:	4e 4f 20 45 52 41 53 45 20 43 4d 44 00              NO ERASE CMD.

00000273 <__c.10>:
     273:	4e 4f 20 44 41 54 41 00                             NO DATA.

0000027b <__c.11>:
     27b:	4e 4f 20 45 45 50 52 4f 4d 00                       NO EEPROM.

00000285 <__c.12>:
     285:	4e 4f 20 46 55 53 45 20 42 59 54 45 53 00           NO FUSE BYTES.

00000293 <__c.13>:
     293:	4e 4f 20 4c 4f 43 4b 20 42 59 54 45 53 00           NO LOCK BYTES.

000002a1 <__c.14>:
     2a1:	50 52 4f 47 52 41 4d 4d 49 4e 47 20 44 4f 4e 45     PROGRAMMING DONE
	...

000002b2 <__c.15>:
     2b2:	46 41 49 4c 45 44 00                                FAILED.

000002b9 <__c.8>:
     2b9:	2a 53 54 4f 52 41 47 45 20 4d 4f 44 45 2a 00        *STORAGE MODE*.

000002c8 <__c.5>:
     2c8:	43 4f 4e 46 49 52 4d 00                             CONFIRM.

000002d0 <__c.6>:
     2d0:	3c 4e 20 59 3e 00                                   <N Y>.

000002d6 <__c.7>:
     2d6:	4d 45 4d 20 43 4c 45 41 52 45 44 00                 MEM CLEARED.

000002e2 <__c.4>:
     2e2:	56 32 2d 20 00                                      V2- .

000002e7 <__c.2>:
     2e7:	20 20 20 20 53 45 43 00                                 SEC.

000002ef <__c.3>:
     2ef:	4f 46 46 00                                         OFF.

000002f3 <__c.1>:
     2f3:	4e 4f 20 53 54 4f 52 45 44 20 50 52 47 4d 00        NO STORED PRGM.

00000302 <__c.0>:
     302:	2a 4a 54 41 47 20 4f 4e 2a 00                       *JTAG ON*.

0000030c <LCD_SegTable>:
     30c:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
     31c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
     32c:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
     33c:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
     34c:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
     35c:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
     36c:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

00000378 <USIPSValues>:
     378:	03 80 02 54 01 40 00 22                             ...T.@."

00000380 <DataFlashError>:
     380:	44 41 54 41 46 4c 41 53 48 20 45 52 52 4f 52 00     DATAFLASH ERROR.

00000390 <DF_Pages>:
     390:	00 01 00 02 00 04 00 08 00 10 00 10 00 20 00 20     ............. . 

000003a0 <DF_PageSize>:
     3a0:	08 01 08 01 08 01 08 01 08 01 10 02 10 02 20 04     .............. .

000003b0 <DF_PageBits>:
     3b0:	09 09 09 09 09 0a 0a 0b                             ........

000003b8 <__c.0>:
     3b8:	42 55 46 46 20 4f 56 45 52 46 4c 4f 57 00           BUFF OVERFLOW.

000003c6 <AutoSleepTOValues>:
     3c6:	00 0f 1e 3c 78                                      ...<x

000003cb <AutoSleepTOTicks>:
     3cb:	00 00 96 00 2c 01 58 02 b0 04                       ....,.X...

000003d5 <DataFlashProgMode>:
     3d5:	2a 44 41 54 41 46 4c 41 53 48 20 4d 4f 44 45 2a     *DATAFLASH MODE*
	...

000003e6 <SignonResponse>:
     3e6:	01 00 08 41 56 52 49 53 50 5f 32                    ...AVRISP_2

000003f1 <SyncErrorMessage>:
     3f1:	53 59 4e 43 20 45 52 52 4f 52 00                    SYNC ERROR.

000003fc <AVRISPModeMessage>:
     3fc:	2a 41 54 41 56 52 49 53 50 20 4d 4f 44 45 2a 00     *ATAVRISP MODE*.

0000040c <__c.0>:
     40c:	44 41 54 41 2d 00                                   DATA-.

00000412 <__c.1>:
     412:	45 50 52 4d 2d 00                                   EPRM-.

00000418 <__c.2>:
     418:	46 55 53 45 2d 00                                   FUSE-.

0000041e <__c.3>:
     41e:	4c 4f 43 4b 2d 00                                   LOCK-.

00000424 <__c.0>:
     424:	4e 4f 20 54 41 47 53 00                             NO TAGS.

0000042c <__init>:
     42c:	11 24       	eor	r1, r1
     42e:	1f be       	out	0x3f, r1	; 63
     430:	cf ef       	ldi	r28, 0xFF	; 255
     432:	d4 e0       	ldi	r29, 0x04	; 4
     434:	de bf       	out	0x3e, r29	; 62
     436:	cd bf       	out	0x3d, r28	; 61

00000438 <__do_copy_data>:
     438:	11 e0       	ldi	r17, 0x01	; 1
     43a:	a0 e0       	ldi	r26, 0x00	; 0
     43c:	b1 e0       	ldi	r27, 0x01	; 1
     43e:	e8 ec       	ldi	r30, 0xC8	; 200
     440:	f5 e3       	ldi	r31, 0x35	; 53
     442:	02 c0       	rjmp	.+4      	; 0x448 <.do_copy_data_start>

00000444 <.do_copy_data_loop>:
     444:	05 90       	lpm	r0, Z+
     446:	0d 92       	st	X+, r0

00000448 <.do_copy_data_start>:
     448:	a4 30       	cpi	r26, 0x04	; 4
     44a:	b1 07       	cpc	r27, r17
     44c:	d9 f7       	brne	.-10     	; 0x444 <.do_copy_data_loop>

0000044e <__do_clear_bss>:
     44e:	12 e0       	ldi	r17, 0x02	; 2
     450:	a4 e0       	ldi	r26, 0x04	; 4
     452:	b1 e0       	ldi	r27, 0x01	; 1
     454:	01 c0       	rjmp	.+2      	; 0x458 <.do_clear_bss_start>

00000456 <.do_clear_bss_loop>:
     456:	1d 92       	st	X+, r1

00000458 <.do_clear_bss_start>:
     458:	a8 3b       	cpi	r26, 0xB8	; 184
     45a:	b1 07       	cpc	r27, r17
     45c:	e1 f7       	brne	.-8      	; 0x456 <.do_clear_bss_loop>
     45e:	0c 94 77 02 	jmp	0x4ee <main>

00000462 <__bad_interrupt>:
     462:	0c 94 b5 03 	jmp	0x76a <__vector_default>

00000466 <MAIN_Delay10MS>:

// ======================================================================================

void MAIN_Delay10MS(uint8_t loops)
{
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     46a:	28 2f       	mov	r18, r24
     46c:	21 50       	subi	r18, 0x01	; 1
     46e:	2f 3f       	cpi	r18, 0xFF	; 255
     470:	49 f0       	breq	.+18     	; 0x484 <MAIN_Delay10MS+0x1e>
     472:	a0 e0       	ldi	r26, 0x00	; 0
     474:	b8 e4       	ldi	r27, 0x48	; 72
     476:	c0 e0       	ldi	r28, 0x00	; 0
     478:	d0 e0       	ldi	r29, 0x00	; 0
     47a:	cd 01       	movw	r24, r26
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	f1 f7       	brne	.-4      	; 0x47c <MAIN_Delay10MS+0x16>
     480:	21 50       	subi	r18, 0x01	; 1
     482:	d8 f7       	brcc	.-10     	; 0x47a <MAIN_Delay10MS+0x14>
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <MAIN_WaitForJoyRelease>:
  /* Prevents the use of floating point libraries. Delaying in groups of
     10ms increases accuracy by reducing the time overhead for each loop
     interation of the while.                                            */

	while (loops--)
	  _delay_ms(10);
}

void MAIN_Delay1MS(uint8_t loops)
{
  /* Prevents the use of floating point libraries. Less accurate than the
     Delay10MS routine, but nessesary for many commands. The overhead required
     to call the routine is substantially less than the overhead required to
     calculate the float at compile time, so this actually saves execution time. */

	while (loops--)
	  _delay_ms(1);
}

void MAIN_ResetCSLine(const uint8_t ActiveInactive)
{
	/* ActiveInactive controls the /Reset line to an AVR device or external dataflash
	/CS line. If the reset polarity parameter is a 0 then interfacing with AT89
	devices which has an active high reset. Pins are tristated when inactive.         */
	
	switch (ActiveInactive)
	{
		case MAIN_RESETCS_ACTIVE:      // The target RESET line may be either active high or low.
			DDRF |= (1 << 6);
		
			if (!(eeprom_read_byte(&EEPROMVars.ResetPolarity))) // Translate to correct logic level for target device type
			  PORTF |=  (1 << 6);
			else
			  PORTF &= ~(1 << 6);
		
			break;
		case MAIN_RESETCS_EXTDFACTIVE: // Dataflashes are always active low.
			DDRF  |=  (1 << 6);
			PORTF &= ~(1 << 6);
			
			break;
		case MAIN_RESETCS_INACTIVE:    // Both modes tristate the pins when inactive.
			DDRF  &= ~(1 << 6);
			PORTF &= ~(1 << 6);
	}
}

void MAIN_WaitForJoyRelease(void)
{
	while (1)
	{
		while (JoyStatus) {};                   // Wait until joystick released
     48a:	8e b3       	in	r24, 0x1e	; 30
     48c:	88 23       	and	r24, r24
     48e:	e9 f7       	brne	.-6      	; 0x48a <MAIN_WaitForJoyRelease>

		MAIN_Delay10MS(1);
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	0e 94 33 02 	call	0x466 <MAIN_Delay10MS>

		if (!(JoyStatus))                       // Joystick still released (not bouncing), return
     496:	8e b3       	in	r24, 0x1e	; 30
     498:	88 23       	and	r24, r24
     49a:	b9 f7       	brne	.-18     	; 0x48a <MAIN_WaitForJoyRelease>
     49c:	08 95       	ret

0000049e <FUNCShowAbout>:
		  return;
	}
}

void MAIN_IntToStr(uint16_t IntV, uint8_t* Buff)
{
	// Shows leading zeros, unlike itoa.

	uint8_t Temp = 0;
	
	while (IntV >= 100)
	{
		Temp++;
		IntV -= 100;
	}

	*(Buff++) = '0' + Temp;
	
	Temp = 0;
	
	while (IntV >= 10)
	{
		Temp++;
		IntV -= 10;
	}
		
	*(Buff++) = '0' + Temp;
	*(Buff++) = '0' + IntV;
	*(Buff)   = '\0';
}

void MAIN_ShowProgType(const uint8_t Letter)
{
	uint8_t ProgTypeBuffer[7];

	strcpy_P(ProgTypeBuffer, PSTR("PRG>  "));
	ProgTypeBuffer[5] = Letter;
	
	LCD_puts(ProgTypeBuffer);
}

void MAIN_ShowError(const uint8_t *pFlashStr)
{
	uint8_t ErrorBuff[LCD_TEXTBUFFER_SIZE];   // New buffer, LCD text buffer size
	
	ErrorBuff[0] = 'E';
	ErrorBuff[1] = '>';

	strcpy_P(&ErrorBuff[2], pFlashStr);       // WARNING: If error text is larger than (TEXTBUFFER_SIZE - 2),
	                                          // this will overflow the buffer and probably crash the micro!
	LCD_puts(ErrorBuff);
	
	MAIN_WaitForJoyRelease();
	while (!(JoyStatus & JOY_PRESS)) {};
	MAIN_WaitForJoyRelease();
}

// ======================================================================================

ISR(PCINT1_vect, ISR_NOBLOCK)                 // Joystick routine; PCINT0_vect is bound to this also via JoystickInterrupt.S
{
	JoyStatus = (~PINB & JOY_BMASK)
	          | (~PINE & JOY_EMASK);
			  
	TIMEOUT_SLEEP_TIMEOUT_RESET();
}

ISR(BADISR_vect, ISR_NAKED)                   // Bad ISR routine; should never be called, here for safety
{
	MAIN_ShowError(PSTR("BADISR"));
	while (1) {};
}

// ======================================================================================

void FUNCChangeSettings(void)
{
	uint8_t CurrSFunc = 0;
	
	JoyStatus = 1;

	while (1)
	{
		if (JoyStatus)                         // Joystick is in the non-center position
		{
			if (JoyStatus & JOY_UP)            // Previous function
			  (CurrSFunc == 0)? CurrSFunc = 5 : CurrSFunc--;
			else if (JoyStatus & JOY_DOWN)     // Next function
			  (CurrSFunc == 5)? CurrSFunc = 0 : CurrSFunc++;
			else if (JoyStatus & JOY_PRESS)    // Select current function
			  ((FuncPtr)pgm_read_word(&SettingFunctionPtrs[CurrSFunc]))(); // Run associated function
			else if (JoyStatus & JOY_LEFT)
			  return;
		
			// Show current function onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&SettingFunctionNames[CurrSFunc]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCShowAbout(void)
{
     49e:	cf 93       	push	r28
	uint8_t InfoNum = 0;
     4a0:	c0 e0       	ldi	r28, 0x00	; 0
	
	JoyStatus = 1;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	8e bb       	out	0x1e, r24	; 30
			
	while (1)
	{
		if (JoyStatus)
     4a6:	8e b3       	in	r24, 0x1e	; 30
     4a8:	88 23       	and	r24, r24
     4aa:	e9 f3       	breq	.-6      	; 0x4a6 <FUNCShowAbout+0x8>
		{
			if (JoyStatus & JOY_UP)
     4ac:	f6 9b       	sbis	0x1e, 6	; 30
     4ae:	06 c0       	rjmp	.+12     	; 0x4bc <FUNCShowAbout+0x1e>
			  (InfoNum == 0)? InfoNum = 3 : InfoNum--;
     4b0:	cc 23       	and	r28, r28
     4b2:	11 f4       	brne	.+4      	; 0x4b8 <FUNCShowAbout+0x1a>
     4b4:	c3 e0       	ldi	r28, 0x03	; 3
     4b6:	0c c0       	rjmp	.+24     	; 0x4d0 <FUNCShowAbout+0x32>
     4b8:	c1 50       	subi	r28, 0x01	; 1
     4ba:	0a c0       	rjmp	.+20     	; 0x4d0 <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_DOWN)
     4bc:	f7 9b       	sbis	0x1e, 7	; 30
     4be:	06 c0       	rjmp	.+12     	; 0x4cc <FUNCShowAbout+0x2e>
			  (InfoNum == 3)? InfoNum = 0 : InfoNum++;
     4c0:	c3 30       	cpi	r28, 0x03	; 3
     4c2:	11 f4       	brne	.+4      	; 0x4c8 <FUNCShowAbout+0x2a>
     4c4:	c0 e0       	ldi	r28, 0x00	; 0
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <FUNCShowAbout+0x32>
     4c8:	cf 5f       	subi	r28, 0xFF	; 255
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_LEFT)
     4cc:	f2 99       	sbic	0x1e, 2	; 30
     4ce:	0d c0       	rjmp	.+26     	; 0x4ea <FUNCShowAbout+0x4c>
			  return;

			LCD_puts_f((uint8_t*)pgm_read_word(&AboutTextPtrs[InfoNum]));
     4d0:	ec 2f       	mov	r30, r28
     4d2:	ff 27       	eor	r31, r31
     4d4:	ee 0f       	add	r30, r30
     4d6:	ff 1f       	adc	r31, r31
     4d8:	ea 50       	subi	r30, 0x0A	; 10
     4da:	fe 4f       	sbci	r31, 0xFE	; 254
     4dc:	85 91       	lpm	r24, Z+
     4de:	94 91       	lpm	r25, Z
     4e0:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     4e4:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
     4e8:	de cf       	rjmp	.-68     	; 0x4a6 <FUNCShowAbout+0x8>
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <main>:
     4ee:	cf ef       	ldi	r28, 0xFF	; 255
     4f0:	d4 e0       	ldi	r29, 0x04	; 4
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	c0 e0       	ldi	r28, 0x00	; 0
     4f8:	80 e8       	ldi	r24, 0x80	; 128
     4fa:	80 bf       	out	0x30, r24	; 48
     4fc:	85 e0       	ldi	r24, 0x05	; 5
     4fe:	80 93 64 00 	sts	0x0064, r24
     502:	80 e3       	ldi	r24, 0x30	; 48
     504:	80 bb       	out	0x10, r24	; 16
     506:	87 e2       	ldi	r24, 0x27	; 39
     508:	84 b9       	out	0x04, r24	; 4
     50a:	8f ed       	ldi	r24, 0xDF	; 223
     50c:	85 b9       	out	0x05, r24	; 5
     50e:	8c e0       	ldi	r24, 0x0C	; 12
     510:	8e b9       	out	0x0e, r24	; 14
     512:	80 93 6b 00 	sts	0x006B, r24
     516:	80 ed       	ldi	r24, 0xD0	; 208
     518:	80 93 6c 00 	sts	0x006C, r24
     51c:	80 ec       	ldi	r24, 0xC0	; 192
     51e:	8d bb       	out	0x1d, r24	; 29
     520:	8c bb       	out	0x1c, r24	; 28
     522:	81 b3       	in	r24, 0x11	; 17
     524:	8f 7c       	andi	r24, 0xCF	; 207
     526:	80 62       	ori	r24, 0x20	; 32
     528:	81 bb       	out	0x11, r24	; 17
     52a:	0e 94 0c 08 	call	0x1018 <LCD_Init>
     52e:	8f e0       	ldi	r24, 0x0F	; 15
     530:	80 93 e7 00 	sts	0x00E7, r24
     534:	8a e2       	ldi	r24, 0x2A	; 42
     536:	92 e0       	ldi	r25, 0x02	; 2
     538:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     53c:	78 94       	sei
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     53e:	28 e8       	ldi	r18, 0x88	; 136
     540:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t result;
  asm volatile
     542:	d9 01       	movw	r26, r18
     544:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
     548:	80 2d       	mov	r24, r0
     54a:	8a 37       	cpi	r24, 0x7A	; 122
     54c:	89 f0       	breq	.+34     	; 0x570 <__stack+0x71>
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	4f ef       	ldi	r20, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     554:	dc 01       	movw	r26, r24
     556:	04 2e       	mov	r0, r20
     558:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	52 e0       	ldi	r21, 0x02	; 2
     560:	80 30       	cpi	r24, 0x00	; 0
     562:	95 07       	cpc	r25, r21
     564:	b8 f3       	brcs	.-18     	; 0x554 <__stack+0x55>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
     566:	8a e7       	ldi	r24, 0x7A	; 122
  asm volatile (
     568:	d9 01       	movw	r26, r18
     56a:	08 2e       	mov	r0, r24
     56c:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
     570:	a5 e8       	ldi	r26, 0x85	; 133
     572:	b0 e0       	ldi	r27, 0x00	; 0
     574:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
     578:	80 2d       	mov	r24, r0
     57a:	8f 70       	andi	r24, 0x0F	; 15
     57c:	80 93 e7 00 	sts	0x00E7, r24
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
     586:	81 b3       	in	r24, 0x11	; 17
     588:	80 63       	ori	r24, 0x30	; 48
     58a:	81 bb       	out	0x11, r24	; 17
     58c:	0e 94 09 09 	call	0x1212 <USART_Init>
     590:	0e 94 86 07 	call	0xf0c <OSCCAL_Calibrate>
     594:	0e 94 03 0c 	call	0x1806 <TOUT_SetupSleepTimer>
     598:	81 b3       	in	r24, 0x11	; 17
     59a:	8f 7c       	andi	r24, 0xCF	; 207
     59c:	80 61       	ori	r24, 0x10	; 16
     59e:	81 bb       	out	0x11, r24	; 17
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	8e bb       	out	0x1e, r24	; 30
     5a4:	80 e8       	ldi	r24, 0x80	; 128
     5a6:	80 93 61 00 	sts	0x0061, r24
     5aa:	83 e0       	ldi	r24, 0x03	; 3
     5ac:	80 93 61 00 	sts	0x0061, r24
     5b0:	8e b3       	in	r24, 0x1e	; 30
     5b2:	88 23       	and	r24, r24
     5b4:	e9 f3       	breq	.-6      	; 0x5b0 <__stack+0xb1>
     5b6:	f6 9b       	sbis	0x1e, 6	; 30
     5b8:	06 c0       	rjmp	.+12     	; 0x5c6 <__stack+0xc7>
     5ba:	cc 23       	and	r28, r28
     5bc:	11 f4       	brne	.+4      	; 0x5c2 <__stack+0xc3>
     5be:	c6 e0       	ldi	r28, 0x06	; 6
     5c0:	1b c0       	rjmp	.+54     	; 0x5f8 <__stack+0xf9>
     5c2:	c1 50       	subi	r28, 0x01	; 1
     5c4:	19 c0       	rjmp	.+50     	; 0x5f8 <__stack+0xf9>
     5c6:	f7 9b       	sbis	0x1e, 7	; 30
     5c8:	06 c0       	rjmp	.+12     	; 0x5d6 <__stack+0xd7>
     5ca:	c6 30       	cpi	r28, 0x06	; 6
     5cc:	11 f4       	brne	.+4      	; 0x5d2 <__stack+0xd3>
     5ce:	c0 e0       	ldi	r28, 0x00	; 0
     5d0:	13 c0       	rjmp	.+38     	; 0x5f8 <__stack+0xf9>
     5d2:	cf 5f       	subi	r28, 0xFF	; 255
     5d4:	11 c0       	rjmp	.+34     	; 0x5f8 <__stack+0xf9>
     5d6:	f4 9b       	sbis	0x1e, 4	; 30
     5d8:	0b c0       	rjmp	.+22     	; 0x5f0 <__stack+0xf1>
     5da:	ec 2f       	mov	r30, r28
     5dc:	ff 27       	eor	r31, r31
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	eb 57       	subi	r30, 0x7B	; 123
     5e4:	fe 4f       	sbci	r31, 0xFE	; 254
     5e6:	85 91       	lpm	r24, Z+
     5e8:	94 91       	lpm	r25, Z
     5ea:	fc 01       	movw	r30, r24
     5ec:	09 95       	icall
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <__stack+0xf9>
     5f0:	f3 9b       	sbis	0x1e, 3	; 30
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <__stack+0xf9>
     5f4:	0e 94 4f 02 	call	0x49e <FUNCShowAbout>
     5f8:	ec 2f       	mov	r30, r28
     5fa:	ff 27       	eor	r31, r31
     5fc:	ee 0f       	add	r30, r30
     5fe:	ff 1f       	adc	r31, r31
     600:	ed 56       	subi	r30, 0x6D	; 109
     602:	fe 4f       	sbci	r31, 0xFE	; 254
     604:	85 91       	lpm	r24, Z+
     606:	94 91       	lpm	r25, Z
     608:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     60c:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
     610:	cf cf       	rjmp	.-98     	; 0x5b0 <__stack+0xb1>

00000612 <MAIN_Delay1MS>:
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     616:	28 2f       	mov	r18, r24
     618:	21 50       	subi	r18, 0x01	; 1
     61a:	2f 3f       	cpi	r18, 0xFF	; 255
     61c:	49 f0       	breq	.+18     	; 0x630 <MAIN_Delay1MS+0x1e>
     61e:	a3 e3       	ldi	r26, 0x33	; 51
     620:	b7 e0       	ldi	r27, 0x07	; 7
     622:	c0 e0       	ldi	r28, 0x00	; 0
     624:	d0 e0       	ldi	r29, 0x00	; 0
     626:	cd 01       	movw	r24, r26
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <MAIN_Delay1MS+0x16>
     62c:	21 50       	subi	r18, 0x01	; 1
     62e:	d8 f7       	brcc	.-10     	; 0x626 <MAIN_Delay1MS+0x14>
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	08 95       	ret

00000636 <MAIN_ResetCSLine>:
     636:	99 27       	eor	r25, r25
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	91 05       	cpc	r25, r1
     63c:	b1 f0       	breq	.+44     	; 0x66a <MAIN_ResetCSLine+0x34>
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	91 05       	cpc	r25, r1
     642:	1c f4       	brge	.+6      	; 0x64a <MAIN_ResetCSLine+0x14>
     644:	89 2b       	or	r24, r25
     646:	21 f0       	breq	.+8      	; 0x650 <MAIN_ResetCSLine+0x1a>
     648:	08 95       	ret
     64a:	02 97       	sbiw	r24, 0x02	; 2
     64c:	59 f0       	breq	.+22     	; 0x664 <MAIN_ResetCSLine+0x2e>
     64e:	08 95       	ret
     650:	86 9a       	sbi	0x10, 6	; 16
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     652:	a0 e0       	ldi	r26, 0x00	; 0
     654:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     656:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
     65a:	80 2d       	mov	r24, r0
     65c:	88 23       	and	r24, r24
     65e:	19 f4       	brne	.+6      	; 0x666 <MAIN_ResetCSLine+0x30>
     660:	8e 9a       	sbi	0x11, 6	; 17
     662:	08 95       	ret
     664:	86 9a       	sbi	0x10, 6	; 16
     666:	8e 98       	cbi	0x11, 6	; 17
     668:	08 95       	ret
     66a:	86 98       	cbi	0x10, 6	; 16
     66c:	fc cf       	rjmp	.-8      	; 0x666 <MAIN_ResetCSLine+0x30>

0000066e <MAIN_IntToStr>:
     66e:	fb 01       	movw	r30, r22
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	84 36       	cpi	r24, 0x64	; 100
     674:	91 05       	cpc	r25, r1
     676:	20 f0       	brcs	.+8      	; 0x680 <MAIN_IntToStr+0x12>
     678:	2f 5f       	subi	r18, 0xFF	; 255
     67a:	84 56       	subi	r24, 0x64	; 100
     67c:	90 40       	sbci	r25, 0x00	; 0
     67e:	f9 cf       	rjmp	.-14     	; 0x672 <MAIN_IntToStr+0x4>
     680:	20 5d       	subi	r18, 0xD0	; 208
     682:	21 93       	st	Z+, r18
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	8a 30       	cpi	r24, 0x0A	; 10
     688:	91 05       	cpc	r25, r1
     68a:	18 f0       	brcs	.+6      	; 0x692 <MAIN_IntToStr+0x24>
     68c:	2f 5f       	subi	r18, 0xFF	; 255
     68e:	0a 97       	sbiw	r24, 0x0a	; 10
     690:	fa cf       	rjmp	.-12     	; 0x686 <MAIN_IntToStr+0x18>
     692:	20 5d       	subi	r18, 0xD0	; 208
     694:	21 93       	st	Z+, r18
     696:	80 5d       	subi	r24, 0xD0	; 208
     698:	81 93       	st	Z+, r24
     69a:	10 82       	st	Z, r1
     69c:	08 95       	ret

0000069e <MAIN_ShowProgType>:
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	27 97       	sbiw	r28, 0x07	; 7
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	18 2f       	mov	r17, r24
     6b6:	68 e5       	ldi	r22, 0x58	; 88
     6b8:	72 e0       	ldi	r23, 0x02	; 2
     6ba:	ce 01       	movw	r24, r28
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	0e 94 3f 1a 	call	0x347e <strcpy_P>
     6c2:	1e 83       	std	Y+6, r17	; 0x06
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	0e 94 19 08 	call	0x1032 <LCD_puts>
     6cc:	27 96       	adiw	r28, 0x07	; 7
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	08 95       	ret

000006e0 <MAIN_ShowError>:
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	64 97       	sbiw	r28, 0x14	; 20
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	25 e4       	ldi	r18, 0x45	; 69
     6f6:	29 83       	std	Y+1, r18	; 0x01
     6f8:	2e e3       	ldi	r18, 0x3E	; 62
     6fa:	2a 83       	std	Y+2, r18	; 0x02
     6fc:	bc 01       	movw	r22, r24
     6fe:	ce 01       	movw	r24, r28
     700:	03 96       	adiw	r24, 0x03	; 3
     702:	0e 94 3f 1a 	call	0x347e <strcpy_P>
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	0e 94 19 08 	call	0x1032 <LCD_puts>
     70e:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
     712:	f4 9b       	sbis	0x1e, 4	; 30
     714:	fe cf       	rjmp	.-4      	; 0x712 <MAIN_ShowError+0x32>
     716:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
     71a:	64 96       	adiw	r28, 0x14	; 20
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	cd bf       	out	0x3d, r28	; 61
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <__vector_3>:
     72c:	78 94       	sei
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	8f 93       	push	r24
     73a:	9f 93       	push	r25
     73c:	93 b1       	in	r25, 0x03	; 3
     73e:	90 95       	com	r25
     740:	90 7d       	andi	r25, 0xD0	; 208
     742:	8c b1       	in	r24, 0x0c	; 12
     744:	80 95       	com	r24
     746:	8c 70       	andi	r24, 0x0C	; 12
     748:	98 2b       	or	r25, r24
     74a:	9e bb       	out	0x1e, r25	; 30
     74c:	10 92 3e 01 	sts	0x013E, r1
     750:	10 92 3d 01 	sts	0x013D, r1
     754:	10 92 85 00 	sts	0x0085, r1
     758:	10 92 84 00 	sts	0x0084, r1
     75c:	9f 91       	pop	r25
     75e:	8f 91       	pop	r24
     760:	0f 90       	pop	r0
     762:	0f be       	out	0x3f, r0	; 63
     764:	0f 90       	pop	r0
     766:	1f 90       	pop	r1
     768:	18 95       	reti

0000076a <__vector_default>:
     76a:	8f e5       	ldi	r24, 0x5F	; 95
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
     772:	ff cf       	rjmp	.-2      	; 0x772 <__vector_default+0x8>

00000774 <FUNCChangeSettings>:
     774:	cf 93       	push	r28
     776:	c0 e0       	ldi	r28, 0x00	; 0
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	8e bb       	out	0x1e, r24	; 30
     77c:	8e b3       	in	r24, 0x1e	; 30
     77e:	88 23       	and	r24, r24
     780:	e9 f3       	breq	.-6      	; 0x77c <FUNCChangeSettings+0x8>
     782:	f6 9b       	sbis	0x1e, 6	; 30
     784:	06 c0       	rjmp	.+12     	; 0x792 <FUNCChangeSettings+0x1e>
     786:	cc 23       	and	r28, r28
     788:	11 f4       	brne	.+4      	; 0x78e <FUNCChangeSettings+0x1a>
     78a:	c5 e0       	ldi	r28, 0x05	; 5
     78c:	19 c0       	rjmp	.+50     	; 0x7c0 <FUNCChangeSettings+0x4c>
     78e:	c1 50       	subi	r28, 0x01	; 1
     790:	17 c0       	rjmp	.+46     	; 0x7c0 <FUNCChangeSettings+0x4c>
     792:	f7 9b       	sbis	0x1e, 7	; 30
     794:	06 c0       	rjmp	.+12     	; 0x7a2 <FUNCChangeSettings+0x2e>
     796:	c5 30       	cpi	r28, 0x05	; 5
     798:	11 f4       	brne	.+4      	; 0x79e <FUNCChangeSettings+0x2a>
     79a:	c0 e0       	ldi	r28, 0x00	; 0
     79c:	11 c0       	rjmp	.+34     	; 0x7c0 <FUNCChangeSettings+0x4c>
     79e:	cf 5f       	subi	r28, 0xFF	; 255
     7a0:	0f c0       	rjmp	.+30     	; 0x7c0 <FUNCChangeSettings+0x4c>
     7a2:	f4 9b       	sbis	0x1e, 4	; 30
     7a4:	0b c0       	rjmp	.+22     	; 0x7bc <FUNCChangeSettings+0x48>
     7a6:	ec 2f       	mov	r30, r28
     7a8:	ff 27       	eor	r31, r31
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	e1 5f       	subi	r30, 0xF1	; 241
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	85 91       	lpm	r24, Z+
     7b4:	94 91       	lpm	r25, Z
     7b6:	fc 01       	movw	r30, r24
     7b8:	09 95       	icall
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <FUNCChangeSettings+0x4c>
     7bc:	f2 99       	sbic	0x1e, 2	; 30
     7be:	0d c0       	rjmp	.+26     	; 0x7da <FUNCChangeSettings+0x66>
     7c0:	ec 2f       	mov	r30, r28
     7c2:	ff 27       	eor	r31, r31
     7c4:	ee 0f       	add	r30, r30
     7c6:	ff 1f       	adc	r31, r31
     7c8:	e5 5e       	subi	r30, 0xE5	; 229
     7ca:	fe 4f       	sbci	r31, 0xFE	; 254
     7cc:	85 91       	lpm	r24, Z+
     7ce:	94 91       	lpm	r25, Z
     7d0:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     7d4:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
     7d8:	d1 cf       	rjmp	.-94     	; 0x77c <FUNCChangeSettings+0x8>
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <FUNCAVRISPMode>:
		}
	}
}

void FUNCAVRISPMode(void)
{
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     7de:	8a e2       	ldi	r24, 0x2A	; 42
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     7e6:	0e 94 86 07 	call	0xf0c <OSCCAL_Calibrate>
     7ea:	80 91 c1 00 	lds	r24, 0x00C1
     7ee:	80 78       	andi	r24, 0x80	; 128
     7f0:	88 61       	ori	r24, 0x18	; 24
     7f2:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(AVRISPModeMessage);
     7f6:	8c ef       	ldi	r24, 0xFC	; 252
     7f8:	93 e0       	ldi	r25, 0x03	; 3
     7fa:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
	
	InterpretPacketRoutine = (FuncPtr)AICI_InterpretPacket;
     7fe:	8c e8       	ldi	r24, 0x8C	; 140
     800:	92 e1       	ldi	r25, 0x12	; 18
     802:	90 93 03 01 	sts	0x0103, r25
     806:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     80a:	0e 94 91 0f 	call	0x1f22 <V2P_RunStateMachine>
     80e:	08 95       	ret

00000810 <FUNCProgramDataflash>:
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     810:	a1 e0       	ldi	r26, 0x01	; 1
     812:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     814:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
     818:	80 2d       	mov	r24, r0
     81a:	0e 94 83 09 	call	0x1306 <USI_SPIInitMaster>
}

void FUNCProgramDataflash(void)
{
	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	UseExernalDF = TRUE;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 65 02 	sts	0x0265, r24
	DFSPIRoutinePointer = USI_SPITransmit;
     824:	8d e9       	ldi	r24, 0x9D	; 157
     826:	99 e0       	ldi	r25, 0x09	; 9
     828:	90 93 01 01 	sts	0x0101, r25
     82c:	80 93 00 01 	sts	0x0100, r24
	
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     830:	8a e2       	ldi	r24, 0x2A	; 42
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     838:	0e 94 86 07 	call	0xf0c <OSCCAL_Calibrate>
     83c:	80 91 c1 00 	lds	r24, 0x00C1
     840:	80 78       	andi	r24, 0x80	; 128
     842:	88 61       	ori	r24, 0x18	; 24
     844:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(DataFlashProgMode);
     848:	85 ed       	ldi	r24, 0xD5	; 213
     84a:	93 e0       	ldi	r25, 0x03	; 3
     84c:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PD_InterpretAVRISPPacket;
     850:	82 ec       	ldi	r24, 0xC2	; 194
     852:	9c e0       	ldi	r25, 0x0C	; 12
     854:	90 93 03 01 	sts	0x0103, r25
     858:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     85c:	0e 94 91 0f 	call	0x1f22 <V2P_RunStateMachine>
	   
	DF_EnableDataflash(FALSE);
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
	SPI_SPIOFF();
     866:	80 91 64 00 	lds	r24, 0x0064
     86a:	84 60       	ori	r24, 0x04	; 4
     86c:	80 93 64 00 	sts	0x0064, r24
     870:	08 95       	ret

00000872 <FUNCProgramAVR>:
}

void FUNCProgramAVR(void)
{
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	63 97       	sbiw	r28, 0x13	; 19
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
	uint8_t  DoneFailMessageBuff[19];
	uint8_t  Fault = ISPCC_NO_FAULT;
     88a:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t  ProgMode = 0;
     88c:	10 2f       	mov	r17, r16

	SPI_SPIInit();
     88e:	0e 94 2e 09 	call	0x125c <SPI_SPIInit>
	UseExernalDF = FALSE;
     892:	00 93 65 02 	sts	0x0265, r16
	DFSPIRoutinePointer = SPI_SPITransmit;
     896:	88 e3       	ldi	r24, 0x38	; 56
     898:	99 e0       	ldi	r25, 0x09	; 9
     89a:	90 93 01 01 	sts	0x0101, r25
     89e:	80 93 00 01 	sts	0x0100, r24
	
	if (!(DF_CheckCorrectOnboardChip()))
     8a2:	0e 94 56 0b 	call	0x16ac <DF_CheckCorrectOnboardChip>
     8a6:	88 23       	and	r24, r24
     8a8:	09 f4       	brne	.+2      	; 0x8ac <FUNCProgramAVR+0x3a>
     8aa:	0d c1       	rjmp	.+538    	; 0xac6 <FUNCProgramAVR+0x254>
	  return;

	MAIN_WaitForJoyRelease();
     8ac:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
	
	JoyStatus = 1;                              // Use an invalid joystick value to force the program to write the
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	8e bb       	out	0x1e, r24	; 30
	                                            // name of the default command onto the LCD
	while (1)
	{
		if (JoyStatus)
     8b4:	8e b3       	in	r24, 0x1e	; 30
     8b6:	88 23       	and	r24, r24
     8b8:	e9 f3       	breq	.-6      	; 0x8b4 <FUNCProgramAVR+0x42>
		{
			if (JoyStatus & JOY_LEFT)
     8ba:	f2 99       	sbic	0x1e, 2	; 30
     8bc:	04 c1       	rjmp	.+520    	; 0xac6 <FUNCProgramAVR+0x254>
			  return;
			else if (JoyStatus & JOY_PRESS)
     8be:	f4 99       	sbic	0x1e, 4	; 30
     8c0:	1c c0       	rjmp	.+56     	; 0x8fa <FUNCProgramAVR+0x88>
			  break;
			else if (JoyStatus & JOY_UP)
     8c2:	f6 9b       	sbis	0x1e, 6	; 30
     8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <FUNCProgramAVR+0x60>
			  (ProgMode == 0)? ProgMode = 6 : ProgMode--;
     8c6:	11 23       	and	r17, r17
     8c8:	11 f4       	brne	.+4      	; 0x8ce <FUNCProgramAVR+0x5c>
     8ca:	16 e0       	ldi	r17, 0x06	; 6
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <FUNCProgramAVR+0x6e>
     8ce:	11 50       	subi	r17, 0x01	; 1
     8d0:	07 c0       	rjmp	.+14     	; 0x8e0 <FUNCProgramAVR+0x6e>
			else if (JoyStatus & JOY_DOWN)
     8d2:	f7 9b       	sbis	0x1e, 7	; 30
     8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <FUNCProgramAVR+0x6e>
			  (ProgMode == 6)? ProgMode = 0 : ProgMode++;
     8d6:	16 30       	cpi	r17, 0x06	; 6
     8d8:	11 f4       	brne	.+4      	; 0x8de <FUNCProgramAVR+0x6c>
     8da:	10 e0       	ldi	r17, 0x00	; 0
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <FUNCProgramAVR+0x6e>
     8de:	1f 5f       	subi	r17, 0xFF	; 255

			LCD_puts_f((uint8_t*)pgm_read_word(&ProgOptions[ProgMode])); // Show current function onto the LCD
     8e0:	e1 2f       	mov	r30, r17
     8e2:	ff 27       	eor	r31, r31
     8e4:	ee 0f       	add	r30, r30
     8e6:	ff 1f       	adc	r31, r31
     8e8:	e4 56       	subi	r30, 0x64	; 100
     8ea:	ff 4f       	sbci	r31, 0xFF	; 255
     8ec:	85 91       	lpm	r24, Z+
     8ee:	94 91       	lpm	r25, Z
     8f0:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     8f4:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
     8f8:	dd cf       	rjmp	.-70     	; 0x8b4 <FUNCProgramAVR+0x42>
		}
	}

	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);                // Orange = busy
     8fa:	81 b3       	in	r24, 0x11	; 17
     8fc:	80 63       	ori	r24, 0x30	; 48
     8fe:	81 bb       	out	0x11, r24	; 17
	LCD_puts_f(WaitText);
     900:	8a e2       	ldi	r24, 0x2A	; 42
     902:	92 e0       	ldi	r25, 0x02	; 2
     904:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     908:	a1 e0       	ldi	r26, 0x01	; 1
     90a:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     90c:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
     910:	80 2d       	mov	r24, r0
     912:	0e 94 83 09 	call	0x1306 <USI_SPIInitMaster>

	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
     91c:	eb e4       	ldi	r30, 0x4B	; 75
     91e:	f1 e0       	ldi	r31, 0x01	; 1
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	9b e0       	ldi	r25, 0x0B	; 11
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     926:	d9 01       	movw	r26, r18
     928:	ad 5d       	subi	r26, 0xDD	; 221
     92a:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
     92c:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
     930:	80 2d       	mov	r24, r0
     932:	81 93       	st	Z+, r24
			
	for (uint8_t PacketB = 0; PacketB <= 11; PacketB++) // Read the enter programming mode command bytes
     934:	91 50       	subi	r25, 0x01	; 1
     936:	2f 5f       	subi	r18, 0xFF	; 255
     938:	3f 4f       	sbci	r19, 0xFF	; 255
     93a:	97 ff       	sbrs	r25, 7
     93c:	f4 cf       	rjmp	.-24     	; 0x926 <FUNCProgramAVR+0xb4>
	  PacketBytes[PacketB] = eeprom_read_byte(&EEPROMVars.EnterProgMode[PacketB]);
	
	ISPCC_EnterChipProgrammingMode();    // Try to sync with the slave AVR
     93e:	0e 94 fc 10 	call	0x21f8 <ISPCC_EnterChipProgrammingMode>

	CurrAddress = 0;
     942:	10 92 42 01 	sts	0x0142, r1
     946:	10 92 43 01 	sts	0x0143, r1
     94a:	10 92 44 01 	sts	0x0144, r1
     94e:	10 92 45 01 	sts	0x0145, r1

	if (PacketBytes[1] == STATUS_CMD_OK) // ISPCC_EnterChipProgrammingMode alters the PacketBytes buffer rather than returning a value
     952:	80 91 4c 01 	lds	r24, 0x014C
     956:	88 23       	and	r24, r24
     958:	09 f0       	breq	.+2      	; 0x95c <FUNCProgramAVR+0xea>
     95a:	a0 c0       	rjmp	.+320    	; 0xa9c <FUNCProgramAVR+0x22a>
	{						
		if ((ProgMode == 6) || (ProgMode == 0) || (ProgMode == 2)) // Erase chip, or program flash mode
     95c:	16 30       	cpi	r17, 0x06	; 6
     95e:	21 f0       	breq	.+8      	; 0x968 <FUNCProgramAVR+0xf6>
     960:	11 23       	and	r17, r17
     962:	11 f0       	breq	.+4      	; 0x968 <FUNCProgramAVR+0xf6>
     964:	12 30       	cpi	r17, 0x02	; 2
     966:	91 f4       	brne	.+36     	; 0x98c <FUNCProgramAVR+0x11a>
		{
			MAIN_ShowProgType('C');
     968:	83 e4       	ldi	r24, 0x43	; 67
     96a:	0e 94 4f 03 	call	0x69e <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     96e:	a4 e1       	ldi	r26, 0x14	; 20
     970:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     972:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
     976:	80 2d       	mov	r24, r0
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	31 f0       	breq	.+12     	; 0x988 <FUNCProgramAVR+0x116>
			
			if (!(eeprom_read_byte(&EEPROMVars.EraseCmdStored) == TRUE))
			{
				Fault = ISPCC_FAULT_NOERASE;
     97c:	02 e0       	ldi	r16, 0x02	; 2
				MAIN_ShowError(PSTR("NO ERASE CMD"));
     97e:	86 e6       	ldi	r24, 0x66	; 102
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
     986:	02 c0       	rjmp	.+4      	; 0x98c <FUNCProgramAVR+0x11a>
			}
			else
			{
				PM_SendEraseCommand();
     988:	0e 94 9b 17 	call	0x2f36 <PM_SendEraseCommand>
			}
		}

		if (((ProgMode == 0) || (ProgMode == 2)) && (Fault == ISPCC_NO_FAULT)) // Program flash
     98c:	11 23       	and	r17, r17
     98e:	11 f0       	breq	.+4      	; 0x994 <FUNCProgramAVR+0x122>
     990:	12 30       	cpi	r17, 0x02	; 2
     992:	b9 f4       	brne	.+46     	; 0x9c2 <FUNCProgramAVR+0x150>
     994:	00 23       	and	r16, r16
     996:	a9 f4       	brne	.+42     	; 0x9c2 <FUNCProgramAVR+0x150>
		{
			MAIN_ShowProgType('D');
     998:	84 e4       	ldi	r24, 0x44	; 68
     99a:	0e 94 4f 03 	call	0x69e <MAIN_ShowProgType>

			if (!(PM_GetStoredDataSize(TYPE_FLASH))) // Check to make sure a program is present in memory
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	0e 94 fc 13 	call	0x27f8 <PM_GetStoredDataSize>
     9a4:	dc 01       	movw	r26, r24
     9a6:	cb 01       	movw	r24, r22
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	a1 05       	cpc	r26, r1
     9ac:	b1 05       	cpc	r27, r1
     9ae:	31 f4       	brne	.+12     	; 0x9bc <FUNCProgramAVR+0x14a>
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     9b0:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO DATA"));
     9b2:	83 e7       	ldi	r24, 0x73	; 115
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
     9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <FUNCProgramAVR+0x150>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_FLASH);
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	0e 94 ca 17 	call	0x2f94 <PM_CreateProgrammingPackets>
			}
		}
	
		if ((ProgMode == 1) || (ProgMode == 2)) // Program EEPROM
     9c2:	81 2f       	mov	r24, r17
     9c4:	81 50       	subi	r24, 0x01	; 1
     9c6:	82 30       	cpi	r24, 0x02	; 2
     9c8:	a8 f4       	brcc	.+42     	; 0x9f4 <FUNCProgramAVR+0x182>
		{
			MAIN_ShowProgType('E');
     9ca:	85 e4       	ldi	r24, 0x45	; 69
     9cc:	0e 94 4f 03 	call	0x69e <MAIN_ShowProgType>
				
			if (!(PM_GetStoredDataSize(TYPE_EEPROM))) // Check to make sure EEPROM data is present in memory
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	0e 94 fc 13 	call	0x27f8 <PM_GetStoredDataSize>
     9d6:	dc 01       	movw	r26, r24
     9d8:	cb 01       	movw	r24, r22
     9da:	00 97       	sbiw	r24, 0x00	; 0
     9dc:	a1 05       	cpc	r26, r1
     9de:	b1 05       	cpc	r27, r1
     9e0:	31 f4       	brne	.+12     	; 0x9ee <FUNCProgramAVR+0x17c>
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     9e2:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO EEPROM"));
     9e4:	8b e7       	ldi	r24, 0x7B	; 123
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
     9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <FUNCProgramAVR+0x182>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_EEPROM);
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	0e 94 ca 17 	call	0x2f94 <PM_CreateProgrammingPackets>
			}
		}

		if ((ProgMode == 3) || (ProgMode == 5)) // Program Fuse bytes
     9f4:	13 30       	cpi	r17, 0x03	; 3
     9f6:	11 f0       	breq	.+4      	; 0x9fc <FUNCProgramAVR+0x18a>
     9f8:	15 30       	cpi	r17, 0x05	; 5
     9fa:	99 f4       	brne	.+38     	; 0xa22 <FUNCProgramAVR+0x1b0>
		{
			MAIN_ShowProgType('F');
     9fc:	86 e4       	ldi	r24, 0x46	; 70
     9fe:	0e 94 4f 03 	call	0x69e <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     a02:	af e2       	ldi	r26, 0x2F	; 47
     a04:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     a06:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
     a0a:	80 2d       	mov	r24, r0
     a0c:	88 23       	and	r24, r24
     a0e:	31 f4       	brne	.+12     	; 0xa1c <FUNCProgramAVR+0x1aa>
			
			if (!(eeprom_read_byte(&EEPROMVars.TotalFuseBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     a10:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO FUSE BYTES"));
     a12:	85 e8       	ldi	r24, 0x85	; 133
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
     a1a:	03 c0       	rjmp	.+6      	; 0xa22 <FUNCProgramAVR+0x1b0>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_FUSE);
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	0e 94 6a 17 	call	0x2ed4 <PM_SendFuseLockBytes>
			}
		}

		if ((ProgMode == 4) || (ProgMode == 5)) // Program Lock bytes
     a22:	81 2f       	mov	r24, r17
     a24:	84 50       	subi	r24, 0x04	; 4
     a26:	82 30       	cpi	r24, 0x02	; 2
     a28:	00 f5       	brcc	.+64     	; 0xa6a <FUNCProgramAVR+0x1f8>
		{
			if (ProgMode == 5)                    // If fusebytes have already been written, we need to reenter programming mode to latch them
     a2a:	15 30       	cpi	r17, 0x05	; 5
     a2c:	59 f4       	brne	.+22     	; 0xa44 <FUNCProgramAVR+0x1d2>
			{
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line of the slave AVR
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
				MAIN_Delay10MS(1);
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	0e 94 33 02 	call	0x466 <MAIN_Delay10MS>
				MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
				ISPCC_EnterChipProgrammingMode(); // Try to sync with the slave AVR
     a40:	0e 94 fc 10 	call	0x21f8 <ISPCC_EnterChipProgrammingMode>
			}

			MAIN_ShowProgType('L');
     a44:	8c e4       	ldi	r24, 0x4C	; 76
     a46:	0e 94 4f 03 	call	0x69e <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     a4a:	a0 e3       	ldi	r26, 0x30	; 48
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     a4e:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
     a52:	80 2d       	mov	r24, r0
     a54:	88 23       	and	r24, r24
     a56:	31 f4       	brne	.+12     	; 0xa64 <FUNCProgramAVR+0x1f2>
		
			if (!(eeprom_read_byte(&EEPROMVars.TotalLockBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     a58:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO LOCK BYTES"));
     a5a:	83 e9       	ldi	r24, 0x93	; 147
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <FUNCProgramAVR+0x1f8>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_LOCK);
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	0e 94 6a 17 	call	0x2ed4 <PM_SendFuseLockBytes>
			}
		}

		strcpy_P(DoneFailMessageBuff, PSTR("PROGRAMMING DONE"));
     a6a:	61 ea       	ldi	r22, 0xA1	; 161
     a6c:	72 e0       	ldi	r23, 0x02	; 2
     a6e:	ce 01       	movw	r24, r28
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	0e 94 3f 1a 	call	0x347e <strcpy_P>

		if (Fault != ISPCC_NO_FAULT)         // Takes less code to just overwrite part of the string on fail
     a76:	00 23       	and	r16, r16
     a78:	31 f0       	breq	.+12     	; 0xa86 <FUNCProgramAVR+0x214>
		  strcpy_P(&DoneFailMessageBuff[12], PSTR("FAILED"));
     a7a:	62 eb       	ldi	r22, 0xB2	; 178
     a7c:	72 e0       	ldi	r23, 0x02	; 2
     a7e:	ce 01       	movw	r24, r28
     a80:	0d 96       	adiw	r24, 0x0d	; 13
     a82:	0e 94 3f 1a 	call	0x347e <strcpy_P>

		LCD_puts(DoneFailMessageBuff);
     a86:	ce 01       	movw	r24, r28
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	0e 94 19 08 	call	0x1032 <LCD_puts>

		MAIN_Delay10MS(255);
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	0e 94 33 02 	call	0x466 <MAIN_Delay10MS>
		MAIN_Delay10MS(100);
     a94:	84 e6       	ldi	r24, 0x64	; 100
     a96:	0e 94 33 02 	call	0x466 <MAIN_Delay10MS>
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <FUNCProgramAVR+0x232>
	}
	else
	{
		MAIN_ShowError(SyncErrorMessage);
     a9c:	81 ef       	ldi	r24, 0xF1	; 241
     a9e:	93 e0       	ldi	r25, 0x03	; 3
     aa0:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
	}
	
	MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run	
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
	USI_SPIOff();
     aaa:	0e 94 93 09 	call	0x1326 <USI_SPIOff>
	DF_EnableDataflash(FALSE);
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
	SPI_SPIOFF();
     ab4:	80 91 64 00 	lds	r24, 0x0064
     ab8:	84 60       	ori	r24, 0x04	; 4
     aba:	80 93 64 00 	sts	0x0064, r24
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Green = ready
     abe:	81 b3       	in	r24, 0x11	; 17
     ac0:	8f 7c       	andi	r24, 0xCF	; 207
     ac2:	80 61       	ori	r24, 0x10	; 16
     ac4:	81 bb       	out	0x11, r24	; 17
     ac6:	63 96       	adiw	r28, 0x13	; 19
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	08 95       	ret

00000adc <FUNCStoreProgram>:
}

void FUNCStoreProgram(void)
{
	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     adc:	88 e3       	ldi	r24, 0x38	; 56
     ade:	99 e0       	ldi	r25, 0x09	; 9
     ae0:	90 93 01 01 	sts	0x0101, r25
     ae4:	80 93 00 01 	sts	0x0100, r24
	SPI_SPIInit();
     ae8:	0e 94 2e 09 	call	0x125c <SPI_SPIInit>
	UseExernalDF = FALSE;
     aec:	10 92 65 02 	sts	0x0265, r1
	DF_EnableDataflash(TRUE);
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>

	if (!(DF_CheckCorrectOnboardChip()))
     af6:	0e 94 56 0b 	call	0x16ac <DF_CheckCorrectOnboardChip>
     afa:	88 23       	and	r24, r24
     afc:	01 f1       	breq	.+64     	; 0xb3e <FUNCStoreProgram+0x62>
	  return;
			
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     afe:	8a e2       	ldi	r24, 0x2A	; 42
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     b06:	0e 94 86 07 	call	0xf0c <OSCCAL_Calibrate>
     b0a:	80 91 c1 00 	lds	r24, 0x00C1
     b0e:	80 78       	andi	r24, 0x80	; 128
     b10:	88 61       	ori	r24, 0x18	; 24
     b12:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(PSTR("*STORAGE MODE*"));
     b16:	89 eb       	ldi	r24, 0xB9	; 185
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PM_InterpretAVRISPPacket;
     b1e:	86 e1       	ldi	r24, 0x16	; 22
     b20:	95 e1       	ldi	r25, 0x15	; 21
     b22:	90 93 03 01 	sts	0x0103, r25
     b26:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     b2a:	0e 94 91 0f 	call	0x1f22 <V2P_RunStateMachine>
	DF_EnableDataflash(FALSE);
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
	SPI_SPIOFF();
     b34:	80 91 64 00 	lds	r24, 0x0064
     b38:	84 60       	ori	r24, 0x04	; 4
     b3a:	80 93 64 00 	sts	0x0064, r24
     b3e:	08 95       	ret

00000b40 <FUNCClearMem>:
}

void FUNCClearMem(void)
{
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
	LCD_puts_f(PSTR("CONFIRM"));
     b44:	88 ec       	ldi	r24, 0xC8	; 200
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
	MAIN_Delay10MS(180);
     b4c:	84 eb       	ldi	r24, 0xB4	; 180
     b4e:	0e 94 33 02 	call	0x466 <MAIN_Delay10MS>

	LCD_puts_f(PSTR("<N Y>"));
     b52:	80 ed       	ldi	r24, 0xD0	; 208
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

	while (1)
	{
		if (JoyStatus)
     b5a:	8e b3       	in	r24, 0x1e	; 30
     b5c:	88 23       	and	r24, r24
     b5e:	e9 f3       	breq	.-6      	; 0xb5a <FUNCClearMem+0x1a>
		{
			if (JoyStatus & JOY_LEFT)
     b60:	8e b3       	in	r24, 0x1e	; 30
     b62:	99 27       	eor	r25, r25
     b64:	ec 01       	movw	r28, r24
     b66:	c4 70       	andi	r28, 0x04	; 4
     b68:	d0 70       	andi	r29, 0x00	; 0
     b6a:	82 fd       	sbrc	r24, 2
     b6c:	1a c0       	rjmp	.+52     	; 0xba2 <FUNCClearMem+0x62>
			  return;
			else if (JoyStatus & JOY_RIGHT)
     b6e:	f3 9b       	sbis	0x1e, 3	; 30
     b70:	f4 cf       	rjmp	.-24     	; 0xb5a <FUNCClearMem+0x1a>
			  break;
		}
	}

	MAIN_WaitForJoyRelease();
     b72:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>

	LCD_puts_f(WaitText);
     b76:	8a e2       	ldi	r24, 0x2A	; 42
     b78:	92 e0       	ldi	r25, 0x02	; 2
     b7a:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

	for (uint16_t EAddr = 0; EAddr < 512; EAddr++)
     b7e:	ce 01       	movw	r24, r28
     b80:	2f ef       	ldi	r18, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     b82:	dc 01       	movw	r26, r24
     b84:	02 2e       	mov	r0, r18
     b86:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	32 e0       	ldi	r19, 0x02	; 2
     b8e:	80 30       	cpi	r24, 0x00	; 0
     b90:	93 07       	cpc	r25, r19
     b92:	b8 f3       	brcs	.-18     	; 0xb82 <FUNCClearMem+0x42>
	  eeprom_write_byte((uint8_t*)EAddr, 0xFF);

	LCD_puts_f(PSTR("MEM CLEARED"));
     b94:	86 ed       	ldi	r24, 0xD6	; 214
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
	MAIN_Delay10MS(255);
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	0e 94 33 02 	call	0x466 <MAIN_Delay10MS>
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <FUNCSetContrast>:
}

void FUNCSetContrast(void)
{
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	26 97       	sbiw	r28, 0x06	; 6
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     bc2:	85 e8       	ldi	r24, 0x85	; 133
     bc4:	e8 2e       	mov	r14, r24
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	f8 2e       	mov	r15, r24
  uint8_t result;
  asm volatile
     bca:	d7 01       	movw	r26, r14
     bcc:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
     bd0:	80 2d       	mov	r24, r0
     bd2:	18 2f       	mov	r17, r24
     bd4:	1f 70       	andi	r17, 0x0F	; 15
	uint8_t Buffer[6];
	uint8_t Contrast = (eeprom_read_byte(&EEPROMVars.LCDContrast) & 0x0F); // Ranges from 0-15 so mask retuns 15 on blank EEPROM (0xFF)
	
	JoyStatus = 1;                          // Invalid value to force the LCD to update
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)
     bda:	8e b3       	in	r24, 0x1e	; 30
     bdc:	88 23       	and	r24, r24
     bde:	e9 f3       	breq	.-6      	; 0xbda <FUNCSetContrast+0x32>
		{
			if (JoyStatus & JOY_UP)
     be0:	f6 9b       	sbis	0x1e, 6	; 30
     be2:	04 c0       	rjmp	.+8      	; 0xbec <FUNCSetContrast+0x44>
			{
				if (Contrast < 15)
     be4:	1f 30       	cpi	r17, 0x0F	; 15
     be6:	78 f4       	brcc	.+30     	; 0xc06 <FUNCSetContrast+0x5e>
				  Contrast++;
     be8:	1f 5f       	subi	r17, 0xFF	; 255
     bea:	0d c0       	rjmp	.+26     	; 0xc06 <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_DOWN)
     bec:	f7 9b       	sbis	0x1e, 7	; 30
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <FUNCSetContrast+0x50>
			{
				if (Contrast > 1)          // Zero is non-visible, so 1 is the minimum
     bf0:	12 30       	cpi	r17, 0x02	; 2
     bf2:	48 f0       	brcs	.+18     	; 0xc06 <FUNCSetContrast+0x5e>
				  Contrast--;
     bf4:	11 50       	subi	r17, 0x01	; 1
     bf6:	07 c0       	rjmp	.+14     	; 0xc06 <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_LEFT)
     bf8:	f2 9b       	sbis	0x1e, 2	; 30
     bfa:	05 c0       	rjmp	.+10     	; 0xc06 <FUNCSetContrast+0x5e>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     bfc:	d7 01       	movw	r26, r14
     bfe:	01 2e       	mov	r0, r17
     c00:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.LCDContrast, Contrast);
				return;
     c04:	18 c0       	rjmp	.+48     	; 0xc36 <FUNCSetContrast+0x8e>
			}
					
			Buffer[0] = 'C';
     c06:	83 e4       	ldi	r24, 0x43	; 67
     c08:	89 83       	std	Y+1, r24	; 0x01
			Buffer[1] = 'T';
     c0a:	84 e5       	ldi	r24, 0x54	; 84
     c0c:	8a 83       	std	Y+2, r24	; 0x02
			Buffer[2] = ' ';
     c0e:	80 e2       	ldi	r24, 0x20	; 32
     c10:	8b 83       	std	Y+3, r24	; 0x03

			MAIN_IntToStr((uint16_t)Contrast, &Buffer[3]);
     c12:	be 01       	movw	r22, r28
     c14:	6c 5f       	subi	r22, 0xFC	; 252
     c16:	7f 4f       	sbci	r23, 0xFF	; 255
     c18:	81 2f       	mov	r24, r17
     c1a:	99 27       	eor	r25, r25
     c1c:	0e 94 37 03 	call	0x66e <MAIN_IntToStr>
			LCD_puts(Buffer);
     c20:	ce 01       	movw	r24, r28
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	0e 94 19 08 	call	0x1032 <LCD_puts>

			LCD_CONTRAST_LEVEL(Contrast);
     c28:	81 2f       	mov	r24, r17
     c2a:	8f 70       	andi	r24, 0x0F	; 15
     c2c:	80 93 e7 00 	sts	0x00E7, r24

			MAIN_WaitForJoyRelease();
     c30:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
     c34:	d2 cf       	rjmp	.-92     	; 0xbda <FUNCSetContrast+0x32>
     c36:	26 96       	adiw	r28, 0x06	; 6
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	08 95       	ret

00000c4e <FUNCSetISPSpeed>:
		}
	}
}

void FUNCSetISPSpeed(void)
{
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     c54:	01 e0       	ldi	r16, 0x01	; 1
     c56:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t result;
  asm volatile
     c58:	d8 01       	movw	r26, r16
     c5a:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
     c5e:	80 2d       	mov	r24, r0
     c60:	c8 2f       	mov	r28, r24
	uint8_t CurrSpeed = eeprom_read_byte(&EEPROMVars.SCKDuration);

	if (CurrSpeed > (USI_PRESET_SPEEDS - 1)) CurrSpeed = 0; // Protection against blank EEPROM
     c62:	84 30       	cpi	r24, 0x04	; 4
     c64:	08 f0       	brcs	.+2      	; 0xc68 <FUNCSetISPSpeed+0x1a>
     c66:	c0 e0       	ldi	r28, 0x00	; 0

	JoyStatus = 1;                         // Invalid value to force the LCD to update
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     c6c:	8e b3       	in	r24, 0x1e	; 30
     c6e:	88 23       	and	r24, r24
     c70:	e9 f3       	breq	.-6      	; 0xc6c <FUNCSetISPSpeed+0x1e>
		{
			if (JoyStatus & JOY_UP)
     c72:	f6 9b       	sbis	0x1e, 6	; 30
     c74:	06 c0       	rjmp	.+12     	; 0xc82 <FUNCSetISPSpeed+0x34>
			{
				(CurrSpeed == 0)? CurrSpeed = (USI_PRESET_SPEEDS - 1) : CurrSpeed--;
     c76:	cc 23       	and	r28, r28
     c78:	11 f4       	brne	.+4      	; 0xc7e <FUNCSetISPSpeed+0x30>
     c7a:	c3 e0       	ldi	r28, 0x03	; 3
     c7c:	11 c0       	rjmp	.+34     	; 0xca0 <FUNCSetISPSpeed+0x52>
     c7e:	c1 50       	subi	r28, 0x01	; 1
     c80:	0f c0       	rjmp	.+30     	; 0xca0 <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_DOWN)
     c82:	f7 9b       	sbis	0x1e, 7	; 30
     c84:	06 c0       	rjmp	.+12     	; 0xc92 <FUNCSetISPSpeed+0x44>
			{
				(CurrSpeed == (USI_PRESET_SPEEDS - 1))? CurrSpeed = 0 : CurrSpeed++;
     c86:	c3 30       	cpi	r28, 0x03	; 3
     c88:	11 f4       	brne	.+4      	; 0xc8e <FUNCSetISPSpeed+0x40>
     c8a:	c0 e0       	ldi	r28, 0x00	; 0
     c8c:	09 c0       	rjmp	.+18     	; 0xca0 <FUNCSetISPSpeed+0x52>
     c8e:	cf 5f       	subi	r28, 0xFF	; 255
     c90:	07 c0       	rjmp	.+14     	; 0xca0 <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_LEFT)
     c92:	f2 9b       	sbis	0x1e, 2	; 30
     c94:	05 c0       	rjmp	.+10     	; 0xca0 <FUNCSetISPSpeed+0x52>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     c96:	d8 01       	movw	r26, r16
     c98:	0c 2e       	mov	r0, r28
     c9a:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.SCKDuration, CurrSpeed);
				return;
     c9e:	0b c0       	rjmp	.+22     	; 0xcb6 <FUNCSetISPSpeed+0x68>
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f(USISpeeds[CurrSpeed]);
     ca0:	89 e0       	ldi	r24, 0x09	; 9
     ca2:	c8 9f       	mul	r28, r24
     ca4:	c0 01       	movw	r24, r0
     ca6:	11 24       	eor	r1, r1
     ca8:	88 58       	subi	r24, 0x88	; 136
     caa:	9f 4f       	sbci	r25, 0xFF	; 255
     cac:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     cb0:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
     cb4:	db cf       	rjmp	.-74     	; 0xc6c <FUNCSetISPSpeed+0x1e>
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	08 95       	ret

00000cbe <FUNCSetFirmMinorVer>:
		}
	}
}

void FUNCSetFirmMinorVer(void)
{
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	25 97       	sbiw	r28, 0x05	; 5
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     cd8:	96 e8       	ldi	r25, 0x86	; 134
     cda:	e9 2e       	mov	r14, r25
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	f9 2e       	mov	r15, r25
  uint8_t result;
  asm volatile
     ce0:	d7 01       	movw	r26, r14
     ce2:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
     ce6:	80 2d       	mov	r24, r0
     ce8:	18 2f       	mov	r17, r24
	uint8_t VerBuffer[5];
	uint8_t VerMinor = eeprom_read_byte(&EEPROMVars.FirmVerMinor);

	if (VerMinor > 9)
     cea:	8a 30       	cpi	r24, 0x0A	; 10
     cec:	08 f0       	brcs	.+2      	; 0xcf0 <FUNCSetFirmMinorVer+0x32>
	  VerMinor = V2P_SW_VERSION_MINOR_DEFAULT;
     cee:	14 e0       	ldi	r17, 0x04	; 4
	
	strcpy_P(VerBuffer, PSTR("V2- "));
     cf0:	62 ee       	ldi	r22, 0xE2	; 226
     cf2:	72 e0       	ldi	r23, 0x02	; 2
     cf4:	ce 01       	movw	r24, r28
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	0e 94 3f 1a 	call	0x347e <strcpy_P>

	JoyStatus = 1;                        // Invalid value to force the LCD to update
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     d00:	8e b3       	in	r24, 0x1e	; 30
     d02:	88 23       	and	r24, r24
     d04:	e9 f3       	breq	.-6      	; 0xd00 <FUNCSetFirmMinorVer+0x42>
		{
			if (JoyStatus & JOY_UP)
     d06:	f6 9b       	sbis	0x1e, 6	; 30
     d08:	03 c0       	rjmp	.+6      	; 0xd10 <FUNCSetFirmMinorVer+0x52>
			{
				if (VerMinor < 9)
     d0a:	19 30       	cpi	r17, 0x09	; 9
     d0c:	08 f4       	brcc	.+2      	; 0xd10 <FUNCSetFirmMinorVer+0x52>
				  VerMinor++;
     d0e:	1f 5f       	subi	r17, 0xFF	; 255
			}
			if (JoyStatus & JOY_DOWN)
     d10:	f7 9b       	sbis	0x1e, 7	; 30
     d12:	04 c0       	rjmp	.+8      	; 0xd1c <FUNCSetFirmMinorVer+0x5e>
			{
				if (VerMinor)
     d14:	11 23       	and	r17, r17
     d16:	49 f0       	breq	.+18     	; 0xd2a <FUNCSetFirmMinorVer+0x6c>
				  VerMinor--;
     d18:	11 50       	subi	r17, 0x01	; 1
     d1a:	07 c0       	rjmp	.+14     	; 0xd2a <FUNCSetFirmMinorVer+0x6c>
			}
			else if (JoyStatus & JOY_LEFT)
     d1c:	f2 9b       	sbis	0x1e, 2	; 30
     d1e:	05 c0       	rjmp	.+10     	; 0xd2a <FUNCSetFirmMinorVer+0x6c>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     d20:	d7 01       	movw	r26, r14
     d22:	01 2e       	mov	r0, r17
     d24:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.FirmVerMinor, VerMinor);
				return;
     d28:	0a c0       	rjmp	.+20     	; 0xd3e <FUNCSetFirmMinorVer+0x80>
			}
			
			VerBuffer[3] = ('0' + VerMinor);
     d2a:	10 5d       	subi	r17, 0xD0	; 208
     d2c:	1c 83       	std	Y+4, r17	; 0x04
     d2e:	10 53       	subi	r17, 0x30	; 48
			LCD_puts(VerBuffer);
     d30:	ce 01       	movw	r24, r28
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	0e 94 19 08 	call	0x1032 <LCD_puts>

			MAIN_WaitForJoyRelease();
     d38:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
     d3c:	e1 cf       	rjmp	.-62     	; 0xd00 <FUNCSetFirmMinorVer+0x42>
     d3e:	25 96       	adiw	r28, 0x05	; 5
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	08 95       	ret

00000d56 <FUNCSetAutoSleepTimeOut>:
		}
	}	
}

void FUNCSetAutoSleepTimeOut(void)
{
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	28 97       	sbiw	r28, 0x08	; 8
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     d70:	27 e8       	ldi	r18, 0x87	; 135
     d72:	e2 2e       	mov	r14, r18
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	f2 2e       	mov	r15, r18
  uint8_t result;
  asm volatile
     d78:	d7 01       	movw	r26, r14
     d7a:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
     d7e:	80 2d       	mov	r24, r0
     d80:	18 2f       	mov	r17, r24
	uint8_t SleepTxtBuffer[8];
	uint8_t SleepVal = eeprom_read_byte(&EEPROMVars.AutoSleepValIndex);

	if (SleepVal > 4)
     d82:	85 30       	cpi	r24, 0x05	; 5
     d84:	08 f0       	brcs	.+2      	; 0xd88 <FUNCSetAutoSleepTimeOut+0x32>
	  SleepVal = 4;
     d86:	14 e0       	ldi	r17, 0x04	; 4

	strcpy_P(SleepTxtBuffer, PSTR("    SEC"));
     d88:	67 ee       	ldi	r22, 0xE7	; 231
     d8a:	72 e0       	ldi	r23, 0x02	; 2
     d8c:	ce 01       	movw	r24, r28
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	0e 94 3f 1a 	call	0x347e <strcpy_P>
	
	JoyStatus = 1;                        // Invalid value to force the LCD to update
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     d98:	8e b3       	in	r24, 0x1e	; 30
     d9a:	88 23       	and	r24, r24
     d9c:	e9 f3       	breq	.-6      	; 0xd98 <FUNCSetAutoSleepTimeOut+0x42>
		{
			if (JoyStatus & JOY_UP)
     d9e:	f6 9b       	sbis	0x1e, 6	; 30
     da0:	05 c0       	rjmp	.+10     	; 0xdac <FUNCSetAutoSleepTimeOut+0x56>
			{
				(SleepVal == 0)? SleepVal = 4 : SleepVal--;
     da2:	11 23       	and	r17, r17
     da4:	11 f4       	brne	.+4      	; 0xdaa <FUNCSetAutoSleepTimeOut+0x54>
     da6:	14 e0       	ldi	r17, 0x04	; 4
     da8:	01 c0       	rjmp	.+2      	; 0xdac <FUNCSetAutoSleepTimeOut+0x56>
     daa:	11 50       	subi	r17, 0x01	; 1
			}
			if (JoyStatus & JOY_DOWN)
     dac:	f7 9b       	sbis	0x1e, 7	; 30
     dae:	06 c0       	rjmp	.+12     	; 0xdbc <FUNCSetAutoSleepTimeOut+0x66>
			{
				(SleepVal == 4)? SleepVal = 0 : SleepVal++;
     db0:	14 30       	cpi	r17, 0x04	; 4
     db2:	11 f4       	brne	.+4      	; 0xdb8 <FUNCSetAutoSleepTimeOut+0x62>
     db4:	10 e0       	ldi	r17, 0x00	; 0
     db6:	0d c0       	rjmp	.+26     	; 0xdd2 <FUNCSetAutoSleepTimeOut+0x7c>
     db8:	1f 5f       	subi	r17, 0xFF	; 255
     dba:	09 c0       	rjmp	.+18     	; 0xdce <FUNCSetAutoSleepTimeOut+0x78>
			}
			else if (JoyStatus & JOY_LEFT)
     dbc:	f2 9b       	sbis	0x1e, 2	; 30
     dbe:	07 c0       	rjmp	.+14     	; 0xdce <FUNCSetAutoSleepTimeOut+0x78>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     dc0:	d7 01       	movw	r26, r14
     dc2:	01 2e       	mov	r0, r17
     dc4:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.AutoSleepValIndex, SleepVal);
				TOUT_SetupSleepTimer();
     dc8:	0e 94 03 0c 	call	0x1806 <TOUT_SetupSleepTimer>
				return;
     dcc:	1b c0       	rjmp	.+54     	; 0xe04 <FUNCSetAutoSleepTimeOut+0xae>
			}

			if (!(SleepVal))
     dce:	11 23       	and	r17, r17
     dd0:	29 f4       	brne	.+10     	; 0xddc <FUNCSetAutoSleepTimeOut+0x86>
			{
				LCD_puts_f(PSTR("OFF"));
     dd2:	8f ee       	ldi	r24, 0xEF	; 239
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     dda:	11 c0       	rjmp	.+34     	; 0xdfe <FUNCSetAutoSleepTimeOut+0xa8>
			}
			else
			{
				MAIN_IntToStr(pgm_read_byte(&AutoSleepTOValues[SleepVal]), &SleepTxtBuffer[0]);
     ddc:	e1 2f       	mov	r30, r17
     dde:	ff 27       	eor	r31, r31
     de0:	ea 53       	subi	r30, 0x3A	; 58
     de2:	fc 4f       	sbci	r31, 0xFC	; 252
     de4:	84 91       	lpm	r24, Z
     de6:	be 01       	movw	r22, r28
     de8:	6f 5f       	subi	r22, 0xFF	; 255
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	99 27       	eor	r25, r25
     dee:	0e 94 37 03 	call	0x66e <MAIN_IntToStr>
				SleepTxtBuffer[3] = ' '; // Remove the auto-string termination from the buffer
     df2:	80 e2       	ldi	r24, 0x20	; 32
     df4:	8c 83       	std	Y+4, r24	; 0x04
				LCD_puts(SleepTxtBuffer);
     df6:	ce 01       	movw	r24, r28
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	0e 94 19 08 	call	0x1032 <LCD_puts>
			}

			MAIN_WaitForJoyRelease();
     dfe:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
     e02:	ca cf       	rjmp	.-108    	; 0xd98 <FUNCSetAutoSleepTimeOut+0x42>
     e04:	28 96       	adiw	r28, 0x08	; 8
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	ff 90       	pop	r15
     e18:	ef 90       	pop	r14
     e1a:	08 95       	ret

00000e1c <FUNCSleepMode>:
		}
	}	
}

void FUNCSleepMode(void)
{
	SMCR    = ((1 << SM1) | (1 << SE));    // Power down sleep mode
     e1c:	85 e0       	ldi	r24, 0x05	; 5
     e1e:	83 bf       	out	0x33, r24	; 51
	LCDCRA &= ~(1 << LCDEN); 
     e20:	80 91 e4 00 	lds	r24, 0x00E4
     e24:	8f 77       	andi	r24, 0x7F	; 127
     e26:	80 93 e4 00 	sts	0x00E4, r24
	
	while (!(JoyStatus & JOY_UP))         // Joystick interrupt wakes the micro
	  SLEEP();
     e2a:	f6 99       	sbic	0x1e, 6	; 30
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <FUNCSleepMode+0x18>
     e2e:	88 95       	sleep
     e30:	f6 9b       	sbis	0x1e, 6	; 30
     e32:	fd cf       	rjmp	.-6      	; 0xe2e <FUNCSleepMode+0x12>
	   
	LCDCRA |= (1 << LCDEN);
     e34:	80 91 e4 00 	lds	r24, 0x00E4
     e38:	80 68       	ori	r24, 0x80	; 128
     e3a:	80 93 e4 00 	sts	0x00E4, r24
	
	MAIN_WaitForJoyRelease();
     e3e:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
     e42:	08 95       	ret

00000e44 <FUNCStorageInfo>:
}

void FUNCStorageInfo(void)
{
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
	uint8_t SelectedItem = 0;
     e48:	10 e0       	ldi	r17, 0x00	; 0

	MAIN_WaitForJoyRelease();
     e4a:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>

	JoyStatus = 1;                        // Invalid value to force the LCD to update
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     e52:	8e b3       	in	r24, 0x1e	; 30
     e54:	88 23       	and	r24, r24
     e56:	e9 f3       	breq	.-6      	; 0xe52 <FUNCStorageInfo+0xe>
		{
			if (JoyStatus & (JOY_UP | JOY_DOWN))
     e58:	ce b3       	in	r28, 0x1e	; 30
     e5a:	c0 7c       	andi	r28, 0xC0	; 192
     e5c:	19 f0       	breq	.+6      	; 0xe64 <FUNCStorageInfo+0x20>
			{
				SelectedItem ^= 1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	18 27       	eor	r17, r24
     e62:	38 c0       	rjmp	.+112    	; 0xed4 <FUNCStorageInfo+0x90>
			}
			else if (JoyStatus & JOY_LEFT)
     e64:	f2 99       	sbic	0x1e, 2	; 30
     e66:	41 c0       	rjmp	.+130    	; 0xeea <FUNCStorageInfo+0xa6>
			{
				return;
			}
			else if (JoyStatus & JOY_PRESS)
     e68:	f4 9b       	sbis	0x1e, 4	; 30
     e6a:	34 c0       	rjmp	.+104    	; 0xed4 <FUNCStorageInfo+0x90>
			{
				if (SelectedItem == 1)    // View storage tags
     e6c:	11 30       	cpi	r17, 0x01	; 1
     e6e:	81 f5       	brne	.+96     	; 0xed0 <FUNCStorageInfo+0x8c>
				{
					DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     e70:	88 e3       	ldi	r24, 0x38	; 56
     e72:	99 e0       	ldi	r25, 0x09	; 9
     e74:	90 93 01 01 	sts	0x0101, r25
     e78:	80 93 00 01 	sts	0x0100, r24
					SPI_SPIInit();
     e7c:	0e 94 2e 09 	call	0x125c <SPI_SPIInit>
					UseExernalDF = FALSE;
     e80:	c0 93 65 02 	sts	0x0265, r28
					DF_EnableDataflash(TRUE);
     e84:	81 2f       	mov	r24, r17
     e86:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>

					if (DF_CheckCorrectOnboardChip())
     e8a:	0e 94 56 0b 	call	0x16ac <DF_CheckCorrectOnboardChip>
     e8e:	c8 2f       	mov	r28, r24
     e90:	88 23       	and	r24, r24
     e92:	41 f0       	breq	.+16     	; 0xea4 <FUNCStorageInfo+0x60>
					{
						TM_ShowTags();
     e94:	0e 94 11 1a 	call	0x3422 <TM_ShowTags>
						SPI_SPIOFF();
     e98:	80 91 64 00 	lds	r24, 0x0064
     e9c:	84 60       	ori	r24, 0x04	; 4
     e9e:	80 93 64 00 	sts	0x0064, r24
     ea2:	18 c0       	rjmp	.+48     	; 0xed4 <FUNCStorageInfo+0x90>
					}
					else if (!(PM_GetStoredDataSize(TYPE_FLASH)))
     ea4:	81 2f       	mov	r24, r17
     ea6:	0e 94 fc 13 	call	0x27f8 <PM_GetStoredDataSize>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	a1 05       	cpc	r26, r1
     eb2:	b1 05       	cpc	r27, r1
     eb4:	79 f4       	brne	.+30     	; 0xed4 <FUNCStorageInfo+0x90>
					{
						DF_EnableDataflash(FALSE);
     eb6:	8c 2f       	mov	r24, r28
     eb8:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
						SPI_SPIOFF();
     ebc:	80 91 64 00 	lds	r24, 0x0064
     ec0:	84 60       	ori	r24, 0x04	; 4
     ec2:	80 93 64 00 	sts	0x0064, r24

						MAIN_ShowError(PSTR("NO STORED PRGM"));
     ec6:	83 ef       	ldi	r24, 0xF3	; 243
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <FUNCStorageInfo+0x90>
					}	
				}
				else                      // View stored data sizes
				{
					PM_ShowStoredItemSizes();
     ed0:	0e 94 ec 18 	call	0x31d8 <PM_ShowStoredItemSizes>
				}
			}
			
			LCD_puts_f(SIFONames[SelectedItem]);
     ed4:	8e e0       	ldi	r24, 0x0E	; 14
     ed6:	18 9f       	mul	r17, r24
     ed8:	c0 01       	movw	r24, r0
     eda:	11 24       	eor	r1, r1
     edc:	84 5a       	subi	r24, 0xA4	; 164
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     ee4:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
     ee8:	b4 cf       	rjmp	.-152    	; 0xe52 <FUNCStorageInfo+0xe>
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	08 95       	ret

00000ef0 <FUNCGoBootloader>:
		}
	}
}

void FUNCGoBootloader(void)
{
	uint8_t MD = (MCUCR & ~(1 << JTD));   // Forces compiler to use IN, AND plus two OUTs rather than two lots of IN/AND/OUTs
     ef0:	85 b7       	in	r24, 0x35	; 53
     ef2:	8f 77       	andi	r24, 0x7F	; 127
	MCUCR = MD;                           // Turn on JTAG via code
     ef4:	85 bf       	out	0x35, r24	; 53
	MCUCR = MD;                           // Set bit twice as specified in datasheet        
     ef6:	85 bf       	out	0x35, r24	; 53
	
	LCD_puts_f(PSTR("*JTAG ON*"));
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	93 e0       	ldi	r25, 0x03	; 3
     efc:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
	
	MAIN_WaitForJoyRelease();
     f00:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
	
	WDTCR = ((1<<WDCE) | (1<<WDE));       // Enable Watchdog Timer to give reset after minimum timeout
     f04:	88 e1       	ldi	r24, 0x18	; 24
     f06:	80 93 60 00 	sts	0x0060, r24
	while (1) {};                        // Eternal loop - when watchdog resets the AVR it will enter the bootloader
     f0a:	ff cf       	rjmp	.-2      	; 0xf0a <FUNCGoBootloader+0x1a>

00000f0c <OSCCAL_Calibrate>:

static volatile uint16_t ActualCount;

void OSCCAL_Calibrate(void)
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
	uint8_t SREG_Backup;
	uint8_t LoopCount = (0x7F / 2); // Maximum range is 128, and starts from the middle, so 64 is the max number of iterations required
     f10:	4f e3       	ldi	r20, 0x3F	; 63
	uint8_t PrevOSCALValues[2];
   
	// Reset ActualCount
	ActualCount = 0;
     f12:	10 92 05 01 	sts	0x0105, r1
     f16:	10 92 04 01 	sts	0x0104, r1
   
	// Make sure all clock division is turned off (8Mhz RC clock)
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_8MHZ);
     f1a:	80 e8       	ldi	r24, 0x80	; 128
     f1c:	80 93 61 00 	sts	0x0061, r24
     f20:	10 92 61 00 	sts	0x0061, r1

	// Inital OSCCAL of half its maximum for speed
	OSCCAL = (0x7F / 2);
     f24:	40 93 66 00 	sts	0x0066, r20

	// Save the SREG
	SREG_Backup = SREG;
     f28:	5f b7       	in	r21, 0x3f	; 63
    
	// Disable all timer 1 interrupts
	TIMSK1 = 0;
     f2a:	10 92 6f 00 	sts	0x006F, r1
        
	// Set timer 2 to asyncronous mode (32.768KHz crystal)
	ASSR   = (1 << AS2);
     f2e:	88 e0       	ldi	r24, 0x08	; 8
     f30:	80 93 b6 00 	sts	0x00B6, r24
        
	// Timer 2 overflow interrupt enable
	TIMSK2 = (1 << TOIE2);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 70 00 	sts	0x0070, r24

	// Enable interrupts
	sei();
     f3a:	78 94       	sei

	// Start both counters with no prescaling
	TCCR1B = (1 << CS10);
     f3c:	80 93 81 00 	sts	0x0081, r24
	TCCR2A = (1 << CS20);
     f40:	80 93 b0 00 	sts	0x00B0, r24
	 	 
	// Previous OSCCAL value of 0
	PrevOSCALValues[0] = 0;
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0

	// Wait until timer 2's external 32.768KHz crystal is stable
	while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB) | (1 << OCR2UB)));
     f48:	80 91 b6 00 	lds	r24, 0x00B6
     f4c:	99 27       	eor	r25, r25
     f4e:	87 70       	andi	r24, 0x07	; 7
     f50:	90 70       	andi	r25, 0x00	; 0
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	c9 f7       	brne	.-14     	; 0xf48 <OSCCAL_Calibrate+0x3c>
    
	// Clear the timer values
	TCNT1  = 0;
     f56:	90 93 85 00 	sts	0x0085, r25
     f5a:	80 93 84 00 	sts	0x0084, r24
	TCNT2  = 0;
     f5e:	10 92 b2 00 	sts	0x00B2, r1
    
	while (LoopCount--)
	{
		// Let it take a few readings (14ms, approx 2 readings)
		_delay_ms(14);

		PrevOSCALValues[1] = PrevOSCALValues[0];
		PrevOSCALValues[0] = OSCCAL;
        
		if (ActualCount > OSCCAL_UPPERCOUNTBOUND)       // Clock is running too fast
			OSCCAL--;
		else if (ActualCount < OSCCAL_LOWERCOUNTBOUND) // Clock is running too slow
			OSCCAL++;
		else		                                     // Clock is just right
			break;
		
		// If the routine cannot find a value withing the count tollerance,
		// it will cause the OSCCAL to hover around the closest two values.
		// If the current value is the same as the 2*n previous, exit the
		// routine as the best value has been found.
		if (OSCCAL == PrevOSCALValues[1])
		  break;
     f62:	4e e3       	ldi	r20, 0x3E	; 62
     f64:	ac ec       	ldi	r26, 0xCC	; 204
     f66:	b4 e6       	ldi	r27, 0x64	; 100
     f68:	c0 e0       	ldi	r28, 0x00	; 0
     f6a:	d0 e0       	ldi	r29, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f6c:	cd 01       	movw	r24, r26
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <OSCCAL_Calibrate+0x62>
     f72:	32 2f       	mov	r19, r18
     f74:	80 91 66 00 	lds	r24, 0x0066
     f78:	28 2f       	mov	r18, r24
     f7a:	80 91 04 01 	lds	r24, 0x0104
     f7e:	90 91 05 01 	lds	r25, 0x0105
     f82:	81 50       	subi	r24, 0x01	; 1
     f84:	91 4e       	sbci	r25, 0xE1	; 225
     f86:	20 f0       	brcs	.+8      	; 0xf90 <OSCCAL_Calibrate+0x84>
     f88:	80 91 66 00 	lds	r24, 0x0066
     f8c:	81 50       	subi	r24, 0x01	; 1
     f8e:	0a c0       	rjmp	.+20     	; 0xfa4 <OSCCAL_Calibrate+0x98>
     f90:	80 91 04 01 	lds	r24, 0x0104
     f94:	90 91 05 01 	lds	r25, 0x0105
     f98:	86 5f       	subi	r24, 0xF6	; 246
     f9a:	90 4e       	sbci	r25, 0xE0	; 224
     f9c:	58 f4       	brcc	.+22     	; 0xfb4 <OSCCAL_Calibrate+0xa8>
     f9e:	80 91 66 00 	lds	r24, 0x0066
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
     fa4:	80 93 66 00 	sts	0x0066, r24
     fa8:	80 91 66 00 	lds	r24, 0x0066
     fac:	83 17       	cp	r24, r19
     fae:	11 f0       	breq	.+4      	; 0xfb4 <OSCCAL_Calibrate+0xa8>
     fb0:	41 50       	subi	r20, 0x01	; 1
     fb2:	e0 f6       	brcc	.-72     	; 0xf6c <OSCCAL_Calibrate+0x60>
	}

	// Disable all timer interrupts
	TIMSK1 = 0;
     fb4:	10 92 6f 00 	sts	0x006F, r1
	TIMSK2 = 0;
     fb8:	10 92 70 00 	sts	0x0070, r1
    
	// Stop the timers
	TCCR1B = 0x00;
     fbc:	10 92 81 00 	sts	0x0081, r1
	TCCR2A = 0x00;
     fc0:	10 92 b0 00 	sts	0x00B0, r1

	// Turn off timer 2 asynchronous mode
	ASSR  &= ~(1 << AS2);
     fc4:	80 91 b6 00 	lds	r24, 0x00B6
     fc8:	87 7f       	andi	r24, 0xF7	; 247
     fca:	80 93 b6 00 	sts	0x00B6, r24

	// Restore SREG
	SREG = SREG_Backup;
     fce:	5f bf       	out	0x3f, r21	; 63
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <__vector_5>:
        
	return;
}

ISR(TIMER2_OVF_vect, ISR_BLOCK) // Occurs 32768/256 timers per second, or 128Hz
{
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	8f 93       	push	r24
     fe2:	9f 93       	push	r25
	// Stop timer 1 so it can be read
	TCCR1B = 0x00;
     fe4:	10 92 81 00 	sts	0x0081, r1
    
	// Record timer 1's value
	ActualCount = TCNT1;
     fe8:	80 91 84 00 	lds	r24, 0x0084
     fec:	90 91 85 00 	lds	r25, 0x0085
     ff0:	90 93 05 01 	sts	0x0105, r25
     ff4:	80 93 04 01 	sts	0x0104, r24
	     
	// Reset counters and restart timer 1
	TCNT1  = 0;
     ff8:	10 92 85 00 	sts	0x0085, r1
     ffc:	10 92 84 00 	sts	0x0084, r1
	TCNT2  = 0;
    1000:	10 92 b2 00 	sts	0x00B2, r1
	TCCR1B = (1 << CS10);
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 93 81 00 	sts	0x0081, r24
    100a:	9f 91       	pop	r25
    100c:	8f 91       	pop	r24
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	1f 90       	pop	r1
    1016:	18 95       	reti

00001018 <LCD_Init>:

void LCD_Init(void)
{
	// Set the initial contrast level to maximum:
	LCDCCR = 0x0F;
    1018:	8f e0       	ldi	r24, 0x0F	; 15
    101a:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all segment pins:
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
    101e:	87 eb       	ldi	r24, 0xB7	; 183
    1020:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32Hz:
    LCDFRR  = (7<<LCDCD0);    
    1024:	87 e0       	ldi	r24, 0x07	; 7
    1026:	80 93 e6 00 	sts	0x00E6, r24

	// Enable LCD and set low power waveform, enable start of frame interrupt:
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB) | (1<<LCDIE);
    102a:	88 ec       	ldi	r24, 0xC8	; 200
    102c:	80 93 e4 00 	sts	0x00E4, r24
    1030:	08 95       	ret

00001032 <LCD_puts>:
}

void LCD_puts_f(const uint8_t *FlashData)
{
	uint8_t StrBuff[LCD_TEXTBUFFER_SIZE];

	strcpy_P(StrBuff, FlashData);
	LCD_puts(StrBuff);
}

void LCD_puts(const uint8_t *Data)
{
    1032:	dc 01       	movw	r26, r24
	uint8_t LoadB;
	
	for (LoadB = 0; LoadB < 20; LoadB++)
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	3f ef       	ldi	r19, 0xFF	; 255
    1038:	e6 e0       	ldi	r30, 0x06	; 6
    103a:	f1 e0       	ldi	r31, 0x01	; 1
	{
		uint8_t CByte = *(Data++);
    103c:	9d 91       	ld	r25, X+
	
		if ((CByte >= '*') && (CByte <= 'z') && (CByte != ' '))
    103e:	89 2f       	mov	r24, r25
    1040:	8a 52       	subi	r24, 0x2A	; 42
    1042:	81 35       	cpi	r24, 0x51	; 81
    1044:	10 f4       	brcc	.+4      	; 0x104a <LCD_puts+0x18>
		  TextBuffer[LoadB] = (CByte - '*');
    1046:	80 83       	st	Z, r24
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <LCD_puts+0x1e>
		else if (CByte == 0x00)
    104a:	99 23       	and	r25, r25
    104c:	29 f0       	breq	.+10     	; 0x1058 <LCD_puts+0x26>
		  break;
		else
		  TextBuffer[LoadB] = 0xFF;		
    104e:	30 83       	st	Z, r19
    1050:	2f 5f       	subi	r18, 0xFF	; 255
    1052:	31 96       	adiw	r30, 0x01	; 1
    1054:	24 31       	cpi	r18, 0x14	; 20
    1056:	90 f3       	brcs	.-28     	; 0x103c <LCD_puts+0xa>
	}

	ScrollMode  = ((LoadB > 6)? TRUE : FALSE);
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	27 30       	cpi	r18, 0x07	; 7
    105c:	08 f0       	brcs	.+2      	; 0x1060 <LCD_puts+0x2e>
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	80 93 37 01 	sts	0x0137, r24
	ScrollCount = 0;
    1064:	10 92 38 01 	sts	0x0138, r1
    1068:	9f ef       	ldi	r25, 0xFF	; 255
    106a:	86 e0       	ldi	r24, 0x06	; 6

	for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
		TextBuffer[LoadB++] = 0xFF;
    106c:	e2 2f       	mov	r30, r18
    106e:	ff 27       	eor	r31, r31
    1070:	ea 5f       	subi	r30, 0xFA	; 250
    1072:	fe 4f       	sbci	r31, 0xFE	; 254
    1074:	90 83       	st	Z, r25
    1076:	2f 5f       	subi	r18, 0xFF	; 255
    1078:	81 50       	subi	r24, 0x01	; 1
    107a:	87 ff       	sbrs	r24, 7
    107c:	f7 cf       	rjmp	.-18     	; 0x106c <LCD_puts+0x3a>
	
	TextBuffer[LoadB] = 0x00;
    107e:	e2 2f       	mov	r30, r18
    1080:	ff 27       	eor	r31, r31
    1082:	ea 5f       	subi	r30, 0xFA	; 250
    1084:	fe 4f       	sbci	r31, 0xFE	; 254
    1086:	10 82       	st	Z, r1
	StrStart   = 0;
    1088:	10 92 35 01 	sts	0x0135, r1
	StrEnd     = LoadB;	
    108c:	20 93 36 01 	sts	0x0136, r18
	DelayCount = LCD_DELAYCOUNT_DEFAULT;
    1090:	8a e0       	ldi	r24, 0x0A	; 10
    1092:	80 93 39 01 	sts	0x0139, r24

	UpdateLCD  = TRUE;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 3a 01 	sts	0x013A, r24
    109c:	08 95       	ret

0000109e <LCD_puts_f>:
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	64 97       	sbiw	r28, 0x14	; 20
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	bc 01       	movw	r22, r24
    10b4:	ce 01       	movw	r24, r28
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	0e 94 3f 1a 	call	0x347e <strcpy_P>
    10bc:	ce 01       	movw	r24, r28
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	0e 94 19 08 	call	0x1032 <LCD_puts>
    10c4:	64 96       	adiw	r28, 0x14	; 20
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <LCD_WriteChar>:
}

void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit)
{
    10d6:	e8 2f       	mov	r30, r24
	uint16_t SegData  = 0x00;
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1));
    10dc:	86 2f       	mov	r24, r22
    10de:	86 95       	lsr	r24
    10e0:	a8 2f       	mov	r26, r24
    10e2:	bb 27       	eor	r27, r27
    10e4:	af 5d       	subi	r26, 0xDF	; 223
    10e6:	be 4f       	sbci	r27, 0xFE	; 254

	if (Byte != 0xFF)
    10e8:	ef 3f       	cpi	r30, 0xFF	; 255
    10ea:	39 f0       	breq	.+14     	; 0x10fa <LCD_WriteChar+0x24>
	  SegData = pgm_read_word(&LCD_SegTable[Byte]);	
    10ec:	ff 27       	eor	r31, r31
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	e4 5f       	subi	r30, 0xF4	; 244
    10f4:	fc 4f       	sbci	r31, 0xFC	; 252
    10f6:	25 91       	lpm	r18, Z+
    10f8:	34 91       	lpm	r19, Z
    10fa:	77 27       	eor	r23, r23
    10fc:	61 70       	andi	r22, 0x01	; 1
    10fe:	70 70       	andi	r23, 0x00	; 0
    1100:	43 e0       	ldi	r20, 0x03	; 3

	for (uint8_t BNib = 0; BNib < 4; BNib++)
	{
		uint8_t Mask          = 0xF0;
    1102:	50 ef       	ldi	r21, 0xF0	; 240
		uint8_t MaskedSegData = (SegData & 0x0000F);
    1104:	92 2f       	mov	r25, r18
    1106:	9f 70       	andi	r25, 0x0F	; 15
	
		if (Digit & 0x01)
    1108:	61 15       	cp	r22, r1
    110a:	71 05       	cpc	r23, r1
    110c:	19 f0       	breq	.+6      	; 0x1114 <LCD_WriteChar+0x3e>
		{
			Mask = 0x0F;
    110e:	5f e0       	ldi	r21, 0x0F	; 15
			MaskedSegData <<= 4;
    1110:	92 95       	swap	r25
    1112:	90 7f       	andi	r25, 0xF0	; 240
		}
		
		*BuffPtr = ((*BuffPtr & Mask) | MaskedSegData);
    1114:	8c 91       	ld	r24, X
    1116:	85 23       	and	r24, r21
    1118:	89 2b       	or	r24, r25
    111a:	8c 93       	st	X, r24

		SegData >>= 4;
    111c:	84 e0       	ldi	r24, 0x04	; 4
    111e:	36 95       	lsr	r19
    1120:	27 95       	ror	r18
    1122:	8a 95       	dec	r24
    1124:	e1 f7       	brne	.-8      	; 0x111e <LCD_WriteChar+0x48>
		BuffPtr  += 5;
    1126:	15 96       	adiw	r26, 0x05	; 5
    1128:	41 50       	subi	r20, 0x01	; 1
    112a:	47 ff       	sbrs	r20, 7
    112c:	ea cf       	rjmp	.-44     	; 0x1102 <LCD_WriteChar+0x2c>
    112e:	08 95       	ret

00001130 <__vector_22>:
	}
}

ISR(LCD_vect, ISR_NOBLOCK)
{
    1130:	78 94       	sei
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	11 24       	eor	r1, r1
    113c:	2f 93       	push	r18
    113e:	3f 93       	push	r19
    1140:	4f 93       	push	r20
    1142:	5f 93       	push	r21
    1144:	6f 93       	push	r22
    1146:	7f 93       	push	r23
    1148:	8f 93       	push	r24
    114a:	9f 93       	push	r25
    114c:	af 93       	push	r26
    114e:	bf 93       	push	r27
    1150:	cf 93       	push	r28
    1152:	ef 93       	push	r30
    1154:	ff 93       	push	r31
	if (ScrollMode)
    1156:	80 91 37 01 	lds	r24, 0x0137
    115a:	88 23       	and	r24, r24
    115c:	99 f0       	breq	.+38     	; 0x1184 <__vector_22+0x54>
	{
		if (DelayCount)
    115e:	80 91 39 01 	lds	r24, 0x0139
    1162:	88 23       	and	r24, r24
    1164:	21 f0       	breq	.+8      	; 0x116e <__vector_22+0x3e>
		{
			DelayCount--;
    1166:	81 50       	subi	r24, 0x01	; 1
    1168:	80 93 39 01 	sts	0x0139, r24
    116c:	0b c0       	rjmp	.+22     	; 0x1184 <__vector_22+0x54>
		}
		else
		{
			if (!(ScrollCount))
    116e:	80 91 38 01 	lds	r24, 0x0138
    1172:	88 23       	and	r24, r24
    1174:	21 f4       	brne	.+8      	; 0x117e <__vector_22+0x4e>
			  UpdateLCD = TRUE;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	80 93 3a 01 	sts	0x013A, r24
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <__vector_22+0x54>
			else
			  ScrollCount--;
    117e:	81 50       	subi	r24, 0x01	; 1
    1180:	80 93 38 01 	sts	0x0138, r24
		}
	}

	if (UpdateLCD)
    1184:	80 91 3a 01 	lds	r24, 0x013A
    1188:	88 23       	and	r24, r24
    118a:	39 f1       	breq	.+78     	; 0x11da <__vector_22+0xaa>
	{
		for (uint8_t Character = 0; Character < 6; Character++)
    118c:	c0 e0       	ldi	r28, 0x00	; 0
		{
			uint8_t Byte = (StrStart + Character);
    118e:	80 91 35 01 	lds	r24, 0x0135
    1192:	8c 0f       	add	r24, r28

			if (Byte >= StrEnd)
    1194:	90 91 36 01 	lds	r25, 0x0136
    1198:	e8 2f       	mov	r30, r24
    119a:	ff 27       	eor	r31, r31
    119c:	89 17       	cp	r24, r25
    119e:	10 f0       	brcs	.+4      	; 0x11a4 <__vector_22+0x74>
			  Byte = TextBuffer[Byte - StrEnd];
    11a0:	e9 1b       	sub	r30, r25
    11a2:	f1 09       	sbc	r31, r1
			else
			  Byte = TextBuffer[Byte];
    11a4:	ea 5f       	subi	r30, 0xFA	; 250
    11a6:	fe 4f       	sbci	r31, 0xFE	; 254
    11a8:	80 81       	ld	r24, Z
			
			LCD_WriteChar(Byte, Character);
    11aa:	6c 2f       	mov	r22, r28
    11ac:	0e 94 6b 08 	call	0x10d6 <LCD_WriteChar>
    11b0:	cf 5f       	subi	r28, 0xFF	; 255
    11b2:	c6 30       	cpi	r28, 0x06	; 6
    11b4:	60 f3       	brcs	.-40     	; 0x118e <__vector_22+0x5e>
		}
		
		if (StrStart++ == StrEnd)
    11b6:	80 91 35 01 	lds	r24, 0x0135
    11ba:	98 2f       	mov	r25, r24
    11bc:	8f 5f       	subi	r24, 0xFF	; 255
    11be:	80 93 35 01 	sts	0x0135, r24
    11c2:	80 91 36 01 	lds	r24, 0x0136
    11c6:	98 17       	cp	r25, r24
    11c8:	19 f4       	brne	.+6      	; 0x11d0 <__vector_22+0xa0>
		  StrStart = 1;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 35 01 	sts	0x0135, r24
		
		ScrollCount = LCD_SCROLLCOUNT_DEFAULT;
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	80 93 38 01 	sts	0x0138, r24
		UpdateLCD = FALSE;
    11d6:	10 92 3a 01 	sts	0x013A, r1
    11da:	ac ee       	ldi	r26, 0xEC	; 236
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e1 e2       	ldi	r30, 0x21	; 33
    11e0:	f1 e0       	ldi	r31, 0x01	; 1
    11e2:	93 e1       	ldi	r25, 0x13	; 19
	}

	for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++)
	  *(pLCDREG + LCDChar) = SegBuffer[LCDChar];
    11e4:	81 91       	ld	r24, Z+
    11e6:	8d 93       	st	X+, r24
    11e8:	91 50       	subi	r25, 0x01	; 1
    11ea:	97 ff       	sbrs	r25, 7
    11ec:	fb cf       	rjmp	.-10     	; 0x11e4 <__vector_22+0xb4>
    11ee:	ff 91       	pop	r31
    11f0:	ef 91       	pop	r30
    11f2:	cf 91       	pop	r28
    11f4:	bf 91       	pop	r27
    11f6:	af 91       	pop	r26
    11f8:	9f 91       	pop	r25
    11fa:	8f 91       	pop	r24
    11fc:	7f 91       	pop	r23
    11fe:	6f 91       	pop	r22
    1200:	5f 91       	pop	r21
    1202:	4f 91       	pop	r20
    1204:	3f 91       	pop	r19
    1206:	2f 91       	pop	r18
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <USART_Init>:
*****************************************************************************/
void USART_Init(void)
{
    // Set baud rate
    UBRRH = (uint8_t)(USART_BAUDVALUE >> 8);
    1212:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = (uint8_t)(USART_BAUDVALUE);
    1216:	87 e0       	ldi	r24, 0x07	; 7
    1218:	80 93 c4 00 	sts	0x00C4, r24

    // Double speed
	UCSRA = (USART_DOUBLESPEED << U2X);
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	80 93 c0 00 	sts	0x00C0, r24

    // Enable recieve complete interrupt
	UCSRB = (1 << RXCIE);
    1222:	80 e8       	ldi	r24, 0x80	; 128
    1224:	80 93 c1 00 	sts	0x00C1, r24
	 
    // Async. mode, 8N1
    UCSRC = (3 << UCSZ0);
    1228:	86 e0       	ldi	r24, 0x06	; 6
    122a:	80 93 c2 00 	sts	0x00C2, r24
	 
	 // Initalise ringbuffer
	BUFF_InitialiseBuffer();
    122e:	0e 94 b9 0b 	call	0x1772 <BUFF_InitialiseBuffer>
    1232:	08 95       	ret

00001234 <USART_Tx>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_Tx(const char data)
{
    1234:	98 2f       	mov	r25, r24
    while (!(UCSRA & (1 << UDRE)));
    1236:	80 91 c0 00 	lds	r24, 0x00C0
    123a:	85 ff       	sbrs	r24, 5
    123c:	fc cf       	rjmp	.-8      	; 0x1236 <USART_Tx+0x2>
    UDR = data;
    123e:	90 93 c6 00 	sts	0x00C6, r25
    1242:	08 95       	ret

00001244 <USART_Rx>:
}

/*****************************************************************************
*
*   Function name : Usart_Rx
*
*   Returns :       char: byte received
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART
*
*****************************************************************************/
char USART_Rx(void)
{
    while (!(BuffElements) && !(PacketTimeOut)) {};
    1244:	80 91 b3 02 	lds	r24, 0x02B3
    1248:	88 23       	and	r24, r24
    124a:	21 f4       	brne	.+8      	; 0x1254 <USART_Rx+0x10>
    124c:	80 91 3f 01 	lds	r24, 0x013F
    1250:	88 23       	and	r24, r24
    1252:	c1 f3       	breq	.-16     	; 0x1244 <USART_Rx>
    return BUFF_GetBuffByte();
    1254:	0e 94 c6 0b 	call	0x178c <BUFF_GetBuffByte>
}
    1258:	99 27       	eor	r25, r25
    125a:	08 95       	ret

0000125c <SPI_SPIInit>:
// ======================================================================================

void SPI_SPIInit(void)
{
	PRR &= ~(1 << PRSPI);              // Enable the SPI system by clearing the power save register SPI disable bit
    125c:	80 91 64 00 	lds	r24, 0x0064
    1260:	8b 7f       	andi	r24, 0xFB	; 251
    1262:	80 93 64 00 	sts	0x0064, r24

	// Master, Sample falling edge (setup rising), Fosc/2 speed (8Mhz/2 = 4MHz)
	SPSR = (1 << SPI2X);
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	8d bd       	out	0x2d, r24	; 45
	SPCR = ((1 << SPE) | (1 << MSTR) | (1 << CPHA) | (1 << CPOL));
    126a:	8c e5       	ldi	r24, 0x5C	; 92
    126c:	8c bd       	out	0x2c, r24	; 44
    126e:	08 95       	ret

00001270 <SPI_SPITransmit>:
}

uint8_t SPI_SPITransmit(const uint8_t Data)
{
	SPDR = Data;                       // Loading a byte into the register starts the transmission
    1270:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));    // Wait until transmission completed
    1272:	0d b4       	in	r0, 0x2d	; 45
    1274:	07 fe       	sbrs	r0, 7
    1276:	fd cf       	rjmp	.-6      	; 0x1272 <SPI_SPITransmit+0x2>
	return SPDR;
    1278:	8e b5       	in	r24, 0x2e	; 46
}
    127a:	99 27       	eor	r25, r25
    127c:	08 95       	ret

0000127e <SPI_SPITransmitWord>:

uint8_t SPI_SPITransmitWord(const uint16_t Data)
{
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	8c 01       	movw	r16, r24
	SPI_SPITransmit((uint8_t)(Data >> 8));
    1284:	81 2f       	mov	r24, r17
    1286:	99 27       	eor	r25, r25
    1288:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
	return SPI_SPITransmit((uint8_t)Data);
    128c:	80 2f       	mov	r24, r16
    128e:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
}
    1292:	99 27       	eor	r25, r25
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	08 95       	ret

0000129a <__vector_17>:
 *  have to stop the timer tick.
 *  For all modes the USIDR contents are stored and flags are updated.
 */
ISR(USI_OVERFLOW_vect, ISR_BLOCK)
{
    129a:	1f 92       	push	r1
    129c:	0f 92       	push	r0
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	0f 92       	push	r0
    12a2:	11 24       	eor	r1, r1
    12a4:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	TIMSK0 &= ~(1<<OCIE0A);
    12a6:	80 91 6e 00 	lds	r24, 0x006E
    12aa:	8d 7f       	andi	r24, 0xFD	; 253
    12ac:	80 93 6e 00 	sts	0x006E, r24
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
    12b0:	80 e4       	ldi	r24, 0x40	; 64
    12b2:	80 93 b9 00 	sts	0x00B9, r24
	TransferComplete = 1;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 93 63 02 	sts	0x0263, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
    12bc:	80 91 ba 00 	lds	r24, 0x00BA
    12c0:	80 93 64 02 	sts	0x0264, r24
    12c4:	8f 91       	pop	r24
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <USI_SPISetSpeed>:
}



/*! \brief  Initialize USI as SPI master.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from slave to master mode.
 *  Note that the stored USIDR value is cleared.
 *
 */
void USI_SPIInitMaster(const uint8_t Freq)
{
	// Configure port directions.
 	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN);  // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                       // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                        // Pull-ups.
	USI_OUT_REG &= ~(1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Pull-ups.
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = USI_CONTROL_REG_FLAGS;

	// Set the compare and prescaler for the requested frequency:
	USI_SPISetSpeed(Freq);
	
	// Init driver status register.
	TransferComplete = 0;
	
	storedUSIDR = 0;
}

void USI_SPIOff(void)
{
	USI_DIR_REG &= ~((1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN));                        // Inputs.
	USI_OUT_REG &= ~((1<<USI_DATAIN_PIN)  | (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN)); // Pull-ups.
	DDRF  &= ~(1 << 6);
	PORTF &= ~(1 << 6);
	
	USI_STOPUSITIMER();
}

/*! \brief  Put one byte on bus.
 *
 *  Use this function like you would write to the SPDR register in the native SPI module.
 *  Calling this function in master mode starts a transfer, while in slave mode, a
 *  byte will be prepared for the next transfer initiated by the master device.
 *  If a transfer is in progress, this function will set the write collision flag
 *  and return without altering the data registers.
 *
 *  \returns  Value returned by slave.
 */
uint8_t USI_SPITransmit(uint8_t val)
{
	// Reinit flags.
	TransferComplete = 0;

	// Put data in USI data register.
	USIDR = val;
	
	TIFR0  |= (1<<OCF0A);  // Clear compare match flag.
	TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.

	// Clear the timer 0 value
	TCNT0 = 0;

	while (!(TransferComplete));

	return storedUSIDR;
}

uint8_t USI_SPITransmitWord(const uint16_t val )
{
	USI_SPITransmit((uint8_t)(val >> 8));
	return USI_SPITransmit((uint8_t)val);
}

void USI_SPIToggleClock(void)
{
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);	
}

void USI_SPISetSpeed(const uint8_t Freq)
{
    12d0:	48 2f       	mov	r20, r24
	for (uint8_t MatchIndex = 0; MatchIndex < USI_PRESET_SPEEDS; MatchIndex++)
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	69 e7       	ldi	r22, 0x79	; 121
    12d6:	73 e0       	ldi	r23, 0x03	; 3
    12d8:	9b 01       	movw	r18, r22
    12da:	21 50       	subi	r18, 0x01	; 1
    12dc:	30 40       	sbci	r19, 0x00	; 0
	{
		if ((pgm_read_byte(&USIPSValues[MatchIndex][0]) == Freq) || (MatchIndex == (USI_PRESET_SPEEDS - 1)))
    12de:	f9 01       	movw	r30, r18
    12e0:	84 91       	lpm	r24, Z
    12e2:	84 17       	cp	r24, r20
    12e4:	11 f0       	breq	.+4      	; 0x12ea <USI_SPISetSpeed+0x1a>
    12e6:	93 30       	cpi	r25, 0x03	; 3
    12e8:	31 f4       	brne	.+12     	; 0x12f6 <USI_SPISetSpeed+0x26>
		{
			// Init Output Compare Register.
			OCR0A = pgm_read_byte(&USIPSValues[MatchIndex][1]);
    12ea:	fb 01       	movw	r30, r22
    12ec:	84 91       	lpm	r24, Z
    12ee:	87 bd       	out	0x27, r24	; 39

			// Enable 'Clear Timer on Compare match' and set prescaler, which starts the timer
			TCCR0A = ((1<<WGM01) | TC0_PS_1);
    12f0:	89 e0       	ldi	r24, 0x09	; 9
    12f2:	84 bd       	out	0x24, r24	; 36
				
			return;
    12f4:	08 95       	ret
    12f6:	9f 5f       	subi	r25, 0xFF	; 255
    12f8:	2e 5f       	subi	r18, 0xFE	; 254
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	6e 5f       	subi	r22, 0xFE	; 254
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	94 30       	cpi	r25, 0x04	; 4
    1302:	68 f3       	brcs	.-38     	; 0x12de <USI_SPISetSpeed+0xe>
    1304:	08 95       	ret

00001306 <USI_SPIInitMaster>:
    1306:	9d b1       	in	r25, 0x0d	; 13
    1308:	90 65       	ori	r25, 0x50	; 80
    130a:	9d b9       	out	0x0d, r25	; 13
    130c:	6d 98       	cbi	0x0d, 5	; 13
    130e:	75 9a       	sbi	0x0e, 5	; 14
    1310:	76 98       	cbi	0x0e, 6	; 14
    1312:	9a e5       	ldi	r25, 0x5A	; 90
    1314:	90 93 b8 00 	sts	0x00B8, r25
    1318:	0e 94 68 09 	call	0x12d0 <USI_SPISetSpeed>
    131c:	10 92 63 02 	sts	0x0263, r1
    1320:	10 92 64 02 	sts	0x0264, r1
    1324:	08 95       	ret

00001326 <USI_SPIOff>:
    1326:	8d b1       	in	r24, 0x0d	; 13
    1328:	8f 7a       	andi	r24, 0xAF	; 175
    132a:	8d b9       	out	0x0d, r24	; 13
    132c:	8e b1       	in	r24, 0x0e	; 14
    132e:	8f 78       	andi	r24, 0x8F	; 143
    1330:	8e b9       	out	0x0e, r24	; 14
    1332:	86 98       	cbi	0x10, 6	; 16
    1334:	8e 98       	cbi	0x11, 6	; 17
    1336:	14 bc       	out	0x24, r1	; 36
    1338:	08 95       	ret

0000133a <USI_SPITransmit>:
    133a:	10 92 63 02 	sts	0x0263, r1
    133e:	80 93 ba 00 	sts	0x00BA, r24
    1342:	a9 9a       	sbi	0x15, 1	; 21
    1344:	80 91 6e 00 	lds	r24, 0x006E
    1348:	82 60       	ori	r24, 0x02	; 2
    134a:	80 93 6e 00 	sts	0x006E, r24
    134e:	16 bc       	out	0x26, r1	; 38
    1350:	80 91 63 02 	lds	r24, 0x0263
    1354:	88 23       	and	r24, r24
    1356:	e1 f3       	breq	.-8      	; 0x1350 <USI_SPITransmit+0x16>
    1358:	80 91 64 02 	lds	r24, 0x0264
    135c:	99 27       	eor	r25, r25
    135e:	08 95       	ret

00001360 <USI_SPITransmitWord>:
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	8c 01       	movw	r16, r24
    1366:	81 2f       	mov	r24, r17
    1368:	99 27       	eor	r25, r25
    136a:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    136e:	80 2f       	mov	r24, r16
    1370:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    1374:	99 27       	eor	r25, r25
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	08 95       	ret

0000137c <USI_SPIToggleClock>:
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    1382:	80 91 b8 00 	lds	r24, 0x00B8
    1386:	81 60       	ori	r24, 0x01	; 1
    1388:	80 93 b8 00 	sts	0x00B8, r24
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    1392:	80 91 b8 00 	lds	r24, 0x00B8
    1396:	81 60       	ori	r24, 0x01	; 1
    1398:	80 93 b8 00 	sts	0x00B8, r24
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    13a2:	08 95       	ret

000013a4 <DF_EnableDataflash>:
	DF_WaitWhileBusy();
}

void DF_EnableDataflash(const uint8_t Enabled)
{
    13a4:	90 91 65 02 	lds	r25, 0x0265
	if (Enabled == TRUE)
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	31 f4       	brne	.+12     	; 0x13b8 <DF_EnableDataflash+0x14>
	{
		if (UseExernalDF == TRUE)
    13ac:	91 30       	cpi	r25, 0x01	; 1
    13ae:	11 f4       	brne	.+4      	; 0x13b4 <DF_EnableDataflash+0x10>
		  MAIN_ResetCSLine(MAIN_RESETCS_EXTDFACTIVE);
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	05 c0       	rjmp	.+10     	; 0x13be <DF_EnableDataflash+0x1a>
		else
		  PORTB &= ~(1 << 0);
    13b4:	28 98       	cbi	0x05, 0	; 5
    13b6:	08 95       	ret
	}
	else
	{
		if (UseExernalDF == TRUE)
    13b8:	91 30       	cpi	r25, 0x01	; 1
    13ba:	21 f4       	brne	.+8      	; 0x13c4 <DF_EnableDataflash+0x20>
		  MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE);
    13bc:	89 2f       	mov	r24, r25
    13be:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
    13c2:	08 95       	ret
		else
		  PORTB |= (1 << 0);
    13c4:	28 9a       	sbi	0x05, 0	; 5
    13c6:	08 95       	ret

000013c8 <DF_ReadBufferByte>:
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	8c 01       	movw	r16, r24
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    13da:	e0 91 00 01 	lds	r30, 0x0100
    13de:	f0 91 01 01 	lds	r31, 0x0101
    13e2:	84 e5       	ldi	r24, 0x54	; 84
    13e4:	09 95       	icall
    13e6:	81 2f       	mov	r24, r17
    13e8:	99 27       	eor	r25, r25
    13ea:	e0 91 00 01 	lds	r30, 0x0100
    13ee:	f0 91 01 01 	lds	r31, 0x0101
    13f2:	09 95       	icall
    13f4:	e0 91 00 01 	lds	r30, 0x0100
    13f8:	f0 91 01 01 	lds	r31, 0x0101
    13fc:	80 2f       	mov	r24, r16
    13fe:	09 95       	icall
    1400:	e0 91 00 01 	lds	r30, 0x0100
    1404:	f0 91 01 01 	lds	r31, 0x0101
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	09 95       	icall
    140c:	e0 91 00 01 	lds	r30, 0x0100
    1410:	f0 91 01 01 	lds	r31, 0x0101
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	09 95       	icall
    1418:	99 27       	eor	r25, r25
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	08 95       	ret

00001420 <DF_ContinuousReadEnable>:
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	8c 01       	movw	r16, r24
    142a:	7b 01       	movw	r14, r22
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1438:	e0 91 00 01 	lds	r30, 0x0100
    143c:	f0 91 01 01 	lds	r31, 0x0101
    1440:	88 e6       	ldi	r24, 0x68	; 104
    1442:	09 95       	icall
    1444:	8a b5       	in	r24, 0x2a	; 42
    1446:	98 01       	movw	r18, r16
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DF_ContinuousReadEnable+0x2e>
    144a:	36 95       	lsr	r19
    144c:	27 95       	ror	r18
    144e:	8a 95       	dec	r24
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DF_ContinuousReadEnable+0x2a>
    1452:	c9 01       	movw	r24, r18
    1454:	e0 91 00 01 	lds	r30, 0x0100
    1458:	f0 91 01 01 	lds	r31, 0x0101
    145c:	09 95       	icall
    145e:	8b b5       	in	r24, 0x2b	; 43
    1460:	98 01       	movw	r18, r16
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <DF_ContinuousReadEnable+0x48>
    1464:	22 0f       	add	r18, r18
    1466:	33 1f       	adc	r19, r19
    1468:	8a 95       	dec	r24
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <DF_ContinuousReadEnable+0x44>
    146c:	8f 2d       	mov	r24, r15
    146e:	99 27       	eor	r25, r25
    1470:	e0 91 00 01 	lds	r30, 0x0100
    1474:	f0 91 01 01 	lds	r31, 0x0101
    1478:	82 0f       	add	r24, r18
    147a:	09 95       	icall
    147c:	e0 91 00 01 	lds	r30, 0x0100
    1480:	f0 91 01 01 	lds	r31, 0x0101
    1484:	8e 2d       	mov	r24, r14
    1486:	09 95       	icall
    1488:	03 e0       	ldi	r16, 0x03	; 3
    148a:	e0 91 00 01 	lds	r30, 0x0100
    148e:	f0 91 01 01 	lds	r31, 0x0101
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	09 95       	icall
    1496:	01 50       	subi	r16, 0x01	; 1
    1498:	07 ff       	sbrs	r16, 7
    149a:	f7 cf       	rjmp	.-18     	; 0x148a <DF_ContinuousReadEnable+0x6a>
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	ff 90       	pop	r15
    14a2:	ef 90       	pop	r14
    14a4:	08 95       	ret

000014a6 <DF_BufferWriteEnable>:
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	8c 01       	movw	r16, r24
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    14b8:	e0 91 00 01 	lds	r30, 0x0100
    14bc:	f0 91 01 01 	lds	r31, 0x0101
    14c0:	84 e8       	ldi	r24, 0x84	; 132
    14c2:	09 95       	icall
    14c4:	e0 91 00 01 	lds	r30, 0x0100
    14c8:	f0 91 01 01 	lds	r31, 0x0101
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	09 95       	icall
    14d0:	81 2f       	mov	r24, r17
    14d2:	99 27       	eor	r25, r25
    14d4:	e0 91 00 01 	lds	r30, 0x0100
    14d8:	f0 91 01 01 	lds	r31, 0x0101
    14dc:	09 95       	icall
    14de:	e0 91 00 01 	lds	r30, 0x0100
    14e2:	f0 91 01 01 	lds	r31, 0x0101
    14e6:	80 2f       	mov	r24, r16
    14e8:	09 95       	icall
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	08 95       	ret

000014f0 <DF_WaitWhileBusy>:
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    14fc:	e0 91 00 01 	lds	r30, 0x0100
    1500:	f0 91 01 01 	lds	r31, 0x0101
    1504:	87 e5       	ldi	r24, 0x57	; 87
    1506:	09 95       	icall
    1508:	e0 91 00 01 	lds	r30, 0x0100
    150c:	f0 91 01 01 	lds	r31, 0x0101
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	09 95       	icall
    1514:	88 23       	and	r24, r24
    1516:	c4 f7       	brge	.-16     	; 0x1508 <DF_WaitWhileBusy+0x18>
    1518:	08 95       	ret

0000151a <DF_EraseBlock>:
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	8c 01       	movw	r16, r24
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    152c:	e0 91 00 01 	lds	r30, 0x0100
    1530:	f0 91 01 01 	lds	r31, 0x0101
    1534:	80 e5       	ldi	r24, 0x50	; 80
    1536:	09 95       	icall
    1538:	81 2f       	mov	r24, r17
    153a:	99 27       	eor	r25, r25
    153c:	e0 91 00 01 	lds	r30, 0x0100
    1540:	f0 91 01 01 	lds	r31, 0x0101
    1544:	09 95       	icall
    1546:	e0 91 00 01 	lds	r30, 0x0100
    154a:	f0 91 01 01 	lds	r31, 0x0101
    154e:	80 2f       	mov	r24, r16
    1550:	09 95       	icall
    1552:	e0 91 00 01 	lds	r30, 0x0100
    1556:	f0 91 01 01 	lds	r31, 0x0101
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	09 95       	icall
    155e:	0e 94 78 0a 	call	0x14f0 <DF_WaitWhileBusy>
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	08 95       	ret

00001568 <DF_CopyFlashPageToBuffer>:
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	8c 01       	movw	r16, r24
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    157a:	e0 91 00 01 	lds	r30, 0x0100
    157e:	f0 91 01 01 	lds	r31, 0x0101
    1582:	83 e5       	ldi	r24, 0x53	; 83
    1584:	09 95       	icall
    1586:	8a b5       	in	r24, 0x2a	; 42
    1588:	98 01       	movw	r18, r16
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DF_CopyFlashPageToBuffer+0x28>
    158c:	36 95       	lsr	r19
    158e:	27 95       	ror	r18
    1590:	8a 95       	dec	r24
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DF_CopyFlashPageToBuffer+0x24>
    1594:	c9 01       	movw	r24, r18
    1596:	e0 91 00 01 	lds	r30, 0x0100
    159a:	f0 91 01 01 	lds	r31, 0x0101
    159e:	09 95       	icall
    15a0:	8b b5       	in	r24, 0x2b	; 43
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DF_CopyFlashPageToBuffer+0x40>
    15a4:	00 0f       	add	r16, r16
    15a6:	11 1f       	adc	r17, r17
    15a8:	8a 95       	dec	r24
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DF_CopyFlashPageToBuffer+0x3c>
    15ac:	c8 01       	movw	r24, r16
    15ae:	e0 91 00 01 	lds	r30, 0x0100
    15b2:	f0 91 01 01 	lds	r31, 0x0101
    15b6:	09 95       	icall
    15b8:	e0 91 00 01 	lds	r30, 0x0100
    15bc:	f0 91 01 01 	lds	r31, 0x0101
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	09 95       	icall
    15c4:	0e 94 78 0a 	call	0x14f0 <DF_WaitWhileBusy>
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	08 95       	ret

000015ce <DF_CopyBufferToFlashPage>:
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	8c 01       	movw	r16, r24
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    15e0:	e0 91 00 01 	lds	r30, 0x0100
    15e4:	f0 91 01 01 	lds	r31, 0x0101
    15e8:	83 e8       	ldi	r24, 0x83	; 131
    15ea:	09 95       	icall
    15ec:	8a b5       	in	r24, 0x2a	; 42
    15ee:	98 01       	movw	r18, r16
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DF_CopyBufferToFlashPage+0x28>
    15f2:	36 95       	lsr	r19
    15f4:	27 95       	ror	r18
    15f6:	8a 95       	dec	r24
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <DF_CopyBufferToFlashPage+0x24>
    15fa:	c9 01       	movw	r24, r18
    15fc:	e0 91 00 01 	lds	r30, 0x0100
    1600:	f0 91 01 01 	lds	r31, 0x0101
    1604:	09 95       	icall
    1606:	8b b5       	in	r24, 0x2b	; 43
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DF_CopyBufferToFlashPage+0x40>
    160a:	00 0f       	add	r16, r16
    160c:	11 1f       	adc	r17, r17
    160e:	8a 95       	dec	r24
    1610:	e2 f7       	brpl	.-8      	; 0x160a <DF_CopyBufferToFlashPage+0x3c>
    1612:	c8 01       	movw	r24, r16
    1614:	e0 91 00 01 	lds	r30, 0x0100
    1618:	f0 91 01 01 	lds	r31, 0x0101
    161c:	09 95       	icall
    161e:	e0 91 00 01 	lds	r30, 0x0100
    1622:	f0 91 01 01 	lds	r31, 0x0101
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	09 95       	icall
    162a:	0e 94 78 0a 	call	0x14f0 <DF_WaitWhileBusy>
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	08 95       	ret

00001634 <DF_GetChipCharacteristics>:
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1640:	e0 91 00 01 	lds	r30, 0x0100
    1644:	f0 91 01 01 	lds	r31, 0x0101
    1648:	87 e5       	ldi	r24, 0x57	; 87
    164a:	09 95       	icall
    164c:	e0 91 00 01 	lds	r30, 0x0100
    1650:	f0 91 01 01 	lds	r31, 0x0101
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	09 95       	icall
    1658:	99 27       	eor	r25, r25
    165a:	88 73       	andi	r24, 0x38	; 56
    165c:	90 70       	andi	r25, 0x00	; 0
    165e:	43 e0       	ldi	r20, 0x03	; 3
    1660:	95 95       	asr	r25
    1662:	87 95       	ror	r24
    1664:	4a 95       	dec	r20
    1666:	e1 f7       	brne	.-8      	; 0x1660 <DF_GetChipCharacteristics+0x2c>
    1668:	99 27       	eor	r25, r25
    166a:	fc 01       	movw	r30, r24
    166c:	e0 55       	subi	r30, 0x50	; 80
    166e:	fc 4f       	sbci	r31, 0xFC	; 252
    1670:	44 91       	lpm	r20, Z
    1672:	40 93 68 02 	sts	0x0268, r20
    1676:	9c 01       	movw	r18, r24
    1678:	28 0f       	add	r18, r24
    167a:	39 1f       	adc	r19, r25
    167c:	f9 01       	movw	r30, r18
    167e:	e0 56       	subi	r30, 0x60	; 96
    1680:	fc 4f       	sbci	r31, 0xFC	; 252
    1682:	85 91       	lpm	r24, Z+
    1684:	94 91       	lpm	r25, Z
    1686:	90 93 6a 02 	sts	0x026A, r25
    168a:	80 93 69 02 	sts	0x0269, r24
    168e:	f9 01       	movw	r30, r18
    1690:	e0 57       	subi	r30, 0x70	; 112
    1692:	fc 4f       	sbci	r31, 0xFC	; 252
    1694:	85 91       	lpm	r24, Z+
    1696:	94 91       	lpm	r25, Z
    1698:	90 93 6c 02 	sts	0x026C, r25
    169c:	80 93 6b 02 	sts	0x026B, r24
    16a0:	80 e1       	ldi	r24, 0x10	; 16
    16a2:	84 1b       	sub	r24, r20
    16a4:	8a bd       	out	0x2a, r24	; 42
    16a6:	48 50       	subi	r20, 0x08	; 8
    16a8:	4b bd       	out	0x2b, r20	; 43
    16aa:	08 95       	ret

000016ac <DF_CheckCorrectOnboardChip>:
    16ac:	0e 94 1a 0b 	call	0x1634 <DF_GetChipCharacteristics>
    16b0:	80 91 6b 02 	lds	r24, 0x026B
    16b4:	90 91 6c 02 	lds	r25, 0x026C
    16b8:	80 50       	subi	r24, 0x00	; 0
    16ba:	98 40       	sbci	r25, 0x08	; 8
    16bc:	61 f0       	breq	.+24     	; 0x16d6 <DF_CheckCorrectOnboardChip+0x2a>
    16be:	80 91 64 00 	lds	r24, 0x0064
    16c2:	84 60       	ori	r24, 0x04	; 4
    16c4:	80 93 64 00 	sts	0x0064, r24
    16c8:	80 e8       	ldi	r24, 0x80	; 128
    16ca:	93 e0       	ldi	r25, 0x03	; 3
    16cc:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	08 95       	ret
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	08 95       	ret

000016dc <__vector_13>:

// ======================================================================================

ISR(USART0_RX_vect, ISR_BLOCK)
{
    16dc:	1f 92       	push	r1
    16de:	0f 92       	push	r0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	0f 92       	push	r0
    16e4:	11 24       	eor	r1, r1
    16e6:	2f 93       	push	r18
    16e8:	3f 93       	push	r19
    16ea:	4f 93       	push	r20
    16ec:	5f 93       	push	r21
    16ee:	6f 93       	push	r22
    16f0:	7f 93       	push	r23
    16f2:	8f 93       	push	r24
    16f4:	9f 93       	push	r25
    16f6:	af 93       	push	r26
    16f8:	bf 93       	push	r27
    16fa:	ef 93       	push	r30
    16fc:	ff 93       	push	r31
	if (BuffElements == BuffLen)          // Buffer full
    16fe:	80 91 b3 02 	lds	r24, 0x02B3
    1702:	80 34       	cpi	r24, 0x40	; 64
    1704:	29 f4       	brne	.+10     	; 0x1710 <__vector_13+0x34>
	{
		MAIN_ShowError(PSTR("BUFF OVERFLOW"));
    1706:	88 eb       	ldi	r24, 0xB8	; 184
    1708:	93 e0       	ldi	r25, 0x03	; 3
    170a:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
		return;
    170e:	20 c0       	rjmp	.+64     	; 0x1750 <__vector_13+0x74>
	}
		
	*StoreLoc = UDR;                      // Store the data
    1710:	e0 91 af 02 	lds	r30, 0x02AF
    1714:	f0 91 b0 02 	lds	r31, 0x02B0
    1718:	80 91 c6 00 	lds	r24, 0x00C6
    171c:	80 83       	st	Z, r24

	StoreLoc++;                           // Increment the IN pointer to the next element
    171e:	40 91 af 02 	lds	r20, 0x02AF
    1722:	50 91 b0 02 	lds	r21, 0x02B0
    1726:	9a 01       	movw	r18, r20
    1728:	2f 5f       	subi	r18, 0xFF	; 255
    172a:	3f 4f       	sbci	r19, 0xFF	; 255
    172c:	30 93 b0 02 	sts	0x02B0, r19
    1730:	20 93 af 02 	sts	0x02AF, r18
	BuffElements++;                       // Increment the total elements variable
    1734:	80 91 b3 02 	lds	r24, 0x02B3
    1738:	8f 5f       	subi	r24, 0xFF	; 255
    173a:	80 93 b3 02 	sts	0x02B3, r24

	if (StoreLoc == (BuffType*)&RingBuffer[BuffLen])
    173e:	2f 5a       	subi	r18, 0xAF	; 175
    1740:	32 40       	sbci	r19, 0x02	; 2
    1742:	31 f4       	brne	.+12     	; 0x1750 <__vector_13+0x74>
		StoreLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    1744:	4f 53       	subi	r20, 0x3F	; 63
    1746:	50 40       	sbci	r21, 0x00	; 0
    1748:	50 93 b0 02 	sts	0x02B0, r21
    174c:	40 93 af 02 	sts	0x02AF, r20
    1750:	ff 91       	pop	r31
    1752:	ef 91       	pop	r30
    1754:	bf 91       	pop	r27
    1756:	af 91       	pop	r26
    1758:	9f 91       	pop	r25
    175a:	8f 91       	pop	r24
    175c:	7f 91       	pop	r23
    175e:	6f 91       	pop	r22
    1760:	5f 91       	pop	r21
    1762:	4f 91       	pop	r20
    1764:	3f 91       	pop	r19
    1766:	2f 91       	pop	r18
    1768:	0f 90       	pop	r0
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	0f 90       	pop	r0
    176e:	1f 90       	pop	r1
    1770:	18 95       	reti

00001772 <BUFF_InitialiseBuffer>:
}	

// ======================================================================================

void BUFF_InitialiseBuffer(void)
{
	StoreLoc    = (BuffType*)&RingBuffer[0]; // Set up the IN pointer to the start of the buffer
    1772:	8f e6       	ldi	r24, 0x6F	; 111
    1774:	92 e0       	ldi	r25, 0x02	; 2
    1776:	90 93 b0 02 	sts	0x02B0, r25
    177a:	80 93 af 02 	sts	0x02AF, r24
	RetrieveLoc = (BuffType*)&RingBuffer[0]; // Set up the OUT pointer to the start of the buffer
    177e:	90 93 b2 02 	sts	0x02B2, r25
    1782:	80 93 b1 02 	sts	0x02B1, r24

	BuffElements = 0;                     // Reset the buffer elements counter
    1786:	10 92 b3 02 	sts	0x02B3, r1
    178a:	08 95       	ret

0000178c <BUFF_GetBuffByte>:
}

BuffType BUFF_GetBuffByte(void)
{
	if (!(BuffElements))                  // No elements in the buffer
    178c:	80 91 b3 02 	lds	r24, 0x02B3
    1790:	88 23       	and	r24, r24
    1792:	19 f4       	brne	.+6      	; 0x179a <BUFF_GetBuffByte+0xe>
		return 0;
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	08 95       	ret

	BuffType RetrievedData = *RetrieveLoc; // Grab the stored byte into a temp variable
    179a:	20 91 b1 02 	lds	r18, 0x02B1
    179e:	30 91 b2 02 	lds	r19, 0x02B2
    17a2:	f9 01       	movw	r30, r18
    17a4:	91 91       	ld	r25, Z+

	RetrieveLoc++;                         // Increment the OUT pointer to the next element if flag set
    17a6:	f0 93 b2 02 	sts	0x02B2, r31
    17aa:	e0 93 b1 02 	sts	0x02B1, r30
	BuffElements--;                        // Decrement the total elements variable
    17ae:	80 91 b3 02 	lds	r24, 0x02B3
    17b2:	81 50       	subi	r24, 0x01	; 1
    17b4:	80 93 b3 02 	sts	0x02B3, r24
	
	if (RetrieveLoc == (BuffType*)&RingBuffer[BuffLen])
    17b8:	ef 5a       	subi	r30, 0xAF	; 175
    17ba:	f2 40       	sbci	r31, 0x02	; 2
    17bc:	31 f4       	brne	.+12     	; 0x17ca <BUFF_GetBuffByte+0x3e>
		RetrieveLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    17be:	2f 53       	subi	r18, 0x3F	; 63
    17c0:	30 40       	sbci	r19, 0x00	; 0
    17c2:	30 93 b2 02 	sts	0x02B2, r19
    17c6:	20 93 b1 02 	sts	0x02B1, r18
		
	return RetrievedData;                 // Return the retrieved data
    17ca:	89 2f       	mov	r24, r25
    17cc:	99 27       	eor	r25, r25
}
    17ce:	08 95       	ret

000017d0 <__vector_4>:
// ======================================================================================

// Packet Timeout = ((F_CPU / 1024) / (240 * TIMEOUT_TICKSBEFORETIMEOUT)) per second
ISR(TIMER2_COMP_vect, ISR_NOBLOCK)
{
    17d0:	78 94       	sei
    17d2:	1f 92       	push	r1
    17d4:	0f 92       	push	r0
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	0f 92       	push	r0
    17da:	11 24       	eor	r1, r1
    17dc:	8f 93       	push	r24
	if (PacketTimeOutTicks++ == TIMEOUT_PACKET_TIMEOUTTICKS)
    17de:	80 91 40 01 	lds	r24, 0x0140
    17e2:	8f 5f       	subi	r24, 0xFF	; 255
    17e4:	80 93 40 01 	sts	0x0140, r24
    17e8:	80 91 40 01 	lds	r24, 0x0140
    17ec:	87 39       	cpi	r24, 0x97	; 151
    17ee:	29 f4       	brne	.+10     	; 0x17fa <__vector_4+0x2a>
	{
		PacketTimeOutTicks   = 0;
    17f0:	10 92 40 01 	sts	0x0140, r1
		PacketTimeOut        = TRUE;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	80 93 3f 01 	sts	0x013F, r24
    17fa:	8f 91       	pop	r24
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	0f 90       	pop	r0
    1802:	1f 90       	pop	r1
    1804:	18 95       	reti

00001806 <TOUT_SetupSleepTimer>:
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    1806:	a7 e8       	ldi	r26, 0x87	; 135
    1808:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    180a:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
    180e:	80 2d       	mov	r24, r0
    1810:	28 2f       	mov	r18, r24
	}
}

// Autosleep Timeout = (TIMEOUT_TICKSBEFORETIMEOUT / 10) secs between timeouts
ISR(TIMER1_OVF_vect, ISR_NOBLOCK)
{
	if (SleepTimeOutTicks++ == TicksBeforeAutoSleep)
	{
		TIMEOUT_SLEEP_TIMER_OFF();
		FUNCSleepMode();
		TOUT_SetupSleepTimer();
	}
}

// ======================================================================================

void TOUT_SetupSleepTimer(void)
{
	uint8_t NewTicksIndex = eeprom_read_byte(&EEPROMVars.AutoSleepValIndex);

	if (NewTicksIndex == 0xFF)
    1812:	8f 3f       	cpi	r24, 0xFF	; 255
    1814:	09 f4       	brne	.+2      	; 0x1818 <TOUT_SetupSleepTimer+0x12>
	  NewTicksIndex = 4;
    1816:	24 e0       	ldi	r18, 0x04	; 4

	TIMSK1 = (1 << TOIE1);
    1818:	31 e0       	ldi	r19, 0x01	; 1
    181a:	30 93 6f 00 	sts	0x006F, r19
	TicksBeforeAutoSleep = pgm_read_word(&AutoSleepTOTicks[NewTicksIndex]);
    181e:	e2 2f       	mov	r30, r18
    1820:	ff 27       	eor	r31, r31
    1822:	ee 0f       	add	r30, r30
    1824:	ff 1f       	adc	r31, r31
    1826:	e5 53       	subi	r30, 0x35	; 53
    1828:	fc 4f       	sbci	r31, 0xFC	; 252
    182a:	85 91       	lpm	r24, Z+
    182c:	94 91       	lpm	r25, Z
    182e:	90 93 3c 01 	sts	0x013C, r25
    1832:	80 93 3b 01 	sts	0x013B, r24

	TIMEOUT_SLEEP_TIMEOUT_RESET();
    1836:	10 92 3e 01 	sts	0x013E, r1
    183a:	10 92 3d 01 	sts	0x013D, r1
    183e:	10 92 85 00 	sts	0x0085, r1
    1842:	10 92 84 00 	sts	0x0084, r1
	
	if (NewTicksIndex)
    1846:	22 23       	and	r18, r18
    1848:	19 f0       	breq	.+6      	; 0x1850 <TOUT_SetupSleepTimer+0x4a>
	  TIMEOUT_SLEEP_TIMER_ON();
    184a:	30 93 81 00 	sts	0x0081, r19
    184e:	08 95       	ret
	else
	  TIMEOUT_SLEEP_TIMER_OFF();
    1850:	20 93 81 00 	sts	0x0081, r18
    1854:	08 95       	ret

00001856 <__vector_9>:
    1856:	78 94       	sei
    1858:	1f 92       	push	r1
    185a:	0f 92       	push	r0
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	0f 92       	push	r0
    1860:	11 24       	eor	r1, r1
    1862:	2f 93       	push	r18
    1864:	3f 93       	push	r19
    1866:	4f 93       	push	r20
    1868:	5f 93       	push	r21
    186a:	6f 93       	push	r22
    186c:	7f 93       	push	r23
    186e:	8f 93       	push	r24
    1870:	9f 93       	push	r25
    1872:	af 93       	push	r26
    1874:	bf 93       	push	r27
    1876:	ef 93       	push	r30
    1878:	ff 93       	push	r31
    187a:	80 91 3d 01 	lds	r24, 0x013D
    187e:	90 91 3e 01 	lds	r25, 0x013E
    1882:	9c 01       	movw	r18, r24
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	90 93 3e 01 	sts	0x013E, r25
    188a:	80 93 3d 01 	sts	0x013D, r24
    188e:	80 91 3b 01 	lds	r24, 0x013B
    1892:	90 91 3c 01 	lds	r25, 0x013C
    1896:	28 17       	cp	r18, r24
    1898:	39 07       	cpc	r19, r25
    189a:	31 f4       	brne	.+12     	; 0x18a8 <__vector_9+0x52>
    189c:	10 92 81 00 	sts	0x0081, r1
    18a0:	0e 94 0e 07 	call	0xe1c <FUNCSleepMode>
    18a4:	0e 94 03 0c 	call	0x1806 <TOUT_SetupSleepTimer>
    18a8:	ff 91       	pop	r31
    18aa:	ef 91       	pop	r30
    18ac:	bf 91       	pop	r27
    18ae:	af 91       	pop	r26
    18b0:	9f 91       	pop	r25
    18b2:	8f 91       	pop	r24
    18b4:	7f 91       	pop	r23
    18b6:	6f 91       	pop	r22
    18b8:	5f 91       	pop	r21
    18ba:	4f 91       	pop	r20
    18bc:	3f 91       	pop	r19
    18be:	2f 91       	pop	r18
    18c0:	0f 90       	pop	r0
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	0f 90       	pop	r0
    18c6:	1f 90       	pop	r1
    18c8:	18 95       	reti

000018ca <PD_SetupDFAddressCounters>:
}

void PD_SetupDFAddressCounters(void)
{
	uint32_t StartAddress = CurrAddress;
    18ca:	20 91 42 01 	lds	r18, 0x0142
    18ce:	30 91 43 01 	lds	r19, 0x0143
    18d2:	40 91 44 01 	lds	r20, 0x0144
    18d6:	50 91 45 01 	lds	r21, 0x0145

	CurrPageAddress = 0;
    18da:	10 92 6e 02 	sts	0x026E, r1
    18de:	10 92 6d 02 	sts	0x026D, r1

	while (StartAddress > DataflashInfo.PageSize)      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DataflashInfo.PageSize;         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    18e2:	80 91 69 02 	lds	r24, 0x0269
    18e6:	90 91 6a 02 	lds	r25, 0x026A
    18ea:	aa 27       	eor	r26, r26
    18ec:	bb 27       	eor	r27, r27
    18ee:	82 17       	cp	r24, r18
    18f0:	93 07       	cpc	r25, r19
    18f2:	a4 07       	cpc	r26, r20
    18f4:	b5 07       	cpc	r27, r21
    18f6:	88 f4       	brcc	.+34     	; 0x191a <PD_SetupDFAddressCounters+0x50>
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	28 1b       	sub	r18, r24
    18fe:	39 0b       	sbc	r19, r25
    1900:	4a 0b       	sbc	r20, r26
    1902:	5b 0b       	sbc	r21, r27
    1904:	6f 5f       	subi	r22, 0xFF	; 255
    1906:	7f 4f       	sbci	r23, 0xFF	; 255
    1908:	82 17       	cp	r24, r18
    190a:	93 07       	cpc	r25, r19
    190c:	a4 07       	cpc	r26, r20
    190e:	b5 07       	cpc	r27, r21
    1910:	a8 f3       	brcs	.-22     	; 0x18fc <PD_SetupDFAddressCounters+0x32>
    1912:	70 93 6e 02 	sts	0x026E, r23
    1916:	60 93 6d 02 	sts	0x026D, r22
	}
	
	CurrBuffByte = (uint16_t)StartAddress;              // The buffer byte is the remainder
    191a:	30 93 67 02 	sts	0x0267, r19
    191e:	20 93 66 02 	sts	0x0266, r18
    1922:	08 95       	ret

00001924 <PD_StoreDataflashByte>:
}

void PD_StoreDataflashByte(const uint8_t Data)
{
    1924:	cf 93       	push	r28
    1926:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DataflashInfo.PageSize)
    1928:	20 91 66 02 	lds	r18, 0x0266
    192c:	30 91 67 02 	lds	r19, 0x0267
    1930:	80 91 69 02 	lds	r24, 0x0269
    1934:	90 91 6a 02 	lds	r25, 0x026A
    1938:	28 17       	cp	r18, r24
    193a:	39 07       	cpc	r19, r25
    193c:	a9 f4       	brne	.+42     	; 0x1968 <PD_StoreDataflashByte+0x44>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    193e:	80 91 6d 02 	lds	r24, 0x026D
    1942:	90 91 6e 02 	lds	r25, 0x026E
    1946:	9c 01       	movw	r18, r24
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	90 93 6e 02 	sts	0x026E, r25
    194e:	80 93 6d 02 	sts	0x026D, r24
    1952:	c9 01       	movw	r24, r18
    1954:	0e 94 e7 0a 	call	0x15ce <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 53 0a 	call	0x14a6 <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    1960:	10 92 67 02 	sts	0x0267, r1
    1964:	10 92 66 02 	sts	0x0266, r1
	}
	
	USI_SPITransmit(Data);                                 // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    1968:	8c 2f       	mov	r24, r28
    196a:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
	CurrBuffByte++;
    196e:	80 91 66 02 	lds	r24, 0x0266
    1972:	90 91 67 02 	lds	r25, 0x0267
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	90 93 67 02 	sts	0x0267, r25
    197c:	80 93 66 02 	sts	0x0266, r24
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <PD_InterpretAVRISPPacket>:
    1984:	df 92       	push	r13
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	dd 24       	eor	r13, r13
    1994:	80 91 4b 01 	lds	r24, 0x014B
    1998:	99 27       	eor	r25, r25
    199a:	86 31       	cpi	r24, 0x16	; 22
    199c:	91 05       	cpc	r25, r1
    199e:	09 f4       	brne	.+2      	; 0x19a2 <PD_InterpretAVRISPPacket+0x1e>
    19a0:	00 c1       	rjmp	.+512    	; 0x1ba2 <PD_InterpretAVRISPPacket+0x21e>
    19a2:	87 31       	cpi	r24, 0x17	; 23
    19a4:	91 05       	cpc	r25, r1
    19a6:	b4 f4       	brge	.+44     	; 0x19d4 <PD_InterpretAVRISPPacket+0x50>
    19a8:	82 31       	cpi	r24, 0x12	; 18
    19aa:	91 05       	cpc	r25, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <PD_InterpretAVRISPPacket+0x2c>
    19ae:	6f c0       	rjmp	.+222    	; 0x1a8e <PD_InterpretAVRISPPacket+0x10a>
    19b0:	83 31       	cpi	r24, 0x13	; 19
    19b2:	91 05       	cpc	r25, r1
    19b4:	3c f4       	brge	.+14     	; 0x19c4 <PD_InterpretAVRISPPacket+0x40>
    19b6:	80 31       	cpi	r24, 0x10	; 16
    19b8:	91 05       	cpc	r25, r1
    19ba:	31 f1       	breq	.+76     	; 0x1a08 <PD_InterpretAVRISPPacket+0x84>
    19bc:	41 97       	sbiw	r24, 0x11	; 17
    19be:	09 f4       	brne	.+2      	; 0x19c2 <PD_InterpretAVRISPPacket+0x3e>
    19c0:	46 c0       	rjmp	.+140    	; 0x1a4e <PD_InterpretAVRISPPacket+0xca>
    19c2:	40 c1       	rjmp	.+640    	; 0x1c44 <PD_InterpretAVRISPPacket+0x2c0>
    19c4:	84 31       	cpi	r24, 0x14	; 20
    19c6:	91 05       	cpc	r25, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <PD_InterpretAVRISPPacket+0x48>
    19ca:	8a c0       	rjmp	.+276    	; 0x1ae0 <PD_InterpretAVRISPPacket+0x15c>
    19cc:	45 97       	sbiw	r24, 0x15	; 21
    19ce:	0c f0       	brlt	.+2      	; 0x19d2 <PD_InterpretAVRISPPacket+0x4e>
    19d0:	af c0       	rjmp	.+350    	; 0x1b30 <PD_InterpretAVRISPPacket+0x1ac>
    19d2:	7f c0       	rjmp	.+254    	; 0x1ad2 <PD_InterpretAVRISPPacket+0x14e>
    19d4:	89 31       	cpi	r24, 0x19	; 25
    19d6:	91 05       	cpc	r25, r1
    19d8:	09 f4       	brne	.+2      	; 0x19dc <PD_InterpretAVRISPPacket+0x58>
    19da:	70 c0       	rjmp	.+224    	; 0x1abc <PD_InterpretAVRISPPacket+0x138>
    19dc:	8a 31       	cpi	r24, 0x1A	; 26
    19de:	91 05       	cpc	r25, r1
    19e0:	44 f4       	brge	.+16     	; 0x19f2 <PD_InterpretAVRISPPacket+0x6e>
    19e2:	87 31       	cpi	r24, 0x17	; 23
    19e4:	91 05       	cpc	r25, r1
    19e6:	09 f4       	brne	.+2      	; 0x19ea <PD_InterpretAVRISPPacket+0x66>
    19e8:	69 c0       	rjmp	.+210    	; 0x1abc <PD_InterpretAVRISPPacket+0x138>
    19ea:	48 97       	sbiw	r24, 0x18	; 24
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <PD_InterpretAVRISPPacket+0x6c>
    19ee:	58 c0       	rjmp	.+176    	; 0x1aa0 <PD_InterpretAVRISPPacket+0x11c>
    19f0:	29 c1       	rjmp	.+594    	; 0x1c44 <PD_InterpretAVRISPPacket+0x2c0>
    19f2:	8b 31       	cpi	r24, 0x1B	; 27
    19f4:	91 05       	cpc	r25, r1
    19f6:	e9 f1       	breq	.+122    	; 0x1a72 <PD_InterpretAVRISPPacket+0xee>
    19f8:	8b 31       	cpi	r24, 0x1B	; 27
    19fa:	91 05       	cpc	r25, r1
    19fc:	0c f4       	brge	.+2      	; 0x1a00 <PD_InterpretAVRISPPacket+0x7c>
    19fe:	50 c0       	rjmp	.+160    	; 0x1aa0 <PD_InterpretAVRISPPacket+0x11c>
    1a00:	4c 97       	sbiw	r24, 0x1c	; 28
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <PD_InterpretAVRISPPacket+0x82>
    1a04:	4d c0       	rjmp	.+154    	; 0x1aa0 <PD_InterpretAVRISPPacket+0x11c>
    1a06:	1e c1       	rjmp	.+572    	; 0x1c44 <PD_InterpretAVRISPPacket+0x2c0>
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	90 93 48 01 	sts	0x0148, r25
    1a10:	80 93 47 01 	sts	0x0147, r24
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1a1a:	0e 94 1a 0b 	call	0x1634 <DF_GetChipCharacteristics>
    1a1e:	80 91 68 02 	lds	r24, 0x0268
    1a22:	88 23       	and	r24, r24
    1a24:	59 f0       	breq	.+22     	; 0x1a3c <PD_InterpretAVRISPPacket+0xb8>
    1a26:	85 ed       	ldi	r24, 0xD5	; 213
    1a28:	93 e0       	ldi	r25, 0x03	; 3
    1a2a:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	80 93 46 01 	sts	0x0146, r24
    1a34:	81 b3       	in	r24, 0x11	; 17
    1a36:	8f 7c       	andi	r24, 0xCF	; 207
    1a38:	80 62       	ori	r24, 0x20	; 32
    1a3a:	17 c0       	rjmp	.+46     	; 0x1a6a <PD_InterpretAVRISPPacket+0xe6>
    1a3c:	80 e8       	ldi	r24, 0x80	; 128
    1a3e:	93 e0       	ldi	r25, 0x03	; 3
    1a40:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    1a44:	8d 2d       	mov	r24, r13
    1a46:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1a4a:	80 ec       	ldi	r24, 0xC0	; 192
    1a4c:	02 c1       	rjmp	.+516    	; 0x1c52 <PD_InterpretAVRISPPacket+0x2ce>
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	90 93 48 01 	sts	0x0148, r25
    1a56:	80 93 47 01 	sts	0x0147, r24
    1a5a:	d0 92 46 01 	sts	0x0146, r13
    1a5e:	8d 2d       	mov	r24, r13
    1a60:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1a64:	81 b3       	in	r24, 0x11	; 17
    1a66:	8f 7c       	andi	r24, 0xCF	; 207
    1a68:	80 61       	ori	r24, 0x10	; 16
    1a6a:	81 bb       	out	0x11, r24	; 17
    1a6c:	d0 92 4c 01 	sts	0x014C, r13
    1a70:	f2 c0       	rjmp	.+484    	; 0x1c56 <PD_InterpretAVRISPPacket+0x2d2>
    1a72:	84 e0       	ldi	r24, 0x04	; 4
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	90 93 48 01 	sts	0x0148, r25
    1a7a:	80 93 47 01 	sts	0x0147, r24
    1a7e:	d0 92 4c 01 	sts	0x014C, r13
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	80 93 4d 01 	sts	0x014D, r24
    1a88:	d0 92 4e 01 	sts	0x014E, r13
    1a8c:	e4 c0       	rjmp	.+456    	; 0x1c56 <PD_InterpretAVRISPPacket+0x2d2>
    1a8e:	82 e0       	ldi	r24, 0x02	; 2
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	90 93 48 01 	sts	0x0148, r25
    1a96:	80 93 47 01 	sts	0x0147, r24
    1a9a:	e1 e0       	ldi	r30, 0x01	; 1
    1a9c:	de 2e       	mov	r13, r30
    1a9e:	7e c0       	rjmp	.+252    	; 0x1b9c <PD_InterpretAVRISPPacket+0x218>
    1aa0:	84 e0       	ldi	r24, 0x04	; 4
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	90 93 48 01 	sts	0x0148, r25
    1aa8:	80 93 47 01 	sts	0x0147, r24
    1aac:	10 92 4c 01 	sts	0x014C, r1
    1ab0:	8f ef       	ldi	r24, 0xFF	; 255
    1ab2:	80 93 4d 01 	sts	0x014D, r24
    1ab6:	10 92 4e 01 	sts	0x014E, r1
    1aba:	cd c0       	rjmp	.+410    	; 0x1c56 <PD_InterpretAVRISPPacket+0x2d2>
    1abc:	83 e0       	ldi	r24, 0x03	; 3
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	90 93 48 01 	sts	0x0148, r25
    1ac4:	80 93 47 01 	sts	0x0147, r24
    1ac8:	10 92 4c 01 	sts	0x014C, r1
    1acc:	10 92 4d 01 	sts	0x014D, r1
    1ad0:	c2 c0       	rjmp	.+388    	; 0x1c56 <PD_InterpretAVRISPPacket+0x2d2>
    1ad2:	82 e0       	ldi	r24, 0x02	; 2
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	90 93 48 01 	sts	0x0148, r25
    1ada:	80 93 47 01 	sts	0x0147, r24
    1ade:	5e c0       	rjmp	.+188    	; 0x1b9c <PD_InterpretAVRISPPacket+0x218>
    1ae0:	80 91 4c 01 	lds	r24, 0x014C
    1ae4:	99 27       	eor	r25, r25
    1ae6:	98 2f       	mov	r25, r24
    1ae8:	88 27       	eor	r24, r24
    1aea:	20 91 4d 01 	lds	r18, 0x014D
    1aee:	33 27       	eor	r19, r19
    1af0:	82 2b       	or	r24, r18
    1af2:	93 2b       	or	r25, r19
    1af4:	03 96       	adiw	r24, 0x03	; 3
    1af6:	90 93 48 01 	sts	0x0148, r25
    1afa:	80 93 47 01 	sts	0x0147, r24
    1afe:	21 e0       	ldi	r18, 0x01	; 1
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	02 97       	sbiw	r24, 0x02	; 2
    1b04:	28 17       	cp	r18, r24
    1b06:	39 07       	cpc	r19, r25
    1b08:	48 f4       	brcc	.+18     	; 0x1b1c <PD_InterpretAVRISPPacket+0x198>
    1b0a:	4f ef       	ldi	r20, 0xFF	; 255
    1b0c:	ec e4       	ldi	r30, 0x4C	; 76
    1b0e:	f1 e0       	ldi	r31, 0x01	; 1
    1b10:	41 93       	st	Z+, r20
    1b12:	2f 5f       	subi	r18, 0xFF	; 255
    1b14:	3f 4f       	sbci	r19, 0xFF	; 255
    1b16:	28 17       	cp	r18, r24
    1b18:	39 07       	cpc	r19, r25
    1b1a:	d0 f3       	brcs	.-12     	; 0x1b10 <PD_InterpretAVRISPPacket+0x18c>
    1b1c:	10 92 4c 01 	sts	0x014C, r1
    1b20:	e0 91 47 01 	lds	r30, 0x0147
    1b24:	f0 91 48 01 	lds	r31, 0x0148
    1b28:	e6 5b       	subi	r30, 0xB6	; 182
    1b2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b2c:	10 82       	st	Z, r1
    1b2e:	93 c0       	rjmp	.+294    	; 0x1c56 <PD_InterpretAVRISPPacket+0x2d2>
    1b30:	0e 94 65 0c 	call	0x18ca <PD_SetupDFAddressCounters>
    1b34:	80 91 6d 02 	lds	r24, 0x026D
    1b38:	90 91 6e 02 	lds	r25, 0x026E
    1b3c:	0e 94 b4 0a 	call	0x1568 <DF_CopyFlashPageToBuffer>
    1b40:	80 91 66 02 	lds	r24, 0x0266
    1b44:	90 91 67 02 	lds	r25, 0x0267
    1b48:	0e 94 53 0a 	call	0x14a6 <DF_BufferWriteEnable>
    1b4c:	80 91 4c 01 	lds	r24, 0x014C
    1b50:	99 27       	eor	r25, r25
    1b52:	d8 2f       	mov	r29, r24
    1b54:	cc 27       	eor	r28, r28
    1b56:	80 91 4d 01 	lds	r24, 0x014D
    1b5a:	99 27       	eor	r25, r25
    1b5c:	c8 2b       	or	r28, r24
    1b5e:	d9 2b       	or	r29, r25
    1b60:	00 e0       	ldi	r16, 0x00	; 0
    1b62:	10 e0       	ldi	r17, 0x00	; 0
    1b64:	0c 17       	cp	r16, r28
    1b66:	1d 07       	cpc	r17, r29
    1b68:	c8 f4       	brcc	.+50     	; 0x1b9c <PD_InterpretAVRISPPacket+0x218>
    1b6a:	55 e5       	ldi	r21, 0x55	; 85
    1b6c:	e5 2e       	mov	r14, r21
    1b6e:	51 e0       	ldi	r21, 0x01	; 1
    1b70:	f5 2e       	mov	r15, r21
    1b72:	f7 01       	movw	r30, r14
    1b74:	81 91       	ld	r24, Z+
    1b76:	7f 01       	movw	r14, r30
    1b78:	0e 94 92 0c 	call	0x1924 <PD_StoreDataflashByte>
    1b7c:	80 91 66 02 	lds	r24, 0x0266
    1b80:	90 91 67 02 	lds	r25, 0x0267
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	90 93 67 02 	sts	0x0267, r25
    1b8a:	80 93 66 02 	sts	0x0266, r24
    1b8e:	0e 94 54 0f 	call	0x1ea8 <V2P_IncrementCurrAddress>
    1b92:	0f 5f       	subi	r16, 0xFF	; 255
    1b94:	1f 4f       	sbci	r17, 0xFF	; 255
    1b96:	0c 17       	cp	r16, r28
    1b98:	1d 07       	cpc	r17, r29
    1b9a:	58 f3       	brcs	.-42     	; 0x1b72 <PD_InterpretAVRISPPacket+0x1ee>
    1b9c:	10 92 4c 01 	sts	0x014C, r1
    1ba0:	5a c0       	rjmp	.+180    	; 0x1c56 <PD_InterpretAVRISPPacket+0x2d2>
    1ba2:	0e 94 65 0c 	call	0x18ca <PD_SetupDFAddressCounters>
    1ba6:	80 91 6d 02 	lds	r24, 0x026D
    1baa:	90 91 6e 02 	lds	r25, 0x026E
    1bae:	0e 94 b4 0a 	call	0x1568 <DF_CopyFlashPageToBuffer>
    1bb2:	80 91 4c 01 	lds	r24, 0x014C
    1bb6:	99 27       	eor	r25, r25
    1bb8:	d8 2f       	mov	r29, r24
    1bba:	cc 27       	eor	r28, r28
    1bbc:	80 91 4d 01 	lds	r24, 0x014D
    1bc0:	99 27       	eor	r25, r25
    1bc2:	c8 2b       	or	r28, r24
    1bc4:	d9 2b       	or	r29, r25
    1bc6:	00 e0       	ldi	r16, 0x00	; 0
    1bc8:	10 e0       	ldi	r17, 0x00	; 0
    1bca:	0c 17       	cp	r16, r28
    1bcc:	1d 07       	cpc	r17, r29
    1bce:	70 f5       	brcc	.+92     	; 0x1c2c <PD_InterpretAVRISPPacket+0x2a8>
    1bd0:	3d e4       	ldi	r19, 0x4D	; 77
    1bd2:	e3 2e       	mov	r14, r19
    1bd4:	31 e0       	ldi	r19, 0x01	; 1
    1bd6:	f3 2e       	mov	r15, r19
    1bd8:	20 91 66 02 	lds	r18, 0x0266
    1bdc:	30 91 67 02 	lds	r19, 0x0267
    1be0:	80 91 69 02 	lds	r24, 0x0269
    1be4:	90 91 6a 02 	lds	r25, 0x026A
    1be8:	28 17       	cp	r18, r24
    1bea:	39 07       	cpc	r19, r25
    1bec:	41 f4       	brne	.+16     	; 0x1bfe <PD_InterpretAVRISPPacket+0x27a>
    1bee:	0e 94 65 0c 	call	0x18ca <PD_SetupDFAddressCounters>
    1bf2:	80 91 6d 02 	lds	r24, 0x026D
    1bf6:	90 91 6e 02 	lds	r25, 0x026E
    1bfa:	0e 94 b4 0a 	call	0x1568 <DF_CopyFlashPageToBuffer>
    1bfe:	80 91 66 02 	lds	r24, 0x0266
    1c02:	90 91 67 02 	lds	r25, 0x0267
    1c06:	9c 01       	movw	r18, r24
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	90 93 67 02 	sts	0x0267, r25
    1c0e:	80 93 66 02 	sts	0x0266, r24
    1c12:	c9 01       	movw	r24, r18
    1c14:	0e 94 e4 09 	call	0x13c8 <DF_ReadBufferByte>
    1c18:	f7 01       	movw	r30, r14
    1c1a:	81 93       	st	Z+, r24
    1c1c:	7f 01       	movw	r14, r30
    1c1e:	0e 94 54 0f 	call	0x1ea8 <V2P_IncrementCurrAddress>
    1c22:	0f 5f       	subi	r16, 0xFF	; 255
    1c24:	1f 4f       	sbci	r17, 0xFF	; 255
    1c26:	0c 17       	cp	r16, r28
    1c28:	1d 07       	cpc	r17, r29
    1c2a:	b0 f2       	brcs	.-84     	; 0x1bd8 <PD_InterpretAVRISPPacket+0x254>
    1c2c:	23 96       	adiw	r28, 0x03	; 3
    1c2e:	d0 93 48 01 	sts	0x0148, r29
    1c32:	c0 93 47 01 	sts	0x0147, r28
    1c36:	23 97       	sbiw	r28, 0x03	; 3
    1c38:	10 92 4c 01 	sts	0x014C, r1
    1c3c:	c5 5b       	subi	r28, 0xB5	; 181
    1c3e:	de 4f       	sbci	r29, 0xFE	; 254
    1c40:	1a 82       	std	Y+2, r1	; 0x02
    1c42:	09 c0       	rjmp	.+18     	; 0x1c56 <PD_InterpretAVRISPPacket+0x2d2>
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	90 93 48 01 	sts	0x0148, r25
    1c4c:	80 93 47 01 	sts	0x0147, r24
    1c50:	89 ec       	ldi	r24, 0xC9	; 201
    1c52:	80 93 4c 01 	sts	0x014C, r24
    1c56:	0e 94 73 0e 	call	0x1ce6 <V2P_SendPacket>
    1c5a:	dd 20       	and	r13, r13
    1c5c:	d9 f0       	breq	.+54     	; 0x1c94 <PD_InterpretAVRISPPacket+0x310>
    1c5e:	8a e2       	ldi	r24, 0x2A	; 42
    1c60:	92 e0       	ldi	r25, 0x02	; 2
    1c62:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    1c66:	c0 e0       	ldi	r28, 0x00	; 0
    1c68:	d0 e0       	ldi	r29, 0x00	; 0
    1c6a:	80 91 6b 02 	lds	r24, 0x026B
    1c6e:	90 91 6c 02 	lds	r25, 0x026C
    1c72:	23 e0       	ldi	r18, 0x03	; 3
    1c74:	96 95       	lsr	r25
    1c76:	87 95       	ror	r24
    1c78:	2a 95       	dec	r18
    1c7a:	e1 f7       	brne	.-8      	; 0x1c74 <PD_InterpretAVRISPPacket+0x2f0>
    1c7c:	c8 17       	cp	r28, r24
    1c7e:	d9 07       	cpc	r29, r25
    1c80:	28 f4       	brcc	.+10     	; 0x1c8c <PD_InterpretAVRISPPacket+0x308>
    1c82:	ce 01       	movw	r24, r28
    1c84:	0e 94 8d 0a 	call	0x151a <DF_EraseBlock>
    1c88:	21 96       	adiw	r28, 0x01	; 1
    1c8a:	ef cf       	rjmp	.-34     	; 0x1c6a <PD_InterpretAVRISPPacket+0x2e6>
    1c8c:	85 ed       	ldi	r24, 0xD5	; 213
    1c8e:	93 e0       	ldi	r25, 0x03	; 3
    1c90:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	ff 90       	pop	r15
    1c9e:	ef 90       	pop	r14
    1ca0:	df 90       	pop	r13
    1ca2:	08 95       	ret

00001ca4 <V2P_GetChecksum>:
	
	/* Checksum for the V2 protocol is comprised of an XOR of all the packet 
      bytes, including the start, sequence number, size and token bytes.    */
	
	CheckSumByte  = MESSAGE_START;
    1ca4:	6b e1       	ldi	r22, 0x1B	; 27
	CheckSumByte ^= SequenceNum;
    1ca6:	80 91 49 01 	lds	r24, 0x0149
    1caa:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize >> 8);
    1cac:	20 91 47 01 	lds	r18, 0x0147
    1cb0:	30 91 48 01 	lds	r19, 0x0148
    1cb4:	83 2f       	mov	r24, r19
    1cb6:	99 27       	eor	r25, r25
    1cb8:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize);
    1cba:	80 91 47 01 	lds	r24, 0x0147
    1cbe:	68 27       	eor	r22, r24
	CheckSumByte ^= TOKEN;
    1cc0:	8e e0       	ldi	r24, 0x0E	; 14
    1cc2:	68 27       	eor	r22, r24
	
	for (uint16_t CByteIndex = 0; CByteIndex < MessageSize; CByteIndex++)
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	50 e0       	ldi	r21, 0x00	; 0
    1cc8:	42 17       	cp	r20, r18
    1cca:	53 07       	cpc	r21, r19
    1ccc:	48 f4       	brcc	.+18     	; 0x1ce0 <V2P_GetChecksum+0x3c>
    1cce:	eb e4       	ldi	r30, 0x4B	; 75
    1cd0:	f1 e0       	ldi	r31, 0x01	; 1
	   CheckSumByte ^= PacketBytes[CByteIndex];
    1cd2:	81 91       	ld	r24, Z+
    1cd4:	68 27       	eor	r22, r24
    1cd6:	4f 5f       	subi	r20, 0xFF	; 255
    1cd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cda:	42 17       	cp	r20, r18
    1cdc:	53 07       	cpc	r21, r19
    1cde:	c8 f3       	brcs	.-14     	; 0x1cd2 <V2P_GetChecksum+0x2e>

	return CheckSumByte;
}
    1ce0:	86 2f       	mov	r24, r22
    1ce2:	99 27       	eor	r25, r25
    1ce4:	08 95       	ret

00001ce6 <V2P_SendPacket>:
    1ce6:	0f 93       	push	r16
    1ce8:	1f 93       	push	r17
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	8b e1       	ldi	r24, 0x1B	; 27
    1cf0:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1cf4:	80 91 49 01 	lds	r24, 0x0149
    1cf8:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1cfc:	80 91 48 01 	lds	r24, 0x0148
    1d00:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1d04:	80 91 47 01 	lds	r24, 0x0147
    1d08:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1d0c:	8e e0       	ldi	r24, 0x0E	; 14
    1d0e:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1d12:	c0 e0       	ldi	r28, 0x00	; 0
    1d14:	d0 e0       	ldi	r29, 0x00	; 0
    1d16:	80 91 47 01 	lds	r24, 0x0147
    1d1a:	90 91 48 01 	lds	r25, 0x0148
    1d1e:	c8 17       	cp	r28, r24
    1d20:	d9 07       	cpc	r29, r25
    1d22:	78 f4       	brcc	.+30     	; 0x1d42 <V2P_SendPacket+0x5c>
    1d24:	0b e4       	ldi	r16, 0x4B	; 75
    1d26:	11 e0       	ldi	r17, 0x01	; 1
    1d28:	f8 01       	movw	r30, r16
    1d2a:	81 91       	ld	r24, Z+
    1d2c:	8f 01       	movw	r16, r30
    1d2e:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1d32:	21 96       	adiw	r28, 0x01	; 1
    1d34:	80 91 47 01 	lds	r24, 0x0147
    1d38:	90 91 48 01 	lds	r25, 0x0148
    1d3c:	c8 17       	cp	r28, r24
    1d3e:	d9 07       	cpc	r29, r25
    1d40:	98 f3       	brcs	.-26     	; 0x1d28 <V2P_SendPacket+0x42>
    1d42:	0e 94 52 0e 	call	0x1ca4 <V2P_GetChecksum>
    1d46:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1d4a:	80 91 49 01 	lds	r24, 0x0149
    1d4e:	90 91 4a 01 	lds	r25, 0x014A
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	90 93 4a 01 	sts	0x014A, r25
    1d58:	80 93 49 01 	sts	0x0149, r24
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	08 95       	ret

00001d66 <V2P_GetSetParamater>:

void V2P_GetSetParamater(void)
{
	uint8_t Param_Name = PacketBytes[1];    // Save the parameter number
    1d66:	20 91 4c 01 	lds	r18, 0x014C

	MessageSize = 3;                        // Set the default response message size to 3 bytes     
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	90 93 48 01 	sts	0x0148, r25
    1d72:	80 93 47 01 	sts	0x0147, r24
	PacketBytes[1] = STATUS_CMD_OK;         // Set the default response to OK
    1d76:	10 92 4c 01 	sts	0x014C, r1

	switch (Param_Name)                    // Switch based on the recieved parameter byte
    1d7a:	33 27       	eor	r19, r19
    1d7c:	22 39       	cpi	r18, 0x92	; 146
    1d7e:	31 05       	cpc	r19, r1
    1d80:	51 f1       	breq	.+84     	; 0x1dd6 <V2P_GetSetParamater+0x70>
    1d82:	23 39       	cpi	r18, 0x93	; 147
    1d84:	31 05       	cpc	r19, r1
    1d86:	8c f4       	brge	.+34     	; 0x1daa <V2P_GetSetParamater+0x44>
    1d88:	21 38       	cpi	r18, 0x81	; 129
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	01 f1       	breq	.+64     	; 0x1dce <V2P_GetSetParamater+0x68>
    1d8e:	22 38       	cpi	r18, 0x82	; 130
    1d90:	31 05       	cpc	r19, r1
    1d92:	24 f4       	brge	.+8      	; 0x1d9c <V2P_GetSetParamater+0x36>
    1d94:	20 38       	cpi	r18, 0x80	; 128
    1d96:	31 05       	cpc	r19, r1
    1d98:	41 f1       	breq	.+80     	; 0x1dea <V2P_GetSetParamater+0x84>
    1d9a:	7a c0       	rjmp	.+244    	; 0x1e90 <V2P_GetSetParamater+0x12a>
    1d9c:	20 39       	cpi	r18, 0x90	; 144
    1d9e:	31 05       	cpc	r19, r1
    1da0:	c1 f0       	breq	.+48     	; 0x1dd2 <V2P_GetSetParamater+0x6c>
    1da2:	21 39       	cpi	r18, 0x91	; 145
    1da4:	31 05       	cpc	r19, r1
    1da6:	a9 f0       	breq	.+42     	; 0x1dd2 <V2P_GetSetParamater+0x6c>
    1da8:	73 c0       	rjmp	.+230    	; 0x1e90 <V2P_GetSetParamater+0x12a>
    1daa:	28 39       	cpi	r18, 0x98	; 152
    1dac:	31 05       	cpc	r19, r1
    1dae:	89 f1       	breq	.+98     	; 0x1e12 <V2P_GetSetParamater+0xac>
    1db0:	29 39       	cpi	r18, 0x99	; 153
    1db2:	31 05       	cpc	r19, r1
    1db4:	2c f4       	brge	.+10     	; 0x1dc0 <V2P_GetSetParamater+0x5a>
    1db6:	26 39       	cpi	r18, 0x96	; 150
    1db8:	31 05       	cpc	r19, r1
    1dba:	0c f4       	brge	.+2      	; 0x1dbe <V2P_GetSetParamater+0x58>
    1dbc:	69 c0       	rjmp	.+210    	; 0x1e90 <V2P_GetSetParamater+0x12a>
    1dbe:	5a c0       	rjmp	.+180    	; 0x1e74 <V2P_GetSetParamater+0x10e>
    1dc0:	2e 39       	cpi	r18, 0x9E	; 158
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	e1 f1       	breq	.+120    	; 0x1e3e <V2P_GetSetParamater+0xd8>
    1dc6:	2f 39       	cpi	r18, 0x9F	; 159
    1dc8:	31 05       	cpc	r19, r1
    1dca:	89 f0       	breq	.+34     	; 0x1dee <V2P_GetSetParamater+0x88>
    1dcc:	61 c0       	rjmp	.+194    	; 0x1e90 <V2P_GetSetParamater+0x12a>
	{
		case PARAM_BUILD_NUMBER_LOW:
			PacketBytes[2] = VERSION_MINOR;

			break;
		case PARAM_BUILD_NUMBER_HIGH:
			PacketBytes[2] = VERSION_MAJOR;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	3f c0       	rjmp	.+126    	; 0x1e50 <V2P_GetSetParamater+0xea>

			break;
		case PARAM_HARDWARE_VERSION:
			PacketBytes[2] = V2P_HW_VERSION;

			break;
		case PARAM_SW_MAJOR:
			PacketBytes[2] = V2P_SW_VERSION_MAJOR;
    1dd2:	82 e0       	ldi	r24, 0x02	; 2
    1dd4:	3d c0       	rjmp	.+122    	; 0x1e50 <V2P_GetSetParamater+0xea>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    1dd6:	a6 e8       	ldi	r26, 0x86	; 134
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	9d 01       	movw	r18, r26
  uint8_t result;
  asm volatile
    1ddc:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
    1de0:	80 2d       	mov	r24, r0
    1de2:	8f 3f       	cpi	r24, 0xFF	; 255
    1de4:	11 f0       	breq	.+4      	; 0x1dea <V2P_GetSetParamater+0x84>
    1de6:	d9 01       	movw	r26, r18
    1de8:	30 c0       	rjmp	.+96     	; 0x1e4a <V2P_GetSetParamater+0xe4>
    1dea:	84 e0       	ldi	r24, 0x04	; 4
    1dec:	31 c0       	rjmp	.+98     	; 0x1e50 <V2P_GetSetParamater+0xea>

			break;
		case PARAM_SW_MINOR:
			PacketBytes[2] = ((eeprom_read_byte(&EEPROMVars.FirmVerMinor) == 0xFF)? V2P_SW_VERSION_MINOR_DEFAULT : eeprom_read_byte(&EEPROMVars.FirmVerMinor));

			break;
		case PARAM_CONTROLLER_INIT:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1dee:	80 91 4b 01 	lds	r24, 0x014B
    1df2:	83 30       	cpi	r24, 0x03	; 3
    1df4:	19 f4       	brne	.+6      	; 0x1dfc <V2P_GetSetParamater+0x96>
			{
				PacketBytes[2] = Param_ControllerInit;
    1df6:	80 91 41 01 	lds	r24, 0x0141
    1dfa:	2a c0       	rjmp	.+84     	; 0x1e50 <V2P_GetSetParamater+0xea>
			}
			else
			{
				MessageSize = 2;
    1dfc:	82 e0       	ldi	r24, 0x02	; 2
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	90 93 48 01 	sts	0x0148, r25
    1e04:	80 93 47 01 	sts	0x0147, r24
				Param_ControllerInit = PacketBytes[2];
    1e08:	80 91 4d 01 	lds	r24, 0x014D
    1e0c:	80 93 41 01 	sts	0x0141, r24
			}
			
			break;
    1e10:	48 c0       	rjmp	.+144    	; 0x1ea2 <V2P_GetSetParamater+0x13c>
		case PARAM_SCK_DURATION:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1e12:	80 91 4b 01 	lds	r24, 0x014B
    1e16:	a1 e0       	ldi	r26, 0x01	; 1
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	83 30       	cpi	r24, 0x03	; 3
    1e1c:	b1 f0       	breq	.+44     	; 0x1e4a <V2P_GetSetParamater+0xe4>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.SCKDuration);
			}
			else
			{
				MessageSize = 2;
    1e1e:	82 e0       	ldi	r24, 0x02	; 2
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	90 93 48 01 	sts	0x0148, r25
    1e26:	80 93 47 01 	sts	0x0147, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1e2a:	80 91 4d 01 	lds	r24, 0x014D
  asm volatile (
    1e2e:	08 2e       	mov	r0, r24
    1e30:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.SCKDuration, PacketBytes[2]);
				USI_SPISetSpeed(PacketBytes[2]); // Re-Initialise the USI system with the new frequency
    1e34:	80 91 4d 01 	lds	r24, 0x014D
    1e38:	0e 94 68 09 	call	0x12d0 <USI_SPISetSpeed>
			}
					
			break;
    1e3c:	32 c0       	rjmp	.+100    	; 0x1ea2 <V2P_GetSetParamater+0x13c>
		case PARAM_RESET_POLARITY:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1e3e:	80 91 4b 01 	lds	r24, 0x014B
    1e42:	a0 e0       	ldi	r26, 0x00	; 0
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	83 30       	cpi	r24, 0x03	; 3
    1e48:	31 f4       	brne	.+12     	; 0x1e56 <V2P_GetSetParamater+0xf0>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1e4a:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
    1e4e:	80 2d       	mov	r24, r0
    1e50:	80 93 4d 01 	sts	0x014D, r24
    1e54:	26 c0       	rjmp	.+76     	; 0x1ea2 <V2P_GetSetParamater+0x13c>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.ResetPolarity);		
			}
			else
			{
				MessageSize = 2;
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	90 93 48 01 	sts	0x0148, r25
    1e5e:	80 93 47 01 	sts	0x0147, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1e62:	80 91 4d 01 	lds	r24, 0x014D
  asm volatile (
    1e66:	08 2e       	mov	r0, r24
    1e68:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.ResetPolarity, PacketBytes[2]);
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Change takes effect immediatly
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
			}
			
			break;
    1e72:	17 c0       	rjmp	.+46     	; 0x1ea2 <V2P_GetSetParamater+0x13c>
		case PARAM_OSC_PSCALE:
		case PARAM_OSC_CMATCH:
			/* Despite not supporting these parameters (STK500 only), the AVR Studio programmer
			   sends them along with the SCK duration. A OK must be returned or the sequence will fail
			   and the SCK duration byte will not be sent.                                             */
		
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1e74:	80 91 4b 01 	lds	r24, 0x014B
    1e78:	83 30       	cpi	r24, 0x03	; 3
    1e7a:	19 f4       	brne	.+6      	; 0x1e82 <V2P_GetSetParamater+0x11c>
			{
			   PacketBytes[2] = 0;            // If the command is a read, return a 0 for both parameters
    1e7c:	10 92 4d 01 	sts	0x014D, r1
    1e80:	10 c0       	rjmp	.+32     	; 0x1ea2 <V2P_GetSetParamater+0x13c>
			}
			else
			{
				MessageSize = 2;              // Otherwise just send back an OK if the command is a set		
    1e82:	82 e0       	ldi	r24, 0x02	; 2
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	90 93 48 01 	sts	0x0148, r25
    1e8a:	80 93 47 01 	sts	0x0147, r24
			}
			
			break;
    1e8e:	09 c0       	rjmp	.+18     	; 0x1ea2 <V2P_GetSetParamater+0x13c>
		default:                             // Unrecognised parameter
			MessageSize = 2;
    1e90:	82 e0       	ldi	r24, 0x02	; 2
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	90 93 48 01 	sts	0x0148, r25
    1e98:	80 93 47 01 	sts	0x0147, r24
			PacketBytes[1] = STATUS_CMD_FAILED;			
    1e9c:	80 ec       	ldi	r24, 0xC0	; 192
    1e9e:	80 93 4c 01 	sts	0x014C, r24
	}
	
	V2P_SendPacket();
    1ea2:	0e 94 73 0e 	call	0x1ce6 <V2P_SendPacket>
    1ea6:	08 95       	ret

00001ea8 <V2P_IncrementCurrAddress>:
}

void V2P_IncrementCurrAddress(void)
{
	// Incrementing a 32-bit unsigned variable takes a lot of code. Because much of the code is
	// not very time critical (much of it is waiting for the hardware), i've chosen to waste
	// a few extra cycles per increment and save a good 60 bytes or so of code space by putting
	// the incrmement inside a function.

	CurrAddress++;
    1ea8:	80 91 42 01 	lds	r24, 0x0142
    1eac:	90 91 43 01 	lds	r25, 0x0143
    1eb0:	a0 91 44 01 	lds	r26, 0x0144
    1eb4:	b0 91 45 01 	lds	r27, 0x0145
    1eb8:	01 96       	adiw	r24, 0x01	; 1
    1eba:	a1 1d       	adc	r26, r1
    1ebc:	b1 1d       	adc	r27, r1
    1ebe:	80 93 42 01 	sts	0x0142, r24
    1ec2:	90 93 43 01 	sts	0x0143, r25
    1ec6:	a0 93 44 01 	sts	0x0144, r26
    1eca:	b0 93 45 01 	sts	0x0145, r27
    1ece:	08 95       	ret

00001ed0 <V2P_CheckForExtendedAddress>:
}

void V2P_CheckForExtendedAddress(void)
{
	if (CurrAddress & (1UL << 31))                     // MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
    1ed0:	80 91 42 01 	lds	r24, 0x0142
    1ed4:	90 91 43 01 	lds	r25, 0x0143
    1ed8:	a0 91 44 01 	lds	r26, 0x0144
    1edc:	b0 91 45 01 	lds	r27, 0x0145
    1ee0:	b7 ff       	sbrs	r27, 7
    1ee2:	1e c0       	rjmp	.+60     	; 0x1f20 <V2P_CheckForExtendedAddress+0x50>
	{
		USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);   // Load extended address command
    1ee4:	8d e4       	ldi	r24, 0x4D	; 77
    1ee6:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
		USI_SPITransmit((CurrAddress & 0x00FF0000) >> 16); // The 3rd byte of the long holds the extended address
    1ef0:	80 91 44 01 	lds	r24, 0x0144
    1ef4:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
		
		CurrAddress &= ~(1UL << 31);                   // Clear the flag
    1efe:	80 91 42 01 	lds	r24, 0x0142
    1f02:	90 91 43 01 	lds	r25, 0x0143
    1f06:	a0 91 44 01 	lds	r26, 0x0144
    1f0a:	b0 91 45 01 	lds	r27, 0x0145
    1f0e:	bf 77       	andi	r27, 0x7F	; 127
    1f10:	80 93 42 01 	sts	0x0142, r24
    1f14:	90 93 43 01 	sts	0x0143, r25
    1f18:	a0 93 44 01 	sts	0x0144, r26
    1f1c:	b0 93 45 01 	sts	0x0145, r27
    1f20:	08 95       	ret

00001f22 <V2P_RunStateMachine>:
    1f22:	ef 92       	push	r14
    1f24:	ff 92       	push	r15
    1f26:	0f 93       	push	r16
    1f28:	1f 93       	push	r17
    1f2a:	cf 93       	push	r28
    1f2c:	c0 e0       	ldi	r28, 0x00	; 0
    1f2e:	ee 24       	eor	r14, r14
    1f30:	ff 24       	eor	r15, r15
    1f32:	0e 94 b9 0b 	call	0x1772 <BUFF_InitialiseBuffer>
    1f36:	c0 93 81 00 	sts	0x0081, r28
    1f3a:	c0 93 46 01 	sts	0x0146, r28
    1f3e:	10 92 42 01 	sts	0x0142, r1
    1f42:	10 92 43 01 	sts	0x0143, r1
    1f46:	10 92 44 01 	sts	0x0144, r1
    1f4a:	10 92 45 01 	sts	0x0145, r1
    1f4e:	80 91 3f 01 	lds	r24, 0x013F
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	11 f4       	brne	.+4      	; 0x1f5a <V2P_RunStateMachine+0x38>
    1f56:	ca e0       	ldi	r28, 0x0A	; 10
    1f58:	11 c0       	rjmp	.+34     	; 0x1f7c <V2P_RunStateMachine+0x5a>
    1f5a:	cc 23       	and	r28, r28
    1f5c:	79 f0       	breq	.+30     	; 0x1f7c <V2P_RunStateMachine+0x5a>
    1f5e:	10 92 3f 01 	sts	0x013F, r1
    1f62:	10 92 40 01 	sts	0x0140, r1
    1f66:	10 92 b2 00 	sts	0x00B2, r1
    1f6a:	80 ef       	ldi	r24, 0xF0	; 240
    1f6c:	80 93 b3 00 	sts	0x00B3, r24
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	80 93 70 00 	sts	0x0070, r24
    1f76:	8f e0       	ldi	r24, 0x0F	; 15
    1f78:	80 93 b0 00 	sts	0x00B0, r24
    1f7c:	8c 2f       	mov	r24, r28
    1f7e:	99 27       	eor	r25, r25
    1f80:	85 30       	cpi	r24, 0x05	; 5
    1f82:	91 05       	cpc	r25, r1
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <V2P_RunStateMachine+0x66>
    1f86:	88 c0       	rjmp	.+272    	; 0x2098 <V2P_RunStateMachine+0x176>
    1f88:	86 30       	cpi	r24, 0x06	; 6
    1f8a:	91 05       	cpc	r25, r1
    1f8c:	ac f4       	brge	.+42     	; 0x1fb8 <V2P_RunStateMachine+0x96>
    1f8e:	82 30       	cpi	r24, 0x02	; 2
    1f90:	91 05       	cpc	r25, r1
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <V2P_RunStateMachine+0x74>
    1f94:	58 c0       	rjmp	.+176    	; 0x2046 <V2P_RunStateMachine+0x124>
    1f96:	83 30       	cpi	r24, 0x03	; 3
    1f98:	91 05       	cpc	r25, r1
    1f9a:	34 f4       	brge	.+12     	; 0x1fa8 <V2P_RunStateMachine+0x86>
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	99 f1       	breq	.+102    	; 0x2006 <V2P_RunStateMachine+0xe4>
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <V2P_RunStateMachine+0x84>
    1fa4:	4a c0       	rjmp	.+148    	; 0x203a <V2P_RunStateMachine+0x118>
    1fa6:	d3 cf       	rjmp	.-90     	; 0x1f4e <V2P_RunStateMachine+0x2c>
    1fa8:	83 30       	cpi	r24, 0x03	; 3
    1faa:	91 05       	cpc	r25, r1
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <V2P_RunStateMachine+0x8e>
    1fae:	54 c0       	rjmp	.+168    	; 0x2058 <V2P_RunStateMachine+0x136>
    1fb0:	04 97       	sbiw	r24, 0x04	; 4
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <V2P_RunStateMachine+0x94>
    1fb4:	5c c0       	rjmp	.+184    	; 0x206e <V2P_RunStateMachine+0x14c>
    1fb6:	cb cf       	rjmp	.-106    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    1fb8:	88 30       	cpi	r24, 0x08	; 8
    1fba:	91 05       	cpc	r25, r1
    1fbc:	d1 f0       	breq	.+52     	; 0x1ff2 <V2P_RunStateMachine+0xd0>
    1fbe:	89 30       	cpi	r24, 0x09	; 9
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	44 f4       	brge	.+16     	; 0x1fd4 <V2P_RunStateMachine+0xb2>
    1fc4:	86 30       	cpi	r24, 0x06	; 6
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <V2P_RunStateMachine+0xaa>
    1fca:	6e c0       	rjmp	.+220    	; 0x20a8 <V2P_RunStateMachine+0x186>
    1fcc:	07 97       	sbiw	r24, 0x07	; 7
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <V2P_RunStateMachine+0xb0>
    1fd0:	7f c0       	rjmp	.+254    	; 0x20d0 <V2P_RunStateMachine+0x1ae>
    1fd2:	bd cf       	rjmp	.-134    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    1fd4:	89 30       	cpi	r24, 0x09	; 9
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <V2P_RunStateMachine+0xba>
    1fda:	ac c0       	rjmp	.+344    	; 0x2134 <V2P_RunStateMachine+0x212>
    1fdc:	0a 97       	sbiw	r24, 0x0a	; 10
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <V2P_RunStateMachine+0xc0>
    1fe0:	b6 cf       	rjmp	.-148    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    1fe2:	82 e0       	ldi	r24, 0x02	; 2
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	90 93 48 01 	sts	0x0148, r25
    1fea:	80 93 47 01 	sts	0x0147, r24
    1fee:	80 e8       	ldi	r24, 0x80	; 128
    1ff0:	f7 c0       	rjmp	.+494    	; 0x21e0 <V2P_RunStateMachine+0x2be>
    1ff2:	10 92 3f 01 	sts	0x013F, r1
    1ff6:	0e 94 b9 0b 	call	0x1772 <BUFF_InitialiseBuffer>
    1ffa:	10 92 b0 00 	sts	0x00B0, r1
    1ffe:	10 92 70 00 	sts	0x0070, r1
    2002:	c0 e0       	ldi	r28, 0x00	; 0
    2004:	a4 cf       	rjmp	.-184    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    2006:	80 91 b3 02 	lds	r24, 0x02B3
    200a:	81 11       	cpse	r24, r1
    200c:	c1 e0       	ldi	r28, 0x01	; 1
    200e:	f2 9b       	sbis	0x1e, 2	; 30
    2010:	9e cf       	rjmp	.-196    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    2012:	80 91 46 01 	lds	r24, 0x0146
    2016:	88 23       	and	r24, r24
    2018:	09 f0       	breq	.+2      	; 0x201c <V2P_RunStateMachine+0xfa>
    201a:	99 cf       	rjmp	.-206    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    201c:	80 e8       	ldi	r24, 0x80	; 128
    201e:	80 93 61 00 	sts	0x0061, r24
    2022:	83 e0       	ldi	r24, 0x03	; 3
    2024:	80 93 61 00 	sts	0x0061, r24
    2028:	80 91 c1 00 	lds	r24, 0x00C1
    202c:	80 78       	andi	r24, 0x80	; 128
    202e:	80 93 c1 00 	sts	0x00C1, r24
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	80 93 81 00 	sts	0x0081, r24
    2038:	d9 c0       	rjmp	.+434    	; 0x21ec <V2P_RunStateMachine+0x2ca>
    203a:	0e 94 22 09 	call	0x1244 <USART_Rx>
    203e:	8b 31       	cpi	r24, 0x1B	; 27
    2040:	89 f5       	brne	.+98     	; 0x20a4 <V2P_RunStateMachine+0x182>
    2042:	c2 e0       	ldi	r28, 0x02	; 2
    2044:	84 cf       	rjmp	.-248    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    2046:	0e 94 22 09 	call	0x1244 <USART_Rx>
    204a:	99 27       	eor	r25, r25
    204c:	90 93 4a 01 	sts	0x014A, r25
    2050:	80 93 49 01 	sts	0x0149, r24
    2054:	c3 e0       	ldi	r28, 0x03	; 3
    2056:	7b cf       	rjmp	.-266    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    2058:	0e 94 22 09 	call	0x1244 <USART_Rx>
    205c:	99 27       	eor	r25, r25
    205e:	98 2f       	mov	r25, r24
    2060:	88 27       	eor	r24, r24
    2062:	90 93 48 01 	sts	0x0148, r25
    2066:	80 93 47 01 	sts	0x0147, r24
    206a:	c4 e0       	ldi	r28, 0x04	; 4
    206c:	70 cf       	rjmp	.-288    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    206e:	0e 94 22 09 	call	0x1244 <USART_Rx>
    2072:	28 2f       	mov	r18, r24
    2074:	33 27       	eor	r19, r19
    2076:	80 91 47 01 	lds	r24, 0x0147
    207a:	90 91 48 01 	lds	r25, 0x0148
    207e:	82 2b       	or	r24, r18
    2080:	93 2b       	or	r25, r19
    2082:	90 93 48 01 	sts	0x0148, r25
    2086:	80 93 47 01 	sts	0x0147, r24
    208a:	83 51       	subi	r24, 0x13	; 19
    208c:	91 40       	sbci	r25, 0x01	; 1
    208e:	50 f4       	brcc	.+20     	; 0x20a4 <V2P_RunStateMachine+0x182>
    2090:	c5 e0       	ldi	r28, 0x05	; 5
    2092:	ee 24       	eor	r14, r14
    2094:	ff 24       	eor	r15, r15
    2096:	5b cf       	rjmp	.-330    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    2098:	0e 94 22 09 	call	0x1244 <USART_Rx>
    209c:	8e 30       	cpi	r24, 0x0E	; 14
    209e:	11 f4       	brne	.+4      	; 0x20a4 <V2P_RunStateMachine+0x182>
    20a0:	c6 e0       	ldi	r28, 0x06	; 6
    20a2:	55 cf       	rjmp	.-342    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    20a4:	c9 e0       	ldi	r28, 0x09	; 9
    20a6:	53 cf       	rjmp	.-346    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    20a8:	80 91 47 01 	lds	r24, 0x0147
    20ac:	90 91 48 01 	lds	r25, 0x0148
    20b0:	e8 16       	cp	r14, r24
    20b2:	f9 06       	cpc	r15, r25
    20b4:	11 f4       	brne	.+4      	; 0x20ba <V2P_RunStateMachine+0x198>
    20b6:	c7 e0       	ldi	r28, 0x07	; 7
    20b8:	4a cf       	rjmp	.-364    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    20ba:	87 01       	movw	r16, r14
    20bc:	05 5b       	subi	r16, 0xB5	; 181
    20be:	1e 4f       	sbci	r17, 0xFE	; 254
    20c0:	08 94       	sec
    20c2:	e1 1c       	adc	r14, r1
    20c4:	f1 1c       	adc	r15, r1
    20c6:	0e 94 22 09 	call	0x1244 <USART_Rx>
    20ca:	f8 01       	movw	r30, r16
    20cc:	80 83       	st	Z, r24
    20ce:	3f cf       	rjmp	.-386    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    20d0:	0e 94 52 0e 	call	0x1ca4 <V2P_GetChecksum>
    20d4:	18 2f       	mov	r17, r24
    20d6:	0e 94 22 09 	call	0x1244 <USART_Rx>
    20da:	18 17       	cp	r17, r24
    20dc:	09 f0       	breq	.+2      	; 0x20e0 <V2P_RunStateMachine+0x1be>
    20de:	79 c0       	rjmp	.+242    	; 0x21d2 <V2P_RunStateMachine+0x2b0>
    20e0:	c0 91 3f 01 	lds	r28, 0x013F
    20e4:	cc 23       	and	r28, r28
    20e6:	09 f0       	breq	.+2      	; 0x20ea <V2P_RunStateMachine+0x1c8>
    20e8:	74 c0       	rjmp	.+232    	; 0x21d2 <V2P_RunStateMachine+0x2b0>
    20ea:	80 91 4b 01 	lds	r24, 0x014B
    20ee:	99 27       	eor	r25, r25
    20f0:	84 30       	cpi	r24, 0x04	; 4
    20f2:	91 05       	cpc	r25, r1
    20f4:	3c f4       	brge	.+14     	; 0x2104 <V2P_RunStateMachine+0x1e2>
    20f6:	82 30       	cpi	r24, 0x02	; 2
    20f8:	91 05       	cpc	r25, r1
    20fa:	0c f0       	brlt	.+2      	; 0x20fe <V2P_RunStateMachine+0x1dc>
    20fc:	61 c0       	rjmp	.+194    	; 0x21c0 <V2P_RunStateMachine+0x29e>
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	39 f0       	breq	.+14     	; 0x2110 <V2P_RunStateMachine+0x1ee>
    2102:	61 c0       	rjmp	.+194    	; 0x21c6 <V2P_RunStateMachine+0x2a4>
    2104:	86 30       	cpi	r24, 0x06	; 6
    2106:	91 05       	cpc	r25, r1
    2108:	e9 f0       	breq	.+58     	; 0x2144 <V2P_RunStateMachine+0x222>
    210a:	07 97       	sbiw	r24, 0x07	; 7
    210c:	99 f0       	breq	.+38     	; 0x2134 <V2P_RunStateMachine+0x212>
    210e:	5b c0       	rjmp	.+182    	; 0x21c6 <V2P_RunStateMachine+0x2a4>
    2110:	8b e0       	ldi	r24, 0x0B	; 11
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	90 93 48 01 	sts	0x0148, r25
    2118:	80 93 47 01 	sts	0x0147, r24
    211c:	ab e4       	ldi	r26, 0x4B	; 75
    211e:	b1 e0       	ldi	r27, 0x01	; 1
    2120:	e6 ee       	ldi	r30, 0xE6	; 230
    2122:	f3 e0       	ldi	r31, 0x03	; 3
    2124:	9a e0       	ldi	r25, 0x0A	; 10
    2126:	84 91       	lpm	r24, Z
    2128:	8d 93       	st	X+, r24
    212a:	91 50       	subi	r25, 0x01	; 1
    212c:	31 96       	adiw	r30, 0x01	; 1
    212e:	97 ff       	sbrs	r25, 7
    2130:	fa cf       	rjmp	.-12     	; 0x2126 <V2P_RunStateMachine+0x204>
    2132:	58 c0       	rjmp	.+176    	; 0x21e4 <V2P_RunStateMachine+0x2c2>
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	90 93 48 01 	sts	0x0148, r25
    213c:	80 93 47 01 	sts	0x0147, r24
    2140:	80 ec       	ldi	r24, 0xC0	; 192
    2142:	4e c0       	rjmp	.+156    	; 0x21e0 <V2P_RunStateMachine+0x2be>
    2144:	82 e0       	ldi	r24, 0x02	; 2
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	90 93 48 01 	sts	0x0148, r25
    214c:	80 93 47 01 	sts	0x0147, r24
    2150:	0e 94 68 0f 	call	0x1ed0 <V2P_CheckForExtendedAddress>
    2154:	80 91 4c 01 	lds	r24, 0x014C
    2158:	99 27       	eor	r25, r25
    215a:	aa 27       	eor	r26, r26
    215c:	bb 27       	eor	r27, r27
    215e:	b8 2f       	mov	r27, r24
    2160:	aa 27       	eor	r26, r26
    2162:	99 27       	eor	r25, r25
    2164:	88 27       	eor	r24, r24
    2166:	20 91 4d 01 	lds	r18, 0x014D
    216a:	33 27       	eor	r19, r19
    216c:	44 27       	eor	r20, r20
    216e:	55 27       	eor	r21, r21
    2170:	a9 01       	movw	r20, r18
    2172:	33 27       	eor	r19, r19
    2174:	22 27       	eor	r18, r18
    2176:	82 2b       	or	r24, r18
    2178:	93 2b       	or	r25, r19
    217a:	a4 2b       	or	r26, r20
    217c:	b5 2b       	or	r27, r21
    217e:	20 91 4e 01 	lds	r18, 0x014E
    2182:	33 27       	eor	r19, r19
    2184:	44 27       	eor	r20, r20
    2186:	55 27       	eor	r21, r21
    2188:	54 2f       	mov	r21, r20
    218a:	43 2f       	mov	r20, r19
    218c:	32 2f       	mov	r19, r18
    218e:	22 27       	eor	r18, r18
    2190:	82 2b       	or	r24, r18
    2192:	93 2b       	or	r25, r19
    2194:	a4 2b       	or	r26, r20
    2196:	b5 2b       	or	r27, r21
    2198:	20 91 4f 01 	lds	r18, 0x014F
    219c:	33 27       	eor	r19, r19
    219e:	44 27       	eor	r20, r20
    21a0:	55 27       	eor	r21, r21
    21a2:	82 2b       	or	r24, r18
    21a4:	93 2b       	or	r25, r19
    21a6:	a4 2b       	or	r26, r20
    21a8:	b5 2b       	or	r27, r21
    21aa:	80 93 42 01 	sts	0x0142, r24
    21ae:	90 93 43 01 	sts	0x0143, r25
    21b2:	a0 93 44 01 	sts	0x0144, r26
    21b6:	b0 93 45 01 	sts	0x0145, r27
    21ba:	c0 93 4c 01 	sts	0x014C, r28
    21be:	12 c0       	rjmp	.+36     	; 0x21e4 <V2P_RunStateMachine+0x2c2>
    21c0:	0e 94 b3 0e 	call	0x1d66 <V2P_GetSetParamater>
    21c4:	11 c0       	rjmp	.+34     	; 0x21e8 <V2P_RunStateMachine+0x2c6>
    21c6:	e0 91 02 01 	lds	r30, 0x0102
    21ca:	f0 91 03 01 	lds	r31, 0x0103
    21ce:	09 95       	icall
    21d0:	0b c0       	rjmp	.+22     	; 0x21e8 <V2P_RunStateMachine+0x2c6>
    21d2:	82 e0       	ldi	r24, 0x02	; 2
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	90 93 48 01 	sts	0x0148, r25
    21da:	80 93 47 01 	sts	0x0147, r24
    21de:	81 ec       	ldi	r24, 0xC1	; 193
    21e0:	80 93 4c 01 	sts	0x014C, r24
    21e4:	0e 94 73 0e 	call	0x1ce6 <V2P_SendPacket>
    21e8:	c8 e0       	ldi	r28, 0x08	; 8
    21ea:	b1 ce       	rjmp	.-670    	; 0x1f4e <V2P_RunStateMachine+0x2c>
    21ec:	cf 91       	pop	r28
    21ee:	1f 91       	pop	r17
    21f0:	0f 91       	pop	r16
    21f2:	ff 90       	pop	r15
    21f4:	ef 90       	pop	r14
    21f6:	08 95       	ret

000021f8 <ISPCC_EnterChipProgrammingMode>:

// ======================================================================================

void ISPCC_EnterChipProgrammingMode(void)
{
    21f8:	0f 93       	push	r16
    21fa:	1f 93       	push	r17
    21fc:	cf 93       	push	r28
	uint8_t ByteDelay = PacketBytes[5];
    21fe:	10 91 50 01 	lds	r17, 0x0150
	uint8_t Attempts  = PacketBytes[4];
    2202:	c0 91 4f 01 	lds	r28, 0x014F
	uint8_t Response;

	MAIN_Delay1MS(PacketBytes[2]);         // Wait before continuing, amount specified in the packet
    2206:	80 91 4d 01 	lds	r24, 0x014D
    220a:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>

	if ((!(Attempts)) || (Attempts > 100)) // if no attempts or too high a value is specified, a fixed number is chosen
    220e:	8c 2f       	mov	r24, r28
    2210:	81 50       	subi	r24, 0x01	; 1
    2212:	84 36       	cpi	r24, 0x64	; 100
    2214:	08 f0       	brcs	.+2      	; 0x2218 <ISPCC_EnterChipProgrammingMode+0x20>
	   Attempts = 24;
    2216:	c8 e1       	ldi	r28, 0x18	; 24
		
	while (Attempts--)
	{
		USI_SPITransmit(PacketBytes[8]);
		MAIN_Delay1MS(ByteDelay);
		USI_SPITransmit(PacketBytes[9]);
		MAIN_Delay1MS(ByteDelay);
			
		Response = USI_SPITransmit(PacketBytes[10]);
		MAIN_Delay1MS(ByteDelay);

		if (PacketBytes[7] == ISPCC_POLL_MODE_AVR)
		  USI_SPITransmit(PacketBytes[11]);
		else
		  Response = USI_SPITransmit(PacketBytes[11]);
				
		if (!(PacketBytes[7]) || (Response == PacketBytes[6])) // Polling disabled, or returned value matches expected poll value
		{
			MAIN_Delay1MS(ByteDelay);

			InProgrammingMode = TRUE;
			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;
			return;
		}
		
		MAIN_Delay1MS(ByteDelay);
		USI_SPIToggleClock();            // Out of sync, shift in one bit and try again
    2218:	c1 50       	subi	r28, 0x01	; 1
    221a:	cf 3f       	cpi	r28, 0xFF	; 255
    221c:	09 f4       	brne	.+2      	; 0x2220 <ISPCC_EnterChipProgrammingMode+0x28>
    221e:	3f c0       	rjmp	.+126    	; 0x229e <ISPCC_EnterChipProgrammingMode+0xa6>
    2220:	80 91 53 01 	lds	r24, 0x0153
    2224:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2228:	81 2f       	mov	r24, r17
    222a:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    222e:	80 91 54 01 	lds	r24, 0x0154
    2232:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2236:	81 2f       	mov	r24, r17
    2238:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    223c:	80 91 55 01 	lds	r24, 0x0155
    2240:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2244:	08 2f       	mov	r16, r24
    2246:	81 2f       	mov	r24, r17
    2248:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    224c:	80 91 52 01 	lds	r24, 0x0152
    2250:	83 30       	cpi	r24, 0x03	; 3
    2252:	29 f4       	brne	.+10     	; 0x225e <ISPCC_EnterChipProgrammingMode+0x66>
    2254:	80 91 56 01 	lds	r24, 0x0156
    2258:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    225c:	05 c0       	rjmp	.+10     	; 0x2268 <ISPCC_EnterChipProgrammingMode+0x70>
    225e:	80 91 56 01 	lds	r24, 0x0156
    2262:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2266:	08 2f       	mov	r16, r24
    2268:	80 91 52 01 	lds	r24, 0x0152
    226c:	88 23       	and	r24, r24
    226e:	21 f0       	breq	.+8      	; 0x2278 <ISPCC_EnterChipProgrammingMode+0x80>
    2270:	80 91 51 01 	lds	r24, 0x0151
    2274:	08 17       	cp	r16, r24
    2276:	69 f4       	brne	.+26     	; 0x2292 <ISPCC_EnterChipProgrammingMode+0x9a>
    2278:	81 2f       	mov	r24, r17
    227a:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	80 93 46 01 	sts	0x0146, r24
    2284:	81 b3       	in	r24, 0x11	; 17
    2286:	8f 7c       	andi	r24, 0xCF	; 207
    2288:	80 62       	ori	r24, 0x20	; 32
    228a:	81 bb       	out	0x11, r24	; 17
    228c:	10 92 4c 01 	sts	0x014C, r1
    2290:	0d c0       	rjmp	.+26     	; 0x22ac <ISPCC_EnterChipProgrammingMode+0xb4>
    2292:	81 2f       	mov	r24, r17
    2294:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    2298:	0e 94 be 09 	call	0x137c <USI_SPIToggleClock>
    229c:	bd cf       	rjmp	.-134    	; 0x2218 <ISPCC_EnterChipProgrammingMode+0x20>
	}

	// If function hasn't returned by now, all the attempts have failed. Show this by
	// resetting the status leds to green (ready) and send a fail message.

	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
    229e:	81 b3       	in	r24, 0x11	; 17
    22a0:	8f 7c       	andi	r24, 0xCF	; 207
    22a2:	80 61       	ori	r24, 0x10	; 16
    22a4:	81 bb       	out	0x11, r24	; 17
	PacketBytes[1] = STATUS_CMD_FAILED;
    22a6:	80 ec       	ldi	r24, 0xC0	; 192
    22a8:	80 93 4c 01 	sts	0x014C, r24
    22ac:	cf 91       	pop	r28
    22ae:	1f 91       	pop	r17
    22b0:	0f 91       	pop	r16
    22b2:	08 95       	ret

000022b4 <ISPCC_PollForProgComplete>:
}

void ISPCC_ProgramChip(void)
{
	uint16_t PollAddress  = 0;
	uint8_t  ProgMode     = PacketBytes[3];
	uint8_t  WriteCommand = PacketBytes[5];
	uint16_t StartAddress = (uint16_t)CurrAddress;
	uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
	                      | PacketBytes[2];
	uint8_t  PollType;
	uint8_t  ByteToWrite;
			
	if (ProgMode & ISPCC_PROG_MODE_PAGE)                 // Page writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++) // Transmit the page bytes
		{
			ByteToWrite = PacketBytes[10 + WriteByte];
		
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash write mode - word addresses so MSB/LSB masking 
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else                                         // EEPROM write mode - byte addresses so no masking 
			   USI_SPITransmit(WriteCommand);

			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Only the LSW of the address should be sent
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			if (!(PollAddress))
			{
				if ((PacketBytes[8] != ByteToWrite)       // Can do polling
				   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
				{
					PollAddress = (CurrAddress & 0xFFFF); // Save the current address
				
					if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
					   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
				}
			}

			// Flash addresses are in words; only increment address on odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();
		}

		PollType = ProgMode;

		if (ProgMode & ISPCC_PROG_MODE_PAGEDONE)         // If this packet is the end of a page, we need to send the program page command
		{
			USI_SPITransmit(PacketBytes[6]);             // Send the write program memory page command
			USI_SPITransmitWord(StartAddress);           // Send the page address word
			USI_SPITransmit(0x00);

			if (!(PollAddress))                          // No polling address
			   PollType = ((ProgMode & ~ISPCC_PAGE_POLLTYPE_MASK) | ISPCC_PAGE_POLLTYPE_WAIT);

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
	else                                                 // Flash Word writing mode or EEPROM byte writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++)
		{
			ByteToWrite = PacketBytes[10 + WriteByte];

			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else
			   USI_SPITransmit(WriteCommand);					
					
			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Transmit the current address to the slave AVR
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			PollType = ProgMode;

			if ((PacketBytes[8] != ByteToWrite)           // Can do polling
			   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
			{
				PollAddress = (CurrAddress & 0xFFFF);     // Save the current address;

				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
				   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
			}
			else
			{
				PollType = ((ProgMode & ~ISPCC_WORD_POLLTYPE_MASK) | ISPCC_WORD_POLLTYPE_WAIT);
			}					

			// Flash addresses are in words; only increment address on the odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
}

void ISPCC_PollForProgComplete(const uint8_t PollData, uint16_t PollAddr)
{
    22b4:	1f 93       	push	r17
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	eb 01       	movw	r28, r22
	uint8_t PollType;
	uint8_t ProgCommand;

	if (PollData & ISPCC_PROG_MODE_PAGE)
    22bc:	99 27       	eor	r25, r25
    22be:	80 ff       	sbrs	r24, 0
    22c0:	08 c0       	rjmp	.+16     	; 0x22d2 <ISPCC_PollForProgComplete+0x1e>
	   PollType = ((PollData & ISPCC_PAGE_POLLTYPE_MASK) >> ISPCC_PAGE_POLLTYPE_MASKSHIFT);
    22c2:	80 77       	andi	r24, 0x70	; 112
    22c4:	90 70       	andi	r25, 0x00	; 0
    22c6:	34 e0       	ldi	r19, 0x04	; 4
    22c8:	95 95       	asr	r25
    22ca:	87 95       	ror	r24
    22cc:	3a 95       	dec	r19
    22ce:	e1 f7       	brne	.-8      	; 0x22c8 <ISPCC_PollForProgComplete+0x14>
    22d0:	04 c0       	rjmp	.+8      	; 0x22da <ISPCC_PollForProgComplete+0x26>
	else
	   PollType = ((PollData & ISPCC_WORD_POLLTYPE_MASK) >> ISPCC_WORD_POLLTYPE_MASKSHIFT);	
    22d2:	8e 70       	andi	r24, 0x0E	; 14
    22d4:	90 70       	andi	r25, 0x00	; 0
    22d6:	95 95       	asr	r25
    22d8:	87 95       	ror	r24

	switch (PollType & ISPCC_POLLTYPE_MASK)
    22da:	99 27       	eor	r25, r25
    22dc:	87 70       	andi	r24, 0x07	; 7
    22de:	90 70       	andi	r25, 0x00	; 0
    22e0:	82 30       	cpi	r24, 0x02	; 2
    22e2:	91 05       	cpc	r25, r1
    22e4:	19 f0       	breq	.+6      	; 0x22ec <ISPCC_PollForProgComplete+0x38>
    22e6:	04 97       	sbiw	r24, 0x04	; 4
    22e8:	e1 f0       	breq	.+56     	; 0x2322 <ISPCC_PollForProgComplete+0x6e>
    22ea:	26 c0       	rjmp	.+76     	; 0x2338 <ISPCC_PollForProgComplete+0x84>
	{
		case ISPCC_POLLTYPE_DATA:
			ProgCommand = PacketBytes[7];
    22ec:	10 91 52 01 	lds	r17, 0x0152
			
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash uses word addresses
    22f0:	80 91 4b 01 	lds	r24, 0x014B
    22f4:	83 31       	cpi	r24, 0x13	; 19
    22f6:	39 f4       	brne	.+14     	; 0x2306 <ISPCC_PollForProgComplete+0x52>
			{
				ProgCommand  |= ((PollAddr & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ);
    22f8:	81 2f       	mov	r24, r17
    22fa:	99 27       	eor	r25, r25
    22fc:	c0 fd       	sbrc	r28, 0
    22fe:	88 60       	ori	r24, 0x08	; 8
    2300:	18 2f       	mov	r17, r24
				PollAddr    >>= 1;
    2302:	d6 95       	lsr	r29
    2304:	c7 95       	ror	r28
			}

			do
			{
				USI_SPITransmit(ProgCommand);
    2306:	81 2f       	mov	r24, r17
    2308:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
				USI_SPITransmitWord(PollAddr);
    230c:	ce 01       	movw	r24, r28
    230e:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
			}
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2318:	90 91 53 01 	lds	r25, 0x0153
    231c:	89 17       	cp	r24, r25
    231e:	99 f3       	breq	.-26     	; 0x2306 <ISPCC_PollForProgComplete+0x52>
			while (USI_SPITransmit(0x00) == PacketBytes[8]);
						
			break;
    2320:	0f c0       	rjmp	.+30     	; 0x2340 <ISPCC_PollForProgComplete+0x8c>
		case ISPCC_POLLTYPE_READY:
			do
			   USI_SPITransmitWord(0xF000);
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 ef       	ldi	r25, 0xF0	; 240
    2326:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2332:	80 fd       	sbrc	r24, 0
    2334:	f6 cf       	rjmp	.-20     	; 0x2322 <ISPCC_PollForProgComplete+0x6e>
			while (USI_SPITransmitWord(0x0000) & ISPCC_POLL_BUSYFLAG);

			break;
    2336:	04 c0       	rjmp	.+8      	; 0x2340 <ISPCC_PollForProgComplete+0x8c>
		default:                                      // Default is Wait polling
			MAIN_Delay1MS(PacketBytes[4]);	
    2338:	80 91 4f 01 	lds	r24, 0x014F
    233c:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	1f 91       	pop	r17
    2346:	08 95       	ret

00002348 <ISPCC_ProgramChip>:
    2348:	6f 92       	push	r6
    234a:	7f 92       	push	r7
    234c:	9f 92       	push	r9
    234e:	af 92       	push	r10
    2350:	bf 92       	push	r11
    2352:	cf 92       	push	r12
    2354:	df 92       	push	r13
    2356:	ef 92       	push	r14
    2358:	ff 92       	push	r15
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	00 e0       	ldi	r16, 0x00	; 0
    2364:	10 e0       	ldi	r17, 0x00	; 0
    2366:	90 90 4e 01 	lds	r9, 0x014E
    236a:	c0 90 50 01 	lds	r12, 0x0150
    236e:	60 90 42 01 	lds	r6, 0x0142
    2372:	70 90 43 01 	lds	r7, 0x0143
    2376:	80 91 4c 01 	lds	r24, 0x014C
    237a:	99 27       	eor	r25, r25
    237c:	b8 2e       	mov	r11, r24
    237e:	aa 24       	eor	r10, r10
    2380:	80 91 4d 01 	lds	r24, 0x014D
    2384:	99 27       	eor	r25, r25
    2386:	a8 2a       	or	r10, r24
    2388:	b9 2a       	or	r11, r25
    238a:	90 fe       	sbrs	r9, 0
    238c:	62 c0       	rjmp	.+196    	; 0x2452 <ISPCC_ProgramChip+0x10a>
    238e:	78 01       	movw	r14, r16
    2390:	0a 15       	cp	r16, r10
    2392:	1b 05       	cpc	r17, r11
    2394:	08 f0       	brcs	.+2      	; 0x2398 <ISPCC_ProgramChip+0x50>
    2396:	46 c0       	rjmp	.+140    	; 0x2424 <ISPCC_ProgramChip+0xdc>
    2398:	c5 e5       	ldi	r28, 0x55	; 85
    239a:	d1 e0       	ldi	r29, 0x01	; 1
    239c:	d9 90       	ld	r13, Y+
    239e:	80 91 4b 01 	lds	r24, 0x014B
    23a2:	83 31       	cpi	r24, 0x13	; 19
    23a4:	31 f4       	brne	.+12     	; 0x23b2 <ISPCC_ProgramChip+0x6a>
    23a6:	8c 2d       	mov	r24, r12
    23a8:	99 27       	eor	r25, r25
    23aa:	e0 fe       	sbrs	r14, 0
    23ac:	03 c0       	rjmp	.+6      	; 0x23b4 <ISPCC_ProgramChip+0x6c>
    23ae:	88 60       	ori	r24, 0x08	; 8
    23b0:	01 c0       	rjmp	.+2      	; 0x23b4 <ISPCC_ProgramChip+0x6c>
    23b2:	8c 2d       	mov	r24, r12
    23b4:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    23b8:	80 91 42 01 	lds	r24, 0x0142
    23bc:	90 91 43 01 	lds	r25, 0x0143
    23c0:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    23c4:	8d 2d       	mov	r24, r13
    23c6:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    23ca:	01 15       	cp	r16, r1
    23cc:	11 05       	cpc	r17, r1
    23ce:	d9 f4       	brne	.+54     	; 0x2406 <ISPCC_ProgramChip+0xbe>
    23d0:	80 91 53 01 	lds	r24, 0x0153
    23d4:	8d 15       	cp	r24, r13
    23d6:	b9 f0       	breq	.+46     	; 0x2406 <ISPCC_ProgramChip+0xbe>
    23d8:	90 91 4b 01 	lds	r25, 0x014B
    23dc:	93 31       	cpi	r25, 0x13	; 19
    23de:	31 f0       	breq	.+12     	; 0x23ec <ISPCC_ProgramChip+0xa4>
    23e0:	95 31       	cpi	r25, 0x15	; 21
    23e2:	89 f4       	brne	.+34     	; 0x2406 <ISPCC_ProgramChip+0xbe>
    23e4:	80 91 54 01 	lds	r24, 0x0154
    23e8:	8d 15       	cp	r24, r13
    23ea:	69 f0       	breq	.+26     	; 0x2406 <ISPCC_ProgramChip+0xbe>
    23ec:	00 91 42 01 	lds	r16, 0x0142
    23f0:	10 91 43 01 	lds	r17, 0x0143
    23f4:	93 31       	cpi	r25, 0x13	; 19
    23f6:	39 f4       	brne	.+14     	; 0x2406 <ISPCC_ProgramChip+0xbe>
    23f8:	00 0f       	add	r16, r16
    23fa:	11 1f       	adc	r17, r17
    23fc:	c7 01       	movw	r24, r14
    23fe:	81 70       	andi	r24, 0x01	; 1
    2400:	90 70       	andi	r25, 0x00	; 0
    2402:	08 0f       	add	r16, r24
    2404:	19 1f       	adc	r17, r25
    2406:	e0 fc       	sbrc	r14, 0
    2408:	04 c0       	rjmp	.+8      	; 0x2412 <ISPCC_ProgramChip+0xca>
    240a:	80 91 4b 01 	lds	r24, 0x014B
    240e:	85 31       	cpi	r24, 0x15	; 21
    2410:	11 f4       	brne	.+4      	; 0x2416 <ISPCC_ProgramChip+0xce>
    2412:	0e 94 54 0f 	call	0x1ea8 <V2P_IncrementCurrAddress>
    2416:	08 94       	sec
    2418:	e1 1c       	adc	r14, r1
    241a:	f1 1c       	adc	r15, r1
    241c:	ea 14       	cp	r14, r10
    241e:	fb 04       	cpc	r15, r11
    2420:	08 f4       	brcc	.+2      	; 0x2424 <ISPCC_ProgramChip+0xdc>
    2422:	bc cf       	rjmp	.-136    	; 0x239c <ISPCC_ProgramChip+0x54>
    2424:	c9 2d       	mov	r28, r9
    2426:	97 fe       	sbrs	r9, 7
    2428:	69 c0       	rjmp	.+210    	; 0x24fc <ISPCC_ProgramChip+0x1b4>
    242a:	80 91 51 01 	lds	r24, 0x0151
    242e:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2432:	c3 01       	movw	r24, r6
    2434:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    243e:	01 15       	cp	r16, r1
    2440:	11 05       	cpc	r17, r1
    2442:	11 f4       	brne	.+4      	; 0x2448 <ISPCC_ProgramChip+0x100>
    2444:	cf 78       	andi	r28, 0x8F	; 143
    2446:	c0 61       	ori	r28, 0x10	; 16
    2448:	b8 01       	movw	r22, r16
    244a:	8c 2f       	mov	r24, r28
    244c:	0e 94 5a 11 	call	0x22b4 <ISPCC_PollForProgComplete>
    2450:	55 c0       	rjmp	.+170    	; 0x24fc <ISPCC_ProgramChip+0x1b4>
    2452:	78 01       	movw	r14, r16
    2454:	0a 15       	cp	r16, r10
    2456:	1b 05       	cpc	r17, r11
    2458:	08 f0       	brcs	.+2      	; 0x245c <ISPCC_ProgramChip+0x114>
    245a:	50 c0       	rjmp	.+160    	; 0x24fc <ISPCC_ProgramChip+0x1b4>
    245c:	55 e5       	ldi	r21, 0x55	; 85
    245e:	65 2e       	mov	r6, r21
    2460:	51 e0       	ldi	r21, 0x01	; 1
    2462:	75 2e       	mov	r7, r21
    2464:	f3 01       	movw	r30, r6
    2466:	d1 90       	ld	r13, Z+
    2468:	3f 01       	movw	r6, r30
    246a:	80 91 4b 01 	lds	r24, 0x014B
    246e:	83 31       	cpi	r24, 0x13	; 19
    2470:	31 f4       	brne	.+12     	; 0x247e <ISPCC_ProgramChip+0x136>
    2472:	8c 2d       	mov	r24, r12
    2474:	99 27       	eor	r25, r25
    2476:	e0 fe       	sbrs	r14, 0
    2478:	03 c0       	rjmp	.+6      	; 0x2480 <ISPCC_ProgramChip+0x138>
    247a:	88 60       	ori	r24, 0x08	; 8
    247c:	01 c0       	rjmp	.+2      	; 0x2480 <ISPCC_ProgramChip+0x138>
    247e:	8c 2d       	mov	r24, r12
    2480:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2484:	80 91 42 01 	lds	r24, 0x0142
    2488:	90 91 43 01 	lds	r25, 0x0143
    248c:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2490:	8d 2d       	mov	r24, r13
    2492:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2496:	c9 2d       	mov	r28, r9
    2498:	80 91 53 01 	lds	r24, 0x0153
    249c:	8d 15       	cp	r24, r13
    249e:	c1 f0       	breq	.+48     	; 0x24d0 <ISPCC_ProgramChip+0x188>
    24a0:	90 91 4b 01 	lds	r25, 0x014B
    24a4:	93 31       	cpi	r25, 0x13	; 19
    24a6:	31 f0       	breq	.+12     	; 0x24b4 <ISPCC_ProgramChip+0x16c>
    24a8:	95 31       	cpi	r25, 0x15	; 21
    24aa:	91 f4       	brne	.+36     	; 0x24d0 <ISPCC_ProgramChip+0x188>
    24ac:	80 91 54 01 	lds	r24, 0x0154
    24b0:	8d 15       	cp	r24, r13
    24b2:	71 f0       	breq	.+28     	; 0x24d0 <ISPCC_ProgramChip+0x188>
    24b4:	00 91 42 01 	lds	r16, 0x0142
    24b8:	10 91 43 01 	lds	r17, 0x0143
    24bc:	93 31       	cpi	r25, 0x13	; 19
    24be:	59 f4       	brne	.+22     	; 0x24d6 <ISPCC_ProgramChip+0x18e>
    24c0:	00 0f       	add	r16, r16
    24c2:	11 1f       	adc	r17, r17
    24c4:	c7 01       	movw	r24, r14
    24c6:	81 70       	andi	r24, 0x01	; 1
    24c8:	90 70       	andi	r25, 0x00	; 0
    24ca:	08 0f       	add	r16, r24
    24cc:	19 1f       	adc	r17, r25
    24ce:	03 c0       	rjmp	.+6      	; 0x24d6 <ISPCC_ProgramChip+0x18e>
    24d0:	c9 2d       	mov	r28, r9
    24d2:	c1 7f       	andi	r28, 0xF1	; 241
    24d4:	c2 60       	ori	r28, 0x02	; 2
    24d6:	e0 fc       	sbrc	r14, 0
    24d8:	04 c0       	rjmp	.+8      	; 0x24e2 <ISPCC_ProgramChip+0x19a>
    24da:	80 91 4b 01 	lds	r24, 0x014B
    24de:	85 31       	cpi	r24, 0x15	; 21
    24e0:	11 f4       	brne	.+4      	; 0x24e6 <ISPCC_ProgramChip+0x19e>
    24e2:	0e 94 54 0f 	call	0x1ea8 <V2P_IncrementCurrAddress>
    24e6:	b8 01       	movw	r22, r16
    24e8:	8c 2f       	mov	r24, r28
    24ea:	0e 94 5a 11 	call	0x22b4 <ISPCC_PollForProgComplete>
    24ee:	08 94       	sec
    24f0:	e1 1c       	adc	r14, r1
    24f2:	f1 1c       	adc	r15, r1
    24f4:	ea 14       	cp	r14, r10
    24f6:	fb 04       	cpc	r15, r11
    24f8:	08 f4       	brcc	.+2      	; 0x24fc <ISPCC_ProgramChip+0x1b4>
    24fa:	b4 cf       	rjmp	.-152    	; 0x2464 <ISPCC_ProgramChip+0x11c>
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	ff 90       	pop	r15
    2506:	ef 90       	pop	r14
    2508:	df 90       	pop	r13
    250a:	cf 90       	pop	r12
    250c:	bf 90       	pop	r11
    250e:	af 90       	pop	r10
    2510:	9f 90       	pop	r9
    2512:	7f 90       	pop	r7
    2514:	6f 90       	pop	r6
    2516:	08 95       	ret

00002518 <AICI_InterpretPacket>:

// ======================================================================================

void AICI_InterpretPacket(void)
{
    2518:	df 92       	push	r13
    251a:	ef 92       	push	r14
    251c:	ff 92       	push	r15
    251e:	0f 93       	push	r16
    2520:	1f 93       	push	r17
    2522:	cf 93       	push	r28
    2524:	df 93       	push	r29
	switch (PacketBytes[0])
    2526:	80 91 4b 01 	lds	r24, 0x014B
    252a:	99 27       	eor	r25, r25
    252c:	86 31       	cpi	r24, 0x16	; 22
    252e:	91 05       	cpc	r25, r1
    2530:	09 f4       	brne	.+2      	; 0x2534 <AICI_InterpretPacket+0x1c>
    2532:	fb c0       	rjmp	.+502    	; 0x272a <AICI_InterpretPacket+0x212>
    2534:	87 31       	cpi	r24, 0x17	; 23
    2536:	91 05       	cpc	r25, r1
    2538:	94 f4       	brge	.+36     	; 0x255e <AICI_InterpretPacket+0x46>
    253a:	82 31       	cpi	r24, 0x12	; 18
    253c:	91 05       	cpc	r25, r1
    253e:	09 f4       	brne	.+2      	; 0x2542 <AICI_InterpretPacket+0x2a>
    2540:	60 c0       	rjmp	.+192    	; 0x2602 <AICI_InterpretPacket+0xea>
    2542:	83 31       	cpi	r24, 0x13	; 19
    2544:	91 05       	cpc	r25, r1
    2546:	3c f4       	brge	.+14     	; 0x2556 <AICI_InterpretPacket+0x3e>
    2548:	80 31       	cpi	r24, 0x10	; 16
    254a:	91 05       	cpc	r25, r1
    254c:	f9 f0       	breq	.+62     	; 0x258c <AICI_InterpretPacket+0x74>
    254e:	41 97       	sbiw	r24, 0x11	; 17
    2550:	09 f4       	brne	.+2      	; 0x2554 <AICI_InterpretPacket+0x3c>
    2552:	3d c0       	rjmp	.+122    	; 0x25ce <AICI_InterpretPacket+0xb6>
    2554:	3e c1       	rjmp	.+636    	; 0x27d2 <AICI_InterpretPacket+0x2ba>
    2556:	44 97       	sbiw	r24, 0x14	; 20
    2558:	09 f4       	brne	.+2      	; 0x255c <AICI_InterpretPacket+0x44>
    255a:	e7 c0       	rjmp	.+462    	; 0x272a <AICI_InterpretPacket+0x212>
    255c:	2f c1       	rjmp	.+606    	; 0x27bc <AICI_InterpretPacket+0x2a4>
    255e:	89 31       	cpi	r24, 0x19	; 25
    2560:	91 05       	cpc	r25, r1
    2562:	09 f4       	brne	.+2      	; 0x2566 <AICI_InterpretPacket+0x4e>
    2564:	cc c0       	rjmp	.+408    	; 0x26fe <AICI_InterpretPacket+0x1e6>
    2566:	8a 31       	cpi	r24, 0x1A	; 26
    2568:	91 05       	cpc	r25, r1
    256a:	44 f4       	brge	.+16     	; 0x257c <AICI_InterpretPacket+0x64>
    256c:	87 31       	cpi	r24, 0x17	; 23
    256e:	91 05       	cpc	r25, r1
    2570:	09 f4       	brne	.+2      	; 0x2574 <AICI_InterpretPacket+0x5c>
    2572:	c5 c0       	rjmp	.+394    	; 0x26fe <AICI_InterpretPacket+0x1e6>
    2574:	48 97       	sbiw	r24, 0x18	; 24
    2576:	09 f4       	brne	.+2      	; 0x257a <AICI_InterpretPacket+0x62>
    2578:	a5 c0       	rjmp	.+330    	; 0x26c4 <AICI_InterpretPacket+0x1ac>
    257a:	2b c1       	rjmp	.+598    	; 0x27d2 <AICI_InterpretPacket+0x2ba>
    257c:	8d 31       	cpi	r24, 0x1D	; 29
    257e:	91 05       	cpc	r25, r1
    2580:	0c f4       	brge	.+2      	; 0x2584 <AICI_InterpretPacket+0x6c>
    2582:	a0 c0       	rjmp	.+320    	; 0x26c4 <AICI_InterpretPacket+0x1ac>
    2584:	4d 97       	sbiw	r24, 0x1d	; 29
    2586:	09 f4       	brne	.+2      	; 0x258a <AICI_InterpretPacket+0x72>
    2588:	61 c0       	rjmp	.+194    	; 0x264c <AICI_InterpretPacket+0x134>
    258a:	23 c1       	rjmp	.+582    	; 0x27d2 <AICI_InterpretPacket+0x2ba>
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	90 93 48 01 	sts	0x0148, r25
    2594:	80 93 47 01 	sts	0x0147, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2598:	a1 e0       	ldi	r26, 0x01	; 1
    259a:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    259c:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
    25a0:	80 2d       	mov	r24, r0
    25a2:	0e 94 83 09 	call	0x1306 <USI_SPIInitMaster>
			
			USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));

			MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);  // Pull the slave AVR's RESET line to active
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
			MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE); // Orange = Busy
    25ac:	81 b3       	in	r24, 0x11	; 17
    25ae:	80 63       	ori	r24, 0x30	; 48
    25b0:	81 bb       	out	0x11, r24	; 17
			ISPCC_EnterChipProgrammingMode();       // Run the Enter Programming Mode routine
    25b2:	0e 94 fc 10 	call	0x21f8 <ISPCC_EnterChipProgrammingMode>

			if (InProgrammingMode)
    25b6:	80 91 46 01 	lds	r24, 0x0146
    25ba:	88 23       	and	r24, r24
    25bc:	19 f0       	breq	.+6      	; 0x25c4 <AICI_InterpretPacket+0xac>
			   LCD_puts_f(AVRISPModeMessage);
    25be:	8c ef       	ldi	r24, 0xFC	; 252
    25c0:	93 e0       	ldi	r25, 0x03	; 3
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <AICI_InterpretPacket+0xb0>
			else
			   LCD_puts_f(SyncErrorMessage);
    25c4:	81 ef       	ldi	r24, 0xF1	; 241
    25c6:	93 e0       	ldi	r25, 0x03	; 3
    25c8:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
			
			break;
    25cc:	0b c1       	rjmp	.+534    	; 0x27e4 <AICI_InterpretPacket+0x2cc>
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;
    25ce:	82 e0       	ldi	r24, 0x02	; 2
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	90 93 48 01 	sts	0x0148, r25
    25d6:	80 93 47 01 	sts	0x0147, r24

			MAIN_Delay1MS(PacketBytes[1]);           // Wait for the "PreDelay" amount specified in the packet
    25da:	80 91 4c 01 	lds	r24, 0x014C
    25de:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Non programming mode = green status led
    25e2:	81 b3       	in	r24, 0x11	; 17
    25e4:	8f 7c       	andi	r24, 0xCF	; 207
    25e6:	80 61       	ori	r24, 0x10	; 16
    25e8:	81 bb       	out	0x11, r24	; 17
			InProgrammingMode = FALSE;
    25ea:	10 92 46 01 	sts	0x0146, r1
			MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
			MAIN_Delay1MS(PacketBytes[2]);           // Wait for the "PostDelay" amount specified in the packet
    25f4:	80 91 4d 01 	lds	r24, 0x014D
    25f8:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
			
			USI_SPIOff();
    25fc:	0e 94 93 09 	call	0x1326 <USI_SPIOff>
    2600:	e5 c0       	rjmp	.+458    	; 0x27cc <AICI_InterpretPacket+0x2b4>

			PacketBytes[1] = STATUS_CMD_OK;      // Return OK

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;
    2602:	82 e0       	ldi	r24, 0x02	; 2
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	90 93 48 01 	sts	0x0148, r25
    260a:	80 93 47 01 	sts	0x0147, r24
			
			for (uint8_t PacketB = 3; PacketB <= 6; PacketB++) // Send the erase commands to the slave AVR
    260e:	c3 e0       	ldi	r28, 0x03	; 3
    2610:	0e e4       	ldi	r16, 0x4E	; 78
    2612:	11 e0       	ldi	r17, 0x01	; 1
				USI_SPITransmit(PacketBytes[PacketB]);
    2614:	f8 01       	movw	r30, r16
    2616:	81 91       	ld	r24, Z+
    2618:	8f 01       	movw	r16, r30
    261a:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    261e:	c1 50       	subi	r28, 0x01	; 1
    2620:	c7 ff       	sbrs	r28, 7
    2622:	f8 cf       	rjmp	.-16     	; 0x2614 <AICI_InterpretPacket+0xfc>

			if (PacketBytes[2])                  // Poll mode, value of 1 indicates a busy flag wait
    2624:	80 91 4d 01 	lds	r24, 0x014D
    2628:	88 23       	and	r24, r24
    262a:	59 f0       	breq	.+22     	; 0x2642 <AICI_InterpretPacket+0x12a>
			{
				do
					USI_SPITransmitWord(0xF000);
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	90 ef       	ldi	r25, 0xF0	; 240
    2630:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    263c:	80 fd       	sbrc	r24, 0
    263e:	f6 cf       	rjmp	.-20     	; 0x262c <AICI_InterpretPacket+0x114>
    2640:	c5 c0       	rjmp	.+394    	; 0x27cc <AICI_InterpretPacket+0x2b4>
				while (USI_SPITransmitWord(0x0000) & 0x01);
			}
			else                                // Poll mode flag of 0 indicates a predefined delay
			{
				MAIN_Delay1MS(PacketBytes[1]);   // Wait the specified interval to ensure erase complete
    2642:	80 91 4c 01 	lds	r24, 0x014C
    2646:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    264a:	c0 c0       	rjmp	.+384    	; 0x27cc <AICI_InterpretPacket+0x2b4>
			}
			
			PacketBytes[1] = STATUS_CMD_OK;      // Always return OK
			
			break;
		case CMD_SPI_MULTI:
				MessageSize = (3 + PacketBytes[2]);    // Number of recieved bytes, plus two OKs and the command byte
    264c:	e0 90 4d 01 	lds	r14, 0x014D
    2650:	8e 2d       	mov	r24, r14
    2652:	99 27       	eor	r25, r25
    2654:	03 96       	adiw	r24, 0x03	; 3
    2656:	90 93 48 01 	sts	0x0148, r25
    265a:	80 93 47 01 	sts	0x0147, r24
		
				uint8_t TxBytes      = PacketBytes[1]; // \. The packet data is overwritten during the transfer. Because
    265e:	00 91 4c 01 	lds	r16, 0x014C
				uint8_t RxStartByte  = PacketBytes[2]; // |  of this each data byte must be stored into temp variables
				uint8_t RxBytes      = PacketBytes[3]; // /  so that their contents are not lost.
    2662:	f0 90 4e 01 	lds	r15, 0x014E
				uint8_t RxByteNum    = 1;
    2666:	c1 e0       	ldi	r28, 0x01	; 1
				uint8_t TxByteNum    = 1;
				uint8_t RecievedByte = 0;

				while (TxByteNum++ < TxBytes)          // Still bytes to transfer
				{
					RecievedByte = USI_SPITransmit(PacketBytes[3 + TxByteNum]); // Transmit the byte, store the answer

					if ((TxByteNum >= RxStartByte) && (RxByteNum < RxBytes))
					   PacketBytes[2 + RxByteNum++] = RecievedByte;
    2668:	12 e0       	ldi	r17, 0x02	; 2
    266a:	c0 17       	cp	r28, r16
    266c:	a8 f4       	brcc	.+42     	; 0x2698 <AICI_InterpretPacket+0x180>
    266e:	e1 2f       	mov	r30, r17
    2670:	ff 27       	eor	r31, r31
    2672:	e5 5b       	subi	r30, 0xB5	; 181
    2674:	fe 4f       	sbci	r31, 0xFE	; 254
    2676:	83 81       	ldd	r24, Z+3	; 0x03
    2678:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    267c:	1e 15       	cp	r17, r14
    267e:	40 f0       	brcs	.+16     	; 0x2690 <AICI_InterpretPacket+0x178>
    2680:	cf 15       	cp	r28, r15
    2682:	30 f4       	brcc	.+12     	; 0x2690 <AICI_InterpretPacket+0x178>
    2684:	ec 2f       	mov	r30, r28
    2686:	ff 27       	eor	r31, r31
    2688:	e5 5b       	subi	r30, 0xB5	; 181
    268a:	fe 4f       	sbci	r31, 0xFE	; 254
    268c:	82 83       	std	Z+2, r24	; 0x02
    268e:	cf 5f       	subi	r28, 0xFF	; 255
    2690:	81 2f       	mov	r24, r17
    2692:	1f 5f       	subi	r17, 0xFF	; 255
    2694:	80 17       	cp	r24, r16
    2696:	58 f3       	brcs	.-42     	; 0x266e <AICI_InterpretPacket+0x156>
				}

				while (RxByteNum++ < RxBytes)                         // Still more bytes to recieve
				   PacketBytes[2 + RxByteNum] = USI_SPITransmit(0x00); // its answer to be recorded (or more bytes than sent need responses), send dummy bytes to fetch the response(s)
    2698:	8c 2f       	mov	r24, r28
    269a:	cf 5f       	subi	r28, 0xFF	; 255
    269c:	8f 15       	cp	r24, r15
    269e:	50 f4       	brcc	.+20     	; 0x26b4 <AICI_InterpretPacket+0x19c>
    26a0:	0c 2f       	mov	r16, r28
    26a2:	11 27       	eor	r17, r17
    26a4:	05 5b       	subi	r16, 0xB5	; 181
    26a6:	1e 4f       	sbci	r17, 0xFE	; 254
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    26ae:	f8 01       	movw	r30, r16
    26b0:	82 83       	std	Z+2, r24	; 0x02
    26b2:	f2 cf       	rjmp	.-28     	; 0x2698 <AICI_InterpretPacket+0x180>

				PacketBytes[1]             = STATUS_CMD_OK; // Data should be encompassed
    26b4:	10 92 4c 01 	sts	0x014C, r1
				PacketBytes[3 + RxByteNum] = STATUS_CMD_OK; //  by STATS_CMD_OKs
    26b8:	ec 2f       	mov	r30, r28
    26ba:	ff 27       	eor	r31, r31
    26bc:	e5 5b       	subi	r30, 0xB5	; 181
    26be:	fe 4f       	sbci	r31, 0xFE	; 254
    26c0:	13 82       	std	Z+3, r1	; 0x03

				break;
    26c2:	90 c0       	rjmp	.+288    	; 0x27e4 <AICI_InterpretPacket+0x2cc>
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;
    26c4:	84 e0       	ldi	r24, 0x04	; 4
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	90 93 48 01 	sts	0x0148, r25
    26cc:	80 93 47 01 	sts	0x0147, r24
	
			for (uint8_t ByteNum = 1; ByteNum <= 4; ByteNum++)
    26d0:	c1 e0       	ldi	r28, 0x01	; 1
    26d2:	0d e4       	ldi	r16, 0x4D	; 77
    26d4:	11 e0       	ldi	r17, 0x01	; 1
			{
				uint8_t Response = USI_SPITransmit(PacketBytes[1 + ByteNum]); // Transmit the four signature request bytes
    26d6:	f8 01       	movw	r30, r16
    26d8:	81 91       	ld	r24, Z+
    26da:	8f 01       	movw	r16, r30
    26dc:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    26e0:	98 2f       	mov	r25, r24

				if (ByteNum == PacketBytes[1])         // If the current byte is the requested signature byte, save the reponse in the packet
    26e2:	80 91 4c 01 	lds	r24, 0x014C
    26e6:	c8 17       	cp	r28, r24
    26e8:	11 f4       	brne	.+4      	; 0x26ee <AICI_InterpretPacket+0x1d6>
					PacketBytes[2] = Response;
    26ea:	90 93 4d 01 	sts	0x014D, r25
    26ee:	cf 5f       	subi	r28, 0xFF	; 255
    26f0:	c5 30       	cpi	r28, 0x05	; 5
    26f2:	88 f3       	brcs	.-30     	; 0x26d6 <AICI_InterpretPacket+0x1be>
			}

			PacketBytes[1] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    26f4:	10 92 4c 01 	sts	0x014C, r1
			PacketBytes[3] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    26f8:	10 92 4e 01 	sts	0x014E, r1

			break;
    26fc:	73 c0       	rjmp	.+230    	; 0x27e4 <AICI_InterpretPacket+0x2cc>
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;
    26fe:	83 e0       	ldi	r24, 0x03	; 3
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	90 93 48 01 	sts	0x0148, r25
    2706:	80 93 47 01 	sts	0x0147, r24
    270a:	0c e4       	ldi	r16, 0x4C	; 76
    270c:	11 e0       	ldi	r17, 0x01	; 1
    270e:	c3 e0       	ldi	r28, 0x03	; 3
			
			for (uint8_t PacketB = 1; PacketB <= 4; PacketB++) // Send the lock-byte values to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    2710:	f8 01       	movw	r30, r16
    2712:	81 91       	ld	r24, Z+
    2714:	8f 01       	movw	r16, r30
    2716:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    271a:	c1 50       	subi	r28, 0x01	; 1
    271c:	c7 ff       	sbrs	r28, 7
    271e:	f8 cf       	rjmp	.-16     	; 0x2710 <AICI_InterpretPacket+0x1f8>

			PacketBytes[1] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    2720:	10 92 4c 01 	sts	0x014C, r1
			PacketBytes[2] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    2724:	10 92 4d 01 	sts	0x014D, r1

			break;
    2728:	5d c0       	rjmp	.+186    	; 0x27e4 <AICI_InterpretPacket+0x2cc>
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			MessageSize = 0;                           // Here to prevent compiler from complaining if a var dec appears straight after a case

			uint8_t  ReadCommand = PacketBytes[3];
    272a:	d0 90 4e 01 	lds	r13, 0x014E
			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8) // Load in the number of bytes that is to
    272e:	80 91 4c 01 	lds	r24, 0x014C
    2732:	99 27       	eor	r25, r25
    2734:	d8 2f       	mov	r29, r24
    2736:	cc 27       	eor	r28, r28
    2738:	80 91 4d 01 	lds	r24, 0x014D
    273c:	99 27       	eor	r25, r25
    273e:	c8 2b       	or	r28, r24
    2740:	d9 2b       	or	r29, r25
			                     | PacketBytes[2];                 // be read into a temp variable (MSB first)

			MessageSize = BytesToRead + 3;
    2742:	23 96       	adiw	r28, 0x03	; 3
    2744:	d0 93 48 01 	sts	0x0148, r29
    2748:	c0 93 47 01 	sts	0x0147, r28
    274c:	23 97       	sbiw	r28, 0x03	; 3

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
    274e:	00 e0       	ldi	r16, 0x00	; 0
    2750:	10 e0       	ldi	r17, 0x00	; 0
    2752:	0c 17       	cp	r16, r28
    2754:	1d 07       	cpc	r17, r29
    2756:	60 f5       	brcc	.+88     	; 0x27b0 <AICI_InterpretPacket+0x298>
    2758:	8d e4       	ldi	r24, 0x4D	; 77
    275a:	e8 2e       	mov	r14, r24
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	f8 2e       	mov	r15, r24
			{
				if (PacketBytes[0] == CMD_READ_FLASH_ISP)  // Flash read mode - word addresses so MSB/LSB masking nessesary
    2760:	80 91 4b 01 	lds	r24, 0x014B
    2764:	84 31       	cpi	r24, 0x14	; 20
    2766:	31 f4       	brne	.+12     	; 0x2774 <AICI_InterpretPacket+0x25c>
				{
					USI_SPITransmit(ReadCommand | ((ReadByte & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ));
    2768:	8d 2d       	mov	r24, r13
    276a:	99 27       	eor	r25, r25
    276c:	00 ff       	sbrs	r16, 0
    276e:	03 c0       	rjmp	.+6      	; 0x2776 <AICI_InterpretPacket+0x25e>
    2770:	88 60       	ori	r24, 0x08	; 8
    2772:	01 c0       	rjmp	.+2      	; 0x2776 <AICI_InterpretPacket+0x25e>
				}
				else                                       // EEPROM read mode, address is in bytes and so no masking nessesary
				{
					USI_SPITransmit(ReadCommand);
    2774:	8d 2d       	mov	r24, r13
    2776:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
				}
				
				USI_SPITransmitWord(CurrAddress);          // Transmit the current address to the slave AVR
    277a:	80 91 42 01 	lds	r24, 0x0142
    277e:	90 91 43 01 	lds	r25, 0x0143
    2782:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>

				PacketBytes[2 + ReadByte] = USI_SPITransmit(0x00); // Read in the byte stored at the requested location
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    278c:	f7 01       	movw	r30, r14
    278e:	80 83       	st	Z, r24

				if ((ReadByte & 0x01) || (PacketBytes[0] == CMD_READ_EEPROM_ISP)) // Flash addresses are given in words; only increment on the odd byte if reading the flash.
    2790:	00 fd       	sbrc	r16, 0
    2792:	04 c0       	rjmp	.+8      	; 0x279c <AICI_InterpretPacket+0x284>
    2794:	80 91 4b 01 	lds	r24, 0x014B
    2798:	86 31       	cpi	r24, 0x16	; 22
    279a:	11 f4       	brne	.+4      	; 0x27a0 <AICI_InterpretPacket+0x288>
				{
					V2P_IncrementCurrAddress();             // Increment the address counter
    279c:	0e 94 54 0f 	call	0x1ea8 <V2P_IncrementCurrAddress>
    27a0:	0f 5f       	subi	r16, 0xFF	; 255
    27a2:	1f 4f       	sbci	r17, 0xFF	; 255
    27a4:	08 94       	sec
    27a6:	e1 1c       	adc	r14, r1
    27a8:	f1 1c       	adc	r15, r1
    27aa:	0c 17       	cp	r16, r28
    27ac:	1d 07       	cpc	r17, r29
    27ae:	c0 f2       	brcs	.-80     	; 0x2760 <AICI_InterpretPacket+0x248>
				}
				else
				{
					if ((CurrAddress & 0x00FF0000) & !(CurrAddress & 0x0000FFFF))
					{
						CurrAddress |= (1UL << 31);        // Set MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
						V2P_CheckForExtendedAddress();
					}
				}
			}
			
			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    27b0:	10 92 4c 01 	sts	0x014C, r1
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    27b4:	c5 5b       	subi	r28, 0xB5	; 181
    27b6:	de 4f       	sbci	r29, 0xFE	; 254
    27b8:	1a 82       	std	Y+2, r1	; 0x02

			break;
    27ba:	14 c0       	rjmp	.+40     	; 0x27e4 <AICI_InterpretPacket+0x2cc>
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPCC_ProgramChip();                          // Program the bytes into the chip
    27bc:	0e 94 a4 11 	call	0x2348 <ISPCC_ProgramChip>
			
			MessageSize = 2;
    27c0:	82 e0       	ldi	r24, 0x02	; 2
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	90 93 48 01 	sts	0x0148, r25
    27c8:	80 93 47 01 	sts	0x0147, r24

			PacketBytes[1] = STATUS_CMD_OK;
    27cc:	10 92 4c 01 	sts	0x014C, r1
			
			break;
    27d0:	09 c0       	rjmp	.+18     	; 0x27e4 <AICI_InterpretPacket+0x2cc>
		default:                                        // Unknown command, return error
			MessageSize = 1;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	90 93 48 01 	sts	0x0148, r25
    27da:	80 93 47 01 	sts	0x0147, r24
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
    27de:	89 ec       	ldi	r24, 0xC9	; 201
    27e0:	80 93 4c 01 	sts	0x014C, r24
	}

	V2P_SendPacket();                                   // Send the response packet
    27e4:	0e 94 73 0e 	call	0x1ce6 <V2P_SendPacket>
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	1f 91       	pop	r17
    27ee:	0f 91       	pop	r16
    27f0:	ff 90       	pop	r15
    27f2:	ef 90       	pop	r14
    27f4:	df 90       	pop	r13
    27f6:	08 95       	ret

000027f8 <PM_GetStoredDataSize>:

// ======================================================================================

uint32_t PM_GetStoredDataSize(const uint8_t Type)
{
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	24 97       	sbiw	r28, 0x04	; 4
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
	/* This take a **LOT** of code and is accessed several times throughout
	   the program, so I've put it into a seperate function to save on flash. */

	uint32_t ProgDataSize = 0;
    280c:	19 82       	std	Y+1, r1	; 0x01
    280e:	1a 82       	std	Y+2, r1	; 0x02
    2810:	1b 82       	std	Y+3, r1	; 0x03
    2812:	1c 82       	std	Y+4, r1	; 0x04
void 
eeprom_read_block (void *pointer_ram,
                   const void *pointer_eeprom,
                   size_t n)
{
    2814:	fe 01       	movw	r30, r28
    2816:	31 96       	adiw	r30, 0x01	; 1
    2818:	81 30       	cpi	r24, 0x01	; 1
    281a:	19 f4       	brne	.+6      	; 0x2822 <PM_GetStoredDataSize+0x2a>
    281c:	ab e1       	ldi	r26, 0x1B	; 27
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <PM_GetStoredDataSize+0x2e>
    2822:	af e1       	ldi	r26, 0x1F	; 31
    2824:	b0 e0       	ldi	r27, 0x00	; 0
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
             XCALL " __eeprom_read_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "st z+,__tmp_reg__" CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                  XCALL " __eeprom_read_block_" _REG_LOCATION_SUFFIX 
                : "+x" (pointer_eeprom),
                  "=z" (pointer_ram)
                : "z"  (pointer_ram)
                : "memory");
            }
          else
            {
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 
    2826:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    2828:	18 2e       	mov	r1, r24
    282a:	0e 94 a2 1a 	call	0x3544 <__eeprom_read_block_1F2021>

	eeprom_read_block((void*)&ProgDataSize, (const void*)((Type == TYPE_FLASH)? &EEPROMVars.DataSize : &EEPROMVars.EEPROMSize), 4);

	if (ProgDataSize == 0xFFFFFFFF)                                      // Blank EEPROM, return a size  of 0 bytes
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	9a 81       	ldd	r25, Y+2	; 0x02
    2832:	ab 81       	ldd	r26, Y+3	; 0x03
    2834:	bc 81       	ldd	r27, Y+4	; 0x04
    2836:	8f 5f       	subi	r24, 0xFF	; 255
    2838:	9f 4f       	sbci	r25, 0xFF	; 255
    283a:	af 4f       	sbci	r26, 0xFF	; 255
    283c:	bf 4f       	sbci	r27, 0xFF	; 255
    283e:	21 f4       	brne	.+8      	; 0x2848 <PM_GetStoredDataSize+0x50>
	   ProgDataSize = 0x00;
    2840:	19 82       	std	Y+1, r1	; 0x01
    2842:	1a 82       	std	Y+2, r1	; 0x02
    2844:	1b 82       	std	Y+3, r1	; 0x03
    2846:	1c 82       	std	Y+4, r1	; 0x04

	return ProgDataSize;
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	ab 81       	ldd	r26, Y+3	; 0x03
    284e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	24 96       	adiw	r28, 0x04	; 4
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	08 95       	ret

00002866 <PM_SetupDFAddressCounters>:

void PM_SetupDFAddressCounters(const uint8_t Type)
{
	uint32_t StartAddress;
	
	MemoryType  = Type;
    2866:	80 93 61 02 	sts	0x0261, r24
	GPageLength = 0;
    286a:	10 92 5f 02 	sts	0x025F, r1
    286e:	10 92 5e 02 	sts	0x025E, r1
    2872:	20 91 42 01 	lds	r18, 0x0142
    2876:	30 91 43 01 	lds	r19, 0x0143
    287a:	40 91 44 01 	lds	r20, 0x0144
    287e:	50 91 45 01 	lds	r21, 0x0145

	if (Type == TYPE_FLASH)                                              // Type 1 = Flash
    2882:	81 30       	cpi	r24, 0x01	; 1
    2884:	39 f4       	brne	.+14     	; 0x2894 <PM_SetupDFAddressCounters+0x2e>
		StartAddress = (CurrAddress << 1);                               // Convert flash word address to byte address
    2886:	da 01       	movw	r26, r20
    2888:	c9 01       	movw	r24, r18
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	aa 1f       	adc	r26, r26
    2890:	bb 1f       	adc	r27, r27
    2892:	06 c0       	rjmp	.+12     	; 0x28a0 <PM_SetupDFAddressCounters+0x3a>
	else
		StartAddress = CurrAddress + PM_EEPROM_OFFSET;                   // EEPROM uses byte addresses, and starts at the 257th kilobyte in Dataflash
    2894:	da 01       	movw	r26, r20
    2896:	c9 01       	movw	r24, r18
    2898:	80 50       	subi	r24, 0x00	; 0
    289a:	9c 4f       	sbci	r25, 0xFC	; 252
    289c:	ab 4f       	sbci	r26, 0xFB	; 251
    289e:	bf 4f       	sbci	r27, 0xFF	; 255
	
	CurrPageAddress = 0;
    28a0:	10 92 6e 02 	sts	0x026E, r1
    28a4:	10 92 6d 02 	sts	0x026D, r1

	while (StartAddress >= DF_INTERNALDF_BUFFBYTES)                      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DF_INTERNALDF_BUFFBYTES;                         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    28a8:	88 30       	cpi	r24, 0x08	; 8
    28aa:	21 e0       	ldi	r18, 0x01	; 1
    28ac:	92 07       	cpc	r25, r18
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	a2 07       	cpc	r26, r18
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	b2 07       	cpc	r27, r18
    28b6:	a0 f0       	brcs	.+40     	; 0x28e0 <PM_SetupDFAddressCounters+0x7a>
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	88 50       	subi	r24, 0x08	; 8
    28be:	91 40       	sbci	r25, 0x01	; 1
    28c0:	a0 40       	sbci	r26, 0x00	; 0
    28c2:	b0 40       	sbci	r27, 0x00	; 0
    28c4:	2f 5f       	subi	r18, 0xFF	; 255
    28c6:	3f 4f       	sbci	r19, 0xFF	; 255
    28c8:	88 30       	cpi	r24, 0x08	; 8
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	94 07       	cpc	r25, r20
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	a4 07       	cpc	r26, r20
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	b4 07       	cpc	r27, r20
    28d6:	90 f7       	brcc	.-28     	; 0x28bc <PM_SetupDFAddressCounters+0x56>
    28d8:	30 93 6e 02 	sts	0x026E, r19
    28dc:	20 93 6d 02 	sts	0x026D, r18
	}
	
	CurrBuffByte = (uint16_t)StartAddress;                               // The buffer byte is the remainder
    28e0:	90 93 67 02 	sts	0x0267, r25
    28e4:	80 93 66 02 	sts	0x0266, r24
    28e8:	08 95       	ret

000028ea <PM_StoreProgramByte>:
}

void PM_StoreProgramByte(const uint8_t Data)
{
    28ea:	cf 93       	push	r28
    28ec:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DF_INTERNALDF_BUFFBYTES)
    28ee:	80 91 66 02 	lds	r24, 0x0266
    28f2:	90 91 67 02 	lds	r25, 0x0267
    28f6:	88 50       	subi	r24, 0x08	; 8
    28f8:	91 40       	sbci	r25, 0x01	; 1
    28fa:	a9 f4       	brne	.+42     	; 0x2926 <PM_StoreProgramByte+0x3c>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    28fc:	80 91 6d 02 	lds	r24, 0x026D
    2900:	90 91 6e 02 	lds	r25, 0x026E
    2904:	9c 01       	movw	r18, r24
    2906:	01 96       	adiw	r24, 0x01	; 1
    2908:	90 93 6e 02 	sts	0x026E, r25
    290c:	80 93 6d 02 	sts	0x026D, r24
    2910:	c9 01       	movw	r24, r18
    2912:	0e 94 e7 0a 	call	0x15ce <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0e 94 53 0a 	call	0x14a6 <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    291e:	10 92 67 02 	sts	0x0267, r1
    2922:	10 92 66 02 	sts	0x0266, r1
	}
	
	SPI_SPITransmit(Data);                                               // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    2926:	8c 2f       	mov	r24, r28
    2928:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
	CurrBuffByte++;
    292c:	80 91 66 02 	lds	r24, 0x0266
    2930:	90 91 67 02 	lds	r25, 0x0267
    2934:	01 96       	adiw	r24, 0x01	; 1
    2936:	90 93 67 02 	sts	0x0267, r25
    293a:	80 93 66 02 	sts	0x0266, r24
	GPageLength++;
    293e:	80 91 5e 02 	lds	r24, 0x025E
    2942:	90 91 5f 02 	lds	r25, 0x025F
    2946:	01 96       	adiw	r24, 0x01	; 1
    2948:	90 93 5f 02 	sts	0x025F, r25
    294c:	80 93 5e 02 	sts	0x025E, r24
    2950:	cf 91       	pop	r28
    2952:	08 95       	ret

00002954 <PM_CheckEndOfProgramming>:
}

void PM_InterpretAVRISPPacket(void)
{
	uint8_t* EEPROMAddress;

	switch (PacketBytes[0])
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
						
			for (uint8_t PacketB = 0; PacketB <= 11; PacketB++)          // Save the enter programming mode command bytes
			  eeprom_write_byte(&EEPROMVars.EnterProgMode[PacketB], PacketBytes[PacketB]);
			
			InProgrammingMode = TRUE;                                    // Set the flag, prevent the user from exiting the V2P state machine			
			CurrentMode = PM_NO_SETUP;                                   // Clear the current mode variable

			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;

			break;			
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;

			PM_CheckEndOfProgramming();                                  // Check if the last command was a program - if so store the program length
			PM_CheckEndOfFuseLockStore();                                // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
			
			InProgrammingMode = FALSE;                                   // Clear the flag, allow the user to exit the V2P state machine

			DF_EnableDataflash(FALSE);

			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
			PacketBytes[1] = STATUS_CMD_OK;

			break;
		case CMD_READ_SIGNATURE_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x01;                                       // Signature bytes all return "01" in storage mode
			PacketBytes[3] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;

			for (uint8_t PacketB = 1; PacketB <= 6; PacketB++)          // Save the erase chip command bytes to EEPROM
			  eeprom_write_byte(&EEPROMVars.EraseChip[PacketB], PacketBytes[PacketB]);

			for (uint8_t Byte = 0; Byte < 8; Byte++)                    // Clear the program and EEPROM size counters
			{
				eeprom_write_byte(&EEPROMVars.DataSize[Byte], 0x00);
				eeprom_write_byte(&EEPROMVars.EEPROMSize[Byte], 0x00);
			}
						
			eeprom_write_byte(&EEPROMVars.EraseCmdStored, TRUE);
			
			PacketBytes[1] = STATUS_CMD_OK;
			
			break;
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x00;                                      // Return 0x00 for the OSCCAL byte
			PacketBytes[3] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs

			break;
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
			MessageSize = 4;
	
			if (CurrentMode != PM_LOCKFUSEBITS_READ)                    // First lock or fuse byte being read, set the EEPROM pointer
			{
				PM_CheckEndOfProgramming();                             // Check if the last command was a program - if so store the program length
				PM_CheckEndOfFuseLockStore();                           // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
				
				CurrBuffByte = 0;
				CurrentMode  = PM_LOCKFUSEBITS_READ;
			}
			
			if (CurrBuffByte > eeprom_read_byte((PacketBytes[0] == CMD_READ_FUSE_ISP)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes))  // Trying to read more fuse/lock bytes than are stored in memory
			{
				PacketBytes[2] = 0xFF;                                  // Return 0xFF for the fuse/lock byte
			}
			else
			{
				PacketBytes[2] = eeprom_read_byte((uint8_t*)(((PacketBytes[0] == CMD_READ_FUSE_ISP)? &EEPROMVars.FuseBytes : &EEPROMVars.LockBytes) // Starting location
									                         + (CurrBuffByte << 2) + (PacketBytes[1] - 1)));                                        // The start position of the actual fuse/lock byte to read (4 bytes each));
			}

			PacketBytes[1] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs
			PacketBytes[3] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs

			CurrBuffByte++;

			break;
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;

			if (CurrentMode != PM_LOCKFUSEBITS_WRITE)                  // First lock or fuse byte being written, set the EEPROM pointer
			{
				CurrentMode   = PM_LOCKFUSEBITS_WRITE;
				CurrBuffByte  = 0;                                     // CurrBuffByte is used to store the total fuse/lock bytes written
			}

			if (PacketBytes[0] == CMD_PROGRAM_FUSE_ISP)
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.FuseBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_FUSE;
			}
			else
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.LockBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_LOCK;
			}				
			
			if (CurrBuffByte < PM_MAX_FUSELOCKBITS)
			{
				for (uint8_t FLByte = 1; FLByte <= 4; FLByte++)
				{
					eeprom_write_byte(EEPROMAddress, PacketBytes[FLByte]);
					EEPROMAddress++;
				}

				CurrBuffByte++;                                        // Increment the total fuse/lock bytes written counter
			}
			
			PacketBytes[1] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned
			PacketBytes[2] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned

			break;
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			MessageSize = 2;

			if (CurrentMode != PM_DATAFLASH_WRITE)                     // First programming packet
			{
				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)           // Flash programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram; // Set the eeprom address to the Program command bytes location
					PM_SetupDFAddressCounters(TYPE_FLASH);
				}
				else                                                   // EEPROM programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;  // Set the eeprom address to the EEPROM command bytes location
					PM_SetupDFAddressCounters(TYPE_EEPROM);
				}
				
				DF_BufferWriteEnable(CurrBuffByte);
				CurrentMode = PM_DATAFLASH_WRITE;
				
				for (uint8_t B = 1; B <= 9; B++)                       // Save the command bytes
				  eeprom_write_byte(EEPROMAddress, PacketBytes[B]);
			}

			uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
			                      | PacketBytes[2];

			for (uint16_t CurrByte = 0; CurrByte < BytesToWrite; CurrByte++)
				PM_StoreProgramByte(PacketBytes[10 + CurrByte]);

			if (!(GPageLength & PM_PAGELENGTH_FOUNDBIT) && (PacketBytes[3] & ISPCC_PROG_MODE_PAGEDONE) && GPageLength)
			{
				eeprom_write_word(((MemoryType == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength), GPageLength);
		
				GPageLength |= PM_PAGELENGTH_FOUNDBIT;                 // Bit 15 is used to indicate if the length has been found
			}

			PacketBytes[1] = STATUS_CMD_OK;
		
			break;
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:	
			if (CurrentMode != PM_DATAFLASH_READ)
			{
				PM_CheckEndOfProgramming();                           // Check if the last command was a program - if so store the program length
				PM_CheckEndOfFuseLockStore();                         // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
				
				PM_SetupDFAddressCounters((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);
				DF_ContinuousReadEnable(CurrPageAddress, CurrBuffByte);
				
				CurrentMode = PM_DATAFLASH_READ;
				CurrAddress = 0;
			}

			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8)    // \. Load in the number of bytes that is to
			                     | PacketBytes[2];                    // /  be read into a temp variable (MSB first)
						
			uint16_t BytesInMem  = PM_GetStoredDataSize((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
			   PacketBytes[2 + ReadByte] = ((CurrAddress < BytesInMem)? SPI_SPITransmit(0x00) : 0xFF); // Read in the next dataflash byte if present
			   V2P_IncrementCurrAddress();
			}
			
			MessageSize = BytesToRead + 3;

			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
		
			break;
		default:
			MessageSize = 1;
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
	}

	V2P_SendPacket();                                   // Send the response packet
}

void PM_CheckEndOfProgramming(void)
{
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	24 97       	sbiw	r28, 0x04	; 4
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
	uint8_t* EEPROMAddress;

	if (CurrentMode == PM_DATAFLASH_WRITE)
    2968:	80 91 60 02 	lds	r24, 0x0260
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	09 f0       	breq	.+2      	; 0x2972 <PM_CheckEndOfProgramming+0x1e>
    2970:	41 c0       	rjmp	.+130    	; 0x29f4 <PM_CheckEndOfProgramming+0xa0>
	{
		if (CurrBuffByte)                               // Data in the dataflash buffer, pending to be written
    2972:	80 91 66 02 	lds	r24, 0x0266
    2976:	90 91 67 02 	lds	r25, 0x0267
    297a:	89 2b       	or	r24, r25
    297c:	31 f0       	breq	.+12     	; 0x298a <PM_CheckEndOfProgramming+0x36>
		  DF_CopyBufferToFlashPage(CurrPageAddress);   // Save the buffer
    297e:	80 91 6d 02 	lds	r24, 0x026D
    2982:	90 91 6e 02 	lds	r25, 0x026E
    2986:	0e 94 e7 0a 	call	0x15ce <DF_CopyBufferToFlashPage>

		uint32_t DataSize = ((uint32_t)CurrPageAddress * DF_INTERNALDF_BUFFBYTES) + CurrBuffByte;
    298a:	80 91 6d 02 	lds	r24, 0x026D
    298e:	90 91 6e 02 	lds	r25, 0x026E
    2992:	aa 27       	eor	r26, r26
    2994:	bb 27       	eor	r27, r27
    2996:	bc 01       	movw	r22, r24
    2998:	cd 01       	movw	r24, r26
    299a:	28 e0       	ldi	r18, 0x08	; 8
    299c:	31 e0       	ldi	r19, 0x01	; 1
    299e:	40 e0       	ldi	r20, 0x00	; 0
    29a0:	50 e0       	ldi	r21, 0x00	; 0
    29a2:	0e 94 7b 1a 	call	0x34f6 <__mulsi3>
    29a6:	9b 01       	movw	r18, r22
    29a8:	ac 01       	movw	r20, r24
    29aa:	80 91 66 02 	lds	r24, 0x0266
    29ae:	90 91 67 02 	lds	r25, 0x0267
    29b2:	aa 27       	eor	r26, r26
    29b4:	bb 27       	eor	r27, r27
    29b6:	28 0f       	add	r18, r24
    29b8:	39 1f       	adc	r19, r25
    29ba:	4a 1f       	adc	r20, r26
    29bc:	5b 1f       	adc	r21, r27
    29be:	29 83       	std	Y+1, r18	; 0x01
    29c0:	3a 83       	std	Y+2, r19	; 0x02
    29c2:	4b 83       	std	Y+3, r20	; 0x03
    29c4:	5c 83       	std	Y+4, r21	; 0x04

		if (MemoryType == TYPE_FLASH)
    29c6:	80 91 61 02 	lds	r24, 0x0261
    29ca:	81 30       	cpi	r24, 0x01	; 1
    29cc:	19 f4       	brne	.+6      	; 0x29d4 <PM_CheckEndOfProgramming+0x80>
		{
			EEPROMAddress = (uint8_t*)&EEPROMVars.DataSize;       
    29ce:	ab e1       	ldi	r26, 0x1B	; 27
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	0a c0       	rjmp	.+20     	; 0x29e8 <PM_CheckEndOfProgramming+0x94>
		}
		else
		{
			EEPROMAddress = (uint8_t*)&EEPROMVars.EEPROMSize;
    29d4:	af e1       	ldi	r26, 0x1F	; 31
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
			DataSize -= PM_EEPROM_OFFSET;                // Remove DataFlash starting offset
    29d8:	20 50       	subi	r18, 0x00	; 0
    29da:	34 40       	sbci	r19, 0x04	; 4
    29dc:	44 40       	sbci	r20, 0x04	; 4
    29de:	50 40       	sbci	r21, 0x00	; 0
    29e0:	29 83       	std	Y+1, r18	; 0x01
    29e2:	3a 83       	std	Y+2, r19	; 0x02
    29e4:	4b 83       	std	Y+3, r20	; 0x03
    29e6:	5c 83       	std	Y+4, r21	; 0x04
void 
eeprom_write_block (const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t n)
{
    29e8:	fe 01       	movw	r30, r28
    29ea:	31 96       	adiw	r30, 0x01	; 1
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
            "ld __tmp_reg__,z+" CR_TAB
             XCALL " __eeprom_write_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      /* Do nothing for compile time constant transfer size n == 0.  */
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                 XCALL " __eeprom_write_block_" _REG_LOCATION_SUFFIX
               : "+x" (pointer_eeprom),
                 "=z" (pointer_ram)
               : "z"  (pointer_ram)
               : "memory" );
            }
          else
            {
              uint8_t len;
              len = (uint8_t) n;
    29ec:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    29ee:	18 2e       	mov	r1, r24
    29f0:	0e 94 bd 1a 	call	0x357a <__eeprom_write_block_1F2021>
    29f4:	24 96       	adiw	r28, 0x04	; 4
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	df 91       	pop	r29
    2a02:	cf 91       	pop	r28
    2a04:	08 95       	ret

00002a06 <PM_CheckEndOfFuseLockStore>:
		}

		eeprom_write_block((const void*)&DataSize, (void*)EEPROMAddress, 4);
	}
}

void PM_CheckEndOfFuseLockStore(void)
{
	if (CurrentMode == PM_LOCKFUSEBITS_WRITE)
    2a06:	80 91 60 02 	lds	r24, 0x0260
    2a0a:	83 30       	cpi	r24, 0x03	; 3
    2a0c:	71 f4       	brne	.+28     	; 0x2a2a <PM_CheckEndOfFuseLockStore+0x24>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2a0e:	80 91 61 02 	lds	r24, 0x0261
    2a12:	82 30       	cpi	r24, 0x02	; 2
    2a14:	19 f4       	brne	.+6      	; 0x2a1c <PM_CheckEndOfFuseLockStore+0x16>
    2a16:	af e2       	ldi	r26, 0x2F	; 47
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <PM_CheckEndOfFuseLockStore+0x1a>
    2a1c:	a0 e3       	ldi	r26, 0x30	; 48
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	80 91 66 02 	lds	r24, 0x0266
  asm volatile (
    2a24:	08 2e       	mov	r0, r24
    2a26:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
    2a2a:	08 95       	ret

00002a2c <PM_InterpretAVRISPPacket>:
    2a2c:	cf 92       	push	r12
    2a2e:	df 92       	push	r13
    2a30:	ef 92       	push	r14
    2a32:	ff 92       	push	r15
    2a34:	0f 93       	push	r16
    2a36:	1f 93       	push	r17
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	40 91 4b 01 	lds	r20, 0x014B
    2a40:	84 2f       	mov	r24, r20
    2a42:	99 27       	eor	r25, r25
    2a44:	86 31       	cpi	r24, 0x16	; 22
    2a46:	91 05       	cpc	r25, r1
    2a48:	09 f4       	brne	.+2      	; 0x2a4c <PM_InterpretAVRISPPacket+0x20>
    2a4a:	c0 c1       	rjmp	.+896    	; 0x2dcc <PM_InterpretAVRISPPacket+0x3a0>
    2a4c:	87 31       	cpi	r24, 0x17	; 23
    2a4e:	91 05       	cpc	r25, r1
    2a50:	94 f4       	brge	.+36     	; 0x2a76 <PM_InterpretAVRISPPacket+0x4a>
    2a52:	82 31       	cpi	r24, 0x12	; 18
    2a54:	91 05       	cpc	r25, r1
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <PM_InterpretAVRISPPacket+0x2e>
    2a58:	68 c0       	rjmp	.+208    	; 0x2b2a <PM_InterpretAVRISPPacket+0xfe>
    2a5a:	83 31       	cpi	r24, 0x13	; 19
    2a5c:	91 05       	cpc	r25, r1
    2a5e:	3c f4       	brge	.+14     	; 0x2a6e <PM_InterpretAVRISPPacket+0x42>
    2a60:	80 31       	cpi	r24, 0x10	; 16
    2a62:	91 05       	cpc	r25, r1
    2a64:	11 f1       	breq	.+68     	; 0x2aaa <PM_InterpretAVRISPPacket+0x7e>
    2a66:	41 97       	sbiw	r24, 0x11	; 17
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <PM_InterpretAVRISPPacket+0x40>
    2a6a:	3f c0       	rjmp	.+126    	; 0x2aea <PM_InterpretAVRISPPacket+0xbe>
    2a6c:	1f c2       	rjmp	.+1086   	; 0x2eac <PM_InterpretAVRISPPacket+0x480>
    2a6e:	44 97       	sbiw	r24, 0x14	; 20
    2a70:	09 f4       	brne	.+2      	; 0x2a74 <PM_InterpretAVRISPPacket+0x48>
    2a72:	ac c1       	rjmp	.+856    	; 0x2dcc <PM_InterpretAVRISPPacket+0x3a0>
    2a74:	40 c1       	rjmp	.+640    	; 0x2cf6 <PM_InterpretAVRISPPacket+0x2ca>
    2a76:	89 31       	cpi	r24, 0x19	; 25
    2a78:	91 05       	cpc	r25, r1
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <PM_InterpretAVRISPPacket+0x52>
    2a7c:	ea c0       	rjmp	.+468    	; 0x2c52 <PM_InterpretAVRISPPacket+0x226>
    2a7e:	8a 31       	cpi	r24, 0x1A	; 26
    2a80:	91 05       	cpc	r25, r1
    2a82:	44 f4       	brge	.+16     	; 0x2a94 <PM_InterpretAVRISPPacket+0x68>
    2a84:	87 31       	cpi	r24, 0x17	; 23
    2a86:	91 05       	cpc	r25, r1
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <PM_InterpretAVRISPPacket+0x60>
    2a8a:	e3 c0       	rjmp	.+454    	; 0x2c52 <PM_InterpretAVRISPPacket+0x226>
    2a8c:	48 97       	sbiw	r24, 0x18	; 24
    2a8e:	09 f4       	brne	.+2      	; 0x2a92 <PM_InterpretAVRISPPacket+0x66>
    2a90:	8b c0       	rjmp	.+278    	; 0x2ba8 <PM_InterpretAVRISPPacket+0x17c>
    2a92:	0c c2       	rjmp	.+1048   	; 0x2eac <PM_InterpretAVRISPPacket+0x480>
    2a94:	8b 31       	cpi	r24, 0x1B	; 27
    2a96:	91 05       	cpc	r25, r1
    2a98:	e1 f1       	breq	.+120    	; 0x2b12 <PM_InterpretAVRISPPacket+0xe6>
    2a9a:	8b 31       	cpi	r24, 0x1B	; 27
    2a9c:	91 05       	cpc	r25, r1
    2a9e:	0c f4       	brge	.+2      	; 0x2aa2 <PM_InterpretAVRISPPacket+0x76>
    2aa0:	83 c0       	rjmp	.+262    	; 0x2ba8 <PM_InterpretAVRISPPacket+0x17c>
    2aa2:	4c 97       	sbiw	r24, 0x1c	; 28
    2aa4:	09 f4       	brne	.+2      	; 0x2aa8 <PM_InterpretAVRISPPacket+0x7c>
    2aa6:	73 c0       	rjmp	.+230    	; 0x2b8e <PM_InterpretAVRISPPacket+0x162>
    2aa8:	01 c2       	rjmp	.+1026   	; 0x2eac <PM_InterpretAVRISPPacket+0x480>
    2aaa:	82 e0       	ldi	r24, 0x02	; 2
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	90 93 48 01 	sts	0x0148, r25
    2ab2:	80 93 47 01 	sts	0x0147, r24
    2ab6:	eb e4       	ldi	r30, 0x4B	; 75
    2ab8:	f1 e0       	ldi	r31, 0x01	; 1
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	9b e0       	ldi	r25, 0x0B	; 11
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2ac0:	d9 01       	movw	r26, r18
    2ac2:	ad 5d       	subi	r26, 0xDD	; 221
    2ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac6:	81 91       	ld	r24, Z+
  asm volatile (
    2ac8:	08 2e       	mov	r0, r24
    2aca:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
    2ace:	91 50       	subi	r25, 0x01	; 1
    2ad0:	2f 5f       	subi	r18, 0xFF	; 255
    2ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad4:	97 ff       	sbrs	r25, 7
    2ad6:	f4 cf       	rjmp	.-24     	; 0x2ac0 <PM_InterpretAVRISPPacket+0x94>
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	80 93 46 01 	sts	0x0146, r24
    2ade:	10 92 60 02 	sts	0x0260, r1
    2ae2:	81 b3       	in	r24, 0x11	; 17
    2ae4:	8f 7c       	andi	r24, 0xCF	; 207
    2ae6:	80 62       	ori	r24, 0x20	; 32
    2ae8:	12 c0       	rjmp	.+36     	; 0x2b0e <PM_InterpretAVRISPPacket+0xe2>
    2aea:	82 e0       	ldi	r24, 0x02	; 2
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	90 93 48 01 	sts	0x0148, r25
    2af2:	80 93 47 01 	sts	0x0147, r24
    2af6:	0e 94 aa 14 	call	0x2954 <PM_CheckEndOfProgramming>
    2afa:	0e 94 03 15 	call	0x2a06 <PM_CheckEndOfFuseLockStore>
    2afe:	10 92 46 01 	sts	0x0146, r1
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    2b08:	81 b3       	in	r24, 0x11	; 17
    2b0a:	8f 7c       	andi	r24, 0xCF	; 207
    2b0c:	80 61       	ori	r24, 0x10	; 16
    2b0e:	81 bb       	out	0x11, r24	; 17
    2b10:	5a c1       	rjmp	.+692    	; 0x2dc6 <PM_InterpretAVRISPPacket+0x39a>
    2b12:	84 e0       	ldi	r24, 0x04	; 4
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	90 93 48 01 	sts	0x0148, r25
    2b1a:	80 93 47 01 	sts	0x0147, r24
    2b1e:	10 92 4c 01 	sts	0x014C, r1
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	80 93 4d 01 	sts	0x014D, r24
    2b28:	3c c0       	rjmp	.+120    	; 0x2ba2 <PM_InterpretAVRISPPacket+0x176>
    2b2a:	82 e0       	ldi	r24, 0x02	; 2
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	90 93 48 01 	sts	0x0148, r25
    2b32:	80 93 47 01 	sts	0x0147, r24
    2b36:	ec e4       	ldi	r30, 0x4C	; 76
    2b38:	f1 e0       	ldi	r31, 0x01	; 1
    2b3a:	21 e0       	ldi	r18, 0x01	; 1
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	95 e0       	ldi	r25, 0x05	; 5
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b40:	d9 01       	movw	r26, r18
    2b42:	ab 5e       	subi	r26, 0xEB	; 235
    2b44:	bf 4f       	sbci	r27, 0xFF	; 255
    2b46:	81 91       	ld	r24, Z+
  asm volatile (
    2b48:	08 2e       	mov	r0, r24
    2b4a:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
    2b4e:	91 50       	subi	r25, 0x01	; 1
    2b50:	2f 5f       	subi	r18, 0xFF	; 255
    2b52:	3f 4f       	sbci	r19, 0xFF	; 255
    2b54:	97 ff       	sbrs	r25, 7
    2b56:	f4 cf       	rjmp	.-24     	; 0x2b40 <PM_InterpretAVRISPPacket+0x114>
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	37 e0       	ldi	r19, 0x07	; 7
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b60:	dc 01       	movw	r26, r24
    2b62:	a5 5e       	subi	r26, 0xE5	; 229
    2b64:	bf 4f       	sbci	r27, 0xFF	; 255
  asm volatile (
    2b66:	02 2e       	mov	r0, r18
    2b68:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	a1 5e       	subi	r26, 0xE1	; 225
    2b70:	bf 4f       	sbci	r27, 0xFF	; 255
    2b72:	02 2e       	mov	r0, r18
    2b74:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
    2b78:	31 50       	subi	r19, 0x01	; 1
    2b7a:	01 96       	adiw	r24, 0x01	; 1
    2b7c:	37 ff       	sbrs	r19, 7
    2b7e:	f0 cf       	rjmp	.-32     	; 0x2b60 <PM_InterpretAVRISPPacket+0x134>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b80:	a4 e1       	ldi	r26, 0x14	; 20
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	81 e0       	ldi	r24, 0x01	; 1
  asm volatile (
    2b86:	08 2e       	mov	r0, r24
    2b88:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
    2b8c:	1c c1       	rjmp	.+568    	; 0x2dc6 <PM_InterpretAVRISPPacket+0x39a>
    2b8e:	84 e0       	ldi	r24, 0x04	; 4
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	90 93 48 01 	sts	0x0148, r25
    2b96:	80 93 47 01 	sts	0x0147, r24
    2b9a:	10 92 4c 01 	sts	0x014C, r1
    2b9e:	10 92 4d 01 	sts	0x014D, r1
    2ba2:	10 92 4e 01 	sts	0x014E, r1
    2ba6:	8b c1       	rjmp	.+790    	; 0x2ebe <PM_InterpretAVRISPPacket+0x492>
    2ba8:	84 e0       	ldi	r24, 0x04	; 4
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	90 93 48 01 	sts	0x0148, r25
    2bb0:	80 93 47 01 	sts	0x0147, r24
    2bb4:	80 91 60 02 	lds	r24, 0x0260
    2bb8:	84 30       	cpi	r24, 0x04	; 4
    2bba:	59 f0       	breq	.+22     	; 0x2bd2 <PM_InterpretAVRISPPacket+0x1a6>
    2bbc:	0e 94 aa 14 	call	0x2954 <PM_CheckEndOfProgramming>
    2bc0:	0e 94 03 15 	call	0x2a06 <PM_CheckEndOfFuseLockStore>
    2bc4:	10 92 67 02 	sts	0x0267, r1
    2bc8:	10 92 66 02 	sts	0x0266, r1
    2bcc:	84 e0       	ldi	r24, 0x04	; 4
    2bce:	80 93 60 02 	sts	0x0260, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2bd2:	60 91 4b 01 	lds	r22, 0x014B
    2bd6:	68 31       	cpi	r22, 0x18	; 24
    2bd8:	19 f4       	brne	.+6      	; 0x2be0 <PM_InterpretAVRISPPacket+0x1b4>
    2bda:	af e2       	ldi	r26, 0x2F	; 47
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <PM_InterpretAVRISPPacket+0x1b8>
    2be0:	a0 e3       	ldi	r26, 0x30	; 48
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2be4:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
    2be8:	80 2d       	mov	r24, r0
    2bea:	99 27       	eor	r25, r25
    2bec:	40 91 66 02 	lds	r20, 0x0266
    2bf0:	50 91 67 02 	lds	r21, 0x0267
    2bf4:	84 17       	cp	r24, r20
    2bf6:	95 07       	cpc	r25, r21
    2bf8:	10 f4       	brcc	.+4      	; 0x2bfe <PM_InterpretAVRISPPacket+0x1d2>
    2bfa:	8f ef       	ldi	r24, 0xFF	; 255
    2bfc:	1d c0       	rjmp	.+58     	; 0x2c38 <PM_InterpretAVRISPPacket+0x20c>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2bfe:	80 ea       	ldi	r24, 0xA0	; 160
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	48 9f       	mul	r20, r24
    2c04:	90 01       	movw	r18, r0
    2c06:	49 9f       	mul	r20, r25
    2c08:	30 0d       	add	r19, r0
    2c0a:	58 9f       	mul	r21, r24
    2c0c:	30 0d       	add	r19, r0
    2c0e:	11 24       	eor	r1, r1
    2c10:	90 91 4c 01 	lds	r25, 0x014C
    2c14:	88 e2       	ldi	r24, 0x28	; 40
    2c16:	98 9f       	mul	r25, r24
    2c18:	c0 01       	movw	r24, r0
    2c1a:	11 24       	eor	r1, r1
    2c1c:	28 0f       	add	r18, r24
    2c1e:	39 1f       	adc	r19, r25
    2c20:	68 31       	cpi	r22, 0x18	; 24
    2c22:	21 f4       	brne	.+8      	; 0x2c2c <PM_InterpretAVRISPPacket+0x200>
    2c24:	d9 01       	movw	r26, r18
    2c26:	a7 5f       	subi	r26, 0xF7	; 247
    2c28:	bf 4f       	sbci	r27, 0xFF	; 255
    2c2a:	03 c0       	rjmp	.+6      	; 0x2c32 <PM_InterpretAVRISPPacket+0x206>
    2c2c:	d9 01       	movw	r26, r18
    2c2e:	af 5c       	subi	r26, 0xCF	; 207
    2c30:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2c32:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
    2c36:	80 2d       	mov	r24, r0
    2c38:	80 93 4d 01 	sts	0x014D, r24
    2c3c:	10 92 4c 01 	sts	0x014C, r1
    2c40:	10 92 4e 01 	sts	0x014E, r1
    2c44:	4f 5f       	subi	r20, 0xFF	; 255
    2c46:	5f 4f       	sbci	r21, 0xFF	; 255
    2c48:	50 93 67 02 	sts	0x0267, r21
    2c4c:	40 93 66 02 	sts	0x0266, r20
    2c50:	36 c1       	rjmp	.+620    	; 0x2ebe <PM_InterpretAVRISPPacket+0x492>
    2c52:	83 e0       	ldi	r24, 0x03	; 3
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	90 93 48 01 	sts	0x0148, r25
    2c5a:	80 93 47 01 	sts	0x0147, r24
    2c5e:	80 91 60 02 	lds	r24, 0x0260
    2c62:	83 30       	cpi	r24, 0x03	; 3
    2c64:	39 f0       	breq	.+14     	; 0x2c74 <PM_InterpretAVRISPPacket+0x248>
    2c66:	83 e0       	ldi	r24, 0x03	; 3
    2c68:	80 93 60 02 	sts	0x0260, r24
    2c6c:	10 92 67 02 	sts	0x0267, r1
    2c70:	10 92 66 02 	sts	0x0266, r1
    2c74:	20 91 66 02 	lds	r18, 0x0266
    2c78:	30 91 67 02 	lds	r19, 0x0267
    2c7c:	47 31       	cpi	r20, 0x17	; 23
    2c7e:	69 f4       	brne	.+26     	; 0x2c9a <PM_InterpretAVRISPPacket+0x26e>
    2c80:	80 ea       	ldi	r24, 0xA0	; 160
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	28 9f       	mul	r18, r24
    2c86:	e0 01       	movw	r28, r0
    2c88:	29 9f       	mul	r18, r25
    2c8a:	d0 0d       	add	r29, r0
    2c8c:	38 9f       	mul	r19, r24
    2c8e:	d0 0d       	add	r29, r0
    2c90:	11 24       	eor	r1, r1
    2c92:	cf 5c       	subi	r28, 0xCF	; 207
    2c94:	df 4f       	sbci	r29, 0xFF	; 255
    2c96:	82 e0       	ldi	r24, 0x02	; 2
    2c98:	0c c0       	rjmp	.+24     	; 0x2cb2 <PM_InterpretAVRISPPacket+0x286>
    2c9a:	80 ea       	ldi	r24, 0xA0	; 160
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	28 9f       	mul	r18, r24
    2ca0:	e0 01       	movw	r28, r0
    2ca2:	29 9f       	mul	r18, r25
    2ca4:	d0 0d       	add	r29, r0
    2ca6:	38 9f       	mul	r19, r24
    2ca8:	d0 0d       	add	r29, r0
    2caa:	11 24       	eor	r1, r1
    2cac:	c7 5a       	subi	r28, 0xA7	; 167
    2cae:	df 4f       	sbci	r29, 0xFF	; 255
    2cb0:	83 e0       	ldi	r24, 0x03	; 3
    2cb2:	80 93 61 02 	sts	0x0261, r24
    2cb6:	80 91 66 02 	lds	r24, 0x0266
    2cba:	90 91 67 02 	lds	r25, 0x0267
    2cbe:	0a 97       	sbiw	r24, 0x0a	; 10
    2cc0:	a8 f4       	brcc	.+42     	; 0x2cec <PM_InterpretAVRISPPacket+0x2c0>
    2cc2:	ec e4       	ldi	r30, 0x4C	; 76
    2cc4:	f1 e0       	ldi	r31, 0x01	; 1
    2cc6:	93 e0       	ldi	r25, 0x03	; 3
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2cc8:	81 91       	ld	r24, Z+
  asm volatile (
    2cca:	de 01       	movw	r26, r28
    2ccc:	08 2e       	mov	r0, r24
    2cce:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
    2cd2:	21 96       	adiw	r28, 0x01	; 1
    2cd4:	91 50       	subi	r25, 0x01	; 1
    2cd6:	97 ff       	sbrs	r25, 7
    2cd8:	f7 cf       	rjmp	.-18     	; 0x2cc8 <PM_InterpretAVRISPPacket+0x29c>
    2cda:	80 91 66 02 	lds	r24, 0x0266
    2cde:	90 91 67 02 	lds	r25, 0x0267
    2ce2:	01 96       	adiw	r24, 0x01	; 1
    2ce4:	90 93 67 02 	sts	0x0267, r25
    2ce8:	80 93 66 02 	sts	0x0266, r24
    2cec:	10 92 4c 01 	sts	0x014C, r1
    2cf0:	10 92 4d 01 	sts	0x014D, r1
    2cf4:	e4 c0       	rjmp	.+456    	; 0x2ebe <PM_InterpretAVRISPPacket+0x492>
    2cf6:	82 e0       	ldi	r24, 0x02	; 2
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	90 93 48 01 	sts	0x0148, r25
    2cfe:	80 93 47 01 	sts	0x0147, r24
    2d02:	80 91 60 02 	lds	r24, 0x0260
    2d06:	81 30       	cpi	r24, 0x01	; 1
    2d08:	f9 f0       	breq	.+62     	; 0x2d48 <PM_InterpretAVRISPPacket+0x31c>
    2d0a:	43 31       	cpi	r20, 0x13	; 19
    2d0c:	21 f4       	brne	.+8      	; 0x2d16 <PM_InterpretAVRISPPacket+0x2ea>
    2d0e:	c2 e0       	ldi	r28, 0x02	; 2
    2d10:	d0 e0       	ldi	r29, 0x00	; 0
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	03 c0       	rjmp	.+6      	; 0x2d1c <PM_InterpretAVRISPPacket+0x2f0>
    2d16:	cb e0       	ldi	r28, 0x0B	; 11
    2d18:	d0 e0       	ldi	r29, 0x00	; 0
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	0e 94 33 14 	call	0x2866 <PM_SetupDFAddressCounters>
    2d20:	80 91 66 02 	lds	r24, 0x0266
    2d24:	90 91 67 02 	lds	r25, 0x0267
    2d28:	0e 94 53 0a 	call	0x14a6 <DF_BufferWriteEnable>
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	80 93 60 02 	sts	0x0260, r24
    2d32:	ec e4       	ldi	r30, 0x4C	; 76
    2d34:	f1 e0       	ldi	r31, 0x01	; 1
    2d36:	98 e0       	ldi	r25, 0x08	; 8
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2d38:	81 91       	ld	r24, Z+
  asm volatile (
    2d3a:	de 01       	movw	r26, r28
    2d3c:	08 2e       	mov	r0, r24
    2d3e:	0e 94 ac 1a 	call	0x3558 <__eeprom_write_byte_1F2021>
    2d42:	91 50       	subi	r25, 0x01	; 1
    2d44:	97 ff       	sbrs	r25, 7
    2d46:	f8 cf       	rjmp	.-16     	; 0x2d38 <PM_InterpretAVRISPPacket+0x30c>
    2d48:	80 91 4c 01 	lds	r24, 0x014C
    2d4c:	99 27       	eor	r25, r25
    2d4e:	d8 2f       	mov	r29, r24
    2d50:	cc 27       	eor	r28, r28
    2d52:	80 91 4d 01 	lds	r24, 0x014D
    2d56:	99 27       	eor	r25, r25
    2d58:	c8 2b       	or	r28, r24
    2d5a:	d9 2b       	or	r29, r25
    2d5c:	00 e0       	ldi	r16, 0x00	; 0
    2d5e:	10 e0       	ldi	r17, 0x00	; 0
    2d60:	0c 17       	cp	r16, r28
    2d62:	1d 07       	cpc	r17, r29
    2d64:	70 f4       	brcc	.+28     	; 0x2d82 <PM_InterpretAVRISPPacket+0x356>
    2d66:	55 e5       	ldi	r21, 0x55	; 85
    2d68:	e5 2e       	mov	r14, r21
    2d6a:	51 e0       	ldi	r21, 0x01	; 1
    2d6c:	f5 2e       	mov	r15, r21
    2d6e:	f7 01       	movw	r30, r14
    2d70:	81 91       	ld	r24, Z+
    2d72:	7f 01       	movw	r14, r30
    2d74:	0e 94 75 14 	call	0x28ea <PM_StoreProgramByte>
    2d78:	0f 5f       	subi	r16, 0xFF	; 255
    2d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7c:	0c 17       	cp	r16, r28
    2d7e:	1d 07       	cpc	r17, r29
    2d80:	b0 f3       	brcs	.-20     	; 0x2d6e <PM_InterpretAVRISPPacket+0x342>
    2d82:	20 91 5e 02 	lds	r18, 0x025E
    2d86:	30 91 5f 02 	lds	r19, 0x025F
    2d8a:	37 fd       	sbrc	r19, 7
    2d8c:	1c c0       	rjmp	.+56     	; 0x2dc6 <PM_InterpretAVRISPPacket+0x39a>
    2d8e:	80 91 4e 01 	lds	r24, 0x014E
    2d92:	87 ff       	sbrs	r24, 7
    2d94:	18 c0       	rjmp	.+48     	; 0x2dc6 <PM_InterpretAVRISPPacket+0x39a>
    2d96:	21 15       	cp	r18, r1
    2d98:	31 05       	cpc	r19, r1
    2d9a:	a9 f0       	breq	.+42     	; 0x2dc6 <PM_InterpretAVRISPPacket+0x39a>
    Write a word \c value to EEPROM address \c addr. */

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
    2d9c:	80 91 61 02 	lds	r24, 0x0261
    2da0:	81 30       	cpi	r24, 0x01	; 1
    2da2:	19 f4       	brne	.+6      	; 0x2daa <PM_InterpretAVRISPPacket+0x37e>
    2da4:	a1 e8       	ldi	r26, 0x81	; 129
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	02 c0       	rjmp	.+4      	; 0x2dae <PM_InterpretAVRISPPacket+0x382>
    2daa:	a3 e8       	ldi	r26, 0x83	; 131
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
  asm volatile (
    2dae:	09 01       	movw	r0, r18
    2db0:	0e 94 b8 1a 	call	0x3570 <__eeprom_write_word_1F2021>
    2db4:	80 91 5e 02 	lds	r24, 0x025E
    2db8:	90 91 5f 02 	lds	r25, 0x025F
    2dbc:	90 68       	ori	r25, 0x80	; 128
    2dbe:	90 93 5f 02 	sts	0x025F, r25
    2dc2:	80 93 5e 02 	sts	0x025E, r24
    2dc6:	10 92 4c 01 	sts	0x014C, r1
    2dca:	79 c0       	rjmp	.+242    	; 0x2ebe <PM_InterpretAVRISPPacket+0x492>
    2dcc:	80 91 60 02 	lds	r24, 0x0260
    2dd0:	82 30       	cpi	r24, 0x02	; 2
    2dd2:	11 f1       	breq	.+68     	; 0x2e18 <PM_InterpretAVRISPPacket+0x3ec>
    2dd4:	0e 94 aa 14 	call	0x2954 <PM_CheckEndOfProgramming>
    2dd8:	0e 94 03 15 	call	0x2a06 <PM_CheckEndOfFuseLockStore>
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	80 91 4b 01 	lds	r24, 0x014B
    2de2:	84 31       	cpi	r24, 0x14	; 20
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <PM_InterpretAVRISPPacket+0x3bc>
    2de6:	91 e0       	ldi	r25, 0x01	; 1
    2de8:	89 2f       	mov	r24, r25
    2dea:	0e 94 33 14 	call	0x2866 <PM_SetupDFAddressCounters>
    2dee:	60 91 66 02 	lds	r22, 0x0266
    2df2:	70 91 67 02 	lds	r23, 0x0267
    2df6:	80 91 6d 02 	lds	r24, 0x026D
    2dfa:	90 91 6e 02 	lds	r25, 0x026E
    2dfe:	0e 94 10 0a 	call	0x1420 <DF_ContinuousReadEnable>
    2e02:	82 e0       	ldi	r24, 0x02	; 2
    2e04:	80 93 60 02 	sts	0x0260, r24
    2e08:	10 92 42 01 	sts	0x0142, r1
    2e0c:	10 92 43 01 	sts	0x0143, r1
    2e10:	10 92 44 01 	sts	0x0144, r1
    2e14:	10 92 45 01 	sts	0x0145, r1
    2e18:	80 91 4c 01 	lds	r24, 0x014C
    2e1c:	99 27       	eor	r25, r25
    2e1e:	d8 2f       	mov	r29, r24
    2e20:	cc 27       	eor	r28, r28
    2e22:	80 91 4d 01 	lds	r24, 0x014D
    2e26:	99 27       	eor	r25, r25
    2e28:	c8 2b       	or	r28, r24
    2e2a:	d9 2b       	or	r29, r25
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	80 91 4b 01 	lds	r24, 0x014B
    2e32:	84 31       	cpi	r24, 0x14	; 20
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <PM_InterpretAVRISPPacket+0x40c>
    2e36:	91 e0       	ldi	r25, 0x01	; 1
    2e38:	89 2f       	mov	r24, r25
    2e3a:	0e 94 fc 13 	call	0x27f8 <PM_GetStoredDataSize>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	7c 01       	movw	r14, r24
    2e44:	00 e0       	ldi	r16, 0x00	; 0
    2e46:	10 e0       	ldi	r17, 0x00	; 0
    2e48:	0c 17       	cp	r16, r28
    2e4a:	1d 07       	cpc	r17, r29
    2e4c:	18 f5       	brcc	.+70     	; 0x2e94 <PM_InterpretAVRISPPacket+0x468>
    2e4e:	3d e4       	ldi	r19, 0x4D	; 77
    2e50:	c3 2e       	mov	r12, r19
    2e52:	31 e0       	ldi	r19, 0x01	; 1
    2e54:	d3 2e       	mov	r13, r19
    2e56:	97 01       	movw	r18, r14
    2e58:	44 27       	eor	r20, r20
    2e5a:	55 27       	eor	r21, r21
    2e5c:	80 91 42 01 	lds	r24, 0x0142
    2e60:	90 91 43 01 	lds	r25, 0x0143
    2e64:	a0 91 44 01 	lds	r26, 0x0144
    2e68:	b0 91 45 01 	lds	r27, 0x0145
    2e6c:	82 17       	cp	r24, r18
    2e6e:	93 07       	cpc	r25, r19
    2e70:	a4 07       	cpc	r26, r20
    2e72:	b5 07       	cpc	r27, r21
    2e74:	20 f4       	brcc	.+8      	; 0x2e7e <PM_InterpretAVRISPPacket+0x452>
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    2e7c:	01 c0       	rjmp	.+2      	; 0x2e80 <PM_InterpretAVRISPPacket+0x454>
    2e7e:	8f ef       	ldi	r24, 0xFF	; 255
    2e80:	f6 01       	movw	r30, r12
    2e82:	81 93       	st	Z+, r24
    2e84:	6f 01       	movw	r12, r30
    2e86:	0e 94 54 0f 	call	0x1ea8 <V2P_IncrementCurrAddress>
    2e8a:	0f 5f       	subi	r16, 0xFF	; 255
    2e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e8e:	0c 17       	cp	r16, r28
    2e90:	1d 07       	cpc	r17, r29
    2e92:	08 f3       	brcs	.-62     	; 0x2e56 <PM_InterpretAVRISPPacket+0x42a>
    2e94:	23 96       	adiw	r28, 0x03	; 3
    2e96:	d0 93 48 01 	sts	0x0148, r29
    2e9a:	c0 93 47 01 	sts	0x0147, r28
    2e9e:	23 97       	sbiw	r28, 0x03	; 3
    2ea0:	10 92 4c 01 	sts	0x014C, r1
    2ea4:	c5 5b       	subi	r28, 0xB5	; 181
    2ea6:	de 4f       	sbci	r29, 0xFE	; 254
    2ea8:	1a 82       	std	Y+2, r1	; 0x02
    2eaa:	09 c0       	rjmp	.+18     	; 0x2ebe <PM_InterpretAVRISPPacket+0x492>
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	90 93 48 01 	sts	0x0148, r25
    2eb4:	80 93 47 01 	sts	0x0147, r24
    2eb8:	89 ec       	ldi	r24, 0xC9	; 201
    2eba:	80 93 4c 01 	sts	0x014C, r24
    2ebe:	0e 94 73 0e 	call	0x1ce6 <V2P_SendPacket>
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	ff 90       	pop	r15
    2ecc:	ef 90       	pop	r14
    2ece:	df 90       	pop	r13
    2ed0:	cf 90       	pop	r12
    2ed2:	08 95       	ret

00002ed4 <PM_SendFuseLockBytes>:
	  eeprom_write_byte(((MemoryType == TYPE_FUSE)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes), CurrBuffByte); // CurrBuffByte stores the total number of fuse/lock bytes written in this case
}

void PM_SendFuseLockBytes(const uint8_t Type)
{
    2ed4:	0f 93       	push	r16
    2ed6:	1f 93       	push	r17
    2ed8:	cf 93       	push	r28
    2eda:	df 93       	push	r29
    2edc:	98 2f       	mov	r25, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2ede:	82 30       	cpi	r24, 0x02	; 2
    2ee0:	19 f4       	brne	.+6      	; 0x2ee8 <PM_SendFuseLockBytes+0x14>
    2ee2:	af e2       	ldi	r26, 0x2F	; 47
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	02 c0       	rjmp	.+4      	; 0x2eec <PM_SendFuseLockBytes+0x18>
    2ee8:	a0 e3       	ldi	r26, 0x30	; 48
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2eec:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
    2ef0:	80 2d       	mov	r24, r0
    2ef2:	18 2f       	mov	r17, r24
	uint8_t* EEPROMAddress;
	uint8_t  TotalBytes;
	
	TotalBytes = eeprom_read_byte((Type == TYPE_FUSE)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes);

	EEPROMAddress = (uint8_t*)((Type == TYPE_FUSE)? &EEPROMVars.FuseBytes : &EEPROMVars.LockBytes); // Set the EEPROM pointer to the fuse/lock bytes start (each fuse or lock byte takes four bytes in EEPROM)
    2ef4:	92 30       	cpi	r25, 0x02	; 2
    2ef6:	19 f4       	brne	.+6      	; 0x2efe <PM_SendFuseLockBytes+0x2a>
    2ef8:	c1 e3       	ldi	r28, 0x31	; 49
    2efa:	d0 e0       	ldi	r29, 0x00	; 0
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <PM_SendFuseLockBytes+0x2e>
    2efe:	c9 e5       	ldi	r28, 0x59	; 89
    2f00:	d0 e0       	ldi	r29, 0x00	; 0

	while (TotalBytes--)                              // Write each of the fuse/lock bytes stored in memory to the slave AVR
	{
		for (uint8_t CommandByte = 0; CommandByte < 4; CommandByte++)      // Write each individual command byte
		{
			USI_SPITransmit(eeprom_read_byte(EEPROMAddress));
			EEPROMAddress++;
		}
		
		// Add some delay before programming next byte, if there is one:
		if (TotalBytes)
		   MAIN_Delay10MS(5);
    2f02:	11 50       	subi	r17, 0x01	; 1
    2f04:	1f 3f       	cpi	r17, 0xFF	; 255
    2f06:	91 f0       	breq	.+36     	; 0x2f2c <PM_SendFuseLockBytes+0x58>
    2f08:	03 e0       	ldi	r16, 0x03	; 3
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2f0a:	de 01       	movw	r26, r28
    2f0c:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
    2f10:	80 2d       	mov	r24, r0
    2f12:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2f16:	21 96       	adiw	r28, 0x01	; 1
    2f18:	01 50       	subi	r16, 0x01	; 1
    2f1a:	07 ff       	sbrs	r16, 7
    2f1c:	f6 cf       	rjmp	.-20     	; 0x2f0a <PM_SendFuseLockBytes+0x36>
    2f1e:	11 23       	and	r17, r17
    2f20:	19 f0       	breq	.+6      	; 0x2f28 <PM_SendFuseLockBytes+0x54>
    2f22:	85 e0       	ldi	r24, 0x05	; 5
    2f24:	0e 94 33 02 	call	0x466 <MAIN_Delay10MS>
    2f28:	11 50       	subi	r17, 0x01	; 1
    2f2a:	70 f7       	brcc	.-36     	; 0x2f08 <PM_SendFuseLockBytes+0x34>
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	1f 91       	pop	r17
    2f32:	0f 91       	pop	r16
    2f34:	08 95       	ret

00002f36 <PM_SendEraseCommand>:
	}
}

void PM_SendEraseCommand(void)
{			
    2f36:	1f 93       	push	r17
    2f38:	cf 93       	push	r28
    2f3a:	df 93       	push	r29
    2f3c:	c2 e0       	ldi	r28, 0x02	; 2
    2f3e:	d0 e0       	ldi	r29, 0x00	; 0
    2f40:	13 e0       	ldi	r17, 0x03	; 3
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2f42:	de 01       	movw	r26, r28
    2f44:	ab 5e       	subi	r26, 0xEB	; 235
    2f46:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2f48:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
    2f4c:	80 2d       	mov	r24, r0
    2f4e:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
	for (uint8_t B = 2; B < 6 ; B++)                  // Read out the erase chip command bytes
    2f52:	11 50       	subi	r17, 0x01	; 1
    2f54:	21 96       	adiw	r28, 0x01	; 1
    2f56:	17 ff       	sbrs	r17, 7
    2f58:	f4 cf       	rjmp	.-24     	; 0x2f42 <PM_SendEraseCommand+0xc>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2f5a:	a6 e1       	ldi	r26, 0x16	; 22
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2f5e:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
    2f62:	80 2d       	mov	r24, r0
    2f64:	88 23       	and	r24, r24
    2f66:	59 f0       	breq	.+22     	; 0x2f7e <PM_SendEraseCommand+0x48>
	  USI_SPITransmit(eeprom_read_byte(&EEPROMVars.EraseChip[B])); // Send the erase chip commands
			
	if (eeprom_read_byte(&EEPROMVars.EraseChip[1]))   // Value of 1 indicates a busy flag test
	{
		do
			USI_SPITransmitWord(0xF000);
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	90 ef       	ldi	r25, 0xF0	; 240
    2f6c:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2f78:	80 fd       	sbrc	r24, 0
    2f7a:	f6 cf       	rjmp	.-20     	; 0x2f68 <PM_SendEraseCommand+0x32>
    2f7c:	07 c0       	rjmp	.+14     	; 0x2f8c <PM_SendEraseCommand+0x56>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2f7e:	a5 e1       	ldi	r26, 0x15	; 21
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2f82:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
    2f86:	80 2d       	mov	r24, r0
    2f88:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	1f 91       	pop	r17
    2f92:	08 95       	ret

00002f94 <PM_CreateProgrammingPackets>:
		while (USI_SPITransmitWord(0x0000) & 0x01);
	}
	else                                              // Cleared flag means use a predefined delay
	{		
		MAIN_Delay1MS(eeprom_read_byte(&EEPROMVars.EraseChip[0])); // Wait the erase delay
	}
}

void PM_CreateProgrammingPackets(const uint8_t Type)
{			
    2f94:	3f 92       	push	r3
    2f96:	4f 92       	push	r4
    2f98:	5f 92       	push	r5
    2f9a:	6f 92       	push	r6
    2f9c:	7f 92       	push	r7
    2f9e:	8f 92       	push	r8
    2fa0:	9f 92       	push	r9
    2fa2:	af 92       	push	r10
    2fa4:	bf 92       	push	r11
    2fa6:	cf 92       	push	r12
    2fa8:	df 92       	push	r13
    2faa:	ef 92       	push	r14
    2fac:	ff 92       	push	r15
    2fae:	0f 93       	push	r16
    2fb0:	1f 93       	push	r17
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	c8 2f       	mov	r28, r24
	uint32_t BytesRead       = 0;
    2fb8:	aa 24       	eor	r10, r10
    2fba:	bb 24       	eor	r11, r11
    2fbc:	65 01       	movw	r12, r10
	uint32_t BytesToRead     = PM_GetStoredDataSize(Type);      // Get the byte size of the stored program
    2fbe:	0e 94 fc 13 	call	0x27f8 <PM_GetStoredDataSize>
    2fc2:	2b 01       	movw	r4, r22
    2fc4:	3c 01       	movw	r6, r24
	uint16_t BytesPerProgram;
	uint16_t PageLength;
	uint8_t* EEPROMAddress;
	uint8_t  ContinuedPage   = FALSE;
    2fc6:	33 24       	eor	r3, r3
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \c addr. */
uint16_t
eeprom_read_word (const uint16_t *addr)
{
    2fc8:	c1 30       	cpi	r28, 0x01	; 1
    2fca:	19 f4       	brne	.+6      	; 0x2fd2 <PM_CreateProgrammingPackets+0x3e>
    2fcc:	a1 e8       	ldi	r26, 0x81	; 129
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <PM_CreateProgrammingPackets+0x42>
    2fd2:	a3 e8       	ldi	r26, 0x83	; 131
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
  uint16_t result;

  asm ( 
    2fd6:	0e 94 a7 1a 	call	0x354e <__eeprom_read_word_1F2021>
    2fda:	4f 01       	movw	r8, r30

	PageLength  = eeprom_read_word((Type == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength);
	CurrAddress = 0;
    2fdc:	10 92 42 01 	sts	0x0142, r1
    2fe0:	10 92 43 01 	sts	0x0143, r1
    2fe4:	10 92 44 01 	sts	0x0144, r1
    2fe8:	10 92 45 01 	sts	0x0145, r1

	if (Type == TYPE_FLASH)
    2fec:	c1 30       	cpi	r28, 0x01	; 1
    2fee:	49 f4       	brne	.+18     	; 0x3002 <PM_CreateProgrammingPackets+0x6e>
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram;       // Set the EEPROM pointer to the write flash command bytes location
    2ff0:	c2 e0       	ldi	r28, 0x02	; 2
    2ff2:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(0, 0);
    2ff4:	60 e0       	ldi	r22, 0x00	; 0
    2ff6:	70 e0       	ldi	r23, 0x00	; 0
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	0e 94 10 0a 	call	0x1420 <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_FLASH_ISP;
    2ffe:	83 e1       	ldi	r24, 0x13	; 19
    3000:	09 c0       	rjmp	.+18     	; 0x3014 <PM_CreateProgrammingPackets+0x80>
	}
	else
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;        // Set the EEPROM pointer to the write EEPROM command bytes location
    3002:	cb e0       	ldi	r28, 0x0B	; 11
    3004:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(PM_EEPROM_OFFSET / DF_INTERNALDF_BUFFBYTES, PM_EEPROM_OFFSET % DF_INTERNALDF_BUFFBYTES); // Start read from the EEPROM offset location
    3006:	60 ee       	ldi	r22, 0xE0	; 224
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	84 ee       	ldi	r24, 0xE4	; 228
    300c:	93 e0       	ldi	r25, 0x03	; 3
    300e:	0e 94 10 0a 	call	0x1420 <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_EEPROM_ISP;
    3012:	85 e1       	ldi	r24, 0x15	; 21
    3014:	80 93 4b 01 	sts	0x014B, r24
    3018:	ec e4       	ldi	r30, 0x4C	; 76
    301a:	f1 e0       	ldi	r31, 0x01	; 1
    301c:	98 e0       	ldi	r25, 0x08	; 8
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    301e:	de 01       	movw	r26, r28
    3020:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
    3024:	80 2d       	mov	r24, r0
    3026:	81 93       	st	Z+, r24
	}

	for (uint8_t B = 1; B <= 9 ; B++)                 // Load in the write data command bytes
	{
		PacketBytes[B] = eeprom_read_byte(EEPROMAddress); // Synthesise a write packet header
		EEPROMAddress++;                               // Increment the EEPROM location counter
    3028:	21 96       	adiw	r28, 0x01	; 1
    302a:	91 50       	subi	r25, 0x01	; 1
    302c:	97 ff       	sbrs	r25, 7
    302e:	f7 cf       	rjmp	.-18     	; 0x301e <PM_CreateProgrammingPackets+0x8a>
	}
	
	BytesPerProgram = ((uint16_t)PacketBytes[1] << 8)
    3030:	80 91 4c 01 	lds	r24, 0x014C
    3034:	99 27       	eor	r25, r25
    3036:	d8 2f       	mov	r29, r24
    3038:	cc 27       	eor	r28, r28
    303a:	80 91 4d 01 	lds	r24, 0x014D
    303e:	99 27       	eor	r25, r25
    3040:	c8 2b       	or	r28, r24
    3042:	d9 2b       	or	r29, r25
	                | PacketBytes[2];

	while (BytesRead < BytesToRead)
	{
		if (PacketBytes[3] & ISPCC_PROG_MODE_PAGE)
		{
			if (PageLength > 160) // Max 160 bytes at a time
			{
				if (!(ContinuedPage))                      // Start of a new page, program in the first 150 bytes
				{
					BytesPerProgram = 160;
					PacketBytes[3] &= ~ISPCC_PROG_MODE_PAGEDONE;		
					ContinuedPage = TRUE;
				}
				else                                       // Middle of a page, program in the remainder
				{
					BytesPerProgram = PageLength - 160;
					PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
					ContinuedPage = FALSE;
				}
				
				for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page				

				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);
				PacketBytes[2] = (uint8_t)(BytesPerProgram);

				BytesRead += BytesPerProgram;                         // Increment the counter
			}
			else
			{
				for (uint16_t LoadB = 0; LoadB < PageLength; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page
			
				PacketBytes[1]  = (uint8_t)(PageLength >> 8);
				PacketBytes[2]  = (uint8_t)(PageLength);
				PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;

				BytesRead += PageLength;                            // Increment the counter
			}
		}
		else
		{
			if ((BytesRead + BytesPerProgram) > BytesToRead)        // Less than a whole BytesPerProgram left of data to write
			{
				BytesPerProgram = BytesToRead - BytesRead;          // Next lot of bytes will be the remaining data length
				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);   // \. Save the new length
				PacketBytes[2] = (uint8_t)(BytesPerProgram);        // /  into the data packet
			}

			for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
				PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);    // Load in the page
			
			BytesRead += BytesPerProgram;                           // Increment the counter
		}
	
		if (!(BytesRead & 0xFFFF) && (BytesRead & 0x00FF0000))      // Extended address required
		{
			USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);            // Load extended address command
			USI_SPITransmit(0x00);
			USI_SPITransmit((BytesRead & 0x00FF0000) >> 16);        // The 3rd byte of the long holds the extended address
			USI_SPITransmit(0x00);
		}

		ISPCC_ProgramChip();                                        // Start the program cycle
    3044:	a4 14       	cp	r10, r4
    3046:	b5 04       	cpc	r11, r5
    3048:	c6 04       	cpc	r12, r6
    304a:	d7 04       	cpc	r13, r7
    304c:	08 f0       	brcs	.+2      	; 0x3050 <PM_CreateProgrammingPackets+0xbc>
    304e:	b2 c0       	rjmp	.+356    	; 0x31b4 <PM_CreateProgrammingPackets+0x220>
    3050:	20 91 4e 01 	lds	r18, 0x014E
    3054:	82 2f       	mov	r24, r18
    3056:	99 27       	eor	r25, r25
    3058:	ac 01       	movw	r20, r24
    305a:	41 70       	andi	r20, 0x01	; 1
    305c:	50 70       	andi	r21, 0x00	; 0
    305e:	80 ff       	sbrs	r24, 0
    3060:	53 c0       	rjmp	.+166    	; 0x3108 <PM_CreateProgrammingPackets+0x174>
    3062:	f1 ea       	ldi	r31, 0xA1	; 161
    3064:	8f 16       	cp	r8, r31
    3066:	91 04       	cpc	r9, r1
    3068:	60 f1       	brcs	.+88     	; 0x30c2 <PM_CreateProgrammingPackets+0x12e>
    306a:	33 20       	and	r3, r3
    306c:	41 f4       	brne	.+16     	; 0x307e <PM_CreateProgrammingPackets+0xea>
    306e:	c0 ea       	ldi	r28, 0xA0	; 160
    3070:	d0 e0       	ldi	r29, 0x00	; 0
    3072:	2f 77       	andi	r18, 0x7F	; 127
    3074:	20 93 4e 01 	sts	0x014E, r18
    3078:	31 e0       	ldi	r19, 0x01	; 1
    307a:	33 2e       	mov	r3, r19
    307c:	07 c0       	rjmp	.+14     	; 0x308c <PM_CreateProgrammingPackets+0xf8>
    307e:	e4 01       	movw	r28, r8
    3080:	c0 5a       	subi	r28, 0xA0	; 160
    3082:	d0 40       	sbci	r29, 0x00	; 0
    3084:	20 68       	ori	r18, 0x80	; 128
    3086:	20 93 4e 01 	sts	0x014E, r18
    308a:	33 24       	eor	r3, r3
    308c:	00 e0       	ldi	r16, 0x00	; 0
    308e:	10 e0       	ldi	r17, 0x00	; 0
    3090:	0c 17       	cp	r16, r28
    3092:	1d 07       	cpc	r17, r29
    3094:	78 f4       	brcc	.+30     	; 0x30b4 <PM_CreateProgrammingPackets+0x120>
    3096:	25 e5       	ldi	r18, 0x55	; 85
    3098:	e2 2e       	mov	r14, r18
    309a:	21 e0       	ldi	r18, 0x01	; 1
    309c:	f2 2e       	mov	r15, r18
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    30a4:	f7 01       	movw	r30, r14
    30a6:	81 93       	st	Z+, r24
    30a8:	7f 01       	movw	r14, r30
    30aa:	0f 5f       	subi	r16, 0xFF	; 255
    30ac:	1f 4f       	sbci	r17, 0xFF	; 255
    30ae:	0c 17       	cp	r16, r28
    30b0:	1d 07       	cpc	r17, r29
    30b2:	a8 f3       	brcs	.-22     	; 0x309e <PM_CreateProgrammingPackets+0x10a>
    30b4:	8d 2f       	mov	r24, r29
    30b6:	99 27       	eor	r25, r25
    30b8:	80 93 4c 01 	sts	0x014C, r24
    30bc:	c0 93 4d 01 	sts	0x014D, r28
    30c0:	4b c0       	rjmp	.+150    	; 0x3158 <PM_CreateProgrammingPackets+0x1c4>
    30c2:	00 e0       	ldi	r16, 0x00	; 0
    30c4:	10 e0       	ldi	r17, 0x00	; 0
    30c6:	08 15       	cp	r16, r8
    30c8:	19 05       	cpc	r17, r9
    30ca:	78 f4       	brcc	.+30     	; 0x30ea <PM_CreateProgrammingPackets+0x156>
    30cc:	85 e5       	ldi	r24, 0x55	; 85
    30ce:	e8 2e       	mov	r14, r24
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	f8 2e       	mov	r15, r24
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    30da:	f7 01       	movw	r30, r14
    30dc:	81 93       	st	Z+, r24
    30de:	7f 01       	movw	r14, r30
    30e0:	0f 5f       	subi	r16, 0xFF	; 255
    30e2:	1f 4f       	sbci	r17, 0xFF	; 255
    30e4:	08 15       	cp	r16, r8
    30e6:	19 05       	cpc	r17, r9
    30e8:	a8 f3       	brcs	.-22     	; 0x30d4 <PM_CreateProgrammingPackets+0x140>
    30ea:	89 2d       	mov	r24, r9
    30ec:	99 27       	eor	r25, r25
    30ee:	80 93 4c 01 	sts	0x014C, r24
    30f2:	80 92 4d 01 	sts	0x014D, r8
    30f6:	80 91 4e 01 	lds	r24, 0x014E
    30fa:	80 68       	ori	r24, 0x80	; 128
    30fc:	80 93 4e 01 	sts	0x014E, r24
    3100:	c4 01       	movw	r24, r8
    3102:	aa 27       	eor	r26, r26
    3104:	bb 27       	eor	r27, r27
    3106:	2b c0       	rjmp	.+86     	; 0x315e <PM_CreateProgrammingPackets+0x1ca>
    3108:	ce 01       	movw	r24, r28
    310a:	aa 27       	eor	r26, r26
    310c:	bb 27       	eor	r27, r27
    310e:	8a 0d       	add	r24, r10
    3110:	9b 1d       	adc	r25, r11
    3112:	ac 1d       	adc	r26, r12
    3114:	bd 1d       	adc	r27, r13
    3116:	48 16       	cp	r4, r24
    3118:	59 06       	cpc	r5, r25
    311a:	6a 06       	cpc	r6, r26
    311c:	7b 06       	cpc	r7, r27
    311e:	48 f4       	brcc	.+18     	; 0x3132 <PM_CreateProgrammingPackets+0x19e>
    3120:	e2 01       	movw	r28, r4
    3122:	ca 19       	sub	r28, r10
    3124:	db 09       	sbc	r29, r11
    3126:	8d 2f       	mov	r24, r29
    3128:	99 27       	eor	r25, r25
    312a:	80 93 4c 01 	sts	0x014C, r24
    312e:	c0 93 4d 01 	sts	0x014D, r28
    3132:	8a 01       	movw	r16, r20
    3134:	4c 17       	cp	r20, r28
    3136:	5d 07       	cpc	r21, r29
    3138:	78 f4       	brcc	.+30     	; 0x3158 <PM_CreateProgrammingPackets+0x1c4>
    313a:	f5 e5       	ldi	r31, 0x55	; 85
    313c:	ef 2e       	mov	r14, r31
    313e:	f1 e0       	ldi	r31, 0x01	; 1
    3140:	ff 2e       	mov	r15, r31
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    3148:	f7 01       	movw	r30, r14
    314a:	81 93       	st	Z+, r24
    314c:	7f 01       	movw	r14, r30
    314e:	0f 5f       	subi	r16, 0xFF	; 255
    3150:	1f 4f       	sbci	r17, 0xFF	; 255
    3152:	0c 17       	cp	r16, r28
    3154:	1d 07       	cpc	r17, r29
    3156:	a8 f3       	brcs	.-22     	; 0x3142 <PM_CreateProgrammingPackets+0x1ae>
    3158:	ce 01       	movw	r24, r28
    315a:	aa 27       	eor	r26, r26
    315c:	bb 27       	eor	r27, r27
    315e:	a8 0e       	add	r10, r24
    3160:	b9 1e       	adc	r11, r25
    3162:	ca 1e       	adc	r12, r26
    3164:	db 1e       	adc	r13, r27
    3166:	a1 14       	cp	r10, r1
    3168:	b1 04       	cpc	r11, r1
    316a:	e1 f4       	brne	.+56     	; 0x31a4 <PM_CreateProgrammingPackets+0x210>
    316c:	e1 2c       	mov	r14, r1
    316e:	f1 2c       	mov	r15, r1
    3170:	ef ef       	ldi	r30, 0xFF	; 255
    3172:	0e 2f       	mov	r16, r30
    3174:	11 2d       	mov	r17, r1
    3176:	ea 20       	and	r14, r10
    3178:	fb 20       	and	r15, r11
    317a:	0c 21       	and	r16, r12
    317c:	1d 21       	and	r17, r13
    317e:	e1 14       	cp	r14, r1
    3180:	f1 04       	cpc	r15, r1
    3182:	01 05       	cpc	r16, r1
    3184:	11 05       	cpc	r17, r1
    3186:	71 f0       	breq	.+28     	; 0x31a4 <PM_CreateProgrammingPackets+0x210>
    3188:	8d e4       	ldi	r24, 0x4D	; 77
    318a:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    3194:	c8 01       	movw	r24, r16
    3196:	aa 27       	eor	r26, r26
    3198:	bb 27       	eor	r27, r27
    319a:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    31a4:	0e 94 a4 11 	call	0x2348 <ISPCC_ProgramChip>
    31a8:	a4 14       	cp	r10, r4
    31aa:	b5 04       	cpc	r11, r5
    31ac:	c6 04       	cpc	r12, r6
    31ae:	d7 04       	cpc	r13, r7
    31b0:	08 f4       	brcc	.+2      	; 0x31b4 <PM_CreateProgrammingPackets+0x220>
    31b2:	4e cf       	rjmp	.-356    	; 0x3050 <PM_CreateProgrammingPackets+0xbc>
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	ff 90       	pop	r15
    31be:	ef 90       	pop	r14
    31c0:	df 90       	pop	r13
    31c2:	cf 90       	pop	r12
    31c4:	bf 90       	pop	r11
    31c6:	af 90       	pop	r10
    31c8:	9f 90       	pop	r9
    31ca:	8f 90       	pop	r8
    31cc:	7f 90       	pop	r7
    31ce:	6f 90       	pop	r6
    31d0:	5f 90       	pop	r5
    31d2:	4f 90       	pop	r4
    31d4:	3f 90       	pop	r3
    31d6:	08 95       	ret

000031d8 <PM_ShowStoredItemSizes>:
	}
}

void PM_ShowStoredItemSizes(void)
{
    31d8:	1f 93       	push	r17
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	2e 97       	sbiw	r28, 0x0e	; 14
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[14];
	uint8_t ItemInfoIndex = 0;
    31ee:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t TempB;
	
	JoyStatus = 1;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)                           // Joystick is in the non-center position
    31f4:	8e b3       	in	r24, 0x1e	; 30
    31f6:	88 23       	and	r24, r24
    31f8:	e9 f3       	breq	.-6      	; 0x31f4 <PM_ShowStoredItemSizes+0x1c>
		{
			if (JoyStatus & JOY_UP)              // Previous item
    31fa:	f6 9b       	sbis	0x1e, 6	; 30
    31fc:	06 c0       	rjmp	.+12     	; 0x320a <PM_ShowStoredItemSizes+0x32>
				(ItemInfoIndex == 0)? ItemInfoIndex = 3 : ItemInfoIndex--;
    31fe:	11 23       	and	r17, r17
    3200:	11 f4       	brne	.+4      	; 0x3206 <PM_ShowStoredItemSizes+0x2e>
    3202:	13 e0       	ldi	r17, 0x03	; 3
    3204:	0c c0       	rjmp	.+24     	; 0x321e <PM_ShowStoredItemSizes+0x46>
    3206:	11 50       	subi	r17, 0x01	; 1
    3208:	0a c0       	rjmp	.+20     	; 0x321e <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_DOWN)      // Next item
    320a:	f7 9b       	sbis	0x1e, 7	; 30
    320c:	06 c0       	rjmp	.+12     	; 0x321a <PM_ShowStoredItemSizes+0x42>
				(ItemInfoIndex == 3)? ItemInfoIndex = 0 : ItemInfoIndex++;
    320e:	13 30       	cpi	r17, 0x03	; 3
    3210:	11 f4       	brne	.+4      	; 0x3216 <PM_ShowStoredItemSizes+0x3e>
    3212:	10 e0       	ldi	r17, 0x00	; 0
    3214:	04 c0       	rjmp	.+8      	; 0x321e <PM_ShowStoredItemSizes+0x46>
    3216:	1f 5f       	subi	r17, 0xFF	; 255
    3218:	02 c0       	rjmp	.+4      	; 0x321e <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_LEFT)
    321a:	f2 99       	sbic	0x1e, 2	; 30
    321c:	54 c0       	rjmp	.+168    	; 0x32c6 <PM_ShowStoredItemSizes+0xee>
				return;
		
			switch (ItemInfoIndex)
    321e:	81 2f       	mov	r24, r17
    3220:	99 27       	eor	r25, r25
    3222:	81 30       	cpi	r24, 0x01	; 1
    3224:	91 05       	cpc	r25, r1
    3226:	a1 f0       	breq	.+40     	; 0x3250 <PM_ShowStoredItemSizes+0x78>
    3228:	82 30       	cpi	r24, 0x02	; 2
    322a:	91 05       	cpc	r25, r1
    322c:	1c f4       	brge	.+6      	; 0x3234 <PM_ShowStoredItemSizes+0x5c>
    322e:	89 2b       	or	r24, r25
    3230:	39 f0       	breq	.+14     	; 0x3240 <PM_ShowStoredItemSizes+0x68>
    3232:	42 c0       	rjmp	.+132    	; 0x32b8 <PM_ShowStoredItemSizes+0xe0>
    3234:	82 30       	cpi	r24, 0x02	; 2
    3236:	91 05       	cpc	r25, r1
    3238:	01 f1       	breq	.+64     	; 0x327a <PM_ShowStoredItemSizes+0xa2>
    323a:	03 97       	sbiw	r24, 0x03	; 3
    323c:	39 f1       	breq	.+78     	; 0x328c <PM_ShowStoredItemSizes+0xb4>
    323e:	3c c0       	rjmp	.+120    	; 0x32b8 <PM_ShowStoredItemSizes+0xe0>
			{
				case 0:
					strcpy_P(Buffer, PSTR("DATA-"));
    3240:	6c e0       	ldi	r22, 0x0C	; 12
    3242:	74 e0       	ldi	r23, 0x04	; 4
    3244:	ce 01       	movw	r24, r28
    3246:	01 96       	adiw	r24, 0x01	; 1
    3248:	0e 94 3f 1a 	call	0x347e <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_FLASH), &Buffer[5], 10);
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	07 c0       	rjmp	.+14     	; 0x325e <PM_ShowStoredItemSizes+0x86>
					break;
				case 1:
					strcpy_P(Buffer, PSTR("EPRM-"));
    3250:	62 e1       	ldi	r22, 0x12	; 18
    3252:	74 e0       	ldi	r23, 0x04	; 4
    3254:	ce 01       	movw	r24, r28
    3256:	01 96       	adiw	r24, 0x01	; 1
    3258:	0e 94 3f 1a 	call	0x347e <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_EEPROM), &Buffer[5], 10);
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	0e 94 fc 13 	call	0x27f8 <PM_GetStoredDataSize>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	2a e0       	ldi	r18, 0x0A	; 10
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	ae 01       	movw	r20, r28
    326c:	4a 5f       	subi	r20, 0xFA	; 250
    326e:	5f 4f       	sbci	r21, 0xFF	; 255
    3270:	bc 01       	movw	r22, r24
    3272:	cd 01       	movw	r24, r26
    3274:	0e 94 46 1a 	call	0x348c <ultoa>
					break;
    3278:	1f c0       	rjmp	.+62     	; 0x32b8 <PM_ShowStoredItemSizes+0xe0>
				case 2:
					strcpy_P(Buffer, PSTR("FUSE-"));
    327a:	68 e1       	ldi	r22, 0x18	; 24
    327c:	74 e0       	ldi	r23, 0x04	; 4
    327e:	ce 01       	movw	r24, r28
    3280:	01 96       	adiw	r24, 0x01	; 1
    3282:	0e 94 3f 1a 	call	0x347e <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    3286:	af e2       	ldi	r26, 0x2F	; 47
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	08 c0       	rjmp	.+16     	; 0x329c <PM_ShowStoredItemSizes+0xc4>
					TempB = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);
					break;
				case 3:
					strcpy_P(Buffer, PSTR("LOCK-"));
    328c:	6e e1       	ldi	r22, 0x1E	; 30
    328e:	74 e0       	ldi	r23, 0x04	; 4
    3290:	ce 01       	movw	r24, r28
    3292:	01 96       	adiw	r24, 0x01	; 1
    3294:	0e 94 3f 1a 	call	0x347e <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    3298:	a0 e3       	ldi	r26, 0x30	; 48
    329a:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    329c:	0e 94 9a 1a 	call	0x3534 <__eeprom_read_byte_1F2021>
    32a0:	80 2d       	mov	r24, r0
					TempB = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);		
    32a2:	8f 3f       	cpi	r24, 0xFF	; 255
    32a4:	11 f0       	breq	.+4      	; 0x32aa <PM_ShowStoredItemSizes+0xd2>
    32a6:	99 27       	eor	r25, r25
    32a8:	02 c0       	rjmp	.+4      	; 0x32ae <PM_ShowStoredItemSizes+0xd6>
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	be 01       	movw	r22, r28
    32b0:	6a 5f       	subi	r22, 0xFA	; 250
    32b2:	7f 4f       	sbci	r23, 0xFF	; 255
    32b4:	0e 94 37 03 	call	0x66e <MAIN_IntToStr>
			}
	
			LCD_puts(Buffer);
    32b8:	ce 01       	movw	r24, r28
    32ba:	01 96       	adiw	r24, 0x01	; 1
    32bc:	0e 94 19 08 	call	0x1032 <LCD_puts>

			MAIN_WaitForJoyRelease();
    32c0:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
    32c4:	97 cf       	rjmp	.-210    	; 0x31f4 <PM_ShowStoredItemSizes+0x1c>
    32c6:	2e 96       	adiw	r28, 0x0e	; 14
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	f8 94       	cli
    32cc:	de bf       	out	0x3e, r29	; 62
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	cd bf       	out	0x3d, r28	; 61
    32d2:	df 91       	pop	r29
    32d4:	cf 91       	pop	r28
    32d6:	1f 91       	pop	r17
    32d8:	08 95       	ret

000032da <TM_FindNextTag>:
	DF_EnableDataflash(FALSE);
}

void TM_FindNextTag(void)
{
    32da:	af 92       	push	r10
    32dc:	bf 92       	push	r11
    32de:	df 92       	push	r13
    32e0:	ef 92       	push	r14
    32e2:	ff 92       	push	r15
    32e4:	0f 93       	push	r16
    32e6:	1f 93       	push	r17
    32e8:	cf 93       	push	r28
    32ea:	df 93       	push	r29
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
    32f0:	69 97       	sbiw	r28, 0x19	; 25
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	de bf       	out	0x3e, r29	; 62
    32f8:	0f be       	out	0x3f, r0	; 63
    32fa:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Buffer[21];
	uint8_t  HeadBuff[4]      = BT_TAGHEADER;
    32fc:	80 e4       	ldi	r24, 0x40	; 64
    32fe:	8e 8b       	std	Y+22, r24	; 0x16
    3300:	86 e1       	ldi	r24, 0x16	; 22
    3302:	a8 2e       	mov	r10, r24
    3304:	b1 2c       	mov	r11, r1
    3306:	ac 0e       	add	r10, r28
    3308:	bd 1e       	adc	r11, r29
    330a:	88 e2       	ldi	r24, 0x28	; 40
    330c:	8f 8b       	std	Y+23, r24	; 0x17
    330e:	83 e2       	ldi	r24, 0x23	; 35
    3310:	88 8f       	std	Y+24, r24	; 0x18
    3312:	89 e2       	ldi	r24, 0x29	; 41
    3314:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t ProgDataSize     = PM_GetStoredDataSize(TYPE_FLASH);
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	0e 94 fc 13 	call	0x27f8 <PM_GetStoredDataSize>
    331c:	7b 01       	movw	r14, r22
    331e:	8c 01       	movw	r16, r24
	uint8_t  TotalOkHeadBytes = 0;
    3320:	dd 24       	eor	r13, r13
	uint8_t  TagByte;
	uint8_t  BytesRead;
	
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);    // Orange = busy
    3322:	81 b3       	in	r24, 0x11	; 17
    3324:	80 63       	ori	r24, 0x30	; 48
    3326:	81 bb       	out	0x11, r24	; 17

	while (DFPos < ProgDataSize)
	{
		BytesRead = 1;
		
		if (SPI_SPITransmit(0x00) == HeadBuff[TotalOkHeadBytes++])
		{
			if (TotalOkHeadBytes == 4)
			{
				uint8_t HB;
			
				for (HB = 0; HB < 20; HB++)
				{
					TagByte = SPI_SPITransmit(0x00);
					Buffer[HB] = TagByte;
					
					if (TagByte == 0x00)
					  break;
				}
				
				Buffer[20] = '\0';             // Make sure string is null-terminated

				TagExists = TRUE;
				BytesRead = (HB + 2);

				LCD_puts(Buffer);
				MAIN_SETSTATUSLED(MAIN_STATLED_GREEN); // Green = ready
				return;
			}
		}
		else
		{
			TotalOkHeadBytes = 0;
		}

		DFPos += BytesRead;
    3328:	80 91 b4 02 	lds	r24, 0x02B4
    332c:	90 91 b5 02 	lds	r25, 0x02B5
    3330:	a0 91 b6 02 	lds	r26, 0x02B6
    3334:	b0 91 b7 02 	lds	r27, 0x02B7
    3338:	8e 15       	cp	r24, r14
    333a:	9f 05       	cpc	r25, r15
    333c:	a0 07       	cpc	r26, r16
    333e:	b1 07       	cpc	r27, r17
    3340:	08 f0       	brcs	.+2      	; 0x3344 <TM_FindNextTag+0x6a>
    3342:	43 c0       	rjmp	.+134    	; 0x33ca <TM_FindNextTag+0xf0>
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    334a:	f5 01       	movw	r30, r10
    334c:	ed 0d       	add	r30, r13
    334e:	f1 1d       	adc	r31, r1
    3350:	d3 94       	inc	r13
    3352:	90 81       	ld	r25, Z
    3354:	89 17       	cp	r24, r25
    3356:	21 f5       	brne	.+72     	; 0x33a0 <TM_FindNextTag+0xc6>
    3358:	84 e0       	ldi	r24, 0x04	; 4
    335a:	d8 16       	cp	r13, r24
    335c:	11 f5       	brne	.+68     	; 0x33a2 <TM_FindNextTag+0xc8>
    335e:	ff 24       	eor	r15, r15
    3360:	00 e0       	ldi	r16, 0x00	; 0
    3362:	10 e0       	ldi	r17, 0x00	; 0
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    336a:	9e 01       	movw	r18, r28
    336c:	2f 5f       	subi	r18, 0xFF	; 255
    336e:	3f 4f       	sbci	r19, 0xFF	; 255
    3370:	f8 01       	movw	r30, r16
    3372:	e2 0f       	add	r30, r18
    3374:	f3 1f       	adc	r31, r19
    3376:	80 83       	st	Z, r24
    3378:	88 23       	and	r24, r24
    337a:	31 f0       	breq	.+12     	; 0x3388 <TM_FindNextTag+0xae>
    337c:	f3 94       	inc	r15
    337e:	0f 5f       	subi	r16, 0xFF	; 255
    3380:	1f 4f       	sbci	r17, 0xFF	; 255
    3382:	83 e1       	ldi	r24, 0x13	; 19
    3384:	8f 15       	cp	r24, r15
    3386:	70 f7       	brcc	.-36     	; 0x3364 <TM_FindNextTag+0x8a>
    3388:	1d 8a       	std	Y+21, r1	; 0x15
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	80 93 62 02 	sts	0x0262, r24
    3390:	c9 01       	movw	r24, r18
    3392:	0e 94 19 08 	call	0x1032 <LCD_puts>
    3396:	81 b3       	in	r24, 0x11	; 17
    3398:	8f 7c       	andi	r24, 0xCF	; 207
    339a:	80 61       	ori	r24, 0x10	; 16
    339c:	81 bb       	out	0x11, r24	; 17
    339e:	31 c0       	rjmp	.+98     	; 0x3402 <TM_FindNextTag+0x128>
    33a0:	dd 24       	eor	r13, r13
    33a2:	80 91 b4 02 	lds	r24, 0x02B4
    33a6:	90 91 b5 02 	lds	r25, 0x02B5
    33aa:	a0 91 b6 02 	lds	r26, 0x02B6
    33ae:	b0 91 b7 02 	lds	r27, 0x02B7
    33b2:	01 96       	adiw	r24, 0x01	; 1
    33b4:	a1 1d       	adc	r26, r1
    33b6:	b1 1d       	adc	r27, r1
    33b8:	80 93 b4 02 	sts	0x02B4, r24
    33bc:	90 93 b5 02 	sts	0x02B5, r25
    33c0:	a0 93 b6 02 	sts	0x02B6, r26
    33c4:	b0 93 b7 02 	sts	0x02B7, r27
    33c8:	b7 cf       	rjmp	.-146    	; 0x3338 <TM_FindNextTag+0x5e>
	}
	
	DF_ContinuousReadEnable(0, 0);
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	70 e0       	ldi	r23, 0x00	; 0
    33ce:	cb 01       	movw	r24, r22
    33d0:	0e 94 10 0a 	call	0x1420 <DF_ContinuousReadEnable>
	DFPos = 0;
    33d4:	10 92 b4 02 	sts	0x02B4, r1
    33d8:	10 92 b5 02 	sts	0x02B5, r1
    33dc:	10 92 b6 02 	sts	0x02B6, r1
    33e0:	10 92 b7 02 	sts	0x02B7, r1
	
	if (TagExists == FALSE)
    33e4:	80 91 62 02 	lds	r24, 0x0262
    33e8:	88 23       	and	r24, r24
    33ea:	49 f4       	brne	.+18     	; 0x33fe <TM_FindNextTag+0x124>
	{
		MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);  // Green = ready
    33ec:	81 b3       	in	r24, 0x11	; 17
    33ee:	8f 7c       	andi	r24, 0xCF	; 207
    33f0:	80 61       	ori	r24, 0x10	; 16
    33f2:	81 bb       	out	0x11, r24	; 17
		MAIN_ShowError(PSTR("NO TAGS"));
    33f4:	84 e2       	ldi	r24, 0x24	; 36
    33f6:	94 e0       	ldi	r25, 0x04	; 4
    33f8:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
    33fc:	02 c0       	rjmp	.+4      	; 0x3402 <TM_FindNextTag+0x128>
	}
	else
	{
		/* The following line _is_ recursion, but the function will only ever call itself
		   a maximum of one time. The function will call itself upon skipping from the last
		   tag stored in the program data to the first; to guard against infinite recursion
		   if no tags are present, the system will error out if the TagExists flag is empty
		   after a full data read. Once a tag has been read and displayed onto the LCD, the
           function returns to the main tag handling routine.                               */
		TM_FindNextTag();
    33fe:	0e 94 6d 19 	call	0x32da <TM_FindNextTag>
    3402:	69 96       	adiw	r28, 0x19	; 25
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	1f 91       	pop	r17
    3414:	0f 91       	pop	r16
    3416:	ff 90       	pop	r15
    3418:	ef 90       	pop	r14
    341a:	df 90       	pop	r13
    341c:	bf 90       	pop	r11
    341e:	af 90       	pop	r10
    3420:	08 95       	ret

00003422 <TM_ShowTags>:
    3422:	60 e0       	ldi	r22, 0x00	; 0
    3424:	70 e0       	ldi	r23, 0x00	; 0
    3426:	cb 01       	movw	r24, r22
    3428:	0e 94 10 0a 	call	0x1420 <DF_ContinuousReadEnable>
    342c:	10 92 62 02 	sts	0x0262, r1
    3430:	10 92 b4 02 	sts	0x02B4, r1
    3434:	10 92 b5 02 	sts	0x02B5, r1
    3438:	10 92 b6 02 	sts	0x02B6, r1
    343c:	10 92 b7 02 	sts	0x02B7, r1
    3440:	0e 94 6d 19 	call	0x32da <TM_FindNextTag>
    3444:	80 91 62 02 	lds	r24, 0x0262
    3448:	88 23       	and	r24, r24
    344a:	71 f0       	breq	.+28     	; 0x3468 <TM_ShowTags+0x46>
    344c:	8e b3       	in	r24, 0x1e	; 30
    344e:	88 23       	and	r24, r24
    3450:	e9 f3       	breq	.-6      	; 0x344c <TM_ShowTags+0x2a>
    3452:	f7 9b       	sbis	0x1e, 7	; 30
    3454:	03 c0       	rjmp	.+6      	; 0x345c <TM_ShowTags+0x3a>
    3456:	0e 94 6d 19 	call	0x32da <TM_FindNextTag>
    345a:	02 c0       	rjmp	.+4      	; 0x3460 <TM_ShowTags+0x3e>
    345c:	f2 99       	sbic	0x1e, 2	; 30
    345e:	03 c0       	rjmp	.+6      	; 0x3466 <TM_ShowTags+0x44>
    3460:	0e 94 45 02 	call	0x48a <MAIN_WaitForJoyRelease>
    3464:	f3 cf       	rjmp	.-26     	; 0x344c <TM_ShowTags+0x2a>
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    346c:	08 95       	ret

0000346e <__vector_2>:
.global PCINT0_vect             ; Pin change 0 (joystick)
.global PCINT1_vect             ; Pin change 1 (joystick)

PCINT0_vect:
  jmp PCINT1_vect
    346e:	0c 94 96 03 	jmp	0x72c <__vector_3>

00003472 <__vector_10>:

.global TIMER0_COMP_vect             ; Timer 0 compare

TIMER0_COMP_vect:
  push r24
    3472:	8f 93       	push	r24
  ldi r24, (USI_CONTROL_REG_FLAGS | (1<<USITC))
    3474:	8b e5       	ldi	r24, 0x5B	; 91
  sts _SFR_MEM_ADDR(USICR), r24
    3476:	80 93 b8 00 	sts	0x00B8, r24
  pop r24
    347a:	8f 91       	pop	r24
  reti
    347c:	18 95       	reti

0000347e <strcpy_P>:
    347e:	fb 01       	movw	r30, r22
    3480:	dc 01       	movw	r26, r24
    3482:	05 90       	lpm	r0, Z+
    3484:	0d 92       	st	X+, r0
    3486:	00 20       	and	r0, r0
    3488:	e1 f7       	brne	.-8      	; 0x3482 <strcpy_P+0x4>
    348a:	08 95       	ret

0000348c <ultoa>:
    348c:	fa 01       	movw	r30, r20
    348e:	cf 93       	push	r28
    3490:	ff 93       	push	r31
    3492:	ef 93       	push	r30
    3494:	22 30       	cpi	r18, 0x02	; 2
    3496:	cc f0       	brlt	.+50     	; 0x34ca <ultoa+0x3e>
    3498:	25 32       	cpi	r18, 0x25	; 37
    349a:	bc f4       	brge	.+46     	; 0x34ca <ultoa+0x3e>
    349c:	c2 2f       	mov	r28, r18
    349e:	2c 2f       	mov	r18, r28
    34a0:	33 27       	eor	r19, r19
    34a2:	44 27       	eor	r20, r20
    34a4:	55 27       	eor	r21, r21
    34a6:	ff 93       	push	r31
    34a8:	ef 93       	push	r30
    34aa:	0e 94 c2 1a 	call	0x3584 <__udivmodsi4>
    34ae:	ef 91       	pop	r30
    34b0:	ff 91       	pop	r31
    34b2:	60 5d       	subi	r22, 0xD0	; 208
    34b4:	6a 33       	cpi	r22, 0x3A	; 58
    34b6:	0c f0       	brlt	.+2      	; 0x34ba <ultoa+0x2e>
    34b8:	69 5d       	subi	r22, 0xD9	; 217
    34ba:	61 93       	st	Z+, r22
    34bc:	b9 01       	movw	r22, r18
    34be:	ca 01       	movw	r24, r20
    34c0:	60 50       	subi	r22, 0x00	; 0
    34c2:	70 40       	sbci	r23, 0x00	; 0
    34c4:	80 40       	sbci	r24, 0x00	; 0
    34c6:	90 40       	sbci	r25, 0x00	; 0
    34c8:	51 f7       	brne	.-44     	; 0x349e <ultoa+0x12>
    34ca:	10 82       	st	Z, r1
    34cc:	8f 91       	pop	r24
    34ce:	9f 91       	pop	r25
    34d0:	cf 91       	pop	r28
    34d2:	0c 94 6b 1a 	jmp	0x34d6 <strrev>

000034d6 <strrev>:
    34d6:	dc 01       	movw	r26, r24
    34d8:	fc 01       	movw	r30, r24
    34da:	01 90       	ld	r0, Z+
    34dc:	00 20       	and	r0, r0
    34de:	e9 f7       	brne	.-6      	; 0x34da <strrev+0x4>
    34e0:	32 97       	sbiw	r30, 0x02	; 2
    34e2:	ae 17       	cp	r26, r30
    34e4:	bf 07       	cpc	r27, r31
    34e6:	30 f4       	brcc	.+12     	; 0x34f4 <strrev+0x1e>
    34e8:	7c 91       	ld	r23, X
    34ea:	60 81       	ld	r22, Z
    34ec:	70 83       	st	Z, r23
    34ee:	31 97       	sbiw	r30, 0x01	; 1
    34f0:	6d 93       	st	X+, r22
    34f2:	f7 cf       	rjmp	.-18     	; 0x34e2 <strrev+0xc>
    34f4:	08 95       	ret

000034f6 <__mulsi3>:
    34f6:	62 9f       	mul	r22, r18
    34f8:	d0 01       	movw	r26, r0
    34fa:	73 9f       	mul	r23, r19
    34fc:	f0 01       	movw	r30, r0
    34fe:	82 9f       	mul	r24, r18
    3500:	e0 0d       	add	r30, r0
    3502:	f1 1d       	adc	r31, r1
    3504:	64 9f       	mul	r22, r20
    3506:	e0 0d       	add	r30, r0
    3508:	f1 1d       	adc	r31, r1
    350a:	92 9f       	mul	r25, r18
    350c:	f0 0d       	add	r31, r0
    350e:	83 9f       	mul	r24, r19
    3510:	f0 0d       	add	r31, r0
    3512:	74 9f       	mul	r23, r20
    3514:	f0 0d       	add	r31, r0
    3516:	65 9f       	mul	r22, r21
    3518:	f0 0d       	add	r31, r0
    351a:	99 27       	eor	r25, r25
    351c:	72 9f       	mul	r23, r18
    351e:	b0 0d       	add	r27, r0
    3520:	e1 1d       	adc	r30, r1
    3522:	f9 1f       	adc	r31, r25
    3524:	63 9f       	mul	r22, r19
    3526:	b0 0d       	add	r27, r0
    3528:	e1 1d       	adc	r30, r1
    352a:	f9 1f       	adc	r31, r25
    352c:	bd 01       	movw	r22, r26
    352e:	cf 01       	movw	r24, r30
    3530:	11 24       	eor	r1, r1
    3532:	08 95       	ret

00003534 <__eeprom_read_byte_1F2021>:
    3534:	f9 99       	sbic	0x1f, 1	; 31
    3536:	fe cf       	rjmp	.-4      	; 0x3534 <__eeprom_read_byte_1F2021>
    3538:	b2 bd       	out	0x22, r27	; 34
    353a:	a1 bd       	out	0x21, r26	; 33
    353c:	f8 9a       	sbi	0x1f, 0	; 31
    353e:	11 96       	adiw	r26, 0x01	; 1
    3540:	00 b4       	in	r0, 0x20	; 32
    3542:	08 95       	ret

00003544 <__eeprom_read_block_1F2021>:
    3544:	f7 df       	rcall	.-18     	; 0x3534 <__eeprom_read_byte_1F2021>
    3546:	01 92       	st	Z+, r0
    3548:	1a 94       	dec	r1
    354a:	e1 f7       	brne	.-8      	; 0x3544 <__eeprom_read_block_1F2021>
    354c:	08 95       	ret

0000354e <__eeprom_read_word_1F2021>:
    354e:	f2 df       	rcall	.-28     	; 0x3534 <__eeprom_read_byte_1F2021>
    3550:	e0 2d       	mov	r30, r0
    3552:	f0 df       	rcall	.-32     	; 0x3534 <__eeprom_read_byte_1F2021>
    3554:	f0 2d       	mov	r31, r0
    3556:	08 95       	ret

00003558 <__eeprom_write_byte_1F2021>:
    3558:	f9 99       	sbic	0x1f, 1	; 31
    355a:	fe cf       	rjmp	.-4      	; 0x3558 <__eeprom_write_byte_1F2021>
    355c:	b2 bd       	out	0x22, r27	; 34
    355e:	a1 bd       	out	0x21, r26	; 33
    3560:	00 bc       	out	0x20, r0	; 32
    3562:	11 96       	adiw	r26, 0x01	; 1
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	fa 9a       	sbi	0x1f, 2	; 31
    356a:	f9 9a       	sbi	0x1f, 1	; 31
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	08 95       	ret

00003570 <__eeprom_write_word_1F2021>:
    3570:	f3 df       	rcall	.-26     	; 0x3558 <__eeprom_write_byte_1F2021>
    3572:	01 2c       	mov	r0, r1
    3574:	f1 df       	rcall	.-30     	; 0x3558 <__eeprom_write_byte_1F2021>
    3576:	11 24       	eor	r1, r1
    3578:	08 95       	ret

0000357a <__eeprom_write_block_1F2021>:
    357a:	01 90       	ld	r0, Z+
    357c:	ed df       	rcall	.-38     	; 0x3558 <__eeprom_write_byte_1F2021>
    357e:	1a 94       	dec	r1
    3580:	e1 f7       	brne	.-8      	; 0x357a <__eeprom_write_block_1F2021>
    3582:	08 95       	ret

00003584 <__udivmodsi4>:
    3584:	a1 e2       	ldi	r26, 0x21	; 33
    3586:	1a 2e       	mov	r1, r26
    3588:	aa 1b       	sub	r26, r26
    358a:	bb 1b       	sub	r27, r27
    358c:	fd 01       	movw	r30, r26
    358e:	0d c0       	rjmp	.+26     	; 0x35aa <__udivmodsi4_ep>

00003590 <__udivmodsi4_loop>:
    3590:	aa 1f       	adc	r26, r26
    3592:	bb 1f       	adc	r27, r27
    3594:	ee 1f       	adc	r30, r30
    3596:	ff 1f       	adc	r31, r31
    3598:	a2 17       	cp	r26, r18
    359a:	b3 07       	cpc	r27, r19
    359c:	e4 07       	cpc	r30, r20
    359e:	f5 07       	cpc	r31, r21
    35a0:	20 f0       	brcs	.+8      	; 0x35aa <__udivmodsi4_ep>
    35a2:	a2 1b       	sub	r26, r18
    35a4:	b3 0b       	sbc	r27, r19
    35a6:	e4 0b       	sbc	r30, r20
    35a8:	f5 0b       	sbc	r31, r21

000035aa <__udivmodsi4_ep>:
    35aa:	66 1f       	adc	r22, r22
    35ac:	77 1f       	adc	r23, r23
    35ae:	88 1f       	adc	r24, r24
    35b0:	99 1f       	adc	r25, r25
    35b2:	1a 94       	dec	r1
    35b4:	69 f7       	brne	.-38     	; 0x3590 <__udivmodsi4_loop>
    35b6:	60 95       	com	r22
    35b8:	70 95       	com	r23
    35ba:	80 95       	com	r24
    35bc:	90 95       	com	r25
    35be:	9b 01       	movw	r18, r22
    35c0:	ac 01       	movw	r20, r24
    35c2:	bd 01       	movw	r22, r26
    35c4:	cf 01       	movw	r24, r30
    35c6:	08 95       	ret
