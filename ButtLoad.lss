
ButtLoad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000036a6  0000373a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000036a6  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b0  00800126  00800126  00003760  2**0
                  ALLOC
  3 .noinit       00000000  008002d6  008002d6  00003760  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00003760  2**0
                  CONTENTS
  5 .stab         00000084  00000000  00000000  00003760  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000078  00000000  00000000  000037e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000140  00000000  00000000  0000385c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000f6b  00000000  00000000  0000399c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003470  00000000  00000000  00004907  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e37  00000000  00000000  00007d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003059  00000000  00000000  00008bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001105  00000000  00000000  0000bc07  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 01 	jmp	0x3fa <__init>
       4:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
       8:	0c 94 ce 1a 	jmp	0x359c <__vector_2>
       c:	0c 94 89 03 	jmp	0x712 <__vector_3>
      10:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      14:	0c 94 2e 07 	jmp	0xe5c <__vector_5>
      18:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      1c:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      20:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      24:	0c 94 66 0b 	jmp	0x16cc <__vector_9>
      28:	0c 94 d0 1a 	jmp	0x35a0 <__vector_10>
      2c:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      30:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      34:	0c 94 b5 08 	jmp	0x116a <__vector_13>
      38:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      3c:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      40:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      44:	0c 94 fa 08 	jmp	0x11f4 <__vector_17>
      48:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      4c:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      50:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      54:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      58:	0c 94 eb 07 	jmp	0xfd6 <__vector_22>

0000005c <SIFOOptionPtrs>:
      5c:	6f 00 60 00                                         o.`.

00000060 <SIFO_Tags>:
      60:	56 49 45 57 20 44 41 54 41 20 54 41 47 53 00        VIEW DATA TAGS.

0000006f <SIFO_Size>:
      6f:	53 54 4f 52 41 47 45 20 53 49 5a 45 53 00           STORAGE SIZES.

0000007d <USIPSNamePtrs>:
      7d:	a3 00 99 00 8f 00 85 00                             ........

00000085 <USI_Speed3>:
      85:	32 31 30 36 35 31 20 48 5a 00                       210651 HZ.

0000008f <USI_Speed2>:
      8f:	31 31 33 34 32 37 20 48 5a 00                       113427 HZ.

00000099 <USI_Speed1>:
      99:	20 38 36 37 33 38 20 48 5a 00                        86738 HZ.

000000a3 <USI_Speed0>:
      a3:	20 35 37 31 35 33 20 48 5a 00                        57153 HZ.

000000ad <ProgOptions>:
      ad:	16 01 0a 01 fa 00 ea 00 da 00 c6 00 bb 00           ..............

000000bb <PRG_C>:
      bb:	45 52 41 53 45 20 4f 4e 4c 59 00                    ERASE ONLY.

000000c6 <PRG_FL>:
      c6:	46 55 53 45 20 41 4e 44 20 4c 4f 43 4b 20 42 59     FUSE AND LOCK BY
      d6:	54 45 53 00                                         TES.

000000da <PRG_L>:
      da:	4c 4f 43 4b 20 42 59 54 45 53 20 4f 4e 4c 59 00     LOCK BYTES ONLY.

000000ea <PRG_F>:
      ea:	46 55 53 45 20 42 59 54 45 53 20 4f 4e 4c 59 00     FUSE BYTES ONLY.

000000fa <PRG_DE>:
      fa:	44 41 54 41 20 41 4e 44 20 45 45 50 52 4f 4d 00     DATA AND EEPROM.

0000010a <PRG_E>:
     10a:	45 45 50 52 4f 4d 20 4f 4e 4c 59 00                 EEPROM ONLY.

00000116 <PRG_D>:
     116:	44 41 54 41 20 4f 4e 4c 59 00                       DATA ONLY.

00000120 <SettingFunctionPtrs>:
     120:	d2 05 1e 06 76 05 bf 06                             ....v...

00000128 <SettingFunctionNames>:
     128:	5e 01 50 01 43 01 30 01                             ^.P.C.0.

00000130 <SFunc_GOBOOTLOADER>:
     130:	4a 55 4d 50 20 54 4f 20 42 4f 4f 54 4c 4f 41 44     JUMP TO BOOTLOAD
     140:	45 52 00                                            ER.

00000143 <SFunc_CLEARMEM>:
     143:	43 4c 45 41 52 20 4d 45 4d 4f 52 59 00              CLEAR MEMORY.

00000150 <SFunc_SETSPISPEED>:
     150:	53 45 54 20 53 50 49 20 53 50 45 45 44 00           SET SPI SPEED.

0000015e <SFunc_SETCONTRAST>:
     15e:	53 45 54 20 43 4f 4e 54 52 41 53 54 00              SET CONTRAST.

0000016b <MainFunctionPtrs>:
     16b:	da 03 50 05 0b 04 e7 03 67 06 a5 03 53 06           ..P.....g...S.

00000179 <MainFunctionNames>:
     179:	d5 01 ca 01 be 01 aa 01 9b 01 92 01 87 01           ..............

00000187 <Func_SLEEP>:
     187:	53 4c 45 45 50 20 4d 4f 44 45 00                    SLEEP MODE.

00000192 <Func_SETTINGS>:
     192:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

0000019b <Func_PRGMSTOREINFO>:
     19b:	44 41 54 41 53 54 4f 52 45 20 49 4e 46 4f 00        DATASTORE INFO.

000001aa <Func_PRGMDATAFLASH>:
     1aa:	44 41 54 41 46 4c 41 53 48 20 50 52 47 4d 20 4d     DATAFLASH PRGM M
     1ba:	4f 44 45 00                                         ODE.

000001be <Func_PRGMAVR>:
     1be:	50 52 4f 47 52 41 4d 20 41 56 52 00                 PROGRAM AVR.

000001ca <Func_STOREPRGM>:
     1ca:	53 54 4f 52 45 20 50 52 47 4d 00                    STORE PRGM.

000001d5 <Func_ISPPRGM>:
     1d5:	41 56 52 49 53 50 20 4d 4f 44 45 00                 AVRISP MODE.

000001e1 <AboutTextPtrs>:
     1e1:	0c 02 07 02 f8 01 e9 01                             ........

000001e9 <CopyRight>:
     1e9:	3c 43 3e 20 32 30 30 36 20 2d 20 47 50 4c 00        <C> 2006 - GPL.

000001f8 <AuthorName>:
     1f8:	42 59 20 44 45 41 4e 20 43 41 4d 45 52 41 00        BY DEAN CAMERA.

00000207 <VersionInfo>:
     207:	56 31 2d 33 00                                      V1-3.

0000020c <ProgrammerName>:
     20c:	42 55 54 54 4c 4f 41 44 00                          BUTTLOAD.

00000215 <WaitText>:
     215:	2a 57 41 49 54 2a 00                                *WAIT*.

0000021c <BUTTTAG_Author>:
     21c:	40 28 23 29 42 59 20 44 45 41 4e 20 43 41 4d 45     @(#)BY DEAN CAME
     22c:	52 41 00                                            RA.

0000022f <BUTTTAG_Name>:
     22f:	40 28 23 29 42 55 54 54 4c 4f 41 44 20 41 56 52     @(#)BUTTLOAD AVR
     23f:	49 53 50 00                                         ISP.

00000243 <__c.14>:
     243:	50 52 47 3e 20 00                                   PRG> .

00000249 <__c.13>:
     249:	42 41 44 49 53 52 00                                BADISR.

00000250 <__c.6>:
     250:	4e 4f 20 45 52 41 53 45 20 43 4d 44 00              NO ERASE CMD.

0000025d <__c.7>:
     25d:	4e 4f 20 44 41 54 41 00                             NO DATA.

00000265 <__c.8>:
     265:	4e 4f 20 45 45 50 52 4f 4d 00                       NO EEPROM.

0000026f <__c.9>:
     26f:	4e 4f 20 46 55 53 45 20 42 59 54 45 53 00           NO FUSE BYTES.

0000027d <__c.10>:
     27d:	4e 4f 20 4c 4f 43 4b 20 42 59 54 45 53 00           NO LOCK BYTES.

0000028b <__c.11>:
     28b:	50 52 4f 47 52 41 4d 4d 49 4e 47 20 44 4f 4e 45     PROGRAMMING DONE
	...

0000029c <__c.12>:
     29c:	46 41 49 4c 45 44 00                                FAILED.

000002a3 <__c.5>:
     2a3:	2a 53 54 4f 52 41 47 45 20 4d 4f 44 45 2a 00        *STORAGE MODE*.

000002b2 <__c.2>:
     2b2:	43 4f 4e 46 49 52 4d 00                             CONFIRM.

000002ba <__c.3>:
     2ba:	3c 4e 20 59 3e 00                                   <N Y>.

000002c0 <__c.4>:
     2c0:	4d 45 4d 20 43 4c 45 41 52 45 44 00                 MEM CLEARED.

000002cc <__c.1>:
     2cc:	4e 4f 20 53 54 4f 52 45 44 20 50 52 47 4d 00        NO STORED PRGM.

000002db <__c.0>:
     2db:	2a 4a 54 41 47 20 4f 4e 2a 00                       *JTAG ON*.

000002e5 <LCD_SegTable>:
     2e5:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
     2f5:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
     305:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
     315:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
     325:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
     335:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
     345:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

00000351 <USIPSValues>:
     351:	03 80 02 54 01 40 00 22                             ...T.@."

00000359 <DataFlashError>:
     359:	44 41 54 41 46 4c 41 53 48 20 45 52 52 4f 52 00     DATAFLASH ERROR.

00000369 <DF_Pages>:
     369:	00 01 00 02 00 04 00 08 00 10 00 10 00 20 00 20     ............. . 

00000379 <DF_PageSize>:
     379:	08 01 08 01 08 01 08 01 08 01 10 02 10 02 20 04     .............. .

00000389 <DF_PageBits>:
     389:	09 09 09 09 09 0a 0a 0b                             ........

00000391 <__c.0>:
     391:	42 55 46 46 20 4f 56 45 52 46 4c 4f 57 00           BUFF OVERFLOW.

0000039f <DataFlashProgMode>:
     39f:	2a 44 41 54 41 46 4c 41 53 48 20 4d 4f 44 45 2a     *DATAFLASH MODE*
	...

000003b0 <SignonResponse>:
     3b0:	01 00 08 41 56 52 49 53 50 5f 32                    ...AVRISP_2

000003bb <VersionData>:
     3bb:	02 02 04                                            ...

000003be <SyncErrorMessage>:
     3be:	53 59 4e 43 20 45 52 52 4f 52 00                    SYNC ERROR.

000003c9 <AVRISPModeMessage>:
     3c9:	2a 41 54 41 56 52 49 53 50 20 4d 4f 44 45 2a 00     *ATAVRISP MODE*.

000003d9 <__c.0>:
     3d9:	44 41 54 41 2d 00                                   DATA-.

000003df <__c.1>:
     3df:	45 50 52 4d 2d 00                                   EPRM-.

000003e5 <__c.2>:
     3e5:	46 55 53 45 2d 00                                   FUSE-.

000003eb <__c.3>:
     3eb:	4c 4f 43 4b 2d 00                                   LOCK-.

000003f1 <__c.0>:
     3f1:	4e 4f 20 54 41 47 53 00 00                          NO TAGS..

000003fa <__init>:
     3fa:	11 24       	eor	r1, r1
     3fc:	1f be       	out	0x3f, r1	; 63
     3fe:	cf ef       	ldi	r28, 0xFF	; 255
     400:	d4 e0       	ldi	r29, 0x04	; 4
     402:	de bf       	out	0x3e, r29	; 62
     404:	cd bf       	out	0x3d, r28	; 61

00000406 <__do_copy_data>:
     406:	11 e0       	ldi	r17, 0x01	; 1
     408:	a0 e0       	ldi	r26, 0x00	; 0
     40a:	b1 e0       	ldi	r27, 0x01	; 1
     40c:	e6 ea       	ldi	r30, 0xA6	; 166
     40e:	f6 e3       	ldi	r31, 0x36	; 54
     410:	02 c0       	rjmp	.+4      	; 0x416 <.do_copy_data_start>

00000412 <.do_copy_data_loop>:
     412:	05 90       	lpm	r0, Z+
     414:	0d 92       	st	X+, r0

00000416 <.do_copy_data_start>:
     416:	a6 32       	cpi	r26, 0x26	; 38
     418:	b1 07       	cpc	r27, r17
     41a:	d9 f7       	brne	.-10     	; 0x412 <.do_copy_data_loop>

0000041c <__do_clear_bss>:
     41c:	12 e0       	ldi	r17, 0x02	; 2
     41e:	a6 e2       	ldi	r26, 0x26	; 38
     420:	b1 e0       	ldi	r27, 0x01	; 1
     422:	01 c0       	rjmp	.+2      	; 0x426 <.do_clear_bss_start>

00000424 <.do_clear_bss_loop>:
     424:	1d 92       	st	X+, r1

00000426 <.do_clear_bss_start>:
     426:	a6 3d       	cpi	r26, 0xD6	; 214
     428:	b1 07       	cpc	r27, r17
     42a:	e1 f7       	brne	.-8      	; 0x424 <.do_clear_bss_loop>
     42c:	0c 94 5e 02 	jmp	0x4bc <main>

00000430 <__bad_interrupt>:
     430:	0c 94 a0 03 	jmp	0x740 <__vector_default>

00000434 <MAIN_Delay10MS>:

// ======================================================================================

void MAIN_Delay10MS(uint8_t loops)
{
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     438:	28 2f       	mov	r18, r24
     43a:	21 50       	subi	r18, 0x01	; 1
     43c:	2f 3f       	cpi	r18, 0xFF	; 255
     43e:	49 f0       	breq	.+18     	; 0x452 <MAIN_Delay10MS+0x1e>
     440:	a0 e0       	ldi	r26, 0x00	; 0
     442:	b8 e4       	ldi	r27, 0x48	; 72
     444:	c0 e0       	ldi	r28, 0x00	; 0
     446:	d0 e0       	ldi	r29, 0x00	; 0
     448:	cd 01       	movw	r24, r26
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <MAIN_Delay10MS+0x16>
     44e:	21 50       	subi	r18, 0x01	; 1
     450:	d8 f7       	brcc	.-10     	; 0x448 <MAIN_Delay10MS+0x14>
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <MAIN_WaitForJoyRelease>:
  /* Prevents the use of floating point libraries. Delaying in groups of
     10ms increases accuracy by reducing the time overhead for each loop
     interation of the while.                                            */

	while (loops--)
	  _delay_ms(10);
}

void MAIN_Delay1MS(uint8_t loops)
{
  /* Prevents the use of floating point libraries. Less accurate than the
     Delay10MS routine, but nessesary for many commands. The overhead required
     to call the routine is substantially less than the overhead required to
     calculate the float at compile time, so this actually saves execution time. */

	while (loops--)
	  _delay_ms(1);
}

void MAIN_ResetCSLine(uint8_t ActiveInactive)
{
  /* ActiveInactive controls the /Reset line to an AVR device or external dataflash
     /CS line. If the reset polarity parameter is a 0 then interfacing with AT89
	 devices which has an active high reset. Pins are tristated when inactive.      */
	
	switch (ActiveInactive)
	{
		case MAIN_RESETCS_ACTIVE:   // The target RESET line may be either active high or low.
			DDRF |= (1 << 6);
		
			if (!(eeprom_read_byte_169(&Param_ResetPolarity))) // Translate to correct logic level for target device type
			  PORTF |=  (1 << 6);
			else
			  PORTF &= ~(1 << 6);
		
			break;
		case MAIN_RESETCS_EXTDFACTIVE: // Dataflashes are always active low.
			DDRF  |=  (1 << 6);
			PORTF &= ~(1 << 6);
			
			break;
		case MAIN_RESETCS_INACTIVE: // Both modes tristate the pins when inactive.
			DDRF  &= ~(1 << 6);
			PORTF &= ~(1 << 6);
	}
}

void MAIN_WaitForJoyRelease(void)
{
	while (1)
	{
		while (JoyStatus) {};                   // Wait until joystick released
     458:	8e b3       	in	r24, 0x1e	; 30
     45a:	88 23       	and	r24, r24
     45c:	e9 f7       	brne	.-6      	; 0x458 <MAIN_WaitForJoyRelease>

		MAIN_Delay10MS(1);
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	0e 94 1a 02 	call	0x434 <MAIN_Delay10MS>

		if (!(JoyStatus))                       // Joystick still released (not bouncing), return
     464:	8e b3       	in	r24, 0x1e	; 30
     466:	88 23       	and	r24, r24
     468:	b9 f7       	brne	.-18     	; 0x458 <MAIN_WaitForJoyRelease>
     46a:	08 95       	ret

0000046c <FUNCShowAbout>:
		  return;
	}
}

void MAIN_IntToStr(uint16_t IntV, uint8_t* Buff)
{
	// Shows leading zeros, unlike itoa.

	uint8_t Temp = 0;
	
	while (IntV >= 100)
	{
		Temp++;
		IntV -= 100;
	}

	*(Buff++) = '0' + Temp;
	
	Temp = 0;
	
	while (IntV >= 10)
	{
		Temp++;
		IntV -= 10;
	}
		
	*(Buff++) = '0' + Temp;
	*(Buff++) = '0' + IntV;
	*(Buff)   = '\0';
}

void MAIN_ShowProgType(uint8_t Letter)
{
	uint8_t ProgTypeBuffer[7];

	strcpy_P(ProgTypeBuffer, PSTR("PRG> "));
	ProgTypeBuffer[5] = Letter;
	ProgTypeBuffer[6] = '\0';
	
	LCD_puts(ProgTypeBuffer);
}

void MAIN_ShowError(const uint8_t *pFlashStr)
{
	uint8_t ErrorBuff[LCD_TEXTBUFFER_SIZE];       // New buffer, LCD text buffer size
	
	ErrorBuff[0] = 'E';
	ErrorBuff[1] = '>';

	strcpy_P(&ErrorBuff[2], pFlashStr);       // WARNING: If error text is larger than (TEXTBUFFER_SIZE - 2),
	                                          // this will overflow the buffer and probably crash the micro!
	LCD_puts(ErrorBuff);
	
	MAIN_WaitForJoyRelease();
	while (!(JoyStatus & JOY_PRESS)) {};
	MAIN_WaitForJoyRelease();
}

// ======================================================================================

ISR(PCINT1_vect, ISR_NOBLOCK)                 // Joystick routine; PCINT0_vect is bound to this also via JoystickInterrupt.S
{
	JoyStatus = (~PINB & JOY_BMASK)
	          | (~PINE & JOY_EMASK);
}

ISR(BADISR_vect, ISR_NAKED)                   // Bad ISR routine; should never be called, here for safety
{
	MAIN_ShowError(PSTR("BADISR"));
	while (1) {};
}

// ======================================================================================

void FUNCChangeSettings(void)
{
	uint8_t CurrSFunc = 0;
	
	JoyStatus = 1;

	while (1)
	{
		if (JoyStatus)                         // Joystick is in the non-center position
		{
			if (JoyStatus & JOY_UP)            // Previous function
			  (CurrSFunc == 0)? CurrSFunc = 3 : CurrSFunc--;
			else if (JoyStatus & JOY_DOWN)     // Next function
			  (CurrSFunc == 3)? CurrSFunc = 0 : CurrSFunc++;
			else if (JoyStatus & JOY_PRESS)    // Select current function
			  ((FuncPtr)pgm_read_word(&SettingFunctionPtrs[CurrSFunc]))(); // Run associated function
			else if (JoyStatus & JOY_LEFT)
			  return;
		
			// Show current function onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&SettingFunctionNames[CurrSFunc]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCShowAbout(void)
{
     46c:	cf 93       	push	r28
	uint8_t InfoNum = 0;
     46e:	c0 e0       	ldi	r28, 0x00	; 0
	
	JoyStatus = 1;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	8e bb       	out	0x1e, r24	; 30
			
	while (1)
	{
		if (JoyStatus)
     474:	8e b3       	in	r24, 0x1e	; 30
     476:	88 23       	and	r24, r24
     478:	e9 f3       	breq	.-6      	; 0x474 <FUNCShowAbout+0x8>
		{
			if (JoyStatus & JOY_UP)
     47a:	f6 9b       	sbis	0x1e, 6	; 30
     47c:	06 c0       	rjmp	.+12     	; 0x48a <FUNCShowAbout+0x1e>
			  (InfoNum == 0)? InfoNum = 3 : InfoNum--;
     47e:	cc 23       	and	r28, r28
     480:	11 f4       	brne	.+4      	; 0x486 <FUNCShowAbout+0x1a>
     482:	c3 e0       	ldi	r28, 0x03	; 3
     484:	0c c0       	rjmp	.+24     	; 0x49e <FUNCShowAbout+0x32>
     486:	c1 50       	subi	r28, 0x01	; 1
     488:	0a c0       	rjmp	.+20     	; 0x49e <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_DOWN)
     48a:	f7 9b       	sbis	0x1e, 7	; 30
     48c:	06 c0       	rjmp	.+12     	; 0x49a <FUNCShowAbout+0x2e>
			  (InfoNum == 3)? InfoNum = 0 : InfoNum++;
     48e:	c3 30       	cpi	r28, 0x03	; 3
     490:	11 f4       	brne	.+4      	; 0x496 <FUNCShowAbout+0x2a>
     492:	c0 e0       	ldi	r28, 0x00	; 0
     494:	04 c0       	rjmp	.+8      	; 0x49e <FUNCShowAbout+0x32>
     496:	cf 5f       	subi	r28, 0xFF	; 255
     498:	02 c0       	rjmp	.+4      	; 0x49e <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_LEFT)
     49a:	f2 99       	sbic	0x1e, 2	; 30
     49c:	0d c0       	rjmp	.+26     	; 0x4b8 <FUNCShowAbout+0x4c>
			  return;

			LCD_puts_f((uint8_t*)pgm_read_word(&AboutTextPtrs[InfoNum]));
     49e:	ec 2f       	mov	r30, r28
     4a0:	ff 27       	eor	r31, r31
     4a2:	ee 0f       	add	r30, r30
     4a4:	ff 1f       	adc	r31, r31
     4a6:	ef 51       	subi	r30, 0x1F	; 31
     4a8:	fe 4f       	sbci	r31, 0xFE	; 254
     4aa:	85 91       	lpm	r24, Z+
     4ac:	94 91       	lpm	r25, Z
     4ae:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     4b2:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     4b6:	de cf       	rjmp	.-68     	; 0x474 <FUNCShowAbout+0x8>
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <main>:
     4bc:	cd ef       	ldi	r28, 0xFD	; 253
     4be:	d4 e0       	ldi	r29, 0x04	; 4
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	cd bf       	out	0x3d, r28	; 61
     4c4:	10 e0       	ldi	r17, 0x00	; 0
     4c6:	80 e8       	ldi	r24, 0x80	; 128
     4c8:	85 bf       	out	0x35, r24	; 53
     4ca:	85 bf       	out	0x35, r24	; 53
     4cc:	80 bf       	out	0x30, r24	; 48
     4ce:	85 e0       	ldi	r24, 0x05	; 5
     4d0:	80 93 64 00 	sts	0x0064, r24
     4d4:	80 e3       	ldi	r24, 0x30	; 48
     4d6:	80 bb       	out	0x10, r24	; 16
     4d8:	87 e2       	ldi	r24, 0x27	; 39
     4da:	84 b9       	out	0x04, r24	; 4
     4dc:	8f ed       	ldi	r24, 0xDF	; 223
     4de:	85 b9       	out	0x05, r24	; 5
     4e0:	8c e0       	ldi	r24, 0x0C	; 12
     4e2:	8e b9       	out	0x0e, r24	; 14
     4e4:	80 93 6b 00 	sts	0x006B, r24
     4e8:	80 ed       	ldi	r24, 0xD0	; 208
     4ea:	80 93 6c 00 	sts	0x006C, r24
     4ee:	80 ec       	ldi	r24, 0xC0	; 192
     4f0:	8d bb       	out	0x1d, r24	; 29
     4f2:	8c bb       	out	0x1c, r24	; 28
     4f4:	81 b3       	in	r24, 0x11	; 17
     4f6:	8f 7c       	andi	r24, 0xCF	; 207
     4f8:	80 62       	ori	r24, 0x20	; 32
     4fa:	81 bb       	out	0x11, r24	; 17
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
     504:	8a 37       	cpi	r24, 0x7A	; 122
     506:	09 f1       	breq	.+66     	; 0x54a <__stack+0x4b>
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	3a 83       	std	Y+2, r19	; 0x02
     50e:	29 83       	std	Y+1, r18	; 0x01
     510:	80 91 02 01 	lds	r24, 0x0102
     514:	90 91 03 01 	lds	r25, 0x0103
     518:	28 17       	cp	r18, r24
     51a:	39 07       	cpc	r19, r25
     51c:	88 f4       	brcc	.+34     	; 0x540 <__stack+0x41>
     51e:	6f ef       	ldi	r22, 0xFF	; 255
     520:	ce 01       	movw	r24, r28
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	9a 83       	std	Y+2, r25	; 0x02
     530:	89 83       	std	Y+1, r24	; 0x01
     532:	20 91 02 01 	lds	r18, 0x0102
     536:	30 91 03 01 	lds	r19, 0x0103
     53a:	82 17       	cp	r24, r18
     53c:	93 07       	cpc	r25, r19
     53e:	78 f3       	brcs	.-34     	; 0x51e <__stack+0x1f>
     540:	6a e7       	ldi	r22, 0x7A	; 122
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
     54a:	0e 94 4f 07 	call	0xe9e <LCD_Init>
     54e:	84 e0       	ldi	r24, 0x04	; 4
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
     556:	8f 70       	andi	r24, 0x0F	; 15
     558:	80 93 e7 00 	sts	0x00E7, r24
     55c:	78 94       	sei
     55e:	85 e1       	ldi	r24, 0x15	; 21
     560:	92 e0       	ldi	r25, 0x02	; 2
     562:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
     56c:	81 b3       	in	r24, 0x11	; 17
     56e:	80 63       	ori	r24, 0x30	; 48
     570:	81 bb       	out	0x11, r24	; 17
     572:	87 e0       	ldi	r24, 0x07	; 7
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 7f 08 	call	0x10fe <USART_Init>
     57a:	0e 94 cd 06 	call	0xd9a <OSCCAL_Calibrate>
     57e:	81 b3       	in	r24, 0x11	; 17
     580:	8f 7c       	andi	r24, 0xCF	; 207
     582:	80 61       	ori	r24, 0x10	; 16
     584:	81 bb       	out	0x11, r24	; 17
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	8e bb       	out	0x1e, r24	; 30
     58a:	80 e8       	ldi	r24, 0x80	; 128
     58c:	80 93 61 00 	sts	0x0061, r24
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	80 93 61 00 	sts	0x0061, r24
     596:	8e b3       	in	r24, 0x1e	; 30
     598:	88 23       	and	r24, r24
     59a:	e9 f3       	breq	.-6      	; 0x596 <__stack+0x97>
     59c:	f6 9b       	sbis	0x1e, 6	; 30
     59e:	06 c0       	rjmp	.+12     	; 0x5ac <__stack+0xad>
     5a0:	11 23       	and	r17, r17
     5a2:	11 f4       	brne	.+4      	; 0x5a8 <__stack+0xa9>
     5a4:	16 e0       	ldi	r17, 0x06	; 6
     5a6:	1b c0       	rjmp	.+54     	; 0x5de <__stack+0xdf>
     5a8:	11 50       	subi	r17, 0x01	; 1
     5aa:	19 c0       	rjmp	.+50     	; 0x5de <__stack+0xdf>
     5ac:	f7 9b       	sbis	0x1e, 7	; 30
     5ae:	06 c0       	rjmp	.+12     	; 0x5bc <__stack+0xbd>
     5b0:	16 30       	cpi	r17, 0x06	; 6
     5b2:	11 f4       	brne	.+4      	; 0x5b8 <__stack+0xb9>
     5b4:	10 e0       	ldi	r17, 0x00	; 0
     5b6:	13 c0       	rjmp	.+38     	; 0x5de <__stack+0xdf>
     5b8:	1f 5f       	subi	r17, 0xFF	; 255
     5ba:	11 c0       	rjmp	.+34     	; 0x5de <__stack+0xdf>
     5bc:	f4 9b       	sbis	0x1e, 4	; 30
     5be:	0b c0       	rjmp	.+22     	; 0x5d6 <__stack+0xd7>
     5c0:	e1 2f       	mov	r30, r17
     5c2:	ff 27       	eor	r31, r31
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	e5 59       	subi	r30, 0x95	; 149
     5ca:	fe 4f       	sbci	r31, 0xFE	; 254
     5cc:	85 91       	lpm	r24, Z+
     5ce:	94 91       	lpm	r25, Z
     5d0:	fc 01       	movw	r30, r24
     5d2:	09 95       	icall
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <__stack+0xdf>
     5d6:	f3 9b       	sbis	0x1e, 3	; 30
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <__stack+0xdf>
     5da:	0e 94 36 02 	call	0x46c <FUNCShowAbout>
     5de:	e1 2f       	mov	r30, r17
     5e0:	ff 27       	eor	r31, r31
     5e2:	ee 0f       	add	r30, r30
     5e4:	ff 1f       	adc	r31, r31
     5e6:	e7 58       	subi	r30, 0x87	; 135
     5e8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ea:	85 91       	lpm	r24, Z+
     5ec:	94 91       	lpm	r25, Z
     5ee:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>
     5f2:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     5f6:	cf cf       	rjmp	.-98     	; 0x596 <__stack+0x97>

000005f8 <MAIN_Delay1MS>:
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5fc:	28 2f       	mov	r18, r24
     5fe:	21 50       	subi	r18, 0x01	; 1
     600:	2f 3f       	cpi	r18, 0xFF	; 255
     602:	49 f0       	breq	.+18     	; 0x616 <MAIN_Delay1MS+0x1e>
     604:	a3 e3       	ldi	r26, 0x33	; 51
     606:	b7 e0       	ldi	r27, 0x07	; 7
     608:	c0 e0       	ldi	r28, 0x00	; 0
     60a:	d0 e0       	ldi	r29, 0x00	; 0
     60c:	cd 01       	movw	r24, r26
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	f1 f7       	brne	.-4      	; 0x60e <MAIN_Delay1MS+0x16>
     612:	21 50       	subi	r18, 0x01	; 1
     614:	d8 f7       	brcc	.-10     	; 0x60c <MAIN_Delay1MS+0x14>
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <MAIN_ResetCSLine>:
     61c:	99 27       	eor	r25, r25
     61e:	81 30       	cpi	r24, 0x01	; 1
     620:	91 05       	cpc	r25, r1
     622:	a9 f0       	breq	.+42     	; 0x64e <MAIN_ResetCSLine+0x32>
     624:	82 30       	cpi	r24, 0x02	; 2
     626:	91 05       	cpc	r25, r1
     628:	1c f4       	brge	.+6      	; 0x630 <MAIN_ResetCSLine+0x14>
     62a:	89 2b       	or	r24, r25
     62c:	21 f0       	breq	.+8      	; 0x636 <MAIN_ResetCSLine+0x1a>
     62e:	08 95       	ret
     630:	02 97       	sbiw	r24, 0x02	; 2
     632:	51 f0       	breq	.+20     	; 0x648 <MAIN_ResetCSLine+0x2c>
     634:	08 95       	ret
     636:	86 9a       	sbi	0x10, 6	; 16
     638:	82 e2       	ldi	r24, 0x22	; 34
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
     640:	88 23       	and	r24, r24
     642:	19 f4       	brne	.+6      	; 0x64a <MAIN_ResetCSLine+0x2e>
     644:	8e 9a       	sbi	0x11, 6	; 17
     646:	08 95       	ret
     648:	86 9a       	sbi	0x10, 6	; 16
     64a:	8e 98       	cbi	0x11, 6	; 17
     64c:	08 95       	ret
     64e:	86 98       	cbi	0x10, 6	; 16
     650:	fc cf       	rjmp	.-8      	; 0x64a <MAIN_ResetCSLine+0x2e>

00000652 <MAIN_IntToStr>:
     652:	fb 01       	movw	r30, r22
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	84 36       	cpi	r24, 0x64	; 100
     658:	91 05       	cpc	r25, r1
     65a:	20 f0       	brcs	.+8      	; 0x664 <MAIN_IntToStr+0x12>
     65c:	2f 5f       	subi	r18, 0xFF	; 255
     65e:	84 56       	subi	r24, 0x64	; 100
     660:	90 40       	sbci	r25, 0x00	; 0
     662:	f9 cf       	rjmp	.-14     	; 0x656 <MAIN_IntToStr+0x4>
     664:	20 5d       	subi	r18, 0xD0	; 208
     666:	21 93       	st	Z+, r18
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	8a 30       	cpi	r24, 0x0A	; 10
     66c:	91 05       	cpc	r25, r1
     66e:	18 f0       	brcs	.+6      	; 0x676 <MAIN_IntToStr+0x24>
     670:	2f 5f       	subi	r18, 0xFF	; 255
     672:	0a 97       	sbiw	r24, 0x0a	; 10
     674:	fa cf       	rjmp	.-12     	; 0x66a <MAIN_IntToStr+0x18>
     676:	20 5d       	subi	r18, 0xD0	; 208
     678:	21 93       	st	Z+, r18
     67a:	80 5d       	subi	r24, 0xD0	; 208
     67c:	81 93       	st	Z+, r24
     67e:	10 82       	st	Z, r1
     680:	08 95       	ret

00000682 <MAIN_ShowProgType>:
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	27 97       	sbiw	r28, 0x07	; 7
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	18 2f       	mov	r17, r24
     69a:	63 e4       	ldi	r22, 0x43	; 67
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	ce 01       	movw	r24, r28
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	0e 94 d6 1a 	call	0x35ac <strcpy_P>
     6a6:	1e 83       	std	Y+6, r17	; 0x06
     6a8:	1f 82       	std	Y+7, r1	; 0x07
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	0e 94 61 07 	call	0xec2 <LCD_puts>
     6b2:	27 96       	adiw	r28, 0x07	; 7
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	08 95       	ret

000006c6 <MAIN_ShowError>:
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
     6ce:	64 97       	sbiw	r28, 0x14	; 20
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	25 e4       	ldi	r18, 0x45	; 69
     6dc:	29 83       	std	Y+1, r18	; 0x01
     6de:	2e e3       	ldi	r18, 0x3E	; 62
     6e0:	2a 83       	std	Y+2, r18	; 0x02
     6e2:	bc 01       	movw	r22, r24
     6e4:	ce 01       	movw	r24, r28
     6e6:	03 96       	adiw	r24, 0x03	; 3
     6e8:	0e 94 d6 1a 	call	0x35ac <strcpy_P>
     6ec:	ce 01       	movw	r24, r28
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	0e 94 61 07 	call	0xec2 <LCD_puts>
     6f4:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     6f8:	f4 9b       	sbis	0x1e, 4	; 30
     6fa:	fe cf       	rjmp	.-4      	; 0x6f8 <MAIN_ShowError+0x32>
     6fc:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     700:	64 96       	adiw	r28, 0x14	; 20
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <__vector_3>:
     712:	78 94       	sei
     714:	1f 92       	push	r1
     716:	0f 92       	push	r0
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	8f 93       	push	r24
     720:	9f 93       	push	r25
     722:	93 b1       	in	r25, 0x03	; 3
     724:	90 95       	com	r25
     726:	90 7d       	andi	r25, 0xD0	; 208
     728:	8c b1       	in	r24, 0x0c	; 12
     72a:	80 95       	com	r24
     72c:	8c 70       	andi	r24, 0x0C	; 12
     72e:	98 2b       	or	r25, r24
     730:	9e bb       	out	0x1e, r25	; 30
     732:	9f 91       	pop	r25
     734:	8f 91       	pop	r24
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	0f 90       	pop	r0
     73c:	1f 90       	pop	r1
     73e:	18 95       	reti

00000740 <__vector_default>:
     740:	89 e4       	ldi	r24, 0x49	; 73
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	0e 94 63 03 	call	0x6c6 <MAIN_ShowError>
     748:	ff cf       	rjmp	.-2      	; 0x748 <__vector_default+0x8>

0000074a <FUNCChangeSettings>:
     74a:	cf 93       	push	r28
     74c:	c0 e0       	ldi	r28, 0x00	; 0
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	8e bb       	out	0x1e, r24	; 30
     752:	8e b3       	in	r24, 0x1e	; 30
     754:	88 23       	and	r24, r24
     756:	e9 f3       	breq	.-6      	; 0x752 <FUNCChangeSettings+0x8>
     758:	f6 9b       	sbis	0x1e, 6	; 30
     75a:	06 c0       	rjmp	.+12     	; 0x768 <FUNCChangeSettings+0x1e>
     75c:	cc 23       	and	r28, r28
     75e:	11 f4       	brne	.+4      	; 0x764 <FUNCChangeSettings+0x1a>
     760:	c3 e0       	ldi	r28, 0x03	; 3
     762:	19 c0       	rjmp	.+50     	; 0x796 <FUNCChangeSettings+0x4c>
     764:	c1 50       	subi	r28, 0x01	; 1
     766:	17 c0       	rjmp	.+46     	; 0x796 <FUNCChangeSettings+0x4c>
     768:	f7 9b       	sbis	0x1e, 7	; 30
     76a:	06 c0       	rjmp	.+12     	; 0x778 <FUNCChangeSettings+0x2e>
     76c:	c3 30       	cpi	r28, 0x03	; 3
     76e:	11 f4       	brne	.+4      	; 0x774 <FUNCChangeSettings+0x2a>
     770:	c0 e0       	ldi	r28, 0x00	; 0
     772:	11 c0       	rjmp	.+34     	; 0x796 <FUNCChangeSettings+0x4c>
     774:	cf 5f       	subi	r28, 0xFF	; 255
     776:	0f c0       	rjmp	.+30     	; 0x796 <FUNCChangeSettings+0x4c>
     778:	f4 9b       	sbis	0x1e, 4	; 30
     77a:	0b c0       	rjmp	.+22     	; 0x792 <FUNCChangeSettings+0x48>
     77c:	ec 2f       	mov	r30, r28
     77e:	ff 27       	eor	r31, r31
     780:	ee 0f       	add	r30, r30
     782:	ff 1f       	adc	r31, r31
     784:	e0 5e       	subi	r30, 0xE0	; 224
     786:	fe 4f       	sbci	r31, 0xFE	; 254
     788:	85 91       	lpm	r24, Z+
     78a:	94 91       	lpm	r25, Z
     78c:	fc 01       	movw	r30, r24
     78e:	09 95       	icall
     790:	02 c0       	rjmp	.+4      	; 0x796 <FUNCChangeSettings+0x4c>
     792:	f2 99       	sbic	0x1e, 2	; 30
     794:	0d c0       	rjmp	.+26     	; 0x7b0 <FUNCChangeSettings+0x66>
     796:	ec 2f       	mov	r30, r28
     798:	ff 27       	eor	r31, r31
     79a:	ee 0f       	add	r30, r30
     79c:	ff 1f       	adc	r31, r31
     79e:	e8 5d       	subi	r30, 0xD8	; 216
     7a0:	fe 4f       	sbci	r31, 0xFE	; 254
     7a2:	85 91       	lpm	r24, Z+
     7a4:	94 91       	lpm	r25, Z
     7a6:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>
     7aa:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     7ae:	d1 cf       	rjmp	.-94     	; 0x752 <FUNCChangeSettings+0x8>
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <FUNCAVRISPMode>:
		}
	}
}

void FUNCAVRISPMode(void)
{
	LCD_puts_f(AVRISPModeMessage);
     7b4:	89 ec       	ldi	r24, 0xC9	; 201
     7b6:	93 e0       	ldi	r25, 0x03	; 3
     7b8:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>
	
	InterpretPacketRoutine = (FuncPtr)AICI_InterpretPacket;
     7bc:	8c ea       	ldi	r24, 0xAC	; 172
     7be:	91 e1       	ldi	r25, 0x11	; 17
     7c0:	90 93 25 01 	sts	0x0125, r25
     7c4:	80 93 24 01 	sts	0x0124, r24
	V2P_RunStateMachine();
     7c8:	0e 94 b6 0e 	call	0x1d6c <V2P_RunStateMachine>
     7cc:	08 95       	ret

000007ce <FUNCProgramDataflash>:
}

void FUNCProgramDataflash(void)
{
	USI_SPIInitMaster(eeprom_read_byte_169(&Param_SCKDuration));
     7ce:	80 e2       	ldi	r24, 0x20	; 32
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
     7d6:	0e 94 30 09 	call	0x1260 <USI_SPIInitMaster>
	UseExernalDF = TRUE;
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	80 93 83 02 	sts	0x0283, r24
	DFSPIRoutinePointer = USI_SPITransmit;
     7e0:	8a e4       	ldi	r24, 0x4A	; 74
     7e2:	99 e0       	ldi	r25, 0x09	; 9
     7e4:	90 93 01 01 	sts	0x0101, r25
     7e8:	80 93 00 01 	sts	0x0100, r24
	
	LCD_puts_f(DataFlashProgMode);
     7ec:	8f e9       	ldi	r24, 0x9F	; 159
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>

	InterpretPacketRoutine = PD_InterpretAVRISPPacket;
     7f4:	8e ee       	ldi	r24, 0xEE	; 238
     7f6:	9b e0       	ldi	r25, 0x0B	; 11
     7f8:	90 93 25 01 	sts	0x0125, r25
     7fc:	80 93 24 01 	sts	0x0124, r24
	V2P_RunStateMachine();
     800:	0e 94 b6 0e 	call	0x1d6c <V2P_RunStateMachine>
	   
	DF_EnableDataflash(FALSE);
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
	SPI_SPIOFF();
     80a:	80 91 64 00 	lds	r24, 0x0064
     80e:	84 60       	ori	r24, 0x04	; 4
     810:	80 93 64 00 	sts	0x0064, r24
     814:	08 95       	ret

00000816 <FUNCProgramAVR>:
}

void FUNCProgramAVR(void)
{
     816:	df 92       	push	r13
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	65 97       	sbiw	r28, 0x15	; 21
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
	uint8_t  DoneFailMessageBuff[19];
	uint16_t EEPROMAddress;
	uint8_t  Fault = ISPCC_NO_FAULT;
     834:	dd 24       	eor	r13, r13
	uint8_t  ProgMode = 0;
     836:	0d 2d       	mov	r16, r13

	SPI_SPIInit();
     838:	0e 94 db 08 	call	0x11b6 <SPI_SPIInit>
	UseExernalDF = FALSE;
     83c:	d0 92 83 02 	sts	0x0283, r13
	DFSPIRoutinePointer = SPI_SPITransmit;
     840:	85 ee       	ldi	r24, 0xE5	; 229
     842:	98 e0       	ldi	r25, 0x08	; 8
     844:	90 93 01 01 	sts	0x0101, r25
     848:	80 93 00 01 	sts	0x0100, r24
	
	if (!(DF_CheckCorrectOnboardChip()))
     84c:	0e 94 f6 0a 	call	0x15ec <DF_CheckCorrectOnboardChip>
     850:	88 23       	and	r24, r24
     852:	09 f4       	brne	.+2      	; 0x856 <FUNCProgramAVR+0x40>
     854:	17 c1       	rjmp	.+558    	; 0xa84 <FUNCProgramAVR+0x26e>
	  return;

	MAIN_WaitForJoyRelease();
     856:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
	
	JoyStatus = 1;                            // Use an invalid joystick value to force the program to write the
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	8e bb       	out	0x1e, r24	; 30
	                                          // name of the default command onto the LCD
	while (1)
	{
		if (JoyStatus)
     85e:	8e b3       	in	r24, 0x1e	; 30
     860:	88 23       	and	r24, r24
     862:	e9 f3       	breq	.-6      	; 0x85e <FUNCProgramAVR+0x48>
		{
			if (JoyStatus & JOY_LEFT)
     864:	f2 99       	sbic	0x1e, 2	; 30
     866:	0e c1       	rjmp	.+540    	; 0xa84 <FUNCProgramAVR+0x26e>
			  return;
			else if (JoyStatus & JOY_PRESS)
     868:	f4 99       	sbic	0x1e, 4	; 30
     86a:	1c c0       	rjmp	.+56     	; 0x8a4 <FUNCProgramAVR+0x8e>
			  break;
			else if (JoyStatus & JOY_UP)
     86c:	f6 9b       	sbis	0x1e, 6	; 30
     86e:	06 c0       	rjmp	.+12     	; 0x87c <FUNCProgramAVR+0x66>
			  (ProgMode == 0)? ProgMode = 6 : ProgMode--;
     870:	00 23       	and	r16, r16
     872:	11 f4       	brne	.+4      	; 0x878 <FUNCProgramAVR+0x62>
     874:	06 e0       	ldi	r16, 0x06	; 6
     876:	09 c0       	rjmp	.+18     	; 0x88a <FUNCProgramAVR+0x74>
     878:	01 50       	subi	r16, 0x01	; 1
     87a:	07 c0       	rjmp	.+14     	; 0x88a <FUNCProgramAVR+0x74>
			else if (JoyStatus & JOY_DOWN)
     87c:	f7 9b       	sbis	0x1e, 7	; 30
     87e:	05 c0       	rjmp	.+10     	; 0x88a <FUNCProgramAVR+0x74>
			  (ProgMode == 6)? ProgMode = 0 : ProgMode++;
     880:	06 30       	cpi	r16, 0x06	; 6
     882:	11 f4       	brne	.+4      	; 0x888 <FUNCProgramAVR+0x72>
     884:	00 e0       	ldi	r16, 0x00	; 0
     886:	01 c0       	rjmp	.+2      	; 0x88a <FUNCProgramAVR+0x74>
     888:	0f 5f       	subi	r16, 0xFF	; 255

			LCD_puts_f((uint8_t*)pgm_read_word(&ProgOptions[ProgMode])); // Show current function onto the LCD
     88a:	e0 2f       	mov	r30, r16
     88c:	ff 27       	eor	r31, r31
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	e3 55       	subi	r30, 0x53	; 83
     894:	ff 4f       	sbci	r31, 0xFF	; 255
     896:	85 91       	lpm	r24, Z+
     898:	94 91       	lpm	r25, Z
     89a:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     89e:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     8a2:	dd cf       	rjmp	.-70     	; 0x85e <FUNCProgramAVR+0x48>
		}
	}

	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);                // Orange = busy
     8a4:	81 b3       	in	r24, 0x11	; 17
     8a6:	80 63       	ori	r24, 0x30	; 48
     8a8:	81 bb       	out	0x11, r24	; 17
	LCD_puts_f(WaitText);
     8aa:	85 e1       	ldi	r24, 0x15	; 21
     8ac:	92 e0       	ldi	r25, 0x02	; 2
     8ae:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>

	USI_SPIInitMaster(eeprom_read_byte_169(&Param_SCKDuration));
     8b2:	80 e2       	ldi	r24, 0x20	; 32
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
     8ba:	0e 94 30 09 	call	0x1260 <USI_SPIInitMaster>
	MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	0e 94 0e 03 	call	0x61c <MAIN_ResetCSLine>

	EEPROMAddress = Prog_EnterProgMode;
     8c4:	80 91 12 01 	lds	r24, 0x0112
     8c8:	90 91 13 01 	lds	r25, 0x0113
     8cc:	9d 8b       	std	Y+21, r25	; 0x15
     8ce:	8c 8b       	std	Y+20, r24	; 0x14
     8d0:	54 e3       	ldi	r21, 0x34	; 52
     8d2:	e5 2e       	mov	r14, r21
     8d4:	51 e0       	ldi	r21, 0x01	; 1
     8d6:	f5 2e       	mov	r15, r21
     8d8:	1b e0       	ldi	r17, 0x0B	; 11
			
	for (uint8_t PacketB = 0; PacketB <= 11; PacketB++) // Read the enter programming mode command bytes
	{
		PacketBytes[PacketB] = eeprom_read_byte_169(&EEPROMAddress);
     8da:	ce 01       	movw	r24, r28
     8dc:	44 96       	adiw	r24, 0x14	; 20
     8de:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
     8e2:	f7 01       	movw	r30, r14
     8e4:	81 93       	st	Z+, r24
     8e6:	7f 01       	movw	r14, r30
		EEPROMAddress++;
     8e8:	8c 89       	ldd	r24, Y+20	; 0x14
     8ea:	9d 89       	ldd	r25, Y+21	; 0x15
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	9d 8b       	std	Y+21, r25	; 0x15
     8f0:	8c 8b       	std	Y+20, r24	; 0x14
     8f2:	11 50       	subi	r17, 0x01	; 1
     8f4:	17 ff       	sbrs	r17, 7
     8f6:	f1 cf       	rjmp	.-30     	; 0x8da <FUNCProgramAVR+0xc4>
	}
	
	ISPCC_EnterChipProgrammingMode();    // Try to sync with the slave AVR
     8f8:	0e 94 1c 10 	call	0x2038 <ISPCC_EnterChipProgrammingMode>

	CurrAddress = 0;
     8fc:	10 92 2b 01 	sts	0x012B, r1
     900:	10 92 2c 01 	sts	0x012C, r1
     904:	10 92 2d 01 	sts	0x012D, r1
     908:	10 92 2e 01 	sts	0x012E, r1

	if (PacketBytes[1] == STATUS_CMD_OK) // ISPCC_EnterChipProgrammingMode alters the PacketBytes buffer rather than returning a value
     90c:	80 91 35 01 	lds	r24, 0x0135
     910:	88 23       	and	r24, r24
     912:	09 f0       	breq	.+2      	; 0x916 <FUNCProgramAVR+0x100>
     914:	a2 c0       	rjmp	.+324    	; 0xa5a <FUNCProgramAVR+0x244>
	{						
		if ((ProgMode == 6) || (ProgMode == 0) || (ProgMode == 2)) // Erase chip, or program flash mode
     916:	06 30       	cpi	r16, 0x06	; 6
     918:	21 f0       	breq	.+8      	; 0x922 <FUNCProgramAVR+0x10c>
     91a:	00 23       	and	r16, r16
     91c:	11 f0       	breq	.+4      	; 0x922 <FUNCProgramAVR+0x10c>
     91e:	02 30       	cpi	r16, 0x02	; 2
     920:	91 f4       	brne	.+36     	; 0x946 <FUNCProgramAVR+0x130>
		{
			MAIN_ShowProgType('C');
     922:	83 e4       	ldi	r24, 0x43	; 67
     924:	0e 94 41 03 	call	0x682 <MAIN_ShowProgType>
			
			if (!(eeprom_read_byte_169(&Prog_EraseCmdStored) == TRUE))
     928:	8a e1       	ldi	r24, 0x1A	; 26
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
     930:	81 30       	cpi	r24, 0x01	; 1
     932:	39 f0       	breq	.+14     	; 0x942 <FUNCProgramAVR+0x12c>
			{
				Fault = ISPCC_FAULT_NOERASE;
     934:	42 e0       	ldi	r20, 0x02	; 2
     936:	d4 2e       	mov	r13, r20
				MAIN_ShowError(PSTR("NO ERASE CMD"));
     938:	80 e5       	ldi	r24, 0x50	; 80
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	0e 94 63 03 	call	0x6c6 <MAIN_ShowError>
     940:	02 c0       	rjmp	.+4      	; 0x946 <FUNCProgramAVR+0x130>
			}
			else
			{
				PM_SendEraseCommand();
     942:	0e 94 d7 17 	call	0x2fae <PM_SendEraseCommand>
			}
		}

		if (((ProgMode == 0) || (ProgMode == 2)) && (Fault == ISPCC_NO_FAULT)) // Program flash
     946:	00 23       	and	r16, r16
     948:	11 f0       	breq	.+4      	; 0x94e <FUNCProgramAVR+0x138>
     94a:	02 30       	cpi	r16, 0x02	; 2
     94c:	c1 f4       	brne	.+48     	; 0x97e <FUNCProgramAVR+0x168>
     94e:	dd 20       	and	r13, r13
     950:	b1 f4       	brne	.+44     	; 0x97e <FUNCProgramAVR+0x168>
		{
			MAIN_ShowProgType('D');
     952:	84 e4       	ldi	r24, 0x44	; 68
     954:	0e 94 41 03 	call	0x682 <MAIN_ShowProgType>

			if (!(PM_GetStoredDataSize(TYPE_FLASH))) // Check to make sure a program is present in memory
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	0e 94 1b 13 	call	0x2636 <PM_GetStoredDataSize>
     95e:	dc 01       	movw	r26, r24
     960:	cb 01       	movw	r24, r22
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	a1 05       	cpc	r26, r1
     966:	b1 05       	cpc	r27, r1
     968:	39 f4       	brne	.+14     	; 0x978 <FUNCProgramAVR+0x162>
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     96a:	33 e0       	ldi	r19, 0x03	; 3
     96c:	d3 2e       	mov	r13, r19
				MAIN_ShowError(PSTR("NO DATA"));
     96e:	8d e5       	ldi	r24, 0x5D	; 93
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	0e 94 63 03 	call	0x6c6 <MAIN_ShowError>
     976:	03 c0       	rjmp	.+6      	; 0x97e <FUNCProgramAVR+0x168>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_FLASH);
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	0e 94 27 18 	call	0x304e <PM_CreateProgrammingPackets>
			}
		}
	
		if ((ProgMode == 1) || (ProgMode == 2)) // Program EEPROM
     97e:	80 2f       	mov	r24, r16
     980:	81 50       	subi	r24, 0x01	; 1
     982:	82 30       	cpi	r24, 0x02	; 2
     984:	b0 f4       	brcc	.+44     	; 0x9b2 <FUNCProgramAVR+0x19c>
		{
			MAIN_ShowProgType('E');
     986:	85 e4       	ldi	r24, 0x45	; 69
     988:	0e 94 41 03 	call	0x682 <MAIN_ShowProgType>
				
			if (!(PM_GetStoredDataSize(TYPE_EEPROM))) // Check to make sure EEPROM data is present in memory
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	0e 94 1b 13 	call	0x2636 <PM_GetStoredDataSize>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	00 97       	sbiw	r24, 0x00	; 0
     998:	a1 05       	cpc	r26, r1
     99a:	b1 05       	cpc	r27, r1
     99c:	39 f4       	brne	.+14     	; 0x9ac <FUNCProgramAVR+0x196>
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     99e:	23 e0       	ldi	r18, 0x03	; 3
     9a0:	d2 2e       	mov	r13, r18
				MAIN_ShowError(PSTR("NO EEPROM"));
     9a2:	85 e6       	ldi	r24, 0x65	; 101
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0e 94 63 03 	call	0x6c6 <MAIN_ShowError>
     9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <FUNCProgramAVR+0x19c>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_EEPROM);
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	0e 94 27 18 	call	0x304e <PM_CreateProgrammingPackets>
			}
		}

		if ((ProgMode == 3) || (ProgMode == 5)) // Program Fuse bytes
     9b2:	03 30       	cpi	r16, 0x03	; 3
     9b4:	11 f0       	breq	.+4      	; 0x9ba <FUNCProgramAVR+0x1a4>
     9b6:	05 30       	cpi	r16, 0x05	; 5
     9b8:	99 f4       	brne	.+38     	; 0x9e0 <FUNCProgramAVR+0x1ca>
		{
			MAIN_ShowProgType('F');
     9ba:	86 e4       	ldi	r24, 0x46	; 70
     9bc:	0e 94 41 03 	call	0x682 <MAIN_ShowProgType>
			
			if (!(eeprom_read_byte_169(&Prog_TotalFuseBytes)))
     9c0:	80 e1       	ldi	r24, 0x10	; 16
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
     9c8:	88 23       	and	r24, r24
     9ca:	39 f4       	brne	.+14     	; 0x9da <FUNCProgramAVR+0x1c4>
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     9cc:	93 e0       	ldi	r25, 0x03	; 3
     9ce:	d9 2e       	mov	r13, r25
				MAIN_ShowError(PSTR("NO FUSE BYTES"));
     9d0:	8f e6       	ldi	r24, 0x6F	; 111
     9d2:	92 e0       	ldi	r25, 0x02	; 2
     9d4:	0e 94 63 03 	call	0x6c6 <MAIN_ShowError>
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <FUNCProgramAVR+0x1ca>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_FUSE);
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	0e 94 87 17 	call	0x2f0e <PM_SendFuseLockBytes>
			}
		}

		if ((ProgMode == 4) || (ProgMode == 5)) // Program Lock bytes
     9e0:	80 2f       	mov	r24, r16
     9e2:	84 50       	subi	r24, 0x04	; 4
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	00 f5       	brcc	.+64     	; 0xa28 <FUNCProgramAVR+0x212>
		{
			if (ProgMode == 5)                    // If fusebytes have already been written, we need to reenter programming mode to latch them
     9e8:	05 30       	cpi	r16, 0x05	; 5
     9ea:	59 f4       	brne	.+22     	; 0xa02 <FUNCProgramAVR+0x1ec>
			{
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line of the slave AVR
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	0e 94 0e 03 	call	0x61c <MAIN_ResetCSLine>
				MAIN_Delay10MS(1);
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	0e 94 1a 02 	call	0x434 <MAIN_Delay10MS>
				MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	0e 94 0e 03 	call	0x61c <MAIN_ResetCSLine>
				ISPCC_EnterChipProgrammingMode(); // Try to sync with the slave AVR
     9fe:	0e 94 1c 10 	call	0x2038 <ISPCC_EnterChipProgrammingMode>
			}

			MAIN_ShowProgType('L');
     a02:	8c e4       	ldi	r24, 0x4C	; 76
     a04:	0e 94 41 03 	call	0x682 <MAIN_ShowProgType>
		
			if (!(eeprom_read_byte_169(&Prog_TotalLockBytes)))
     a08:	8e e0       	ldi	r24, 0x0E	; 14
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
     a10:	88 23       	and	r24, r24
     a12:	39 f4       	brne	.+14     	; 0xa22 <FUNCProgramAVR+0x20c>
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	d8 2e       	mov	r13, r24
				MAIN_ShowError(PSTR("NO LOCK BYTES"));
     a18:	8d e7       	ldi	r24, 0x7D	; 125
     a1a:	92 e0       	ldi	r25, 0x02	; 2
     a1c:	0e 94 63 03 	call	0x6c6 <MAIN_ShowError>
     a20:	03 c0       	rjmp	.+6      	; 0xa28 <FUNCProgramAVR+0x212>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_LOCK);
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	0e 94 87 17 	call	0x2f0e <PM_SendFuseLockBytes>
			}
		}

		strcpy_P(DoneFailMessageBuff, PSTR("PROGRAMMING DONE"));
     a28:	6b e8       	ldi	r22, 0x8B	; 139
     a2a:	72 e0       	ldi	r23, 0x02	; 2
     a2c:	ce 01       	movw	r24, r28
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	0e 94 d6 1a 	call	0x35ac <strcpy_P>

		if (Fault != ISPCC_NO_FAULT)         // Takes less code to just overwrite part of the string on fail
     a34:	dd 20       	and	r13, r13
     a36:	31 f0       	breq	.+12     	; 0xa44 <FUNCProgramAVR+0x22e>
		  strcpy_P(&DoneFailMessageBuff[12], PSTR("FAILED"));
     a38:	6c e9       	ldi	r22, 0x9C	; 156
     a3a:	72 e0       	ldi	r23, 0x02	; 2
     a3c:	ce 01       	movw	r24, r28
     a3e:	0d 96       	adiw	r24, 0x0d	; 13
     a40:	0e 94 d6 1a 	call	0x35ac <strcpy_P>

		LCD_puts(DoneFailMessageBuff);
     a44:	ce 01       	movw	r24, r28
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	0e 94 61 07 	call	0xec2 <LCD_puts>

		MAIN_Delay10MS(255);
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	0e 94 1a 02 	call	0x434 <MAIN_Delay10MS>
		MAIN_Delay10MS(100);
     a52:	84 e6       	ldi	r24, 0x64	; 100
     a54:	0e 94 1a 02 	call	0x434 <MAIN_Delay10MS>
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <FUNCProgramAVR+0x24c>
	}
	else
	{
		MAIN_ShowError(SyncErrorMessage);
     a5a:	8e eb       	ldi	r24, 0xBE	; 190
     a5c:	93 e0       	ldi	r25, 0x03	; 3
     a5e:	0e 94 63 03 	call	0x6c6 <MAIN_ShowError>
	}
	
	MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run	
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	0e 94 0e 03 	call	0x61c <MAIN_ResetCSLine>
	USI_SPIOff();
     a68:	0e 94 40 09 	call	0x1280 <USI_SPIOff>
	DF_EnableDataflash(FALSE);
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
	SPI_SPIOFF();
     a72:	80 91 64 00 	lds	r24, 0x0064
     a76:	84 60       	ori	r24, 0x04	; 4
     a78:	80 93 64 00 	sts	0x0064, r24
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Green = ready
     a7c:	81 b3       	in	r24, 0x11	; 17
     a7e:	8f 7c       	andi	r24, 0xCF	; 207
     a80:	80 61       	ori	r24, 0x10	; 16
     a82:	81 bb       	out	0x11, r24	; 17
     a84:	65 96       	adiw	r28, 0x15	; 21
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	df 90       	pop	r13
     a9e:	08 95       	ret

00000aa0 <FUNCStoreProgram>:
}

void FUNCStoreProgram(void)
{
	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     aa0:	85 ee       	ldi	r24, 0xE5	; 229
     aa2:	98 e0       	ldi	r25, 0x08	; 8
     aa4:	90 93 01 01 	sts	0x0101, r25
     aa8:	80 93 00 01 	sts	0x0100, r24
	SPI_SPIInit();
     aac:	0e 94 db 08 	call	0x11b6 <SPI_SPIInit>
	UseExernalDF = FALSE;
     ab0:	10 92 83 02 	sts	0x0283, r1
	DF_EnableDataflash(TRUE);
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>

	if (!(DF_CheckCorrectOnboardChip()))
     aba:	0e 94 f6 0a 	call	0x15ec <DF_CheckCorrectOnboardChip>
     abe:	88 23       	and	r24, r24
     ac0:	a1 f0       	breq	.+40     	; 0xaea <FUNCStoreProgram+0x4a>
	  return;
			
	LCD_puts_f(PSTR("*STORAGE MODE*"));
     ac2:	83 ea       	ldi	r24, 0xA3	; 163
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PM_InterpretAVRISPPacket;
     aca:	83 ec       	ldi	r24, 0xC3	; 195
     acc:	94 e1       	ldi	r25, 0x14	; 20
     ace:	90 93 25 01 	sts	0x0125, r25
     ad2:	80 93 24 01 	sts	0x0124, r24
	V2P_RunStateMachine();
     ad6:	0e 94 b6 0e 	call	0x1d6c <V2P_RunStateMachine>
	DF_EnableDataflash(FALSE);
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
	SPI_SPIOFF();
     ae0:	80 91 64 00 	lds	r24, 0x0064
     ae4:	84 60       	ori	r24, 0x04	; 4
     ae6:	80 93 64 00 	sts	0x0064, r24
     aea:	08 95       	ret

00000aec <FUNCClearMem>:
}

void FUNCClearMem(void)
{
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	22 97       	sbiw	r28, 0x02	; 2
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
	LCD_puts_f(PSTR("CONFIRM"));
     b04:	82 eb       	ldi	r24, 0xB2	; 178
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>
	MAIN_Delay10MS(180);
     b0c:	84 eb       	ldi	r24, 0xB4	; 180
     b0e:	0e 94 1a 02 	call	0x434 <MAIN_Delay10MS>

	LCD_puts_f(PSTR("<N Y>"));
     b12:	8a eb       	ldi	r24, 0xBA	; 186
     b14:	92 e0       	ldi	r25, 0x02	; 2
     b16:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>

	while (1)
	{
		if (JoyStatus)
     b1a:	8e b3       	in	r24, 0x1e	; 30
     b1c:	88 23       	and	r24, r24
     b1e:	e9 f3       	breq	.-6      	; 0xb1a <FUNCClearMem+0x2e>
		{
			if (JoyStatus & JOY_LEFT)
     b20:	8e b3       	in	r24, 0x1e	; 30
     b22:	99 27       	eor	r25, r25
     b24:	8c 01       	movw	r16, r24
     b26:	04 70       	andi	r16, 0x04	; 4
     b28:	10 70       	andi	r17, 0x00	; 0
     b2a:	82 fd       	sbrc	r24, 2
     b2c:	29 c0       	rjmp	.+82     	; 0xb80 <FUNCClearMem+0x94>
			  return;
			else if (JoyStatus & JOY_RIGHT)
     b2e:	f3 9b       	sbis	0x1e, 3	; 30
     b30:	f4 cf       	rjmp	.-24     	; 0xb1a <FUNCClearMem+0x2e>
			  break;
		}
	}

	MAIN_WaitForJoyRelease();
     b32:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>

	LCD_puts_f(WaitText);
     b36:	85 e1       	ldi	r24, 0x15	; 21
     b38:	92 e0       	ldi	r25, 0x02	; 2
     b3a:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>

	for (uint16_t EAddr = 0; EAddr < Sys_MagicNumber; EAddr++)
     b3e:	1a 83       	std	Y+2, r17	; 0x02
     b40:	09 83       	std	Y+1, r16	; 0x01
     b42:	80 91 02 01 	lds	r24, 0x0102
     b46:	90 91 03 01 	lds	r25, 0x0103
     b4a:	08 17       	cp	r16, r24
     b4c:	19 07       	cpc	r17, r25
     b4e:	88 f4       	brcc	.+34     	; 0xb72 <FUNCClearMem+0x86>
	  eeprom_write_byte_169(&EAddr, 0xFF);
     b50:	6f ef       	ldi	r22, 0xFF	; 255
     b52:	ce 01       	movw	r24, r28
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	9a 81       	ldd	r25, Y+2	; 0x02
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	9a 83       	std	Y+2, r25	; 0x02
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	20 91 02 01 	lds	r18, 0x0102
     b68:	30 91 03 01 	lds	r19, 0x0103
     b6c:	82 17       	cp	r24, r18
     b6e:	93 07       	cpc	r25, r19
     b70:	78 f3       	brcs	.-34     	; 0xb50 <FUNCClearMem+0x64>

	LCD_puts_f(PSTR("MEM CLEARED"));
     b72:	80 ec       	ldi	r24, 0xC0	; 192
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>
	MAIN_Delay10MS(255);
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	0e 94 1a 02 	call	0x434 <MAIN_Delay10MS>
     b80:	22 96       	adiw	r28, 0x02	; 2
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	08 95       	ret

00000b96 <FUNCAutoCalib>:
}

void FUNCAutoCalib(void)
{
	LCD_puts_f(WaitText);
     b96:	85 e1       	ldi	r24, 0x15	; 21
     b98:	92 e0       	ldi	r25, 0x02	; 2
     b9a:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>
	OSCCAL_Calibrate();
     b9e:	0e 94 cd 06 	call	0xd9a <OSCCAL_Calibrate>
     ba2:	08 95       	ret

00000ba4 <FUNCSetContrast>:
}

void FUNCSetContrast(void)
{
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	26 97       	sbiw	r28, 0x06	; 6
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[6];
	uint8_t Contrast = (eeprom_read_byte_169(&Sys_LCDContrast) & 0x0F); // Ranges from 0-15 so mask retuns 15 on blank EEPROM (0xFF)
     bba:	84 e0       	ldi	r24, 0x04	; 4
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
     bc2:	18 2f       	mov	r17, r24
     bc4:	1f 70       	andi	r17, 0x0F	; 15
	
	JoyStatus = 1;                          // Invalid value to force the LCD to update
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)
     bca:	8e b3       	in	r24, 0x1e	; 30
     bcc:	88 23       	and	r24, r24
     bce:	e9 f3       	breq	.-6      	; 0xbca <FUNCSetContrast+0x26>
		{
			if (JoyStatus & JOY_UP)
     bd0:	f6 9b       	sbis	0x1e, 6	; 30
     bd2:	04 c0       	rjmp	.+8      	; 0xbdc <FUNCSetContrast+0x38>
			{
				if (Contrast < 15)
     bd4:	1f 30       	cpi	r17, 0x0F	; 15
     bd6:	80 f4       	brcc	.+32     	; 0xbf8 <FUNCSetContrast+0x54>
				  Contrast++;
     bd8:	1f 5f       	subi	r17, 0xFF	; 255
     bda:	0e c0       	rjmp	.+28     	; 0xbf8 <FUNCSetContrast+0x54>
			}
			else if (JoyStatus & JOY_DOWN)
     bdc:	f7 9b       	sbis	0x1e, 7	; 30
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <FUNCSetContrast+0x44>
			{
				if (Contrast > 1)          // Zero is non-visible, so 1 is the minimum
     be0:	12 30       	cpi	r17, 0x02	; 2
     be2:	50 f0       	brcs	.+20     	; 0xbf8 <FUNCSetContrast+0x54>
				  Contrast--;
     be4:	11 50       	subi	r17, 0x01	; 1
     be6:	08 c0       	rjmp	.+16     	; 0xbf8 <FUNCSetContrast+0x54>
			}
			else if (JoyStatus & JOY_LEFT)
     be8:	f2 9b       	sbis	0x1e, 2	; 30
     bea:	06 c0       	rjmp	.+12     	; 0xbf8 <FUNCSetContrast+0x54>
			{
				eeprom_write_byte_169(&Sys_LCDContrast, Contrast);
     bec:	61 2f       	mov	r22, r17
     bee:	84 e0       	ldi	r24, 0x04	; 4
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
				return;
     bf6:	18 c0       	rjmp	.+48     	; 0xc28 <FUNCSetContrast+0x84>
			}
					
			Buffer[0] = 'C';
     bf8:	83 e4       	ldi	r24, 0x43	; 67
     bfa:	89 83       	std	Y+1, r24	; 0x01
			Buffer[1] = 'T';
     bfc:	84 e5       	ldi	r24, 0x54	; 84
     bfe:	8a 83       	std	Y+2, r24	; 0x02
			Buffer[2] = ' ';
     c00:	80 e2       	ldi	r24, 0x20	; 32
     c02:	8b 83       	std	Y+3, r24	; 0x03

			MAIN_IntToStr((uint16_t)Contrast, &Buffer[3]);
     c04:	be 01       	movw	r22, r28
     c06:	6c 5f       	subi	r22, 0xFC	; 252
     c08:	7f 4f       	sbci	r23, 0xFF	; 255
     c0a:	81 2f       	mov	r24, r17
     c0c:	99 27       	eor	r25, r25
     c0e:	0e 94 29 03 	call	0x652 <MAIN_IntToStr>
			LCD_puts(Buffer);
     c12:	ce 01       	movw	r24, r28
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	0e 94 61 07 	call	0xec2 <LCD_puts>

			LCD_CONTRAST_LEVEL(Contrast);
     c1a:	81 2f       	mov	r24, r17
     c1c:	8f 70       	andi	r24, 0x0F	; 15
     c1e:	80 93 e7 00 	sts	0x00E7, r24

			MAIN_WaitForJoyRelease();
     c22:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     c26:	d1 cf       	rjmp	.-94     	; 0xbca <FUNCSetContrast+0x26>
     c28:	26 96       	adiw	r28, 0x06	; 6
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	08 95       	ret

00000c3c <FUNCSetISPSpeed>:
		}
	}
}

void FUNCSetISPSpeed(void)
{
     c3c:	cf 93       	push	r28
	JoyStatus = 1;                         // Invalid value to force the LCD to update
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	8e bb       	out	0x1e, r24	; 30

	uint8_t CurrSpeed = eeprom_read_byte_169(&Param_SCKDuration);
     c42:	80 e2       	ldi	r24, 0x20	; 32
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
     c4a:	c8 2f       	mov	r28, r24

	if (CurrSpeed > (USI_PRESET_SPEEDS - 1)) CurrSpeed = 0; // Protection against blank EEPROM
     c4c:	84 30       	cpi	r24, 0x04	; 4
     c4e:	08 f0       	brcs	.+2      	; 0xc52 <FUNCSetISPSpeed+0x16>
     c50:	c0 e0       	ldi	r28, 0x00	; 0

	while (1)
	{
		if (JoyStatus)
     c52:	8e b3       	in	r24, 0x1e	; 30
     c54:	88 23       	and	r24, r24
     c56:	e9 f3       	breq	.-6      	; 0xc52 <FUNCSetISPSpeed+0x16>
		{
			if (JoyStatus & JOY_UP)
     c58:	f6 9b       	sbis	0x1e, 6	; 30
     c5a:	06 c0       	rjmp	.+12     	; 0xc68 <FUNCSetISPSpeed+0x2c>
			{
				(CurrSpeed == 0)? CurrSpeed = (USI_PRESET_SPEEDS - 1) : CurrSpeed--;
     c5c:	cc 23       	and	r28, r28
     c5e:	11 f4       	brne	.+4      	; 0xc64 <FUNCSetISPSpeed+0x28>
     c60:	c3 e0       	ldi	r28, 0x03	; 3
     c62:	12 c0       	rjmp	.+36     	; 0xc88 <FUNCSetISPSpeed+0x4c>
     c64:	c1 50       	subi	r28, 0x01	; 1
     c66:	10 c0       	rjmp	.+32     	; 0xc88 <FUNCSetISPSpeed+0x4c>
			}
			else if (JoyStatus & JOY_DOWN)
     c68:	f7 9b       	sbis	0x1e, 7	; 30
     c6a:	06 c0       	rjmp	.+12     	; 0xc78 <FUNCSetISPSpeed+0x3c>
			{
				(CurrSpeed == (USI_PRESET_SPEEDS - 1))? CurrSpeed = 0 : CurrSpeed++;
     c6c:	c3 30       	cpi	r28, 0x03	; 3
     c6e:	11 f4       	brne	.+4      	; 0xc74 <FUNCSetISPSpeed+0x38>
     c70:	c0 e0       	ldi	r28, 0x00	; 0
     c72:	0a c0       	rjmp	.+20     	; 0xc88 <FUNCSetISPSpeed+0x4c>
     c74:	cf 5f       	subi	r28, 0xFF	; 255
     c76:	08 c0       	rjmp	.+16     	; 0xc88 <FUNCSetISPSpeed+0x4c>
			}
			else if (JoyStatus & JOY_LEFT)
     c78:	f2 9b       	sbis	0x1e, 2	; 30
     c7a:	06 c0       	rjmp	.+12     	; 0xc88 <FUNCSetISPSpeed+0x4c>
			{
				eeprom_write_byte_169(&Param_SCKDuration, CurrSpeed);
     c7c:	6c 2f       	mov	r22, r28
     c7e:	80 e2       	ldi	r24, 0x20	; 32
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
				return;
     c86:	0d c0       	rjmp	.+26     	; 0xca2 <FUNCSetISPSpeed+0x66>
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&USIPSNamePtrs[CurrSpeed]));
     c88:	ec 2f       	mov	r30, r28
     c8a:	ff 27       	eor	r31, r31
     c8c:	ee 0f       	add	r30, r30
     c8e:	ff 1f       	adc	r31, r31
     c90:	e3 58       	subi	r30, 0x83	; 131
     c92:	ff 4f       	sbci	r31, 0xFF	; 255
     c94:	85 91       	lpm	r24, Z+
     c96:	94 91       	lpm	r25, Z
     c98:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     c9c:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     ca0:	d8 cf       	rjmp	.-80     	; 0xc52 <FUNCSetISPSpeed+0x16>
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <FUNCSleepMode>:
		}
	}
}

void FUNCSleepMode(void)
{
	SMCR    = ((1 << SM1) | (1 << SE));   // Power down sleep mode
     ca6:	85 e0       	ldi	r24, 0x05	; 5
     ca8:	83 bf       	out	0x33, r24	; 51
	LCDCRA &= ~(1 << LCDEN); 
     caa:	80 91 e4 00 	lds	r24, 0x00E4
     cae:	8f 77       	andi	r24, 0x7F	; 127
     cb0:	80 93 e4 00 	sts	0x00E4, r24
	
	while (!(JoyStatus & JOY_UP))        // Joystick interrupt wakes the micro
	  SLEEP();
     cb4:	f6 99       	sbic	0x1e, 6	; 30
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <FUNCSleepMode+0x18>
     cb8:	88 95       	sleep
     cba:	f6 9b       	sbis	0x1e, 6	; 30
     cbc:	fd cf       	rjmp	.-6      	; 0xcb8 <FUNCSleepMode+0x12>
	   
	LCDCRA |= (1 << LCDEN);
     cbe:	80 91 e4 00 	lds	r24, 0x00E4
     cc2:	80 68       	ori	r24, 0x80	; 128
     cc4:	80 93 e4 00 	sts	0x00E4, r24
	
	MAIN_WaitForJoyRelease();
     cc8:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     ccc:	08 95       	ret

00000cce <FUNCStorageInfo>:
}

void FUNCStorageInfo(void)
{
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
	uint8_t SelectedItem = 0;
     cd2:	10 e0       	ldi	r17, 0x00	; 0

	MAIN_WaitForJoyRelease();
     cd4:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>

	JoyStatus = 1;                         // Invalid value to force the LCD to update
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     cdc:	8e b3       	in	r24, 0x1e	; 30
     cde:	88 23       	and	r24, r24
     ce0:	e9 f3       	breq	.-6      	; 0xcdc <FUNCStorageInfo+0xe>
		{
			if (JoyStatus & (JOY_UP | JOY_DOWN))
     ce2:	ce b3       	in	r28, 0x1e	; 30
     ce4:	c0 7c       	andi	r28, 0xC0	; 192
     ce6:	19 f0       	breq	.+6      	; 0xcee <FUNCStorageInfo+0x20>
			{
				SelectedItem ^= 1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	18 27       	eor	r17, r24
     cec:	38 c0       	rjmp	.+112    	; 0xd5e <FUNCStorageInfo+0x90>
			}
			else if (JoyStatus & JOY_LEFT)
     cee:	f2 99       	sbic	0x1e, 2	; 30
     cf0:	43 c0       	rjmp	.+134    	; 0xd78 <FUNCStorageInfo+0xaa>
			{
				return;
			}
			else if (JoyStatus & JOY_PRESS)
     cf2:	f4 9b       	sbis	0x1e, 4	; 30
     cf4:	34 c0       	rjmp	.+104    	; 0xd5e <FUNCStorageInfo+0x90>
			{
				if (SelectedItem == 1)    // View storage tags
     cf6:	11 30       	cpi	r17, 0x01	; 1
     cf8:	81 f5       	brne	.+96     	; 0xd5a <FUNCStorageInfo+0x8c>
				{
					DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     cfa:	85 ee       	ldi	r24, 0xE5	; 229
     cfc:	98 e0       	ldi	r25, 0x08	; 8
     cfe:	90 93 01 01 	sts	0x0101, r25
     d02:	80 93 00 01 	sts	0x0100, r24
					SPI_SPIInit();
     d06:	0e 94 db 08 	call	0x11b6 <SPI_SPIInit>
					UseExernalDF = FALSE;
     d0a:	c0 93 83 02 	sts	0x0283, r28
					DF_EnableDataflash(TRUE);
     d0e:	81 2f       	mov	r24, r17
     d10:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>

					if (DF_CheckCorrectOnboardChip())
     d14:	0e 94 f6 0a 	call	0x15ec <DF_CheckCorrectOnboardChip>
     d18:	c8 2f       	mov	r28, r24
     d1a:	88 23       	and	r24, r24
     d1c:	41 f0       	breq	.+16     	; 0xd2e <FUNCStorageInfo+0x60>
					{
						TM_ShowTags();
     d1e:	0e 94 a8 1a 	call	0x3550 <TM_ShowTags>
						SPI_SPIOFF();
     d22:	80 91 64 00 	lds	r24, 0x0064
     d26:	84 60       	ori	r24, 0x04	; 4
     d28:	80 93 64 00 	sts	0x0064, r24
     d2c:	18 c0       	rjmp	.+48     	; 0xd5e <FUNCStorageInfo+0x90>
					}
					else if (!(PM_GetStoredDataSize(TYPE_FLASH)))
     d2e:	81 2f       	mov	r24, r17
     d30:	0e 94 1b 13 	call	0x2636 <PM_GetStoredDataSize>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	a1 05       	cpc	r26, r1
     d3c:	b1 05       	cpc	r27, r1
     d3e:	79 f4       	brne	.+30     	; 0xd5e <FUNCStorageInfo+0x90>
					{
						DF_EnableDataflash(FALSE);
     d40:	8c 2f       	mov	r24, r28
     d42:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
						SPI_SPIOFF();
     d46:	80 91 64 00 	lds	r24, 0x0064
     d4a:	84 60       	ori	r24, 0x04	; 4
     d4c:	80 93 64 00 	sts	0x0064, r24

						MAIN_ShowError(PSTR("NO STORED PRGM"));
     d50:	8c ec       	ldi	r24, 0xCC	; 204
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	0e 94 63 03 	call	0x6c6 <MAIN_ShowError>
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <FUNCStorageInfo+0x90>
					}	
				}
				else                  // View stored data sizes
				{
					PM_ShowStoredItemSizes();
     d5a:	0e 94 84 19 	call	0x3308 <PM_ShowStoredItemSizes>
				}
			}
			
			LCD_puts_f((uint8_t*)pgm_read_word(&SIFOOptionPtrs[SelectedItem]));
     d5e:	e1 2f       	mov	r30, r17
     d60:	ff 27       	eor	r31, r31
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	e4 5a       	subi	r30, 0xA4	; 164
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	85 91       	lpm	r24, Z+
     d6c:	94 91       	lpm	r25, Z
     d6e:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     d72:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     d76:	b2 cf       	rjmp	.-156    	; 0xcdc <FUNCStorageInfo+0xe>
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	08 95       	ret

00000d7e <FUNCGoBootloader>:
		}
	}
}

void FUNCGoBootloader(void)
{
	uint8_t MD = (MCUCR & ~(1 << JTD)); // Forces compiler to use IN, AND plus two OUTs rather than two lots of IN/AND/OUTs
     d7e:	85 b7       	in	r24, 0x35	; 53
     d80:	8f 77       	andi	r24, 0x7F	; 127
	MCUCR = MD;  // Turn on JTAG via code
     d82:	85 bf       	out	0x35, r24	; 53
	MCUCR = MD;  // Twice as specified in datasheet        
     d84:	85 bf       	out	0x35, r24	; 53
	
	LCD_puts_f(PSTR("*JTAG ON*"));
     d86:	8b ed       	ldi	r24, 0xDB	; 219
     d88:	92 e0       	ldi	r25, 0x02	; 2
     d8a:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>
	
	MAIN_WaitForJoyRelease();
     d8e:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
	
	WDTCR = ((1<<WDCE) | (1<<WDE)); // Enable Watchdog Timer to give reset after minimum timeout
     d92:	88 e1       	ldi	r24, 0x18	; 24
     d94:	80 93 60 00 	sts	0x0060, r24
	while (1) {};                  // Eternal loop - when watchdog resets the AVR it will enter the bootloader
     d98:	ff cf       	rjmp	.-2      	; 0xd98 <FUNCGoBootloader+0x1a>

00000d9a <OSCCAL_Calibrate>:

volatile static uint16_t ActualCount;

void OSCCAL_Calibrate(void)
{
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
	uint8_t SREG_Backup;
	uint8_t LoopCount = (0x7F / 2); // Maximum range is 128, and starts from the middle, so 64 is the max number of iterations required
     d9e:	4f e3       	ldi	r20, 0x3F	; 63
	uint8_t PrevOSCALValues[2] = {};
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
   
	// Make sure all clock division is turned off (8Mhz RC clock)
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_8MHZ);
     da4:	80 e8       	ldi	r24, 0x80	; 128
     da6:	80 93 61 00 	sts	0x0061, r24
     daa:	10 92 61 00 	sts	0x0061, r1

	// Inital OSCCAL of half its maximum for speed
	OSCCAL = (0x7F / 2);
     dae:	40 93 66 00 	sts	0x0066, r20

	// Save the SREG
	SREG_Backup = SREG;
     db2:	5f b7       	in	r21, 0x3f	; 63
    
	// Disable all timer 1 interrupts
	TIMSK1 = 0;
     db4:	10 92 6f 00 	sts	0x006F, r1
        
	// Set timer 2 to asyncronous mode (32.768KHz crystal)
	ASSR   = (1 << AS2);
     db8:	88 e0       	ldi	r24, 0x08	; 8
     dba:	80 93 b6 00 	sts	0x00B6, r24
        
	// Timer 2 overflow interrupt enable
	TIMSK2 = (1 << TOIE2);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	80 93 70 00 	sts	0x0070, r24

	// Enable interrupts
	sei();
     dc4:	78 94       	sei

	// Start both counters with no prescaling
	TCCR1B = (1 << CS10);
     dc6:	80 93 81 00 	sts	0x0081, r24
	TCCR2A = (1 << CS20);
     dca:	80 93 b0 00 	sts	0x00B0, r24
	 	 
	// Wait until timer 2's external 32.768KHz crystal is stable
	while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB) | (1 << OCR2UB)));
     dce:	80 91 b6 00 	lds	r24, 0x00B6
     dd2:	99 27       	eor	r25, r25
     dd4:	87 70       	andi	r24, 0x07	; 7
     dd6:	90 70       	andi	r25, 0x00	; 0
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	c9 f7       	brne	.-14     	; 0xdce <OSCCAL_Calibrate+0x34>
    
	// Clear the timer values
	TCNT1  = 0;
     ddc:	90 93 85 00 	sts	0x0085, r25
     de0:	80 93 84 00 	sts	0x0084, r24
	TCNT2  = 0;
     de4:	10 92 b2 00 	sts	0x00B2, r1
    
	while (LoopCount--)
	{
		// Let it take a few readings (16ms, approx 2 readings)
		_delay_ms(16);

		PrevOSCALValues[1] = PrevOSCALValues[0];
		PrevOSCALValues[0] = OSCCAL;
        
		if (ActualCount > OSCCAL_UPPERCOUNTBOUND)       // Clock is running too fast
			OSCCAL--;
		else if (ActualCount < OSCCAL_LOWERCOUNTBOUND ) // Clock is running too slow
			OSCCAL++;
		else		                                     // Clock is just right
			break;
		
		// If the routine cannot find a value withing the count tollerance,
		// it will cause the OSCCAL to hover around the closest two values.
		// If the current value is the same as the two previous, exit the
		// routine as the best value has been found.
		if (OSCCAL == PrevOSCALValues[1])
		  break;
     de8:	4e e3       	ldi	r20, 0x3E	; 62
     dea:	a3 e3       	ldi	r26, 0x33	; 51
     dec:	b3 e7       	ldi	r27, 0x73	; 115
     dee:	c0 e0       	ldi	r28, 0x00	; 0
     df0:	d0 e0       	ldi	r29, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     df2:	cd 01       	movw	r24, r26
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <OSCCAL_Calibrate+0x5a>
     df8:	32 2f       	mov	r19, r18
     dfa:	80 91 66 00 	lds	r24, 0x0066
     dfe:	28 2f       	mov	r18, r24
     e00:	80 91 26 01 	lds	r24, 0x0126
     e04:	90 91 27 01 	lds	r25, 0x0127
     e08:	86 50       	subi	r24, 0x06	; 6
     e0a:	91 4e       	sbci	r25, 0xE1	; 225
     e0c:	20 f0       	brcs	.+8      	; 0xe16 <OSCCAL_Calibrate+0x7c>
     e0e:	80 91 66 00 	lds	r24, 0x0066
     e12:	81 50       	subi	r24, 0x01	; 1
     e14:	0a c0       	rjmp	.+20     	; 0xe2a <OSCCAL_Calibrate+0x90>
     e16:	80 91 26 01 	lds	r24, 0x0126
     e1a:	90 91 27 01 	lds	r25, 0x0127
     e1e:	8b 5f       	subi	r24, 0xFB	; 251
     e20:	90 4e       	sbci	r25, 0xE0	; 224
     e22:	58 f4       	brcc	.+22     	; 0xe3a <OSCCAL_Calibrate+0xa0>
     e24:	80 91 66 00 	lds	r24, 0x0066
     e28:	8f 5f       	subi	r24, 0xFF	; 255
     e2a:	80 93 66 00 	sts	0x0066, r24
     e2e:	80 91 66 00 	lds	r24, 0x0066
     e32:	83 17       	cp	r24, r19
     e34:	11 f0       	breq	.+4      	; 0xe3a <OSCCAL_Calibrate+0xa0>
     e36:	41 50       	subi	r20, 0x01	; 1
     e38:	e0 f6       	brcc	.-72     	; 0xdf2 <OSCCAL_Calibrate+0x58>
	}

	// Disable all timer interrupts
	TIMSK1 = 0;
     e3a:	10 92 6f 00 	sts	0x006F, r1
	TIMSK2 = 0;
     e3e:	10 92 70 00 	sts	0x0070, r1
    
	// Stop the timers
	TCCR1B = 0x00;
     e42:	10 92 81 00 	sts	0x0081, r1
	TCCR2A = 0x00;
     e46:	10 92 b0 00 	sts	0x00B0, r1

	// Turn off timer 2 asynchronous mode
	ASSR  &= ~(1 << AS2);
     e4a:	80 91 b6 00 	lds	r24, 0x00B6
     e4e:	87 7f       	andi	r24, 0xF7	; 247
     e50:	80 93 b6 00 	sts	0x00B6, r24

	// Restore SREG
	SREG = SREG_Backup;
     e54:	5f bf       	out	0x3f, r21	; 63
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <__vector_5>:
        
	return;
}

ISR(TIMER2_OVF_vect, ISR_BLOCK) // Occurs 32768/256 timers per second, or 128Hz
{
     e5c:	1f 92       	push	r1
     e5e:	0f 92       	push	r0
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	0f 92       	push	r0
     e64:	11 24       	eor	r1, r1
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
	// Stop timer 1 so it can be read
	TCCR1B = 0x00;
     e6a:	10 92 81 00 	sts	0x0081, r1
    
	// Record timer 1's value
	ActualCount = TCNT1;
     e6e:	80 91 84 00 	lds	r24, 0x0084
     e72:	90 91 85 00 	lds	r25, 0x0085
     e76:	90 93 27 01 	sts	0x0127, r25
     e7a:	80 93 26 01 	sts	0x0126, r24
	     
	// Reset counters and restart timer 1
	TCNT1  = 0;
     e7e:	10 92 85 00 	sts	0x0085, r1
     e82:	10 92 84 00 	sts	0x0084, r1
	TCNT2  = 0;
     e86:	10 92 b2 00 	sts	0x00B2, r1
	TCCR1B = (1 << CS10);
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	80 93 81 00 	sts	0x0081, r24
     e90:	9f 91       	pop	r25
     e92:	8f 91       	pop	r24
     e94:	0f 90       	pop	r0
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	0f 90       	pop	r0
     e9a:	1f 90       	pop	r1
     e9c:	18 95       	reti

00000e9e <LCD_Init>:
// ======================================================================================

void LCD_Init(void)
{
	LCDCCR = 0x0F;
     e9e:	8f e0       	ldi	r24, 0x0F	; 15
     ea0:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all segment pins.
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
     ea4:	87 eb       	ldi	r24, 0xB7	; 183
     ea6:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32,0 Hz
    LCDFRR  = (0<<LCDPS0) | (7<<LCDCD0);    
     eaa:	87 e0       	ldi	r24, 0x07	; 7
     eac:	80 93 e6 00 	sts	0x00E6, r24

	// Enable LCD and set low power waveform
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB); 
     eb0:	80 ec       	ldi	r24, 0xC0	; 192
     eb2:	80 93 e4 00 	sts	0x00E4, r24

    //Enable LCD start of frame interrupt
    LCDCRA |= (1<<LCDIE);
     eb6:	80 91 e4 00 	lds	r24, 0x00E4
     eba:	88 60       	ori	r24, 0x08	; 8
     ebc:	80 93 e4 00 	sts	0x00E4, r24
     ec0:	08 95       	ret

00000ec2 <LCD_puts>:
}

void LCD_puts_f(const uint8_t *FlashData)
{
	uint8_t StrBuff[LCD_TEXTBUFFER_SIZE];

	strcpy_P(StrBuff, FlashData);
	LCD_puts(StrBuff);
}

void LCD_puts(uint8_t *Data)
{
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	ec 01       	movw	r28, r24
	uint8_t LoadB;
	
	for (LoadB = 0; LoadB < 20; LoadB++)
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	3f ef       	ldi	r19, 0xFF	; 255
     ecc:	ef e4       	ldi	r30, 0x4F	; 79
     ece:	f2 e0       	ldi	r31, 0x02	; 2
     ed0:	df 01       	movw	r26, r30
	{
		uint8_t CByte = *(Data++);
     ed2:	89 91       	ld	r24, Y+
	
		if ((CByte >= '*') && (CByte <= 'z'))
     ed4:	98 2f       	mov	r25, r24
     ed6:	9a 52       	subi	r25, 0x2A	; 42
     ed8:	91 35       	cpi	r25, 0x51	; 81
     eda:	38 f4       	brcc	.+14     	; 0xeea <LCD_puts+0x28>
		  TextBuffer[LoadB] = ((CByte == ' ')? 0xFF : (CByte - '*'));
     edc:	80 32       	cpi	r24, 0x20	; 32
     ede:	11 f0       	breq	.+4      	; 0xee4 <LCD_puts+0x22>
     ee0:	89 2f       	mov	r24, r25
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <LCD_puts+0x24>
     ee4:	8f ef       	ldi	r24, 0xFF	; 255
     ee6:	8c 93       	st	X, r24
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <LCD_puts+0x2e>
		else if (CByte == 0x00)
     eea:	88 23       	and	r24, r24
     eec:	31 f0       	breq	.+12     	; 0xefa <LCD_puts+0x38>
		  break;
		else
		  TextBuffer[LoadB] = 0xFF;		
     eee:	30 83       	st	Z, r19
     ef0:	2f 5f       	subi	r18, 0xFF	; 255
     ef2:	11 96       	adiw	r26, 0x01	; 1
     ef4:	31 96       	adiw	r30, 0x01	; 1
     ef6:	24 31       	cpi	r18, 0x14	; 20
     ef8:	60 f3       	brcs	.-40     	; 0xed2 <LCD_puts+0x10>
	}

	ScrollMode  = ((LoadB > 6)? TRUE : FALSE);
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	27 30       	cpi	r18, 0x07	; 7
     efe:	08 f0       	brcs	.+2      	; 0xf02 <LCD_puts+0x40>
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	80 93 7f 02 	sts	0x027F, r24
	ScrollCount = 0;
     f06:	10 92 4d 02 	sts	0x024D, r1
     f0a:	9f ef       	ldi	r25, 0xFF	; 255
     f0c:	86 e0       	ldi	r24, 0x06	; 6

	for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
		TextBuffer[LoadB++] = 0xFF;
     f0e:	e2 2f       	mov	r30, r18
     f10:	ff 27       	eor	r31, r31
     f12:	e1 5b       	subi	r30, 0xB1	; 177
     f14:	fd 4f       	sbci	r31, 0xFD	; 253
     f16:	90 83       	st	Z, r25
     f18:	2f 5f       	subi	r18, 0xFF	; 255
     f1a:	81 50       	subi	r24, 0x01	; 1
     f1c:	87 ff       	sbrs	r24, 7
     f1e:	f7 cf       	rjmp	.-18     	; 0xf0e <LCD_puts+0x4c>
	
	TextBuffer[LoadB] = 0x00;
     f20:	e2 2f       	mov	r30, r18
     f22:	ff 27       	eor	r31, r31
     f24:	e1 5b       	subi	r30, 0xB1	; 177
     f26:	fd 4f       	sbci	r31, 0xFD	; 253
     f28:	10 82       	st	Z, r1
	StrStart   = 0;
     f2a:	10 92 4e 02 	sts	0x024E, r1
	StrEnd     = LoadB;	
     f2e:	20 93 4c 02 	sts	0x024C, r18
	DelayCount = LCD_DELAYCOUNT_DEFAULT;
     f32:	8a e0       	ldi	r24, 0x0A	; 10
     f34:	80 93 80 02 	sts	0x0280, r24

	UpdateLCD  = TRUE;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	80 93 6a 02 	sts	0x026A, r24
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <LCD_puts_f>:
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	64 97       	sbiw	r28, 0x14	; 20
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	bc 01       	movw	r22, r24
     f5a:	ce 01       	movw	r24, r28
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	0e 94 d6 1a 	call	0x35ac <strcpy_P>
     f62:	ce 01       	movw	r24, r28
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	0e 94 61 07 	call	0xec2 <LCD_puts>
     f6a:	64 96       	adiw	r28, 0x14	; 20
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <LCD_WriteChar>:
}

void LCD_WriteChar(uint8_t Byte, uint8_t Digit)
{
     f7c:	e8 2f       	mov	r30, r24
	uint16_t SegData  = 0x00;
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1));
     f82:	86 2f       	mov	r24, r22
     f84:	86 95       	lsr	r24
     f86:	a8 2f       	mov	r26, r24
     f88:	bb 27       	eor	r27, r27
     f8a:	a5 59       	subi	r26, 0x95	; 149
     f8c:	bd 4f       	sbci	r27, 0xFD	; 253

	if (Byte != 0xFF)
     f8e:	ef 3f       	cpi	r30, 0xFF	; 255
     f90:	39 f0       	breq	.+14     	; 0xfa0 <LCD_WriteChar+0x24>
	  SegData = pgm_read_word(&LCD_SegTable[Byte]);	
     f92:	ff 27       	eor	r31, r31
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	eb 51       	subi	r30, 0x1B	; 27
     f9a:	fd 4f       	sbci	r31, 0xFD	; 253
     f9c:	25 91       	lpm	r18, Z+
     f9e:	34 91       	lpm	r19, Z
     fa0:	77 27       	eor	r23, r23
     fa2:	61 70       	andi	r22, 0x01	; 1
     fa4:	70 70       	andi	r23, 0x00	; 0
     fa6:	43 e0       	ldi	r20, 0x03	; 3

	for (uint8_t BNib = 0; BNib < 4; BNib++)
	{
		uint8_t Mask          = 0xF0;
     fa8:	50 ef       	ldi	r21, 0xF0	; 240
		uint8_t MaskedSegData = (SegData & 0x0000F);
     faa:	92 2f       	mov	r25, r18
     fac:	9f 70       	andi	r25, 0x0F	; 15
	
		if (Digit & 0x01)
     fae:	61 15       	cp	r22, r1
     fb0:	71 05       	cpc	r23, r1
     fb2:	19 f0       	breq	.+6      	; 0xfba <LCD_WriteChar+0x3e>
		{
			Mask = 0x0F;
     fb4:	5f e0       	ldi	r21, 0x0F	; 15
			MaskedSegData <<= 4;
     fb6:	92 95       	swap	r25
     fb8:	90 7f       	andi	r25, 0xF0	; 240
		}
		
		*BuffPtr = ((*BuffPtr & Mask) | MaskedSegData);
     fba:	8c 91       	ld	r24, X
     fbc:	85 23       	and	r24, r21
     fbe:	89 2b       	or	r24, r25
     fc0:	8c 93       	st	X, r24

		SegData >>= 4;
     fc2:	84 e0       	ldi	r24, 0x04	; 4
     fc4:	36 95       	lsr	r19
     fc6:	27 95       	ror	r18
     fc8:	8a 95       	dec	r24
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <LCD_WriteChar+0x48>
		BuffPtr  += 5;
     fcc:	15 96       	adiw	r26, 0x05	; 5
     fce:	41 50       	subi	r20, 0x01	; 1
     fd0:	47 ff       	sbrs	r20, 7
     fd2:	ea cf       	rjmp	.-44     	; 0xfa8 <LCD_WriteChar+0x2c>
     fd4:	08 95       	ret

00000fd6 <__vector_22>:
	}
}

ISR(LCD_vect, ISR_NOBLOCK)
{
     fd6:	78 94       	sei
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	2f 93       	push	r18
     fe4:	3f 93       	push	r19
     fe6:	4f 93       	push	r20
     fe8:	5f 93       	push	r21
     fea:	6f 93       	push	r22
     fec:	7f 93       	push	r23
     fee:	8f 93       	push	r24
     ff0:	9f 93       	push	r25
     ff2:	af 93       	push	r26
     ff4:	bf 93       	push	r27
     ff6:	cf 93       	push	r28
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
	if (ScrollMode)
     ffc:	80 91 7f 02 	lds	r24, 0x027F
    1000:	88 23       	and	r24, r24
    1002:	99 f0       	breq	.+38     	; 0x102a <__vector_22+0x54>
	{
		if (DelayCount)
    1004:	80 91 80 02 	lds	r24, 0x0280
    1008:	88 23       	and	r24, r24
    100a:	21 f0       	breq	.+8      	; 0x1014 <__vector_22+0x3e>
		{
			DelayCount--;
    100c:	81 50       	subi	r24, 0x01	; 1
    100e:	80 93 80 02 	sts	0x0280, r24
    1012:	0b c0       	rjmp	.+22     	; 0x102a <__vector_22+0x54>
		}
		else
		{
			if (!(ScrollCount))
    1014:	80 91 4d 02 	lds	r24, 0x024D
    1018:	88 23       	and	r24, r24
    101a:	21 f4       	brne	.+8      	; 0x1024 <__vector_22+0x4e>
			  UpdateLCD = TRUE;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	80 93 6a 02 	sts	0x026A, r24
    1022:	03 c0       	rjmp	.+6      	; 0x102a <__vector_22+0x54>
			else
			  ScrollCount--;
    1024:	81 50       	subi	r24, 0x01	; 1
    1026:	80 93 4d 02 	sts	0x024D, r24
		}
	}

	if (UpdateLCD)
    102a:	80 91 6a 02 	lds	r24, 0x026A
    102e:	88 23       	and	r24, r24
    1030:	39 f1       	breq	.+78     	; 0x1080 <__vector_22+0xaa>
	{
		for (uint8_t Character = 0; Character < 6; Character++)
    1032:	c0 e0       	ldi	r28, 0x00	; 0
		{
			uint8_t Byte = (StrStart + Character);
    1034:	80 91 4e 02 	lds	r24, 0x024E
    1038:	8c 0f       	add	r24, r28

			if (Byte >= StrEnd)
    103a:	90 91 4c 02 	lds	r25, 0x024C
    103e:	e8 2f       	mov	r30, r24
    1040:	ff 27       	eor	r31, r31
    1042:	89 17       	cp	r24, r25
    1044:	10 f0       	brcs	.+4      	; 0x104a <__vector_22+0x74>
			  Byte = TextBuffer[Byte - StrEnd];
    1046:	e9 1b       	sub	r30, r25
    1048:	f1 09       	sbc	r31, r1
			else
			  Byte = TextBuffer[Byte];
    104a:	e1 5b       	subi	r30, 0xB1	; 177
    104c:	fd 4f       	sbci	r31, 0xFD	; 253
    104e:	80 81       	ld	r24, Z
			
			LCD_WriteChar(Byte, Character);
    1050:	6c 2f       	mov	r22, r28
    1052:	0e 94 be 07 	call	0xf7c <LCD_WriteChar>
    1056:	cf 5f       	subi	r28, 0xFF	; 255
    1058:	c6 30       	cpi	r28, 0x06	; 6
    105a:	60 f3       	brcs	.-40     	; 0x1034 <__vector_22+0x5e>
		}
		
		if (StrStart++ == StrEnd)
    105c:	80 91 4e 02 	lds	r24, 0x024E
    1060:	98 2f       	mov	r25, r24
    1062:	8f 5f       	subi	r24, 0xFF	; 255
    1064:	80 93 4e 02 	sts	0x024E, r24
    1068:	80 91 4c 02 	lds	r24, 0x024C
    106c:	98 17       	cp	r25, r24
    106e:	19 f4       	brne	.+6      	; 0x1076 <__vector_22+0xa0>
		  StrStart = 1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	80 93 4e 02 	sts	0x024E, r24
		
		ScrollCount = LCD_SCROLLCOUNT_DEFAULT;
    1076:	83 e0       	ldi	r24, 0x03	; 3
    1078:	80 93 4d 02 	sts	0x024D, r24
		UpdateLCD = FALSE;
    107c:	10 92 6a 02 	sts	0x026A, r1
    1080:	ac ee       	ldi	r26, 0xEC	; 236
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	eb e6       	ldi	r30, 0x6B	; 107
    1086:	f2 e0       	ldi	r31, 0x02	; 2
    1088:	93 e1       	ldi	r25, 0x13	; 19
	}

	for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++)
	  *(pLCDREG + LCDChar) = SegBuffer[LCDChar];
    108a:	81 91       	ld	r24, Z+
    108c:	8d 93       	st	X+, r24
    108e:	91 50       	subi	r25, 0x01	; 1
    1090:	97 ff       	sbrs	r25, 7
    1092:	fb cf       	rjmp	.-10     	; 0x108a <__vector_22+0xb4>
    1094:	ff 91       	pop	r31
    1096:	ef 91       	pop	r30
    1098:	cf 91       	pop	r28
    109a:	bf 91       	pop	r27
    109c:	af 91       	pop	r26
    109e:	9f 91       	pop	r25
    10a0:	8f 91       	pop	r24
    10a2:	7f 91       	pop	r23
    10a4:	6f 91       	pop	r22
    10a6:	5f 91       	pop	r21
    10a8:	4f 91       	pop	r20
    10aa:	3f 91       	pop	r19
    10ac:	2f 91       	pop	r18
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <eeprom_read_byte_169>:
#include <avr/interrupt.h>
#include "eeprom169.h"

uint8_t eeprom_read_byte_169(const uint16_t *addr)
{
    10b8:	fc 01       	movw	r30, r24
	cli();
    10ba:	f8 94       	cli
	/* Set up address register */
	EEAR = *addr;
    10bc:	80 81       	ld	r24, Z
    10be:	91 81       	ldd	r25, Z+1	; 0x01
    10c0:	92 bd       	out	0x22, r25	; 34
    10c2:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    10c4:	f8 9a       	sbi	0x1f, 0	; 31
	sei();
    10c6:	78 94       	sei
	/* Return data from Data Register */
	return EEDR;
    10c8:	80 b5       	in	r24, 0x20	; 32
}
    10ca:	99 27       	eor	r25, r25
    10cc:	08 95       	ret

000010ce <eeprom_write_byte_169>:

void eeprom_write_byte_169(const uint16_t *addr, uint8_t val) 
{
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	ec 01       	movw	r28, r24
    10d6:	16 2f       	mov	r17, r22
	if(eeprom_read_byte_169(addr) == val) // Compare stored value with new value for match
    10d8:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    10dc:	81 17       	cp	r24, r17
    10de:	59 f0       	breq	.+22     	; 0x10f6 <eeprom_write_byte_169+0x28>
		return; // Don't re-write the same value and waste EEPROM life

	cli();
    10e0:	f8 94       	cli
	/* Set up address and Data Registers */
	EEAR = *addr;
    10e2:	88 81       	ld	r24, Y
    10e4:	99 81       	ldd	r25, Y+1	; 0x01
    10e6:	92 bd       	out	0x22, r25	; 34
    10e8:	81 bd       	out	0x21, r24	; 33
	EEDR = val;
    10ea:	10 bd       	out	0x20, r17	; 32
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
    10ec:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
    10ee:	f9 9a       	sbi	0x1f, 1	; 31
	sei();
    10f0:	78 94       	sei
	/* Wait for completion */
	while(EECR & (1<<EEWE));
    10f2:	f9 99       	sbic	0x1f, 1	; 31
    10f4:	fe cf       	rjmp	.-4      	; 0x10f2 <eeprom_write_byte_169+0x24>
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	08 95       	ret

000010fe <USART_Init>:
*   Purpose :       Initialize the USART
*
*****************************************************************************/
void USART_Init(unsigned int baudrate)
{
    10fe:	9c 01       	movw	r18, r24
    // Set baud rate
    UBRRH = (unsigned char)(baudrate>>8);
    1100:	83 2f       	mov	r24, r19
    1102:	99 27       	eor	r25, r25
    1104:	80 93 c5 00 	sts	0x00C5, r24
    UBRRL = (unsigned char)(baudrate);
    1108:	20 93 c4 00 	sts	0x00C4, r18

    // Double speed
	UCSRA = (USART_DOUBLESPEED << U2X);
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	80 93 c0 00 	sts	0x00C0, r24

    // Enable recieve complete interrupt
	UCSRB = (1 << RXCIE);
    1112:	80 e8       	ldi	r24, 0x80	; 128
    1114:	80 93 c1 00 	sts	0x00C1, r24
	 
    // Async. mode, 8N1
    UCSRC = (3 << UCSZ0);
    1118:	86 e0       	ldi	r24, 0x06	; 6
    111a:	80 93 c2 00 	sts	0x00C2, r24
	 
	 // Initalise ringbuffer
	BUFF_InitialiseBuffer();
    111e:	0e 94 0e 0b 	call	0x161c <BUFF_InitialiseBuffer>
    1122:	08 95       	ret

00001124 <USART_Tx>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_Tx(char data)
{
    1124:	98 2f       	mov	r25, r24
    while (!(UCSRA & (1<<UDRE)));
    1126:	80 91 c0 00 	lds	r24, 0x00C0
    112a:	85 ff       	sbrs	r24, 5
    112c:	fc cf       	rjmp	.-8      	; 0x1126 <USART_Tx+0x2>
    UDR = data;
    112e:	90 93 c6 00 	sts	0x00C6, r25
    1132:	08 95       	ret

00001134 <USART_TxString>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_TxString(char *data)
{
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	ec 01       	movw	r28, r24
	while (*data != '\0')
		USART_Tx(*data++);
    113a:	88 81       	ld	r24, Y
    113c:	88 23       	and	r24, r24
    113e:	31 f0       	breq	.+12     	; 0x114c <USART_TxString+0x18>
    1140:	89 91       	ld	r24, Y+
    1142:	0e 94 92 08 	call	0x1124 <USART_Tx>
    1146:	88 81       	ld	r24, Y
    1148:	88 23       	and	r24, r24
    114a:	d1 f7       	brne	.-12     	; 0x1140 <USART_TxString+0xc>
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	08 95       	ret

00001152 <USART_Rx>:
}

/*****************************************************************************
*
*   Function name : Usart_Rx
*
*   Returns :       char: byte received
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART
*
*****************************************************************************/
char USART_Rx(void)
{
    while (!(BuffElements) && !(TimeOut)) {};
    1152:	80 91 d1 02 	lds	r24, 0x02D1
    1156:	88 23       	and	r24, r24
    1158:	21 f4       	brne	.+8      	; 0x1162 <USART_Rx+0x10>
    115a:	80 91 28 01 	lds	r24, 0x0128
    115e:	88 23       	and	r24, r24
    1160:	c1 f3       	breq	.-16     	; 0x1152 <USART_Rx>
    return BUFF_GetBuffByte();
    1162:	0e 94 44 0b 	call	0x1688 <BUFF_GetBuffByte>
}
    1166:	99 27       	eor	r25, r25
    1168:	08 95       	ret

0000116a <__vector_13>:

/*****************************************************************************
*
*   Function name : Usart_Rx Interrupt
*
*   Returns :       N/A
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART and stores it into the buffer
*
*****************************************************************************/

ISR(USART0_RX_vect, ISR_BLOCK)
{
    116a:	1f 92       	push	r1
    116c:	0f 92       	push	r0
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	0f 92       	push	r0
    1172:	11 24       	eor	r1, r1
    1174:	2f 93       	push	r18
    1176:	3f 93       	push	r19
    1178:	4f 93       	push	r20
    117a:	5f 93       	push	r21
    117c:	6f 93       	push	r22
    117e:	7f 93       	push	r23
    1180:	8f 93       	push	r24
    1182:	9f 93       	push	r25
    1184:	af 93       	push	r26
    1186:	bf 93       	push	r27
    1188:	ef 93       	push	r30
    118a:	ff 93       	push	r31
	BUFF_StoreBuffByte(UDR);
    118c:	80 91 c6 00 	lds	r24, 0x00C6
    1190:	0e 94 1b 0b 	call	0x1636 <BUFF_StoreBuffByte>
    1194:	ff 91       	pop	r31
    1196:	ef 91       	pop	r30
    1198:	bf 91       	pop	r27
    119a:	af 91       	pop	r26
    119c:	9f 91       	pop	r25
    119e:	8f 91       	pop	r24
    11a0:	7f 91       	pop	r23
    11a2:	6f 91       	pop	r22
    11a4:	5f 91       	pop	r21
    11a6:	4f 91       	pop	r20
    11a8:	3f 91       	pop	r19
    11aa:	2f 91       	pop	r18
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <SPI_SPIInit>:
// ======================================================================================

void SPI_SPIInit(void)
{
	PRR &= ~(1 << PRSPI);              // Enable the SPI system by clearing the power save register SPI disable bit
    11b6:	80 91 64 00 	lds	r24, 0x0064
    11ba:	8b 7f       	andi	r24, 0xFB	; 251
    11bc:	80 93 64 00 	sts	0x0064, r24

	// Master, Sample falling edge (setup rising), Fosc/2 speed (8Mhz/2 = 4MHz)
	SPSR = (1 << SPI2X);
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	8d bd       	out	0x2d, r24	; 45
	SPCR = ((1 << SPE) | (1 << MSTR) | (1 << CPHA) | (1 << CPOL));
    11c4:	8c e5       	ldi	r24, 0x5C	; 92
    11c6:	8c bd       	out	0x2c, r24	; 44
    11c8:	08 95       	ret

000011ca <SPI_SPITransmit>:
}

uint8_t SPI_SPITransmit(uint8_t Data)
{
	SPDR = Data;                       // Loading a byte into the register starts the transmission
    11ca:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));    // Wait until transmission completed
    11cc:	0d b4       	in	r0, 0x2d	; 45
    11ce:	07 fe       	sbrs	r0, 7
    11d0:	fd cf       	rjmp	.-6      	; 0x11cc <SPI_SPITransmit+0x2>
	return SPDR;
    11d2:	8e b5       	in	r24, 0x2e	; 46
}
    11d4:	99 27       	eor	r25, r25
    11d6:	08 95       	ret

000011d8 <SPI_SPITransmitWord>:

uint8_t SPI_SPITransmitWord(uint16_t Data)
{
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	8c 01       	movw	r16, r24
	SPI_SPITransmit((uint8_t)(Data >> 8));
    11de:	81 2f       	mov	r24, r17
    11e0:	99 27       	eor	r25, r25
    11e2:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
	return SPI_SPITransmit((uint8_t)Data);
    11e6:	80 2f       	mov	r24, r16
    11e8:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
}
    11ec:	99 27       	eor	r25, r25
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	08 95       	ret

000011f4 <__vector_17>:
 *  have to stop the timer tick.
 *  For all modes the USIDR contents are stored and flags are updated.
 */
ISR(USI_OVERFLOW_vect, ISR_BLOCK)
{
    11f4:	1f 92       	push	r1
    11f6:	0f 92       	push	r0
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	0f 92       	push	r0
    11fc:	11 24       	eor	r1, r1
    11fe:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	TIMSK0 &= ~(1<<OCIE0A);
    1200:	80 91 6e 00 	lds	r24, 0x006E
    1204:	8d 7f       	andi	r24, 0xFD	; 253
    1206:	80 93 6e 00 	sts	0x006E, r24
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
    120a:	80 e4       	ldi	r24, 0x40	; 64
    120c:	80 93 b9 00 	sts	0x00B9, r24
	TransferComplete = 1;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	80 93 81 02 	sts	0x0281, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
    1216:	80 91 ba 00 	lds	r24, 0x00BA
    121a:	80 93 82 02 	sts	0x0282, r24
    121e:	8f 91       	pop	r24
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

0000122a <USI_SPISetSpeed>:
}



/*! \brief  Initialize USI as SPI master.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from slave to master mode.
 *  Note that the stored USIDR value is cleared.
 *
 */
void USI_SPIInitMaster(char Freq)
{
	// Configure port directions.
 	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN);  // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                       // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                        // Pull-ups.
	USI_OUT_REG &= ~(1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Pull-ups.
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = USI_CONTROL_REG_FLAGS;

	// Set the compare and prescaler for the requested frequency:
	USI_SPISetSpeed(Freq);
	
	// Init driver status register.
	TransferComplete = 0;
	
	storedUSIDR = 0;
}

void USI_SPIOff( void )
{
	USI_DIR_REG &= ~((1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN));                        // Inputs.
	USI_OUT_REG &= ~((1<<USI_DATAIN_PIN)  | (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN)); // Pull-ups.
	DDRF  &= ~(1 << 6);
	PORTF &= ~(1 << 6);
	
	USI_STOPUSITIMER();
}

/*! \brief  Put one byte on bus.
 *
 *  Use this function like you would write to the SPDR register in the native SPI module.
 *  Calling this function in master mode starts a transfer, while in slave mode, a
 *  byte will be prepared for the next transfer initiated by the master device.
 *  If a transfer is in progress, this function will set the write collision flag
 *  and return without altering the data registers.
 *
 *  \returns  0 if a write collision occurred, 1 otherwise.
 */
uint8_t USI_SPITransmit( unsigned char val )
{
	// Reinit flags.
	TransferComplete = 0;

	// Put data in USI data register.
	USIDR = val;
	
	TIFR0  |= (1<<OCF0A);  // Clear compare match flag.
	TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.

	// Clear the timer 0 value
	TCNT0 = 0;

	while (!(TransferComplete));

	return storedUSIDR;
}

uint8_t USI_SPITransmitWord( unsigned int val )
{
	USI_SPITransmit((uint8_t)(val >> 8));
	return USI_SPITransmit((uint8_t)val);
}

void USI_SPIToggleClock(void)
{
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);	
}

void USI_SPISetSpeed(uint8_t Freq)
{
    122a:	48 2f       	mov	r20, r24
	for (uint8_t MatchIndex = 0; MatchIndex < USI_PRESET_SPEEDS; MatchIndex++)
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	62 e5       	ldi	r22, 0x52	; 82
    1230:	73 e0       	ldi	r23, 0x03	; 3
    1232:	9b 01       	movw	r18, r22
    1234:	21 50       	subi	r18, 0x01	; 1
    1236:	30 40       	sbci	r19, 0x00	; 0
	{
		if ((pgm_read_byte(&USIPSValues[MatchIndex][0]) == Freq) || (MatchIndex == (USI_PRESET_SPEEDS - 1)))
    1238:	f9 01       	movw	r30, r18
    123a:	84 91       	lpm	r24, Z
    123c:	84 17       	cp	r24, r20
    123e:	11 f0       	breq	.+4      	; 0x1244 <USI_SPISetSpeed+0x1a>
    1240:	93 30       	cpi	r25, 0x03	; 3
    1242:	31 f4       	brne	.+12     	; 0x1250 <USI_SPISetSpeed+0x26>
		{
			// Init Output Compare Register.
			OCR0A = pgm_read_byte(&USIPSValues[MatchIndex][1]);
    1244:	fb 01       	movw	r30, r22
    1246:	84 91       	lpm	r24, Z
    1248:	87 bd       	out	0x27, r24	; 39

			// Enable 'Clear Timer on Compare match' and set prescaler, which starts the timer
			TCCR0A = ((1<<WGM01) | TC0_PS_1);
    124a:	89 e0       	ldi	r24, 0x09	; 9
    124c:	84 bd       	out	0x24, r24	; 36
				
			return;
    124e:	08 95       	ret
    1250:	9f 5f       	subi	r25, 0xFF	; 255
    1252:	2e 5f       	subi	r18, 0xFE	; 254
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	6e 5f       	subi	r22, 0xFE	; 254
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	94 30       	cpi	r25, 0x04	; 4
    125c:	68 f3       	brcs	.-38     	; 0x1238 <USI_SPISetSpeed+0xe>
    125e:	08 95       	ret

00001260 <USI_SPIInitMaster>:
    1260:	9d b1       	in	r25, 0x0d	; 13
    1262:	90 65       	ori	r25, 0x50	; 80
    1264:	9d b9       	out	0x0d, r25	; 13
    1266:	6d 98       	cbi	0x0d, 5	; 13
    1268:	75 9a       	sbi	0x0e, 5	; 14
    126a:	76 98       	cbi	0x0e, 6	; 14
    126c:	9a e5       	ldi	r25, 0x5A	; 90
    126e:	90 93 b8 00 	sts	0x00B8, r25
    1272:	0e 94 15 09 	call	0x122a <USI_SPISetSpeed>
    1276:	10 92 81 02 	sts	0x0281, r1
    127a:	10 92 82 02 	sts	0x0282, r1
    127e:	08 95       	ret

00001280 <USI_SPIOff>:
    1280:	8d b1       	in	r24, 0x0d	; 13
    1282:	8f 7a       	andi	r24, 0xAF	; 175
    1284:	8d b9       	out	0x0d, r24	; 13
    1286:	8e b1       	in	r24, 0x0e	; 14
    1288:	8f 78       	andi	r24, 0x8F	; 143
    128a:	8e b9       	out	0x0e, r24	; 14
    128c:	86 98       	cbi	0x10, 6	; 16
    128e:	8e 98       	cbi	0x11, 6	; 17
    1290:	14 bc       	out	0x24, r1	; 36
    1292:	08 95       	ret

00001294 <USI_SPITransmit>:
    1294:	10 92 81 02 	sts	0x0281, r1
    1298:	80 93 ba 00 	sts	0x00BA, r24
    129c:	a9 9a       	sbi	0x15, 1	; 21
    129e:	80 91 6e 00 	lds	r24, 0x006E
    12a2:	82 60       	ori	r24, 0x02	; 2
    12a4:	80 93 6e 00 	sts	0x006E, r24
    12a8:	16 bc       	out	0x26, r1	; 38
    12aa:	80 91 81 02 	lds	r24, 0x0281
    12ae:	88 23       	and	r24, r24
    12b0:	e1 f3       	breq	.-8      	; 0x12aa <USI_SPITransmit+0x16>
    12b2:	80 91 82 02 	lds	r24, 0x0282
    12b6:	99 27       	eor	r25, r25
    12b8:	08 95       	ret

000012ba <USI_SPITransmitWord>:
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	8c 01       	movw	r16, r24
    12c0:	81 2f       	mov	r24, r17
    12c2:	99 27       	eor	r25, r25
    12c4:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    12c8:	80 2f       	mov	r24, r16
    12ca:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    12ce:	99 27       	eor	r25, r25
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	08 95       	ret

000012d6 <USI_SPIToggleClock>:
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	0e 94 fc 02 	call	0x5f8 <MAIN_Delay1MS>
    12dc:	80 91 b8 00 	lds	r24, 0x00B8
    12e0:	81 60       	ori	r24, 0x01	; 1
    12e2:	80 93 b8 00 	sts	0x00B8, r24
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	0e 94 fc 02 	call	0x5f8 <MAIN_Delay1MS>
    12ec:	80 91 b8 00 	lds	r24, 0x00B8
    12f0:	81 60       	ori	r24, 0x01	; 1
    12f2:	80 93 b8 00 	sts	0x00B8, r24
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	0e 94 fc 02 	call	0x5f8 <MAIN_Delay1MS>
    12fc:	08 95       	ret

000012fe <DF_EnableDataflash>:
	while (DF_BUSY());
}

void DF_EnableDataflash(uint8_t Enabled)
{
    12fe:	90 91 83 02 	lds	r25, 0x0283
	if (Enabled == TRUE)
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	31 f4       	brne	.+12     	; 0x1312 <DF_EnableDataflash+0x14>
	{
		if (UseExernalDF == TRUE)
    1306:	91 30       	cpi	r25, 0x01	; 1
    1308:	11 f4       	brne	.+4      	; 0x130e <DF_EnableDataflash+0x10>
		  MAIN_ResetCSLine(MAIN_RESETCS_EXTDFACTIVE);
    130a:	82 e0       	ldi	r24, 0x02	; 2
    130c:	05 c0       	rjmp	.+10     	; 0x1318 <DF_EnableDataflash+0x1a>
		else
		  PORTB &= ~(1 << 0);
    130e:	28 98       	cbi	0x05, 0	; 5
    1310:	08 95       	ret
	}
	else
	{
		if (UseExernalDF == TRUE)
    1312:	91 30       	cpi	r25, 0x01	; 1
    1314:	21 f4       	brne	.+8      	; 0x131e <DF_EnableDataflash+0x20>
		  MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE);
    1316:	89 2f       	mov	r24, r25
    1318:	0e 94 0e 03 	call	0x61c <MAIN_ResetCSLine>
    131c:	08 95       	ret
		else
		  PORTB |= (1 << 0);
    131e:	28 9a       	sbi	0x05, 0	; 5
    1320:	08 95       	ret

00001322 <DF_ReadBufferByte>:
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	8c 01       	movw	r16, r24
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1334:	e0 91 00 01 	lds	r30, 0x0100
    1338:	f0 91 01 01 	lds	r31, 0x0101
    133c:	84 e5       	ldi	r24, 0x54	; 84
    133e:	09 95       	icall
    1340:	81 2f       	mov	r24, r17
    1342:	99 27       	eor	r25, r25
    1344:	e0 91 00 01 	lds	r30, 0x0100
    1348:	f0 91 01 01 	lds	r31, 0x0101
    134c:	09 95       	icall
    134e:	e0 91 00 01 	lds	r30, 0x0100
    1352:	f0 91 01 01 	lds	r31, 0x0101
    1356:	80 2f       	mov	r24, r16
    1358:	09 95       	icall
    135a:	e0 91 00 01 	lds	r30, 0x0100
    135e:	f0 91 01 01 	lds	r31, 0x0101
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	09 95       	icall
    1366:	e0 91 00 01 	lds	r30, 0x0100
    136a:	f0 91 01 01 	lds	r31, 0x0101
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	09 95       	icall
    1372:	99 27       	eor	r25, r25
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	08 95       	ret

0000137a <DF_ContinuousReadEnable>:
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	8c 01       	movw	r16, r24
    1384:	7b 01       	movw	r14, r22
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1392:	e0 91 00 01 	lds	r30, 0x0100
    1396:	f0 91 01 01 	lds	r31, 0x0101
    139a:	88 e6       	ldi	r24, 0x68	; 104
    139c:	09 95       	icall
    139e:	8a b5       	in	r24, 0x2a	; 42
    13a0:	98 01       	movw	r18, r16
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DF_ContinuousReadEnable+0x2e>
    13a4:	36 95       	lsr	r19
    13a6:	27 95       	ror	r18
    13a8:	8a 95       	dec	r24
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DF_ContinuousReadEnable+0x2a>
    13ac:	c9 01       	movw	r24, r18
    13ae:	e0 91 00 01 	lds	r30, 0x0100
    13b2:	f0 91 01 01 	lds	r31, 0x0101
    13b6:	09 95       	icall
    13b8:	8b b5       	in	r24, 0x2b	; 43
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DF_ContinuousReadEnable+0x46>
    13bc:	00 0f       	add	r16, r16
    13be:	11 1f       	adc	r17, r17
    13c0:	8a 95       	dec	r24
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <DF_ContinuousReadEnable+0x42>
    13c4:	8f 2d       	mov	r24, r15
    13c6:	99 27       	eor	r25, r25
    13c8:	e0 91 00 01 	lds	r30, 0x0100
    13cc:	f0 91 01 01 	lds	r31, 0x0101
    13d0:	80 0f       	add	r24, r16
    13d2:	09 95       	icall
    13d4:	e0 91 00 01 	lds	r30, 0x0100
    13d8:	f0 91 01 01 	lds	r31, 0x0101
    13dc:	8e 2d       	mov	r24, r14
    13de:	09 95       	icall
    13e0:	03 e0       	ldi	r16, 0x03	; 3
    13e2:	e0 91 00 01 	lds	r30, 0x0100
    13e6:	f0 91 01 01 	lds	r31, 0x0101
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	09 95       	icall
    13ee:	01 50       	subi	r16, 0x01	; 1
    13f0:	07 ff       	sbrs	r16, 7
    13f2:	f7 cf       	rjmp	.-18     	; 0x13e2 <DF_ContinuousReadEnable+0x68>
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	08 95       	ret

000013fe <DF_BufferWriteEnable>:
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	8c 01       	movw	r16, r24
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1410:	e0 91 00 01 	lds	r30, 0x0100
    1414:	f0 91 01 01 	lds	r31, 0x0101
    1418:	84 e8       	ldi	r24, 0x84	; 132
    141a:	09 95       	icall
    141c:	e0 91 00 01 	lds	r30, 0x0100
    1420:	f0 91 01 01 	lds	r31, 0x0101
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	09 95       	icall
    1428:	81 2f       	mov	r24, r17
    142a:	99 27       	eor	r25, r25
    142c:	e0 91 00 01 	lds	r30, 0x0100
    1430:	f0 91 01 01 	lds	r31, 0x0101
    1434:	09 95       	icall
    1436:	e0 91 00 01 	lds	r30, 0x0100
    143a:	f0 91 01 01 	lds	r31, 0x0101
    143e:	80 2f       	mov	r24, r16
    1440:	09 95       	icall
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	08 95       	ret

00001448 <DF_GetChipCharacteristics>:
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1454:	e0 91 00 01 	lds	r30, 0x0100
    1458:	f0 91 01 01 	lds	r31, 0x0101
    145c:	87 e5       	ldi	r24, 0x57	; 87
    145e:	09 95       	icall
    1460:	e0 91 00 01 	lds	r30, 0x0100
    1464:	f0 91 01 01 	lds	r31, 0x0101
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	09 95       	icall
    146c:	68 2f       	mov	r22, r24
    146e:	77 27       	eor	r23, r23
    1470:	cb 01       	movw	r24, r22
    1472:	88 73       	andi	r24, 0x38	; 56
    1474:	90 70       	andi	r25, 0x00	; 0
    1476:	33 e0       	ldi	r19, 0x03	; 3
    1478:	95 95       	asr	r25
    147a:	87 95       	ror	r24
    147c:	3a 95       	dec	r19
    147e:	e1 f7       	brne	.-8      	; 0x1478 <DF_GetChipCharacteristics+0x30>
    1480:	99 27       	eor	r25, r25
    1482:	fc 01       	movw	r30, r24
    1484:	e7 57       	subi	r30, 0x77	; 119
    1486:	fc 4f       	sbci	r31, 0xFC	; 252
    1488:	44 91       	lpm	r20, Z
    148a:	40 93 86 02 	sts	0x0286, r20
    148e:	9c 01       	movw	r18, r24
    1490:	28 0f       	add	r18, r24
    1492:	39 1f       	adc	r19, r25
    1494:	f9 01       	movw	r30, r18
    1496:	e7 58       	subi	r30, 0x87	; 135
    1498:	fc 4f       	sbci	r31, 0xFC	; 252
    149a:	85 91       	lpm	r24, Z+
    149c:	94 91       	lpm	r25, Z
    149e:	90 93 88 02 	sts	0x0288, r25
    14a2:	80 93 87 02 	sts	0x0287, r24
    14a6:	f9 01       	movw	r30, r18
    14a8:	e7 59       	subi	r30, 0x97	; 151
    14aa:	fc 4f       	sbci	r31, 0xFC	; 252
    14ac:	85 91       	lpm	r24, Z+
    14ae:	94 91       	lpm	r25, Z
    14b0:	90 93 8a 02 	sts	0x028A, r25
    14b4:	80 93 89 02 	sts	0x0289, r24
    14b8:	80 e1       	ldi	r24, 0x10	; 16
    14ba:	84 1b       	sub	r24, r20
    14bc:	8a bd       	out	0x2a, r24	; 42
    14be:	48 50       	subi	r20, 0x08	; 8
    14c0:	4b bd       	out	0x2b, r20	; 43
    14c2:	cb 01       	movw	r24, r22
    14c4:	08 95       	ret

000014c6 <DF_EraseBlock>:
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	8c 01       	movw	r16, r24
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    14d8:	e0 91 00 01 	lds	r30, 0x0100
    14dc:	f0 91 01 01 	lds	r31, 0x0101
    14e0:	80 e5       	ldi	r24, 0x50	; 80
    14e2:	09 95       	icall
    14e4:	81 2f       	mov	r24, r17
    14e6:	99 27       	eor	r25, r25
    14e8:	e0 91 00 01 	lds	r30, 0x0100
    14ec:	f0 91 01 01 	lds	r31, 0x0101
    14f0:	09 95       	icall
    14f2:	e0 91 00 01 	lds	r30, 0x0100
    14f6:	f0 91 01 01 	lds	r31, 0x0101
    14fa:	80 2f       	mov	r24, r16
    14fc:	09 95       	icall
    14fe:	e0 91 00 01 	lds	r30, 0x0100
    1502:	f0 91 01 01 	lds	r31, 0x0101
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	09 95       	icall
    150a:	0e 94 24 0a 	call	0x1448 <DF_GetChipCharacteristics>
    150e:	88 23       	and	r24, r24
    1510:	e4 f7       	brge	.-8      	; 0x150a <DF_EraseBlock+0x44>
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	08 95       	ret

00001518 <DF_CopyFlashPageToBuffer>:
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	8c 01       	movw	r16, r24
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    152a:	e0 91 00 01 	lds	r30, 0x0100
    152e:	f0 91 01 01 	lds	r31, 0x0101
    1532:	83 e5       	ldi	r24, 0x53	; 83
    1534:	09 95       	icall
    1536:	8a b5       	in	r24, 0x2a	; 42
    1538:	98 01       	movw	r18, r16
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <DF_CopyFlashPageToBuffer+0x28>
    153c:	36 95       	lsr	r19
    153e:	27 95       	ror	r18
    1540:	8a 95       	dec	r24
    1542:	e2 f7       	brpl	.-8      	; 0x153c <DF_CopyFlashPageToBuffer+0x24>
    1544:	c9 01       	movw	r24, r18
    1546:	e0 91 00 01 	lds	r30, 0x0100
    154a:	f0 91 01 01 	lds	r31, 0x0101
    154e:	09 95       	icall
    1550:	8b b5       	in	r24, 0x2b	; 43
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DF_CopyFlashPageToBuffer+0x40>
    1554:	00 0f       	add	r16, r16
    1556:	11 1f       	adc	r17, r17
    1558:	8a 95       	dec	r24
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DF_CopyFlashPageToBuffer+0x3c>
    155c:	e0 91 00 01 	lds	r30, 0x0100
    1560:	f0 91 01 01 	lds	r31, 0x0101
    1564:	80 2f       	mov	r24, r16
    1566:	09 95       	icall
    1568:	e0 91 00 01 	lds	r30, 0x0100
    156c:	f0 91 01 01 	lds	r31, 0x0101
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	09 95       	icall
    1574:	0e 94 24 0a 	call	0x1448 <DF_GetChipCharacteristics>
    1578:	88 23       	and	r24, r24
    157a:	e4 f7       	brge	.-8      	; 0x1574 <DF_CopyFlashPageToBuffer+0x5c>
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	08 95       	ret

00001582 <DF_CopyBufferToFlashPage>:
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	8c 01       	movw	r16, r24
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1594:	e0 91 00 01 	lds	r30, 0x0100
    1598:	f0 91 01 01 	lds	r31, 0x0101
    159c:	83 e8       	ldi	r24, 0x83	; 131
    159e:	09 95       	icall
    15a0:	8a b5       	in	r24, 0x2a	; 42
    15a2:	98 01       	movw	r18, r16
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DF_CopyBufferToFlashPage+0x28>
    15a6:	36 95       	lsr	r19
    15a8:	27 95       	ror	r18
    15aa:	8a 95       	dec	r24
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <DF_CopyBufferToFlashPage+0x24>
    15ae:	c9 01       	movw	r24, r18
    15b0:	e0 91 00 01 	lds	r30, 0x0100
    15b4:	f0 91 01 01 	lds	r31, 0x0101
    15b8:	09 95       	icall
    15ba:	8b b5       	in	r24, 0x2b	; 43
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <DF_CopyBufferToFlashPage+0x40>
    15be:	00 0f       	add	r16, r16
    15c0:	11 1f       	adc	r17, r17
    15c2:	8a 95       	dec	r24
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <DF_CopyBufferToFlashPage+0x3c>
    15c6:	e0 91 00 01 	lds	r30, 0x0100
    15ca:	f0 91 01 01 	lds	r31, 0x0101
    15ce:	80 2f       	mov	r24, r16
    15d0:	09 95       	icall
    15d2:	e0 91 00 01 	lds	r30, 0x0100
    15d6:	f0 91 01 01 	lds	r31, 0x0101
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	09 95       	icall
    15de:	0e 94 24 0a 	call	0x1448 <DF_GetChipCharacteristics>
    15e2:	88 23       	and	r24, r24
    15e4:	e4 f7       	brge	.-8      	; 0x15de <DF_CopyBufferToFlashPage+0x5c>
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	08 95       	ret

000015ec <DF_CheckCorrectOnboardChip>:
    15ec:	0e 94 24 0a 	call	0x1448 <DF_GetChipCharacteristics>
    15f0:	80 91 89 02 	lds	r24, 0x0289
    15f4:	90 91 8a 02 	lds	r25, 0x028A
    15f8:	80 50       	subi	r24, 0x00	; 0
    15fa:	98 40       	sbci	r25, 0x08	; 8
    15fc:	61 f4       	brne	.+24     	; 0x1616 <DF_CheckCorrectOnboardChip+0x2a>
    15fe:	80 91 64 00 	lds	r24, 0x0064
    1602:	84 60       	ori	r24, 0x04	; 4
    1604:	80 93 64 00 	sts	0x0064, r24
    1608:	89 e5       	ldi	r24, 0x59	; 89
    160a:	93 e0       	ldi	r25, 0x03	; 3
    160c:	0e 94 63 03 	call	0x6c6 <MAIN_ShowError>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	08 95       	ret
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	08 95       	ret

0000161c <BUFF_InitialiseBuffer>:

// Routines:
void BUFF_InitialiseBuffer(void)
{
	StoreLoc    = (BuffType*)&RingBuffer[0]; // Set up the IN pointer to the start of the buffer
    161c:	8d e8       	ldi	r24, 0x8D	; 141
    161e:	92 e0       	ldi	r25, 0x02	; 2
    1620:	90 93 ce 02 	sts	0x02CE, r25
    1624:	80 93 cd 02 	sts	0x02CD, r24
	RetrieveLoc = (BuffType*)&RingBuffer[0]; // Set up the OUT pointer to the start of the buffer
    1628:	90 93 d0 02 	sts	0x02D0, r25
    162c:	80 93 cf 02 	sts	0x02CF, r24

	BuffElements = 0;                     // Reset the buffer elements counter
    1630:	10 92 d1 02 	sts	0x02D1, r1
    1634:	08 95       	ret

00001636 <BUFF_StoreBuffByte>:
}

void BUFF_StoreBuffByte(BuffType DataToStore)
{
    1636:	98 2f       	mov	r25, r24
	if (BuffElements == BuffLen)          // Buffer full
    1638:	80 91 d1 02 	lds	r24, 0x02D1
    163c:	80 34       	cpi	r24, 0x40	; 64
    163e:	29 f4       	brne	.+10     	; 0x164a <BUFF_StoreBuffByte+0x14>
	{
		MAIN_ShowError(PSTR("BUFF OVERFLOW"));
    1640:	81 e9       	ldi	r24, 0x91	; 145
    1642:	93 e0       	ldi	r25, 0x03	; 3
    1644:	0e 94 63 03 	call	0x6c6 <MAIN_ShowError>
		return;
    1648:	08 95       	ret
	}
		
	*StoreLoc = DataToStore;              // Store the data
    164a:	e0 91 cd 02 	lds	r30, 0x02CD
    164e:	f0 91 ce 02 	lds	r31, 0x02CE
    1652:	90 83       	st	Z, r25

	StoreLoc++;                           // Increment the IN pointer to the next element
    1654:	40 91 cd 02 	lds	r20, 0x02CD
    1658:	50 91 ce 02 	lds	r21, 0x02CE
    165c:	9a 01       	movw	r18, r20
    165e:	2f 5f       	subi	r18, 0xFF	; 255
    1660:	3f 4f       	sbci	r19, 0xFF	; 255
    1662:	30 93 ce 02 	sts	0x02CE, r19
    1666:	20 93 cd 02 	sts	0x02CD, r18
	BuffElements++;                       // Increment the total elements variable
    166a:	80 91 d1 02 	lds	r24, 0x02D1
    166e:	8f 5f       	subi	r24, 0xFF	; 255
    1670:	80 93 d1 02 	sts	0x02D1, r24

	if (StoreLoc == (BuffType*)&RingBuffer[BuffLen])
    1674:	2d 5c       	subi	r18, 0xCD	; 205
    1676:	32 40       	sbci	r19, 0x02	; 2
    1678:	31 f4       	brne	.+12     	; 0x1686 <BUFF_StoreBuffByte+0x50>
		StoreLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    167a:	4f 53       	subi	r20, 0x3F	; 63
    167c:	50 40       	sbci	r21, 0x00	; 0
    167e:	50 93 ce 02 	sts	0x02CE, r21
    1682:	40 93 cd 02 	sts	0x02CD, r20
    1686:	08 95       	ret

00001688 <BUFF_GetBuffByte>:
}	

BuffType BUFF_GetBuffByte(void)
{
	if (!(BuffElements))                  // No elements in the buffer
    1688:	80 91 d1 02 	lds	r24, 0x02D1
    168c:	88 23       	and	r24, r24
    168e:	19 f4       	brne	.+6      	; 0x1696 <BUFF_GetBuffByte+0xe>
		return 0;
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	08 95       	ret

	BuffType RetrievedData = *RetrieveLoc; // Grab the stored byte into a temp variable
    1696:	20 91 cf 02 	lds	r18, 0x02CF
    169a:	30 91 d0 02 	lds	r19, 0x02D0
    169e:	f9 01       	movw	r30, r18
    16a0:	91 91       	ld	r25, Z+

	RetrieveLoc++;                         // Increment the OUT pointer to the next element if flag set
    16a2:	f0 93 d0 02 	sts	0x02D0, r31
    16a6:	e0 93 cf 02 	sts	0x02CF, r30
	BuffElements--;                        // Decrement the total elements variable
    16aa:	80 91 d1 02 	lds	r24, 0x02D1
    16ae:	81 50       	subi	r24, 0x01	; 1
    16b0:	80 93 d1 02 	sts	0x02D1, r24
	
	if (RetrieveLoc == (BuffType*)&RingBuffer[BuffLen])
    16b4:	ed 5c       	subi	r30, 0xCD	; 205
    16b6:	f2 40       	sbci	r31, 0x02	; 2
    16b8:	31 f4       	brne	.+12     	; 0x16c6 <BUFF_GetBuffByte+0x3e>
		RetrieveLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    16ba:	2f 53       	subi	r18, 0x3F	; 63
    16bc:	30 40       	sbci	r19, 0x00	; 0
    16be:	30 93 d0 02 	sts	0x02D0, r19
    16c2:	20 93 cf 02 	sts	0x02CF, r18
		
	return RetrievedData;                 // Return the retrieved data
    16c6:	89 2f       	mov	r24, r25
    16c8:	99 27       	eor	r25, r25
}
    16ca:	08 95       	ret

000016cc <__vector_9>:
// ======================================================================================

// Timeout = ((F_CPU / 64) / (65535 * TIMEOUT_TICKSBEFORETIMEOUT)) per second
ISR(TIMER1_OVF_vect, ISR_NOBLOCK)
{
    16cc:	78 94       	sei
    16ce:	1f 92       	push	r1
    16d0:	0f 92       	push	r0
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	0f 92       	push	r0
    16d6:	11 24       	eor	r1, r1
    16d8:	8f 93       	push	r24
	if (Ticks++ == TIMEOUT_TICKSBEFORETIMEOUT)
    16da:	80 91 29 01 	lds	r24, 0x0129
    16de:	8f 5f       	subi	r24, 0xFF	; 255
    16e0:	80 93 29 01 	sts	0x0129, r24
    16e4:	80 91 29 01 	lds	r24, 0x0129
    16e8:	87 30       	cpi	r24, 0x07	; 7
    16ea:	29 f4       	brne	.+10     	; 0x16f6 <__vector_9+0x2a>
	{
	   Ticks   = 0;
    16ec:	10 92 29 01 	sts	0x0129, r1
	   TimeOut = TRUE;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	80 93 28 01 	sts	0x0128, r24
    16f6:	8f 91       	pop	r24
    16f8:	0f 90       	pop	r0
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	0f 90       	pop	r0
    16fe:	1f 90       	pop	r1
    1700:	18 95       	reti

00001702 <TIMEOUT_SetupTimeoutTimer>:
	}
}

// ======================================================================================

void TIMEOUT_SetupTimeoutTimer(void)
{
	TCCR1A = 0;
    1702:	10 92 80 00 	sts	0x0080, r1
	TIMEOUT_TIMER_OFF();
    1706:	10 92 81 00 	sts	0x0081, r1
    170a:	10 92 29 01 	sts	0x0129, r1
    170e:	10 92 85 00 	sts	0x0085, r1
    1712:	10 92 84 00 	sts	0x0084, r1
	TCCR1C = 0;
    1716:	10 92 82 00 	sts	0x0082, r1
	
	TIMSK1 = (1 << TOIE1); // Turn timer 1 overflow interrupt on
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	80 93 6f 00 	sts	0x006F, r24
    1720:	08 95       	ret

00001722 <PD_SetupDFAddressCounters>:
}

void PD_SetupDFAddressCounters(void)
{
	uint32_t StartAddress = CurrAddress;
    1722:	20 91 2b 01 	lds	r18, 0x012B
    1726:	30 91 2c 01 	lds	r19, 0x012C
    172a:	40 91 2d 01 	lds	r20, 0x012D
    172e:	50 91 2e 01 	lds	r21, 0x012E

	CurrPageAddress = 0;
    1732:	10 92 8c 02 	sts	0x028C, r1
    1736:	10 92 8b 02 	sts	0x028B, r1

	while (StartAddress > DataflashInfo.PageSize)      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DataflashInfo.PageSize;         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    173a:	80 91 87 02 	lds	r24, 0x0287
    173e:	90 91 88 02 	lds	r25, 0x0288
    1742:	aa 27       	eor	r26, r26
    1744:	bb 27       	eor	r27, r27
    1746:	82 17       	cp	r24, r18
    1748:	93 07       	cpc	r25, r19
    174a:	a4 07       	cpc	r26, r20
    174c:	b5 07       	cpc	r27, r21
    174e:	88 f4       	brcc	.+34     	; 0x1772 <PD_SetupDFAddressCounters+0x50>
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	28 1b       	sub	r18, r24
    1756:	39 0b       	sbc	r19, r25
    1758:	4a 0b       	sbc	r20, r26
    175a:	5b 0b       	sbc	r21, r27
    175c:	6f 5f       	subi	r22, 0xFF	; 255
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	82 17       	cp	r24, r18
    1762:	93 07       	cpc	r25, r19
    1764:	a4 07       	cpc	r26, r20
    1766:	b5 07       	cpc	r27, r21
    1768:	a8 f3       	brcs	.-22     	; 0x1754 <PD_SetupDFAddressCounters+0x32>
    176a:	70 93 8c 02 	sts	0x028C, r23
    176e:	60 93 8b 02 	sts	0x028B, r22
	}
	
	CurrBuffByte = (uint16_t)StartAddress;              // The buffer byte is the remainder
    1772:	30 93 85 02 	sts	0x0285, r19
    1776:	20 93 84 02 	sts	0x0284, r18
    177a:	08 95       	ret

0000177c <PD_StoreDataflashByte>:
}

void PD_StoreDataflashByte(uint8_t Data)
{
    177c:	cf 93       	push	r28
    177e:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DataflashInfo.PageSize)
    1780:	20 91 84 02 	lds	r18, 0x0284
    1784:	30 91 85 02 	lds	r19, 0x0285
    1788:	80 91 87 02 	lds	r24, 0x0287
    178c:	90 91 88 02 	lds	r25, 0x0288
    1790:	28 17       	cp	r18, r24
    1792:	39 07       	cpc	r19, r25
    1794:	a9 f4       	brne	.+42     	; 0x17c0 <PD_StoreDataflashByte+0x44>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    1796:	80 91 8b 02 	lds	r24, 0x028B
    179a:	90 91 8c 02 	lds	r25, 0x028C
    179e:	9c 01       	movw	r18, r24
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	90 93 8c 02 	sts	0x028C, r25
    17a6:	80 93 8b 02 	sts	0x028B, r24
    17aa:	c9 01       	movw	r24, r18
    17ac:	0e 94 c1 0a 	call	0x1582 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 ff 09 	call	0x13fe <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    17b8:	10 92 85 02 	sts	0x0285, r1
    17bc:	10 92 84 02 	sts	0x0284, r1
	}
	
	USI_SPITransmit(Data);                                 // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    17c0:	8c 2f       	mov	r24, r28
    17c2:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
	CurrBuffByte++;
    17c6:	80 91 84 02 	lds	r24, 0x0284
    17ca:	90 91 85 02 	lds	r25, 0x0285
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	90 93 85 02 	sts	0x0285, r25
    17d4:	80 93 84 02 	sts	0x0284, r24
    17d8:	cf 91       	pop	r28
    17da:	08 95       	ret

000017dc <PD_InterpretAVRISPPacket>:
    17dc:	df 92       	push	r13
    17de:	ef 92       	push	r14
    17e0:	ff 92       	push	r15
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	dd 24       	eor	r13, r13
    17ec:	80 91 34 01 	lds	r24, 0x0134
    17f0:	99 27       	eor	r25, r25
    17f2:	86 31       	cpi	r24, 0x16	; 22
    17f4:	91 05       	cpc	r25, r1
    17f6:	09 f4       	brne	.+2      	; 0x17fa <PD_InterpretAVRISPPacket+0x1e>
    17f8:	00 c1       	rjmp	.+512    	; 0x19fa <PD_InterpretAVRISPPacket+0x21e>
    17fa:	87 31       	cpi	r24, 0x17	; 23
    17fc:	91 05       	cpc	r25, r1
    17fe:	b4 f4       	brge	.+44     	; 0x182c <PD_InterpretAVRISPPacket+0x50>
    1800:	82 31       	cpi	r24, 0x12	; 18
    1802:	91 05       	cpc	r25, r1
    1804:	09 f4       	brne	.+2      	; 0x1808 <PD_InterpretAVRISPPacket+0x2c>
    1806:	6f c0       	rjmp	.+222    	; 0x18e6 <PD_InterpretAVRISPPacket+0x10a>
    1808:	83 31       	cpi	r24, 0x13	; 19
    180a:	91 05       	cpc	r25, r1
    180c:	3c f4       	brge	.+14     	; 0x181c <PD_InterpretAVRISPPacket+0x40>
    180e:	80 31       	cpi	r24, 0x10	; 16
    1810:	91 05       	cpc	r25, r1
    1812:	31 f1       	breq	.+76     	; 0x1860 <PD_InterpretAVRISPPacket+0x84>
    1814:	41 97       	sbiw	r24, 0x11	; 17
    1816:	09 f4       	brne	.+2      	; 0x181a <PD_InterpretAVRISPPacket+0x3e>
    1818:	46 c0       	rjmp	.+140    	; 0x18a6 <PD_InterpretAVRISPPacket+0xca>
    181a:	40 c1       	rjmp	.+640    	; 0x1a9c <PD_InterpretAVRISPPacket+0x2c0>
    181c:	84 31       	cpi	r24, 0x14	; 20
    181e:	91 05       	cpc	r25, r1
    1820:	09 f4       	brne	.+2      	; 0x1824 <PD_InterpretAVRISPPacket+0x48>
    1822:	8a c0       	rjmp	.+276    	; 0x1938 <PD_InterpretAVRISPPacket+0x15c>
    1824:	45 97       	sbiw	r24, 0x15	; 21
    1826:	0c f0       	brlt	.+2      	; 0x182a <PD_InterpretAVRISPPacket+0x4e>
    1828:	af c0       	rjmp	.+350    	; 0x1988 <PD_InterpretAVRISPPacket+0x1ac>
    182a:	7f c0       	rjmp	.+254    	; 0x192a <PD_InterpretAVRISPPacket+0x14e>
    182c:	89 31       	cpi	r24, 0x19	; 25
    182e:	91 05       	cpc	r25, r1
    1830:	09 f4       	brne	.+2      	; 0x1834 <PD_InterpretAVRISPPacket+0x58>
    1832:	70 c0       	rjmp	.+224    	; 0x1914 <PD_InterpretAVRISPPacket+0x138>
    1834:	8a 31       	cpi	r24, 0x1A	; 26
    1836:	91 05       	cpc	r25, r1
    1838:	44 f4       	brge	.+16     	; 0x184a <PD_InterpretAVRISPPacket+0x6e>
    183a:	87 31       	cpi	r24, 0x17	; 23
    183c:	91 05       	cpc	r25, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <PD_InterpretAVRISPPacket+0x66>
    1840:	69 c0       	rjmp	.+210    	; 0x1914 <PD_InterpretAVRISPPacket+0x138>
    1842:	48 97       	sbiw	r24, 0x18	; 24
    1844:	09 f4       	brne	.+2      	; 0x1848 <PD_InterpretAVRISPPacket+0x6c>
    1846:	58 c0       	rjmp	.+176    	; 0x18f8 <PD_InterpretAVRISPPacket+0x11c>
    1848:	29 c1       	rjmp	.+594    	; 0x1a9c <PD_InterpretAVRISPPacket+0x2c0>
    184a:	8b 31       	cpi	r24, 0x1B	; 27
    184c:	91 05       	cpc	r25, r1
    184e:	e9 f1       	breq	.+122    	; 0x18ca <PD_InterpretAVRISPPacket+0xee>
    1850:	8b 31       	cpi	r24, 0x1B	; 27
    1852:	91 05       	cpc	r25, r1
    1854:	0c f4       	brge	.+2      	; 0x1858 <PD_InterpretAVRISPPacket+0x7c>
    1856:	50 c0       	rjmp	.+160    	; 0x18f8 <PD_InterpretAVRISPPacket+0x11c>
    1858:	4c 97       	sbiw	r24, 0x1c	; 28
    185a:	09 f4       	brne	.+2      	; 0x185e <PD_InterpretAVRISPPacket+0x82>
    185c:	4d c0       	rjmp	.+154    	; 0x18f8 <PD_InterpretAVRISPPacket+0x11c>
    185e:	1e c1       	rjmp	.+572    	; 0x1a9c <PD_InterpretAVRISPPacket+0x2c0>
    1860:	82 e0       	ldi	r24, 0x02	; 2
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	90 93 31 01 	sts	0x0131, r25
    1868:	80 93 30 01 	sts	0x0130, r24
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1872:	0e 94 24 0a 	call	0x1448 <DF_GetChipCharacteristics>
    1876:	80 91 86 02 	lds	r24, 0x0286
    187a:	88 23       	and	r24, r24
    187c:	59 f0       	breq	.+22     	; 0x1894 <PD_InterpretAVRISPPacket+0xb8>
    187e:	8f e9       	ldi	r24, 0x9F	; 159
    1880:	93 e0       	ldi	r25, 0x03	; 3
    1882:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	80 93 2f 01 	sts	0x012F, r24
    188c:	81 b3       	in	r24, 0x11	; 17
    188e:	8f 7c       	andi	r24, 0xCF	; 207
    1890:	80 62       	ori	r24, 0x20	; 32
    1892:	17 c0       	rjmp	.+46     	; 0x18c2 <PD_InterpretAVRISPPacket+0xe6>
    1894:	89 e5       	ldi	r24, 0x59	; 89
    1896:	93 e0       	ldi	r25, 0x03	; 3
    1898:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>
    189c:	8d 2d       	mov	r24, r13
    189e:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    18a2:	80 ec       	ldi	r24, 0xC0	; 192
    18a4:	02 c1       	rjmp	.+516    	; 0x1aaa <PD_InterpretAVRISPPacket+0x2ce>
    18a6:	82 e0       	ldi	r24, 0x02	; 2
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	90 93 31 01 	sts	0x0131, r25
    18ae:	80 93 30 01 	sts	0x0130, r24
    18b2:	d0 92 2f 01 	sts	0x012F, r13
    18b6:	8d 2d       	mov	r24, r13
    18b8:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    18bc:	81 b3       	in	r24, 0x11	; 17
    18be:	8f 7c       	andi	r24, 0xCF	; 207
    18c0:	80 61       	ori	r24, 0x10	; 16
    18c2:	81 bb       	out	0x11, r24	; 17
    18c4:	d0 92 35 01 	sts	0x0135, r13
    18c8:	f2 c0       	rjmp	.+484    	; 0x1aae <PD_InterpretAVRISPPacket+0x2d2>
    18ca:	84 e0       	ldi	r24, 0x04	; 4
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	90 93 31 01 	sts	0x0131, r25
    18d2:	80 93 30 01 	sts	0x0130, r24
    18d6:	d0 92 35 01 	sts	0x0135, r13
    18da:	82 e0       	ldi	r24, 0x02	; 2
    18dc:	80 93 36 01 	sts	0x0136, r24
    18e0:	d0 92 37 01 	sts	0x0137, r13
    18e4:	e4 c0       	rjmp	.+456    	; 0x1aae <PD_InterpretAVRISPPacket+0x2d2>
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	90 93 31 01 	sts	0x0131, r25
    18ee:	80 93 30 01 	sts	0x0130, r24
    18f2:	e1 e0       	ldi	r30, 0x01	; 1
    18f4:	de 2e       	mov	r13, r30
    18f6:	7e c0       	rjmp	.+252    	; 0x19f4 <PD_InterpretAVRISPPacket+0x218>
    18f8:	84 e0       	ldi	r24, 0x04	; 4
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	90 93 31 01 	sts	0x0131, r25
    1900:	80 93 30 01 	sts	0x0130, r24
    1904:	10 92 35 01 	sts	0x0135, r1
    1908:	8f ef       	ldi	r24, 0xFF	; 255
    190a:	80 93 36 01 	sts	0x0136, r24
    190e:	10 92 37 01 	sts	0x0137, r1
    1912:	cd c0       	rjmp	.+410    	; 0x1aae <PD_InterpretAVRISPPacket+0x2d2>
    1914:	83 e0       	ldi	r24, 0x03	; 3
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	90 93 31 01 	sts	0x0131, r25
    191c:	80 93 30 01 	sts	0x0130, r24
    1920:	10 92 35 01 	sts	0x0135, r1
    1924:	10 92 36 01 	sts	0x0136, r1
    1928:	c2 c0       	rjmp	.+388    	; 0x1aae <PD_InterpretAVRISPPacket+0x2d2>
    192a:	82 e0       	ldi	r24, 0x02	; 2
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	90 93 31 01 	sts	0x0131, r25
    1932:	80 93 30 01 	sts	0x0130, r24
    1936:	5e c0       	rjmp	.+188    	; 0x19f4 <PD_InterpretAVRISPPacket+0x218>
    1938:	80 91 35 01 	lds	r24, 0x0135
    193c:	99 27       	eor	r25, r25
    193e:	98 2f       	mov	r25, r24
    1940:	88 27       	eor	r24, r24
    1942:	20 91 36 01 	lds	r18, 0x0136
    1946:	33 27       	eor	r19, r19
    1948:	82 2b       	or	r24, r18
    194a:	93 2b       	or	r25, r19
    194c:	03 96       	adiw	r24, 0x03	; 3
    194e:	90 93 31 01 	sts	0x0131, r25
    1952:	80 93 30 01 	sts	0x0130, r24
    1956:	21 e0       	ldi	r18, 0x01	; 1
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	02 97       	sbiw	r24, 0x02	; 2
    195c:	28 17       	cp	r18, r24
    195e:	39 07       	cpc	r19, r25
    1960:	48 f4       	brcc	.+18     	; 0x1974 <PD_InterpretAVRISPPacket+0x198>
    1962:	4f ef       	ldi	r20, 0xFF	; 255
    1964:	e5 e3       	ldi	r30, 0x35	; 53
    1966:	f1 e0       	ldi	r31, 0x01	; 1
    1968:	41 93       	st	Z+, r20
    196a:	2f 5f       	subi	r18, 0xFF	; 255
    196c:	3f 4f       	sbci	r19, 0xFF	; 255
    196e:	28 17       	cp	r18, r24
    1970:	39 07       	cpc	r19, r25
    1972:	d0 f3       	brcs	.-12     	; 0x1968 <PD_InterpretAVRISPPacket+0x18c>
    1974:	10 92 35 01 	sts	0x0135, r1
    1978:	e0 91 30 01 	lds	r30, 0x0130
    197c:	f0 91 31 01 	lds	r31, 0x0131
    1980:	ed 5c       	subi	r30, 0xCD	; 205
    1982:	fe 4f       	sbci	r31, 0xFE	; 254
    1984:	10 82       	st	Z, r1
    1986:	93 c0       	rjmp	.+294    	; 0x1aae <PD_InterpretAVRISPPacket+0x2d2>
    1988:	0e 94 91 0b 	call	0x1722 <PD_SetupDFAddressCounters>
    198c:	80 91 8b 02 	lds	r24, 0x028B
    1990:	90 91 8c 02 	lds	r25, 0x028C
    1994:	0e 94 8c 0a 	call	0x1518 <DF_CopyFlashPageToBuffer>
    1998:	80 91 84 02 	lds	r24, 0x0284
    199c:	90 91 85 02 	lds	r25, 0x0285
    19a0:	0e 94 ff 09 	call	0x13fe <DF_BufferWriteEnable>
    19a4:	80 91 35 01 	lds	r24, 0x0135
    19a8:	99 27       	eor	r25, r25
    19aa:	d8 2f       	mov	r29, r24
    19ac:	cc 27       	eor	r28, r28
    19ae:	80 91 36 01 	lds	r24, 0x0136
    19b2:	99 27       	eor	r25, r25
    19b4:	c8 2b       	or	r28, r24
    19b6:	d9 2b       	or	r29, r25
    19b8:	00 e0       	ldi	r16, 0x00	; 0
    19ba:	10 e0       	ldi	r17, 0x00	; 0
    19bc:	0c 17       	cp	r16, r28
    19be:	1d 07       	cpc	r17, r29
    19c0:	c8 f4       	brcc	.+50     	; 0x19f4 <PD_InterpretAVRISPPacket+0x218>
    19c2:	5e e3       	ldi	r21, 0x3E	; 62
    19c4:	e5 2e       	mov	r14, r21
    19c6:	51 e0       	ldi	r21, 0x01	; 1
    19c8:	f5 2e       	mov	r15, r21
    19ca:	f7 01       	movw	r30, r14
    19cc:	81 91       	ld	r24, Z+
    19ce:	7f 01       	movw	r14, r30
    19d0:	0e 94 be 0b 	call	0x177c <PD_StoreDataflashByte>
    19d4:	80 91 84 02 	lds	r24, 0x0284
    19d8:	90 91 85 02 	lds	r25, 0x0285
    19dc:	01 96       	adiw	r24, 0x01	; 1
    19de:	90 93 85 02 	sts	0x0285, r25
    19e2:	80 93 84 02 	sts	0x0284, r24
    19e6:	0e 94 79 0e 	call	0x1cf2 <V2P_IncrementCurrAddress>
    19ea:	0f 5f       	subi	r16, 0xFF	; 255
    19ec:	1f 4f       	sbci	r17, 0xFF	; 255
    19ee:	0c 17       	cp	r16, r28
    19f0:	1d 07       	cpc	r17, r29
    19f2:	58 f3       	brcs	.-42     	; 0x19ca <PD_InterpretAVRISPPacket+0x1ee>
    19f4:	10 92 35 01 	sts	0x0135, r1
    19f8:	5a c0       	rjmp	.+180    	; 0x1aae <PD_InterpretAVRISPPacket+0x2d2>
    19fa:	0e 94 91 0b 	call	0x1722 <PD_SetupDFAddressCounters>
    19fe:	80 91 8b 02 	lds	r24, 0x028B
    1a02:	90 91 8c 02 	lds	r25, 0x028C
    1a06:	0e 94 8c 0a 	call	0x1518 <DF_CopyFlashPageToBuffer>
    1a0a:	80 91 35 01 	lds	r24, 0x0135
    1a0e:	99 27       	eor	r25, r25
    1a10:	d8 2f       	mov	r29, r24
    1a12:	cc 27       	eor	r28, r28
    1a14:	80 91 36 01 	lds	r24, 0x0136
    1a18:	99 27       	eor	r25, r25
    1a1a:	c8 2b       	or	r28, r24
    1a1c:	d9 2b       	or	r29, r25
    1a1e:	00 e0       	ldi	r16, 0x00	; 0
    1a20:	10 e0       	ldi	r17, 0x00	; 0
    1a22:	0c 17       	cp	r16, r28
    1a24:	1d 07       	cpc	r17, r29
    1a26:	70 f5       	brcc	.+92     	; 0x1a84 <PD_InterpretAVRISPPacket+0x2a8>
    1a28:	36 e3       	ldi	r19, 0x36	; 54
    1a2a:	e3 2e       	mov	r14, r19
    1a2c:	31 e0       	ldi	r19, 0x01	; 1
    1a2e:	f3 2e       	mov	r15, r19
    1a30:	20 91 84 02 	lds	r18, 0x0284
    1a34:	30 91 85 02 	lds	r19, 0x0285
    1a38:	80 91 87 02 	lds	r24, 0x0287
    1a3c:	90 91 88 02 	lds	r25, 0x0288
    1a40:	28 17       	cp	r18, r24
    1a42:	39 07       	cpc	r19, r25
    1a44:	41 f4       	brne	.+16     	; 0x1a56 <PD_InterpretAVRISPPacket+0x27a>
    1a46:	0e 94 91 0b 	call	0x1722 <PD_SetupDFAddressCounters>
    1a4a:	80 91 8b 02 	lds	r24, 0x028B
    1a4e:	90 91 8c 02 	lds	r25, 0x028C
    1a52:	0e 94 8c 0a 	call	0x1518 <DF_CopyFlashPageToBuffer>
    1a56:	80 91 84 02 	lds	r24, 0x0284
    1a5a:	90 91 85 02 	lds	r25, 0x0285
    1a5e:	9c 01       	movw	r18, r24
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	90 93 85 02 	sts	0x0285, r25
    1a66:	80 93 84 02 	sts	0x0284, r24
    1a6a:	c9 01       	movw	r24, r18
    1a6c:	0e 94 91 09 	call	0x1322 <DF_ReadBufferByte>
    1a70:	f7 01       	movw	r30, r14
    1a72:	81 93       	st	Z+, r24
    1a74:	7f 01       	movw	r14, r30
    1a76:	0e 94 79 0e 	call	0x1cf2 <V2P_IncrementCurrAddress>
    1a7a:	0f 5f       	subi	r16, 0xFF	; 255
    1a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7e:	0c 17       	cp	r16, r28
    1a80:	1d 07       	cpc	r17, r29
    1a82:	b0 f2       	brcs	.-84     	; 0x1a30 <PD_InterpretAVRISPPacket+0x254>
    1a84:	23 96       	adiw	r28, 0x03	; 3
    1a86:	d0 93 31 01 	sts	0x0131, r29
    1a8a:	c0 93 30 01 	sts	0x0130, r28
    1a8e:	23 97       	sbiw	r28, 0x03	; 3
    1a90:	10 92 35 01 	sts	0x0135, r1
    1a94:	cc 5c       	subi	r28, 0xCC	; 204
    1a96:	de 4f       	sbci	r29, 0xFE	; 254
    1a98:	1a 82       	std	Y+2, r1	; 0x02
    1a9a:	09 c0       	rjmp	.+18     	; 0x1aae <PD_InterpretAVRISPPacket+0x2d2>
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	90 93 31 01 	sts	0x0131, r25
    1aa4:	80 93 30 01 	sts	0x0130, r24
    1aa8:	89 ec       	ldi	r24, 0xC9	; 201
    1aaa:	80 93 35 01 	sts	0x0135, r24
    1aae:	0e 94 9f 0d 	call	0x1b3e <V2P_SendPacket>
    1ab2:	dd 20       	and	r13, r13
    1ab4:	d9 f0       	breq	.+54     	; 0x1aec <PD_InterpretAVRISPPacket+0x310>
    1ab6:	85 e1       	ldi	r24, 0x15	; 21
    1ab8:	92 e0       	ldi	r25, 0x02	; 2
    1aba:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>
    1abe:	c0 e0       	ldi	r28, 0x00	; 0
    1ac0:	d0 e0       	ldi	r29, 0x00	; 0
    1ac2:	80 91 89 02 	lds	r24, 0x0289
    1ac6:	90 91 8a 02 	lds	r25, 0x028A
    1aca:	23 e0       	ldi	r18, 0x03	; 3
    1acc:	96 95       	lsr	r25
    1ace:	87 95       	ror	r24
    1ad0:	2a 95       	dec	r18
    1ad2:	e1 f7       	brne	.-8      	; 0x1acc <PD_InterpretAVRISPPacket+0x2f0>
    1ad4:	c8 17       	cp	r28, r24
    1ad6:	d9 07       	cpc	r29, r25
    1ad8:	28 f4       	brcc	.+10     	; 0x1ae4 <PD_InterpretAVRISPPacket+0x308>
    1ada:	ce 01       	movw	r24, r28
    1adc:	0e 94 63 0a 	call	0x14c6 <DF_EraseBlock>
    1ae0:	21 96       	adiw	r28, 0x01	; 1
    1ae2:	ef cf       	rjmp	.-34     	; 0x1ac2 <PD_InterpretAVRISPPacket+0x2e6>
    1ae4:	8f e9       	ldi	r24, 0x9F	; 159
    1ae6:	93 e0       	ldi	r25, 0x03	; 3
    1ae8:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	08 95       	ret

00001afc <V2P_GetChecksum>:
	
	/* Checksum for the V2 protocol is comprised of an XOR of all the packet 
      bytes, including the start, sequence number, size and token bytes.    */
	
	CheckSumByte  = MESSAGE_START;
    1afc:	6b e1       	ldi	r22, 0x1B	; 27
	CheckSumByte ^= SequenceNum;
    1afe:	80 91 32 01 	lds	r24, 0x0132
    1b02:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize >> 8);
    1b04:	20 91 30 01 	lds	r18, 0x0130
    1b08:	30 91 31 01 	lds	r19, 0x0131
    1b0c:	83 2f       	mov	r24, r19
    1b0e:	99 27       	eor	r25, r25
    1b10:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize);
    1b12:	80 91 30 01 	lds	r24, 0x0130
    1b16:	68 27       	eor	r22, r24
	CheckSumByte ^= TOKEN;
    1b18:	8e e0       	ldi	r24, 0x0E	; 14
    1b1a:	68 27       	eor	r22, r24
	
	for (uint16_t CByteIndex = 0; CByteIndex < MessageSize; CByteIndex++)
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	42 17       	cp	r20, r18
    1b22:	53 07       	cpc	r21, r19
    1b24:	48 f4       	brcc	.+18     	; 0x1b38 <V2P_GetChecksum+0x3c>
    1b26:	e4 e3       	ldi	r30, 0x34	; 52
    1b28:	f1 e0       	ldi	r31, 0x01	; 1
	   CheckSumByte ^= PacketBytes[CByteIndex];
    1b2a:	81 91       	ld	r24, Z+
    1b2c:	68 27       	eor	r22, r24
    1b2e:	4f 5f       	subi	r20, 0xFF	; 255
    1b30:	5f 4f       	sbci	r21, 0xFF	; 255
    1b32:	42 17       	cp	r20, r18
    1b34:	53 07       	cpc	r21, r19
    1b36:	c8 f3       	brcs	.-14     	; 0x1b2a <V2P_GetChecksum+0x2e>

	return CheckSumByte;
}
    1b38:	86 2f       	mov	r24, r22
    1b3a:	99 27       	eor	r25, r25
    1b3c:	08 95       	ret

00001b3e <V2P_SendPacket>:
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	8b e1       	ldi	r24, 0x1B	; 27
    1b48:	0e 94 92 08 	call	0x1124 <USART_Tx>
    1b4c:	80 91 32 01 	lds	r24, 0x0132
    1b50:	0e 94 92 08 	call	0x1124 <USART_Tx>
    1b54:	80 91 31 01 	lds	r24, 0x0131
    1b58:	0e 94 92 08 	call	0x1124 <USART_Tx>
    1b5c:	80 91 30 01 	lds	r24, 0x0130
    1b60:	0e 94 92 08 	call	0x1124 <USART_Tx>
    1b64:	8e e0       	ldi	r24, 0x0E	; 14
    1b66:	0e 94 92 08 	call	0x1124 <USART_Tx>
    1b6a:	c0 e0       	ldi	r28, 0x00	; 0
    1b6c:	d0 e0       	ldi	r29, 0x00	; 0
    1b6e:	80 91 30 01 	lds	r24, 0x0130
    1b72:	90 91 31 01 	lds	r25, 0x0131
    1b76:	c8 17       	cp	r28, r24
    1b78:	d9 07       	cpc	r29, r25
    1b7a:	78 f4       	brcc	.+30     	; 0x1b9a <V2P_SendPacket+0x5c>
    1b7c:	04 e3       	ldi	r16, 0x34	; 52
    1b7e:	11 e0       	ldi	r17, 0x01	; 1
    1b80:	f8 01       	movw	r30, r16
    1b82:	81 91       	ld	r24, Z+
    1b84:	8f 01       	movw	r16, r30
    1b86:	0e 94 92 08 	call	0x1124 <USART_Tx>
    1b8a:	21 96       	adiw	r28, 0x01	; 1
    1b8c:	80 91 30 01 	lds	r24, 0x0130
    1b90:	90 91 31 01 	lds	r25, 0x0131
    1b94:	c8 17       	cp	r28, r24
    1b96:	d9 07       	cpc	r29, r25
    1b98:	98 f3       	brcs	.-26     	; 0x1b80 <V2P_SendPacket+0x42>
    1b9a:	0e 94 7e 0d 	call	0x1afc <V2P_GetChecksum>
    1b9e:	0e 94 92 08 	call	0x1124 <USART_Tx>
    1ba2:	80 91 32 01 	lds	r24, 0x0132
    1ba6:	90 91 33 01 	lds	r25, 0x0133
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	90 93 33 01 	sts	0x0133, r25
    1bb0:	80 93 32 01 	sts	0x0132, r24
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	1f 91       	pop	r17
    1bba:	0f 91       	pop	r16
    1bbc:	08 95       	ret

00001bbe <V2P_GetSetParamater>:

void V2P_GetSetParamater(void)
{
	uint8_t Param_Name = PacketBytes[1];    // Save the parameter number
    1bbe:	20 91 35 01 	lds	r18, 0x0135

	MessageSize = 3;                        // Set the default response message size to 3 bytes     
    1bc2:	83 e0       	ldi	r24, 0x03	; 3
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	90 93 31 01 	sts	0x0131, r25
    1bca:	80 93 30 01 	sts	0x0130, r24
	PacketBytes[1] = STATUS_CMD_OK;         // Set the default response to OK
    1bce:	10 92 35 01 	sts	0x0135, r1

	switch (Param_Name)                    // Switch based on the recieved parameter byte
    1bd2:	e2 2f       	mov	r30, r18
    1bd4:	ff 27       	eor	r31, r31
    1bd6:	e8 39       	cpi	r30, 0x98	; 152
    1bd8:	f1 05       	cpc	r31, r1
    1bda:	ac f4       	brge	.+42     	; 0x1c06 <V2P_GetSetParamater+0x48>
    1bdc:	e6 39       	cpi	r30, 0x96	; 150
    1bde:	f1 05       	cpc	r31, r1
    1be0:	0c f0       	brlt	.+2      	; 0x1be4 <V2P_GetSetParamater+0x26>
    1be2:	6d c0       	rjmp	.+218    	; 0x1cbe <V2P_GetSetParamater+0x100>
    1be4:	e1 38       	cpi	r30, 0x81	; 129
    1be6:	f1 05       	cpc	r31, r1
    1be8:	f9 f0       	breq	.+62     	; 0x1c28 <V2P_GetSetParamater+0x6a>
    1bea:	e2 38       	cpi	r30, 0x82	; 130
    1bec:	f1 05       	cpc	r31, r1
    1bee:	24 f4       	brge	.+8      	; 0x1bf8 <V2P_GetSetParamater+0x3a>
    1bf0:	e0 38       	cpi	r30, 0x80	; 128
    1bf2:	f1 05       	cpc	r31, r1
    1bf4:	b9 f0       	breq	.+46     	; 0x1c24 <V2P_GetSetParamater+0x66>
    1bf6:	71 c0       	rjmp	.+226    	; 0x1cda <V2P_GetSetParamater+0x11c>
    1bf8:	cf 01       	movw	r24, r30
    1bfa:	80 59       	subi	r24, 0x90	; 144
    1bfc:	90 40       	sbci	r25, 0x00	; 0
    1bfe:	03 97       	sbiw	r24, 0x03	; 3
    1c00:	08 f0       	brcs	.+2      	; 0x1c04 <V2P_GetSetParamater+0x46>
    1c02:	6b c0       	rjmp	.+214    	; 0x1cda <V2P_GetSetParamater+0x11c>
    1c04:	13 c0       	rjmp	.+38     	; 0x1c2c <V2P_GetSetParamater+0x6e>
    1c06:	ee 39       	cpi	r30, 0x9E	; 158
    1c08:	f1 05       	cpc	r31, r1
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <V2P_GetSetParamater+0x50>
    1c0c:	3d c0       	rjmp	.+122    	; 0x1c88 <V2P_GetSetParamater+0xca>
    1c0e:	ef 39       	cpi	r30, 0x9F	; 159
    1c10:	f1 05       	cpc	r31, r1
    1c12:	24 f4       	brge	.+8      	; 0x1c1c <V2P_GetSetParamater+0x5e>
    1c14:	e8 39       	cpi	r30, 0x98	; 152
    1c16:	f1 05       	cpc	r31, r1
    1c18:	f9 f0       	breq	.+62     	; 0x1c58 <V2P_GetSetParamater+0x9a>
    1c1a:	5f c0       	rjmp	.+190    	; 0x1cda <V2P_GetSetParamater+0x11c>
    1c1c:	ef 39       	cpi	r30, 0x9F	; 159
    1c1e:	f1 05       	cpc	r31, r1
    1c20:	49 f0       	breq	.+18     	; 0x1c34 <V2P_GetSetParamater+0x76>
    1c22:	5b c0       	rjmp	.+182    	; 0x1cda <V2P_GetSetParamater+0x11c>
	{
		case PARAM_BUILD_NUMBER_LOW:
			PacketBytes[2] = VERSION_MINOR;
    1c24:	83 e0       	ldi	r24, 0x03	; 3
    1c26:	38 c0       	rjmp	.+112    	; 0x1c98 <V2P_GetSetParamater+0xda>

			break;
		case PARAM_BUILD_NUMBER_HIGH:
			PacketBytes[2] = VERSION_MAJOR;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	36 c0       	rjmp	.+108    	; 0x1c98 <V2P_GetSetParamater+0xda>

			break;
		case PARAM_HARDWARE_VERSION:
		case PARAM_SW_MAJOR:
		case PARAM_SW_MINOR:
			PacketBytes[2] = pgm_read_byte(&VersionData[Param_Name - PARAM_HARDWARE_VERSION]);
    1c2c:	e5 5d       	subi	r30, 0xD5	; 213
    1c2e:	fc 4f       	sbci	r31, 0xFC	; 252
    1c30:	84 91       	lpm	r24, Z
    1c32:	32 c0       	rjmp	.+100    	; 0x1c98 <V2P_GetSetParamater+0xda>

			break;
		case PARAM_CONTROLLER_INIT:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1c34:	80 91 34 01 	lds	r24, 0x0134
    1c38:	83 30       	cpi	r24, 0x03	; 3
    1c3a:	19 f4       	brne	.+6      	; 0x1c42 <V2P_GetSetParamater+0x84>
			{
				PacketBytes[2] = Param_ControllerInit;
    1c3c:	80 91 2a 01 	lds	r24, 0x012A
    1c40:	2b c0       	rjmp	.+86     	; 0x1c98 <V2P_GetSetParamater+0xda>
			}
			else
			{
				MessageSize = 2;
    1c42:	82 e0       	ldi	r24, 0x02	; 2
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	90 93 31 01 	sts	0x0131, r25
    1c4a:	80 93 30 01 	sts	0x0130, r24
				Param_ControllerInit = PacketBytes[2];
    1c4e:	80 91 36 01 	lds	r24, 0x0136
    1c52:	80 93 2a 01 	sts	0x012A, r24
			}
			
			break;
    1c56:	4a c0       	rjmp	.+148    	; 0x1cec <V2P_GetSetParamater+0x12e>
		case PARAM_SCK_DURATION:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1c58:	80 91 34 01 	lds	r24, 0x0134
    1c5c:	83 30       	cpi	r24, 0x03	; 3
    1c5e:	19 f4       	brne	.+6      	; 0x1c66 <V2P_GetSetParamater+0xa8>
			{
				PacketBytes[2] = eeprom_read_byte_169(&Param_SCKDuration);
    1c60:	80 e2       	ldi	r24, 0x20	; 32
    1c62:	91 e0       	ldi	r25, 0x01	; 1
    1c64:	17 c0       	rjmp	.+46     	; 0x1c94 <V2P_GetSetParamater+0xd6>
			}
			else
			{
				MessageSize = 2;
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	90 93 31 01 	sts	0x0131, r25
    1c6e:	80 93 30 01 	sts	0x0130, r24
				eeprom_write_byte_169(&Param_SCKDuration, PacketBytes[2]);
    1c72:	60 91 36 01 	lds	r22, 0x0136
    1c76:	80 e2       	ldi	r24, 0x20	; 32
    1c78:	91 e0       	ldi	r25, 0x01	; 1
    1c7a:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
				USI_SPISetSpeed(PacketBytes[2]); // Re-Initialise the USI system with the new frequency
    1c7e:	80 91 36 01 	lds	r24, 0x0136
    1c82:	0e 94 15 09 	call	0x122a <USI_SPISetSpeed>
			}
					
			break;
    1c86:	32 c0       	rjmp	.+100    	; 0x1cec <V2P_GetSetParamater+0x12e>
		case PARAM_RESET_POLARITY:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1c88:	80 91 34 01 	lds	r24, 0x0134
    1c8c:	83 30       	cpi	r24, 0x03	; 3
    1c8e:	39 f4       	brne	.+14     	; 0x1c9e <V2P_GetSetParamater+0xe0>
			{
				PacketBytes[2] = eeprom_read_byte_169(&Param_ResetPolarity);		
    1c90:	82 e2       	ldi	r24, 0x22	; 34
    1c92:	91 e0       	ldi	r25, 0x01	; 1
    1c94:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    1c98:	80 93 36 01 	sts	0x0136, r24
    1c9c:	27 c0       	rjmp	.+78     	; 0x1cec <V2P_GetSetParamater+0x12e>
			}
			else
			{
				MessageSize = 2;
    1c9e:	82 e0       	ldi	r24, 0x02	; 2
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	90 93 31 01 	sts	0x0131, r25
    1ca6:	80 93 30 01 	sts	0x0130, r24
				eeprom_write_byte_169(&Param_ResetPolarity, PacketBytes[2]);
    1caa:	60 91 36 01 	lds	r22, 0x0136
    1cae:	82 e2       	ldi	r24, 0x22	; 34
    1cb0:	91 e0       	ldi	r25, 0x01	; 1
    1cb2:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Change takes effect immediatly
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	0e 94 0e 03 	call	0x61c <MAIN_ResetCSLine>
			}
			
			break;
    1cbc:	17 c0       	rjmp	.+46     	; 0x1cec <V2P_GetSetParamater+0x12e>
		case PARAM_OSC_PSCALE:
		case PARAM_OSC_CMATCH:
			/* Despite not supporting these parameters (STK500 only), the AVR Studio programmer
			   sends them along with the SCK duration. A OK must be returned or the sequence will fail
			   and the SCK duration byte will not be sent.                                             */
		
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1cbe:	80 91 34 01 	lds	r24, 0x0134
    1cc2:	83 30       	cpi	r24, 0x03	; 3
    1cc4:	19 f4       	brne	.+6      	; 0x1ccc <V2P_GetSetParamater+0x10e>
			{
			   PacketBytes[2] = 0;            // If the command is a read, return a 0 for both parameters
    1cc6:	10 92 36 01 	sts	0x0136, r1
    1cca:	10 c0       	rjmp	.+32     	; 0x1cec <V2P_GetSetParamater+0x12e>
			}
			else
			{
				MessageSize = 2;              // Otherwise just send back an OK if the command is a set		
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	90 93 31 01 	sts	0x0131, r25
    1cd4:	80 93 30 01 	sts	0x0130, r24
			}
			
			break;
    1cd8:	09 c0       	rjmp	.+18     	; 0x1cec <V2P_GetSetParamater+0x12e>
		default:                             // Unrecognised parameter
			MessageSize = 2;
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	90 93 31 01 	sts	0x0131, r25
    1ce2:	80 93 30 01 	sts	0x0130, r24
			PacketBytes[1] = STATUS_CMD_FAILED;			
    1ce6:	80 ec       	ldi	r24, 0xC0	; 192
    1ce8:	80 93 35 01 	sts	0x0135, r24
	}
	
	V2P_SendPacket();
    1cec:	0e 94 9f 0d 	call	0x1b3e <V2P_SendPacket>
    1cf0:	08 95       	ret

00001cf2 <V2P_IncrementCurrAddress>:
}

void V2P_IncrementCurrAddress(void)
{
	// Incrementing a 32-bit unsigned variable takes a lot of code. Because much of the code is
	// not very time critical (much of it is waiting for the hardware), i've chosen to waste
	// a few extra cycles per increment and save a good 60 bytes or so of code space by putting
	// the incrmement inside a function.

	CurrAddress++;
    1cf2:	80 91 2b 01 	lds	r24, 0x012B
    1cf6:	90 91 2c 01 	lds	r25, 0x012C
    1cfa:	a0 91 2d 01 	lds	r26, 0x012D
    1cfe:	b0 91 2e 01 	lds	r27, 0x012E
    1d02:	01 96       	adiw	r24, 0x01	; 1
    1d04:	a1 1d       	adc	r26, r1
    1d06:	b1 1d       	adc	r27, r1
    1d08:	80 93 2b 01 	sts	0x012B, r24
    1d0c:	90 93 2c 01 	sts	0x012C, r25
    1d10:	a0 93 2d 01 	sts	0x012D, r26
    1d14:	b0 93 2e 01 	sts	0x012E, r27
    1d18:	08 95       	ret

00001d1a <V2P_CheckForExtendedAddress>:
}

void V2P_CheckForExtendedAddress(void)
{
	if (CurrAddress & (1UL << 31))                     // MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
    1d1a:	80 91 2b 01 	lds	r24, 0x012B
    1d1e:	90 91 2c 01 	lds	r25, 0x012C
    1d22:	a0 91 2d 01 	lds	r26, 0x012D
    1d26:	b0 91 2e 01 	lds	r27, 0x012E
    1d2a:	b7 ff       	sbrs	r27, 7
    1d2c:	1e c0       	rjmp	.+60     	; 0x1d6a <V2P_CheckForExtendedAddress+0x50>
	{
		USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);   // Load extended address command
    1d2e:	8d e4       	ldi	r24, 0x4D	; 77
    1d30:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
		USI_SPITransmit((CurrAddress & 0x00FF0000) >> 16); // The 3rd byte of the long holds the extended address
    1d3a:	80 91 2d 01 	lds	r24, 0x012D
    1d3e:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
		
		CurrAddress &= ~(1UL << 31);                   // Clear the flag
    1d48:	80 91 2b 01 	lds	r24, 0x012B
    1d4c:	90 91 2c 01 	lds	r25, 0x012C
    1d50:	a0 91 2d 01 	lds	r26, 0x012D
    1d54:	b0 91 2e 01 	lds	r27, 0x012E
    1d58:	bf 77       	andi	r27, 0x7F	; 127
    1d5a:	80 93 2b 01 	sts	0x012B, r24
    1d5e:	90 93 2c 01 	sts	0x012C, r25
    1d62:	a0 93 2d 01 	sts	0x012D, r26
    1d66:	b0 93 2e 01 	sts	0x012E, r27
    1d6a:	08 95       	ret

00001d6c <V2P_RunStateMachine>:
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	c0 e0       	ldi	r28, 0x00	; 0
    1d78:	ee 24       	eor	r14, r14
    1d7a:	ff 24       	eor	r15, r15
    1d7c:	80 91 c1 00 	lds	r24, 0x00C1
    1d80:	80 78       	andi	r24, 0x80	; 128
    1d82:	88 61       	ori	r24, 0x18	; 24
    1d84:	80 93 c1 00 	sts	0x00C1, r24
    1d88:	85 e1       	ldi	r24, 0x15	; 21
    1d8a:	92 e0       	ldi	r25, 0x02	; 2
    1d8c:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>
    1d90:	0e 94 cd 06 	call	0xd9a <OSCCAL_Calibrate>
    1d94:	0e 94 0e 0b 	call	0x161c <BUFF_InitialiseBuffer>
    1d98:	0e 94 81 0b 	call	0x1702 <TIMEOUT_SetupTimeoutTimer>
    1d9c:	c0 93 2f 01 	sts	0x012F, r28
    1da0:	10 92 2b 01 	sts	0x012B, r1
    1da4:	10 92 2c 01 	sts	0x012C, r1
    1da8:	10 92 2d 01 	sts	0x012D, r1
    1dac:	10 92 2e 01 	sts	0x012E, r1
    1db0:	80 91 28 01 	lds	r24, 0x0128
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	11 f4       	brne	.+4      	; 0x1dbc <V2P_RunStateMachine+0x50>
    1db8:	c9 e0       	ldi	r28, 0x09	; 9
    1dba:	05 c0       	rjmp	.+10     	; 0x1dc6 <V2P_RunStateMachine+0x5a>
    1dbc:	cc 23       	and	r28, r28
    1dbe:	19 f0       	breq	.+6      	; 0x1dc6 <V2P_RunStateMachine+0x5a>
    1dc0:	83 e0       	ldi	r24, 0x03	; 3
    1dc2:	80 93 81 00 	sts	0x0081, r24
    1dc6:	8c 2f       	mov	r24, r28
    1dc8:	99 27       	eor	r25, r25
    1dca:	84 30       	cpi	r24, 0x04	; 4
    1dcc:	91 05       	cpc	r25, r1
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <V2P_RunStateMachine+0x66>
    1dd0:	73 c0       	rjmp	.+230    	; 0x1eb8 <V2P_RunStateMachine+0x14c>
    1dd2:	85 30       	cpi	r24, 0x05	; 5
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	94 f4       	brge	.+36     	; 0x1dfc <V2P_RunStateMachine+0x90>
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	91 05       	cpc	r25, r1
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <V2P_RunStateMachine+0x74>
    1dde:	52 c0       	rjmp	.+164    	; 0x1e84 <V2P_RunStateMachine+0x118>
    1de0:	82 30       	cpi	r24, 0x02	; 2
    1de2:	91 05       	cpc	r25, r1
    1de4:	1c f4       	brge	.+6      	; 0x1dec <V2P_RunStateMachine+0x80>
    1de6:	89 2b       	or	r24, r25
    1de8:	b1 f1       	breq	.+108    	; 0x1e56 <V2P_RunStateMachine+0xea>
    1dea:	e2 cf       	rjmp	.-60     	; 0x1db0 <V2P_RunStateMachine+0x44>
    1dec:	82 30       	cpi	r24, 0x02	; 2
    1dee:	91 05       	cpc	r25, r1
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <V2P_RunStateMachine+0x88>
    1df2:	4e c0       	rjmp	.+156    	; 0x1e90 <V2P_RunStateMachine+0x124>
    1df4:	03 97       	sbiw	r24, 0x03	; 3
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <V2P_RunStateMachine+0x8e>
    1df8:	54 c0       	rjmp	.+168    	; 0x1ea2 <V2P_RunStateMachine+0x136>
    1dfa:	da cf       	rjmp	.-76     	; 0x1db0 <V2P_RunStateMachine+0x44>
    1dfc:	87 30       	cpi	r24, 0x07	; 7
    1dfe:	91 05       	cpc	r25, r1
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <V2P_RunStateMachine+0x98>
    1e02:	8b c0       	rjmp	.+278    	; 0x1f1a <V2P_RunStateMachine+0x1ae>
    1e04:	88 30       	cpi	r24, 0x08	; 8
    1e06:	91 05       	cpc	r25, r1
    1e08:	44 f4       	brge	.+16     	; 0x1e1a <V2P_RunStateMachine+0xae>
    1e0a:	85 30       	cpi	r24, 0x05	; 5
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <V2P_RunStateMachine+0xa6>
    1e10:	68 c0       	rjmp	.+208    	; 0x1ee2 <V2P_RunStateMachine+0x176>
    1e12:	06 97       	sbiw	r24, 0x06	; 6
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <V2P_RunStateMachine+0xac>
    1e16:	6d c0       	rjmp	.+218    	; 0x1ef2 <V2P_RunStateMachine+0x186>
    1e18:	cb cf       	rjmp	.-106    	; 0x1db0 <V2P_RunStateMachine+0x44>
    1e1a:	88 30       	cpi	r24, 0x08	; 8
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	79 f0       	breq	.+30     	; 0x1e3e <V2P_RunStateMachine+0xd2>
    1e20:	09 97       	sbiw	r24, 0x09	; 9
    1e22:	31 f6       	brne	.-116    	; 0x1db0 <V2P_RunStateMachine+0x44>
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	90 93 31 01 	sts	0x0131, r25
    1e2c:	80 93 30 01 	sts	0x0130, r24
    1e30:	80 ec       	ldi	r24, 0xC0	; 192
    1e32:	80 93 35 01 	sts	0x0135, r24
    1e36:	10 92 28 01 	sts	0x0128, r1
    1e3a:	0e 94 9f 0d 	call	0x1b3e <V2P_SendPacket>
    1e3e:	0e 94 0e 0b 	call	0x161c <BUFF_InitialiseBuffer>
    1e42:	10 92 81 00 	sts	0x0081, r1
    1e46:	10 92 29 01 	sts	0x0129, r1
    1e4a:	10 92 85 00 	sts	0x0085, r1
    1e4e:	10 92 84 00 	sts	0x0084, r1
    1e52:	c0 e0       	ldi	r28, 0x00	; 0
    1e54:	ad cf       	rjmp	.-166    	; 0x1db0 <V2P_RunStateMachine+0x44>
    1e56:	80 91 d1 02 	lds	r24, 0x02D1
    1e5a:	81 11       	cpse	r24, r1
    1e5c:	c1 e0       	ldi	r28, 0x01	; 1
    1e5e:	f2 9b       	sbis	0x1e, 2	; 30
    1e60:	a7 cf       	rjmp	.-178    	; 0x1db0 <V2P_RunStateMachine+0x44>
    1e62:	80 91 2f 01 	lds	r24, 0x012F
    1e66:	88 23       	and	r24, r24
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <V2P_RunStateMachine+0x100>
    1e6a:	a2 cf       	rjmp	.-188    	; 0x1db0 <V2P_RunStateMachine+0x44>
    1e6c:	80 91 c1 00 	lds	r24, 0x00C1
    1e70:	80 78       	andi	r24, 0x80	; 128
    1e72:	80 93 c1 00 	sts	0x00C1, r24
    1e76:	80 e8       	ldi	r24, 0x80	; 128
    1e78:	80 93 61 00 	sts	0x0061, r24
    1e7c:	83 e0       	ldi	r24, 0x03	; 3
    1e7e:	80 93 61 00 	sts	0x0061, r24
    1e82:	d4 c0       	rjmp	.+424    	; 0x202c <V2P_RunStateMachine+0x2c0>
    1e84:	0e 94 a9 08 	call	0x1152 <USART_Rx>
    1e88:	8b 31       	cpi	r24, 0x1B	; 27
    1e8a:	89 f5       	brne	.+98     	; 0x1eee <V2P_RunStateMachine+0x182>
    1e8c:	c2 e0       	ldi	r28, 0x02	; 2
    1e8e:	90 cf       	rjmp	.-224    	; 0x1db0 <V2P_RunStateMachine+0x44>
    1e90:	0e 94 a9 08 	call	0x1152 <USART_Rx>
    1e94:	99 27       	eor	r25, r25
    1e96:	90 93 33 01 	sts	0x0133, r25
    1e9a:	80 93 32 01 	sts	0x0132, r24
    1e9e:	c3 e0       	ldi	r28, 0x03	; 3
    1ea0:	87 cf       	rjmp	.-242    	; 0x1db0 <V2P_RunStateMachine+0x44>
    1ea2:	0e 94 a9 08 	call	0x1152 <USART_Rx>
    1ea6:	99 27       	eor	r25, r25
    1ea8:	98 2f       	mov	r25, r24
    1eaa:	88 27       	eor	r24, r24
    1eac:	90 93 31 01 	sts	0x0131, r25
    1eb0:	80 93 30 01 	sts	0x0130, r24
    1eb4:	c4 e0       	ldi	r28, 0x04	; 4
    1eb6:	7c cf       	rjmp	.-264    	; 0x1db0 <V2P_RunStateMachine+0x44>
    1eb8:	0e 94 a9 08 	call	0x1152 <USART_Rx>
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	33 27       	eor	r19, r19
    1ec0:	80 91 30 01 	lds	r24, 0x0130
    1ec4:	90 91 31 01 	lds	r25, 0x0131
    1ec8:	82 2b       	or	r24, r18
    1eca:	93 2b       	or	r25, r19
    1ecc:	90 93 31 01 	sts	0x0131, r25
    1ed0:	80 93 30 01 	sts	0x0130, r24
    1ed4:	83 51       	subi	r24, 0x13	; 19
    1ed6:	91 40       	sbci	r25, 0x01	; 1
    1ed8:	50 f4       	brcc	.+20     	; 0x1eee <V2P_RunStateMachine+0x182>
    1eda:	c5 e0       	ldi	r28, 0x05	; 5
    1edc:	ee 24       	eor	r14, r14
    1ede:	ff 24       	eor	r15, r15
    1ee0:	67 cf       	rjmp	.-306    	; 0x1db0 <V2P_RunStateMachine+0x44>
    1ee2:	0e 94 a9 08 	call	0x1152 <USART_Rx>
    1ee6:	8e 30       	cpi	r24, 0x0E	; 14
    1ee8:	11 f4       	brne	.+4      	; 0x1eee <V2P_RunStateMachine+0x182>
    1eea:	c6 e0       	ldi	r28, 0x06	; 6
    1eec:	61 cf       	rjmp	.-318    	; 0x1db0 <V2P_RunStateMachine+0x44>
    1eee:	c9 e0       	ldi	r28, 0x09	; 9
    1ef0:	5f cf       	rjmp	.-322    	; 0x1db0 <V2P_RunStateMachine+0x44>
    1ef2:	80 91 30 01 	lds	r24, 0x0130
    1ef6:	90 91 31 01 	lds	r25, 0x0131
    1efa:	e8 16       	cp	r14, r24
    1efc:	f9 06       	cpc	r15, r25
    1efe:	11 f4       	brne	.+4      	; 0x1f04 <V2P_RunStateMachine+0x198>
    1f00:	c7 e0       	ldi	r28, 0x07	; 7
    1f02:	56 cf       	rjmp	.-340    	; 0x1db0 <V2P_RunStateMachine+0x44>
    1f04:	87 01       	movw	r16, r14
    1f06:	0c 5c       	subi	r16, 0xCC	; 204
    1f08:	1e 4f       	sbci	r17, 0xFE	; 254
    1f0a:	08 94       	sec
    1f0c:	e1 1c       	adc	r14, r1
    1f0e:	f1 1c       	adc	r15, r1
    1f10:	0e 94 a9 08 	call	0x1152 <USART_Rx>
    1f14:	f8 01       	movw	r30, r16
    1f16:	80 83       	st	Z, r24
    1f18:	4b cf       	rjmp	.-362    	; 0x1db0 <V2P_RunStateMachine+0x44>
    1f1a:	0e 94 7e 0d 	call	0x1afc <V2P_GetChecksum>
    1f1e:	18 2f       	mov	r17, r24
    1f20:	0e 94 a9 08 	call	0x1152 <USART_Rx>
    1f24:	18 17       	cp	r17, r24
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <V2P_RunStateMachine+0x1be>
    1f28:	74 c0       	rjmp	.+232    	; 0x2012 <V2P_RunStateMachine+0x2a6>
    1f2a:	80 91 34 01 	lds	r24, 0x0134
    1f2e:	99 27       	eor	r25, r25
    1f30:	84 30       	cpi	r24, 0x04	; 4
    1f32:	91 05       	cpc	r25, r1
    1f34:	3c f4       	brge	.+14     	; 0x1f44 <V2P_RunStateMachine+0x1d8>
    1f36:	82 30       	cpi	r24, 0x02	; 2
    1f38:	91 05       	cpc	r25, r1
    1f3a:	0c f0       	brlt	.+2      	; 0x1f3e <V2P_RunStateMachine+0x1d2>
    1f3c:	61 c0       	rjmp	.+194    	; 0x2000 <V2P_RunStateMachine+0x294>
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	39 f0       	breq	.+14     	; 0x1f50 <V2P_RunStateMachine+0x1e4>
    1f42:	61 c0       	rjmp	.+194    	; 0x2006 <V2P_RunStateMachine+0x29a>
    1f44:	86 30       	cpi	r24, 0x06	; 6
    1f46:	91 05       	cpc	r25, r1
    1f48:	e9 f0       	breq	.+58     	; 0x1f84 <V2P_RunStateMachine+0x218>
    1f4a:	07 97       	sbiw	r24, 0x07	; 7
    1f4c:	99 f0       	breq	.+38     	; 0x1f74 <V2P_RunStateMachine+0x208>
    1f4e:	5b c0       	rjmp	.+182    	; 0x2006 <V2P_RunStateMachine+0x29a>
    1f50:	8b e0       	ldi	r24, 0x0B	; 11
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	90 93 31 01 	sts	0x0131, r25
    1f58:	80 93 30 01 	sts	0x0130, r24
    1f5c:	a4 e3       	ldi	r26, 0x34	; 52
    1f5e:	b1 e0       	ldi	r27, 0x01	; 1
    1f60:	e0 eb       	ldi	r30, 0xB0	; 176
    1f62:	f3 e0       	ldi	r31, 0x03	; 3
    1f64:	9a e0       	ldi	r25, 0x0A	; 10
    1f66:	84 91       	lpm	r24, Z
    1f68:	8d 93       	st	X+, r24
    1f6a:	91 50       	subi	r25, 0x01	; 1
    1f6c:	31 96       	adiw	r30, 0x01	; 1
    1f6e:	97 ff       	sbrs	r25, 7
    1f70:	fa cf       	rjmp	.-12     	; 0x1f66 <V2P_RunStateMachine+0x1fa>
    1f72:	58 c0       	rjmp	.+176    	; 0x2024 <V2P_RunStateMachine+0x2b8>
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	90 93 31 01 	sts	0x0131, r25
    1f7c:	80 93 30 01 	sts	0x0130, r24
    1f80:	80 ec       	ldi	r24, 0xC0	; 192
    1f82:	4e c0       	rjmp	.+156    	; 0x2020 <V2P_RunStateMachine+0x2b4>
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	90 93 31 01 	sts	0x0131, r25
    1f8c:	80 93 30 01 	sts	0x0130, r24
    1f90:	0e 94 8d 0e 	call	0x1d1a <V2P_CheckForExtendedAddress>
    1f94:	80 91 35 01 	lds	r24, 0x0135
    1f98:	99 27       	eor	r25, r25
    1f9a:	aa 27       	eor	r26, r26
    1f9c:	bb 27       	eor	r27, r27
    1f9e:	b8 2f       	mov	r27, r24
    1fa0:	aa 27       	eor	r26, r26
    1fa2:	99 27       	eor	r25, r25
    1fa4:	88 27       	eor	r24, r24
    1fa6:	20 91 36 01 	lds	r18, 0x0136
    1faa:	33 27       	eor	r19, r19
    1fac:	44 27       	eor	r20, r20
    1fae:	55 27       	eor	r21, r21
    1fb0:	a9 01       	movw	r20, r18
    1fb2:	33 27       	eor	r19, r19
    1fb4:	22 27       	eor	r18, r18
    1fb6:	82 2b       	or	r24, r18
    1fb8:	93 2b       	or	r25, r19
    1fba:	a4 2b       	or	r26, r20
    1fbc:	b5 2b       	or	r27, r21
    1fbe:	20 91 37 01 	lds	r18, 0x0137
    1fc2:	33 27       	eor	r19, r19
    1fc4:	44 27       	eor	r20, r20
    1fc6:	55 27       	eor	r21, r21
    1fc8:	54 2f       	mov	r21, r20
    1fca:	43 2f       	mov	r20, r19
    1fcc:	32 2f       	mov	r19, r18
    1fce:	22 27       	eor	r18, r18
    1fd0:	82 2b       	or	r24, r18
    1fd2:	93 2b       	or	r25, r19
    1fd4:	a4 2b       	or	r26, r20
    1fd6:	b5 2b       	or	r27, r21
    1fd8:	20 91 38 01 	lds	r18, 0x0138
    1fdc:	33 27       	eor	r19, r19
    1fde:	44 27       	eor	r20, r20
    1fe0:	55 27       	eor	r21, r21
    1fe2:	82 2b       	or	r24, r18
    1fe4:	93 2b       	or	r25, r19
    1fe6:	a4 2b       	or	r26, r20
    1fe8:	b5 2b       	or	r27, r21
    1fea:	80 93 2b 01 	sts	0x012B, r24
    1fee:	90 93 2c 01 	sts	0x012C, r25
    1ff2:	a0 93 2d 01 	sts	0x012D, r26
    1ff6:	b0 93 2e 01 	sts	0x012E, r27
    1ffa:	10 92 35 01 	sts	0x0135, r1
    1ffe:	12 c0       	rjmp	.+36     	; 0x2024 <V2P_RunStateMachine+0x2b8>
    2000:	0e 94 df 0d 	call	0x1bbe <V2P_GetSetParamater>
    2004:	11 c0       	rjmp	.+34     	; 0x2028 <V2P_RunStateMachine+0x2bc>
    2006:	e0 91 24 01 	lds	r30, 0x0124
    200a:	f0 91 25 01 	lds	r31, 0x0125
    200e:	09 95       	icall
    2010:	0b c0       	rjmp	.+22     	; 0x2028 <V2P_RunStateMachine+0x2bc>
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	90 93 31 01 	sts	0x0131, r25
    201a:	80 93 30 01 	sts	0x0130, r24
    201e:	81 ec       	ldi	r24, 0xC1	; 193
    2020:	80 93 35 01 	sts	0x0135, r24
    2024:	0e 94 9f 0d 	call	0x1b3e <V2P_SendPacket>
    2028:	c8 e0       	ldi	r28, 0x08	; 8
    202a:	c2 ce       	rjmp	.-636    	; 0x1db0 <V2P_RunStateMachine+0x44>
    202c:	cf 91       	pop	r28
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	ff 90       	pop	r15
    2034:	ef 90       	pop	r14
    2036:	08 95       	ret

00002038 <ISPCC_EnterChipProgrammingMode>:

// ======================================================================================

void ISPCC_EnterChipProgrammingMode(void)
{
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
	uint8_t ByteDelay = PacketBytes[5];
    203e:	10 91 39 01 	lds	r17, 0x0139
	uint8_t Attempts  = PacketBytes[4];
    2042:	c0 91 38 01 	lds	r28, 0x0138
	uint8_t Response;

	MAIN_Delay1MS(PacketBytes[2]);         // Wait before continuing, amount specified in the packet
    2046:	80 91 36 01 	lds	r24, 0x0136
    204a:	0e 94 fc 02 	call	0x5f8 <MAIN_Delay1MS>

	if ((!(Attempts)) || (Attempts > 100)) // if no attempts or too high a value is specified, a fixed number is chosen
    204e:	8c 2f       	mov	r24, r28
    2050:	81 50       	subi	r24, 0x01	; 1
    2052:	84 36       	cpi	r24, 0x64	; 100
    2054:	08 f0       	brcs	.+2      	; 0x2058 <ISPCC_EnterChipProgrammingMode+0x20>
	   Attempts = 24;
    2056:	c8 e1       	ldi	r28, 0x18	; 24
		
	while (Attempts--)
	{
		USI_SPITransmit(PacketBytes[8]);
		MAIN_Delay1MS(ByteDelay);
		USI_SPITransmit(PacketBytes[9]);
		MAIN_Delay1MS(ByteDelay);
			
		Response = USI_SPITransmit(PacketBytes[10]);
		MAIN_Delay1MS(ByteDelay);

		if (PacketBytes[7] == ISPCC_POLL_MODE_AVR)
		  USI_SPITransmit(PacketBytes[11]);
		else
		  Response = USI_SPITransmit(PacketBytes[11]);
				
		if (!(PacketBytes[7]) || (Response == PacketBytes[6])) // Polling disabled, or returned value matches expected poll value
		{
			MAIN_Delay1MS(ByteDelay);

			InProgrammingMode = TRUE;
			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;
			return;
		}
		
		MAIN_Delay1MS(ByteDelay);
		USI_SPIToggleClock();            // Out of sync, shift in one bit and try again
    2058:	c1 50       	subi	r28, 0x01	; 1
    205a:	cf 3f       	cpi	r28, 0xFF	; 255
    205c:	09 f4       	brne	.+2      	; 0x2060 <ISPCC_EnterChipProgrammingMode+0x28>
    205e:	3f c0       	rjmp	.+126    	; 0x20de <ISPCC_EnterChipProgrammingMode+0xa6>
    2060:	80 91 3c 01 	lds	r24, 0x013C
    2064:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2068:	81 2f       	mov	r24, r17
    206a:	0e 94 fc 02 	call	0x5f8 <MAIN_Delay1MS>
    206e:	80 91 3d 01 	lds	r24, 0x013D
    2072:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2076:	81 2f       	mov	r24, r17
    2078:	0e 94 fc 02 	call	0x5f8 <MAIN_Delay1MS>
    207c:	80 91 3e 01 	lds	r24, 0x013E
    2080:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2084:	08 2f       	mov	r16, r24
    2086:	81 2f       	mov	r24, r17
    2088:	0e 94 fc 02 	call	0x5f8 <MAIN_Delay1MS>
    208c:	80 91 3b 01 	lds	r24, 0x013B
    2090:	83 30       	cpi	r24, 0x03	; 3
    2092:	29 f4       	brne	.+10     	; 0x209e <ISPCC_EnterChipProgrammingMode+0x66>
    2094:	80 91 3f 01 	lds	r24, 0x013F
    2098:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    209c:	05 c0       	rjmp	.+10     	; 0x20a8 <ISPCC_EnterChipProgrammingMode+0x70>
    209e:	80 91 3f 01 	lds	r24, 0x013F
    20a2:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    20a6:	08 2f       	mov	r16, r24
    20a8:	80 91 3b 01 	lds	r24, 0x013B
    20ac:	88 23       	and	r24, r24
    20ae:	21 f0       	breq	.+8      	; 0x20b8 <ISPCC_EnterChipProgrammingMode+0x80>
    20b0:	80 91 3a 01 	lds	r24, 0x013A
    20b4:	08 17       	cp	r16, r24
    20b6:	69 f4       	brne	.+26     	; 0x20d2 <ISPCC_EnterChipProgrammingMode+0x9a>
    20b8:	81 2f       	mov	r24, r17
    20ba:	0e 94 fc 02 	call	0x5f8 <MAIN_Delay1MS>
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	80 93 2f 01 	sts	0x012F, r24
    20c4:	81 b3       	in	r24, 0x11	; 17
    20c6:	8f 7c       	andi	r24, 0xCF	; 207
    20c8:	80 62       	ori	r24, 0x20	; 32
    20ca:	81 bb       	out	0x11, r24	; 17
    20cc:	10 92 35 01 	sts	0x0135, r1
    20d0:	0d c0       	rjmp	.+26     	; 0x20ec <ISPCC_EnterChipProgrammingMode+0xb4>
    20d2:	81 2f       	mov	r24, r17
    20d4:	0e 94 fc 02 	call	0x5f8 <MAIN_Delay1MS>
    20d8:	0e 94 6b 09 	call	0x12d6 <USI_SPIToggleClock>
    20dc:	bd cf       	rjmp	.-134    	; 0x2058 <ISPCC_EnterChipProgrammingMode+0x20>
	}

	// If function hasn't returned by now, all the attempts have failed. Show this by
	// resetting the status leds to green (ready) and send a fail message.

	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
    20de:	81 b3       	in	r24, 0x11	; 17
    20e0:	8f 7c       	andi	r24, 0xCF	; 207
    20e2:	80 61       	ori	r24, 0x10	; 16
    20e4:	81 bb       	out	0x11, r24	; 17
	PacketBytes[1] = STATUS_CMD_FAILED;
    20e6:	80 ec       	ldi	r24, 0xC0	; 192
    20e8:	80 93 35 01 	sts	0x0135, r24
    20ec:	cf 91       	pop	r28
    20ee:	1f 91       	pop	r17
    20f0:	0f 91       	pop	r16
    20f2:	08 95       	ret

000020f4 <ISPCC_PollForProgComplete>:
}

void ISPCC_ProgramChip(void)
{
	uint16_t PollAddress  = 0;
	uint8_t  ProgMode     = PacketBytes[3];
	uint8_t  WriteCommand = PacketBytes[5];
	uint16_t StartAddress = (uint16_t)CurrAddress;
	uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
	                      | PacketBytes[2];
	uint8_t  PollType;
	uint8_t  ByteToWrite;
			
	if (ProgMode & ISPCC_PROG_MODE_PAGE)                 // Page writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++) // Transmit the page bytes
		{
			ByteToWrite = PacketBytes[10 + WriteByte];
		
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash write mode - word addresses so MSB/LSB masking 
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else                                         // EEPROM write mode - byte addresses so no masking 
			   USI_SPITransmit(WriteCommand);

			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Only the LSW of the address should be sent
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			if (!(PollAddress))
			{
				if ((PacketBytes[8] != ByteToWrite)       // Can do polling
				   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
				{
					PollAddress = (CurrAddress & 0xFFFF); // Save the current address
				
					if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
					   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
				}
			}

			// Flash addresses are in words; only increment address on odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();
		}

		PollType = ProgMode;

		if (ProgMode & ISPCC_PROG_MODE_PAGEDONE)         // If this packet is the end of a page, we need to send the program page command
		{
			USI_SPITransmit(PacketBytes[6]);             // Send the write program memory page command
			USI_SPITransmitWord(StartAddress);           // Send the page address word
			USI_SPITransmit(0x00);

			if (!(PollAddress))                          // No polling address
			   PollType = ((ProgMode & ~ISPCC_PAGE_POLLTYPE_MASK) | ISPCC_PAGE_POLLTYPE_WAIT);

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
	else                                                 // Flash Word writing mode or EEPROM byte writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++)
		{
			ByteToWrite = PacketBytes[10 + WriteByte];

			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else
			   USI_SPITransmit(WriteCommand);					
					
			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Transmit the current address to the slave AVR
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			PollType = ProgMode;

			if ((PacketBytes[8] != ByteToWrite)           // Can do polling
			   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
			{
				PollAddress = (CurrAddress & 0xFFFF);     // Save the current address;

				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
				   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
			}
			else
			{
				PollType = ((ProgMode & ~ISPCC_WORD_POLLTYPE_MASK) | ISPCC_WORD_POLLTYPE_WAIT);
			}					

			// Flash addresses are in words; only increment address on the odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
}

void ISPCC_PollForProgComplete(uint8_t PollData, uint16_t PollAddr)
{
    20f4:	1f 93       	push	r17
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	eb 01       	movw	r28, r22
	uint8_t PollType;
	uint8_t ProgCommand;

	if (PollData & ISPCC_PROG_MODE_PAGE)
    20fc:	99 27       	eor	r25, r25
    20fe:	80 ff       	sbrs	r24, 0
    2100:	08 c0       	rjmp	.+16     	; 0x2112 <ISPCC_PollForProgComplete+0x1e>
	   PollType = ((PollData & ISPCC_PAGE_POLLTYPE_MASK) >> ISPCC_PAGE_POLLTYPE_MASKSHIFT);
    2102:	80 77       	andi	r24, 0x70	; 112
    2104:	90 70       	andi	r25, 0x00	; 0
    2106:	34 e0       	ldi	r19, 0x04	; 4
    2108:	95 95       	asr	r25
    210a:	87 95       	ror	r24
    210c:	3a 95       	dec	r19
    210e:	e1 f7       	brne	.-8      	; 0x2108 <ISPCC_PollForProgComplete+0x14>
    2110:	04 c0       	rjmp	.+8      	; 0x211a <ISPCC_PollForProgComplete+0x26>
	else
	   PollType = ((PollData & ISPCC_WORD_POLLTYPE_MASK) >> ISPCC_WORD_POLLTYPE_MASKSHIFT);	
    2112:	8e 70       	andi	r24, 0x0E	; 14
    2114:	90 70       	andi	r25, 0x00	; 0
    2116:	95 95       	asr	r25
    2118:	87 95       	ror	r24

	switch (PollType & ISPCC_POLLTYPE_MASK)
    211a:	99 27       	eor	r25, r25
    211c:	87 70       	andi	r24, 0x07	; 7
    211e:	90 70       	andi	r25, 0x00	; 0
    2120:	82 30       	cpi	r24, 0x02	; 2
    2122:	91 05       	cpc	r25, r1
    2124:	19 f0       	breq	.+6      	; 0x212c <ISPCC_PollForProgComplete+0x38>
    2126:	04 97       	sbiw	r24, 0x04	; 4
    2128:	e1 f0       	breq	.+56     	; 0x2162 <ISPCC_PollForProgComplete+0x6e>
    212a:	26 c0       	rjmp	.+76     	; 0x2178 <ISPCC_PollForProgComplete+0x84>
	{
		case ISPCC_POLLTYPE_DATA:
			ProgCommand = PacketBytes[7];
    212c:	10 91 3b 01 	lds	r17, 0x013B
			
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash uses word addresses
    2130:	80 91 34 01 	lds	r24, 0x0134
    2134:	83 31       	cpi	r24, 0x13	; 19
    2136:	39 f4       	brne	.+14     	; 0x2146 <ISPCC_PollForProgComplete+0x52>
			{
				ProgCommand  |= ((PollAddr & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ);
    2138:	81 2f       	mov	r24, r17
    213a:	99 27       	eor	r25, r25
    213c:	c0 fd       	sbrc	r28, 0
    213e:	88 60       	ori	r24, 0x08	; 8
    2140:	18 2f       	mov	r17, r24
				PollAddr    >>= 1;
    2142:	d6 95       	lsr	r29
    2144:	c7 95       	ror	r28
			}

			do
			{
				USI_SPITransmit(ProgCommand);
    2146:	81 2f       	mov	r24, r17
    2148:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
				USI_SPITransmitWord(PollAddr);
    214c:	ce 01       	movw	r24, r28
    214e:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
			}
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2158:	90 91 3c 01 	lds	r25, 0x013C
    215c:	89 17       	cp	r24, r25
    215e:	99 f3       	breq	.-26     	; 0x2146 <ISPCC_PollForProgComplete+0x52>
			while (USI_SPITransmit(0x00) == PacketBytes[8]);
						
			break;
    2160:	0f c0       	rjmp	.+30     	; 0x2180 <ISPCC_PollForProgComplete+0x8c>
		case ISPCC_POLLTYPE_READY:
			do
			   USI_SPITransmitWord(0xF000);
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 ef       	ldi	r25, 0xF0	; 240
    2166:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    2172:	80 fd       	sbrc	r24, 0
    2174:	f6 cf       	rjmp	.-20     	; 0x2162 <ISPCC_PollForProgComplete+0x6e>
			while (USI_SPITransmitWord(0x0000) & ISPCC_POLL_BUSYFLAG);

			break;
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <ISPCC_PollForProgComplete+0x8c>
		default:                                      // Default is Wait polling
			MAIN_Delay1MS(PacketBytes[4]);	
    2178:	80 91 38 01 	lds	r24, 0x0138
    217c:	0e 94 fc 02 	call	0x5f8 <MAIN_Delay1MS>
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	1f 91       	pop	r17
    2186:	08 95       	ret

00002188 <ISPCC_ProgramChip>:
    2188:	6f 92       	push	r6
    218a:	7f 92       	push	r7
    218c:	9f 92       	push	r9
    218e:	af 92       	push	r10
    2190:	bf 92       	push	r11
    2192:	cf 92       	push	r12
    2194:	df 92       	push	r13
    2196:	ef 92       	push	r14
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	00 e0       	ldi	r16, 0x00	; 0
    21a4:	10 e0       	ldi	r17, 0x00	; 0
    21a6:	90 90 37 01 	lds	r9, 0x0137
    21aa:	c0 90 39 01 	lds	r12, 0x0139
    21ae:	60 90 2b 01 	lds	r6, 0x012B
    21b2:	70 90 2c 01 	lds	r7, 0x012C
    21b6:	80 91 35 01 	lds	r24, 0x0135
    21ba:	99 27       	eor	r25, r25
    21bc:	b8 2e       	mov	r11, r24
    21be:	aa 24       	eor	r10, r10
    21c0:	80 91 36 01 	lds	r24, 0x0136
    21c4:	99 27       	eor	r25, r25
    21c6:	a8 2a       	or	r10, r24
    21c8:	b9 2a       	or	r11, r25
    21ca:	90 fe       	sbrs	r9, 0
    21cc:	62 c0       	rjmp	.+196    	; 0x2292 <ISPCC_ProgramChip+0x10a>
    21ce:	78 01       	movw	r14, r16
    21d0:	0a 15       	cp	r16, r10
    21d2:	1b 05       	cpc	r17, r11
    21d4:	08 f0       	brcs	.+2      	; 0x21d8 <ISPCC_ProgramChip+0x50>
    21d6:	46 c0       	rjmp	.+140    	; 0x2264 <ISPCC_ProgramChip+0xdc>
    21d8:	ce e3       	ldi	r28, 0x3E	; 62
    21da:	d1 e0       	ldi	r29, 0x01	; 1
    21dc:	d9 90       	ld	r13, Y+
    21de:	80 91 34 01 	lds	r24, 0x0134
    21e2:	83 31       	cpi	r24, 0x13	; 19
    21e4:	31 f4       	brne	.+12     	; 0x21f2 <ISPCC_ProgramChip+0x6a>
    21e6:	8c 2d       	mov	r24, r12
    21e8:	99 27       	eor	r25, r25
    21ea:	e0 fe       	sbrs	r14, 0
    21ec:	03 c0       	rjmp	.+6      	; 0x21f4 <ISPCC_ProgramChip+0x6c>
    21ee:	88 60       	ori	r24, 0x08	; 8
    21f0:	01 c0       	rjmp	.+2      	; 0x21f4 <ISPCC_ProgramChip+0x6c>
    21f2:	8c 2d       	mov	r24, r12
    21f4:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    21f8:	80 91 2b 01 	lds	r24, 0x012B
    21fc:	90 91 2c 01 	lds	r25, 0x012C
    2200:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    2204:	8d 2d       	mov	r24, r13
    2206:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    220a:	01 15       	cp	r16, r1
    220c:	11 05       	cpc	r17, r1
    220e:	d9 f4       	brne	.+54     	; 0x2246 <ISPCC_ProgramChip+0xbe>
    2210:	80 91 3c 01 	lds	r24, 0x013C
    2214:	8d 15       	cp	r24, r13
    2216:	b9 f0       	breq	.+46     	; 0x2246 <ISPCC_ProgramChip+0xbe>
    2218:	90 91 34 01 	lds	r25, 0x0134
    221c:	93 31       	cpi	r25, 0x13	; 19
    221e:	31 f0       	breq	.+12     	; 0x222c <ISPCC_ProgramChip+0xa4>
    2220:	95 31       	cpi	r25, 0x15	; 21
    2222:	89 f4       	brne	.+34     	; 0x2246 <ISPCC_ProgramChip+0xbe>
    2224:	80 91 3d 01 	lds	r24, 0x013D
    2228:	8d 15       	cp	r24, r13
    222a:	69 f0       	breq	.+26     	; 0x2246 <ISPCC_ProgramChip+0xbe>
    222c:	00 91 2b 01 	lds	r16, 0x012B
    2230:	10 91 2c 01 	lds	r17, 0x012C
    2234:	93 31       	cpi	r25, 0x13	; 19
    2236:	39 f4       	brne	.+14     	; 0x2246 <ISPCC_ProgramChip+0xbe>
    2238:	00 0f       	add	r16, r16
    223a:	11 1f       	adc	r17, r17
    223c:	c7 01       	movw	r24, r14
    223e:	81 70       	andi	r24, 0x01	; 1
    2240:	90 70       	andi	r25, 0x00	; 0
    2242:	08 0f       	add	r16, r24
    2244:	19 1f       	adc	r17, r25
    2246:	e0 fc       	sbrc	r14, 0
    2248:	04 c0       	rjmp	.+8      	; 0x2252 <ISPCC_ProgramChip+0xca>
    224a:	80 91 34 01 	lds	r24, 0x0134
    224e:	85 31       	cpi	r24, 0x15	; 21
    2250:	11 f4       	brne	.+4      	; 0x2256 <ISPCC_ProgramChip+0xce>
    2252:	0e 94 79 0e 	call	0x1cf2 <V2P_IncrementCurrAddress>
    2256:	08 94       	sec
    2258:	e1 1c       	adc	r14, r1
    225a:	f1 1c       	adc	r15, r1
    225c:	ea 14       	cp	r14, r10
    225e:	fb 04       	cpc	r15, r11
    2260:	08 f4       	brcc	.+2      	; 0x2264 <ISPCC_ProgramChip+0xdc>
    2262:	bc cf       	rjmp	.-136    	; 0x21dc <ISPCC_ProgramChip+0x54>
    2264:	c9 2d       	mov	r28, r9
    2266:	97 fe       	sbrs	r9, 7
    2268:	69 c0       	rjmp	.+210    	; 0x233c <ISPCC_ProgramChip+0x1b4>
    226a:	80 91 3a 01 	lds	r24, 0x013A
    226e:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2272:	c3 01       	movw	r24, r6
    2274:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    227e:	01 15       	cp	r16, r1
    2280:	11 05       	cpc	r17, r1
    2282:	11 f4       	brne	.+4      	; 0x2288 <ISPCC_ProgramChip+0x100>
    2284:	cf 78       	andi	r28, 0x8F	; 143
    2286:	c0 61       	ori	r28, 0x10	; 16
    2288:	b8 01       	movw	r22, r16
    228a:	8c 2f       	mov	r24, r28
    228c:	0e 94 7a 10 	call	0x20f4 <ISPCC_PollForProgComplete>
    2290:	55 c0       	rjmp	.+170    	; 0x233c <ISPCC_ProgramChip+0x1b4>
    2292:	78 01       	movw	r14, r16
    2294:	0a 15       	cp	r16, r10
    2296:	1b 05       	cpc	r17, r11
    2298:	08 f0       	brcs	.+2      	; 0x229c <ISPCC_ProgramChip+0x114>
    229a:	50 c0       	rjmp	.+160    	; 0x233c <ISPCC_ProgramChip+0x1b4>
    229c:	5e e3       	ldi	r21, 0x3E	; 62
    229e:	65 2e       	mov	r6, r21
    22a0:	51 e0       	ldi	r21, 0x01	; 1
    22a2:	75 2e       	mov	r7, r21
    22a4:	f3 01       	movw	r30, r6
    22a6:	d1 90       	ld	r13, Z+
    22a8:	3f 01       	movw	r6, r30
    22aa:	80 91 34 01 	lds	r24, 0x0134
    22ae:	83 31       	cpi	r24, 0x13	; 19
    22b0:	31 f4       	brne	.+12     	; 0x22be <ISPCC_ProgramChip+0x136>
    22b2:	8c 2d       	mov	r24, r12
    22b4:	99 27       	eor	r25, r25
    22b6:	e0 fe       	sbrs	r14, 0
    22b8:	03 c0       	rjmp	.+6      	; 0x22c0 <ISPCC_ProgramChip+0x138>
    22ba:	88 60       	ori	r24, 0x08	; 8
    22bc:	01 c0       	rjmp	.+2      	; 0x22c0 <ISPCC_ProgramChip+0x138>
    22be:	8c 2d       	mov	r24, r12
    22c0:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    22c4:	80 91 2b 01 	lds	r24, 0x012B
    22c8:	90 91 2c 01 	lds	r25, 0x012C
    22cc:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    22d0:	8d 2d       	mov	r24, r13
    22d2:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    22d6:	c9 2d       	mov	r28, r9
    22d8:	80 91 3c 01 	lds	r24, 0x013C
    22dc:	8d 15       	cp	r24, r13
    22de:	c1 f0       	breq	.+48     	; 0x2310 <ISPCC_ProgramChip+0x188>
    22e0:	90 91 34 01 	lds	r25, 0x0134
    22e4:	93 31       	cpi	r25, 0x13	; 19
    22e6:	31 f0       	breq	.+12     	; 0x22f4 <ISPCC_ProgramChip+0x16c>
    22e8:	95 31       	cpi	r25, 0x15	; 21
    22ea:	91 f4       	brne	.+36     	; 0x2310 <ISPCC_ProgramChip+0x188>
    22ec:	80 91 3d 01 	lds	r24, 0x013D
    22f0:	8d 15       	cp	r24, r13
    22f2:	71 f0       	breq	.+28     	; 0x2310 <ISPCC_ProgramChip+0x188>
    22f4:	00 91 2b 01 	lds	r16, 0x012B
    22f8:	10 91 2c 01 	lds	r17, 0x012C
    22fc:	93 31       	cpi	r25, 0x13	; 19
    22fe:	59 f4       	brne	.+22     	; 0x2316 <ISPCC_ProgramChip+0x18e>
    2300:	00 0f       	add	r16, r16
    2302:	11 1f       	adc	r17, r17
    2304:	c7 01       	movw	r24, r14
    2306:	81 70       	andi	r24, 0x01	; 1
    2308:	90 70       	andi	r25, 0x00	; 0
    230a:	08 0f       	add	r16, r24
    230c:	19 1f       	adc	r17, r25
    230e:	03 c0       	rjmp	.+6      	; 0x2316 <ISPCC_ProgramChip+0x18e>
    2310:	c9 2d       	mov	r28, r9
    2312:	c1 7f       	andi	r28, 0xF1	; 241
    2314:	c2 60       	ori	r28, 0x02	; 2
    2316:	e0 fc       	sbrc	r14, 0
    2318:	04 c0       	rjmp	.+8      	; 0x2322 <ISPCC_ProgramChip+0x19a>
    231a:	80 91 34 01 	lds	r24, 0x0134
    231e:	85 31       	cpi	r24, 0x15	; 21
    2320:	11 f4       	brne	.+4      	; 0x2326 <ISPCC_ProgramChip+0x19e>
    2322:	0e 94 79 0e 	call	0x1cf2 <V2P_IncrementCurrAddress>
    2326:	b8 01       	movw	r22, r16
    2328:	8c 2f       	mov	r24, r28
    232a:	0e 94 7a 10 	call	0x20f4 <ISPCC_PollForProgComplete>
    232e:	08 94       	sec
    2330:	e1 1c       	adc	r14, r1
    2332:	f1 1c       	adc	r15, r1
    2334:	ea 14       	cp	r14, r10
    2336:	fb 04       	cpc	r15, r11
    2338:	08 f4       	brcc	.+2      	; 0x233c <ISPCC_ProgramChip+0x1b4>
    233a:	b4 cf       	rjmp	.-152    	; 0x22a4 <ISPCC_ProgramChip+0x11c>
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	1f 91       	pop	r17
    2342:	0f 91       	pop	r16
    2344:	ff 90       	pop	r15
    2346:	ef 90       	pop	r14
    2348:	df 90       	pop	r13
    234a:	cf 90       	pop	r12
    234c:	bf 90       	pop	r11
    234e:	af 90       	pop	r10
    2350:	9f 90       	pop	r9
    2352:	7f 90       	pop	r7
    2354:	6f 90       	pop	r6
    2356:	08 95       	ret

00002358 <AICI_InterpretPacket>:

// ======================================================================================

void AICI_InterpretPacket(void)
{
    2358:	df 92       	push	r13
    235a:	ef 92       	push	r14
    235c:	ff 92       	push	r15
    235e:	0f 93       	push	r16
    2360:	1f 93       	push	r17
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
	switch (PacketBytes[0])
    2366:	80 91 34 01 	lds	r24, 0x0134
    236a:	99 27       	eor	r25, r25
    236c:	86 31       	cpi	r24, 0x16	; 22
    236e:	91 05       	cpc	r25, r1
    2370:	09 f4       	brne	.+2      	; 0x2374 <AICI_InterpretPacket+0x1c>
    2372:	fa c0       	rjmp	.+500    	; 0x2568 <AICI_InterpretPacket+0x210>
    2374:	87 31       	cpi	r24, 0x17	; 23
    2376:	91 05       	cpc	r25, r1
    2378:	94 f4       	brge	.+36     	; 0x239e <AICI_InterpretPacket+0x46>
    237a:	82 31       	cpi	r24, 0x12	; 18
    237c:	91 05       	cpc	r25, r1
    237e:	09 f4       	brne	.+2      	; 0x2382 <AICI_InterpretPacket+0x2a>
    2380:	5f c0       	rjmp	.+190    	; 0x2440 <AICI_InterpretPacket+0xe8>
    2382:	83 31       	cpi	r24, 0x13	; 19
    2384:	91 05       	cpc	r25, r1
    2386:	3c f4       	brge	.+14     	; 0x2396 <AICI_InterpretPacket+0x3e>
    2388:	80 31       	cpi	r24, 0x10	; 16
    238a:	91 05       	cpc	r25, r1
    238c:	f9 f0       	breq	.+62     	; 0x23cc <AICI_InterpretPacket+0x74>
    238e:	41 97       	sbiw	r24, 0x11	; 17
    2390:	09 f4       	brne	.+2      	; 0x2394 <AICI_InterpretPacket+0x3c>
    2392:	3c c0       	rjmp	.+120    	; 0x240c <AICI_InterpretPacket+0xb4>
    2394:	3d c1       	rjmp	.+634    	; 0x2610 <AICI_InterpretPacket+0x2b8>
    2396:	44 97       	sbiw	r24, 0x14	; 20
    2398:	09 f4       	brne	.+2      	; 0x239c <AICI_InterpretPacket+0x44>
    239a:	e6 c0       	rjmp	.+460    	; 0x2568 <AICI_InterpretPacket+0x210>
    239c:	2e c1       	rjmp	.+604    	; 0x25fa <AICI_InterpretPacket+0x2a2>
    239e:	89 31       	cpi	r24, 0x19	; 25
    23a0:	91 05       	cpc	r25, r1
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <AICI_InterpretPacket+0x4e>
    23a4:	cb c0       	rjmp	.+406    	; 0x253c <AICI_InterpretPacket+0x1e4>
    23a6:	8a 31       	cpi	r24, 0x1A	; 26
    23a8:	91 05       	cpc	r25, r1
    23aa:	44 f4       	brge	.+16     	; 0x23bc <AICI_InterpretPacket+0x64>
    23ac:	87 31       	cpi	r24, 0x17	; 23
    23ae:	91 05       	cpc	r25, r1
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <AICI_InterpretPacket+0x5c>
    23b2:	c4 c0       	rjmp	.+392    	; 0x253c <AICI_InterpretPacket+0x1e4>
    23b4:	48 97       	sbiw	r24, 0x18	; 24
    23b6:	09 f4       	brne	.+2      	; 0x23ba <AICI_InterpretPacket+0x62>
    23b8:	a4 c0       	rjmp	.+328    	; 0x2502 <AICI_InterpretPacket+0x1aa>
    23ba:	2a c1       	rjmp	.+596    	; 0x2610 <AICI_InterpretPacket+0x2b8>
    23bc:	8d 31       	cpi	r24, 0x1D	; 29
    23be:	91 05       	cpc	r25, r1
    23c0:	0c f4       	brge	.+2      	; 0x23c4 <AICI_InterpretPacket+0x6c>
    23c2:	9f c0       	rjmp	.+318    	; 0x2502 <AICI_InterpretPacket+0x1aa>
    23c4:	4d 97       	sbiw	r24, 0x1d	; 29
    23c6:	09 f4       	brne	.+2      	; 0x23ca <AICI_InterpretPacket+0x72>
    23c8:	60 c0       	rjmp	.+192    	; 0x248a <AICI_InterpretPacket+0x132>
    23ca:	22 c1       	rjmp	.+580    	; 0x2610 <AICI_InterpretPacket+0x2b8>
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	90 93 31 01 	sts	0x0131, r25
    23d4:	80 93 30 01 	sts	0x0130, r24
			
			USI_SPIInitMaster(eeprom_read_byte_169(&Param_SCKDuration));
    23d8:	80 e2       	ldi	r24, 0x20	; 32
    23da:	91 e0       	ldi	r25, 0x01	; 1
    23dc:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    23e0:	0e 94 30 09 	call	0x1260 <USI_SPIInitMaster>

			MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);  // Pull the slave AVR's RESET line to active
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	0e 94 0e 03 	call	0x61c <MAIN_ResetCSLine>
			MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE); // Orange = Busy
    23ea:	81 b3       	in	r24, 0x11	; 17
    23ec:	80 63       	ori	r24, 0x30	; 48
    23ee:	81 bb       	out	0x11, r24	; 17
			ISPCC_EnterChipProgrammingMode();       // Run the Enter Programming Mode routine
    23f0:	0e 94 1c 10 	call	0x2038 <ISPCC_EnterChipProgrammingMode>

			if (InProgrammingMode)
    23f4:	80 91 2f 01 	lds	r24, 0x012F
    23f8:	88 23       	and	r24, r24
    23fa:	19 f0       	breq	.+6      	; 0x2402 <AICI_InterpretPacket+0xaa>
			   LCD_puts_f(AVRISPModeMessage);
    23fc:	89 ec       	ldi	r24, 0xC9	; 201
    23fe:	93 e0       	ldi	r25, 0x03	; 3
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <AICI_InterpretPacket+0xae>
			else
			   LCD_puts_f(SyncErrorMessage);
    2402:	8e eb       	ldi	r24, 0xBE	; 190
    2404:	93 e0       	ldi	r25, 0x03	; 3
    2406:	0e 94 a2 07 	call	0xf44 <LCD_puts_f>
			
			break;
    240a:	0b c1       	rjmp	.+534    	; 0x2622 <AICI_InterpretPacket+0x2ca>
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;
    240c:	82 e0       	ldi	r24, 0x02	; 2
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	90 93 31 01 	sts	0x0131, r25
    2414:	80 93 30 01 	sts	0x0130, r24

			MAIN_Delay1MS(PacketBytes[1]);           // Wait for the "PreDelay" amount specified in the packet
    2418:	80 91 35 01 	lds	r24, 0x0135
    241c:	0e 94 fc 02 	call	0x5f8 <MAIN_Delay1MS>
			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Non programming mode = green status led
    2420:	81 b3       	in	r24, 0x11	; 17
    2422:	8f 7c       	andi	r24, 0xCF	; 207
    2424:	80 61       	ori	r24, 0x10	; 16
    2426:	81 bb       	out	0x11, r24	; 17
			InProgrammingMode = FALSE;
    2428:	10 92 2f 01 	sts	0x012F, r1
			MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	0e 94 0e 03 	call	0x61c <MAIN_ResetCSLine>
			MAIN_Delay1MS(PacketBytes[2]);           // Wait for the "PostDelay" amount specified in the packet
    2432:	80 91 36 01 	lds	r24, 0x0136
    2436:	0e 94 fc 02 	call	0x5f8 <MAIN_Delay1MS>
			
			USI_SPIOff();
    243a:	0e 94 40 09 	call	0x1280 <USI_SPIOff>
    243e:	e5 c0       	rjmp	.+458    	; 0x260a <AICI_InterpretPacket+0x2b2>

			PacketBytes[1] = STATUS_CMD_OK;      // Return OK

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;
    2440:	82 e0       	ldi	r24, 0x02	; 2
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	90 93 31 01 	sts	0x0131, r25
    2448:	80 93 30 01 	sts	0x0130, r24
			
			for (uint8_t PacketB = 3; PacketB <= 6; PacketB++) // Send the erase commands to the slave AVR
    244c:	c3 e0       	ldi	r28, 0x03	; 3
    244e:	07 e3       	ldi	r16, 0x37	; 55
    2450:	11 e0       	ldi	r17, 0x01	; 1
				USI_SPITransmit(PacketBytes[PacketB]);
    2452:	f8 01       	movw	r30, r16
    2454:	81 91       	ld	r24, Z+
    2456:	8f 01       	movw	r16, r30
    2458:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    245c:	c1 50       	subi	r28, 0x01	; 1
    245e:	c7 ff       	sbrs	r28, 7
    2460:	f8 cf       	rjmp	.-16     	; 0x2452 <AICI_InterpretPacket+0xfa>

			if (PacketBytes[2])                  // Poll mode, value of 1 indicates a busy flag wait
    2462:	80 91 36 01 	lds	r24, 0x0136
    2466:	88 23       	and	r24, r24
    2468:	59 f0       	breq	.+22     	; 0x2480 <AICI_InterpretPacket+0x128>
			{
				do
					USI_SPITransmitWord(0xF000);
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	90 ef       	ldi	r25, 0xF0	; 240
    246e:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    247a:	80 fd       	sbrc	r24, 0
    247c:	f6 cf       	rjmp	.-20     	; 0x246a <AICI_InterpretPacket+0x112>
    247e:	c5 c0       	rjmp	.+394    	; 0x260a <AICI_InterpretPacket+0x2b2>
				while (USI_SPITransmitWord(0x0000) & 0x01);
			}
			else                                // Poll mode flag of 0 indicates a predefined delay
			{
				MAIN_Delay1MS(PacketBytes[1]);   // Wait the specified interval to ensure erase complete
    2480:	80 91 35 01 	lds	r24, 0x0135
    2484:	0e 94 fc 02 	call	0x5f8 <MAIN_Delay1MS>
    2488:	c0 c0       	rjmp	.+384    	; 0x260a <AICI_InterpretPacket+0x2b2>
			}
			
			PacketBytes[1] = STATUS_CMD_OK;      // Always return OK
			
			break;
		case CMD_SPI_MULTI:
				MessageSize = (3 + PacketBytes[2]);    // Number of recieved bytes, plus two OKs and the command byte
    248a:	e0 90 36 01 	lds	r14, 0x0136
    248e:	8e 2d       	mov	r24, r14
    2490:	99 27       	eor	r25, r25
    2492:	03 96       	adiw	r24, 0x03	; 3
    2494:	90 93 31 01 	sts	0x0131, r25
    2498:	80 93 30 01 	sts	0x0130, r24
		
				uint8_t TxBytes      = PacketBytes[1]; // \. The packet data is overwritten during the transfer. Because
    249c:	00 91 35 01 	lds	r16, 0x0135
				uint8_t RxStartByte  = PacketBytes[2]; // |  of this each data byte must be stored into temp variables
				uint8_t RxBytes      = PacketBytes[3]; // /  so that their contents are not lost.
    24a0:	f0 90 37 01 	lds	r15, 0x0137
				uint8_t RxByteNum    = 1;
    24a4:	c1 e0       	ldi	r28, 0x01	; 1
				uint8_t TxByteNum    = 1;
				uint8_t RecievedByte = 0;

				while (TxByteNum++ < TxBytes)          // Still bytes to transfer
				{
					RecievedByte = USI_SPITransmit(PacketBytes[3 + TxByteNum]); // Transmit the byte, store the answer

					if ((TxByteNum >= RxStartByte) && (RxByteNum < RxBytes))
					   PacketBytes[2 + RxByteNum++] = RecievedByte;
    24a6:	12 e0       	ldi	r17, 0x02	; 2
    24a8:	c0 17       	cp	r28, r16
    24aa:	a8 f4       	brcc	.+42     	; 0x24d6 <AICI_InterpretPacket+0x17e>
    24ac:	e1 2f       	mov	r30, r17
    24ae:	ff 27       	eor	r31, r31
    24b0:	ec 5c       	subi	r30, 0xCC	; 204
    24b2:	fe 4f       	sbci	r31, 0xFE	; 254
    24b4:	83 81       	ldd	r24, Z+3	; 0x03
    24b6:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    24ba:	1e 15       	cp	r17, r14
    24bc:	40 f0       	brcs	.+16     	; 0x24ce <AICI_InterpretPacket+0x176>
    24be:	cf 15       	cp	r28, r15
    24c0:	30 f4       	brcc	.+12     	; 0x24ce <AICI_InterpretPacket+0x176>
    24c2:	ec 2f       	mov	r30, r28
    24c4:	ff 27       	eor	r31, r31
    24c6:	ec 5c       	subi	r30, 0xCC	; 204
    24c8:	fe 4f       	sbci	r31, 0xFE	; 254
    24ca:	82 83       	std	Z+2, r24	; 0x02
    24cc:	cf 5f       	subi	r28, 0xFF	; 255
    24ce:	81 2f       	mov	r24, r17
    24d0:	1f 5f       	subi	r17, 0xFF	; 255
    24d2:	80 17       	cp	r24, r16
    24d4:	58 f3       	brcs	.-42     	; 0x24ac <AICI_InterpretPacket+0x154>
				}

				while (RxByteNum++ < RxBytes)                         // Still more bytes to recieve
				   PacketBytes[2 + RxByteNum] = USI_SPITransmit(0x00); // its answer to be recorded (or more bytes than sent need responses), send dummy bytes to fetch the response(s)
    24d6:	8c 2f       	mov	r24, r28
    24d8:	cf 5f       	subi	r28, 0xFF	; 255
    24da:	8f 15       	cp	r24, r15
    24dc:	50 f4       	brcc	.+20     	; 0x24f2 <AICI_InterpretPacket+0x19a>
    24de:	0c 2f       	mov	r16, r28
    24e0:	11 27       	eor	r17, r17
    24e2:	0c 5c       	subi	r16, 0xCC	; 204
    24e4:	1e 4f       	sbci	r17, 0xFE	; 254
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    24ec:	f8 01       	movw	r30, r16
    24ee:	82 83       	std	Z+2, r24	; 0x02
    24f0:	f2 cf       	rjmp	.-28     	; 0x24d6 <AICI_InterpretPacket+0x17e>

				PacketBytes[1]             = STATUS_CMD_OK; // Data should be encompassed
    24f2:	10 92 35 01 	sts	0x0135, r1
				PacketBytes[3 + RxByteNum] = STATUS_CMD_OK; //  by STATS_CMD_OKs
    24f6:	ec 2f       	mov	r30, r28
    24f8:	ff 27       	eor	r31, r31
    24fa:	ec 5c       	subi	r30, 0xCC	; 204
    24fc:	fe 4f       	sbci	r31, 0xFE	; 254
    24fe:	13 82       	std	Z+3, r1	; 0x03

				break;
    2500:	90 c0       	rjmp	.+288    	; 0x2622 <AICI_InterpretPacket+0x2ca>
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;
    2502:	84 e0       	ldi	r24, 0x04	; 4
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	90 93 31 01 	sts	0x0131, r25
    250a:	80 93 30 01 	sts	0x0130, r24
	
			for (uint8_t ByteNum = 1; ByteNum <= 4; ByteNum++)
    250e:	c1 e0       	ldi	r28, 0x01	; 1
    2510:	06 e3       	ldi	r16, 0x36	; 54
    2512:	11 e0       	ldi	r17, 0x01	; 1
			{
				uint8_t Response = USI_SPITransmit(PacketBytes[1 + ByteNum]); // Transmit the four signature request bytes
    2514:	f8 01       	movw	r30, r16
    2516:	81 91       	ld	r24, Z+
    2518:	8f 01       	movw	r16, r30
    251a:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    251e:	98 2f       	mov	r25, r24

				if (ByteNum == PacketBytes[1])         // If the current byte is the requested signature byte, save the reponse in the packet
    2520:	80 91 35 01 	lds	r24, 0x0135
    2524:	c8 17       	cp	r28, r24
    2526:	11 f4       	brne	.+4      	; 0x252c <AICI_InterpretPacket+0x1d4>
					PacketBytes[2] = Response;
    2528:	90 93 36 01 	sts	0x0136, r25
    252c:	cf 5f       	subi	r28, 0xFF	; 255
    252e:	c5 30       	cpi	r28, 0x05	; 5
    2530:	88 f3       	brcs	.-30     	; 0x2514 <AICI_InterpretPacket+0x1bc>
			}

			PacketBytes[1] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    2532:	10 92 35 01 	sts	0x0135, r1
			PacketBytes[3] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    2536:	10 92 37 01 	sts	0x0137, r1

			break;
    253a:	73 c0       	rjmp	.+230    	; 0x2622 <AICI_InterpretPacket+0x2ca>
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;
    253c:	83 e0       	ldi	r24, 0x03	; 3
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	90 93 31 01 	sts	0x0131, r25
    2544:	80 93 30 01 	sts	0x0130, r24
    2548:	05 e3       	ldi	r16, 0x35	; 53
    254a:	11 e0       	ldi	r17, 0x01	; 1
    254c:	c3 e0       	ldi	r28, 0x03	; 3
			
			for (uint8_t PacketB = 1; PacketB <= 4; PacketB++) // Send the lock-byte values to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    254e:	f8 01       	movw	r30, r16
    2550:	81 91       	ld	r24, Z+
    2552:	8f 01       	movw	r16, r30
    2554:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2558:	c1 50       	subi	r28, 0x01	; 1
    255a:	c7 ff       	sbrs	r28, 7
    255c:	f8 cf       	rjmp	.-16     	; 0x254e <AICI_InterpretPacket+0x1f6>

			PacketBytes[1] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    255e:	10 92 35 01 	sts	0x0135, r1
			PacketBytes[2] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    2562:	10 92 36 01 	sts	0x0136, r1

			break;
    2566:	5d c0       	rjmp	.+186    	; 0x2622 <AICI_InterpretPacket+0x2ca>
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			MessageSize = 0;                           // Here to prevent compiler from complaining if a var dec appears straight after a case

			uint8_t  ReadCommand = PacketBytes[3];
    2568:	d0 90 37 01 	lds	r13, 0x0137
			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8) // Load in the number of bytes that is to
    256c:	80 91 35 01 	lds	r24, 0x0135
    2570:	99 27       	eor	r25, r25
    2572:	d8 2f       	mov	r29, r24
    2574:	cc 27       	eor	r28, r28
    2576:	80 91 36 01 	lds	r24, 0x0136
    257a:	99 27       	eor	r25, r25
    257c:	c8 2b       	or	r28, r24
    257e:	d9 2b       	or	r29, r25
			                     | PacketBytes[2];                 // be read into a temp variable (MSB first)

			MessageSize = BytesToRead + 3;
    2580:	23 96       	adiw	r28, 0x03	; 3
    2582:	d0 93 31 01 	sts	0x0131, r29
    2586:	c0 93 30 01 	sts	0x0130, r28
    258a:	23 97       	sbiw	r28, 0x03	; 3

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
    258c:	00 e0       	ldi	r16, 0x00	; 0
    258e:	10 e0       	ldi	r17, 0x00	; 0
    2590:	0c 17       	cp	r16, r28
    2592:	1d 07       	cpc	r17, r29
    2594:	60 f5       	brcc	.+88     	; 0x25ee <AICI_InterpretPacket+0x296>
    2596:	86 e3       	ldi	r24, 0x36	; 54
    2598:	e8 2e       	mov	r14, r24
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	f8 2e       	mov	r15, r24
			{
				if (PacketBytes[0] == CMD_READ_FLASH_ISP)  // Flash read mode - word addresses so MSB/LSB masking nessesary
    259e:	80 91 34 01 	lds	r24, 0x0134
    25a2:	84 31       	cpi	r24, 0x14	; 20
    25a4:	31 f4       	brne	.+12     	; 0x25b2 <AICI_InterpretPacket+0x25a>
				{
					USI_SPITransmit(ReadCommand | ((ReadByte & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ));
    25a6:	8d 2d       	mov	r24, r13
    25a8:	99 27       	eor	r25, r25
    25aa:	00 ff       	sbrs	r16, 0
    25ac:	03 c0       	rjmp	.+6      	; 0x25b4 <AICI_InterpretPacket+0x25c>
    25ae:	88 60       	ori	r24, 0x08	; 8
    25b0:	01 c0       	rjmp	.+2      	; 0x25b4 <AICI_InterpretPacket+0x25c>
				}
				else                                       // EEPROM read mode, address is in bytes and so no masking nessesary
				{
					USI_SPITransmit(ReadCommand);
    25b2:	8d 2d       	mov	r24, r13
    25b4:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
				}
				
				USI_SPITransmitWord(CurrAddress);          // Transmit the current address to the slave AVR
    25b8:	80 91 2b 01 	lds	r24, 0x012B
    25bc:	90 91 2c 01 	lds	r25, 0x012C
    25c0:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>

				PacketBytes[2 + ReadByte] = USI_SPITransmit(0x00); // Read in the byte stored at the requested location
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    25ca:	f7 01       	movw	r30, r14
    25cc:	80 83       	st	Z, r24

				if ((ReadByte & 0x01) || (PacketBytes[0] == CMD_READ_EEPROM_ISP)) // Flash addresses are given in words; only increment on the odd byte if reading the flash.
    25ce:	00 fd       	sbrc	r16, 0
    25d0:	04 c0       	rjmp	.+8      	; 0x25da <AICI_InterpretPacket+0x282>
    25d2:	80 91 34 01 	lds	r24, 0x0134
    25d6:	86 31       	cpi	r24, 0x16	; 22
    25d8:	11 f4       	brne	.+4      	; 0x25de <AICI_InterpretPacket+0x286>
				{
					V2P_IncrementCurrAddress();             // Increment the address counter
    25da:	0e 94 79 0e 	call	0x1cf2 <V2P_IncrementCurrAddress>
    25de:	0f 5f       	subi	r16, 0xFF	; 255
    25e0:	1f 4f       	sbci	r17, 0xFF	; 255
    25e2:	08 94       	sec
    25e4:	e1 1c       	adc	r14, r1
    25e6:	f1 1c       	adc	r15, r1
    25e8:	0c 17       	cp	r16, r28
    25ea:	1d 07       	cpc	r17, r29
    25ec:	c0 f2       	brcs	.-80     	; 0x259e <AICI_InterpretPacket+0x246>
				}
				else
				{
					if ((CurrAddress & 0x00FF0000) & !(CurrAddress & 0x0000FFFF))
					{
						CurrAddress |= (1UL << 31);        // Set MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
						V2P_CheckForExtendedAddress();
					}
				}
			}
			
			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    25ee:	10 92 35 01 	sts	0x0135, r1
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    25f2:	cc 5c       	subi	r28, 0xCC	; 204
    25f4:	de 4f       	sbci	r29, 0xFE	; 254
    25f6:	1a 82       	std	Y+2, r1	; 0x02

			break;
    25f8:	14 c0       	rjmp	.+40     	; 0x2622 <AICI_InterpretPacket+0x2ca>
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPCC_ProgramChip();                          // Program the bytes into the chip
    25fa:	0e 94 c4 10 	call	0x2188 <ISPCC_ProgramChip>
			
			MessageSize = 2;
    25fe:	82 e0       	ldi	r24, 0x02	; 2
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	90 93 31 01 	sts	0x0131, r25
    2606:	80 93 30 01 	sts	0x0130, r24

			PacketBytes[1] = STATUS_CMD_OK;
    260a:	10 92 35 01 	sts	0x0135, r1
			
			break;
    260e:	09 c0       	rjmp	.+18     	; 0x2622 <AICI_InterpretPacket+0x2ca>
		default:                                        // Unknown command, return error
			MessageSize = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	90 93 31 01 	sts	0x0131, r25
    2618:	80 93 30 01 	sts	0x0130, r24
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
    261c:	89 ec       	ldi	r24, 0xC9	; 201
    261e:	80 93 35 01 	sts	0x0135, r24
	}

	V2P_SendPacket();                                   // Send the response packet
    2622:	0e 94 9f 0d 	call	0x1b3e <V2P_SendPacket>
    2626:	df 91       	pop	r29
    2628:	cf 91       	pop	r28
    262a:	1f 91       	pop	r17
    262c:	0f 91       	pop	r16
    262e:	ff 90       	pop	r15
    2630:	ef 90       	pop	r14
    2632:	df 90       	pop	r13
    2634:	08 95       	ret

00002636 <PM_GetStoredDataSize>:

// ======================================================================================

uint32_t PM_GetStoredDataSize(uint8_t Type)
{
    2636:	ef 92       	push	r14
    2638:	ff 92       	push	r15
    263a:	0f 93       	push	r16
    263c:	1f 93       	push	r17
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	22 97       	sbiw	r28, 0x02	; 2
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
	/* This take a **LOT** of code (202 bytes), and is accessed several times throughout
	   the program, so I've put it into a seperate function to save on flash.            */

	uint32_t ProgDataSize = 0;
	uint16_t EEPROMAddress;

	EEPROMAddress = ((Type == TYPE_FLASH)? Prog_DataSize : Prog_EEPROMSize);
    2652:	81 30       	cpi	r24, 0x01	; 1
    2654:	29 f4       	brne	.+10     	; 0x2660 <PM_GetStoredDataSize+0x2a>
    2656:	80 91 16 01 	lds	r24, 0x0116
    265a:	90 91 17 01 	lds	r25, 0x0117
    265e:	04 c0       	rjmp	.+8      	; 0x2668 <PM_GetStoredDataSize+0x32>
    2660:	80 91 14 01 	lds	r24, 0x0114
    2664:	90 91 15 01 	lds	r25, 0x0115
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01
	ProgDataSize  = ((uint32_t)eeprom_read_byte_169(&EEPROMAddress) << 24);
    266c:	ce 01       	movw	r24, r28
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    2674:	99 27       	eor	r25, r25
    2676:	aa 27       	eor	r26, r26
    2678:	bb 27       	eor	r27, r27
    267a:	18 2f       	mov	r17, r24
    267c:	00 27       	eor	r16, r16
    267e:	ff 24       	eor	r15, r15
    2680:	ee 24       	eor	r14, r14
	EEPROMAddress++;
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	9a 81       	ldd	r25, Y+2	; 0x02
    2686:	01 96       	adiw	r24, 0x01	; 1
    2688:	9a 83       	std	Y+2, r25	; 0x02
    268a:	89 83       	std	Y+1, r24	; 0x01
	ProgDataSize |= ((uint32_t)eeprom_read_byte_169(&EEPROMAddress) << 16);
    268c:	ce 01       	movw	r24, r28
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    2694:	99 27       	eor	r25, r25
    2696:	aa 27       	eor	r26, r26
    2698:	bb 27       	eor	r27, r27
    269a:	dc 01       	movw	r26, r24
    269c:	99 27       	eor	r25, r25
    269e:	88 27       	eor	r24, r24
    26a0:	e8 2a       	or	r14, r24
    26a2:	f9 2a       	or	r15, r25
    26a4:	0a 2b       	or	r16, r26
    26a6:	1b 2b       	or	r17, r27
	EEPROMAddress++;
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	01 96       	adiw	r24, 0x01	; 1
    26ae:	9a 83       	std	Y+2, r25	; 0x02
    26b0:	89 83       	std	Y+1, r24	; 0x01
	ProgDataSize |= ((uint32_t)eeprom_read_byte_169(&EEPROMAddress) << 8);
    26b2:	ce 01       	movw	r24, r28
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    26ba:	99 27       	eor	r25, r25
    26bc:	aa 27       	eor	r26, r26
    26be:	bb 27       	eor	r27, r27
    26c0:	ba 2f       	mov	r27, r26
    26c2:	a9 2f       	mov	r26, r25
    26c4:	98 2f       	mov	r25, r24
    26c6:	88 27       	eor	r24, r24
    26c8:	e8 2a       	or	r14, r24
    26ca:	f9 2a       	or	r15, r25
    26cc:	0a 2b       	or	r16, r26
    26ce:	1b 2b       	or	r17, r27
	EEPROMAddress++;
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	9a 81       	ldd	r25, Y+2	; 0x02
    26d4:	01 96       	adiw	r24, 0x01	; 1
    26d6:	9a 83       	std	Y+2, r25	; 0x02
    26d8:	89 83       	std	Y+1, r24	; 0x01
	ProgDataSize |= eeprom_read_byte_169(&EEPROMAddress);
    26da:	ce 01       	movw	r24, r28
    26dc:	01 96       	adiw	r24, 0x01	; 1
    26de:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    26e2:	99 27       	eor	r25, r25
    26e4:	aa 27       	eor	r26, r26
    26e6:	bb 27       	eor	r27, r27
    26e8:	e8 2a       	or	r14, r24
    26ea:	f9 2a       	or	r15, r25
    26ec:	0a 2b       	or	r16, r26
    26ee:	1b 2b       	or	r17, r27

	if (ProgDataSize == 0xFFFFFFFF)                                      // Blank EEPROM, return a size  of 0 bytes
    26f0:	8f ef       	ldi	r24, 0xFF	; 255
    26f2:	e8 16       	cp	r14, r24
    26f4:	8f ef       	ldi	r24, 0xFF	; 255
    26f6:	f8 06       	cpc	r15, r24
    26f8:	8f ef       	ldi	r24, 0xFF	; 255
    26fa:	08 07       	cpc	r16, r24
    26fc:	8f ef       	ldi	r24, 0xFF	; 255
    26fe:	18 07       	cpc	r17, r24
    2700:	19 f4       	brne	.+6      	; 0x2708 <PM_GetStoredDataSize+0xd2>
	   ProgDataSize = 0x00;
    2702:	ee 24       	eor	r14, r14
    2704:	ff 24       	eor	r15, r15
    2706:	87 01       	movw	r16, r14

	return ProgDataSize;
}
    2708:	c8 01       	movw	r24, r16
    270a:	b7 01       	movw	r22, r14
    270c:	22 96       	adiw	r28, 0x02	; 2
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	1f 91       	pop	r17
    271e:	0f 91       	pop	r16
    2720:	ff 90       	pop	r15
    2722:	ef 90       	pop	r14
    2724:	08 95       	ret

00002726 <PM_SetupDFAddressCounters>:

void PM_SetupDFAddressCounters(uint8_t Type)
{
	uint32_t StartAddress;
	
	MemoryType  = Type;
    2726:	80 93 4a 02 	sts	0x024A, r24
	GPageLength = 0;
    272a:	10 92 48 02 	sts	0x0248, r1
    272e:	10 92 47 02 	sts	0x0247, r1
    2732:	20 91 2b 01 	lds	r18, 0x012B
    2736:	30 91 2c 01 	lds	r19, 0x012C
    273a:	40 91 2d 01 	lds	r20, 0x012D
    273e:	50 91 2e 01 	lds	r21, 0x012E

	if (Type == TYPE_FLASH)                                              // Type 1 = Flash
    2742:	81 30       	cpi	r24, 0x01	; 1
    2744:	39 f4       	brne	.+14     	; 0x2754 <PM_SetupDFAddressCounters+0x2e>
		StartAddress = (CurrAddress << 1);                               // Convert flash word address to byte address
    2746:	da 01       	movw	r26, r20
    2748:	c9 01       	movw	r24, r18
    274a:	88 0f       	add	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	aa 1f       	adc	r26, r26
    2750:	bb 1f       	adc	r27, r27
    2752:	06 c0       	rjmp	.+12     	; 0x2760 <PM_SetupDFAddressCounters+0x3a>
	else
		StartAddress = CurrAddress + PM_EEPROM_OFFSET;                   // EEPROM uses byte addresses, and starts at the 257th kilobyte in Dataflash
    2754:	da 01       	movw	r26, r20
    2756:	c9 01       	movw	r24, r18
    2758:	80 50       	subi	r24, 0x00	; 0
    275a:	9c 4f       	sbci	r25, 0xFC	; 252
    275c:	ab 4f       	sbci	r26, 0xFB	; 251
    275e:	bf 4f       	sbci	r27, 0xFF	; 255
	
	CurrPageAddress = 0;
    2760:	10 92 8c 02 	sts	0x028C, r1
    2764:	10 92 8b 02 	sts	0x028B, r1

	while (StartAddress >= DF_INTERNALDF_BUFFBYTES)                      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DF_INTERNALDF_BUFFBYTES;                         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    2768:	88 30       	cpi	r24, 0x08	; 8
    276a:	21 e0       	ldi	r18, 0x01	; 1
    276c:	92 07       	cpc	r25, r18
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	a2 07       	cpc	r26, r18
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	b2 07       	cpc	r27, r18
    2776:	a0 f0       	brcs	.+40     	; 0x27a0 <PM_SetupDFAddressCounters+0x7a>
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	88 50       	subi	r24, 0x08	; 8
    277e:	91 40       	sbci	r25, 0x01	; 1
    2780:	a0 40       	sbci	r26, 0x00	; 0
    2782:	b0 40       	sbci	r27, 0x00	; 0
    2784:	2f 5f       	subi	r18, 0xFF	; 255
    2786:	3f 4f       	sbci	r19, 0xFF	; 255
    2788:	88 30       	cpi	r24, 0x08	; 8
    278a:	41 e0       	ldi	r20, 0x01	; 1
    278c:	94 07       	cpc	r25, r20
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	a4 07       	cpc	r26, r20
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	b4 07       	cpc	r27, r20
    2796:	90 f7       	brcc	.-28     	; 0x277c <PM_SetupDFAddressCounters+0x56>
    2798:	30 93 8c 02 	sts	0x028C, r19
    279c:	20 93 8b 02 	sts	0x028B, r18
	}
	
	CurrBuffByte = (uint16_t)StartAddress;                               // The buffer byte is the remainder
    27a0:	90 93 85 02 	sts	0x0285, r25
    27a4:	80 93 84 02 	sts	0x0284, r24
    27a8:	08 95       	ret

000027aa <PM_StoreProgramByte>:
}

void PM_StoreProgramByte(uint8_t Data)
{
    27aa:	cf 93       	push	r28
    27ac:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DF_INTERNALDF_BUFFBYTES)
    27ae:	80 91 84 02 	lds	r24, 0x0284
    27b2:	90 91 85 02 	lds	r25, 0x0285
    27b6:	88 50       	subi	r24, 0x08	; 8
    27b8:	91 40       	sbci	r25, 0x01	; 1
    27ba:	a9 f4       	brne	.+42     	; 0x27e6 <PM_StoreProgramByte+0x3c>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    27bc:	80 91 8b 02 	lds	r24, 0x028B
    27c0:	90 91 8c 02 	lds	r25, 0x028C
    27c4:	9c 01       	movw	r18, r24
    27c6:	01 96       	adiw	r24, 0x01	; 1
    27c8:	90 93 8c 02 	sts	0x028C, r25
    27cc:	80 93 8b 02 	sts	0x028B, r24
    27d0:	c9 01       	movw	r24, r18
    27d2:	0e 94 c1 0a 	call	0x1582 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	0e 94 ff 09 	call	0x13fe <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    27de:	10 92 85 02 	sts	0x0285, r1
    27e2:	10 92 84 02 	sts	0x0284, r1
	}
	
	SPI_SPITransmit(Data);                                               // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    27e6:	8c 2f       	mov	r24, r28
    27e8:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
	CurrBuffByte++;
    27ec:	80 91 84 02 	lds	r24, 0x0284
    27f0:	90 91 85 02 	lds	r25, 0x0285
    27f4:	01 96       	adiw	r24, 0x01	; 1
    27f6:	90 93 85 02 	sts	0x0285, r25
    27fa:	80 93 84 02 	sts	0x0284, r24
	GPageLength++;
    27fe:	80 91 47 02 	lds	r24, 0x0247
    2802:	90 91 48 02 	lds	r25, 0x0248
    2806:	01 96       	adiw	r24, 0x01	; 1
    2808:	90 93 48 02 	sts	0x0248, r25
    280c:	80 93 47 02 	sts	0x0247, r24
    2810:	cf 91       	pop	r28
    2812:	08 95       	ret

00002814 <PM_CheckEndOfProgramming>:
}

void PM_InterpretAVRISPPacket(void)
{
	uint16_t EEPROMAddress;

	switch (PacketBytes[0])
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
			
			EEPROMAddress = Prog_EnterProgMode;
			
			for (uint8_t PacketB = 0; PacketB <= 11; PacketB++)          // Save the enter programming mode command bytes
			{
				eeprom_write_byte_169(&EEPROMAddress, PacketBytes[PacketB]);
				EEPROMAddress++;
			}
			
			InProgrammingMode = TRUE;                                    // Set the flag, prevent the user from exiting the V2P state machine			
			CurrentMode = PM_NO_SETUP;                                   // Clear the current mode variable

			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;

			break;			
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;

			PM_CheckEndOfProgramming();                                  // Check if the last command was a program - if so store the program length
			PM_CheckEndOfFuseLockStore();                                // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
			
			InProgrammingMode = FALSE;                                   // Clear the flag, allow the user to exit the V2P state machine

			DF_EnableDataflash(FALSE);

			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
			PacketBytes[1] = STATUS_CMD_OK;

			break;
		case CMD_READ_SIGNATURE_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x01;                                       // Signature bytes all return "01" in storage mode
			PacketBytes[3] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;

			EEPROMAddress = Prog_EraseChip;                              // Program erase chip command start address
			
			for (uint8_t PacketB = 1; PacketB <= 6; PacketB++)          // Save the erase chip command bytes to EEPROM
			{
				eeprom_write_byte_169(&EEPROMAddress, PacketBytes[PacketB]);
				EEPROMAddress++;
			}

			EEPROMAddress = Prog_DataSize;
										
			for (uint8_t Byte = 0; Byte < 8; Byte++)                    // Clear the program and EEPROM size counters
			{
				if (Byte == 4)
				   EEPROMAddress = Prog_EEPROMSize;

				eeprom_write_byte_169(&EEPROMAddress, 0x00);
				EEPROMAddress++;						
			}
						
			eeprom_write_byte_169(&Prog_EraseCmdStored, TRUE);
			
			PacketBytes[1] = STATUS_CMD_OK;
			
			break;
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x00;                                      // Return 0x00 for the OSCCAL byte
			PacketBytes[3] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs

			break;
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
			MessageSize = 4;
	
			if (CurrentMode != PM_LOCKFUSEBITS_READ)                    // First lock or fuse byte being read, set the EEPROM pointer
			{
				PM_CheckEndOfProgramming();                             // Check if the last command was a program - if so store the program length
				PM_CheckEndOfFuseLockStore();                           // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
				
				CurrBuffByte = 0;
				CurrentMode  = PM_LOCKFUSEBITS_READ;
			}
			
			EEPROMAddress = ((PacketBytes[0] == CMD_READ_FUSE_ISP)? Prog_TotalFuseBytes : Prog_TotalLockBytes);

			if (CurrBuffByte > eeprom_read_byte_169(&EEPROMAddress))    // Trying to read more fuse/lock bytes than are stored in memory
			{
				PacketBytes[2] = 0xFF;                                  // Return 0xFF for the fuse/lock byte
			}
			else
			{
				EEPROMAddress  = ((PacketBytes[0] == CMD_READ_FUSE_ISP)? Prog_FuseBytes : Prog_LockBytes) // Starting location
									+ (CurrBuffByte << 2) + (PacketBytes[1] - 1); // The start position of the actual fuse/lock byte to read (4 bytes each)

				PacketBytes[2] = eeprom_read_byte_169(&EEPROMAddress); // Return the fuse/lock byte
			}

			PacketBytes[1] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs
			PacketBytes[3] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs

			CurrBuffByte++;

			break;
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;

			if (CurrentMode != PM_LOCKFUSEBITS_WRITE)                  // First lock or fuse byte being written, set the EEPROM pointer
			{
				CurrentMode   = PM_LOCKFUSEBITS_WRITE;
				CurrBuffByte  = 0;                                     // CurrBuffByte is used to store the total fuse/lock bytes written
			}

			if (PacketBytes[0] == CMD_PROGRAM_FUSE_ISP)
			{
				EEPROMAddress = Prog_FuseBytes + (CurrBuffByte << 2);
				MemoryType    = TYPE_FUSE;
			}
			else
			{
				EEPROMAddress = Prog_LockBytes + (CurrBuffByte << 2);
				MemoryType    = TYPE_LOCK;
			}				
			
			if (CurrBuffByte < PM_MAX_FUSELOCKBITS)
			{
				for (uint8_t FLByte = 1; FLByte <= 4; FLByte++)
				{
					eeprom_write_byte_169(&EEPROMAddress, PacketBytes[FLByte]);
					EEPROMAddress++;
				}

				CurrBuffByte++;                                        // Increment the total fuse/lock bytes written counter
			}
			
			PacketBytes[1] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned
			PacketBytes[2] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned

			break;
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			MessageSize = 2;

			if (CurrentMode != PM_DATAFLASH_WRITE)                     // First programming packet
			{
				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)           // Flash programming mode
				{
					EEPROMAddress = Prog_WriteProgram;                 // Set the eeprom address to the Program command bytes location
					PM_SetupDFAddressCounters(TYPE_FLASH);
				}
				else                                                  // EEPROM programming mode
				{
					EEPROMAddress = Prog_WriteEEPROM;                  // Set the eeprom address to the EEPROM command bytes location
					PM_SetupDFAddressCounters(TYPE_EEPROM);
				}
				
				DF_BufferWriteEnable(CurrBuffByte);
				CurrentMode = PM_DATAFLASH_WRITE;
				
				for (uint8_t B = 1; B <= 9; B++)                       // Save the command bytes
				{
					eeprom_write_byte_169(&EEPROMAddress, PacketBytes[B]);
					EEPROMAddress++;				
				}
			}

			uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
			                      | PacketBytes[2];

			for (uint16_t CurrByte = 0; CurrByte < BytesToWrite; CurrByte++)
				PM_StoreProgramByte(PacketBytes[10 + CurrByte]);

			if (!(GPageLength & PM_PAGELENGTH_FOUNDBIT) && (PacketBytes[3] & ISPCC_PROG_MODE_PAGEDONE) && GPageLength)
			{
				EEPROMAddress = ((MemoryType == TYPE_FLASH)? Prog_PageLength : Prog_EPageLength);
	
				eeprom_write_byte_169(&EEPROMAddress, (uint8_t)(GPageLength >> 8));
				EEPROMAddress++;
				eeprom_write_byte_169(&EEPROMAddress, (uint8_t)GPageLength);		
		
				GPageLength |= PM_PAGELENGTH_FOUNDBIT;                 // Bit 15 is used to indicate if the length has been found
			}

			PacketBytes[1] = STATUS_CMD_OK;
		
			break;
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:	
			if (CurrentMode != PM_DATAFLASH_READ)
			{
				PM_CheckEndOfProgramming();                           // Check if the last command was a program - if so store the program length
				PM_CheckEndOfFuseLockStore();                         // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
				
				PM_SetupDFAddressCounters((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);
				DF_ContinuousReadEnable(CurrPageAddress, CurrBuffByte);
				
				CurrentMode = PM_DATAFLASH_READ;
				CurrAddress = 0;
			}

			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8)    // \. Load in the number of bytes that is to
			                     | PacketBytes[2];                    // /  be read into a temp variable (MSB first)
						
			uint16_t BytesInMem  = PM_GetStoredDataSize((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
			   PacketBytes[2 + ReadByte] = ((CurrAddress < BytesInMem)? SPI_SPITransmit(0x00) : 0xFF); // Read in the next dataflash byte if present
			   V2P_IncrementCurrAddress();
			}
			
			MessageSize = BytesToRead + 3;

			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
		
			break;
		default:
			MessageSize = 1;
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
	}

	V2P_SendPacket();                                   // Send the response packet
}

void PM_CheckEndOfProgramming(void)
{
    2814:	ef 92       	push	r14
    2816:	ff 92       	push	r15
    2818:	0f 93       	push	r16
    281a:	1f 93       	push	r17
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	22 97       	sbiw	r28, 0x02	; 2
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61
   uint16_t EEPROMAddress;

   if (CurrentMode == PM_DATAFLASH_WRITE)
    2830:	80 91 49 02 	lds	r24, 0x0249
    2834:	81 30       	cpi	r24, 0x01	; 1
    2836:	09 f0       	breq	.+2      	; 0x283a <PM_CheckEndOfProgramming+0x26>
    2838:	6d c0       	rjmp	.+218    	; 0x2914 <PM_CheckEndOfProgramming+0x100>
   {
      if (CurrBuffByte)                               // Data in the dataflash buffer, pending to be written
    283a:	80 91 84 02 	lds	r24, 0x0284
    283e:	90 91 85 02 	lds	r25, 0x0285
    2842:	89 2b       	or	r24, r25
    2844:	31 f0       	breq	.+12     	; 0x2852 <PM_CheckEndOfProgramming+0x3e>
         DF_CopyBufferToFlashPage(CurrPageAddress);   // Save the buffer
    2846:	80 91 8b 02 	lds	r24, 0x028B
    284a:	90 91 8c 02 	lds	r25, 0x028C
    284e:	0e 94 c1 0a 	call	0x1582 <DF_CopyBufferToFlashPage>

      uint32_t DataSize = ((uint32_t)CurrPageAddress * DF_INTERNALDF_BUFFBYTES) + CurrBuffByte;
    2852:	80 91 8b 02 	lds	r24, 0x028B
    2856:	90 91 8c 02 	lds	r25, 0x028C
    285a:	aa 27       	eor	r26, r26
    285c:	bb 27       	eor	r27, r27
    285e:	bc 01       	movw	r22, r24
    2860:	cd 01       	movw	r24, r26
    2862:	28 e0       	ldi	r18, 0x08	; 8
    2864:	31 e0       	ldi	r19, 0x01	; 1
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	50 e0       	ldi	r21, 0x00	; 0
    286a:	0e 94 12 1b 	call	0x3624 <__mulsi3>
    286e:	7b 01       	movw	r14, r22
    2870:	8c 01       	movw	r16, r24
    2872:	80 91 84 02 	lds	r24, 0x0284
    2876:	90 91 85 02 	lds	r25, 0x0285
    287a:	aa 27       	eor	r26, r26
    287c:	bb 27       	eor	r27, r27
    287e:	e8 0e       	add	r14, r24
    2880:	f9 1e       	adc	r15, r25
    2882:	0a 1f       	adc	r16, r26
    2884:	1b 1f       	adc	r17, r27

      if (MemoryType == TYPE_FLASH)
    2886:	80 91 4a 02 	lds	r24, 0x024A
    288a:	81 30       	cpi	r24, 0x01	; 1
    288c:	39 f4       	brne	.+14     	; 0x289c <PM_CheckEndOfProgramming+0x88>
      {
         EEPROMAddress = Prog_DataSize;       
    288e:	80 91 16 01 	lds	r24, 0x0116
    2892:	90 91 17 01 	lds	r25, 0x0117
    2896:	9a 83       	std	Y+2, r25	; 0x02
    2898:	89 83       	std	Y+1, r24	; 0x01
    289a:	0e c0       	rjmp	.+28     	; 0x28b8 <PM_CheckEndOfProgramming+0xa4>
      }
      else
      {
         EEPROMAddress = Prog_EEPROMSize;
    289c:	80 91 14 01 	lds	r24, 0x0114
    28a0:	90 91 15 01 	lds	r25, 0x0115
    28a4:	9a 83       	std	Y+2, r25	; 0x02
    28a6:	89 83       	std	Y+1, r24	; 0x01
         DataSize -= PM_EEPROM_OFFSET;                // Remove DataFlash starting offset
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	9c ef       	ldi	r25, 0xFC	; 252
    28ac:	ab ef       	ldi	r26, 0xFB	; 251
    28ae:	bf ef       	ldi	r27, 0xFF	; 255
    28b0:	e8 0e       	add	r14, r24
    28b2:	f9 1e       	adc	r15, r25
    28b4:	0a 1f       	adc	r16, r26
    28b6:	1b 1f       	adc	r17, r27
      }

      eeprom_write_byte_169(&EEPROMAddress, (DataSize >> 24));
    28b8:	81 2f       	mov	r24, r17
    28ba:	99 27       	eor	r25, r25
    28bc:	aa 27       	eor	r26, r26
    28be:	bb 27       	eor	r27, r27
    28c0:	68 2f       	mov	r22, r24
    28c2:	ce 01       	movw	r24, r28
    28c4:	01 96       	adiw	r24, 0x01	; 1
    28c6:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
      EEPROMAddress++;
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	9a 81       	ldd	r25, Y+2	; 0x02
    28ce:	01 96       	adiw	r24, 0x01	; 1
    28d0:	9a 83       	std	Y+2, r25	; 0x02
    28d2:	89 83       	std	Y+1, r24	; 0x01
      eeprom_write_byte_169(&EEPROMAddress, (DataSize >> 16));             
    28d4:	c8 01       	movw	r24, r16
    28d6:	aa 27       	eor	r26, r26
    28d8:	bb 27       	eor	r27, r27
    28da:	68 2f       	mov	r22, r24
    28dc:	ce 01       	movw	r24, r28
    28de:	01 96       	adiw	r24, 0x01	; 1
    28e0:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
      EEPROMAddress++;
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	01 96       	adiw	r24, 0x01	; 1
    28ea:	9a 83       	std	Y+2, r25	; 0x02
    28ec:	89 83       	std	Y+1, r24	; 0x01
      eeprom_write_byte_169(&EEPROMAddress, (DataSize >> 8));
    28ee:	bb 27       	eor	r27, r27
    28f0:	a1 2f       	mov	r26, r17
    28f2:	90 2f       	mov	r25, r16
    28f4:	8f 2d       	mov	r24, r15
    28f6:	68 2f       	mov	r22, r24
    28f8:	ce 01       	movw	r24, r28
    28fa:	01 96       	adiw	r24, 0x01	; 1
    28fc:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
      EEPROMAddress++;
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	01 96       	adiw	r24, 0x01	; 1
    2906:	9a 83       	std	Y+2, r25	; 0x02
    2908:	89 83       	std	Y+1, r24	; 0x01
      eeprom_write_byte_169(&EEPROMAddress, DataSize);
    290a:	6e 2d       	mov	r22, r14
    290c:	ce 01       	movw	r24, r28
    290e:	01 96       	adiw	r24, 0x01	; 1
    2910:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
    2914:	22 96       	adiw	r28, 0x02	; 2
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	cd bf       	out	0x3d, r28	; 61
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	ff 90       	pop	r15
    292a:	ef 90       	pop	r14
    292c:	08 95       	ret

0000292e <PM_CheckEndOfFuseLockStore>:
   }
}

void PM_CheckEndOfFuseLockStore(void)
{
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	22 97       	sbiw	r28, 0x02	; 2
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	f8 94       	cli
    293c:	de bf       	out	0x3e, r29	; 62
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	cd bf       	out	0x3d, r28	; 61
	uint16_t EEPROMAddress;

	if (CurrentMode == PM_LOCKFUSEBITS_WRITE)
    2942:	80 91 49 02 	lds	r24, 0x0249
    2946:	83 30       	cpi	r24, 0x03	; 3
    2948:	a9 f4       	brne	.+42     	; 0x2974 <PM_CheckEndOfFuseLockStore+0x46>
	{
		EEPROMAddress = ((MemoryType == TYPE_FUSE)? Prog_TotalFuseBytes : Prog_TotalLockBytes);
    294a:	80 91 4a 02 	lds	r24, 0x024A
    294e:	82 30       	cpi	r24, 0x02	; 2
    2950:	29 f4       	brne	.+10     	; 0x295c <PM_CheckEndOfFuseLockStore+0x2e>
    2952:	80 91 10 01 	lds	r24, 0x0110
    2956:	90 91 11 01 	lds	r25, 0x0111
    295a:	04 c0       	rjmp	.+8      	; 0x2964 <PM_CheckEndOfFuseLockStore+0x36>
    295c:	80 91 0e 01 	lds	r24, 0x010E
    2960:	90 91 0f 01 	lds	r25, 0x010F
    2964:	9a 83       	std	Y+2, r25	; 0x02
    2966:	89 83       	std	Y+1, r24	; 0x01
		
		eeprom_write_byte_169(&EEPROMAddress, CurrBuffByte); // CurrBuffByte stores the total number of fuse/lock bytes written in this case
    2968:	60 91 84 02 	lds	r22, 0x0284
    296c:	ce 01       	movw	r24, r28
    296e:	01 96       	adiw	r24, 0x01	; 1
    2970:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
    2974:	22 96       	adiw	r28, 0x02	; 2
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	08 95       	ret

00002986 <PM_InterpretAVRISPPacket>:
    2986:	af 92       	push	r10
    2988:	bf 92       	push	r11
    298a:	cf 92       	push	r12
    298c:	df 92       	push	r13
    298e:	ef 92       	push	r14
    2990:	ff 92       	push	r15
    2992:	0f 93       	push	r16
    2994:	1f 93       	push	r17
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	22 97       	sbiw	r28, 0x02	; 2
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	40 91 34 01 	lds	r20, 0x0134
    29ae:	84 2f       	mov	r24, r20
    29b0:	99 27       	eor	r25, r25
    29b2:	86 31       	cpi	r24, 0x16	; 22
    29b4:	91 05       	cpc	r25, r1
    29b6:	09 f4       	brne	.+2      	; 0x29ba <PM_InterpretAVRISPPacket+0x34>
    29b8:	1a c2       	rjmp	.+1076   	; 0x2dee <PM_InterpretAVRISPPacket+0x468>
    29ba:	87 31       	cpi	r24, 0x17	; 23
    29bc:	91 05       	cpc	r25, r1
    29be:	94 f4       	brge	.+36     	; 0x29e4 <PM_InterpretAVRISPPacket+0x5e>
    29c0:	82 31       	cpi	r24, 0x12	; 18
    29c2:	91 05       	cpc	r25, r1
    29c4:	09 f4       	brne	.+2      	; 0x29c8 <PM_InterpretAVRISPPacket+0x42>
    29c6:	72 c0       	rjmp	.+228    	; 0x2aac <PM_InterpretAVRISPPacket+0x126>
    29c8:	83 31       	cpi	r24, 0x13	; 19
    29ca:	91 05       	cpc	r25, r1
    29cc:	3c f4       	brge	.+14     	; 0x29dc <PM_InterpretAVRISPPacket+0x56>
    29ce:	80 31       	cpi	r24, 0x10	; 16
    29d0:	91 05       	cpc	r25, r1
    29d2:	19 f1       	breq	.+70     	; 0x2a1a <PM_InterpretAVRISPPacket+0x94>
    29d4:	41 97       	sbiw	r24, 0x11	; 17
    29d6:	09 f4       	brne	.+2      	; 0x29da <PM_InterpretAVRISPPacket+0x54>
    29d8:	49 c0       	rjmp	.+146    	; 0x2a6c <PM_InterpretAVRISPPacket+0xe6>
    29da:	7d c2       	rjmp	.+1274   	; 0x2ed6 <PM_InterpretAVRISPPacket+0x550>
    29dc:	44 97       	sbiw	r24, 0x14	; 20
    29de:	09 f4       	brne	.+2      	; 0x29e2 <PM_InterpretAVRISPPacket+0x5c>
    29e0:	06 c2       	rjmp	.+1036   	; 0x2dee <PM_InterpretAVRISPPacket+0x468>
    29e2:	73 c1       	rjmp	.+742    	; 0x2cca <PM_InterpretAVRISPPacket+0x344>
    29e4:	89 31       	cpi	r24, 0x19	; 25
    29e6:	91 05       	cpc	r25, r1
    29e8:	09 f4       	brne	.+2      	; 0x29ec <PM_InterpretAVRISPPacket+0x66>
    29ea:	13 c1       	rjmp	.+550    	; 0x2c12 <PM_InterpretAVRISPPacket+0x28c>
    29ec:	8a 31       	cpi	r24, 0x1A	; 26
    29ee:	91 05       	cpc	r25, r1
    29f0:	44 f4       	brge	.+16     	; 0x2a02 <PM_InterpretAVRISPPacket+0x7c>
    29f2:	87 31       	cpi	r24, 0x17	; 23
    29f4:	91 05       	cpc	r25, r1
    29f6:	09 f4       	brne	.+2      	; 0x29fa <PM_InterpretAVRISPPacket+0x74>
    29f8:	0c c1       	rjmp	.+536    	; 0x2c12 <PM_InterpretAVRISPPacket+0x28c>
    29fa:	48 97       	sbiw	r24, 0x18	; 24
    29fc:	09 f4       	brne	.+2      	; 0x2a00 <PM_InterpretAVRISPPacket+0x7a>
    29fe:	a5 c0       	rjmp	.+330    	; 0x2b4a <PM_InterpretAVRISPPacket+0x1c4>
    2a00:	6a c2       	rjmp	.+1236   	; 0x2ed6 <PM_InterpretAVRISPPacket+0x550>
    2a02:	8b 31       	cpi	r24, 0x1B	; 27
    2a04:	91 05       	cpc	r25, r1
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <PM_InterpretAVRISPPacket+0x84>
    2a08:	45 c0       	rjmp	.+138    	; 0x2a94 <PM_InterpretAVRISPPacket+0x10e>
    2a0a:	8b 31       	cpi	r24, 0x1B	; 27
    2a0c:	91 05       	cpc	r25, r1
    2a0e:	0c f4       	brge	.+2      	; 0x2a12 <PM_InterpretAVRISPPacket+0x8c>
    2a10:	9c c0       	rjmp	.+312    	; 0x2b4a <PM_InterpretAVRISPPacket+0x1c4>
    2a12:	4c 97       	sbiw	r24, 0x1c	; 28
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <PM_InterpretAVRISPPacket+0x92>
    2a16:	8c c0       	rjmp	.+280    	; 0x2b30 <PM_InterpretAVRISPPacket+0x1aa>
    2a18:	5e c2       	rjmp	.+1212   	; 0x2ed6 <PM_InterpretAVRISPPacket+0x550>
    2a1a:	82 e0       	ldi	r24, 0x02	; 2
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	90 93 31 01 	sts	0x0131, r25
    2a22:	80 93 30 01 	sts	0x0130, r24
    2a26:	80 91 12 01 	lds	r24, 0x0112
    2a2a:	90 91 13 01 	lds	r25, 0x0113
    2a2e:	9a 83       	std	Y+2, r25	; 0x02
    2a30:	89 83       	std	Y+1, r24	; 0x01
    2a32:	f4 e3       	ldi	r31, 0x34	; 52
    2a34:	ef 2e       	mov	r14, r31
    2a36:	f1 e0       	ldi	r31, 0x01	; 1
    2a38:	ff 2e       	mov	r15, r31
    2a3a:	1b e0       	ldi	r17, 0x0B	; 11
    2a3c:	f7 01       	movw	r30, r14
    2a3e:	61 91       	ld	r22, Z+
    2a40:	7f 01       	movw	r14, r30
    2a42:	ce 01       	movw	r24, r28
    2a44:	01 96       	adiw	r24, 0x01	; 1
    2a46:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4e:	01 96       	adiw	r24, 0x01	; 1
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	11 50       	subi	r17, 0x01	; 1
    2a56:	17 ff       	sbrs	r17, 7
    2a58:	f1 cf       	rjmp	.-30     	; 0x2a3c <PM_InterpretAVRISPPacket+0xb6>
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	80 93 2f 01 	sts	0x012F, r24
    2a60:	10 92 49 02 	sts	0x0249, r1
    2a64:	81 b3       	in	r24, 0x11	; 17
    2a66:	8f 7c       	andi	r24, 0xCF	; 207
    2a68:	80 62       	ori	r24, 0x20	; 32
    2a6a:	12 c0       	rjmp	.+36     	; 0x2a90 <PM_InterpretAVRISPPacket+0x10a>
    2a6c:	82 e0       	ldi	r24, 0x02	; 2
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	90 93 31 01 	sts	0x0131, r25
    2a74:	80 93 30 01 	sts	0x0130, r24
    2a78:	0e 94 0a 14 	call	0x2814 <PM_CheckEndOfProgramming>
    2a7c:	0e 94 97 14 	call	0x292e <PM_CheckEndOfFuseLockStore>
    2a80:	10 92 2f 01 	sts	0x012F, r1
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    2a8a:	81 b3       	in	r24, 0x11	; 17
    2a8c:	8f 7c       	andi	r24, 0xCF	; 207
    2a8e:	80 61       	ori	r24, 0x10	; 16
    2a90:	81 bb       	out	0x11, r24	; 17
    2a92:	aa c1       	rjmp	.+852    	; 0x2de8 <PM_InterpretAVRISPPacket+0x462>
    2a94:	84 e0       	ldi	r24, 0x04	; 4
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	90 93 31 01 	sts	0x0131, r25
    2a9c:	80 93 30 01 	sts	0x0130, r24
    2aa0:	10 92 35 01 	sts	0x0135, r1
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	80 93 36 01 	sts	0x0136, r24
    2aaa:	4c c0       	rjmp	.+152    	; 0x2b44 <PM_InterpretAVRISPPacket+0x1be>
    2aac:	82 e0       	ldi	r24, 0x02	; 2
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	90 93 31 01 	sts	0x0131, r25
    2ab4:	80 93 30 01 	sts	0x0130, r24
    2ab8:	80 91 18 01 	lds	r24, 0x0118
    2abc:	90 91 19 01 	lds	r25, 0x0119
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01
    2ac4:	e5 e3       	ldi	r30, 0x35	; 53
    2ac6:	ee 2e       	mov	r14, r30
    2ac8:	e1 e0       	ldi	r30, 0x01	; 1
    2aca:	fe 2e       	mov	r15, r30
    2acc:	15 e0       	ldi	r17, 0x05	; 5
    2ace:	f7 01       	movw	r30, r14
    2ad0:	61 91       	ld	r22, Z+
    2ad2:	7f 01       	movw	r14, r30
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	01 96       	adiw	r24, 0x01	; 1
    2ad8:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae0:	01 96       	adiw	r24, 0x01	; 1
    2ae2:	9a 83       	std	Y+2, r25	; 0x02
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	11 50       	subi	r17, 0x01	; 1
    2ae8:	17 ff       	sbrs	r17, 7
    2aea:	f1 cf       	rjmp	.-30     	; 0x2ace <PM_InterpretAVRISPPacket+0x148>
    2aec:	80 91 16 01 	lds	r24, 0x0116
    2af0:	90 91 17 01 	lds	r25, 0x0117
    2af4:	9a 83       	std	Y+2, r25	; 0x02
    2af6:	89 83       	std	Y+1, r24	; 0x01
    2af8:	10 e0       	ldi	r17, 0x00	; 0
    2afa:	14 30       	cpi	r17, 0x04	; 4
    2afc:	31 f4       	brne	.+12     	; 0x2b0a <PM_InterpretAVRISPPacket+0x184>
    2afe:	80 91 14 01 	lds	r24, 0x0114
    2b02:	90 91 15 01 	lds	r25, 0x0115
    2b06:	9a 83       	std	Y+2, r25	; 0x02
    2b08:	89 83       	std	Y+1, r24	; 0x01
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	ce 01       	movw	r24, r28
    2b0e:	01 96       	adiw	r24, 0x01	; 1
    2b10:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	9a 81       	ldd	r25, Y+2	; 0x02
    2b18:	01 96       	adiw	r24, 0x01	; 1
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	89 83       	std	Y+1, r24	; 0x01
    2b1e:	1f 5f       	subi	r17, 0xFF	; 255
    2b20:	18 30       	cpi	r17, 0x08	; 8
    2b22:	58 f3       	brcs	.-42     	; 0x2afa <PM_InterpretAVRISPPacket+0x174>
    2b24:	61 e0       	ldi	r22, 0x01	; 1
    2b26:	8a e1       	ldi	r24, 0x1A	; 26
    2b28:	91 e0       	ldi	r25, 0x01	; 1
    2b2a:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
    2b2e:	5c c1       	rjmp	.+696    	; 0x2de8 <PM_InterpretAVRISPPacket+0x462>
    2b30:	84 e0       	ldi	r24, 0x04	; 4
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	90 93 31 01 	sts	0x0131, r25
    2b38:	80 93 30 01 	sts	0x0130, r24
    2b3c:	10 92 35 01 	sts	0x0135, r1
    2b40:	10 92 36 01 	sts	0x0136, r1
    2b44:	10 92 37 01 	sts	0x0137, r1
    2b48:	cf c1       	rjmp	.+926    	; 0x2ee8 <PM_InterpretAVRISPPacket+0x562>
    2b4a:	84 e0       	ldi	r24, 0x04	; 4
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	90 93 31 01 	sts	0x0131, r25
    2b52:	80 93 30 01 	sts	0x0130, r24
    2b56:	80 91 49 02 	lds	r24, 0x0249
    2b5a:	84 30       	cpi	r24, 0x04	; 4
    2b5c:	59 f0       	breq	.+22     	; 0x2b74 <PM_InterpretAVRISPPacket+0x1ee>
    2b5e:	0e 94 0a 14 	call	0x2814 <PM_CheckEndOfProgramming>
    2b62:	0e 94 97 14 	call	0x292e <PM_CheckEndOfFuseLockStore>
    2b66:	10 92 85 02 	sts	0x0285, r1
    2b6a:	10 92 84 02 	sts	0x0284, r1
    2b6e:	84 e0       	ldi	r24, 0x04	; 4
    2b70:	80 93 49 02 	sts	0x0249, r24
    2b74:	80 91 34 01 	lds	r24, 0x0134
    2b78:	88 31       	cpi	r24, 0x18	; 24
    2b7a:	29 f4       	brne	.+10     	; 0x2b86 <PM_InterpretAVRISPPacket+0x200>
    2b7c:	80 91 10 01 	lds	r24, 0x0110
    2b80:	90 91 11 01 	lds	r25, 0x0111
    2b84:	04 c0       	rjmp	.+8      	; 0x2b8e <PM_InterpretAVRISPPacket+0x208>
    2b86:	80 91 0e 01 	lds	r24, 0x010E
    2b8a:	90 91 0f 01 	lds	r25, 0x010F
    2b8e:	9a 83       	std	Y+2, r25	; 0x02
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	ce 01       	movw	r24, r28
    2b94:	01 96       	adiw	r24, 0x01	; 1
    2b96:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    2b9a:	99 27       	eor	r25, r25
    2b9c:	20 91 84 02 	lds	r18, 0x0284
    2ba0:	30 91 85 02 	lds	r19, 0x0285
    2ba4:	82 17       	cp	r24, r18
    2ba6:	93 07       	cpc	r25, r19
    2ba8:	10 f4       	brcc	.+4      	; 0x2bae <PM_InterpretAVRISPPacket+0x228>
    2baa:	8f ef       	ldi	r24, 0xFF	; 255
    2bac:	22 c0       	rjmp	.+68     	; 0x2bf2 <PM_InterpretAVRISPPacket+0x26c>
    2bae:	a9 01       	movw	r20, r18
    2bb0:	44 0f       	add	r20, r20
    2bb2:	55 1f       	adc	r21, r21
    2bb4:	44 0f       	add	r20, r20
    2bb6:	55 1f       	adc	r21, r21
    2bb8:	80 91 35 01 	lds	r24, 0x0135
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	33 27       	eor	r19, r19
    2bc0:	21 50       	subi	r18, 0x01	; 1
    2bc2:	30 40       	sbci	r19, 0x00	; 0
    2bc4:	80 91 34 01 	lds	r24, 0x0134
    2bc8:	88 31       	cpi	r24, 0x18	; 24
    2bca:	29 f4       	brne	.+10     	; 0x2bd6 <PM_InterpretAVRISPPacket+0x250>
    2bcc:	80 91 0c 01 	lds	r24, 0x010C
    2bd0:	90 91 0d 01 	lds	r25, 0x010D
    2bd4:	04 c0       	rjmp	.+8      	; 0x2bde <PM_InterpretAVRISPPacket+0x258>
    2bd6:	80 91 0a 01 	lds	r24, 0x010A
    2bda:	90 91 0b 01 	lds	r25, 0x010B
    2bde:	84 0f       	add	r24, r20
    2be0:	95 1f       	adc	r25, r21
    2be2:	82 0f       	add	r24, r18
    2be4:	93 1f       	adc	r25, r19
    2be6:	9a 83       	std	Y+2, r25	; 0x02
    2be8:	89 83       	std	Y+1, r24	; 0x01
    2bea:	ce 01       	movw	r24, r28
    2bec:	01 96       	adiw	r24, 0x01	; 1
    2bee:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    2bf2:	80 93 36 01 	sts	0x0136, r24
    2bf6:	10 92 35 01 	sts	0x0135, r1
    2bfa:	10 92 37 01 	sts	0x0137, r1
    2bfe:	80 91 84 02 	lds	r24, 0x0284
    2c02:	90 91 85 02 	lds	r25, 0x0285
    2c06:	01 96       	adiw	r24, 0x01	; 1
    2c08:	90 93 85 02 	sts	0x0285, r25
    2c0c:	80 93 84 02 	sts	0x0284, r24
    2c10:	6b c1       	rjmp	.+726    	; 0x2ee8 <PM_InterpretAVRISPPacket+0x562>
    2c12:	83 e0       	ldi	r24, 0x03	; 3
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	90 93 31 01 	sts	0x0131, r25
    2c1a:	80 93 30 01 	sts	0x0130, r24
    2c1e:	80 91 49 02 	lds	r24, 0x0249
    2c22:	83 30       	cpi	r24, 0x03	; 3
    2c24:	39 f0       	breq	.+14     	; 0x2c34 <PM_InterpretAVRISPPacket+0x2ae>
    2c26:	83 e0       	ldi	r24, 0x03	; 3
    2c28:	80 93 49 02 	sts	0x0249, r24
    2c2c:	10 92 85 02 	sts	0x0285, r1
    2c30:	10 92 84 02 	sts	0x0284, r1
    2c34:	20 91 84 02 	lds	r18, 0x0284
    2c38:	30 91 85 02 	lds	r19, 0x0285
    2c3c:	47 31       	cpi	r20, 0x17	; 23
    2c3e:	71 f4       	brne	.+28     	; 0x2c5c <PM_InterpretAVRISPPacket+0x2d6>
    2c40:	22 0f       	add	r18, r18
    2c42:	33 1f       	adc	r19, r19
    2c44:	22 0f       	add	r18, r18
    2c46:	33 1f       	adc	r19, r19
    2c48:	80 91 0c 01 	lds	r24, 0x010C
    2c4c:	90 91 0d 01 	lds	r25, 0x010D
    2c50:	82 0f       	add	r24, r18
    2c52:	93 1f       	adc	r25, r19
    2c54:	9a 83       	std	Y+2, r25	; 0x02
    2c56:	89 83       	std	Y+1, r24	; 0x01
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	0d c0       	rjmp	.+26     	; 0x2c76 <PM_InterpretAVRISPPacket+0x2f0>
    2c5c:	22 0f       	add	r18, r18
    2c5e:	33 1f       	adc	r19, r19
    2c60:	22 0f       	add	r18, r18
    2c62:	33 1f       	adc	r19, r19
    2c64:	80 91 0a 01 	lds	r24, 0x010A
    2c68:	90 91 0b 01 	lds	r25, 0x010B
    2c6c:	82 0f       	add	r24, r18
    2c6e:	93 1f       	adc	r25, r19
    2c70:	9a 83       	std	Y+2, r25	; 0x02
    2c72:	89 83       	std	Y+1, r24	; 0x01
    2c74:	83 e0       	ldi	r24, 0x03	; 3
    2c76:	80 93 4a 02 	sts	0x024A, r24
    2c7a:	80 91 84 02 	lds	r24, 0x0284
    2c7e:	90 91 85 02 	lds	r25, 0x0285
    2c82:	0a 97       	sbiw	r24, 0x0a	; 10
    2c84:	e8 f4       	brcc	.+58     	; 0x2cc0 <PM_InterpretAVRISPPacket+0x33a>
    2c86:	45 e3       	ldi	r20, 0x35	; 53
    2c88:	e4 2e       	mov	r14, r20
    2c8a:	41 e0       	ldi	r20, 0x01	; 1
    2c8c:	f4 2e       	mov	r15, r20
    2c8e:	13 e0       	ldi	r17, 0x03	; 3
    2c90:	f7 01       	movw	r30, r14
    2c92:	61 91       	ld	r22, Z+
    2c94:	7f 01       	movw	r14, r30
    2c96:	ce 01       	movw	r24, r28
    2c98:	01 96       	adiw	r24, 0x01	; 1
    2c9a:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	01 96       	adiw	r24, 0x01	; 1
    2ca4:	9a 83       	std	Y+2, r25	; 0x02
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	11 50       	subi	r17, 0x01	; 1
    2caa:	17 ff       	sbrs	r17, 7
    2cac:	f1 cf       	rjmp	.-30     	; 0x2c90 <PM_InterpretAVRISPPacket+0x30a>
    2cae:	80 91 84 02 	lds	r24, 0x0284
    2cb2:	90 91 85 02 	lds	r25, 0x0285
    2cb6:	01 96       	adiw	r24, 0x01	; 1
    2cb8:	90 93 85 02 	sts	0x0285, r25
    2cbc:	80 93 84 02 	sts	0x0284, r24
    2cc0:	10 92 35 01 	sts	0x0135, r1
    2cc4:	10 92 36 01 	sts	0x0136, r1
    2cc8:	0f c1       	rjmp	.+542    	; 0x2ee8 <PM_InterpretAVRISPPacket+0x562>
    2cca:	82 e0       	ldi	r24, 0x02	; 2
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	90 93 31 01 	sts	0x0131, r25
    2cd2:	80 93 30 01 	sts	0x0130, r24
    2cd6:	80 91 49 02 	lds	r24, 0x0249
    2cda:	81 30       	cpi	r24, 0x01	; 1
    2cdc:	81 f1       	breq	.+96     	; 0x2d3e <PM_InterpretAVRISPPacket+0x3b8>
    2cde:	43 31       	cpi	r20, 0x13	; 19
    2ce0:	41 f4       	brne	.+16     	; 0x2cf2 <PM_InterpretAVRISPPacket+0x36c>
    2ce2:	80 91 1e 01 	lds	r24, 0x011E
    2ce6:	90 91 1f 01 	lds	r25, 0x011F
    2cea:	9a 83       	std	Y+2, r25	; 0x02
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	07 c0       	rjmp	.+14     	; 0x2d00 <PM_InterpretAVRISPPacket+0x37a>
    2cf2:	80 91 1c 01 	lds	r24, 0x011C
    2cf6:	90 91 1d 01 	lds	r25, 0x011D
    2cfa:	9a 83       	std	Y+2, r25	; 0x02
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	0e 94 93 13 	call	0x2726 <PM_SetupDFAddressCounters>
    2d04:	80 91 84 02 	lds	r24, 0x0284
    2d08:	90 91 85 02 	lds	r25, 0x0285
    2d0c:	0e 94 ff 09 	call	0x13fe <DF_BufferWriteEnable>
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	80 93 49 02 	sts	0x0249, r24
    2d16:	35 e3       	ldi	r19, 0x35	; 53
    2d18:	e3 2e       	mov	r14, r19
    2d1a:	31 e0       	ldi	r19, 0x01	; 1
    2d1c:	f3 2e       	mov	r15, r19
    2d1e:	18 e0       	ldi	r17, 0x08	; 8
    2d20:	f7 01       	movw	r30, r14
    2d22:	61 91       	ld	r22, Z+
    2d24:	7f 01       	movw	r14, r30
    2d26:	ce 01       	movw	r24, r28
    2d28:	01 96       	adiw	r24, 0x01	; 1
    2d2a:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	9a 81       	ldd	r25, Y+2	; 0x02
    2d32:	01 96       	adiw	r24, 0x01	; 1
    2d34:	9a 83       	std	Y+2, r25	; 0x02
    2d36:	89 83       	std	Y+1, r24	; 0x01
    2d38:	11 50       	subi	r17, 0x01	; 1
    2d3a:	17 ff       	sbrs	r17, 7
    2d3c:	f1 cf       	rjmp	.-30     	; 0x2d20 <PM_InterpretAVRISPPacket+0x39a>
    2d3e:	80 91 35 01 	lds	r24, 0x0135
    2d42:	99 27       	eor	r25, r25
    2d44:	18 2f       	mov	r17, r24
    2d46:	00 27       	eor	r16, r16
    2d48:	80 91 36 01 	lds	r24, 0x0136
    2d4c:	99 27       	eor	r25, r25
    2d4e:	08 2b       	or	r16, r24
    2d50:	19 2b       	or	r17, r25
    2d52:	ee 24       	eor	r14, r14
    2d54:	ff 24       	eor	r15, r15
    2d56:	e0 16       	cp	r14, r16
    2d58:	f1 06       	cpc	r15, r17
    2d5a:	78 f4       	brcc	.+30     	; 0x2d7a <PM_InterpretAVRISPPacket+0x3f4>
    2d5c:	8e e3       	ldi	r24, 0x3E	; 62
    2d5e:	c8 2e       	mov	r12, r24
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	d8 2e       	mov	r13, r24
    2d64:	f6 01       	movw	r30, r12
    2d66:	81 91       	ld	r24, Z+
    2d68:	6f 01       	movw	r12, r30
    2d6a:	0e 94 d5 13 	call	0x27aa <PM_StoreProgramByte>
    2d6e:	08 94       	sec
    2d70:	e1 1c       	adc	r14, r1
    2d72:	f1 1c       	adc	r15, r1
    2d74:	e0 16       	cp	r14, r16
    2d76:	f1 06       	cpc	r15, r17
    2d78:	a8 f3       	brcs	.-22     	; 0x2d64 <PM_InterpretAVRISPPacket+0x3de>
    2d7a:	40 91 47 02 	lds	r20, 0x0247
    2d7e:	50 91 48 02 	lds	r21, 0x0248
    2d82:	57 fd       	sbrc	r21, 7
    2d84:	31 c0       	rjmp	.+98     	; 0x2de8 <PM_InterpretAVRISPPacket+0x462>
    2d86:	80 91 37 01 	lds	r24, 0x0137
    2d8a:	87 ff       	sbrs	r24, 7
    2d8c:	2d c0       	rjmp	.+90     	; 0x2de8 <PM_InterpretAVRISPPacket+0x462>
    2d8e:	41 15       	cp	r20, r1
    2d90:	51 05       	cpc	r21, r1
    2d92:	51 f1       	breq	.+84     	; 0x2de8 <PM_InterpretAVRISPPacket+0x462>
    2d94:	80 91 4a 02 	lds	r24, 0x024A
    2d98:	81 30       	cpi	r24, 0x01	; 1
    2d9a:	29 f4       	brne	.+10     	; 0x2da6 <PM_InterpretAVRISPPacket+0x420>
    2d9c:	20 91 08 01 	lds	r18, 0x0108
    2da0:	30 91 09 01 	lds	r19, 0x0109
    2da4:	04 c0       	rjmp	.+8      	; 0x2dae <PM_InterpretAVRISPPacket+0x428>
    2da6:	20 91 06 01 	lds	r18, 0x0106
    2daa:	30 91 07 01 	lds	r19, 0x0107
    2dae:	3a 83       	std	Y+2, r19	; 0x02
    2db0:	29 83       	std	Y+1, r18	; 0x01
    2db2:	85 2f       	mov	r24, r21
    2db4:	99 27       	eor	r25, r25
    2db6:	68 2f       	mov	r22, r24
    2db8:	ce 01       	movw	r24, r28
    2dba:	01 96       	adiw	r24, 0x01	; 1
    2dbc:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc4:	01 96       	adiw	r24, 0x01	; 1
    2dc6:	9a 83       	std	Y+2, r25	; 0x02
    2dc8:	89 83       	std	Y+1, r24	; 0x01
    2dca:	60 91 47 02 	lds	r22, 0x0247
    2dce:	ce 01       	movw	r24, r28
    2dd0:	01 96       	adiw	r24, 0x01	; 1
    2dd2:	0e 94 67 08 	call	0x10ce <eeprom_write_byte_169>
    2dd6:	80 91 47 02 	lds	r24, 0x0247
    2dda:	90 91 48 02 	lds	r25, 0x0248
    2dde:	90 68       	ori	r25, 0x80	; 128
    2de0:	90 93 48 02 	sts	0x0248, r25
    2de4:	80 93 47 02 	sts	0x0247, r24
    2de8:	10 92 35 01 	sts	0x0135, r1
    2dec:	7d c0       	rjmp	.+250    	; 0x2ee8 <PM_InterpretAVRISPPacket+0x562>
    2dee:	80 91 49 02 	lds	r24, 0x0249
    2df2:	82 30       	cpi	r24, 0x02	; 2
    2df4:	11 f1       	breq	.+68     	; 0x2e3a <PM_InterpretAVRISPPacket+0x4b4>
    2df6:	0e 94 0a 14 	call	0x2814 <PM_CheckEndOfProgramming>
    2dfa:	0e 94 97 14 	call	0x292e <PM_CheckEndOfFuseLockStore>
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	80 91 34 01 	lds	r24, 0x0134
    2e04:	84 31       	cpi	r24, 0x14	; 20
    2e06:	09 f4       	brne	.+2      	; 0x2e0a <PM_InterpretAVRISPPacket+0x484>
    2e08:	91 e0       	ldi	r25, 0x01	; 1
    2e0a:	89 2f       	mov	r24, r25
    2e0c:	0e 94 93 13 	call	0x2726 <PM_SetupDFAddressCounters>
    2e10:	60 91 84 02 	lds	r22, 0x0284
    2e14:	70 91 85 02 	lds	r23, 0x0285
    2e18:	80 91 8b 02 	lds	r24, 0x028B
    2e1c:	90 91 8c 02 	lds	r25, 0x028C
    2e20:	0e 94 bd 09 	call	0x137a <DF_ContinuousReadEnable>
    2e24:	82 e0       	ldi	r24, 0x02	; 2
    2e26:	80 93 49 02 	sts	0x0249, r24
    2e2a:	10 92 2b 01 	sts	0x012B, r1
    2e2e:	10 92 2c 01 	sts	0x012C, r1
    2e32:	10 92 2d 01 	sts	0x012D, r1
    2e36:	10 92 2e 01 	sts	0x012E, r1
    2e3a:	80 91 35 01 	lds	r24, 0x0135
    2e3e:	99 27       	eor	r25, r25
    2e40:	18 2f       	mov	r17, r24
    2e42:	00 27       	eor	r16, r16
    2e44:	80 91 36 01 	lds	r24, 0x0136
    2e48:	99 27       	eor	r25, r25
    2e4a:	08 2b       	or	r16, r24
    2e4c:	19 2b       	or	r17, r25
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	80 91 34 01 	lds	r24, 0x0134
    2e54:	84 31       	cpi	r24, 0x14	; 20
    2e56:	09 f4       	brne	.+2      	; 0x2e5a <PM_InterpretAVRISPPacket+0x4d4>
    2e58:	91 e0       	ldi	r25, 0x01	; 1
    2e5a:	89 2f       	mov	r24, r25
    2e5c:	0e 94 1b 13 	call	0x2636 <PM_GetStoredDataSize>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	6c 01       	movw	r12, r24
    2e66:	ee 24       	eor	r14, r14
    2e68:	ff 24       	eor	r15, r15
    2e6a:	e0 16       	cp	r14, r16
    2e6c:	f1 06       	cpc	r15, r17
    2e6e:	20 f5       	brcc	.+72     	; 0x2eb8 <PM_InterpretAVRISPPacket+0x532>
    2e70:	f6 e3       	ldi	r31, 0x36	; 54
    2e72:	af 2e       	mov	r10, r31
    2e74:	f1 e0       	ldi	r31, 0x01	; 1
    2e76:	bf 2e       	mov	r11, r31
    2e78:	96 01       	movw	r18, r12
    2e7a:	44 27       	eor	r20, r20
    2e7c:	55 27       	eor	r21, r21
    2e7e:	80 91 2b 01 	lds	r24, 0x012B
    2e82:	90 91 2c 01 	lds	r25, 0x012C
    2e86:	a0 91 2d 01 	lds	r26, 0x012D
    2e8a:	b0 91 2e 01 	lds	r27, 0x012E
    2e8e:	82 17       	cp	r24, r18
    2e90:	93 07       	cpc	r25, r19
    2e92:	a4 07       	cpc	r26, r20
    2e94:	b5 07       	cpc	r27, r21
    2e96:	20 f4       	brcc	.+8      	; 0x2ea0 <PM_InterpretAVRISPPacket+0x51a>
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
    2e9e:	01 c0       	rjmp	.+2      	; 0x2ea2 <PM_InterpretAVRISPPacket+0x51c>
    2ea0:	8f ef       	ldi	r24, 0xFF	; 255
    2ea2:	f5 01       	movw	r30, r10
    2ea4:	81 93       	st	Z+, r24
    2ea6:	5f 01       	movw	r10, r30
    2ea8:	0e 94 79 0e 	call	0x1cf2 <V2P_IncrementCurrAddress>
    2eac:	08 94       	sec
    2eae:	e1 1c       	adc	r14, r1
    2eb0:	f1 1c       	adc	r15, r1
    2eb2:	e0 16       	cp	r14, r16
    2eb4:	f1 06       	cpc	r15, r17
    2eb6:	00 f3       	brcs	.-64     	; 0x2e78 <PM_InterpretAVRISPPacket+0x4f2>
    2eb8:	0d 5f       	subi	r16, 0xFD	; 253
    2eba:	1f 4f       	sbci	r17, 0xFF	; 255
    2ebc:	10 93 31 01 	sts	0x0131, r17
    2ec0:	00 93 30 01 	sts	0x0130, r16
    2ec4:	03 50       	subi	r16, 0x03	; 3
    2ec6:	10 40       	sbci	r17, 0x00	; 0
    2ec8:	10 92 35 01 	sts	0x0135, r1
    2ecc:	0c 5c       	subi	r16, 0xCC	; 204
    2ece:	1e 4f       	sbci	r17, 0xFE	; 254
    2ed0:	f8 01       	movw	r30, r16
    2ed2:	12 82       	std	Z+2, r1	; 0x02
    2ed4:	09 c0       	rjmp	.+18     	; 0x2ee8 <PM_InterpretAVRISPPacket+0x562>
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	90 93 31 01 	sts	0x0131, r25
    2ede:	80 93 30 01 	sts	0x0130, r24
    2ee2:	89 ec       	ldi	r24, 0xC9	; 201
    2ee4:	80 93 35 01 	sts	0x0135, r24
    2ee8:	0e 94 9f 0d 	call	0x1b3e <V2P_SendPacket>
    2eec:	22 96       	adiw	r28, 0x02	; 2
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	1f 91       	pop	r17
    2efe:	0f 91       	pop	r16
    2f00:	ff 90       	pop	r15
    2f02:	ef 90       	pop	r14
    2f04:	df 90       	pop	r13
    2f06:	cf 90       	pop	r12
    2f08:	bf 90       	pop	r11
    2f0a:	af 90       	pop	r10
    2f0c:	08 95       	ret

00002f0e <PM_SendFuseLockBytes>:
	}
}

void PM_SendFuseLockBytes(uint8_t Type)
{
    2f0e:	0f 93       	push	r16
    2f10:	1f 93       	push	r17
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	22 97       	sbiw	r28, 0x02	; 2
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	08 2f       	mov	r16, r24
	uint16_t EEPROMAddress;
	uint8_t  TotalBytes;
	
	EEPROMAddress = ((Type == TYPE_FUSE)? Prog_TotalFuseBytes : Prog_TotalLockBytes);
    2f28:	82 30       	cpi	r24, 0x02	; 2
    2f2a:	29 f4       	brne	.+10     	; 0x2f36 <PM_SendFuseLockBytes+0x28>
    2f2c:	80 91 10 01 	lds	r24, 0x0110
    2f30:	90 91 11 01 	lds	r25, 0x0111
    2f34:	04 c0       	rjmp	.+8      	; 0x2f3e <PM_SendFuseLockBytes+0x30>
    2f36:	80 91 0e 01 	lds	r24, 0x010E
    2f3a:	90 91 0f 01 	lds	r25, 0x010F
    2f3e:	9a 83       	std	Y+2, r25	; 0x02
    2f40:	89 83       	std	Y+1, r24	; 0x01

	TotalBytes = eeprom_read_byte_169(&EEPROMAddress); // Get the total number of stored fuse/lock bytes
    2f42:	ce 01       	movw	r24, r28
    2f44:	01 96       	adiw	r24, 0x01	; 1
    2f46:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    2f4a:	18 2f       	mov	r17, r24
			
	EEPROMAddress = ((Type == TYPE_FUSE)? Prog_FuseBytes : Prog_LockBytes); // Set the EEPROM pointer to the fuse/lock bytes start (each fuse or lock byte takes four bytes in EEPROM)
    2f4c:	02 30       	cpi	r16, 0x02	; 2
    2f4e:	29 f4       	brne	.+10     	; 0x2f5a <PM_SendFuseLockBytes+0x4c>
    2f50:	80 91 0c 01 	lds	r24, 0x010C
    2f54:	90 91 0d 01 	lds	r25, 0x010D
    2f58:	04 c0       	rjmp	.+8      	; 0x2f62 <PM_SendFuseLockBytes+0x54>
    2f5a:	80 91 0a 01 	lds	r24, 0x010A
    2f5e:	90 91 0b 01 	lds	r25, 0x010B
    2f62:	9a 83       	std	Y+2, r25	; 0x02
    2f64:	89 83       	std	Y+1, r24	; 0x01

	while (TotalBytes--)                              // Write each of the fuse/lock bytes stored in memory to the slave AVR
	{
		for (uint8_t CommandByte = 0; CommandByte < 4; CommandByte++)      // Write each individual command byte
		{
			USI_SPITransmit(eeprom_read_byte_169(&EEPROMAddress));
			EEPROMAddress++;
		}
		
		// Add some delay before programming next byte, if there is one:
		if (TotalBytes)
		   MAIN_Delay10MS(5);
    2f66:	11 50       	subi	r17, 0x01	; 1
    2f68:	1f 3f       	cpi	r17, 0xFF	; 255
    2f6a:	b1 f0       	breq	.+44     	; 0x2f98 <PM_SendFuseLockBytes+0x8a>
    2f6c:	03 e0       	ldi	r16, 0x03	; 3
    2f6e:	ce 01       	movw	r24, r28
    2f70:	01 96       	adiw	r24, 0x01	; 1
    2f72:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    2f76:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7e:	01 96       	adiw	r24, 0x01	; 1
    2f80:	9a 83       	std	Y+2, r25	; 0x02
    2f82:	89 83       	std	Y+1, r24	; 0x01
    2f84:	01 50       	subi	r16, 0x01	; 1
    2f86:	07 ff       	sbrs	r16, 7
    2f88:	f2 cf       	rjmp	.-28     	; 0x2f6e <PM_SendFuseLockBytes+0x60>
    2f8a:	11 23       	and	r17, r17
    2f8c:	19 f0       	breq	.+6      	; 0x2f94 <PM_SendFuseLockBytes+0x86>
    2f8e:	85 e0       	ldi	r24, 0x05	; 5
    2f90:	0e 94 1a 02 	call	0x434 <MAIN_Delay10MS>
    2f94:	11 50       	subi	r17, 0x01	; 1
    2f96:	50 f7       	brcc	.-44     	; 0x2f6c <PM_SendFuseLockBytes+0x5e>
    2f98:	22 96       	adiw	r28, 0x02	; 2
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	df 91       	pop	r29
    2fa6:	cf 91       	pop	r28
    2fa8:	1f 91       	pop	r17
    2faa:	0f 91       	pop	r16
    2fac:	08 95       	ret

00002fae <PM_SendEraseCommand>:
	}
}

void PM_SendEraseCommand(void)
{
    2fae:	0f 93       	push	r16
    2fb0:	1f 93       	push	r17
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	cd b7       	in	r28, 0x3d	; 61
    2fb8:	de b7       	in	r29, 0x3e	; 62
    2fba:	22 97       	sbiw	r28, 0x02	; 2
    2fbc:	0f b6       	in	r0, 0x3f	; 63
    2fbe:	f8 94       	cli
    2fc0:	de bf       	out	0x3e, r29	; 62
    2fc2:	0f be       	out	0x3f, r0	; 63
    2fc4:	cd bf       	out	0x3d, r28	; 61
	uint16_t EEPROMAddress;

	EEPROMAddress = Prog_EraseChip + 2;               // Start of the erase commands
    2fc6:	80 91 18 01 	lds	r24, 0x0118
    2fca:	90 91 19 01 	lds	r25, 0x0119
    2fce:	02 96       	adiw	r24, 0x02	; 2
    2fd0:	9a 83       	std	Y+2, r25	; 0x02
    2fd2:	89 83       	std	Y+1, r24	; 0x01
    2fd4:	13 e0       	ldi	r17, 0x03	; 3
			
	for (uint8_t B = 0; B < 4 ; B++)                  // Read out the erase chip command bytes
	{
		USI_SPITransmit(eeprom_read_byte_169(&EEPROMAddress)); // Send the erase chip commands
    2fd6:	ce 01       	movw	r24, r28
    2fd8:	01 96       	adiw	r24, 0x01	; 1
    2fda:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    2fde:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
		EEPROMAddress++;
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
    2fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe6:	01 96       	adiw	r24, 0x01	; 1
    2fe8:	9a 83       	std	Y+2, r25	; 0x02
    2fea:	89 83       	std	Y+1, r24	; 0x01
    2fec:	11 50       	subi	r17, 0x01	; 1
    2fee:	17 ff       	sbrs	r17, 7
    2ff0:	f2 cf       	rjmp	.-28     	; 0x2fd6 <PM_SendEraseCommand+0x28>
	}
			
	EEPROMAddress = Prog_EraseChip + 1;               // Poll mode flag address
    2ff2:	00 91 18 01 	lds	r16, 0x0118
    2ff6:	10 91 19 01 	lds	r17, 0x0119
    2ffa:	0f 5f       	subi	r16, 0xFF	; 255
    2ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ffe:	1a 83       	std	Y+2, r17	; 0x02
    3000:	09 83       	std	Y+1, r16	; 0x01
    3002:	01 50       	subi	r16, 0x01	; 1
    3004:	10 40       	sbci	r17, 0x00	; 0
	if (eeprom_read_byte_169(&EEPROMAddress))         // Value of 1 indicates a busy flag test
    3006:	ce 01       	movw	r24, r28
    3008:	01 96       	adiw	r24, 0x01	; 1
    300a:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    300e:	88 23       	and	r24, r24
    3010:	59 f0       	breq	.+22     	; 0x3028 <PM_SendEraseCommand+0x7a>
	{
		do
			USI_SPITransmitWord(0xF000);
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	90 ef       	ldi	r25, 0xF0	; 240
    3016:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    3022:	80 fd       	sbrc	r24, 0
    3024:	f6 cf       	rjmp	.-20     	; 0x3012 <PM_SendEraseCommand+0x64>
    3026:	08 c0       	rjmp	.+16     	; 0x3038 <PM_SendEraseCommand+0x8a>
		while (USI_SPITransmitWord(0x0000) & 0x01);
	}
	else                                              // Cleared flag means use a predefined delay
	{
		EEPROMAddress = Prog_EraseChip;               // Delay value address			
    3028:	1a 83       	std	Y+2, r17	; 0x02
    302a:	09 83       	std	Y+1, r16	; 0x01
		MAIN_Delay1MS(eeprom_read_byte_169(&EEPROMAddress)); // Wait the erase delay
    302c:	ce 01       	movw	r24, r28
    302e:	01 96       	adiw	r24, 0x01	; 1
    3030:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    3034:	0e 94 fc 02 	call	0x5f8 <MAIN_Delay1MS>
    3038:	22 96       	adiw	r28, 0x02	; 2
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	df 91       	pop	r29
    3046:	cf 91       	pop	r28
    3048:	1f 91       	pop	r17
    304a:	0f 91       	pop	r16
    304c:	08 95       	ret

0000304e <PM_CreateProgrammingPackets>:
	}
}

void PM_CreateProgrammingPackets(uint8_t Type)
{			
    304e:	2f 92       	push	r2
    3050:	3f 92       	push	r3
    3052:	4f 92       	push	r4
    3054:	5f 92       	push	r5
    3056:	6f 92       	push	r6
    3058:	7f 92       	push	r7
    305a:	8f 92       	push	r8
    305c:	9f 92       	push	r9
    305e:	af 92       	push	r10
    3060:	bf 92       	push	r11
    3062:	cf 92       	push	r12
    3064:	df 92       	push	r13
    3066:	ef 92       	push	r14
    3068:	ff 92       	push	r15
    306a:	0f 93       	push	r16
    306c:	1f 93       	push	r17
    306e:	cf 93       	push	r28
    3070:	df 93       	push	r29
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	23 97       	sbiw	r28, 0x03	; 3
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	18 2f       	mov	r17, r24
	uint32_t BytesRead       = 0;
    3084:	88 24       	eor	r8, r8
    3086:	99 24       	eor	r9, r9
    3088:	54 01       	movw	r10, r8
	uint32_t BytesToRead     = PM_GetStoredDataSize(Type);      // Get the byte size of the stored program
    308a:	0e 94 1b 13 	call	0x2636 <PM_GetStoredDataSize>
    308e:	1b 01       	movw	r2, r22
    3090:	2c 01       	movw	r4, r24
	uint16_t BytesPerProgram;
	uint16_t EEPROMAddress;
	uint16_t PageLength;
	uint8_t  ContinuedPage   = FALSE;
    3092:	1b 82       	std	Y+3, r1	; 0x03

	EEPROMAddress = ((Type == TYPE_FLASH)? Prog_PageLength : Prog_EPageLength);
    3094:	11 30       	cpi	r17, 0x01	; 1
    3096:	29 f4       	brne	.+10     	; 0x30a2 <PM_CreateProgrammingPackets+0x54>
    3098:	80 91 08 01 	lds	r24, 0x0108
    309c:	90 91 09 01 	lds	r25, 0x0109
    30a0:	04 c0       	rjmp	.+8      	; 0x30aa <PM_CreateProgrammingPackets+0x5c>
    30a2:	80 91 06 01 	lds	r24, 0x0106
    30a6:	90 91 07 01 	lds	r25, 0x0107
    30aa:	9a 83       	std	Y+2, r25	; 0x02
    30ac:	89 83       	std	Y+1, r24	; 0x01
	PageLength    = ((uint16_t)eeprom_read_byte_169(&EEPROMAddress) << 8);
    30ae:	ce 01       	movw	r24, r28
    30b0:	01 96       	adiw	r24, 0x01	; 1
    30b2:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    30b6:	99 27       	eor	r25, r25
    30b8:	78 2e       	mov	r7, r24
    30ba:	66 24       	eor	r6, r6
	EEPROMAddress++;
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	9a 81       	ldd	r25, Y+2	; 0x02
    30c0:	01 96       	adiw	r24, 0x01	; 1
    30c2:	9a 83       	std	Y+2, r25	; 0x02
    30c4:	89 83       	std	Y+1, r24	; 0x01
	PageLength   |= (eeprom_read_byte_169(&EEPROMAddress));
    30c6:	ce 01       	movw	r24, r28
    30c8:	01 96       	adiw	r24, 0x01	; 1
    30ca:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    30ce:	99 27       	eor	r25, r25
    30d0:	68 2a       	or	r6, r24
    30d2:	79 2a       	or	r7, r25
	
	CurrAddress = 0;
    30d4:	10 92 2b 01 	sts	0x012B, r1
    30d8:	10 92 2c 01 	sts	0x012C, r1
    30dc:	10 92 2d 01 	sts	0x012D, r1
    30e0:	10 92 2e 01 	sts	0x012E, r1

	if (Type == TYPE_FLASH)
    30e4:	11 30       	cpi	r17, 0x01	; 1
    30e6:	69 f4       	brne	.+26     	; 0x3102 <PM_CreateProgrammingPackets+0xb4>
	{
		EEPROMAddress = Prog_WriteProgram;             // Set the EEPROM pointer to the write flash command bytes location
    30e8:	80 91 1e 01 	lds	r24, 0x011E
    30ec:	90 91 1f 01 	lds	r25, 0x011F
    30f0:	9a 83       	std	Y+2, r25	; 0x02
    30f2:	89 83       	std	Y+1, r24	; 0x01
		DF_ContinuousReadEnable(0, 0);
    30f4:	60 e0       	ldi	r22, 0x00	; 0
    30f6:	70 e0       	ldi	r23, 0x00	; 0
    30f8:	cb 01       	movw	r24, r22
    30fa:	0e 94 bd 09 	call	0x137a <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_FLASH_ISP;
    30fe:	83 e1       	ldi	r24, 0x13	; 19
    3100:	0d c0       	rjmp	.+26     	; 0x311c <PM_CreateProgrammingPackets+0xce>
	}
	else
	{
		EEPROMAddress = Prog_WriteEEPROM;              // Set the EEPROM pointer to the write EEPROM command bytes location
    3102:	80 91 1c 01 	lds	r24, 0x011C
    3106:	90 91 1d 01 	lds	r25, 0x011D
    310a:	9a 83       	std	Y+2, r25	; 0x02
    310c:	89 83       	std	Y+1, r24	; 0x01
		DF_ContinuousReadEnable(PM_EEPROM_OFFSET / DF_INTERNALDF_BUFFBYTES, PM_EEPROM_OFFSET % DF_INTERNALDF_BUFFBYTES); // Start read from the EEPROM offset location
    310e:	60 ee       	ldi	r22, 0xE0	; 224
    3110:	70 e0       	ldi	r23, 0x00	; 0
    3112:	84 ee       	ldi	r24, 0xE4	; 228
    3114:	93 e0       	ldi	r25, 0x03	; 3
    3116:	0e 94 bd 09 	call	0x137a <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_EEPROM_ISP;
    311a:	85 e1       	ldi	r24, 0x15	; 21
    311c:	80 93 34 01 	sts	0x0134, r24
    3120:	f5 e3       	ldi	r31, 0x35	; 53
    3122:	ef 2e       	mov	r14, r31
    3124:	f1 e0       	ldi	r31, 0x01	; 1
    3126:	ff 2e       	mov	r15, r31
    3128:	18 e0       	ldi	r17, 0x08	; 8
	}

	for (uint8_t B = 1; B <= 9 ; B++)                 // Load in the write data command bytes
	{
		PacketBytes[B] = eeprom_read_byte_169(&EEPROMAddress); // Synthesise a write packet header
    312a:	ce 01       	movw	r24, r28
    312c:	01 96       	adiw	r24, 0x01	; 1
    312e:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
    3132:	f7 01       	movw	r30, r14
    3134:	81 93       	st	Z+, r24
    3136:	7f 01       	movw	r14, r30
		EEPROMAddress++;                               // Increment the EEPROM location counter
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	9a 81       	ldd	r25, Y+2	; 0x02
    313c:	01 96       	adiw	r24, 0x01	; 1
    313e:	9a 83       	std	Y+2, r25	; 0x02
    3140:	89 83       	std	Y+1, r24	; 0x01
    3142:	11 50       	subi	r17, 0x01	; 1
    3144:	17 ff       	sbrs	r17, 7
    3146:	f1 cf       	rjmp	.-30     	; 0x312a <PM_CreateProgrammingPackets+0xdc>
	}
	
	BytesPerProgram = ((uint16_t)PacketBytes[1] << 8)
    3148:	80 91 35 01 	lds	r24, 0x0135
    314c:	99 27       	eor	r25, r25
    314e:	d8 2e       	mov	r13, r24
    3150:	cc 24       	eor	r12, r12
    3152:	80 91 36 01 	lds	r24, 0x0136
    3156:	99 27       	eor	r25, r25
    3158:	c8 2a       	or	r12, r24
    315a:	d9 2a       	or	r13, r25
	                | PacketBytes[2];

	while (BytesRead < BytesToRead)
	{
		if (PacketBytes[3] & ISPCC_PROG_MODE_PAGE)
		{
			if (PageLength > 160) // Max 160 bytes at a time
			{
				if (!(ContinuedPage))                      // Start of a new page, program in the first 150 bytes
				{
					BytesPerProgram = 160;
					PacketBytes[3] &= ~ISPCC_PROG_MODE_PAGEDONE;		
					ContinuedPage = TRUE;
				}
				else                                       // Middle of a page, program in the remainder
				{
					BytesPerProgram = PageLength - 160;
					PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
					ContinuedPage = FALSE;
				}
				
				for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page				

				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);
				PacketBytes[2] = (uint8_t)(BytesPerProgram);

				BytesRead += BytesPerProgram;                         // Increment the counter
			}
			else
			{
				for (uint16_t LoadB = 0; LoadB < PageLength; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page
			
				PacketBytes[1]  = (uint8_t)(PageLength >> 8);
				PacketBytes[2]  = (uint8_t)(PageLength);
				PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;

				BytesRead += PageLength;                            // Increment the counter
			}
		}
		else
		{
			if ((BytesRead + BytesPerProgram) > BytesToRead)        // Less than a whole BytesPerProgram left of data to write
			{
				BytesPerProgram = BytesToRead - BytesRead;          // Next lot of bytes will be the remaining data length
				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);   // \. Save the new length
				PacketBytes[2] = (uint8_t)(BytesPerProgram);        // /  into the data packet
			}

			for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
				PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);    // Load in the page
			
			BytesRead += BytesPerProgram;                           // Increment the counter
		}
	
		if (!(BytesRead & 0xFFFF) && (BytesRead & 0x00FF0000))      // Extended address required
		{
			USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);            // Load extended address command
			USI_SPITransmit(0x00);
			USI_SPITransmit((BytesRead & 0x00FF0000) >> 16);        // The 3rd byte of the long holds the extended address
			USI_SPITransmit(0x00);
		}

		ISPCC_ProgramChip();                                        // Start the program cycle
    315c:	82 14       	cp	r8, r2
    315e:	93 04       	cpc	r9, r3
    3160:	a4 04       	cpc	r10, r4
    3162:	b5 04       	cpc	r11, r5
    3164:	08 f0       	brcs	.+2      	; 0x3168 <PM_CreateProgrammingPackets+0x11a>
    3166:	b7 c0       	rjmp	.+366    	; 0x32d6 <PM_CreateProgrammingPackets+0x288>
    3168:	20 91 37 01 	lds	r18, 0x0137
    316c:	82 2f       	mov	r24, r18
    316e:	99 27       	eor	r25, r25
    3170:	ac 01       	movw	r20, r24
    3172:	41 70       	andi	r20, 0x01	; 1
    3174:	50 70       	andi	r21, 0x00	; 0
    3176:	80 ff       	sbrs	r24, 0
    3178:	58 c0       	rjmp	.+176    	; 0x322a <PM_CreateProgrammingPackets+0x1dc>
    317a:	f1 ea       	ldi	r31, 0xA1	; 161
    317c:	6f 16       	cp	r6, r31
    317e:	71 04       	cpc	r7, r1
    3180:	88 f1       	brcs	.+98     	; 0x31e4 <PM_CreateProgrammingPackets+0x196>
    3182:	8b 81       	ldd	r24, Y+3	; 0x03
    3184:	88 23       	and	r24, r24
    3186:	49 f4       	brne	.+18     	; 0x319a <PM_CreateProgrammingPackets+0x14c>
    3188:	70 ea       	ldi	r23, 0xA0	; 160
    318a:	c7 2e       	mov	r12, r23
    318c:	d1 2c       	mov	r13, r1
    318e:	2f 77       	andi	r18, 0x7F	; 127
    3190:	20 93 37 01 	sts	0x0137, r18
    3194:	e1 e0       	ldi	r30, 0x01	; 1
    3196:	eb 83       	std	Y+3, r30	; 0x03
    3198:	0a c0       	rjmp	.+20     	; 0x31ae <PM_CreateProgrammingPackets+0x160>
    319a:	60 e6       	ldi	r22, 0x60	; 96
    319c:	c6 2e       	mov	r12, r22
    319e:	6f ef       	ldi	r22, 0xFF	; 255
    31a0:	d6 2e       	mov	r13, r22
    31a2:	c6 0c       	add	r12, r6
    31a4:	d7 1c       	adc	r13, r7
    31a6:	20 68       	ori	r18, 0x80	; 128
    31a8:	20 93 37 01 	sts	0x0137, r18
    31ac:	1b 82       	std	Y+3, r1	; 0x03
    31ae:	00 e0       	ldi	r16, 0x00	; 0
    31b0:	10 e0       	ldi	r17, 0x00	; 0
    31b2:	0c 15       	cp	r16, r12
    31b4:	1d 05       	cpc	r17, r13
    31b6:	78 f4       	brcc	.+30     	; 0x31d6 <PM_CreateProgrammingPackets+0x188>
    31b8:	5e e3       	ldi	r21, 0x3E	; 62
    31ba:	e5 2e       	mov	r14, r21
    31bc:	51 e0       	ldi	r21, 0x01	; 1
    31be:	f5 2e       	mov	r15, r21
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
    31c6:	f7 01       	movw	r30, r14
    31c8:	81 93       	st	Z+, r24
    31ca:	7f 01       	movw	r14, r30
    31cc:	0f 5f       	subi	r16, 0xFF	; 255
    31ce:	1f 4f       	sbci	r17, 0xFF	; 255
    31d0:	0c 15       	cp	r16, r12
    31d2:	1d 05       	cpc	r17, r13
    31d4:	a8 f3       	brcs	.-22     	; 0x31c0 <PM_CreateProgrammingPackets+0x172>
    31d6:	8d 2d       	mov	r24, r13
    31d8:	99 27       	eor	r25, r25
    31da:	80 93 35 01 	sts	0x0135, r24
    31de:	c0 92 36 01 	sts	0x0136, r12
    31e2:	4b c0       	rjmp	.+150    	; 0x327a <PM_CreateProgrammingPackets+0x22c>
    31e4:	00 e0       	ldi	r16, 0x00	; 0
    31e6:	10 e0       	ldi	r17, 0x00	; 0
    31e8:	06 15       	cp	r16, r6
    31ea:	17 05       	cpc	r17, r7
    31ec:	78 f4       	brcc	.+30     	; 0x320c <PM_CreateProgrammingPackets+0x1be>
    31ee:	3e e3       	ldi	r19, 0x3E	; 62
    31f0:	e3 2e       	mov	r14, r19
    31f2:	31 e0       	ldi	r19, 0x01	; 1
    31f4:	f3 2e       	mov	r15, r19
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
    31fc:	f7 01       	movw	r30, r14
    31fe:	81 93       	st	Z+, r24
    3200:	7f 01       	movw	r14, r30
    3202:	0f 5f       	subi	r16, 0xFF	; 255
    3204:	1f 4f       	sbci	r17, 0xFF	; 255
    3206:	06 15       	cp	r16, r6
    3208:	17 05       	cpc	r17, r7
    320a:	a8 f3       	brcs	.-22     	; 0x31f6 <PM_CreateProgrammingPackets+0x1a8>
    320c:	87 2d       	mov	r24, r7
    320e:	99 27       	eor	r25, r25
    3210:	80 93 35 01 	sts	0x0135, r24
    3214:	60 92 36 01 	sts	0x0136, r6
    3218:	80 91 37 01 	lds	r24, 0x0137
    321c:	80 68       	ori	r24, 0x80	; 128
    321e:	80 93 37 01 	sts	0x0137, r24
    3222:	c3 01       	movw	r24, r6
    3224:	aa 27       	eor	r26, r26
    3226:	bb 27       	eor	r27, r27
    3228:	2b c0       	rjmp	.+86     	; 0x3280 <PM_CreateProgrammingPackets+0x232>
    322a:	c6 01       	movw	r24, r12
    322c:	aa 27       	eor	r26, r26
    322e:	bb 27       	eor	r27, r27
    3230:	88 0d       	add	r24, r8
    3232:	99 1d       	adc	r25, r9
    3234:	aa 1d       	adc	r26, r10
    3236:	bb 1d       	adc	r27, r11
    3238:	28 16       	cp	r2, r24
    323a:	39 06       	cpc	r3, r25
    323c:	4a 06       	cpc	r4, r26
    323e:	5b 06       	cpc	r5, r27
    3240:	48 f4       	brcc	.+18     	; 0x3254 <PM_CreateProgrammingPackets+0x206>
    3242:	61 01       	movw	r12, r2
    3244:	c8 18       	sub	r12, r8
    3246:	d9 08       	sbc	r13, r9
    3248:	8d 2d       	mov	r24, r13
    324a:	99 27       	eor	r25, r25
    324c:	80 93 35 01 	sts	0x0135, r24
    3250:	c0 92 36 01 	sts	0x0136, r12
    3254:	8a 01       	movw	r16, r20
    3256:	4c 15       	cp	r20, r12
    3258:	5d 05       	cpc	r21, r13
    325a:	78 f4       	brcc	.+30     	; 0x327a <PM_CreateProgrammingPackets+0x22c>
    325c:	8e e3       	ldi	r24, 0x3E	; 62
    325e:	e8 2e       	mov	r14, r24
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	f8 2e       	mov	r15, r24
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
    326a:	f7 01       	movw	r30, r14
    326c:	81 93       	st	Z+, r24
    326e:	7f 01       	movw	r14, r30
    3270:	0f 5f       	subi	r16, 0xFF	; 255
    3272:	1f 4f       	sbci	r17, 0xFF	; 255
    3274:	0c 15       	cp	r16, r12
    3276:	1d 05       	cpc	r17, r13
    3278:	a8 f3       	brcs	.-22     	; 0x3264 <PM_CreateProgrammingPackets+0x216>
    327a:	c6 01       	movw	r24, r12
    327c:	aa 27       	eor	r26, r26
    327e:	bb 27       	eor	r27, r27
    3280:	88 0e       	add	r8, r24
    3282:	99 1e       	adc	r9, r25
    3284:	aa 1e       	adc	r10, r26
    3286:	bb 1e       	adc	r11, r27
    3288:	81 14       	cp	r8, r1
    328a:	91 04       	cpc	r9, r1
    328c:	e1 f4       	brne	.+56     	; 0x32c6 <PM_CreateProgrammingPackets+0x278>
    328e:	e1 2c       	mov	r14, r1
    3290:	f1 2c       	mov	r15, r1
    3292:	bf ef       	ldi	r27, 0xFF	; 255
    3294:	0b 2f       	mov	r16, r27
    3296:	11 2d       	mov	r17, r1
    3298:	e8 20       	and	r14, r8
    329a:	f9 20       	and	r15, r9
    329c:	0a 21       	and	r16, r10
    329e:	1b 21       	and	r17, r11
    32a0:	e1 14       	cp	r14, r1
    32a2:	f1 04       	cpc	r15, r1
    32a4:	01 05       	cpc	r16, r1
    32a6:	11 05       	cpc	r17, r1
    32a8:	71 f0       	breq	.+28     	; 0x32c6 <PM_CreateProgrammingPackets+0x278>
    32aa:	8d e4       	ldi	r24, 0x4D	; 77
    32ac:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    32b6:	c8 01       	movw	r24, r16
    32b8:	aa 27       	eor	r26, r26
    32ba:	bb 27       	eor	r27, r27
    32bc:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    32c6:	0e 94 c4 10 	call	0x2188 <ISPCC_ProgramChip>
    32ca:	82 14       	cp	r8, r2
    32cc:	93 04       	cpc	r9, r3
    32ce:	a4 04       	cpc	r10, r4
    32d0:	b5 04       	cpc	r11, r5
    32d2:	08 f4       	brcc	.+2      	; 0x32d6 <PM_CreateProgrammingPackets+0x288>
    32d4:	49 cf       	rjmp	.-366    	; 0x3168 <PM_CreateProgrammingPackets+0x11a>
    32d6:	23 96       	adiw	r28, 0x03	; 3
    32d8:	0f b6       	in	r0, 0x3f	; 63
    32da:	f8 94       	cli
    32dc:	de bf       	out	0x3e, r29	; 62
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	cd bf       	out	0x3d, r28	; 61
    32e2:	df 91       	pop	r29
    32e4:	cf 91       	pop	r28
    32e6:	1f 91       	pop	r17
    32e8:	0f 91       	pop	r16
    32ea:	ff 90       	pop	r15
    32ec:	ef 90       	pop	r14
    32ee:	df 90       	pop	r13
    32f0:	cf 90       	pop	r12
    32f2:	bf 90       	pop	r11
    32f4:	af 90       	pop	r10
    32f6:	9f 90       	pop	r9
    32f8:	8f 90       	pop	r8
    32fa:	7f 90       	pop	r7
    32fc:	6f 90       	pop	r6
    32fe:	5f 90       	pop	r5
    3300:	4f 90       	pop	r4
    3302:	3f 90       	pop	r3
    3304:	2f 90       	pop	r2
    3306:	08 95       	ret

00003308 <PM_ShowStoredItemSizes>:
	}
}

void PM_ShowStoredItemSizes(void)
{
    3308:	1f 93       	push	r17
    330a:	cf 93       	push	r28
    330c:	df 93       	push	r29
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	2e 97       	sbiw	r28, 0x0e	; 14
    3314:	0f b6       	in	r0, 0x3f	; 63
    3316:	f8 94       	cli
    3318:	de bf       	out	0x3e, r29	; 62
    331a:	0f be       	out	0x3f, r0	; 63
    331c:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[14];
	uint8_t ItemInfoIndex = 0;
    331e:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t TempB;
	
	JoyStatus = 1;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)                           // Joystick is in the non-center position
    3324:	8e b3       	in	r24, 0x1e	; 30
    3326:	88 23       	and	r24, r24
    3328:	e9 f3       	breq	.-6      	; 0x3324 <PM_ShowStoredItemSizes+0x1c>
		{
			if (JoyStatus & JOY_UP)              // Previous item
    332a:	f6 9b       	sbis	0x1e, 6	; 30
    332c:	06 c0       	rjmp	.+12     	; 0x333a <PM_ShowStoredItemSizes+0x32>
				(ItemInfoIndex == 0)? ItemInfoIndex = 3 : ItemInfoIndex--;
    332e:	11 23       	and	r17, r17
    3330:	11 f4       	brne	.+4      	; 0x3336 <PM_ShowStoredItemSizes+0x2e>
    3332:	13 e0       	ldi	r17, 0x03	; 3
    3334:	0c c0       	rjmp	.+24     	; 0x334e <PM_ShowStoredItemSizes+0x46>
    3336:	11 50       	subi	r17, 0x01	; 1
    3338:	0a c0       	rjmp	.+20     	; 0x334e <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_DOWN)      // Next item
    333a:	f7 9b       	sbis	0x1e, 7	; 30
    333c:	06 c0       	rjmp	.+12     	; 0x334a <PM_ShowStoredItemSizes+0x42>
				(ItemInfoIndex == 3)? ItemInfoIndex = 0 : ItemInfoIndex++;
    333e:	13 30       	cpi	r17, 0x03	; 3
    3340:	11 f4       	brne	.+4      	; 0x3346 <PM_ShowStoredItemSizes+0x3e>
    3342:	10 e0       	ldi	r17, 0x00	; 0
    3344:	04 c0       	rjmp	.+8      	; 0x334e <PM_ShowStoredItemSizes+0x46>
    3346:	1f 5f       	subi	r17, 0xFF	; 255
    3348:	02 c0       	rjmp	.+4      	; 0x334e <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_LEFT)
    334a:	f2 99       	sbic	0x1e, 2	; 30
    334c:	53 c0       	rjmp	.+166    	; 0x33f4 <PM_ShowStoredItemSizes+0xec>
				return;
		
			switch (ItemInfoIndex)
    334e:	81 2f       	mov	r24, r17
    3350:	99 27       	eor	r25, r25
    3352:	81 30       	cpi	r24, 0x01	; 1
    3354:	91 05       	cpc	r25, r1
    3356:	a1 f0       	breq	.+40     	; 0x3380 <PM_ShowStoredItemSizes+0x78>
    3358:	82 30       	cpi	r24, 0x02	; 2
    335a:	91 05       	cpc	r25, r1
    335c:	1c f4       	brge	.+6      	; 0x3364 <PM_ShowStoredItemSizes+0x5c>
    335e:	89 2b       	or	r24, r25
    3360:	39 f0       	breq	.+14     	; 0x3370 <PM_ShowStoredItemSizes+0x68>
    3362:	41 c0       	rjmp	.+130    	; 0x33e6 <PM_ShowStoredItemSizes+0xde>
    3364:	82 30       	cpi	r24, 0x02	; 2
    3366:	91 05       	cpc	r25, r1
    3368:	01 f1       	breq	.+64     	; 0x33aa <PM_ShowStoredItemSizes+0xa2>
    336a:	03 97       	sbiw	r24, 0x03	; 3
    336c:	39 f1       	breq	.+78     	; 0x33bc <PM_ShowStoredItemSizes+0xb4>
    336e:	3b c0       	rjmp	.+118    	; 0x33e6 <PM_ShowStoredItemSizes+0xde>
			{
				case 0:
					strcpy_P(Buffer, PSTR("DATA-"));
    3370:	69 ed       	ldi	r22, 0xD9	; 217
    3372:	73 e0       	ldi	r23, 0x03	; 3
    3374:	ce 01       	movw	r24, r28
    3376:	01 96       	adiw	r24, 0x01	; 1
    3378:	0e 94 d6 1a 	call	0x35ac <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_FLASH), &Buffer[5], 10);
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	07 c0       	rjmp	.+14     	; 0x338e <PM_ShowStoredItemSizes+0x86>
					break;
				case 1:
					strcpy_P(Buffer, PSTR("EPRM-"));
    3380:	6f ed       	ldi	r22, 0xDF	; 223
    3382:	73 e0       	ldi	r23, 0x03	; 3
    3384:	ce 01       	movw	r24, r28
    3386:	01 96       	adiw	r24, 0x01	; 1
    3388:	0e 94 d6 1a 	call	0x35ac <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_EEPROM), &Buffer[5], 10);
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	0e 94 1b 13 	call	0x2636 <PM_GetStoredDataSize>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	2a e0       	ldi	r18, 0x0A	; 10
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	ae 01       	movw	r20, r28
    339c:	4a 5f       	subi	r20, 0xFA	; 250
    339e:	5f 4f       	sbci	r21, 0xFF	; 255
    33a0:	bc 01       	movw	r22, r24
    33a2:	cd 01       	movw	r24, r26
    33a4:	0e 94 dd 1a 	call	0x35ba <ultoa>
					break;
    33a8:	1e c0       	rjmp	.+60     	; 0x33e6 <PM_ShowStoredItemSizes+0xde>
				case 2:
					strcpy_P(Buffer, PSTR("FUSE-"));
    33aa:	65 ee       	ldi	r22, 0xE5	; 229
    33ac:	73 e0       	ldi	r23, 0x03	; 3
    33ae:	ce 01       	movw	r24, r28
    33b0:	01 96       	adiw	r24, 0x01	; 1
    33b2:	0e 94 d6 1a 	call	0x35ac <strcpy_P>
					TempB = eeprom_read_byte_169(&Prog_TotalFuseBytes);
    33b6:	80 e1       	ldi	r24, 0x10	; 16
    33b8:	91 e0       	ldi	r25, 0x01	; 1
    33ba:	08 c0       	rjmp	.+16     	; 0x33cc <PM_ShowStoredItemSizes+0xc4>
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);
					break;
				case 3:
					strcpy_P(Buffer, PSTR("LOCK-"));
    33bc:	6b ee       	ldi	r22, 0xEB	; 235
    33be:	73 e0       	ldi	r23, 0x03	; 3
    33c0:	ce 01       	movw	r24, r28
    33c2:	01 96       	adiw	r24, 0x01	; 1
    33c4:	0e 94 d6 1a 	call	0x35ac <strcpy_P>
					TempB = eeprom_read_byte_169(&Prog_TotalLockBytes);
    33c8:	8e e0       	ldi	r24, 0x0E	; 14
    33ca:	91 e0       	ldi	r25, 0x01	; 1
    33cc:	0e 94 5c 08 	call	0x10b8 <eeprom_read_byte_169>
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);		
    33d0:	8f 3f       	cpi	r24, 0xFF	; 255
    33d2:	11 f0       	breq	.+4      	; 0x33d8 <PM_ShowStoredItemSizes+0xd0>
    33d4:	99 27       	eor	r25, r25
    33d6:	02 c0       	rjmp	.+4      	; 0x33dc <PM_ShowStoredItemSizes+0xd4>
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	be 01       	movw	r22, r28
    33de:	6a 5f       	subi	r22, 0xFA	; 250
    33e0:	7f 4f       	sbci	r23, 0xFF	; 255
    33e2:	0e 94 29 03 	call	0x652 <MAIN_IntToStr>
			}
	
			LCD_puts(Buffer);
    33e6:	ce 01       	movw	r24, r28
    33e8:	01 96       	adiw	r24, 0x01	; 1
    33ea:	0e 94 61 07 	call	0xec2 <LCD_puts>

			MAIN_WaitForJoyRelease();
    33ee:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
    33f2:	98 cf       	rjmp	.-208    	; 0x3324 <PM_ShowStoredItemSizes+0x1c>
    33f4:	2e 96       	adiw	r28, 0x0e	; 14
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	de bf       	out	0x3e, r29	; 62
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	cd bf       	out	0x3d, r28	; 61
    3400:	df 91       	pop	r29
    3402:	cf 91       	pop	r28
    3404:	1f 91       	pop	r17
    3406:	08 95       	ret

00003408 <TM_FindNextTag>:
	DF_EnableDataflash(FALSE);
}

void TM_FindNextTag(void)
{
    3408:	af 92       	push	r10
    340a:	bf 92       	push	r11
    340c:	df 92       	push	r13
    340e:	ef 92       	push	r14
    3410:	ff 92       	push	r15
    3412:	0f 93       	push	r16
    3414:	1f 93       	push	r17
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	69 97       	sbiw	r28, 0x19	; 25
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	f8 94       	cli
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Buffer[21];
	uint8_t  HeadBuff[4]      = BT_TAGHEADER;
    342a:	80 e4       	ldi	r24, 0x40	; 64
    342c:	8e 8b       	std	Y+22, r24	; 0x16
    342e:	86 e1       	ldi	r24, 0x16	; 22
    3430:	a8 2e       	mov	r10, r24
    3432:	b1 2c       	mov	r11, r1
    3434:	ac 0e       	add	r10, r28
    3436:	bd 1e       	adc	r11, r29
    3438:	88 e2       	ldi	r24, 0x28	; 40
    343a:	8f 8b       	std	Y+23, r24	; 0x17
    343c:	83 e2       	ldi	r24, 0x23	; 35
    343e:	88 8f       	std	Y+24, r24	; 0x18
    3440:	89 e2       	ldi	r24, 0x29	; 41
    3442:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t ProgDataSize     = PM_GetStoredDataSize(TYPE_FLASH);
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	0e 94 1b 13 	call	0x2636 <PM_GetStoredDataSize>
    344a:	7b 01       	movw	r14, r22
    344c:	8c 01       	movw	r16, r24
	uint8_t  TotalOkHeadBytes = 0;
    344e:	dd 24       	eor	r13, r13
	uint8_t  TagByte;
	uint8_t  BytesRead;
	
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);    // Orange = busy
    3450:	81 b3       	in	r24, 0x11	; 17
    3452:	80 63       	ori	r24, 0x30	; 48
    3454:	81 bb       	out	0x11, r24	; 17

	while (DFPos < ProgDataSize)
	{
		BytesRead = 1;
		
		if (SPI_SPITransmit(0x00) == HeadBuff[TotalOkHeadBytes++])
		{
			if (TotalOkHeadBytes == 4)
			{
				uint8_t HB;
			
				for (HB = 0; HB < 20; HB++)
				{
					TagByte = SPI_SPITransmit(0x00);
					Buffer[HB] = TagByte;
					
					if (TagByte == 0x00)
					  break;
				}
				
				Buffer[20] = '\0';             // Make sure string is null-terminated

				TagExists = TRUE;
				BytesRead = (HB + 2);

				LCD_puts(Buffer);
				MAIN_SETSTATUSLED(MAIN_STATLED_GREEN); // Green = ready
				return;
			}
		}
		else
		{
			TotalOkHeadBytes = 0;
		}

		DFPos += BytesRead;
    3456:	80 91 d2 02 	lds	r24, 0x02D2
    345a:	90 91 d3 02 	lds	r25, 0x02D3
    345e:	a0 91 d4 02 	lds	r26, 0x02D4
    3462:	b0 91 d5 02 	lds	r27, 0x02D5
    3466:	8e 15       	cp	r24, r14
    3468:	9f 05       	cpc	r25, r15
    346a:	a0 07       	cpc	r26, r16
    346c:	b1 07       	cpc	r27, r17
    346e:	08 f0       	brcs	.+2      	; 0x3472 <TM_FindNextTag+0x6a>
    3470:	43 c0       	rjmp	.+134    	; 0x34f8 <TM_FindNextTag+0xf0>
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
    3478:	f5 01       	movw	r30, r10
    347a:	ed 0d       	add	r30, r13
    347c:	f1 1d       	adc	r31, r1
    347e:	d3 94       	inc	r13
    3480:	90 81       	ld	r25, Z
    3482:	89 17       	cp	r24, r25
    3484:	21 f5       	brne	.+72     	; 0x34ce <TM_FindNextTag+0xc6>
    3486:	84 e0       	ldi	r24, 0x04	; 4
    3488:	d8 16       	cp	r13, r24
    348a:	11 f5       	brne	.+68     	; 0x34d0 <TM_FindNextTag+0xc8>
    348c:	ff 24       	eor	r15, r15
    348e:	00 e0       	ldi	r16, 0x00	; 0
    3490:	10 e0       	ldi	r17, 0x00	; 0
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
    3498:	9e 01       	movw	r18, r28
    349a:	2f 5f       	subi	r18, 0xFF	; 255
    349c:	3f 4f       	sbci	r19, 0xFF	; 255
    349e:	f8 01       	movw	r30, r16
    34a0:	e2 0f       	add	r30, r18
    34a2:	f3 1f       	adc	r31, r19
    34a4:	80 83       	st	Z, r24
    34a6:	88 23       	and	r24, r24
    34a8:	31 f0       	breq	.+12     	; 0x34b6 <TM_FindNextTag+0xae>
    34aa:	f3 94       	inc	r15
    34ac:	0f 5f       	subi	r16, 0xFF	; 255
    34ae:	1f 4f       	sbci	r17, 0xFF	; 255
    34b0:	83 e1       	ldi	r24, 0x13	; 19
    34b2:	8f 15       	cp	r24, r15
    34b4:	70 f7       	brcc	.-36     	; 0x3492 <TM_FindNextTag+0x8a>
    34b6:	1d 8a       	std	Y+21, r1	; 0x15
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	80 93 4b 02 	sts	0x024B, r24
    34be:	c9 01       	movw	r24, r18
    34c0:	0e 94 61 07 	call	0xec2 <LCD_puts>
    34c4:	81 b3       	in	r24, 0x11	; 17
    34c6:	8f 7c       	andi	r24, 0xCF	; 207
    34c8:	80 61       	ori	r24, 0x10	; 16
    34ca:	81 bb       	out	0x11, r24	; 17
    34cc:	31 c0       	rjmp	.+98     	; 0x3530 <TM_FindNextTag+0x128>
    34ce:	dd 24       	eor	r13, r13
    34d0:	80 91 d2 02 	lds	r24, 0x02D2
    34d4:	90 91 d3 02 	lds	r25, 0x02D3
    34d8:	a0 91 d4 02 	lds	r26, 0x02D4
    34dc:	b0 91 d5 02 	lds	r27, 0x02D5
    34e0:	01 96       	adiw	r24, 0x01	; 1
    34e2:	a1 1d       	adc	r26, r1
    34e4:	b1 1d       	adc	r27, r1
    34e6:	80 93 d2 02 	sts	0x02D2, r24
    34ea:	90 93 d3 02 	sts	0x02D3, r25
    34ee:	a0 93 d4 02 	sts	0x02D4, r26
    34f2:	b0 93 d5 02 	sts	0x02D5, r27
    34f6:	b7 cf       	rjmp	.-146    	; 0x3466 <TM_FindNextTag+0x5e>
	}
	
	DF_ContinuousReadEnable(0, 0);
    34f8:	60 e0       	ldi	r22, 0x00	; 0
    34fa:	70 e0       	ldi	r23, 0x00	; 0
    34fc:	cb 01       	movw	r24, r22
    34fe:	0e 94 bd 09 	call	0x137a <DF_ContinuousReadEnable>
	DFPos = 0;
    3502:	10 92 d2 02 	sts	0x02D2, r1
    3506:	10 92 d3 02 	sts	0x02D3, r1
    350a:	10 92 d4 02 	sts	0x02D4, r1
    350e:	10 92 d5 02 	sts	0x02D5, r1
	
	if (TagExists == FALSE)
    3512:	80 91 4b 02 	lds	r24, 0x024B
    3516:	88 23       	and	r24, r24
    3518:	49 f4       	brne	.+18     	; 0x352c <TM_FindNextTag+0x124>
	{
		MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);  // Green = ready
    351a:	81 b3       	in	r24, 0x11	; 17
    351c:	8f 7c       	andi	r24, 0xCF	; 207
    351e:	80 61       	ori	r24, 0x10	; 16
    3520:	81 bb       	out	0x11, r24	; 17
		MAIN_ShowError(PSTR("NO TAGS"));
    3522:	81 ef       	ldi	r24, 0xF1	; 241
    3524:	93 e0       	ldi	r25, 0x03	; 3
    3526:	0e 94 63 03 	call	0x6c6 <MAIN_ShowError>
    352a:	02 c0       	rjmp	.+4      	; 0x3530 <TM_FindNextTag+0x128>
	}
	else
	{
		/* The following line _is_ recursion, but the function will only ever call itself
		   a maximum of one time. The function will call itself upon skipping from the last
		   tag stored in the program data to the first; to guard against infinite recursion
		   if no tags are present, the system will error out if the TagExists flag is empty
		   after a full data read. Once a tag has been read and displayed onto the LCD, the
           function returns to the main tag handling routine.                               */
		TM_FindNextTag();
    352c:	0e 94 04 1a 	call	0x3408 <TM_FindNextTag>
    3530:	69 96       	adiw	r28, 0x19	; 25
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	cd bf       	out	0x3d, r28	; 61
    353c:	df 91       	pop	r29
    353e:	cf 91       	pop	r28
    3540:	1f 91       	pop	r17
    3542:	0f 91       	pop	r16
    3544:	ff 90       	pop	r15
    3546:	ef 90       	pop	r14
    3548:	df 90       	pop	r13
    354a:	bf 90       	pop	r11
    354c:	af 90       	pop	r10
    354e:	08 95       	ret

00003550 <TM_ShowTags>:
    3550:	60 e0       	ldi	r22, 0x00	; 0
    3552:	70 e0       	ldi	r23, 0x00	; 0
    3554:	cb 01       	movw	r24, r22
    3556:	0e 94 bd 09 	call	0x137a <DF_ContinuousReadEnable>
    355a:	10 92 4b 02 	sts	0x024B, r1
    355e:	10 92 d2 02 	sts	0x02D2, r1
    3562:	10 92 d3 02 	sts	0x02D3, r1
    3566:	10 92 d4 02 	sts	0x02D4, r1
    356a:	10 92 d5 02 	sts	0x02D5, r1
    356e:	0e 94 04 1a 	call	0x3408 <TM_FindNextTag>
    3572:	80 91 4b 02 	lds	r24, 0x024B
    3576:	88 23       	and	r24, r24
    3578:	71 f0       	breq	.+28     	; 0x3596 <TM_ShowTags+0x46>
    357a:	8e b3       	in	r24, 0x1e	; 30
    357c:	88 23       	and	r24, r24
    357e:	e9 f3       	breq	.-6      	; 0x357a <TM_ShowTags+0x2a>
    3580:	f7 9b       	sbis	0x1e, 7	; 30
    3582:	03 c0       	rjmp	.+6      	; 0x358a <TM_ShowTags+0x3a>
    3584:	0e 94 04 1a 	call	0x3408 <TM_FindNextTag>
    3588:	02 c0       	rjmp	.+4      	; 0x358e <TM_ShowTags+0x3e>
    358a:	f2 99       	sbic	0x1e, 2	; 30
    358c:	03 c0       	rjmp	.+6      	; 0x3594 <TM_ShowTags+0x44>
    358e:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
    3592:	f3 cf       	rjmp	.-26     	; 0x357a <TM_ShowTags+0x2a>
    3594:	80 e0       	ldi	r24, 0x00	; 0
    3596:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    359a:	08 95       	ret

0000359c <__vector_2>:
.global PCINT0_vect             ; Pin change 0 (joystick)
.global PCINT1_vect             ; Pin change 1 (joystick)

PCINT0_vect:
  jmp PCINT1_vect
    359c:	0c 94 89 03 	jmp	0x712 <__vector_3>

000035a0 <__vector_10>:

.global TIMER0_COMP_vect             ; Timer 0 compare

TIMER0_COMP_vect:
  push r24
    35a0:	8f 93       	push	r24
  ldi r24, (USI_CONTROL_REG_FLAGS | (1<<USITC))
    35a2:	8b e5       	ldi	r24, 0x5B	; 91
  sts _SFR_MEM_ADDR(USICR), r24
    35a4:	80 93 b8 00 	sts	0x00B8, r24
  pop r24
    35a8:	8f 91       	pop	r24
  reti
    35aa:	18 95       	reti

000035ac <strcpy_P>:
    35ac:	fb 01       	movw	r30, r22
    35ae:	dc 01       	movw	r26, r24
    35b0:	05 90       	lpm	r0, Z+
    35b2:	0d 92       	st	X+, r0
    35b4:	00 20       	and	r0, r0
    35b6:	e1 f7       	brne	.-8      	; 0x35b0 <strcpy_P+0x4>
    35b8:	08 95       	ret

000035ba <ultoa>:
    35ba:	fa 01       	movw	r30, r20
    35bc:	cf 93       	push	r28
    35be:	ff 93       	push	r31
    35c0:	ef 93       	push	r30
    35c2:	22 30       	cpi	r18, 0x02	; 2
    35c4:	cc f0       	brlt	.+50     	; 0x35f8 <ultoa+0x3e>
    35c6:	25 32       	cpi	r18, 0x25	; 37
    35c8:	bc f4       	brge	.+46     	; 0x35f8 <ultoa+0x3e>
    35ca:	c2 2f       	mov	r28, r18
    35cc:	2c 2f       	mov	r18, r28
    35ce:	33 27       	eor	r19, r19
    35d0:	44 27       	eor	r20, r20
    35d2:	55 27       	eor	r21, r21
    35d4:	ff 93       	push	r31
    35d6:	ef 93       	push	r30
    35d8:	0e 94 31 1b 	call	0x3662 <__udivmodsi4>
    35dc:	ef 91       	pop	r30
    35de:	ff 91       	pop	r31
    35e0:	60 5d       	subi	r22, 0xD0	; 208
    35e2:	6a 33       	cpi	r22, 0x3A	; 58
    35e4:	0c f0       	brlt	.+2      	; 0x35e8 <ultoa+0x2e>
    35e6:	69 5d       	subi	r22, 0xD9	; 217
    35e8:	61 93       	st	Z+, r22
    35ea:	b9 01       	movw	r22, r18
    35ec:	ca 01       	movw	r24, r20
    35ee:	60 50       	subi	r22, 0x00	; 0
    35f0:	70 40       	sbci	r23, 0x00	; 0
    35f2:	80 40       	sbci	r24, 0x00	; 0
    35f4:	90 40       	sbci	r25, 0x00	; 0
    35f6:	51 f7       	brne	.-44     	; 0x35cc <ultoa+0x12>
    35f8:	10 82       	st	Z, r1
    35fa:	8f 91       	pop	r24
    35fc:	9f 91       	pop	r25
    35fe:	cf 91       	pop	r28
    3600:	0c 94 02 1b 	jmp	0x3604 <strrev>

00003604 <strrev>:
    3604:	dc 01       	movw	r26, r24
    3606:	fc 01       	movw	r30, r24
    3608:	01 90       	ld	r0, Z+
    360a:	00 20       	and	r0, r0
    360c:	e9 f7       	brne	.-6      	; 0x3608 <strrev+0x4>
    360e:	32 97       	sbiw	r30, 0x02	; 2
    3610:	ae 17       	cp	r26, r30
    3612:	bf 07       	cpc	r27, r31
    3614:	30 f4       	brcc	.+12     	; 0x3622 <strrev+0x1e>
    3616:	7c 91       	ld	r23, X
    3618:	60 81       	ld	r22, Z
    361a:	70 83       	st	Z, r23
    361c:	31 97       	sbiw	r30, 0x01	; 1
    361e:	6d 93       	st	X+, r22
    3620:	f7 cf       	rjmp	.-18     	; 0x3610 <strrev+0xc>
    3622:	08 95       	ret

00003624 <__mulsi3>:
    3624:	62 9f       	mul	r22, r18
    3626:	d0 01       	movw	r26, r0
    3628:	73 9f       	mul	r23, r19
    362a:	f0 01       	movw	r30, r0
    362c:	82 9f       	mul	r24, r18
    362e:	e0 0d       	add	r30, r0
    3630:	f1 1d       	adc	r31, r1
    3632:	64 9f       	mul	r22, r20
    3634:	e0 0d       	add	r30, r0
    3636:	f1 1d       	adc	r31, r1
    3638:	92 9f       	mul	r25, r18
    363a:	f0 0d       	add	r31, r0
    363c:	83 9f       	mul	r24, r19
    363e:	f0 0d       	add	r31, r0
    3640:	74 9f       	mul	r23, r20
    3642:	f0 0d       	add	r31, r0
    3644:	65 9f       	mul	r22, r21
    3646:	f0 0d       	add	r31, r0
    3648:	99 27       	eor	r25, r25
    364a:	72 9f       	mul	r23, r18
    364c:	b0 0d       	add	r27, r0
    364e:	e1 1d       	adc	r30, r1
    3650:	f9 1f       	adc	r31, r25
    3652:	63 9f       	mul	r22, r19
    3654:	b0 0d       	add	r27, r0
    3656:	e1 1d       	adc	r30, r1
    3658:	f9 1f       	adc	r31, r25
    365a:	bd 01       	movw	r22, r26
    365c:	cf 01       	movw	r24, r30
    365e:	11 24       	eor	r1, r1
    3660:	08 95       	ret

00003662 <__udivmodsi4>:
    3662:	a1 e2       	ldi	r26, 0x21	; 33
    3664:	1a 2e       	mov	r1, r26
    3666:	aa 1b       	sub	r26, r26
    3668:	bb 1b       	sub	r27, r27
    366a:	fd 01       	movw	r30, r26
    366c:	0d c0       	rjmp	.+26     	; 0x3688 <__udivmodsi4_ep>

0000366e <__udivmodsi4_loop>:
    366e:	aa 1f       	adc	r26, r26
    3670:	bb 1f       	adc	r27, r27
    3672:	ee 1f       	adc	r30, r30
    3674:	ff 1f       	adc	r31, r31
    3676:	a2 17       	cp	r26, r18
    3678:	b3 07       	cpc	r27, r19
    367a:	e4 07       	cpc	r30, r20
    367c:	f5 07       	cpc	r31, r21
    367e:	20 f0       	brcs	.+8      	; 0x3688 <__udivmodsi4_ep>
    3680:	a2 1b       	sub	r26, r18
    3682:	b3 0b       	sbc	r27, r19
    3684:	e4 0b       	sbc	r30, r20
    3686:	f5 0b       	sbc	r31, r21

00003688 <__udivmodsi4_ep>:
    3688:	66 1f       	adc	r22, r22
    368a:	77 1f       	adc	r23, r23
    368c:	88 1f       	adc	r24, r24
    368e:	99 1f       	adc	r25, r25
    3690:	1a 94       	dec	r1
    3692:	69 f7       	brne	.-38     	; 0x366e <__udivmodsi4_loop>
    3694:	60 95       	com	r22
    3696:	70 95       	com	r23
    3698:	80 95       	com	r24
    369a:	90 95       	com	r25
    369c:	9b 01       	movw	r18, r22
    369e:	ac 01       	movw	r20, r24
    36a0:	bd 01       	movw	r22, r26
    36a2:	cf 01       	movw	r24, r30
    36a4:	08 95       	ret
