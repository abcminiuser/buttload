
ButtLoad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00003542  000035f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003542  00000000  00000000  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b4  00800104  00800104  000035fa  2**0
                  ALLOC
  3 .noinit       00000000  008002b8  008002b8  00003683  2**0
                  CONTENTS
  4 .eeprom       00000089  00810000  00810000  000035fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .stab         000003e4  00000000  00000000  00003684  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000000fb  00000000  00000000  00003a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 0000012c  00000000  00000000  00003b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d49  00000000  00000000  00003c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000041ec  00000000  00000000  000049d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000100a  00000000  00000000  00008bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000033b0  00000000  00000000  00009bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000114f  00000000  00000000  0000cf7e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 14 02 	jmp	0x428 <__init>
       4:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
       8:	0c 94 13 1a 	jmp	0x3426 <__vector_2>
       c:	0c 94 94 03 	jmp	0x728 <__vector_3>
      10:	0c 94 ce 0b 	jmp	0x179c <__vector_4>
      14:	0c 94 eb 07 	jmp	0xfd6 <__vector_5>
      18:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      1c:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      20:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      24:	0c 94 12 0c 	jmp	0x1824 <__vector_9>
      28:	0c 94 15 1a 	jmp	0x342a <__vector_10>
      2c:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      30:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      34:	0c 94 54 0b 	jmp	0x16a8 <__vector_13>
      38:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      3c:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      40:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      44:	0c 94 4d 09 	jmp	0x129a <__vector_17>
      48:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      4c:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      50:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      54:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      58:	0c 94 98 08 	jmp	0x1130 <__vector_22>

0000005c <SIFONames>:
      5c:	53 54 4f 52 41 47 45 20 53 49 5a 45 53 00 00 56     STORAGE SIZES..V
      6c:	49 45 57 20 44 41 54 41 20 54 41 47 53 00           IEW DATA TAGS.

0000007a <USISpeeds>:
      7a:	20 35 37 31 35 33 20 48 5a 00 20 38 36 37 33 38      57153 HZ. 86738
      8a:	20 48 5a 00 31 31 33 34 32 37 20 48 5a 00 32 31      HZ.113427 HZ.21
      9a:	30 36 35 31 20 48 5a 00                             0651 HZ.

000000a2 <ProgOptions>:
      a2:	0b 01 ff 00 ef 00 df 00 cf 00 bb 00 b0 00           ..............

000000b0 <PRG_C>:
      b0:	45 52 41 53 45 20 4f 4e 4c 59 00                    ERASE ONLY.

000000bb <PRG_FL>:
      bb:	46 55 53 45 20 41 4e 44 20 4c 4f 43 4b 20 42 59     FUSE AND LOCK BY
      cb:	54 45 53 00                                         TES.

000000cf <PRG_L>:
      cf:	4c 4f 43 4b 20 42 59 54 45 53 20 4f 4e 4c 59 00     LOCK BYTES ONLY.

000000df <PRG_F>:
      df:	46 55 53 45 20 42 59 54 45 53 20 4f 4e 4c 59 00     FUSE BYTES ONLY.

000000ef <PRG_DE>:
      ef:	44 41 54 41 20 41 4e 44 20 45 45 50 52 4f 4d 00     DATA AND EEPROM.

000000ff <PRG_E>:
      ff:	45 45 50 52 4f 4d 20 4f 4e 4c 59 00                 EEPROM ONLY.

0000010b <PRG_D>:
     10b:	44 41 54 41 20 4f 4e 4c 59 00                       DATA ONLY.

00000115 <SettingFunctionPtrs>:
     115:	d2 05 25 06 5d 06 a9 06 9e 05 76 07                 ..%.].....v.

00000121 <SettingFunctionNames>:
     121:	7e 01 70 01 5f 01 4d 01 40 01 2d 01                 ~.p._.M.@.-.

0000012d <SFunc_GOBOOTLOADER>:
     12d:	4a 55 4d 50 20 54 4f 20 42 4f 4f 54 4c 4f 41 44     JUMP TO BOOTLOAD
     13d:	45 52 00                                            ER.

00000140 <SFunc_CLEARMEM>:
     140:	43 4c 45 41 52 20 4d 45 4d 4f 52 59 00              CLEAR MEMORY.

0000014d <SFunc_SETAUTOSLEEPTO>:
     14d:	53 45 54 20 53 4c 45 45 50 20 54 49 4d 45 4f 55     SET SLEEP TIMEOU
     15d:	54 00                                               T.

0000015f <SFunc_SETFIRMMINOR>:
     15f:	53 45 54 20 46 49 52 4d 20 56 45 52 53 49 4f 4e     SET FIRM VERSION
	...

00000170 <SFunc_SETSPISPEED>:
     170:	53 45 54 20 53 50 49 20 53 50 45 45 44 00           SET SPI SPEED.

0000017e <SFunc_SETCONTRAST>:
     17e:	53 45 54 20 43 4f 4e 54 52 41 53 54 00              SET CONTRAST.

0000018b <MainFunctionPtrs>:
     18b:	ed 03 6c 05 37 04 06 04 20 07 b8 03 0c 07           ..l.7... .....

00000199 <MainFunctionNames>:
     199:	f0 01 e5 01 d9 01 ca 01 bb 01 b2 01 a7 01           ..............

000001a7 <Func_SLEEP>:
     1a7:	53 4c 45 45 50 20 4d 4f 44 45 00                    SLEEP MODE.

000001b2 <Func_SETTINGS>:
     1b2:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

000001bb <Func_PRGMSTOREINFO>:
     1bb:	44 41 54 41 53 54 4f 52 45 20 49 4e 46 4f 00        DATASTORE INFO.

000001ca <Func_PRGMDATAFLASH>:
     1ca:	44 41 54 41 46 4c 41 53 48 20 50 52 47 4d 00        DATAFLASH PRGM.

000001d9 <Func_PRGMAVR>:
     1d9:	50 52 4f 47 52 41 4d 20 41 56 52 00                 PROGRAM AVR.

000001e5 <Func_STOREPRGM>:
     1e5:	53 54 4f 52 45 20 50 52 47 4d 00                    STORE PRGM.

000001f0 <Func_ISPPRGM>:
     1f0:	41 56 52 49 53 50 20 4d 4f 44 45 00                 AVRISP MODE.

000001fc <AboutTextPtrs>:
     1fc:	27 02 22 02 13 02 04 02                             '.".....

00000204 <CopyRight>:
     204:	3c 43 3e 20 32 30 30 36 20 2d 20 47 50 4c 00        <C> 2006 - GPL.

00000213 <AuthorName>:
     213:	42 59 20 44 45 41 4e 20 43 41 4d 45 52 41 00        BY DEAN CAMERA.

00000222 <VersionInfo>:
     222:	56 31 2d 34 00                                      V1-4.

00000227 <ProgrammerName>:
     227:	42 55 54 54 4c 4f 41 44 00                          BUTTLOAD.

00000230 <WaitText>:
     230:	2a 57 41 49 54 2a 00                                *WAIT*.

00000237 <BUTTTAG_Name>:
     237:	40 28 23 29 42 55 54 54 4c 4f 41 44 20 41 56 52     @(#)BUTTLOAD AVR
     247:	49 53 50 00                                         ISP.

0000024b <BUTTTAG_Author>:
     24b:	40 28 23 29 42 59 20 44 45 41 4e 20 43 41 4d 45     @(#)BY DEAN CAME
     25b:	52 41 00                                            RA.

0000025e <__c.17>:
     25e:	50 52 47 3e 20 20 00                                PRG>  .

00000265 <__c.16>:
     265:	42 41 44 49 53 52 00                                BADISR.

0000026c <__c.9>:
     26c:	4e 4f 20 45 52 41 53 45 20 43 4d 44 00              NO ERASE CMD.

00000279 <__c.10>:
     279:	4e 4f 20 44 41 54 41 00                             NO DATA.

00000281 <__c.11>:
     281:	4e 4f 20 45 45 50 52 4f 4d 00                       NO EEPROM.

0000028b <__c.12>:
     28b:	4e 4f 20 46 55 53 45 20 42 59 54 45 53 00           NO FUSE BYTES.

00000299 <__c.13>:
     299:	4e 4f 20 4c 4f 43 4b 20 42 59 54 45 53 00           NO LOCK BYTES.

000002a7 <__c.14>:
     2a7:	50 52 4f 47 52 41 4d 4d 49 4e 47 20 44 4f 4e 45     PROGRAMMING DONE
	...

000002b8 <__c.15>:
     2b8:	46 41 49 4c 45 44 00                                FAILED.

000002bf <__c.8>:
     2bf:	2a 53 54 4f 52 41 47 45 20 4d 4f 44 45 2a 00        *STORAGE MODE*.

000002ce <__c.5>:
     2ce:	43 4f 4e 46 49 52 4d 00                             CONFIRM.

000002d6 <__c.6>:
     2d6:	3c 4e 20 59 3e 00                                   <N Y>.

000002dc <__c.7>:
     2dc:	4d 45 4d 20 43 4c 45 41 52 45 44 00                 MEM CLEARED.

000002e8 <__c.4>:
     2e8:	56 32 2d 20 00                                      V2- .

000002ed <__c.2>:
     2ed:	20 20 20 20 53 45 43 00                                 SEC.

000002f5 <__c.3>:
     2f5:	4f 46 46 00                                         OFF.

000002f9 <__c.1>:
     2f9:	4e 4f 20 53 54 4f 52 45 44 20 50 52 47 4d 00        NO STORED PRGM.

00000308 <__c.0>:
     308:	2a 4a 54 41 47 20 4f 4e 2a 00                       *JTAG ON*.

00000312 <LCD_SegTable>:
     312:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
     322:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
     332:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
     342:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
     352:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
     362:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
     372:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

0000037e <USIPSValues>:
     37e:	03 80 02 54 01 40 00 22                             ...T.@."

00000386 <DataFlashError>:
     386:	44 41 54 41 46 4c 41 53 48 20 45 52 52 4f 52 00     DATAFLASH ERROR.

00000396 <DF_Pages>:
     396:	00 01 00 02 00 04 00 08 00 10 00 10 00 20 00 20     ............. . 

000003a6 <DF_PageSize>:
     3a6:	08 01 08 01 08 01 08 01 08 01 10 02 10 02 20 04     .............. .

000003b6 <DF_PageBits>:
     3b6:	09 09 09 09 09 0a 0a 0b                             ........

000003be <__c.0>:
     3be:	42 55 46 46 20 4f 56 45 52 46 4c 4f 57 00           BUFF OVERFLOW.

000003cc <AutoSleepTOValues>:
     3cc:	00 0f 1e 3c 78                                      ...<x

000003d1 <DataFlashProgMode>:
     3d1:	2a 44 41 54 41 46 4c 41 53 48 20 4d 4f 44 45 2a     *DATAFLASH MODE*
	...

000003e2 <SignonResponse>:
     3e2:	01 00 08 41 56 52 49 53 50 5f 32                    ...AVRISP_2

000003ed <SyncErrorMessage>:
     3ed:	53 59 4e 43 20 45 52 52 4f 52 00                    SYNC ERROR.

000003f8 <AVRISPModeMessage>:
     3f8:	2a 41 54 41 56 52 49 53 50 20 4d 4f 44 45 2a 00     *ATAVRISP MODE*.

00000408 <__c.0>:
     408:	44 41 54 41 2d 00                                   DATA-.

0000040e <__c.1>:
     40e:	45 50 52 4d 2d 00                                   EPRM-.

00000414 <__c.2>:
     414:	46 55 53 45 2d 00                                   FUSE-.

0000041a <__c.3>:
     41a:	4c 4f 43 4b 2d 00                                   LOCK-.

00000420 <__c.0>:
     420:	4e 4f 20 54 41 47 53 00                             NO TAGS.

00000428 <__init>:
     428:	11 24       	eor	r1, r1
     42a:	1f be       	out	0x3f, r1	; 63
     42c:	cf ef       	ldi	r28, 0xFF	; 255
     42e:	d4 e0       	ldi	r29, 0x04	; 4
     430:	de bf       	out	0x3e, r29	; 62
     432:	cd bf       	out	0x3d, r28	; 61

00000434 <__do_copy_data>:
     434:	11 e0       	ldi	r17, 0x01	; 1
     436:	a0 e0       	ldi	r26, 0x00	; 0
     438:	b1 e0       	ldi	r27, 0x01	; 1
     43a:	e2 e4       	ldi	r30, 0x42	; 66
     43c:	f5 e3       	ldi	r31, 0x35	; 53
     43e:	02 c0       	rjmp	.+4      	; 0x444 <.do_copy_data_start>

00000440 <.do_copy_data_loop>:
     440:	05 90       	lpm	r0, Z+
     442:	0d 92       	st	X+, r0

00000444 <.do_copy_data_start>:
     444:	a4 30       	cpi	r26, 0x04	; 4
     446:	b1 07       	cpc	r27, r17
     448:	d9 f7       	brne	.-10     	; 0x440 <.do_copy_data_loop>

0000044a <__do_clear_bss>:
     44a:	12 e0       	ldi	r17, 0x02	; 2
     44c:	a4 e0       	ldi	r26, 0x04	; 4
     44e:	b1 e0       	ldi	r27, 0x01	; 1
     450:	01 c0       	rjmp	.+2      	; 0x454 <.do_clear_bss_start>

00000452 <.do_clear_bss_loop>:
     452:	1d 92       	st	X+, r1

00000454 <.do_clear_bss_start>:
     454:	a8 3b       	cpi	r26, 0xB8	; 184
     456:	b1 07       	cpc	r27, r17
     458:	e1 f7       	brne	.-8      	; 0x452 <.do_clear_bss_loop>
     45a:	0c 94 75 02 	jmp	0x4ea <main>

0000045e <__bad_interrupt>:
     45e:	0c 94 b3 03 	jmp	0x766 <__vector_default>

00000462 <MAIN_Delay10MS>:

// ======================================================================================

void MAIN_Delay10MS(uint8_t loops)
{
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     466:	28 2f       	mov	r18, r24
     468:	21 50       	subi	r18, 0x01	; 1
     46a:	2f 3f       	cpi	r18, 0xFF	; 255
     46c:	49 f0       	breq	.+18     	; 0x480 <MAIN_Delay10MS+0x1e>
     46e:	a0 e0       	ldi	r26, 0x00	; 0
     470:	b8 e4       	ldi	r27, 0x48	; 72
     472:	c0 e0       	ldi	r28, 0x00	; 0
     474:	d0 e0       	ldi	r29, 0x00	; 0
     476:	cd 01       	movw	r24, r26
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <MAIN_Delay10MS+0x16>
     47c:	21 50       	subi	r18, 0x01	; 1
     47e:	d8 f7       	brcc	.-10     	; 0x476 <MAIN_Delay10MS+0x14>
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <MAIN_WaitForJoyRelease>:
  /* Prevents the use of floating point libraries. Delaying in groups of
     10ms increases accuracy by reducing the time overhead for each loop
     interation of the while.                                            */

	while (loops--)
	  _delay_ms(10);
}

void MAIN_Delay1MS(uint8_t loops)
{
  /* Prevents the use of floating point libraries. Less accurate than the
     Delay10MS routine, but nessesary for many commands. The overhead required
     to call the routine is substantially less than the overhead required to
     calculate the float at compile time, so this actually saves execution time. */

	while (loops--)
	  _delay_ms(1);
}

void MAIN_ResetCSLine(const uint8_t ActiveInactive)
{
	/* ActiveInactive controls the /Reset line to an AVR device or external dataflash
	/CS line. If the reset polarity parameter is a 0 then interfacing with AT89
	devices which has an active high reset. Pins are tristated when inactive.         */
	
	switch (ActiveInactive)
	{
		case MAIN_RESETCS_ACTIVE:      // The target RESET line may be either active high or low.
			DDRF |= (1 << 6);
		
			if (!(eeprom_read_byte(&EEPROMVars.ResetPolarity))) // Translate to correct logic level for target device type
			  PORTF |=  (1 << 6);
			else
			  PORTF &= ~(1 << 6);
		
			break;
		case MAIN_RESETCS_EXTDFACTIVE: // Dataflashes are always active low.
			DDRF  |=  (1 << 6);
			PORTF &= ~(1 << 6);
			
			break;
		case MAIN_RESETCS_INACTIVE:    // Both modes tristate the pins when inactive.
			DDRF  &= ~(1 << 6);
			PORTF &= ~(1 << 6);
	}
}

void MAIN_WaitForJoyRelease(void)
{
	while (1)
	{
		while (JoyStatus) {};                   // Wait until joystick released
     486:	8e b3       	in	r24, 0x1e	; 30
     488:	88 23       	and	r24, r24
     48a:	e9 f7       	brne	.-6      	; 0x486 <MAIN_WaitForJoyRelease>

		MAIN_Delay10MS(1);
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>

		if (!(JoyStatus))                       // Joystick still released (not bouncing), return
     492:	8e b3       	in	r24, 0x1e	; 30
     494:	88 23       	and	r24, r24
     496:	b9 f7       	brne	.-18     	; 0x486 <MAIN_WaitForJoyRelease>
     498:	08 95       	ret

0000049a <FUNCShowAbout>:
		  return;
	}
}

void MAIN_IntToStr(uint16_t IntV, uint8_t* Buff)
{
	// Shows leading zeros, unlike itoa.

	uint8_t Temp = 0;
	
	while (IntV >= 100)
	{
		Temp++;
		IntV -= 100;
	}

	*(Buff++) = '0' + Temp;
	
	Temp = 0;
	
	while (IntV >= 10)
	{
		Temp++;
		IntV -= 10;
	}
		
	*(Buff++) = '0' + Temp;
	*(Buff++) = '0' + IntV;
	*(Buff)   = '\0';
}

void MAIN_ShowProgType(const uint8_t Letter)
{
	uint8_t ProgTypeBuffer[7];

	strcpy_P(ProgTypeBuffer, PSTR("PRG>  "));
	ProgTypeBuffer[5] = Letter;
	
	LCD_puts(ProgTypeBuffer);
}

void MAIN_ShowError(const uint8_t *pFlashStr)
{
	uint8_t ErrorBuff[LCD_TEXTBUFFER_SIZE];   // New buffer, LCD text buffer size
	
	ErrorBuff[0] = 'E';
	ErrorBuff[1] = '>';

	strcpy_P(&ErrorBuff[2], pFlashStr);       // WARNING: If error text is larger than (TEXTBUFFER_SIZE - 2),
	                                          // this will overflow the buffer and probably crash the micro!
	LCD_puts(ErrorBuff);
	
	MAIN_WaitForJoyRelease();
	while (!(JoyStatus & JOY_PRESS)) {};
	MAIN_WaitForJoyRelease();
}

// ======================================================================================

ISR(PCINT1_vect, ISR_NOBLOCK)                 // Joystick routine; PCINT0_vect is bound to this also via JoystickInterrupt.S
{
	JoyStatus = (~PINB & JOY_BMASK)
	          | (~PINE & JOY_EMASK);
			  
	TIMEOUT_SLEEP_TIMEOUT_RESET();
}

ISR(BADISR_vect, ISR_NAKED)                   // Bad ISR routine; should never be called, here for safety
{
	MAIN_ShowError(PSTR("BADISR"));
	while (1) {};
}

// ======================================================================================

void FUNCChangeSettings(void)
{
	uint8_t CurrSFunc = 0;
	
	JoyStatus = 1;

	while (1)
	{
		if (JoyStatus)                         // Joystick is in the non-center position
		{
			if (JoyStatus & JOY_UP)            // Previous function
			  (CurrSFunc == 0)? CurrSFunc = 5 : CurrSFunc--;
			else if (JoyStatus & JOY_DOWN)     // Next function
			  (CurrSFunc == 5)? CurrSFunc = 0 : CurrSFunc++;
			else if (JoyStatus & JOY_PRESS)    // Select current function
			  ((FuncPtr)pgm_read_word(&SettingFunctionPtrs[CurrSFunc]))(); // Run associated function
			else if (JoyStatus & JOY_LEFT)
			  return;
		
			// Show current function onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&SettingFunctionNames[CurrSFunc]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCShowAbout(void)
{
     49a:	cf 93       	push	r28
	uint8_t InfoNum = 0;
     49c:	c0 e0       	ldi	r28, 0x00	; 0
	
	JoyStatus = 1;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	8e bb       	out	0x1e, r24	; 30
			
	while (1)
	{
		if (JoyStatus)
     4a2:	8e b3       	in	r24, 0x1e	; 30
     4a4:	88 23       	and	r24, r24
     4a6:	e9 f3       	breq	.-6      	; 0x4a2 <FUNCShowAbout+0x8>
		{
			if (JoyStatus & JOY_UP)
     4a8:	f6 9b       	sbis	0x1e, 6	; 30
     4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <FUNCShowAbout+0x1e>
			  (InfoNum == 0)? InfoNum = 3 : InfoNum--;
     4ac:	cc 23       	and	r28, r28
     4ae:	11 f4       	brne	.+4      	; 0x4b4 <FUNCShowAbout+0x1a>
     4b0:	c3 e0       	ldi	r28, 0x03	; 3
     4b2:	0c c0       	rjmp	.+24     	; 0x4cc <FUNCShowAbout+0x32>
     4b4:	c1 50       	subi	r28, 0x01	; 1
     4b6:	0a c0       	rjmp	.+20     	; 0x4cc <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_DOWN)
     4b8:	f7 9b       	sbis	0x1e, 7	; 30
     4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <FUNCShowAbout+0x2e>
			  (InfoNum == 3)? InfoNum = 0 : InfoNum++;
     4bc:	c3 30       	cpi	r28, 0x03	; 3
     4be:	11 f4       	brne	.+4      	; 0x4c4 <FUNCShowAbout+0x2a>
     4c0:	c0 e0       	ldi	r28, 0x00	; 0
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <FUNCShowAbout+0x32>
     4c4:	cf 5f       	subi	r28, 0xFF	; 255
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_LEFT)
     4c8:	f2 99       	sbic	0x1e, 2	; 30
     4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <FUNCShowAbout+0x4c>
			  return;

			LCD_puts_f((uint8_t*)pgm_read_word(&AboutTextPtrs[InfoNum]));
     4cc:	ec 2f       	mov	r30, r28
     4ce:	ff 27       	eor	r31, r31
     4d0:	ee 0f       	add	r30, r30
     4d2:	ff 1f       	adc	r31, r31
     4d4:	e4 50       	subi	r30, 0x04	; 4
     4d6:	fe 4f       	sbci	r31, 0xFE	; 254
     4d8:	85 91       	lpm	r24, Z+
     4da:	94 91       	lpm	r25, Z
     4dc:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     4e0:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     4e4:	de cf       	rjmp	.-68     	; 0x4a2 <FUNCShowAbout+0x8>
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <main>:
     4ea:	cf ef       	ldi	r28, 0xFF	; 255
     4ec:	d4 e0       	ldi	r29, 0x04	; 4
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	c0 e0       	ldi	r28, 0x00	; 0
     4f4:	80 e8       	ldi	r24, 0x80	; 128
     4f6:	80 bf       	out	0x30, r24	; 48
     4f8:	85 e0       	ldi	r24, 0x05	; 5
     4fa:	80 93 64 00 	sts	0x0064, r24
     4fe:	80 e3       	ldi	r24, 0x30	; 48
     500:	80 bb       	out	0x10, r24	; 16
     502:	87 e2       	ldi	r24, 0x27	; 39
     504:	84 b9       	out	0x04, r24	; 4
     506:	8f ed       	ldi	r24, 0xDF	; 223
     508:	85 b9       	out	0x05, r24	; 5
     50a:	8c e0       	ldi	r24, 0x0C	; 12
     50c:	8e b9       	out	0x0e, r24	; 14
     50e:	80 93 6b 00 	sts	0x006B, r24
     512:	80 ed       	ldi	r24, 0xD0	; 208
     514:	80 93 6c 00 	sts	0x006C, r24
     518:	80 ec       	ldi	r24, 0xC0	; 192
     51a:	8d bb       	out	0x1d, r24	; 29
     51c:	8c bb       	out	0x1c, r24	; 28
     51e:	81 b3       	in	r24, 0x11	; 17
     520:	8f 7c       	andi	r24, 0xCF	; 207
     522:	80 62       	ori	r24, 0x20	; 32
     524:	81 bb       	out	0x11, r24	; 17
     526:	0e 94 0c 08 	call	0x1018 <LCD_Init>
     52a:	8f e0       	ldi	r24, 0x0F	; 15
     52c:	80 93 e7 00 	sts	0x00E7, r24
     530:	80 e3       	ldi	r24, 0x30	; 48
     532:	92 e0       	ldi	r25, 0x02	; 2
     534:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     538:	78 94       	sei
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     53a:	28 e8       	ldi	r18, 0x88	; 136
     53c:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t result;
  asm volatile
     53e:	d9 01       	movw	r26, r18
     540:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
     544:	80 2d       	mov	r24, r0
     546:	8a 37       	cpi	r24, 0x7A	; 122
     548:	89 f0       	breq	.+34     	; 0x56c <__stack+0x6d>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	4f ef       	ldi	r20, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     550:	dc 01       	movw	r26, r24
     552:	04 2e       	mov	r0, r20
     554:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	52 e0       	ldi	r21, 0x02	; 2
     55c:	80 30       	cpi	r24, 0x00	; 0
     55e:	95 07       	cpc	r25, r21
     560:	b8 f3       	brcs	.-18     	; 0x550 <__stack+0x51>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
     562:	8a e7       	ldi	r24, 0x7A	; 122
  asm volatile (
     564:	d9 01       	movw	r26, r18
     566:	08 2e       	mov	r0, r24
     568:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
     56c:	a5 e8       	ldi	r26, 0x85	; 133
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
     574:	80 2d       	mov	r24, r0
     576:	8f 70       	andi	r24, 0x0F	; 15
     578:	80 93 e7 00 	sts	0x00E7, r24
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
     582:	81 b3       	in	r24, 0x11	; 17
     584:	80 63       	ori	r24, 0x30	; 48
     586:	81 bb       	out	0x11, r24	; 17
     588:	0e 94 09 09 	call	0x1212 <USART_Init>
     58c:	0e 94 86 07 	call	0xf0c <OSCCAL_Calibrate>
     590:	0e 94 e9 0b 	call	0x17d2 <TOUT_SetupSleepTimer>
     594:	81 b3       	in	r24, 0x11	; 17
     596:	8f 7c       	andi	r24, 0xCF	; 207
     598:	80 61       	ori	r24, 0x10	; 16
     59a:	81 bb       	out	0x11, r24	; 17
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	8e bb       	out	0x1e, r24	; 30
     5a0:	80 e8       	ldi	r24, 0x80	; 128
     5a2:	80 93 61 00 	sts	0x0061, r24
     5a6:	83 e0       	ldi	r24, 0x03	; 3
     5a8:	80 93 61 00 	sts	0x0061, r24
     5ac:	8e b3       	in	r24, 0x1e	; 30
     5ae:	88 23       	and	r24, r24
     5b0:	e9 f3       	breq	.-6      	; 0x5ac <__stack+0xad>
     5b2:	f6 9b       	sbis	0x1e, 6	; 30
     5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <__stack+0xc3>
     5b6:	cc 23       	and	r28, r28
     5b8:	11 f4       	brne	.+4      	; 0x5be <__stack+0xbf>
     5ba:	c6 e0       	ldi	r28, 0x06	; 6
     5bc:	1b c0       	rjmp	.+54     	; 0x5f4 <__stack+0xf5>
     5be:	c1 50       	subi	r28, 0x01	; 1
     5c0:	19 c0       	rjmp	.+50     	; 0x5f4 <__stack+0xf5>
     5c2:	f7 9b       	sbis	0x1e, 7	; 30
     5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <__stack+0xd3>
     5c6:	c6 30       	cpi	r28, 0x06	; 6
     5c8:	11 f4       	brne	.+4      	; 0x5ce <__stack+0xcf>
     5ca:	c0 e0       	ldi	r28, 0x00	; 0
     5cc:	13 c0       	rjmp	.+38     	; 0x5f4 <__stack+0xf5>
     5ce:	cf 5f       	subi	r28, 0xFF	; 255
     5d0:	11 c0       	rjmp	.+34     	; 0x5f4 <__stack+0xf5>
     5d2:	f4 9b       	sbis	0x1e, 4	; 30
     5d4:	0b c0       	rjmp	.+22     	; 0x5ec <__stack+0xed>
     5d6:	ec 2f       	mov	r30, r28
     5d8:	ff 27       	eor	r31, r31
     5da:	ee 0f       	add	r30, r30
     5dc:	ff 1f       	adc	r31, r31
     5de:	e5 57       	subi	r30, 0x75	; 117
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	85 91       	lpm	r24, Z+
     5e4:	94 91       	lpm	r25, Z
     5e6:	fc 01       	movw	r30, r24
     5e8:	09 95       	icall
     5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <__stack+0xf5>
     5ec:	f3 9b       	sbis	0x1e, 3	; 30
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <__stack+0xf5>
     5f0:	0e 94 4d 02 	call	0x49a <FUNCShowAbout>
     5f4:	ec 2f       	mov	r30, r28
     5f6:	ff 27       	eor	r31, r31
     5f8:	ee 0f       	add	r30, r30
     5fa:	ff 1f       	adc	r31, r31
     5fc:	e7 56       	subi	r30, 0x67	; 103
     5fe:	fe 4f       	sbci	r31, 0xFE	; 254
     600:	85 91       	lpm	r24, Z+
     602:	94 91       	lpm	r25, Z
     604:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     608:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     60c:	cf cf       	rjmp	.-98     	; 0x5ac <__stack+0xad>

0000060e <MAIN_Delay1MS>:
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     612:	28 2f       	mov	r18, r24
     614:	21 50       	subi	r18, 0x01	; 1
     616:	2f 3f       	cpi	r18, 0xFF	; 255
     618:	49 f0       	breq	.+18     	; 0x62c <MAIN_Delay1MS+0x1e>
     61a:	a3 e3       	ldi	r26, 0x33	; 51
     61c:	b7 e0       	ldi	r27, 0x07	; 7
     61e:	c0 e0       	ldi	r28, 0x00	; 0
     620:	d0 e0       	ldi	r29, 0x00	; 0
     622:	cd 01       	movw	r24, r26
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <MAIN_Delay1MS+0x16>
     628:	21 50       	subi	r18, 0x01	; 1
     62a:	d8 f7       	brcc	.-10     	; 0x622 <MAIN_Delay1MS+0x14>
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <MAIN_ResetCSLine>:
     632:	99 27       	eor	r25, r25
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	91 05       	cpc	r25, r1
     638:	b1 f0       	breq	.+44     	; 0x666 <MAIN_ResetCSLine+0x34>
     63a:	82 30       	cpi	r24, 0x02	; 2
     63c:	91 05       	cpc	r25, r1
     63e:	1c f4       	brge	.+6      	; 0x646 <MAIN_ResetCSLine+0x14>
     640:	89 2b       	or	r24, r25
     642:	21 f0       	breq	.+8      	; 0x64c <MAIN_ResetCSLine+0x1a>
     644:	08 95       	ret
     646:	02 97       	sbiw	r24, 0x02	; 2
     648:	59 f0       	breq	.+22     	; 0x660 <MAIN_ResetCSLine+0x2e>
     64a:	08 95       	ret
     64c:	86 9a       	sbi	0x10, 6	; 16
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     64e:	a0 e0       	ldi	r26, 0x00	; 0
     650:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     652:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
     656:	80 2d       	mov	r24, r0
     658:	88 23       	and	r24, r24
     65a:	19 f4       	brne	.+6      	; 0x662 <MAIN_ResetCSLine+0x30>
     65c:	8e 9a       	sbi	0x11, 6	; 17
     65e:	08 95       	ret
     660:	86 9a       	sbi	0x10, 6	; 16
     662:	8e 98       	cbi	0x11, 6	; 17
     664:	08 95       	ret
     666:	86 98       	cbi	0x10, 6	; 16
     668:	fc cf       	rjmp	.-8      	; 0x662 <MAIN_ResetCSLine+0x30>

0000066a <MAIN_IntToStr>:
     66a:	fb 01       	movw	r30, r22
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	84 36       	cpi	r24, 0x64	; 100
     670:	91 05       	cpc	r25, r1
     672:	20 f0       	brcs	.+8      	; 0x67c <MAIN_IntToStr+0x12>
     674:	2f 5f       	subi	r18, 0xFF	; 255
     676:	84 56       	subi	r24, 0x64	; 100
     678:	90 40       	sbci	r25, 0x00	; 0
     67a:	f9 cf       	rjmp	.-14     	; 0x66e <MAIN_IntToStr+0x4>
     67c:	20 5d       	subi	r18, 0xD0	; 208
     67e:	21 93       	st	Z+, r18
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	8a 30       	cpi	r24, 0x0A	; 10
     684:	91 05       	cpc	r25, r1
     686:	18 f0       	brcs	.+6      	; 0x68e <MAIN_IntToStr+0x24>
     688:	2f 5f       	subi	r18, 0xFF	; 255
     68a:	0a 97       	sbiw	r24, 0x0a	; 10
     68c:	fa cf       	rjmp	.-12     	; 0x682 <MAIN_IntToStr+0x18>
     68e:	20 5d       	subi	r18, 0xD0	; 208
     690:	21 93       	st	Z+, r18
     692:	80 5d       	subi	r24, 0xD0	; 208
     694:	81 93       	st	Z+, r24
     696:	10 82       	st	Z, r1
     698:	08 95       	ret

0000069a <MAIN_ShowProgType>:
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	27 97       	sbiw	r28, 0x07	; 7
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	cd bf       	out	0x3d, r28	; 61
     6b0:	18 2f       	mov	r17, r24
     6b2:	6e e5       	ldi	r22, 0x5E	; 94
     6b4:	72 e0       	ldi	r23, 0x02	; 2
     6b6:	ce 01       	movw	r24, r28
     6b8:	01 96       	adiw	r24, 0x01	; 1
     6ba:	0e 94 1b 1a 	call	0x3436 <strcpy_P>
     6be:	1e 83       	std	Y+6, r17	; 0x06
     6c0:	ce 01       	movw	r24, r28
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	0e 94 19 08 	call	0x1032 <LCD_puts>
     6c8:	27 96       	adiw	r28, 0x07	; 7
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	f8 94       	cli
     6ce:	de bf       	out	0x3e, r29	; 62
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	08 95       	ret

000006dc <MAIN_ShowError>:
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	64 97       	sbiw	r28, 0x14	; 20
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	25 e4       	ldi	r18, 0x45	; 69
     6f2:	29 83       	std	Y+1, r18	; 0x01
     6f4:	2e e3       	ldi	r18, 0x3E	; 62
     6f6:	2a 83       	std	Y+2, r18	; 0x02
     6f8:	bc 01       	movw	r22, r24
     6fa:	ce 01       	movw	r24, r28
     6fc:	03 96       	adiw	r24, 0x03	; 3
     6fe:	0e 94 1b 1a 	call	0x3436 <strcpy_P>
     702:	ce 01       	movw	r24, r28
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	0e 94 19 08 	call	0x1032 <LCD_puts>
     70a:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     70e:	f4 9b       	sbis	0x1e, 4	; 30
     710:	fe cf       	rjmp	.-4      	; 0x70e <MAIN_ShowError+0x32>
     712:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     716:	64 96       	adiw	r28, 0x14	; 20
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <__vector_3>:
     728:	78 94       	sei
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	8f 93       	push	r24
     736:	9f 93       	push	r25
     738:	93 b1       	in	r25, 0x03	; 3
     73a:	90 95       	com	r25
     73c:	90 7d       	andi	r25, 0xD0	; 208
     73e:	8c b1       	in	r24, 0x0c	; 12
     740:	80 95       	com	r24
     742:	8c 70       	andi	r24, 0x0C	; 12
     744:	98 2b       	or	r25, r24
     746:	9e bb       	out	0x1e, r25	; 30
     748:	10 92 3e 01 	sts	0x013E, r1
     74c:	10 92 3d 01 	sts	0x013D, r1
     750:	10 92 85 00 	sts	0x0085, r1
     754:	10 92 84 00 	sts	0x0084, r1
     758:	9f 91       	pop	r25
     75a:	8f 91       	pop	r24
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <__vector_default>:
     766:	85 e6       	ldi	r24, 0x65	; 101
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
     76e:	ff cf       	rjmp	.-2      	; 0x76e <__vector_default+0x8>

00000770 <FUNCChangeSettings>:
     770:	cf 93       	push	r28
     772:	c0 e0       	ldi	r28, 0x00	; 0
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	8e bb       	out	0x1e, r24	; 30
     778:	8e b3       	in	r24, 0x1e	; 30
     77a:	88 23       	and	r24, r24
     77c:	e9 f3       	breq	.-6      	; 0x778 <FUNCChangeSettings+0x8>
     77e:	f6 9b       	sbis	0x1e, 6	; 30
     780:	06 c0       	rjmp	.+12     	; 0x78e <FUNCChangeSettings+0x1e>
     782:	cc 23       	and	r28, r28
     784:	11 f4       	brne	.+4      	; 0x78a <FUNCChangeSettings+0x1a>
     786:	c5 e0       	ldi	r28, 0x05	; 5
     788:	19 c0       	rjmp	.+50     	; 0x7bc <FUNCChangeSettings+0x4c>
     78a:	c1 50       	subi	r28, 0x01	; 1
     78c:	17 c0       	rjmp	.+46     	; 0x7bc <FUNCChangeSettings+0x4c>
     78e:	f7 9b       	sbis	0x1e, 7	; 30
     790:	06 c0       	rjmp	.+12     	; 0x79e <FUNCChangeSettings+0x2e>
     792:	c5 30       	cpi	r28, 0x05	; 5
     794:	11 f4       	brne	.+4      	; 0x79a <FUNCChangeSettings+0x2a>
     796:	c0 e0       	ldi	r28, 0x00	; 0
     798:	11 c0       	rjmp	.+34     	; 0x7bc <FUNCChangeSettings+0x4c>
     79a:	cf 5f       	subi	r28, 0xFF	; 255
     79c:	0f c0       	rjmp	.+30     	; 0x7bc <FUNCChangeSettings+0x4c>
     79e:	f4 9b       	sbis	0x1e, 4	; 30
     7a0:	0b c0       	rjmp	.+22     	; 0x7b8 <FUNCChangeSettings+0x48>
     7a2:	ec 2f       	mov	r30, r28
     7a4:	ff 27       	eor	r31, r31
     7a6:	ee 0f       	add	r30, r30
     7a8:	ff 1f       	adc	r31, r31
     7aa:	eb 5e       	subi	r30, 0xEB	; 235
     7ac:	fe 4f       	sbci	r31, 0xFE	; 254
     7ae:	85 91       	lpm	r24, Z+
     7b0:	94 91       	lpm	r25, Z
     7b2:	fc 01       	movw	r30, r24
     7b4:	09 95       	icall
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <FUNCChangeSettings+0x4c>
     7b8:	f2 99       	sbic	0x1e, 2	; 30
     7ba:	0d c0       	rjmp	.+26     	; 0x7d6 <FUNCChangeSettings+0x66>
     7bc:	ec 2f       	mov	r30, r28
     7be:	ff 27       	eor	r31, r31
     7c0:	ee 0f       	add	r30, r30
     7c2:	ff 1f       	adc	r31, r31
     7c4:	ef 5d       	subi	r30, 0xDF	; 223
     7c6:	fe 4f       	sbci	r31, 0xFE	; 254
     7c8:	85 91       	lpm	r24, Z+
     7ca:	94 91       	lpm	r25, Z
     7cc:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     7d0:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     7d4:	d1 cf       	rjmp	.-94     	; 0x778 <FUNCChangeSettings+0x8>
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <FUNCAVRISPMode>:
		}
	}
}

void FUNCAVRISPMode(void)
{
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     7da:	80 e3       	ldi	r24, 0x30	; 48
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     7e2:	0e 94 86 07 	call	0xf0c <OSCCAL_Calibrate>
     7e6:	80 91 c1 00 	lds	r24, 0x00C1
     7ea:	80 78       	andi	r24, 0x80	; 128
     7ec:	88 61       	ori	r24, 0x18	; 24
     7ee:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(AVRISPModeMessage);
     7f2:	88 ef       	ldi	r24, 0xF8	; 248
     7f4:	93 e0       	ldi	r25, 0x03	; 3
     7f6:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
	
	InterpretPacketRoutine = (FuncPtr)AICI_InterpretPacket;
     7fa:	83 e7       	ldi	r24, 0x73	; 115
     7fc:	92 e1       	ldi	r25, 0x12	; 18
     7fe:	90 93 03 01 	sts	0x0103, r25
     802:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     806:	0e 94 78 0f 	call	0x1ef0 <V2P_RunStateMachine>
     80a:	08 95       	ret

0000080c <FUNCProgramDataflash>:
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     80c:	a1 e0       	ldi	r26, 0x01	; 1
     80e:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     810:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
     814:	80 2d       	mov	r24, r0
     816:	0e 94 83 09 	call	0x1306 <USI_SPIInitMaster>
}

void FUNCProgramDataflash(void)
{
	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	UseExernalDF = TRUE;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	80 93 65 02 	sts	0x0265, r24
	DFSPIRoutinePointer = USI_SPITransmit;
     820:	8d e9       	ldi	r24, 0x9D	; 157
     822:	99 e0       	ldi	r25, 0x09	; 9
     824:	90 93 01 01 	sts	0x0101, r25
     828:	80 93 00 01 	sts	0x0100, r24
	
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     82c:	80 e3       	ldi	r24, 0x30	; 48
     82e:	92 e0       	ldi	r25, 0x02	; 2
     830:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     834:	0e 94 86 07 	call	0xf0c <OSCCAL_Calibrate>
     838:	80 91 c1 00 	lds	r24, 0x00C1
     83c:	80 78       	andi	r24, 0x80	; 128
     83e:	88 61       	ori	r24, 0x18	; 24
     840:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(DataFlashProgMode);
     844:	81 ed       	ldi	r24, 0xD1	; 209
     846:	93 e0       	ldi	r25, 0x03	; 3
     848:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PD_InterpretAVRISPPacket;
     84c:	89 ea       	ldi	r24, 0xA9	; 169
     84e:	9c e0       	ldi	r25, 0x0C	; 12
     850:	90 93 03 01 	sts	0x0103, r25
     854:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     858:	0e 94 78 0f 	call	0x1ef0 <V2P_RunStateMachine>
	   
	DF_EnableDataflash(FALSE);
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
	SPI_SPIOFF();
     862:	80 91 64 00 	lds	r24, 0x0064
     866:	84 60       	ori	r24, 0x04	; 4
     868:	80 93 64 00 	sts	0x0064, r24
     86c:	08 95       	ret

0000086e <FUNCProgramAVR>:
}

void FUNCProgramAVR(void)
{
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	63 97       	sbiw	r28, 0x13	; 19
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
	uint8_t  DoneFailMessageBuff[19];
	uint8_t  Fault = ISPCC_NO_FAULT;
     886:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t  ProgMode = 0;
     888:	10 2f       	mov	r17, r16

	SPI_SPIInit();
     88a:	0e 94 2e 09 	call	0x125c <SPI_SPIInit>
	UseExernalDF = FALSE;
     88e:	00 93 65 02 	sts	0x0265, r16
	DFSPIRoutinePointer = SPI_SPITransmit;
     892:	88 e3       	ldi	r24, 0x38	; 56
     894:	99 e0       	ldi	r25, 0x09	; 9
     896:	90 93 01 01 	sts	0x0101, r25
     89a:	80 93 00 01 	sts	0x0100, r24
	
	if (!(DF_CheckCorrectOnboardChip()))
     89e:	0e 94 3c 0b 	call	0x1678 <DF_CheckCorrectOnboardChip>
     8a2:	88 23       	and	r24, r24
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <FUNCProgramAVR+0x3a>
     8a6:	0d c1       	rjmp	.+538    	; 0xac2 <FUNCProgramAVR+0x254>
	  return;

	MAIN_WaitForJoyRelease();
     8a8:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
	
	JoyStatus = 1;                              // Use an invalid joystick value to force the program to write the
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	8e bb       	out	0x1e, r24	; 30
	                                            // name of the default command onto the LCD
	while (1)
	{
		if (JoyStatus)
     8b0:	8e b3       	in	r24, 0x1e	; 30
     8b2:	88 23       	and	r24, r24
     8b4:	e9 f3       	breq	.-6      	; 0x8b0 <FUNCProgramAVR+0x42>
		{
			if (JoyStatus & JOY_LEFT)
     8b6:	f2 99       	sbic	0x1e, 2	; 30
     8b8:	04 c1       	rjmp	.+520    	; 0xac2 <FUNCProgramAVR+0x254>
			  return;
			else if (JoyStatus & JOY_PRESS)
     8ba:	f4 99       	sbic	0x1e, 4	; 30
     8bc:	1c c0       	rjmp	.+56     	; 0x8f6 <FUNCProgramAVR+0x88>
			  break;
			else if (JoyStatus & JOY_UP)
     8be:	f6 9b       	sbis	0x1e, 6	; 30
     8c0:	06 c0       	rjmp	.+12     	; 0x8ce <FUNCProgramAVR+0x60>
			  (ProgMode == 0)? ProgMode = 6 : ProgMode--;
     8c2:	11 23       	and	r17, r17
     8c4:	11 f4       	brne	.+4      	; 0x8ca <FUNCProgramAVR+0x5c>
     8c6:	16 e0       	ldi	r17, 0x06	; 6
     8c8:	09 c0       	rjmp	.+18     	; 0x8dc <FUNCProgramAVR+0x6e>
     8ca:	11 50       	subi	r17, 0x01	; 1
     8cc:	07 c0       	rjmp	.+14     	; 0x8dc <FUNCProgramAVR+0x6e>
			else if (JoyStatus & JOY_DOWN)
     8ce:	f7 9b       	sbis	0x1e, 7	; 30
     8d0:	05 c0       	rjmp	.+10     	; 0x8dc <FUNCProgramAVR+0x6e>
			  (ProgMode == 6)? ProgMode = 0 : ProgMode++;
     8d2:	16 30       	cpi	r17, 0x06	; 6
     8d4:	11 f4       	brne	.+4      	; 0x8da <FUNCProgramAVR+0x6c>
     8d6:	10 e0       	ldi	r17, 0x00	; 0
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <FUNCProgramAVR+0x6e>
     8da:	1f 5f       	subi	r17, 0xFF	; 255

			LCD_puts_f((uint8_t*)pgm_read_word(&ProgOptions[ProgMode])); // Show current function onto the LCD
     8dc:	e1 2f       	mov	r30, r17
     8de:	ff 27       	eor	r31, r31
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	ee 55       	subi	r30, 0x5E	; 94
     8e6:	ff 4f       	sbci	r31, 0xFF	; 255
     8e8:	85 91       	lpm	r24, Z+
     8ea:	94 91       	lpm	r25, Z
     8ec:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     8f0:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     8f4:	dd cf       	rjmp	.-70     	; 0x8b0 <FUNCProgramAVR+0x42>
		}
	}

	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);                // Orange = busy
     8f6:	81 b3       	in	r24, 0x11	; 17
     8f8:	80 63       	ori	r24, 0x30	; 48
     8fa:	81 bb       	out	0x11, r24	; 17
	LCD_puts_f(WaitText);
     8fc:	80 e3       	ldi	r24, 0x30	; 48
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     904:	a1 e0       	ldi	r26, 0x01	; 1
     906:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     908:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
     90c:	80 2d       	mov	r24, r0
     90e:	0e 94 83 09 	call	0x1306 <USI_SPIInitMaster>

	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
     918:	eb e4       	ldi	r30, 0x4B	; 75
     91a:	f1 e0       	ldi	r31, 0x01	; 1
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	9b e0       	ldi	r25, 0x0B	; 11
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     922:	d9 01       	movw	r26, r18
     924:	ad 5d       	subi	r26, 0xDD	; 221
     926:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
     928:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
     92c:	80 2d       	mov	r24, r0
     92e:	81 93       	st	Z+, r24
			
	for (uint8_t PacketB = 0; PacketB <= 11; PacketB++) // Read the enter programming mode command bytes
     930:	91 50       	subi	r25, 0x01	; 1
     932:	2f 5f       	subi	r18, 0xFF	; 255
     934:	3f 4f       	sbci	r19, 0xFF	; 255
     936:	97 ff       	sbrs	r25, 7
     938:	f4 cf       	rjmp	.-24     	; 0x922 <FUNCProgramAVR+0xb4>
	  PacketBytes[PacketB] = eeprom_read_byte(&EEPROMVars.EnterProgMode[PacketB]);
	
	ISPCC_EnterChipProgrammingMode();    // Try to sync with the slave AVR
     93a:	0e 94 e3 10 	call	0x21c6 <ISPCC_EnterChipProgrammingMode>

	CurrAddress = 0;
     93e:	10 92 42 01 	sts	0x0142, r1
     942:	10 92 43 01 	sts	0x0143, r1
     946:	10 92 44 01 	sts	0x0144, r1
     94a:	10 92 45 01 	sts	0x0145, r1

	if (PacketBytes[1] == STATUS_CMD_OK) // ISPCC_EnterChipProgrammingMode alters the PacketBytes buffer rather than returning a value
     94e:	80 91 4c 01 	lds	r24, 0x014C
     952:	88 23       	and	r24, r24
     954:	09 f0       	breq	.+2      	; 0x958 <FUNCProgramAVR+0xea>
     956:	a0 c0       	rjmp	.+320    	; 0xa98 <FUNCProgramAVR+0x22a>
	{						
		if ((ProgMode == 6) || (ProgMode == 0) || (ProgMode == 2)) // Erase chip, or program flash mode
     958:	16 30       	cpi	r17, 0x06	; 6
     95a:	21 f0       	breq	.+8      	; 0x964 <FUNCProgramAVR+0xf6>
     95c:	11 23       	and	r17, r17
     95e:	11 f0       	breq	.+4      	; 0x964 <FUNCProgramAVR+0xf6>
     960:	12 30       	cpi	r17, 0x02	; 2
     962:	91 f4       	brne	.+36     	; 0x988 <FUNCProgramAVR+0x11a>
		{
			MAIN_ShowProgType('C');
     964:	83 e4       	ldi	r24, 0x43	; 67
     966:	0e 94 4d 03 	call	0x69a <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     96a:	a4 e1       	ldi	r26, 0x14	; 20
     96c:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     96e:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
     972:	80 2d       	mov	r24, r0
     974:	81 30       	cpi	r24, 0x01	; 1
     976:	31 f0       	breq	.+12     	; 0x984 <FUNCProgramAVR+0x116>
			
			if (!(eeprom_read_byte(&EEPROMVars.EraseCmdStored) == TRUE))
			{
				Fault = ISPCC_FAULT_NOERASE;
     978:	02 e0       	ldi	r16, 0x02	; 2
				MAIN_ShowError(PSTR("NO ERASE CMD"));
     97a:	8c e6       	ldi	r24, 0x6C	; 108
     97c:	92 e0       	ldi	r25, 0x02	; 2
     97e:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
     982:	02 c0       	rjmp	.+4      	; 0x988 <FUNCProgramAVR+0x11a>
			}
			else
			{
				PM_SendEraseCommand();
     984:	0e 94 77 17 	call	0x2eee <PM_SendEraseCommand>
			}
		}

		if (((ProgMode == 0) || (ProgMode == 2)) && (Fault == ISPCC_NO_FAULT)) // Program flash
     988:	11 23       	and	r17, r17
     98a:	11 f0       	breq	.+4      	; 0x990 <FUNCProgramAVR+0x122>
     98c:	12 30       	cpi	r17, 0x02	; 2
     98e:	b9 f4       	brne	.+46     	; 0x9be <FUNCProgramAVR+0x150>
     990:	00 23       	and	r16, r16
     992:	a9 f4       	brne	.+42     	; 0x9be <FUNCProgramAVR+0x150>
		{
			MAIN_ShowProgType('D');
     994:	84 e4       	ldi	r24, 0x44	; 68
     996:	0e 94 4d 03 	call	0x69a <MAIN_ShowProgType>

			if (!(PM_GetStoredDataSize(TYPE_FLASH))) // Check to make sure a program is present in memory
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	0e 94 e3 13 	call	0x27c6 <PM_GetStoredDataSize>
     9a0:	dc 01       	movw	r26, r24
     9a2:	cb 01       	movw	r24, r22
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	a1 05       	cpc	r26, r1
     9a8:	b1 05       	cpc	r27, r1
     9aa:	31 f4       	brne	.+12     	; 0x9b8 <FUNCProgramAVR+0x14a>
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     9ac:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO DATA"));
     9ae:	89 e7       	ldi	r24, 0x79	; 121
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <FUNCProgramAVR+0x150>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_FLASH);
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	0e 94 a6 17 	call	0x2f4c <PM_CreateProgrammingPackets>
			}
		}
	
		if ((ProgMode == 1) || (ProgMode == 2)) // Program EEPROM
     9be:	81 2f       	mov	r24, r17
     9c0:	81 50       	subi	r24, 0x01	; 1
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	a8 f4       	brcc	.+42     	; 0x9f0 <FUNCProgramAVR+0x182>
		{
			MAIN_ShowProgType('E');
     9c6:	85 e4       	ldi	r24, 0x45	; 69
     9c8:	0e 94 4d 03 	call	0x69a <MAIN_ShowProgType>
				
			if (!(PM_GetStoredDataSize(TYPE_EEPROM))) // Check to make sure EEPROM data is present in memory
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	0e 94 e3 13 	call	0x27c6 <PM_GetStoredDataSize>
     9d2:	dc 01       	movw	r26, r24
     9d4:	cb 01       	movw	r24, r22
     9d6:	00 97       	sbiw	r24, 0x00	; 0
     9d8:	a1 05       	cpc	r26, r1
     9da:	b1 05       	cpc	r27, r1
     9dc:	31 f4       	brne	.+12     	; 0x9ea <FUNCProgramAVR+0x17c>
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     9de:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO EEPROM"));
     9e0:	81 e8       	ldi	r24, 0x81	; 129
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <FUNCProgramAVR+0x182>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_EEPROM);
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	0e 94 a6 17 	call	0x2f4c <PM_CreateProgrammingPackets>
			}
		}

		if ((ProgMode == 3) || (ProgMode == 5)) // Program Fuse bytes
     9f0:	13 30       	cpi	r17, 0x03	; 3
     9f2:	11 f0       	breq	.+4      	; 0x9f8 <FUNCProgramAVR+0x18a>
     9f4:	15 30       	cpi	r17, 0x05	; 5
     9f6:	99 f4       	brne	.+38     	; 0xa1e <FUNCProgramAVR+0x1b0>
		{
			MAIN_ShowProgType('F');
     9f8:	86 e4       	ldi	r24, 0x46	; 70
     9fa:	0e 94 4d 03 	call	0x69a <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     9fe:	af e2       	ldi	r26, 0x2F	; 47
     a00:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     a02:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
     a06:	80 2d       	mov	r24, r0
     a08:	88 23       	and	r24, r24
     a0a:	31 f4       	brne	.+12     	; 0xa18 <FUNCProgramAVR+0x1aa>
			
			if (!(eeprom_read_byte(&EEPROMVars.TotalFuseBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     a0c:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO FUSE BYTES"));
     a0e:	8b e8       	ldi	r24, 0x8B	; 139
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <FUNCProgramAVR+0x1b0>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_FUSE);
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	0e 94 46 17 	call	0x2e8c <PM_SendFuseLockBytes>
			}
		}

		if ((ProgMode == 4) || (ProgMode == 5)) // Program Lock bytes
     a1e:	81 2f       	mov	r24, r17
     a20:	84 50       	subi	r24, 0x04	; 4
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	00 f5       	brcc	.+64     	; 0xa66 <FUNCProgramAVR+0x1f8>
		{
			if (ProgMode == 5)                    // If fusebytes have already been written, we need to reenter programming mode to latch them
     a26:	15 30       	cpi	r17, 0x05	; 5
     a28:	59 f4       	brne	.+22     	; 0xa40 <FUNCProgramAVR+0x1d2>
			{
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line of the slave AVR
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
				MAIN_Delay10MS(1);
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
				MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
				ISPCC_EnterChipProgrammingMode(); // Try to sync with the slave AVR
     a3c:	0e 94 e3 10 	call	0x21c6 <ISPCC_EnterChipProgrammingMode>
			}

			MAIN_ShowProgType('L');
     a40:	8c e4       	ldi	r24, 0x4C	; 76
     a42:	0e 94 4d 03 	call	0x69a <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     a46:	a0 e3       	ldi	r26, 0x30	; 48
     a48:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     a4a:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
     a4e:	80 2d       	mov	r24, r0
     a50:	88 23       	and	r24, r24
     a52:	31 f4       	brne	.+12     	; 0xa60 <FUNCProgramAVR+0x1f2>
		
			if (!(eeprom_read_byte(&EEPROMVars.TotalLockBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     a54:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO LOCK BYTES"));
     a56:	89 e9       	ldi	r24, 0x99	; 153
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
     a5e:	03 c0       	rjmp	.+6      	; 0xa66 <FUNCProgramAVR+0x1f8>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_LOCK);
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	0e 94 46 17 	call	0x2e8c <PM_SendFuseLockBytes>
			}
		}

		strcpy_P(DoneFailMessageBuff, PSTR("PROGRAMMING DONE"));
     a66:	67 ea       	ldi	r22, 0xA7	; 167
     a68:	72 e0       	ldi	r23, 0x02	; 2
     a6a:	ce 01       	movw	r24, r28
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	0e 94 1b 1a 	call	0x3436 <strcpy_P>

		if (Fault != ISPCC_NO_FAULT)         // Takes less code to just overwrite part of the string on fail
     a72:	00 23       	and	r16, r16
     a74:	31 f0       	breq	.+12     	; 0xa82 <FUNCProgramAVR+0x214>
		  strcpy_P(&DoneFailMessageBuff[12], PSTR("FAILED"));
     a76:	68 eb       	ldi	r22, 0xB8	; 184
     a78:	72 e0       	ldi	r23, 0x02	; 2
     a7a:	ce 01       	movw	r24, r28
     a7c:	0d 96       	adiw	r24, 0x0d	; 13
     a7e:	0e 94 1b 1a 	call	0x3436 <strcpy_P>

		LCD_puts(DoneFailMessageBuff);
     a82:	ce 01       	movw	r24, r28
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	0e 94 19 08 	call	0x1032 <LCD_puts>

		MAIN_Delay10MS(255);
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
		MAIN_Delay10MS(100);
     a90:	84 e6       	ldi	r24, 0x64	; 100
     a92:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <FUNCProgramAVR+0x232>
	}
	else
	{
		MAIN_ShowError(SyncErrorMessage);
     a98:	8d ee       	ldi	r24, 0xED	; 237
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
	}
	
	MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run	
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
	USI_SPIOff();
     aa6:	0e 94 93 09 	call	0x1326 <USI_SPIOff>
	DF_EnableDataflash(FALSE);
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
	SPI_SPIOFF();
     ab0:	80 91 64 00 	lds	r24, 0x0064
     ab4:	84 60       	ori	r24, 0x04	; 4
     ab6:	80 93 64 00 	sts	0x0064, r24
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Green = ready
     aba:	81 b3       	in	r24, 0x11	; 17
     abc:	8f 7c       	andi	r24, 0xCF	; 207
     abe:	80 61       	ori	r24, 0x10	; 16
     ac0:	81 bb       	out	0x11, r24	; 17
     ac2:	63 96       	adiw	r28, 0x13	; 19
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	cd bf       	out	0x3d, r28	; 61
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	08 95       	ret

00000ad8 <FUNCStoreProgram>:
}

void FUNCStoreProgram(void)
{
	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     ad8:	88 e3       	ldi	r24, 0x38	; 56
     ada:	99 e0       	ldi	r25, 0x09	; 9
     adc:	90 93 01 01 	sts	0x0101, r25
     ae0:	80 93 00 01 	sts	0x0100, r24
	SPI_SPIInit();
     ae4:	0e 94 2e 09 	call	0x125c <SPI_SPIInit>
	UseExernalDF = FALSE;
     ae8:	10 92 65 02 	sts	0x0265, r1
	DF_EnableDataflash(TRUE);
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>

	if (!(DF_CheckCorrectOnboardChip()))
     af2:	0e 94 3c 0b 	call	0x1678 <DF_CheckCorrectOnboardChip>
     af6:	88 23       	and	r24, r24
     af8:	01 f1       	breq	.+64     	; 0xb3a <FUNCStoreProgram+0x62>
	  return;
			
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     afa:	80 e3       	ldi	r24, 0x30	; 48
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     b02:	0e 94 86 07 	call	0xf0c <OSCCAL_Calibrate>
     b06:	80 91 c1 00 	lds	r24, 0x00C1
     b0a:	80 78       	andi	r24, 0x80	; 128
     b0c:	88 61       	ori	r24, 0x18	; 24
     b0e:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(PSTR("*STORAGE MODE*"));
     b12:	8f eb       	ldi	r24, 0xBF	; 191
     b14:	92 e0       	ldi	r25, 0x02	; 2
     b16:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PM_InterpretAVRISPPacket;
     b1a:	88 ef       	ldi	r24, 0xF8	; 248
     b1c:	94 e1       	ldi	r25, 0x14	; 20
     b1e:	90 93 03 01 	sts	0x0103, r25
     b22:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     b26:	0e 94 78 0f 	call	0x1ef0 <V2P_RunStateMachine>
	DF_EnableDataflash(FALSE);
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
	SPI_SPIOFF();
     b30:	80 91 64 00 	lds	r24, 0x0064
     b34:	84 60       	ori	r24, 0x04	; 4
     b36:	80 93 64 00 	sts	0x0064, r24
     b3a:	08 95       	ret

00000b3c <FUNCClearMem>:
}

void FUNCClearMem(void)
{
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
	LCD_puts_f(PSTR("CONFIRM"));
     b40:	8e ec       	ldi	r24, 0xCE	; 206
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
	MAIN_Delay10MS(180);
     b48:	84 eb       	ldi	r24, 0xB4	; 180
     b4a:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>

	LCD_puts_f(PSTR("<N Y>"));
     b4e:	86 ed       	ldi	r24, 0xD6	; 214
     b50:	92 e0       	ldi	r25, 0x02	; 2
     b52:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

	while (1)
	{
		if (JoyStatus)
     b56:	8e b3       	in	r24, 0x1e	; 30
     b58:	88 23       	and	r24, r24
     b5a:	e9 f3       	breq	.-6      	; 0xb56 <FUNCClearMem+0x1a>
		{
			if (JoyStatus & JOY_LEFT)
     b5c:	8e b3       	in	r24, 0x1e	; 30
     b5e:	99 27       	eor	r25, r25
     b60:	ec 01       	movw	r28, r24
     b62:	c4 70       	andi	r28, 0x04	; 4
     b64:	d0 70       	andi	r29, 0x00	; 0
     b66:	82 fd       	sbrc	r24, 2
     b68:	1a c0       	rjmp	.+52     	; 0xb9e <FUNCClearMem+0x62>
			  return;
			else if (JoyStatus & JOY_RIGHT)
     b6a:	f3 9b       	sbis	0x1e, 3	; 30
     b6c:	f4 cf       	rjmp	.-24     	; 0xb56 <FUNCClearMem+0x1a>
			  break;
		}
	}

	MAIN_WaitForJoyRelease();
     b6e:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>

	LCD_puts_f(WaitText);
     b72:	80 e3       	ldi	r24, 0x30	; 48
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

	for (uint16_t EAddr = 0; EAddr < 512; EAddr++)
     b7a:	ce 01       	movw	r24, r28
     b7c:	2f ef       	ldi	r18, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     b7e:	dc 01       	movw	r26, r24
     b80:	02 2e       	mov	r0, r18
     b82:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	32 e0       	ldi	r19, 0x02	; 2
     b8a:	80 30       	cpi	r24, 0x00	; 0
     b8c:	93 07       	cpc	r25, r19
     b8e:	b8 f3       	brcs	.-18     	; 0xb7e <FUNCClearMem+0x42>
	  eeprom_write_byte((uint8_t*)EAddr, 0xFF);

	LCD_puts_f(PSTR("MEM CLEARED"));
     b90:	8c ed       	ldi	r24, 0xDC	; 220
     b92:	92 e0       	ldi	r25, 0x02	; 2
     b94:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
	MAIN_Delay10MS(255);
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <FUNCSetContrast>:
}

void FUNCSetContrast(void)
{
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	26 97       	sbiw	r28, 0x06	; 6
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     bbe:	85 e8       	ldi	r24, 0x85	; 133
     bc0:	e8 2e       	mov	r14, r24
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	f8 2e       	mov	r15, r24
  uint8_t result;
  asm volatile
     bc6:	d7 01       	movw	r26, r14
     bc8:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
     bcc:	80 2d       	mov	r24, r0
     bce:	18 2f       	mov	r17, r24
     bd0:	1f 70       	andi	r17, 0x0F	; 15
	uint8_t Buffer[6];
	uint8_t Contrast = (eeprom_read_byte(&EEPROMVars.LCDContrast) & 0x0F); // Ranges from 0-15 so mask retuns 15 on blank EEPROM (0xFF)
	
	JoyStatus = 1;                          // Invalid value to force the LCD to update
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)
     bd6:	8e b3       	in	r24, 0x1e	; 30
     bd8:	88 23       	and	r24, r24
     bda:	e9 f3       	breq	.-6      	; 0xbd6 <FUNCSetContrast+0x32>
		{
			if (JoyStatus & JOY_UP)
     bdc:	f6 9b       	sbis	0x1e, 6	; 30
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <FUNCSetContrast+0x44>
			{
				if (Contrast < 15)
     be0:	1f 30       	cpi	r17, 0x0F	; 15
     be2:	78 f4       	brcc	.+30     	; 0xc02 <FUNCSetContrast+0x5e>
				  Contrast++;
     be4:	1f 5f       	subi	r17, 0xFF	; 255
     be6:	0d c0       	rjmp	.+26     	; 0xc02 <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_DOWN)
     be8:	f7 9b       	sbis	0x1e, 7	; 30
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <FUNCSetContrast+0x50>
			{
				if (Contrast > 1)          // Zero is non-visible, so 1 is the minimum
     bec:	12 30       	cpi	r17, 0x02	; 2
     bee:	48 f0       	brcs	.+18     	; 0xc02 <FUNCSetContrast+0x5e>
				  Contrast--;
     bf0:	11 50       	subi	r17, 0x01	; 1
     bf2:	07 c0       	rjmp	.+14     	; 0xc02 <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_LEFT)
     bf4:	f2 9b       	sbis	0x1e, 2	; 30
     bf6:	05 c0       	rjmp	.+10     	; 0xc02 <FUNCSetContrast+0x5e>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     bf8:	d7 01       	movw	r26, r14
     bfa:	01 2e       	mov	r0, r17
     bfc:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.LCDContrast, Contrast);
				return;
     c00:	18 c0       	rjmp	.+48     	; 0xc32 <FUNCSetContrast+0x8e>
			}
					
			Buffer[0] = 'C';
     c02:	83 e4       	ldi	r24, 0x43	; 67
     c04:	89 83       	std	Y+1, r24	; 0x01
			Buffer[1] = 'T';
     c06:	84 e5       	ldi	r24, 0x54	; 84
     c08:	8a 83       	std	Y+2, r24	; 0x02
			Buffer[2] = ' ';
     c0a:	80 e2       	ldi	r24, 0x20	; 32
     c0c:	8b 83       	std	Y+3, r24	; 0x03

			MAIN_IntToStr((uint16_t)Contrast, &Buffer[3]);
     c0e:	be 01       	movw	r22, r28
     c10:	6c 5f       	subi	r22, 0xFC	; 252
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	81 2f       	mov	r24, r17
     c16:	99 27       	eor	r25, r25
     c18:	0e 94 35 03 	call	0x66a <MAIN_IntToStr>
			LCD_puts(Buffer);
     c1c:	ce 01       	movw	r24, r28
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	0e 94 19 08 	call	0x1032 <LCD_puts>

			LCD_CONTRAST_LEVEL(Contrast);
     c24:	81 2f       	mov	r24, r17
     c26:	8f 70       	andi	r24, 0x0F	; 15
     c28:	80 93 e7 00 	sts	0x00E7, r24

			MAIN_WaitForJoyRelease();
     c2c:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     c30:	d2 cf       	rjmp	.-92     	; 0xbd6 <FUNCSetContrast+0x32>
     c32:	26 96       	adiw	r28, 0x06	; 6
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	08 95       	ret

00000c4a <FUNCSetISPSpeed>:
		}
	}
}

void FUNCSetISPSpeed(void)
{
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     c50:	01 e0       	ldi	r16, 0x01	; 1
     c52:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t result;
  asm volatile
     c54:	d8 01       	movw	r26, r16
     c56:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
     c5a:	80 2d       	mov	r24, r0
     c5c:	c8 2f       	mov	r28, r24
	uint8_t CurrSpeed = eeprom_read_byte(&EEPROMVars.SCKDuration);

	if (CurrSpeed > (USI_PRESET_SPEEDS - 1)) CurrSpeed = (USI_PRESET_SPEEDS - 1); // Protection against blank EEPROM
     c5e:	84 30       	cpi	r24, 0x04	; 4
     c60:	08 f0       	brcs	.+2      	; 0xc64 <FUNCSetISPSpeed+0x1a>
     c62:	c3 e0       	ldi	r28, 0x03	; 3

	JoyStatus = 1;                         // Invalid value to force the LCD to update
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     c68:	8e b3       	in	r24, 0x1e	; 30
     c6a:	88 23       	and	r24, r24
     c6c:	e9 f3       	breq	.-6      	; 0xc68 <FUNCSetISPSpeed+0x1e>
		{
			if (JoyStatus & JOY_UP)
     c6e:	f6 9b       	sbis	0x1e, 6	; 30
     c70:	06 c0       	rjmp	.+12     	; 0xc7e <FUNCSetISPSpeed+0x34>
			{
				(CurrSpeed == 0)? CurrSpeed = (USI_PRESET_SPEEDS - 1) : CurrSpeed--;
     c72:	cc 23       	and	r28, r28
     c74:	11 f4       	brne	.+4      	; 0xc7a <FUNCSetISPSpeed+0x30>
     c76:	c3 e0       	ldi	r28, 0x03	; 3
     c78:	11 c0       	rjmp	.+34     	; 0xc9c <FUNCSetISPSpeed+0x52>
     c7a:	c1 50       	subi	r28, 0x01	; 1
     c7c:	0f c0       	rjmp	.+30     	; 0xc9c <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_DOWN)
     c7e:	f7 9b       	sbis	0x1e, 7	; 30
     c80:	06 c0       	rjmp	.+12     	; 0xc8e <FUNCSetISPSpeed+0x44>
			{
				(CurrSpeed == (USI_PRESET_SPEEDS - 1))? CurrSpeed = 0 : CurrSpeed++;
     c82:	c3 30       	cpi	r28, 0x03	; 3
     c84:	11 f4       	brne	.+4      	; 0xc8a <FUNCSetISPSpeed+0x40>
     c86:	c0 e0       	ldi	r28, 0x00	; 0
     c88:	09 c0       	rjmp	.+18     	; 0xc9c <FUNCSetISPSpeed+0x52>
     c8a:	cf 5f       	subi	r28, 0xFF	; 255
     c8c:	07 c0       	rjmp	.+14     	; 0xc9c <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_LEFT)
     c8e:	f2 9b       	sbis	0x1e, 2	; 30
     c90:	05 c0       	rjmp	.+10     	; 0xc9c <FUNCSetISPSpeed+0x52>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     c92:	d8 01       	movw	r26, r16
     c94:	0c 2e       	mov	r0, r28
     c96:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.SCKDuration, CurrSpeed);
				return;
     c9a:	0b c0       	rjmp	.+22     	; 0xcb2 <FUNCSetISPSpeed+0x68>
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f(USISpeeds[CurrSpeed]);
     c9c:	8a e0       	ldi	r24, 0x0A	; 10
     c9e:	c8 9f       	mul	r28, r24
     ca0:	c0 01       	movw	r24, r0
     ca2:	11 24       	eor	r1, r1
     ca4:	86 58       	subi	r24, 0x86	; 134
     ca6:	9f 4f       	sbci	r25, 0xFF	; 255
     ca8:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     cac:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     cb0:	db cf       	rjmp	.-74     	; 0xc68 <FUNCSetISPSpeed+0x1e>
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	08 95       	ret

00000cba <FUNCSetFirmMinorVer>:
		}
	}
}

void FUNCSetFirmMinorVer(void)
{
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	25 97       	sbiw	r28, 0x05	; 5
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     cd4:	96 e8       	ldi	r25, 0x86	; 134
     cd6:	e9 2e       	mov	r14, r25
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	f9 2e       	mov	r15, r25
  uint8_t result;
  asm volatile
     cdc:	d7 01       	movw	r26, r14
     cde:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
     ce2:	80 2d       	mov	r24, r0
     ce4:	18 2f       	mov	r17, r24
	uint8_t VerBuffer[5];
	uint8_t VerMinor = eeprom_read_byte(&EEPROMVars.FirmVerMinor);

	if (VerMinor > 9)
     ce6:	8a 30       	cpi	r24, 0x0A	; 10
     ce8:	08 f0       	brcs	.+2      	; 0xcec <FUNCSetFirmMinorVer+0x32>
	  VerMinor = V2P_SW_VERSION_MINOR_DEFAULT;
     cea:	14 e0       	ldi	r17, 0x04	; 4
	
	strcpy_P(VerBuffer, PSTR("V2- "));
     cec:	68 ee       	ldi	r22, 0xE8	; 232
     cee:	72 e0       	ldi	r23, 0x02	; 2
     cf0:	ce 01       	movw	r24, r28
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	0e 94 1b 1a 	call	0x3436 <strcpy_P>

	JoyStatus = 1;                        // Invalid value to force the LCD to update
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     cfc:	8e b3       	in	r24, 0x1e	; 30
     cfe:	88 23       	and	r24, r24
     d00:	e9 f3       	breq	.-6      	; 0xcfc <FUNCSetFirmMinorVer+0x42>
		{
			if (JoyStatus & JOY_UP)
     d02:	f6 9b       	sbis	0x1e, 6	; 30
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <FUNCSetFirmMinorVer+0x52>
			{
				if (VerMinor < 9)
     d06:	19 30       	cpi	r17, 0x09	; 9
     d08:	08 f4       	brcc	.+2      	; 0xd0c <FUNCSetFirmMinorVer+0x52>
				  VerMinor++;
     d0a:	1f 5f       	subi	r17, 0xFF	; 255
			}
			if (JoyStatus & JOY_DOWN)
     d0c:	f7 9b       	sbis	0x1e, 7	; 30
     d0e:	04 c0       	rjmp	.+8      	; 0xd18 <FUNCSetFirmMinorVer+0x5e>
			{
				if (VerMinor)
     d10:	11 23       	and	r17, r17
     d12:	49 f0       	breq	.+18     	; 0xd26 <FUNCSetFirmMinorVer+0x6c>
				  VerMinor--;
     d14:	11 50       	subi	r17, 0x01	; 1
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <FUNCSetFirmMinorVer+0x6c>
			}
			else if (JoyStatus & JOY_LEFT)
     d18:	f2 9b       	sbis	0x1e, 2	; 30
     d1a:	05 c0       	rjmp	.+10     	; 0xd26 <FUNCSetFirmMinorVer+0x6c>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     d1c:	d7 01       	movw	r26, r14
     d1e:	01 2e       	mov	r0, r17
     d20:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.FirmVerMinor, VerMinor);
				return;
     d24:	0a c0       	rjmp	.+20     	; 0xd3a <FUNCSetFirmMinorVer+0x80>
			}
			
			VerBuffer[3] = ('0' + VerMinor);
     d26:	10 5d       	subi	r17, 0xD0	; 208
     d28:	1c 83       	std	Y+4, r17	; 0x04
     d2a:	10 53       	subi	r17, 0x30	; 48
			LCD_puts(VerBuffer);
     d2c:	ce 01       	movw	r24, r28
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	0e 94 19 08 	call	0x1032 <LCD_puts>

			MAIN_WaitForJoyRelease();
     d34:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     d38:	e1 cf       	rjmp	.-62     	; 0xcfc <FUNCSetFirmMinorVer+0x42>
     d3a:	25 96       	adiw	r28, 0x05	; 5
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	08 95       	ret

00000d52 <FUNCSetAutoSleepTimeOut>:
		}
	}	
}

void FUNCSetAutoSleepTimeOut(void)
{
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	28 97       	sbiw	r28, 0x08	; 8
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     d6c:	27 e8       	ldi	r18, 0x87	; 135
     d6e:	e2 2e       	mov	r14, r18
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	f2 2e       	mov	r15, r18
  uint8_t result;
  asm volatile
     d74:	d7 01       	movw	r26, r14
     d76:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
     d7a:	80 2d       	mov	r24, r0
     d7c:	18 2f       	mov	r17, r24
	uint8_t SleepTxtBuffer[8];
	uint8_t SleepVal = eeprom_read_byte(&EEPROMVars.AutoSleepValIndex);

	if (SleepVal > 4)
     d7e:	85 30       	cpi	r24, 0x05	; 5
     d80:	08 f0       	brcs	.+2      	; 0xd84 <FUNCSetAutoSleepTimeOut+0x32>
	  SleepVal = 4;
     d82:	14 e0       	ldi	r17, 0x04	; 4

	strcpy_P(SleepTxtBuffer, PSTR("    SEC"));
     d84:	6d ee       	ldi	r22, 0xED	; 237
     d86:	72 e0       	ldi	r23, 0x02	; 2
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	0e 94 1b 1a 	call	0x3436 <strcpy_P>
	
	JoyStatus = 1;                        // Invalid value to force the LCD to update
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     d94:	8e b3       	in	r24, 0x1e	; 30
     d96:	88 23       	and	r24, r24
     d98:	e9 f3       	breq	.-6      	; 0xd94 <FUNCSetAutoSleepTimeOut+0x42>
		{
			if (JoyStatus & JOY_UP)
     d9a:	f6 9b       	sbis	0x1e, 6	; 30
     d9c:	05 c0       	rjmp	.+10     	; 0xda8 <FUNCSetAutoSleepTimeOut+0x56>
			{
				(SleepVal == 0)? SleepVal = 4 : SleepVal--;
     d9e:	11 23       	and	r17, r17
     da0:	11 f4       	brne	.+4      	; 0xda6 <FUNCSetAutoSleepTimeOut+0x54>
     da2:	14 e0       	ldi	r17, 0x04	; 4
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <FUNCSetAutoSleepTimeOut+0x56>
     da6:	11 50       	subi	r17, 0x01	; 1
			}
			if (JoyStatus & JOY_DOWN)
     da8:	f7 9b       	sbis	0x1e, 7	; 30
     daa:	06 c0       	rjmp	.+12     	; 0xdb8 <FUNCSetAutoSleepTimeOut+0x66>
			{
				(SleepVal == 4)? SleepVal = 0 : SleepVal++;
     dac:	14 30       	cpi	r17, 0x04	; 4
     dae:	11 f4       	brne	.+4      	; 0xdb4 <FUNCSetAutoSleepTimeOut+0x62>
     db0:	10 e0       	ldi	r17, 0x00	; 0
     db2:	0d c0       	rjmp	.+26     	; 0xdce <FUNCSetAutoSleepTimeOut+0x7c>
     db4:	1f 5f       	subi	r17, 0xFF	; 255
     db6:	09 c0       	rjmp	.+18     	; 0xdca <FUNCSetAutoSleepTimeOut+0x78>
			}
			else if (JoyStatus & JOY_LEFT)
     db8:	f2 9b       	sbis	0x1e, 2	; 30
     dba:	07 c0       	rjmp	.+14     	; 0xdca <FUNCSetAutoSleepTimeOut+0x78>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     dbc:	d7 01       	movw	r26, r14
     dbe:	01 2e       	mov	r0, r17
     dc0:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.AutoSleepValIndex, SleepVal);
				TOUT_SetupSleepTimer();
     dc4:	0e 94 e9 0b 	call	0x17d2 <TOUT_SetupSleepTimer>
				return;
     dc8:	1b c0       	rjmp	.+54     	; 0xe00 <FUNCSetAutoSleepTimeOut+0xae>
			}

			if (!(SleepVal))
     dca:	11 23       	and	r17, r17
     dcc:	29 f4       	brne	.+10     	; 0xdd8 <FUNCSetAutoSleepTimeOut+0x86>
			{
				LCD_puts_f(PSTR("OFF"));
     dce:	85 ef       	ldi	r24, 0xF5	; 245
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     dd6:	11 c0       	rjmp	.+34     	; 0xdfa <FUNCSetAutoSleepTimeOut+0xa8>
			}
			else
			{
				MAIN_IntToStr(pgm_read_byte(&AutoSleepTOValues[SleepVal]), &SleepTxtBuffer[0]);
     dd8:	e1 2f       	mov	r30, r17
     dda:	ff 27       	eor	r31, r31
     ddc:	e4 53       	subi	r30, 0x34	; 52
     dde:	fc 4f       	sbci	r31, 0xFC	; 252
     de0:	84 91       	lpm	r24, Z
     de2:	be 01       	movw	r22, r28
     de4:	6f 5f       	subi	r22, 0xFF	; 255
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	99 27       	eor	r25, r25
     dea:	0e 94 35 03 	call	0x66a <MAIN_IntToStr>
				SleepTxtBuffer[3] = ' '; // Remove the auto-string termination from the buffer
     dee:	80 e2       	ldi	r24, 0x20	; 32
     df0:	8c 83       	std	Y+4, r24	; 0x04
				LCD_puts(SleepTxtBuffer);
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	0e 94 19 08 	call	0x1032 <LCD_puts>
			}

			MAIN_WaitForJoyRelease();
     dfa:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     dfe:	ca cf       	rjmp	.-108    	; 0xd94 <FUNCSetAutoSleepTimeOut+0x42>
     e00:	28 96       	adiw	r28, 0x08	; 8
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	08 95       	ret

00000e18 <FUNCSleepMode>:
		}
	}	
}

void FUNCSleepMode(void)
{
	SMCR    = ((1 << SM1) | (1 << SE));    // Power down sleep mode
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	83 bf       	out	0x33, r24	; 51
	LCDCRA &= ~(1 << LCDEN); 
     e1c:	80 91 e4 00 	lds	r24, 0x00E4
     e20:	8f 77       	andi	r24, 0x7F	; 127
     e22:	80 93 e4 00 	sts	0x00E4, r24
	
	while (!(JoyStatus & JOY_UP))         // Joystick interrupt wakes the micro
	  SLEEP();
     e26:	f6 99       	sbic	0x1e, 6	; 30
     e28:	03 c0       	rjmp	.+6      	; 0xe30 <FUNCSleepMode+0x18>
     e2a:	88 95       	sleep
     e2c:	f6 9b       	sbis	0x1e, 6	; 30
     e2e:	fd cf       	rjmp	.-6      	; 0xe2a <FUNCSleepMode+0x12>
	   
	LCDCRA |= (1 << LCDEN);
     e30:	80 91 e4 00 	lds	r24, 0x00E4
     e34:	80 68       	ori	r24, 0x80	; 128
     e36:	80 93 e4 00 	sts	0x00E4, r24
	
	MAIN_WaitForJoyRelease();
     e3a:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     e3e:	08 95       	ret

00000e40 <FUNCStorageInfo>:
}

void FUNCStorageInfo(void)
{
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
	uint8_t SelectedItem = 0;
     e44:	10 e0       	ldi	r17, 0x00	; 0

	MAIN_WaitForJoyRelease();
     e46:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>

	JoyStatus = 1;                        // Invalid value to force the LCD to update
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     e4e:	8e b3       	in	r24, 0x1e	; 30
     e50:	88 23       	and	r24, r24
     e52:	e9 f3       	breq	.-6      	; 0xe4e <FUNCStorageInfo+0xe>
		{
			if (JoyStatus & (JOY_UP | JOY_DOWN))
     e54:	ce b3       	in	r28, 0x1e	; 30
     e56:	c0 7c       	andi	r28, 0xC0	; 192
     e58:	19 f0       	breq	.+6      	; 0xe60 <FUNCStorageInfo+0x20>
			{
				SelectedItem ^= 1;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	18 27       	eor	r17, r24
     e5e:	38 c0       	rjmp	.+112    	; 0xed0 <FUNCStorageInfo+0x90>
			}
			else if (JoyStatus & JOY_LEFT)
     e60:	f2 99       	sbic	0x1e, 2	; 30
     e62:	41 c0       	rjmp	.+130    	; 0xee6 <FUNCStorageInfo+0xa6>
			{
				return;
			}
			else if (JoyStatus & JOY_PRESS)
     e64:	f4 9b       	sbis	0x1e, 4	; 30
     e66:	34 c0       	rjmp	.+104    	; 0xed0 <FUNCStorageInfo+0x90>
			{
				if (SelectedItem == 1)    // View storage tags
     e68:	11 30       	cpi	r17, 0x01	; 1
     e6a:	81 f5       	brne	.+96     	; 0xecc <FUNCStorageInfo+0x8c>
				{
					DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     e6c:	88 e3       	ldi	r24, 0x38	; 56
     e6e:	99 e0       	ldi	r25, 0x09	; 9
     e70:	90 93 01 01 	sts	0x0101, r25
     e74:	80 93 00 01 	sts	0x0100, r24
					SPI_SPIInit();
     e78:	0e 94 2e 09 	call	0x125c <SPI_SPIInit>
					UseExernalDF = FALSE;
     e7c:	c0 93 65 02 	sts	0x0265, r28
					DF_EnableDataflash(TRUE);
     e80:	81 2f       	mov	r24, r17
     e82:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>

					if (DF_CheckCorrectOnboardChip())
     e86:	0e 94 3c 0b 	call	0x1678 <DF_CheckCorrectOnboardChip>
     e8a:	c8 2f       	mov	r28, r24
     e8c:	88 23       	and	r24, r24
     e8e:	41 f0       	breq	.+16     	; 0xea0 <FUNCStorageInfo+0x60>
					{
						TM_ShowTags();
     e90:	0e 94 ed 19 	call	0x33da <TM_ShowTags>
						SPI_SPIOFF();
     e94:	80 91 64 00 	lds	r24, 0x0064
     e98:	84 60       	ori	r24, 0x04	; 4
     e9a:	80 93 64 00 	sts	0x0064, r24
     e9e:	18 c0       	rjmp	.+48     	; 0xed0 <FUNCStorageInfo+0x90>
					}
					else if (!(PM_GetStoredDataSize(TYPE_FLASH)))
     ea0:	81 2f       	mov	r24, r17
     ea2:	0e 94 e3 13 	call	0x27c6 <PM_GetStoredDataSize>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	a1 05       	cpc	r26, r1
     eae:	b1 05       	cpc	r27, r1
     eb0:	79 f4       	brne	.+30     	; 0xed0 <FUNCStorageInfo+0x90>
					{
						DF_EnableDataflash(FALSE);
     eb2:	8c 2f       	mov	r24, r28
     eb4:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
						SPI_SPIOFF();
     eb8:	80 91 64 00 	lds	r24, 0x0064
     ebc:	84 60       	ori	r24, 0x04	; 4
     ebe:	80 93 64 00 	sts	0x0064, r24

						MAIN_ShowError(PSTR("NO STORED PRGM"));
     ec2:	89 ef       	ldi	r24, 0xF9	; 249
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <FUNCStorageInfo+0x90>
					}	
				}
				else                      // View stored data sizes
				{
					PM_ShowStoredItemSizes();
     ecc:	0e 94 c8 18 	call	0x3190 <PM_ShowStoredItemSizes>
				}
			}
			
			LCD_puts_f(SIFONames[SelectedItem]);
     ed0:	8f e0       	ldi	r24, 0x0F	; 15
     ed2:	18 9f       	mul	r17, r24
     ed4:	c0 01       	movw	r24, r0
     ed6:	11 24       	eor	r1, r1
     ed8:	84 5a       	subi	r24, 0xA4	; 164
     eda:	9f 4f       	sbci	r25, 0xFF	; 255
     edc:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     ee0:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     ee4:	b4 cf       	rjmp	.-152    	; 0xe4e <FUNCStorageInfo+0xe>
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	08 95       	ret

00000eec <FUNCGoBootloader>:
		}
	}
}

void FUNCGoBootloader(void)
{
	uint8_t MD = (MCUCR & ~(1 << JTD));   // Forces compiler to use IN, AND plus two OUTs rather than two lots of IN/AND/OUTs
     eec:	85 b7       	in	r24, 0x35	; 53
     eee:	8f 77       	andi	r24, 0x7F	; 127
	MCUCR = MD;                           // Turn on JTAG via code
     ef0:	85 bf       	out	0x35, r24	; 53
	MCUCR = MD;                           // Set bit twice as specified in datasheet        
     ef2:	85 bf       	out	0x35, r24	; 53

	TIMEOUT_SLEEP_TIMER_OFF();
     ef4:	10 92 81 00 	sts	0x0081, r1
	
	LCD_puts_f(PSTR("*JTAG ON*"));
     ef8:	88 e0       	ldi	r24, 0x08	; 8
     efa:	93 e0       	ldi	r25, 0x03	; 3
     efc:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
	
	MAIN_WaitForJoyRelease();
     f00:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
	
	WDTCR = ((1<<WDCE) | (1<<WDE));       // Enable Watchdog Timer to give reset after minimum timeout
     f04:	88 e1       	ldi	r24, 0x18	; 24
     f06:	80 93 60 00 	sts	0x0060, r24
	while (1) {};                        // Eternal loop - when watchdog resets the AVR it will enter the bootloader
     f0a:	ff cf       	rjmp	.-2      	; 0xf0a <FUNCGoBootloader+0x1e>

00000f0c <OSCCAL_Calibrate>:

static volatile uint16_t ActualCount;

void OSCCAL_Calibrate(void)
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
	uint8_t SREG_Backup;
	uint8_t LoopCount = (0x7F / 2); // Maximum range is 128, and starts from the middle, so 64 is the max number of iterations required
     f10:	4f e3       	ldi	r20, 0x3F	; 63
	uint8_t PrevOSCALValues[2];
   
	// Reset ActualCount
	ActualCount = 0;
     f12:	10 92 05 01 	sts	0x0105, r1
     f16:	10 92 04 01 	sts	0x0104, r1
   
	// Make sure all clock division is turned off (8Mhz RC clock)
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_8MHZ);
     f1a:	80 e8       	ldi	r24, 0x80	; 128
     f1c:	80 93 61 00 	sts	0x0061, r24
     f20:	10 92 61 00 	sts	0x0061, r1

	// Inital OSCCAL of half its maximum for speed
	OSCCAL = (0x7F / 2);
     f24:	40 93 66 00 	sts	0x0066, r20

	// Save the SREG
	SREG_Backup = SREG;
     f28:	5f b7       	in	r21, 0x3f	; 63
    
	// Disable all timer 1 interrupts
	TIMSK1 = 0;
     f2a:	10 92 6f 00 	sts	0x006F, r1
        
	// Set timer 2 to asyncronous mode (32.768KHz crystal)
	ASSR   = (1 << AS2);
     f2e:	88 e0       	ldi	r24, 0x08	; 8
     f30:	80 93 b6 00 	sts	0x00B6, r24
        
	// Timer 2 overflow interrupt enable
	TIMSK2 = (1 << TOIE2);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 70 00 	sts	0x0070, r24

	// Enable interrupts
	sei();
     f3a:	78 94       	sei

	// Start both counters with no prescaling
	TCCR1B = (1 << CS10);
     f3c:	80 93 81 00 	sts	0x0081, r24
	TCCR2A = (1 << CS20);
     f40:	80 93 b0 00 	sts	0x00B0, r24
	 	 
	// Previous OSCCAL value of 0
	PrevOSCALValues[0] = 0;
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0

	// Wait until timer 2's external 32.768KHz crystal is stable
	while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB) | (1 << OCR2UB)));
     f48:	80 91 b6 00 	lds	r24, 0x00B6
     f4c:	99 27       	eor	r25, r25
     f4e:	87 70       	andi	r24, 0x07	; 7
     f50:	90 70       	andi	r25, 0x00	; 0
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	c9 f7       	brne	.-14     	; 0xf48 <OSCCAL_Calibrate+0x3c>
    
	// Clear the timer values
	TCNT1  = 0;
     f56:	90 93 85 00 	sts	0x0085, r25
     f5a:	80 93 84 00 	sts	0x0084, r24
	TCNT2  = 0;
     f5e:	10 92 b2 00 	sts	0x00B2, r1
    
	while (LoopCount--)
	{
		// Let it take a few readings (14ms, approx 2 readings)
		_delay_ms(14);

		PrevOSCALValues[1] = PrevOSCALValues[0];
		PrevOSCALValues[0] = OSCCAL;
        
		if (ActualCount > OSCCAL_UPPERCOUNTBOUND)       // Clock is running too fast
			OSCCAL--;
		else if (ActualCount < OSCCAL_LOWERCOUNTBOUND) // Clock is running too slow
			OSCCAL++;
		else		                                     // Clock is just right
			break;
		
		// If the routine cannot find a value withing the count tollerance,
		// it will cause the OSCCAL to hover around the closest two values.
		// If the current value is the same as the 2*n previous, exit the
		// routine as the best value has been found.
		if (OSCCAL == PrevOSCALValues[1])
		  break;
     f62:	4e e3       	ldi	r20, 0x3E	; 62
     f64:	ac ec       	ldi	r26, 0xCC	; 204
     f66:	b4 e6       	ldi	r27, 0x64	; 100
     f68:	c0 e0       	ldi	r28, 0x00	; 0
     f6a:	d0 e0       	ldi	r29, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f6c:	cd 01       	movw	r24, r26
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <OSCCAL_Calibrate+0x62>
     f72:	32 2f       	mov	r19, r18
     f74:	80 91 66 00 	lds	r24, 0x0066
     f78:	28 2f       	mov	r18, r24
     f7a:	80 91 04 01 	lds	r24, 0x0104
     f7e:	90 91 05 01 	lds	r25, 0x0105
     f82:	81 50       	subi	r24, 0x01	; 1
     f84:	91 4e       	sbci	r25, 0xE1	; 225
     f86:	20 f0       	brcs	.+8      	; 0xf90 <OSCCAL_Calibrate+0x84>
     f88:	80 91 66 00 	lds	r24, 0x0066
     f8c:	81 50       	subi	r24, 0x01	; 1
     f8e:	0a c0       	rjmp	.+20     	; 0xfa4 <OSCCAL_Calibrate+0x98>
     f90:	80 91 04 01 	lds	r24, 0x0104
     f94:	90 91 05 01 	lds	r25, 0x0105
     f98:	86 5f       	subi	r24, 0xF6	; 246
     f9a:	90 4e       	sbci	r25, 0xE0	; 224
     f9c:	58 f4       	brcc	.+22     	; 0xfb4 <OSCCAL_Calibrate+0xa8>
     f9e:	80 91 66 00 	lds	r24, 0x0066
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
     fa4:	80 93 66 00 	sts	0x0066, r24
     fa8:	80 91 66 00 	lds	r24, 0x0066
     fac:	83 17       	cp	r24, r19
     fae:	11 f0       	breq	.+4      	; 0xfb4 <OSCCAL_Calibrate+0xa8>
     fb0:	41 50       	subi	r20, 0x01	; 1
     fb2:	e0 f6       	brcc	.-72     	; 0xf6c <OSCCAL_Calibrate+0x60>
	}

	// Disable all timer interrupts
	TIMSK1 = 0;
     fb4:	10 92 6f 00 	sts	0x006F, r1
	TIMSK2 = 0;
     fb8:	10 92 70 00 	sts	0x0070, r1
    
	// Stop the timers
	TCCR1B = 0x00;
     fbc:	10 92 81 00 	sts	0x0081, r1
	TCCR2A = 0x00;
     fc0:	10 92 b0 00 	sts	0x00B0, r1

	// Turn off timer 2 asynchronous mode
	ASSR  &= ~(1 << AS2);
     fc4:	80 91 b6 00 	lds	r24, 0x00B6
     fc8:	87 7f       	andi	r24, 0xF7	; 247
     fca:	80 93 b6 00 	sts	0x00B6, r24

	// Restore SREG
	SREG = SREG_Backup;
     fce:	5f bf       	out	0x3f, r21	; 63
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <__vector_5>:
        
	return;
}

ISR(TIMER2_OVF_vect, ISR_BLOCK) // Occurs 32768/256 timers per second, or 128Hz
{
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	8f 93       	push	r24
     fe2:	9f 93       	push	r25
	// Stop timer 1 so it can be read
	TCCR1B = 0x00;
     fe4:	10 92 81 00 	sts	0x0081, r1
    
	// Record timer 1's value
	ActualCount = TCNT1;
     fe8:	80 91 84 00 	lds	r24, 0x0084
     fec:	90 91 85 00 	lds	r25, 0x0085
     ff0:	90 93 05 01 	sts	0x0105, r25
     ff4:	80 93 04 01 	sts	0x0104, r24
	     
	// Reset counters and restart timer 1
	TCNT1  = 0;
     ff8:	10 92 85 00 	sts	0x0085, r1
     ffc:	10 92 84 00 	sts	0x0084, r1
	TCNT2  = 0;
    1000:	10 92 b2 00 	sts	0x00B2, r1
	TCCR1B = (1 << CS10);
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 93 81 00 	sts	0x0081, r24
    100a:	9f 91       	pop	r25
    100c:	8f 91       	pop	r24
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	1f 90       	pop	r1
    1016:	18 95       	reti

00001018 <LCD_Init>:

void LCD_Init(void)
{
	// Set the initial contrast level to maximum:
	LCDCCR = 0x0F;
    1018:	8f e0       	ldi	r24, 0x0F	; 15
    101a:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all segment pins:
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
    101e:	87 eb       	ldi	r24, 0xB7	; 183
    1020:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32Hz:
    LCDFRR  = (7<<LCDCD0);    
    1024:	87 e0       	ldi	r24, 0x07	; 7
    1026:	80 93 e6 00 	sts	0x00E6, r24

	// Enable LCD and set low power waveform, enable start of frame interrupt:
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB) | (1<<LCDIE);
    102a:	88 ec       	ldi	r24, 0xC8	; 200
    102c:	80 93 e4 00 	sts	0x00E4, r24
    1030:	08 95       	ret

00001032 <LCD_puts>:
}

void LCD_puts_f(const uint8_t *FlashData)
{
	uint8_t StrBuff[LCD_TEXTBUFFER_SIZE];

	strcpy_P(StrBuff, FlashData);
	LCD_puts(StrBuff);
}

void LCD_puts(const uint8_t *Data)
{
    1032:	dc 01       	movw	r26, r24
	uint8_t LoadB;
	
	for (LoadB = 0; LoadB < 20; LoadB++)
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	3f ef       	ldi	r19, 0xFF	; 255
    1038:	e6 e0       	ldi	r30, 0x06	; 6
    103a:	f1 e0       	ldi	r31, 0x01	; 1
	{
		uint8_t CByte = *(Data++);
    103c:	9d 91       	ld	r25, X+
	
		if ((CByte >= '*') && (CByte <= 'z') && (CByte != ' '))
    103e:	89 2f       	mov	r24, r25
    1040:	8a 52       	subi	r24, 0x2A	; 42
    1042:	81 35       	cpi	r24, 0x51	; 81
    1044:	10 f4       	brcc	.+4      	; 0x104a <LCD_puts+0x18>
		  TextBuffer[LoadB] = (CByte - '*');
    1046:	80 83       	st	Z, r24
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <LCD_puts+0x1e>
		else if (CByte == 0x00)
    104a:	99 23       	and	r25, r25
    104c:	29 f0       	breq	.+10     	; 0x1058 <LCD_puts+0x26>
		  break;
		else
		  TextBuffer[LoadB] = 0xFF;		
    104e:	30 83       	st	Z, r19
    1050:	2f 5f       	subi	r18, 0xFF	; 255
    1052:	31 96       	adiw	r30, 0x01	; 1
    1054:	24 31       	cpi	r18, 0x14	; 20
    1056:	90 f3       	brcs	.-28     	; 0x103c <LCD_puts+0xa>
	}

	ScrollMode  = ((LoadB > 6)? TRUE : FALSE);
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	27 30       	cpi	r18, 0x07	; 7
    105c:	08 f0       	brcs	.+2      	; 0x1060 <LCD_puts+0x2e>
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	80 93 37 01 	sts	0x0137, r24
	ScrollCount = 0;
    1064:	10 92 38 01 	sts	0x0138, r1
    1068:	9f ef       	ldi	r25, 0xFF	; 255
    106a:	86 e0       	ldi	r24, 0x06	; 6

	for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
		TextBuffer[LoadB++] = 0xFF;
    106c:	e2 2f       	mov	r30, r18
    106e:	ff 27       	eor	r31, r31
    1070:	ea 5f       	subi	r30, 0xFA	; 250
    1072:	fe 4f       	sbci	r31, 0xFE	; 254
    1074:	90 83       	st	Z, r25
    1076:	2f 5f       	subi	r18, 0xFF	; 255
    1078:	81 50       	subi	r24, 0x01	; 1
    107a:	87 ff       	sbrs	r24, 7
    107c:	f7 cf       	rjmp	.-18     	; 0x106c <LCD_puts+0x3a>
	
	TextBuffer[LoadB] = 0x00;
    107e:	e2 2f       	mov	r30, r18
    1080:	ff 27       	eor	r31, r31
    1082:	ea 5f       	subi	r30, 0xFA	; 250
    1084:	fe 4f       	sbci	r31, 0xFE	; 254
    1086:	10 82       	st	Z, r1
	StrStart   = 0;
    1088:	10 92 35 01 	sts	0x0135, r1
	StrEnd     = LoadB;	
    108c:	20 93 36 01 	sts	0x0136, r18
	DelayCount = LCD_DELAYCOUNT_DEFAULT;
    1090:	8a e0       	ldi	r24, 0x0A	; 10
    1092:	80 93 39 01 	sts	0x0139, r24

	UpdateLCD  = TRUE;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 3a 01 	sts	0x013A, r24
    109c:	08 95       	ret

0000109e <LCD_puts_f>:
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	64 97       	sbiw	r28, 0x14	; 20
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	bc 01       	movw	r22, r24
    10b4:	ce 01       	movw	r24, r28
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	0e 94 1b 1a 	call	0x3436 <strcpy_P>
    10bc:	ce 01       	movw	r24, r28
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	0e 94 19 08 	call	0x1032 <LCD_puts>
    10c4:	64 96       	adiw	r28, 0x14	; 20
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <LCD_WriteChar>:
}

void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit)
{
    10d6:	e8 2f       	mov	r30, r24
	uint16_t SegData  = 0x00;
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1));
    10dc:	86 2f       	mov	r24, r22
    10de:	86 95       	lsr	r24
    10e0:	a8 2f       	mov	r26, r24
    10e2:	bb 27       	eor	r27, r27
    10e4:	af 5d       	subi	r26, 0xDF	; 223
    10e6:	be 4f       	sbci	r27, 0xFE	; 254

	if (Byte != 0xFF)
    10e8:	ef 3f       	cpi	r30, 0xFF	; 255
    10ea:	39 f0       	breq	.+14     	; 0x10fa <LCD_WriteChar+0x24>
	  SegData = pgm_read_word(&LCD_SegTable[Byte]);	
    10ec:	ff 27       	eor	r31, r31
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	ee 5e       	subi	r30, 0xEE	; 238
    10f4:	fc 4f       	sbci	r31, 0xFC	; 252
    10f6:	25 91       	lpm	r18, Z+
    10f8:	34 91       	lpm	r19, Z
    10fa:	77 27       	eor	r23, r23
    10fc:	61 70       	andi	r22, 0x01	; 1
    10fe:	70 70       	andi	r23, 0x00	; 0
    1100:	43 e0       	ldi	r20, 0x03	; 3

	for (uint8_t BNib = 0; BNib < 4; BNib++)
	{
		uint8_t Mask          = 0xF0;
    1102:	50 ef       	ldi	r21, 0xF0	; 240
		uint8_t MaskedSegData = (SegData & 0x0000F);
    1104:	92 2f       	mov	r25, r18
    1106:	9f 70       	andi	r25, 0x0F	; 15
	
		if (Digit & 0x01)
    1108:	61 15       	cp	r22, r1
    110a:	71 05       	cpc	r23, r1
    110c:	19 f0       	breq	.+6      	; 0x1114 <LCD_WriteChar+0x3e>
		{
			Mask = 0x0F;
    110e:	5f e0       	ldi	r21, 0x0F	; 15
			MaskedSegData <<= 4;
    1110:	92 95       	swap	r25
    1112:	90 7f       	andi	r25, 0xF0	; 240
		}
		
		*BuffPtr = ((*BuffPtr & Mask) | MaskedSegData);
    1114:	8c 91       	ld	r24, X
    1116:	85 23       	and	r24, r21
    1118:	89 2b       	or	r24, r25
    111a:	8c 93       	st	X, r24

		SegData >>= 4;
    111c:	84 e0       	ldi	r24, 0x04	; 4
    111e:	36 95       	lsr	r19
    1120:	27 95       	ror	r18
    1122:	8a 95       	dec	r24
    1124:	e1 f7       	brne	.-8      	; 0x111e <LCD_WriteChar+0x48>
		BuffPtr  += 5;
    1126:	15 96       	adiw	r26, 0x05	; 5
    1128:	41 50       	subi	r20, 0x01	; 1
    112a:	47 ff       	sbrs	r20, 7
    112c:	ea cf       	rjmp	.-44     	; 0x1102 <LCD_WriteChar+0x2c>
    112e:	08 95       	ret

00001130 <__vector_22>:
	}
}

ISR(LCD_vect, ISR_NOBLOCK)
{
    1130:	78 94       	sei
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	11 24       	eor	r1, r1
    113c:	2f 93       	push	r18
    113e:	3f 93       	push	r19
    1140:	4f 93       	push	r20
    1142:	5f 93       	push	r21
    1144:	6f 93       	push	r22
    1146:	7f 93       	push	r23
    1148:	8f 93       	push	r24
    114a:	9f 93       	push	r25
    114c:	af 93       	push	r26
    114e:	bf 93       	push	r27
    1150:	cf 93       	push	r28
    1152:	ef 93       	push	r30
    1154:	ff 93       	push	r31
	if (ScrollMode)
    1156:	80 91 37 01 	lds	r24, 0x0137
    115a:	88 23       	and	r24, r24
    115c:	99 f0       	breq	.+38     	; 0x1184 <__vector_22+0x54>
	{
		if (DelayCount)
    115e:	80 91 39 01 	lds	r24, 0x0139
    1162:	88 23       	and	r24, r24
    1164:	21 f0       	breq	.+8      	; 0x116e <__vector_22+0x3e>
		{
			DelayCount--;
    1166:	81 50       	subi	r24, 0x01	; 1
    1168:	80 93 39 01 	sts	0x0139, r24
    116c:	0b c0       	rjmp	.+22     	; 0x1184 <__vector_22+0x54>
		}
		else
		{
			if (!(ScrollCount))
    116e:	80 91 38 01 	lds	r24, 0x0138
    1172:	88 23       	and	r24, r24
    1174:	21 f4       	brne	.+8      	; 0x117e <__vector_22+0x4e>
			  UpdateLCD = TRUE;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	80 93 3a 01 	sts	0x013A, r24
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <__vector_22+0x54>
			else
			  ScrollCount--;
    117e:	81 50       	subi	r24, 0x01	; 1
    1180:	80 93 38 01 	sts	0x0138, r24
		}
	}

	if (UpdateLCD)
    1184:	80 91 3a 01 	lds	r24, 0x013A
    1188:	88 23       	and	r24, r24
    118a:	39 f1       	breq	.+78     	; 0x11da <__vector_22+0xaa>
	{
		for (uint8_t Character = 0; Character < 6; Character++)
    118c:	c0 e0       	ldi	r28, 0x00	; 0
		{
			uint8_t Byte = (StrStart + Character);
    118e:	80 91 35 01 	lds	r24, 0x0135
    1192:	8c 0f       	add	r24, r28

			if (Byte >= StrEnd)
    1194:	90 91 36 01 	lds	r25, 0x0136
    1198:	e8 2f       	mov	r30, r24
    119a:	ff 27       	eor	r31, r31
    119c:	89 17       	cp	r24, r25
    119e:	10 f0       	brcs	.+4      	; 0x11a4 <__vector_22+0x74>
			  Byte = TextBuffer[Byte - StrEnd];
    11a0:	e9 1b       	sub	r30, r25
    11a2:	f1 09       	sbc	r31, r1
			else
			  Byte = TextBuffer[Byte];
    11a4:	ea 5f       	subi	r30, 0xFA	; 250
    11a6:	fe 4f       	sbci	r31, 0xFE	; 254
    11a8:	80 81       	ld	r24, Z
			
			LCD_WriteChar(Byte, Character);
    11aa:	6c 2f       	mov	r22, r28
    11ac:	0e 94 6b 08 	call	0x10d6 <LCD_WriteChar>
    11b0:	cf 5f       	subi	r28, 0xFF	; 255
    11b2:	c6 30       	cpi	r28, 0x06	; 6
    11b4:	60 f3       	brcs	.-40     	; 0x118e <__vector_22+0x5e>
		}
		
		if (StrStart++ == StrEnd)
    11b6:	80 91 35 01 	lds	r24, 0x0135
    11ba:	98 2f       	mov	r25, r24
    11bc:	8f 5f       	subi	r24, 0xFF	; 255
    11be:	80 93 35 01 	sts	0x0135, r24
    11c2:	80 91 36 01 	lds	r24, 0x0136
    11c6:	98 17       	cp	r25, r24
    11c8:	19 f4       	brne	.+6      	; 0x11d0 <__vector_22+0xa0>
		  StrStart = 1;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 35 01 	sts	0x0135, r24
		
		ScrollCount = LCD_SCROLLCOUNT_DEFAULT;
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	80 93 38 01 	sts	0x0138, r24
		UpdateLCD = FALSE;
    11d6:	10 92 3a 01 	sts	0x013A, r1
    11da:	ac ee       	ldi	r26, 0xEC	; 236
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e1 e2       	ldi	r30, 0x21	; 33
    11e0:	f1 e0       	ldi	r31, 0x01	; 1
    11e2:	93 e1       	ldi	r25, 0x13	; 19
	}

	for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++)
	  *(pLCDREG + LCDChar) = SegBuffer[LCDChar];
    11e4:	81 91       	ld	r24, Z+
    11e6:	8d 93       	st	X+, r24
    11e8:	91 50       	subi	r25, 0x01	; 1
    11ea:	97 ff       	sbrs	r25, 7
    11ec:	fb cf       	rjmp	.-10     	; 0x11e4 <__vector_22+0xb4>
    11ee:	ff 91       	pop	r31
    11f0:	ef 91       	pop	r30
    11f2:	cf 91       	pop	r28
    11f4:	bf 91       	pop	r27
    11f6:	af 91       	pop	r26
    11f8:	9f 91       	pop	r25
    11fa:	8f 91       	pop	r24
    11fc:	7f 91       	pop	r23
    11fe:	6f 91       	pop	r22
    1200:	5f 91       	pop	r21
    1202:	4f 91       	pop	r20
    1204:	3f 91       	pop	r19
    1206:	2f 91       	pop	r18
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <USART_Init>:
*****************************************************************************/
void USART_Init(void)
{
    // Set baud rate
    UBRRH = (uint8_t)(USART_BAUDVALUE >> 8);
    1212:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = (uint8_t)(USART_BAUDVALUE);
    1216:	87 e0       	ldi	r24, 0x07	; 7
    1218:	80 93 c4 00 	sts	0x00C4, r24

    // Double speed
	UCSRA = (USART_DOUBLESPEED << U2X);
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	80 93 c0 00 	sts	0x00C0, r24

    // Enable recieve complete interrupt
	UCSRB = (1 << RXCIE);
    1222:	80 e8       	ldi	r24, 0x80	; 128
    1224:	80 93 c1 00 	sts	0x00C1, r24
	 
    // Async. mode, 8N1
    UCSRC = (3 << UCSZ0);
    1228:	86 e0       	ldi	r24, 0x06	; 6
    122a:	80 93 c2 00 	sts	0x00C2, r24
	 
	 // Initalise ringbuffer
	BUFF_InitialiseBuffer();
    122e:	0e 94 9f 0b 	call	0x173e <BUFF_InitialiseBuffer>
    1232:	08 95       	ret

00001234 <USART_Tx>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_Tx(const char data)
{
    1234:	98 2f       	mov	r25, r24
    while (!(UCSRA & (1 << UDRE)));
    1236:	80 91 c0 00 	lds	r24, 0x00C0
    123a:	85 ff       	sbrs	r24, 5
    123c:	fc cf       	rjmp	.-8      	; 0x1236 <USART_Tx+0x2>
    UDR = data;
    123e:	90 93 c6 00 	sts	0x00C6, r25
    1242:	08 95       	ret

00001244 <USART_Rx>:
}

/*****************************************************************************
*
*   Function name : Usart_Rx
*
*   Returns :       char: byte received
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART
*
*****************************************************************************/
char USART_Rx(void)
{
    while (!(BuffElements) && !(PacketTimeOut)) {};
    1244:	80 91 b3 02 	lds	r24, 0x02B3
    1248:	88 23       	and	r24, r24
    124a:	21 f4       	brne	.+8      	; 0x1254 <USART_Rx+0x10>
    124c:	80 91 3f 01 	lds	r24, 0x013F
    1250:	88 23       	and	r24, r24
    1252:	c1 f3       	breq	.-16     	; 0x1244 <USART_Rx>
    return BUFF_GetBuffByte();
    1254:	0e 94 ac 0b 	call	0x1758 <BUFF_GetBuffByte>
}
    1258:	99 27       	eor	r25, r25
    125a:	08 95       	ret

0000125c <SPI_SPIInit>:
// ======================================================================================

void SPI_SPIInit(void)
{
	PRR &= ~(1 << PRSPI);              // Enable the SPI system by clearing the power save register SPI disable bit
    125c:	80 91 64 00 	lds	r24, 0x0064
    1260:	8b 7f       	andi	r24, 0xFB	; 251
    1262:	80 93 64 00 	sts	0x0064, r24

	// Master, Sample falling edge (setup rising), Fosc/2 speed (8Mhz/2 = 4MHz)
	SPSR = (1 << SPI2X);
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	8d bd       	out	0x2d, r24	; 45
	SPCR = ((1 << SPE) | (1 << MSTR) | (1 << CPHA) | (1 << CPOL));
    126a:	8c e5       	ldi	r24, 0x5C	; 92
    126c:	8c bd       	out	0x2c, r24	; 44
    126e:	08 95       	ret

00001270 <SPI_SPITransmit>:
}

uint8_t SPI_SPITransmit(const uint8_t Data)
{
	SPDR = Data;                       // Loading a byte into the register starts the transmission
    1270:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));    // Wait until transmission completed
    1272:	0d b4       	in	r0, 0x2d	; 45
    1274:	07 fe       	sbrs	r0, 7
    1276:	fd cf       	rjmp	.-6      	; 0x1272 <SPI_SPITransmit+0x2>
	return SPDR;
    1278:	8e b5       	in	r24, 0x2e	; 46
}
    127a:	99 27       	eor	r25, r25
    127c:	08 95       	ret

0000127e <SPI_SPITransmitWord>:

uint8_t SPI_SPITransmitWord(const uint16_t Data)
{
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	8c 01       	movw	r16, r24
	SPI_SPITransmit((uint8_t)(Data >> 8));
    1284:	81 2f       	mov	r24, r17
    1286:	99 27       	eor	r25, r25
    1288:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
	return SPI_SPITransmit((uint8_t)Data);
    128c:	80 2f       	mov	r24, r16
    128e:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
}
    1292:	99 27       	eor	r25, r25
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	08 95       	ret

0000129a <__vector_17>:
 *  have to stop the timer tick.
 *  For all modes the USIDR contents are stored and flags are updated.
 */
ISR(USI_OVERFLOW_vect, ISR_BLOCK)
{
    129a:	1f 92       	push	r1
    129c:	0f 92       	push	r0
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	0f 92       	push	r0
    12a2:	11 24       	eor	r1, r1
    12a4:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	TIMSK0 &= ~(1<<OCIE0A);
    12a6:	80 91 6e 00 	lds	r24, 0x006E
    12aa:	8d 7f       	andi	r24, 0xFD	; 253
    12ac:	80 93 6e 00 	sts	0x006E, r24
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
    12b0:	80 e4       	ldi	r24, 0x40	; 64
    12b2:	80 93 b9 00 	sts	0x00B9, r24
	TransferComplete = 1;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 93 63 02 	sts	0x0263, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
    12bc:	80 91 ba 00 	lds	r24, 0x00BA
    12c0:	80 93 64 02 	sts	0x0264, r24
    12c4:	8f 91       	pop	r24
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <USI_SPISetSpeed>:
}



/*! \brief  Initialize USI as SPI master.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from slave to master mode.
 *  Note that the stored USIDR value is cleared.
 *
 */
void USI_SPIInitMaster(const uint8_t Freq)
{
	// Configure port directions.
 	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN);  // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                       // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                        // Pull-ups.
	USI_OUT_REG &= ~(1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Pull-ups.
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = USI_CONTROL_REG_FLAGS;

	// Set the compare and prescaler for the requested frequency:
	USI_SPISetSpeed(Freq);
	
	// Init driver status register.
	TransferComplete = 0;
	
	storedUSIDR = 0;
}

void USI_SPIOff(void)
{
	USI_DIR_REG &= ~((1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN));                        // Inputs.
	USI_OUT_REG &= ~((1<<USI_DATAIN_PIN)  | (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN)); // Pull-ups.
	DDRF  &= ~(1 << 6);
	PORTF &= ~(1 << 6);
	
	USI_STOPUSITIMER();
}

/*! \brief  Put one byte on bus.
 *
 *  Use this function like you would write to the SPDR register in the native SPI module.
 *  Calling this function in master mode starts a transfer, while in slave mode, a
 *  byte will be prepared for the next transfer initiated by the master device.
 *  If a transfer is in progress, this function will set the write collision flag
 *  and return without altering the data registers.
 *
 *  \returns  Value returned by slave.
 */
uint8_t USI_SPITransmit(uint8_t val)
{
	// Reinit flags.
	TransferComplete = 0;

	// Put data in USI data register.
	USIDR = val;
	
	TIFR0  |= (1<<OCF0A);  // Clear compare match flag.
	TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.

	// Clear the timer 0 value
	TCNT0 = 0;

	while (!(TransferComplete));

	return storedUSIDR;
}

uint8_t USI_SPITransmitWord(const uint16_t val )
{
	USI_SPITransmit((uint8_t)(val >> 8));
	return USI_SPITransmit((uint8_t)val);
}

void USI_SPIToggleClock(void)
{
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);	
}

void USI_SPISetSpeed(const uint8_t Freq)
{
    12d0:	48 2f       	mov	r20, r24
	for (uint8_t MatchIndex = 0; MatchIndex < USI_PRESET_SPEEDS; MatchIndex++)
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	6f e7       	ldi	r22, 0x7F	; 127
    12d6:	73 e0       	ldi	r23, 0x03	; 3
    12d8:	9b 01       	movw	r18, r22
    12da:	21 50       	subi	r18, 0x01	; 1
    12dc:	30 40       	sbci	r19, 0x00	; 0
	{
		if ((pgm_read_byte(&USIPSValues[MatchIndex][0]) == Freq) || (MatchIndex == (USI_PRESET_SPEEDS - 1)))
    12de:	f9 01       	movw	r30, r18
    12e0:	84 91       	lpm	r24, Z
    12e2:	84 17       	cp	r24, r20
    12e4:	11 f0       	breq	.+4      	; 0x12ea <USI_SPISetSpeed+0x1a>
    12e6:	93 30       	cpi	r25, 0x03	; 3
    12e8:	31 f4       	brne	.+12     	; 0x12f6 <USI_SPISetSpeed+0x26>
		{
			// Init Output Compare Register.
			OCR0A = pgm_read_byte(&USIPSValues[MatchIndex][1]);
    12ea:	fb 01       	movw	r30, r22
    12ec:	84 91       	lpm	r24, Z
    12ee:	87 bd       	out	0x27, r24	; 39

			// Enable 'Clear Timer on Compare match' and set prescaler, which starts the timer
			TCCR0A = ((1<<WGM01) | TC0_PS_1);
    12f0:	89 e0       	ldi	r24, 0x09	; 9
    12f2:	84 bd       	out	0x24, r24	; 36
				
			return;
    12f4:	08 95       	ret
    12f6:	9f 5f       	subi	r25, 0xFF	; 255
    12f8:	2e 5f       	subi	r18, 0xFE	; 254
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	6e 5f       	subi	r22, 0xFE	; 254
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	94 30       	cpi	r25, 0x04	; 4
    1302:	68 f3       	brcs	.-38     	; 0x12de <USI_SPISetSpeed+0xe>
    1304:	08 95       	ret

00001306 <USI_SPIInitMaster>:
    1306:	9d b1       	in	r25, 0x0d	; 13
    1308:	90 65       	ori	r25, 0x50	; 80
    130a:	9d b9       	out	0x0d, r25	; 13
    130c:	6d 98       	cbi	0x0d, 5	; 13
    130e:	75 9a       	sbi	0x0e, 5	; 14
    1310:	76 98       	cbi	0x0e, 6	; 14
    1312:	9a e5       	ldi	r25, 0x5A	; 90
    1314:	90 93 b8 00 	sts	0x00B8, r25
    1318:	0e 94 68 09 	call	0x12d0 <USI_SPISetSpeed>
    131c:	10 92 63 02 	sts	0x0263, r1
    1320:	10 92 64 02 	sts	0x0264, r1
    1324:	08 95       	ret

00001326 <USI_SPIOff>:
    1326:	8d b1       	in	r24, 0x0d	; 13
    1328:	8f 7a       	andi	r24, 0xAF	; 175
    132a:	8d b9       	out	0x0d, r24	; 13
    132c:	8e b1       	in	r24, 0x0e	; 14
    132e:	8f 78       	andi	r24, 0x8F	; 143
    1330:	8e b9       	out	0x0e, r24	; 14
    1332:	86 98       	cbi	0x10, 6	; 16
    1334:	8e 98       	cbi	0x11, 6	; 17
    1336:	14 bc       	out	0x24, r1	; 36
    1338:	08 95       	ret

0000133a <USI_SPITransmit>:
    133a:	10 92 63 02 	sts	0x0263, r1
    133e:	80 93 ba 00 	sts	0x00BA, r24
    1342:	a9 9a       	sbi	0x15, 1	; 21
    1344:	80 91 6e 00 	lds	r24, 0x006E
    1348:	82 60       	ori	r24, 0x02	; 2
    134a:	80 93 6e 00 	sts	0x006E, r24
    134e:	16 bc       	out	0x26, r1	; 38
    1350:	80 91 63 02 	lds	r24, 0x0263
    1354:	88 23       	and	r24, r24
    1356:	e1 f3       	breq	.-8      	; 0x1350 <USI_SPITransmit+0x16>
    1358:	80 91 64 02 	lds	r24, 0x0264
    135c:	99 27       	eor	r25, r25
    135e:	08 95       	ret

00001360 <USI_SPITransmitWord>:
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	8c 01       	movw	r16, r24
    1366:	81 2f       	mov	r24, r17
    1368:	99 27       	eor	r25, r25
    136a:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    136e:	80 2f       	mov	r24, r16
    1370:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    1374:	99 27       	eor	r25, r25
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	08 95       	ret

0000137c <USI_SPIToggleClock>:
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    1382:	80 91 b8 00 	lds	r24, 0x00B8
    1386:	81 60       	ori	r24, 0x01	; 1
    1388:	80 93 b8 00 	sts	0x00B8, r24
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    1392:	80 91 b8 00 	lds	r24, 0x00B8
    1396:	81 60       	ori	r24, 0x01	; 1
    1398:	80 93 b8 00 	sts	0x00B8, r24
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    13a2:	08 95       	ret

000013a4 <DF_EnableDataflash>:
	DF_WaitWhileBusy();
}

void DF_EnableDataflash(const uint8_t Enabled)
{
    13a4:	90 91 65 02 	lds	r25, 0x0265
	if (Enabled == TRUE)
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	31 f4       	brne	.+12     	; 0x13b8 <DF_EnableDataflash+0x14>
	{
		if (UseExernalDF == TRUE)
    13ac:	91 30       	cpi	r25, 0x01	; 1
    13ae:	11 f4       	brne	.+4      	; 0x13b4 <DF_EnableDataflash+0x10>
		  MAIN_ResetCSLine(MAIN_RESETCS_EXTDFACTIVE);
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	05 c0       	rjmp	.+10     	; 0x13be <DF_EnableDataflash+0x1a>
		else
		  PORTB &= ~(1 << 0);
    13b4:	28 98       	cbi	0x05, 0	; 5
    13b6:	08 95       	ret
	}
	else
	{
		if (UseExernalDF == TRUE)
    13b8:	91 30       	cpi	r25, 0x01	; 1
    13ba:	21 f4       	brne	.+8      	; 0x13c4 <DF_EnableDataflash+0x20>
		  MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE);
    13bc:	89 2f       	mov	r24, r25
    13be:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
    13c2:	08 95       	ret
		else
		  PORTB |= (1 << 0);
    13c4:	28 9a       	sbi	0x05, 0	; 5
    13c6:	08 95       	ret

000013c8 <DF_ReadBufferByte>:
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	7c 01       	movw	r14, r24
    13d2:	00 91 00 01 	lds	r16, 0x0100
    13d6:	10 91 01 01 	lds	r17, 0x0101
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    13e6:	84 e5       	ldi	r24, 0x54	; 84
    13e8:	f8 01       	movw	r30, r16
    13ea:	09 95       	icall
    13ec:	8f 2d       	mov	r24, r15
    13ee:	99 27       	eor	r25, r25
    13f0:	f8 01       	movw	r30, r16
    13f2:	09 95       	icall
    13f4:	8e 2d       	mov	r24, r14
    13f6:	f8 01       	movw	r30, r16
    13f8:	09 95       	icall
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	f8 01       	movw	r30, r16
    13fe:	09 95       	icall
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	f8 01       	movw	r30, r16
    1404:	09 95       	icall
    1406:	99 27       	eor	r25, r25
    1408:	1f 91       	pop	r17
    140a:	0f 91       	pop	r16
    140c:	ff 90       	pop	r15
    140e:	ef 90       	pop	r14
    1410:	08 95       	ret

00001412 <DF_ContinuousReadEnable>:
    1412:	ef 92       	push	r14
    1414:	ff 92       	push	r15
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	8c 01       	movw	r16, r24
    1420:	7b 01       	movw	r14, r22
    1422:	c0 91 00 01 	lds	r28, 0x0100
    1426:	d0 91 01 01 	lds	r29, 0x0101
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1436:	88 e6       	ldi	r24, 0x68	; 104
    1438:	fe 01       	movw	r30, r28
    143a:	09 95       	icall
    143c:	8a b5       	in	r24, 0x2a	; 42
    143e:	98 01       	movw	r18, r16
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DF_ContinuousReadEnable+0x34>
    1442:	36 95       	lsr	r19
    1444:	27 95       	ror	r18
    1446:	8a 95       	dec	r24
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DF_ContinuousReadEnable+0x30>
    144a:	c9 01       	movw	r24, r18
    144c:	fe 01       	movw	r30, r28
    144e:	09 95       	icall
    1450:	8b b5       	in	r24, 0x2b	; 43
    1452:	98 01       	movw	r18, r16
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DF_ContinuousReadEnable+0x48>
    1456:	22 0f       	add	r18, r18
    1458:	33 1f       	adc	r19, r19
    145a:	8a 95       	dec	r24
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <DF_ContinuousReadEnable+0x44>
    145e:	8f 2d       	mov	r24, r15
    1460:	99 27       	eor	r25, r25
    1462:	82 0f       	add	r24, r18
    1464:	fe 01       	movw	r30, r28
    1466:	09 95       	icall
    1468:	8e 2d       	mov	r24, r14
    146a:	fe 01       	movw	r30, r28
    146c:	09 95       	icall
    146e:	03 e0       	ldi	r16, 0x03	; 3
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	fe 01       	movw	r30, r28
    1474:	09 95       	icall
    1476:	01 50       	subi	r16, 0x01	; 1
    1478:	07 ff       	sbrs	r16, 7
    147a:	fa cf       	rjmp	.-12     	; 0x1470 <DF_ContinuousReadEnable+0x5e>
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	ff 90       	pop	r15
    1486:	ef 90       	pop	r14
    1488:	08 95       	ret

0000148a <DF_BufferWriteEnable>:
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	7c 01       	movw	r14, r24
    1494:	00 91 00 01 	lds	r16, 0x0100
    1498:	10 91 01 01 	lds	r17, 0x0101
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    14a8:	84 e8       	ldi	r24, 0x84	; 132
    14aa:	f8 01       	movw	r30, r16
    14ac:	09 95       	icall
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	f8 01       	movw	r30, r16
    14b2:	09 95       	icall
    14b4:	8f 2d       	mov	r24, r15
    14b6:	99 27       	eor	r25, r25
    14b8:	f8 01       	movw	r30, r16
    14ba:	09 95       	icall
    14bc:	8e 2d       	mov	r24, r14
    14be:	f8 01       	movw	r30, r16
    14c0:	09 95       	icall
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	08 95       	ret

000014cc <DF_WaitWhileBusy>:
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	c0 91 00 01 	lds	r28, 0x0100
    14d4:	d0 91 01 01 	lds	r29, 0x0101
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    14e4:	87 e5       	ldi	r24, 0x57	; 87
    14e6:	fe 01       	movw	r30, r28
    14e8:	09 95       	icall
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	fe 01       	movw	r30, r28
    14ee:	09 95       	icall
    14f0:	88 23       	and	r24, r24
    14f2:	dc f7       	brge	.-10     	; 0x14ea <DF_WaitWhileBusy+0x1e>
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <DF_EraseBlock>:
    14fa:	ef 92       	push	r14
    14fc:	ff 92       	push	r15
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	7c 01       	movw	r14, r24
    1504:	00 91 00 01 	lds	r16, 0x0100
    1508:	10 91 01 01 	lds	r17, 0x0101
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1518:	80 e5       	ldi	r24, 0x50	; 80
    151a:	f8 01       	movw	r30, r16
    151c:	09 95       	icall
    151e:	8f 2d       	mov	r24, r15
    1520:	99 27       	eor	r25, r25
    1522:	f8 01       	movw	r30, r16
    1524:	09 95       	icall
    1526:	8e 2d       	mov	r24, r14
    1528:	f8 01       	movw	r30, r16
    152a:	09 95       	icall
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	f8 01       	movw	r30, r16
    1530:	09 95       	icall
    1532:	0e 94 66 0a 	call	0x14cc <DF_WaitWhileBusy>
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	08 95       	ret

00001540 <DF_CopyFlashPageToBuffer>:
    1540:	ef 92       	push	r14
    1542:	ff 92       	push	r15
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	7c 01       	movw	r14, r24
    154a:	00 91 00 01 	lds	r16, 0x0100
    154e:	10 91 01 01 	lds	r17, 0x0101
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    155e:	83 e5       	ldi	r24, 0x53	; 83
    1560:	f8 01       	movw	r30, r16
    1562:	09 95       	icall
    1564:	8a b5       	in	r24, 0x2a	; 42
    1566:	97 01       	movw	r18, r14
    1568:	02 c0       	rjmp	.+4      	; 0x156e <DF_CopyFlashPageToBuffer+0x2e>
    156a:	36 95       	lsr	r19
    156c:	27 95       	ror	r18
    156e:	8a 95       	dec	r24
    1570:	e2 f7       	brpl	.-8      	; 0x156a <DF_CopyFlashPageToBuffer+0x2a>
    1572:	c9 01       	movw	r24, r18
    1574:	f8 01       	movw	r30, r16
    1576:	09 95       	icall
    1578:	8b b5       	in	r24, 0x2b	; 43
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DF_CopyFlashPageToBuffer+0x40>
    157c:	ee 0c       	add	r14, r14
    157e:	ff 1c       	adc	r15, r15
    1580:	8a 95       	dec	r24
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DF_CopyFlashPageToBuffer+0x3c>
    1584:	c7 01       	movw	r24, r14
    1586:	f8 01       	movw	r30, r16
    1588:	09 95       	icall
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	f8 01       	movw	r30, r16
    158e:	09 95       	icall
    1590:	0e 94 66 0a 	call	0x14cc <DF_WaitWhileBusy>
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	ff 90       	pop	r15
    159a:	ef 90       	pop	r14
    159c:	08 95       	ret

0000159e <DF_CopyBufferToFlashPage>:
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	7c 01       	movw	r14, r24
    15a8:	00 91 00 01 	lds	r16, 0x0100
    15ac:	10 91 01 01 	lds	r17, 0x0101
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    15bc:	83 e8       	ldi	r24, 0x83	; 131
    15be:	f8 01       	movw	r30, r16
    15c0:	09 95       	icall
    15c2:	8a b5       	in	r24, 0x2a	; 42
    15c4:	97 01       	movw	r18, r14
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DF_CopyBufferToFlashPage+0x2e>
    15c8:	36 95       	lsr	r19
    15ca:	27 95       	ror	r18
    15cc:	8a 95       	dec	r24
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DF_CopyBufferToFlashPage+0x2a>
    15d0:	c9 01       	movw	r24, r18
    15d2:	f8 01       	movw	r30, r16
    15d4:	09 95       	icall
    15d6:	8b b5       	in	r24, 0x2b	; 43
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <DF_CopyBufferToFlashPage+0x40>
    15da:	ee 0c       	add	r14, r14
    15dc:	ff 1c       	adc	r15, r15
    15de:	8a 95       	dec	r24
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <DF_CopyBufferToFlashPage+0x3c>
    15e2:	c7 01       	movw	r24, r14
    15e4:	f8 01       	movw	r30, r16
    15e6:	09 95       	icall
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	f8 01       	movw	r30, r16
    15ec:	09 95       	icall
    15ee:	0e 94 66 0a 	call	0x14cc <DF_WaitWhileBusy>
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	ff 90       	pop	r15
    15f8:	ef 90       	pop	r14
    15fa:	08 95       	ret

000015fc <DF_GetChipCharacteristics>:
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	00 91 00 01 	lds	r16, 0x0100
    1604:	10 91 01 01 	lds	r17, 0x0101
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1614:	87 e5       	ldi	r24, 0x57	; 87
    1616:	f8 01       	movw	r30, r16
    1618:	09 95       	icall
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	f8 01       	movw	r30, r16
    161e:	09 95       	icall
    1620:	99 27       	eor	r25, r25
    1622:	88 73       	andi	r24, 0x38	; 56
    1624:	90 70       	andi	r25, 0x00	; 0
    1626:	43 e0       	ldi	r20, 0x03	; 3
    1628:	95 95       	asr	r25
    162a:	87 95       	ror	r24
    162c:	4a 95       	dec	r20
    162e:	e1 f7       	brne	.-8      	; 0x1628 <DF_GetChipCharacteristics+0x2c>
    1630:	99 27       	eor	r25, r25
    1632:	fc 01       	movw	r30, r24
    1634:	ea 54       	subi	r30, 0x4A	; 74
    1636:	fc 4f       	sbci	r31, 0xFC	; 252
    1638:	44 91       	lpm	r20, Z
    163a:	40 93 68 02 	sts	0x0268, r20
    163e:	9c 01       	movw	r18, r24
    1640:	28 0f       	add	r18, r24
    1642:	39 1f       	adc	r19, r25
    1644:	f9 01       	movw	r30, r18
    1646:	ea 55       	subi	r30, 0x5A	; 90
    1648:	fc 4f       	sbci	r31, 0xFC	; 252
    164a:	85 91       	lpm	r24, Z+
    164c:	94 91       	lpm	r25, Z
    164e:	90 93 6a 02 	sts	0x026A, r25
    1652:	80 93 69 02 	sts	0x0269, r24
    1656:	f9 01       	movw	r30, r18
    1658:	ea 56       	subi	r30, 0x6A	; 106
    165a:	fc 4f       	sbci	r31, 0xFC	; 252
    165c:	85 91       	lpm	r24, Z+
    165e:	94 91       	lpm	r25, Z
    1660:	90 93 6c 02 	sts	0x026C, r25
    1664:	80 93 6b 02 	sts	0x026B, r24
    1668:	80 e1       	ldi	r24, 0x10	; 16
    166a:	84 1b       	sub	r24, r20
    166c:	8a bd       	out	0x2a, r24	; 42
    166e:	48 50       	subi	r20, 0x08	; 8
    1670:	4b bd       	out	0x2b, r20	; 43
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	08 95       	ret

00001678 <DF_CheckCorrectOnboardChip>:
    1678:	0e 94 fe 0a 	call	0x15fc <DF_GetChipCharacteristics>
    167c:	80 91 6b 02 	lds	r24, 0x026B
    1680:	90 91 6c 02 	lds	r25, 0x026C
    1684:	80 50       	subi	r24, 0x00	; 0
    1686:	98 40       	sbci	r25, 0x08	; 8
    1688:	61 f0       	breq	.+24     	; 0x16a2 <DF_CheckCorrectOnboardChip+0x2a>
    168a:	80 91 64 00 	lds	r24, 0x0064
    168e:	84 60       	ori	r24, 0x04	; 4
    1690:	80 93 64 00 	sts	0x0064, r24
    1694:	86 e8       	ldi	r24, 0x86	; 134
    1696:	93 e0       	ldi	r25, 0x03	; 3
    1698:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	08 95       	ret
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	08 95       	ret

000016a8 <__vector_13>:

// ======================================================================================

ISR(USART0_RX_vect, ISR_BLOCK)
{
    16a8:	1f 92       	push	r1
    16aa:	0f 92       	push	r0
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	0f 92       	push	r0
    16b0:	11 24       	eor	r1, r1
    16b2:	2f 93       	push	r18
    16b4:	3f 93       	push	r19
    16b6:	4f 93       	push	r20
    16b8:	5f 93       	push	r21
    16ba:	6f 93       	push	r22
    16bc:	7f 93       	push	r23
    16be:	8f 93       	push	r24
    16c0:	9f 93       	push	r25
    16c2:	af 93       	push	r26
    16c4:	bf 93       	push	r27
    16c6:	ef 93       	push	r30
    16c8:	ff 93       	push	r31
	if (BuffElements == BUFF_BUFFLEN)     // Buffer full
    16ca:	80 91 b3 02 	lds	r24, 0x02B3
    16ce:	80 34       	cpi	r24, 0x40	; 64
    16d0:	29 f4       	brne	.+10     	; 0x16dc <__vector_13+0x34>
	{
		MAIN_ShowError(PSTR("BUFF OVERFLOW"));
    16d2:	8e eb       	ldi	r24, 0xBE	; 190
    16d4:	93 e0       	ldi	r25, 0x03	; 3
    16d6:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
		return;
    16da:	20 c0       	rjmp	.+64     	; 0x171c <__vector_13+0x74>
	}
		
	*StoreLoc = UDR;                      // Store the data
    16dc:	e0 91 af 02 	lds	r30, 0x02AF
    16e0:	f0 91 b0 02 	lds	r31, 0x02B0
    16e4:	80 91 c6 00 	lds	r24, 0x00C6
    16e8:	80 83       	st	Z, r24

	StoreLoc++;                           // Increment the IN pointer to the next element
    16ea:	40 91 af 02 	lds	r20, 0x02AF
    16ee:	50 91 b0 02 	lds	r21, 0x02B0
    16f2:	9a 01       	movw	r18, r20
    16f4:	2f 5f       	subi	r18, 0xFF	; 255
    16f6:	3f 4f       	sbci	r19, 0xFF	; 255
    16f8:	30 93 b0 02 	sts	0x02B0, r19
    16fc:	20 93 af 02 	sts	0x02AF, r18
	BuffElements++;                       // Increment the total elements variable
    1700:	80 91 b3 02 	lds	r24, 0x02B3
    1704:	8f 5f       	subi	r24, 0xFF	; 255
    1706:	80 93 b3 02 	sts	0x02B3, r24

	if (StoreLoc == (BuffType*)&RingBuffer[BUFF_BUFFLEN])
    170a:	2f 5a       	subi	r18, 0xAF	; 175
    170c:	32 40       	sbci	r19, 0x02	; 2
    170e:	31 f4       	brne	.+12     	; 0x171c <__vector_13+0x74>
		StoreLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    1710:	4f 53       	subi	r20, 0x3F	; 63
    1712:	50 40       	sbci	r21, 0x00	; 0
    1714:	50 93 b0 02 	sts	0x02B0, r21
    1718:	40 93 af 02 	sts	0x02AF, r20
    171c:	ff 91       	pop	r31
    171e:	ef 91       	pop	r30
    1720:	bf 91       	pop	r27
    1722:	af 91       	pop	r26
    1724:	9f 91       	pop	r25
    1726:	8f 91       	pop	r24
    1728:	7f 91       	pop	r23
    172a:	6f 91       	pop	r22
    172c:	5f 91       	pop	r21
    172e:	4f 91       	pop	r20
    1730:	3f 91       	pop	r19
    1732:	2f 91       	pop	r18
    1734:	0f 90       	pop	r0
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	0f 90       	pop	r0
    173a:	1f 90       	pop	r1
    173c:	18 95       	reti

0000173e <BUFF_InitialiseBuffer>:
}	

// ======================================================================================

void BUFF_InitialiseBuffer(void)
{
	StoreLoc    = (BuffType*)&RingBuffer[0]; // Set up the IN pointer to the start of the buffer
    173e:	8f e6       	ldi	r24, 0x6F	; 111
    1740:	92 e0       	ldi	r25, 0x02	; 2
    1742:	90 93 b0 02 	sts	0x02B0, r25
    1746:	80 93 af 02 	sts	0x02AF, r24
	RetrieveLoc = (BuffType*)&RingBuffer[0]; // Set up the OUT pointer to the start of the buffer
    174a:	90 93 b2 02 	sts	0x02B2, r25
    174e:	80 93 b1 02 	sts	0x02B1, r24

	BuffElements = 0;                     // Reset the buffer elements counter
    1752:	10 92 b3 02 	sts	0x02B3, r1
    1756:	08 95       	ret

00001758 <BUFF_GetBuffByte>:
}

BuffType BUFF_GetBuffByte(void)
{
	if (!(BuffElements))                  // No elements in the buffer
    1758:	80 91 b3 02 	lds	r24, 0x02B3
    175c:	88 23       	and	r24, r24
    175e:	19 f4       	brne	.+6      	; 0x1766 <BUFF_GetBuffByte+0xe>
		return 0;
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	08 95       	ret

	BuffType RetrievedData = *RetrieveLoc; // Grab the stored byte into a temp variable
    1766:	20 91 b1 02 	lds	r18, 0x02B1
    176a:	30 91 b2 02 	lds	r19, 0x02B2
    176e:	f9 01       	movw	r30, r18
    1770:	91 91       	ld	r25, Z+

	RetrieveLoc++;                         // Increment the OUT pointer to the next element if flag set
    1772:	f0 93 b2 02 	sts	0x02B2, r31
    1776:	e0 93 b1 02 	sts	0x02B1, r30
	BuffElements--;                        // Decrement the total elements variable
    177a:	80 91 b3 02 	lds	r24, 0x02B3
    177e:	81 50       	subi	r24, 0x01	; 1
    1780:	80 93 b3 02 	sts	0x02B3, r24
	
	if (RetrieveLoc == (BuffType*)&RingBuffer[BUFF_BUFFLEN])
    1784:	ef 5a       	subi	r30, 0xAF	; 175
    1786:	f2 40       	sbci	r31, 0x02	; 2
    1788:	31 f4       	brne	.+12     	; 0x1796 <BUFF_GetBuffByte+0x3e>
		RetrieveLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    178a:	2f 53       	subi	r18, 0x3F	; 63
    178c:	30 40       	sbci	r19, 0x00	; 0
    178e:	30 93 b2 02 	sts	0x02B2, r19
    1792:	20 93 b1 02 	sts	0x02B1, r18
		
	return RetrievedData;                 // Return the retrieved data
    1796:	89 2f       	mov	r24, r25
    1798:	99 27       	eor	r25, r25
}
    179a:	08 95       	ret

0000179c <__vector_4>:
// ======================================================================================

// Packet Timeout = ((F_CPU / 1024) / (240 * TIMEOUT_TICKSBEFORETIMEOUT)) per second
ISR(TIMER2_COMP_vect, ISR_NOBLOCK)
{
    179c:	78 94       	sei
    179e:	1f 92       	push	r1
    17a0:	0f 92       	push	r0
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	0f 92       	push	r0
    17a6:	11 24       	eor	r1, r1
    17a8:	8f 93       	push	r24
	if (PacketTimeOutTicks++ == TIMEOUT_PACKET_TIMEOUTTICKS)
    17aa:	80 91 40 01 	lds	r24, 0x0140
    17ae:	8f 5f       	subi	r24, 0xFF	; 255
    17b0:	80 93 40 01 	sts	0x0140, r24
    17b4:	80 91 40 01 	lds	r24, 0x0140
    17b8:	87 39       	cpi	r24, 0x97	; 151
    17ba:	29 f4       	brne	.+10     	; 0x17c6 <__vector_4+0x2a>
	{
		PacketTimeOutTicks   = 0;
    17bc:	10 92 40 01 	sts	0x0140, r1
		PacketTimeOut        = TRUE;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	80 93 3f 01 	sts	0x013F, r24
    17c6:	8f 91       	pop	r24
    17c8:	0f 90       	pop	r0
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	0f 90       	pop	r0
    17ce:	1f 90       	pop	r1
    17d0:	18 95       	reti

000017d2 <TOUT_SetupSleepTimer>:
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    17d2:	a7 e8       	ldi	r26, 0x87	; 135
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    17d6:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
    17da:	80 2d       	mov	r24, r0
    17dc:	28 2f       	mov	r18, r24
	}
}

// Autosleep Timeout = (TIMEOUT_TICKSBEFORETIMEOUT / 10) secs between timeouts
ISR(TIMER1_OVF_vect, ISR_NOBLOCK)
{
	if (SleepTimeOutTicks++ == TicksBeforeAutoSleep)
	{
		TIMEOUT_SLEEP_TIMER_OFF();
		FUNCSleepMode();
		TOUT_SetupSleepTimer();
	}
}

// ======================================================================================

void TOUT_SetupSleepTimer(void)
{
	uint8_t NewTicksIndex = eeprom_read_byte(&EEPROMVars.AutoSleepValIndex);

	if (NewTicksIndex == 0xFF)
    17de:	8f 3f       	cpi	r24, 0xFF	; 255
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <TOUT_SetupSleepTimer+0x12>
	  NewTicksIndex = 4;
    17e2:	24 e0       	ldi	r18, 0x04	; 4

	TIMSK1 = (1 << TOIE1);
    17e4:	31 e0       	ldi	r19, 0x01	; 1
    17e6:	30 93 6f 00 	sts	0x006F, r19
	TicksBeforeAutoSleep = (pgm_read_byte(&AutoSleepTOValues[NewTicksIndex]) * 10);
    17ea:	e2 2f       	mov	r30, r18
    17ec:	ff 27       	eor	r31, r31
    17ee:	e4 53       	subi	r30, 0x34	; 52
    17f0:	fc 4f       	sbci	r31, 0xFC	; 252
    17f2:	94 91       	lpm	r25, Z
    17f4:	8a e0       	ldi	r24, 0x0A	; 10
    17f6:	98 9f       	mul	r25, r24
    17f8:	c0 01       	movw	r24, r0
    17fa:	11 24       	eor	r1, r1
    17fc:	90 93 3c 01 	sts	0x013C, r25
    1800:	80 93 3b 01 	sts	0x013B, r24

	TIMEOUT_SLEEP_TIMEOUT_RESET();
    1804:	10 92 3e 01 	sts	0x013E, r1
    1808:	10 92 3d 01 	sts	0x013D, r1
    180c:	10 92 85 00 	sts	0x0085, r1
    1810:	10 92 84 00 	sts	0x0084, r1
	
	if (NewTicksIndex)
    1814:	22 23       	and	r18, r18
    1816:	19 f0       	breq	.+6      	; 0x181e <TOUT_SetupSleepTimer+0x4c>
	  TIMEOUT_SLEEP_TIMER_ON();
    1818:	30 93 81 00 	sts	0x0081, r19
    181c:	08 95       	ret
	else
	  TIMEOUT_SLEEP_TIMER_OFF();
    181e:	20 93 81 00 	sts	0x0081, r18
    1822:	08 95       	ret

00001824 <__vector_9>:
    1824:	78 94       	sei
    1826:	1f 92       	push	r1
    1828:	0f 92       	push	r0
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	0f 92       	push	r0
    182e:	11 24       	eor	r1, r1
    1830:	2f 93       	push	r18
    1832:	3f 93       	push	r19
    1834:	4f 93       	push	r20
    1836:	5f 93       	push	r21
    1838:	6f 93       	push	r22
    183a:	7f 93       	push	r23
    183c:	8f 93       	push	r24
    183e:	9f 93       	push	r25
    1840:	af 93       	push	r26
    1842:	bf 93       	push	r27
    1844:	ef 93       	push	r30
    1846:	ff 93       	push	r31
    1848:	80 91 3d 01 	lds	r24, 0x013D
    184c:	90 91 3e 01 	lds	r25, 0x013E
    1850:	9c 01       	movw	r18, r24
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	90 93 3e 01 	sts	0x013E, r25
    1858:	80 93 3d 01 	sts	0x013D, r24
    185c:	80 91 3b 01 	lds	r24, 0x013B
    1860:	90 91 3c 01 	lds	r25, 0x013C
    1864:	28 17       	cp	r18, r24
    1866:	39 07       	cpc	r19, r25
    1868:	31 f4       	brne	.+12     	; 0x1876 <__vector_9+0x52>
    186a:	10 92 81 00 	sts	0x0081, r1
    186e:	0e 94 0c 07 	call	0xe18 <FUNCSleepMode>
    1872:	0e 94 e9 0b 	call	0x17d2 <TOUT_SetupSleepTimer>
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	bf 91       	pop	r27
    187c:	af 91       	pop	r26
    187e:	9f 91       	pop	r25
    1880:	8f 91       	pop	r24
    1882:	7f 91       	pop	r23
    1884:	6f 91       	pop	r22
    1886:	5f 91       	pop	r21
    1888:	4f 91       	pop	r20
    188a:	3f 91       	pop	r19
    188c:	2f 91       	pop	r18
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	0f 90       	pop	r0
    1894:	1f 90       	pop	r1
    1896:	18 95       	reti

00001898 <PD_SetupDFAddressCounters>:
}

void PD_SetupDFAddressCounters(void)
{
	uint32_t StartAddress = CurrAddress;
    1898:	20 91 42 01 	lds	r18, 0x0142
    189c:	30 91 43 01 	lds	r19, 0x0143
    18a0:	40 91 44 01 	lds	r20, 0x0144
    18a4:	50 91 45 01 	lds	r21, 0x0145

	CurrPageAddress = 0;
    18a8:	10 92 6e 02 	sts	0x026E, r1
    18ac:	10 92 6d 02 	sts	0x026D, r1

	while (StartAddress > DataflashInfo.PageSize)      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DataflashInfo.PageSize;         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    18b0:	80 91 69 02 	lds	r24, 0x0269
    18b4:	90 91 6a 02 	lds	r25, 0x026A
    18b8:	aa 27       	eor	r26, r26
    18ba:	bb 27       	eor	r27, r27
    18bc:	82 17       	cp	r24, r18
    18be:	93 07       	cpc	r25, r19
    18c0:	a4 07       	cpc	r26, r20
    18c2:	b5 07       	cpc	r27, r21
    18c4:	88 f4       	brcc	.+34     	; 0x18e8 <PD_SetupDFAddressCounters+0x50>
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	28 1b       	sub	r18, r24
    18cc:	39 0b       	sbc	r19, r25
    18ce:	4a 0b       	sbc	r20, r26
    18d0:	5b 0b       	sbc	r21, r27
    18d2:	6f 5f       	subi	r22, 0xFF	; 255
    18d4:	7f 4f       	sbci	r23, 0xFF	; 255
    18d6:	82 17       	cp	r24, r18
    18d8:	93 07       	cpc	r25, r19
    18da:	a4 07       	cpc	r26, r20
    18dc:	b5 07       	cpc	r27, r21
    18de:	a8 f3       	brcs	.-22     	; 0x18ca <PD_SetupDFAddressCounters+0x32>
    18e0:	70 93 6e 02 	sts	0x026E, r23
    18e4:	60 93 6d 02 	sts	0x026D, r22
	}
	
	CurrBuffByte = (uint16_t)StartAddress;              // The buffer byte is the remainder
    18e8:	30 93 67 02 	sts	0x0267, r19
    18ec:	20 93 66 02 	sts	0x0266, r18
    18f0:	08 95       	ret

000018f2 <PD_StoreDataflashByte>:
}

void PD_StoreDataflashByte(const uint8_t Data)
{
    18f2:	cf 93       	push	r28
    18f4:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DataflashInfo.PageSize)
    18f6:	20 91 66 02 	lds	r18, 0x0266
    18fa:	30 91 67 02 	lds	r19, 0x0267
    18fe:	80 91 69 02 	lds	r24, 0x0269
    1902:	90 91 6a 02 	lds	r25, 0x026A
    1906:	28 17       	cp	r18, r24
    1908:	39 07       	cpc	r19, r25
    190a:	a9 f4       	brne	.+42     	; 0x1936 <PD_StoreDataflashByte+0x44>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    190c:	80 91 6d 02 	lds	r24, 0x026D
    1910:	90 91 6e 02 	lds	r25, 0x026E
    1914:	9c 01       	movw	r18, r24
    1916:	01 96       	adiw	r24, 0x01	; 1
    1918:	90 93 6e 02 	sts	0x026E, r25
    191c:	80 93 6d 02 	sts	0x026D, r24
    1920:	c9 01       	movw	r24, r18
    1922:	0e 94 cf 0a 	call	0x159e <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 45 0a 	call	0x148a <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    192e:	10 92 67 02 	sts	0x0267, r1
    1932:	10 92 66 02 	sts	0x0266, r1
	}
	
	USI_SPITransmit(Data);                                 // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    1936:	8c 2f       	mov	r24, r28
    1938:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
	CurrBuffByte++;
    193c:	80 91 66 02 	lds	r24, 0x0266
    1940:	90 91 67 02 	lds	r25, 0x0267
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	90 93 67 02 	sts	0x0267, r25
    194a:	80 93 66 02 	sts	0x0266, r24
    194e:	cf 91       	pop	r28
    1950:	08 95       	ret

00001952 <PD_InterpretAVRISPPacket>:
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	dd 24       	eor	r13, r13
    1962:	80 91 4b 01 	lds	r24, 0x014B
    1966:	99 27       	eor	r25, r25
    1968:	86 31       	cpi	r24, 0x16	; 22
    196a:	91 05       	cpc	r25, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <PD_InterpretAVRISPPacket+0x1e>
    196e:	00 c1       	rjmp	.+512    	; 0x1b70 <PD_InterpretAVRISPPacket+0x21e>
    1970:	87 31       	cpi	r24, 0x17	; 23
    1972:	91 05       	cpc	r25, r1
    1974:	b4 f4       	brge	.+44     	; 0x19a2 <PD_InterpretAVRISPPacket+0x50>
    1976:	82 31       	cpi	r24, 0x12	; 18
    1978:	91 05       	cpc	r25, r1
    197a:	09 f4       	brne	.+2      	; 0x197e <PD_InterpretAVRISPPacket+0x2c>
    197c:	6f c0       	rjmp	.+222    	; 0x1a5c <PD_InterpretAVRISPPacket+0x10a>
    197e:	83 31       	cpi	r24, 0x13	; 19
    1980:	91 05       	cpc	r25, r1
    1982:	3c f4       	brge	.+14     	; 0x1992 <PD_InterpretAVRISPPacket+0x40>
    1984:	80 31       	cpi	r24, 0x10	; 16
    1986:	91 05       	cpc	r25, r1
    1988:	31 f1       	breq	.+76     	; 0x19d6 <PD_InterpretAVRISPPacket+0x84>
    198a:	41 97       	sbiw	r24, 0x11	; 17
    198c:	09 f4       	brne	.+2      	; 0x1990 <PD_InterpretAVRISPPacket+0x3e>
    198e:	46 c0       	rjmp	.+140    	; 0x1a1c <PD_InterpretAVRISPPacket+0xca>
    1990:	40 c1       	rjmp	.+640    	; 0x1c12 <PD_InterpretAVRISPPacket+0x2c0>
    1992:	84 31       	cpi	r24, 0x14	; 20
    1994:	91 05       	cpc	r25, r1
    1996:	09 f4       	brne	.+2      	; 0x199a <PD_InterpretAVRISPPacket+0x48>
    1998:	8a c0       	rjmp	.+276    	; 0x1aae <PD_InterpretAVRISPPacket+0x15c>
    199a:	45 97       	sbiw	r24, 0x15	; 21
    199c:	0c f0       	brlt	.+2      	; 0x19a0 <PD_InterpretAVRISPPacket+0x4e>
    199e:	af c0       	rjmp	.+350    	; 0x1afe <PD_InterpretAVRISPPacket+0x1ac>
    19a0:	7f c0       	rjmp	.+254    	; 0x1aa0 <PD_InterpretAVRISPPacket+0x14e>
    19a2:	89 31       	cpi	r24, 0x19	; 25
    19a4:	91 05       	cpc	r25, r1
    19a6:	09 f4       	brne	.+2      	; 0x19aa <PD_InterpretAVRISPPacket+0x58>
    19a8:	70 c0       	rjmp	.+224    	; 0x1a8a <PD_InterpretAVRISPPacket+0x138>
    19aa:	8a 31       	cpi	r24, 0x1A	; 26
    19ac:	91 05       	cpc	r25, r1
    19ae:	44 f4       	brge	.+16     	; 0x19c0 <PD_InterpretAVRISPPacket+0x6e>
    19b0:	87 31       	cpi	r24, 0x17	; 23
    19b2:	91 05       	cpc	r25, r1
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <PD_InterpretAVRISPPacket+0x66>
    19b6:	69 c0       	rjmp	.+210    	; 0x1a8a <PD_InterpretAVRISPPacket+0x138>
    19b8:	48 97       	sbiw	r24, 0x18	; 24
    19ba:	09 f4       	brne	.+2      	; 0x19be <PD_InterpretAVRISPPacket+0x6c>
    19bc:	58 c0       	rjmp	.+176    	; 0x1a6e <PD_InterpretAVRISPPacket+0x11c>
    19be:	29 c1       	rjmp	.+594    	; 0x1c12 <PD_InterpretAVRISPPacket+0x2c0>
    19c0:	8b 31       	cpi	r24, 0x1B	; 27
    19c2:	91 05       	cpc	r25, r1
    19c4:	e9 f1       	breq	.+122    	; 0x1a40 <PD_InterpretAVRISPPacket+0xee>
    19c6:	8b 31       	cpi	r24, 0x1B	; 27
    19c8:	91 05       	cpc	r25, r1
    19ca:	0c f4       	brge	.+2      	; 0x19ce <PD_InterpretAVRISPPacket+0x7c>
    19cc:	50 c0       	rjmp	.+160    	; 0x1a6e <PD_InterpretAVRISPPacket+0x11c>
    19ce:	4c 97       	sbiw	r24, 0x1c	; 28
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <PD_InterpretAVRISPPacket+0x82>
    19d2:	4d c0       	rjmp	.+154    	; 0x1a6e <PD_InterpretAVRISPPacket+0x11c>
    19d4:	1e c1       	rjmp	.+572    	; 0x1c12 <PD_InterpretAVRISPPacket+0x2c0>
    19d6:	82 e0       	ldi	r24, 0x02	; 2
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	90 93 48 01 	sts	0x0148, r25
    19de:	80 93 47 01 	sts	0x0147, r24
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    19e8:	0e 94 fe 0a 	call	0x15fc <DF_GetChipCharacteristics>
    19ec:	80 91 68 02 	lds	r24, 0x0268
    19f0:	88 23       	and	r24, r24
    19f2:	59 f0       	breq	.+22     	; 0x1a0a <PD_InterpretAVRISPPacket+0xb8>
    19f4:	81 ed       	ldi	r24, 0xD1	; 209
    19f6:	93 e0       	ldi	r25, 0x03	; 3
    19f8:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	80 93 46 01 	sts	0x0146, r24
    1a02:	81 b3       	in	r24, 0x11	; 17
    1a04:	8f 7c       	andi	r24, 0xCF	; 207
    1a06:	80 62       	ori	r24, 0x20	; 32
    1a08:	17 c0       	rjmp	.+46     	; 0x1a38 <PD_InterpretAVRISPPacket+0xe6>
    1a0a:	86 e8       	ldi	r24, 0x86	; 134
    1a0c:	93 e0       	ldi	r25, 0x03	; 3
    1a0e:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    1a12:	8d 2d       	mov	r24, r13
    1a14:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1a18:	80 ec       	ldi	r24, 0xC0	; 192
    1a1a:	02 c1       	rjmp	.+516    	; 0x1c20 <PD_InterpretAVRISPPacket+0x2ce>
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	90 93 48 01 	sts	0x0148, r25
    1a24:	80 93 47 01 	sts	0x0147, r24
    1a28:	d0 92 46 01 	sts	0x0146, r13
    1a2c:	8d 2d       	mov	r24, r13
    1a2e:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1a32:	81 b3       	in	r24, 0x11	; 17
    1a34:	8f 7c       	andi	r24, 0xCF	; 207
    1a36:	80 61       	ori	r24, 0x10	; 16
    1a38:	81 bb       	out	0x11, r24	; 17
    1a3a:	d0 92 4c 01 	sts	0x014C, r13
    1a3e:	f2 c0       	rjmp	.+484    	; 0x1c24 <PD_InterpretAVRISPPacket+0x2d2>
    1a40:	84 e0       	ldi	r24, 0x04	; 4
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	90 93 48 01 	sts	0x0148, r25
    1a48:	80 93 47 01 	sts	0x0147, r24
    1a4c:	d0 92 4c 01 	sts	0x014C, r13
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	80 93 4d 01 	sts	0x014D, r24
    1a56:	d0 92 4e 01 	sts	0x014E, r13
    1a5a:	e4 c0       	rjmp	.+456    	; 0x1c24 <PD_InterpretAVRISPPacket+0x2d2>
    1a5c:	82 e0       	ldi	r24, 0x02	; 2
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	90 93 48 01 	sts	0x0148, r25
    1a64:	80 93 47 01 	sts	0x0147, r24
    1a68:	e1 e0       	ldi	r30, 0x01	; 1
    1a6a:	de 2e       	mov	r13, r30
    1a6c:	7e c0       	rjmp	.+252    	; 0x1b6a <PD_InterpretAVRISPPacket+0x218>
    1a6e:	84 e0       	ldi	r24, 0x04	; 4
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	90 93 48 01 	sts	0x0148, r25
    1a76:	80 93 47 01 	sts	0x0147, r24
    1a7a:	10 92 4c 01 	sts	0x014C, r1
    1a7e:	8f ef       	ldi	r24, 0xFF	; 255
    1a80:	80 93 4d 01 	sts	0x014D, r24
    1a84:	10 92 4e 01 	sts	0x014E, r1
    1a88:	cd c0       	rjmp	.+410    	; 0x1c24 <PD_InterpretAVRISPPacket+0x2d2>
    1a8a:	83 e0       	ldi	r24, 0x03	; 3
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	90 93 48 01 	sts	0x0148, r25
    1a92:	80 93 47 01 	sts	0x0147, r24
    1a96:	10 92 4c 01 	sts	0x014C, r1
    1a9a:	10 92 4d 01 	sts	0x014D, r1
    1a9e:	c2 c0       	rjmp	.+388    	; 0x1c24 <PD_InterpretAVRISPPacket+0x2d2>
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	90 93 48 01 	sts	0x0148, r25
    1aa8:	80 93 47 01 	sts	0x0147, r24
    1aac:	5e c0       	rjmp	.+188    	; 0x1b6a <PD_InterpretAVRISPPacket+0x218>
    1aae:	80 91 4c 01 	lds	r24, 0x014C
    1ab2:	99 27       	eor	r25, r25
    1ab4:	98 2f       	mov	r25, r24
    1ab6:	88 27       	eor	r24, r24
    1ab8:	20 91 4d 01 	lds	r18, 0x014D
    1abc:	33 27       	eor	r19, r19
    1abe:	82 2b       	or	r24, r18
    1ac0:	93 2b       	or	r25, r19
    1ac2:	03 96       	adiw	r24, 0x03	; 3
    1ac4:	90 93 48 01 	sts	0x0148, r25
    1ac8:	80 93 47 01 	sts	0x0147, r24
    1acc:	21 e0       	ldi	r18, 0x01	; 1
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	02 97       	sbiw	r24, 0x02	; 2
    1ad2:	28 17       	cp	r18, r24
    1ad4:	39 07       	cpc	r19, r25
    1ad6:	48 f4       	brcc	.+18     	; 0x1aea <PD_InterpretAVRISPPacket+0x198>
    1ad8:	4f ef       	ldi	r20, 0xFF	; 255
    1ada:	ec e4       	ldi	r30, 0x4C	; 76
    1adc:	f1 e0       	ldi	r31, 0x01	; 1
    1ade:	41 93       	st	Z+, r20
    1ae0:	2f 5f       	subi	r18, 0xFF	; 255
    1ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae4:	28 17       	cp	r18, r24
    1ae6:	39 07       	cpc	r19, r25
    1ae8:	d0 f3       	brcs	.-12     	; 0x1ade <PD_InterpretAVRISPPacket+0x18c>
    1aea:	10 92 4c 01 	sts	0x014C, r1
    1aee:	e0 91 47 01 	lds	r30, 0x0147
    1af2:	f0 91 48 01 	lds	r31, 0x0148
    1af6:	e6 5b       	subi	r30, 0xB6	; 182
    1af8:	fe 4f       	sbci	r31, 0xFE	; 254
    1afa:	10 82       	st	Z, r1
    1afc:	93 c0       	rjmp	.+294    	; 0x1c24 <PD_InterpretAVRISPPacket+0x2d2>
    1afe:	0e 94 4c 0c 	call	0x1898 <PD_SetupDFAddressCounters>
    1b02:	80 91 6d 02 	lds	r24, 0x026D
    1b06:	90 91 6e 02 	lds	r25, 0x026E
    1b0a:	0e 94 a0 0a 	call	0x1540 <DF_CopyFlashPageToBuffer>
    1b0e:	80 91 66 02 	lds	r24, 0x0266
    1b12:	90 91 67 02 	lds	r25, 0x0267
    1b16:	0e 94 45 0a 	call	0x148a <DF_BufferWriteEnable>
    1b1a:	80 91 4c 01 	lds	r24, 0x014C
    1b1e:	99 27       	eor	r25, r25
    1b20:	d8 2f       	mov	r29, r24
    1b22:	cc 27       	eor	r28, r28
    1b24:	80 91 4d 01 	lds	r24, 0x014D
    1b28:	99 27       	eor	r25, r25
    1b2a:	c8 2b       	or	r28, r24
    1b2c:	d9 2b       	or	r29, r25
    1b2e:	00 e0       	ldi	r16, 0x00	; 0
    1b30:	10 e0       	ldi	r17, 0x00	; 0
    1b32:	0c 17       	cp	r16, r28
    1b34:	1d 07       	cpc	r17, r29
    1b36:	c8 f4       	brcc	.+50     	; 0x1b6a <PD_InterpretAVRISPPacket+0x218>
    1b38:	55 e5       	ldi	r21, 0x55	; 85
    1b3a:	e5 2e       	mov	r14, r21
    1b3c:	51 e0       	ldi	r21, 0x01	; 1
    1b3e:	f5 2e       	mov	r15, r21
    1b40:	f7 01       	movw	r30, r14
    1b42:	81 91       	ld	r24, Z+
    1b44:	7f 01       	movw	r14, r30
    1b46:	0e 94 79 0c 	call	0x18f2 <PD_StoreDataflashByte>
    1b4a:	80 91 66 02 	lds	r24, 0x0266
    1b4e:	90 91 67 02 	lds	r25, 0x0267
    1b52:	01 96       	adiw	r24, 0x01	; 1
    1b54:	90 93 67 02 	sts	0x0267, r25
    1b58:	80 93 66 02 	sts	0x0266, r24
    1b5c:	0e 94 3b 0f 	call	0x1e76 <V2P_IncrementCurrAddress>
    1b60:	0f 5f       	subi	r16, 0xFF	; 255
    1b62:	1f 4f       	sbci	r17, 0xFF	; 255
    1b64:	0c 17       	cp	r16, r28
    1b66:	1d 07       	cpc	r17, r29
    1b68:	58 f3       	brcs	.-42     	; 0x1b40 <PD_InterpretAVRISPPacket+0x1ee>
    1b6a:	10 92 4c 01 	sts	0x014C, r1
    1b6e:	5a c0       	rjmp	.+180    	; 0x1c24 <PD_InterpretAVRISPPacket+0x2d2>
    1b70:	0e 94 4c 0c 	call	0x1898 <PD_SetupDFAddressCounters>
    1b74:	80 91 6d 02 	lds	r24, 0x026D
    1b78:	90 91 6e 02 	lds	r25, 0x026E
    1b7c:	0e 94 a0 0a 	call	0x1540 <DF_CopyFlashPageToBuffer>
    1b80:	80 91 4c 01 	lds	r24, 0x014C
    1b84:	99 27       	eor	r25, r25
    1b86:	d8 2f       	mov	r29, r24
    1b88:	cc 27       	eor	r28, r28
    1b8a:	80 91 4d 01 	lds	r24, 0x014D
    1b8e:	99 27       	eor	r25, r25
    1b90:	c8 2b       	or	r28, r24
    1b92:	d9 2b       	or	r29, r25
    1b94:	00 e0       	ldi	r16, 0x00	; 0
    1b96:	10 e0       	ldi	r17, 0x00	; 0
    1b98:	0c 17       	cp	r16, r28
    1b9a:	1d 07       	cpc	r17, r29
    1b9c:	70 f5       	brcc	.+92     	; 0x1bfa <PD_InterpretAVRISPPacket+0x2a8>
    1b9e:	3d e4       	ldi	r19, 0x4D	; 77
    1ba0:	e3 2e       	mov	r14, r19
    1ba2:	31 e0       	ldi	r19, 0x01	; 1
    1ba4:	f3 2e       	mov	r15, r19
    1ba6:	20 91 66 02 	lds	r18, 0x0266
    1baa:	30 91 67 02 	lds	r19, 0x0267
    1bae:	80 91 69 02 	lds	r24, 0x0269
    1bb2:	90 91 6a 02 	lds	r25, 0x026A
    1bb6:	28 17       	cp	r18, r24
    1bb8:	39 07       	cpc	r19, r25
    1bba:	41 f4       	brne	.+16     	; 0x1bcc <PD_InterpretAVRISPPacket+0x27a>
    1bbc:	0e 94 4c 0c 	call	0x1898 <PD_SetupDFAddressCounters>
    1bc0:	80 91 6d 02 	lds	r24, 0x026D
    1bc4:	90 91 6e 02 	lds	r25, 0x026E
    1bc8:	0e 94 a0 0a 	call	0x1540 <DF_CopyFlashPageToBuffer>
    1bcc:	80 91 66 02 	lds	r24, 0x0266
    1bd0:	90 91 67 02 	lds	r25, 0x0267
    1bd4:	9c 01       	movw	r18, r24
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	90 93 67 02 	sts	0x0267, r25
    1bdc:	80 93 66 02 	sts	0x0266, r24
    1be0:	c9 01       	movw	r24, r18
    1be2:	0e 94 e4 09 	call	0x13c8 <DF_ReadBufferByte>
    1be6:	f7 01       	movw	r30, r14
    1be8:	81 93       	st	Z+, r24
    1bea:	7f 01       	movw	r14, r30
    1bec:	0e 94 3b 0f 	call	0x1e76 <V2P_IncrementCurrAddress>
    1bf0:	0f 5f       	subi	r16, 0xFF	; 255
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	0c 17       	cp	r16, r28
    1bf6:	1d 07       	cpc	r17, r29
    1bf8:	b0 f2       	brcs	.-84     	; 0x1ba6 <PD_InterpretAVRISPPacket+0x254>
    1bfa:	23 96       	adiw	r28, 0x03	; 3
    1bfc:	d0 93 48 01 	sts	0x0148, r29
    1c00:	c0 93 47 01 	sts	0x0147, r28
    1c04:	23 97       	sbiw	r28, 0x03	; 3
    1c06:	10 92 4c 01 	sts	0x014C, r1
    1c0a:	c5 5b       	subi	r28, 0xB5	; 181
    1c0c:	de 4f       	sbci	r29, 0xFE	; 254
    1c0e:	1a 82       	std	Y+2, r1	; 0x02
    1c10:	09 c0       	rjmp	.+18     	; 0x1c24 <PD_InterpretAVRISPPacket+0x2d2>
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	90 93 48 01 	sts	0x0148, r25
    1c1a:	80 93 47 01 	sts	0x0147, r24
    1c1e:	89 ec       	ldi	r24, 0xC9	; 201
    1c20:	80 93 4c 01 	sts	0x014C, r24
    1c24:	0e 94 5a 0e 	call	0x1cb4 <V2P_SendPacket>
    1c28:	dd 20       	and	r13, r13
    1c2a:	d9 f0       	breq	.+54     	; 0x1c62 <PD_InterpretAVRISPPacket+0x310>
    1c2c:	80 e3       	ldi	r24, 0x30	; 48
    1c2e:	92 e0       	ldi	r25, 0x02	; 2
    1c30:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    1c34:	c0 e0       	ldi	r28, 0x00	; 0
    1c36:	d0 e0       	ldi	r29, 0x00	; 0
    1c38:	80 91 6b 02 	lds	r24, 0x026B
    1c3c:	90 91 6c 02 	lds	r25, 0x026C
    1c40:	23 e0       	ldi	r18, 0x03	; 3
    1c42:	96 95       	lsr	r25
    1c44:	87 95       	ror	r24
    1c46:	2a 95       	dec	r18
    1c48:	e1 f7       	brne	.-8      	; 0x1c42 <PD_InterpretAVRISPPacket+0x2f0>
    1c4a:	c8 17       	cp	r28, r24
    1c4c:	d9 07       	cpc	r29, r25
    1c4e:	28 f4       	brcc	.+10     	; 0x1c5a <PD_InterpretAVRISPPacket+0x308>
    1c50:	ce 01       	movw	r24, r28
    1c52:	0e 94 7d 0a 	call	0x14fa <DF_EraseBlock>
    1c56:	21 96       	adiw	r28, 0x01	; 1
    1c58:	ef cf       	rjmp	.-34     	; 0x1c38 <PD_InterpretAVRISPPacket+0x2e6>
    1c5a:	81 ed       	ldi	r24, 0xD1	; 209
    1c5c:	93 e0       	ldi	r25, 0x03	; 3
    1c5e:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
    1c6a:	ff 90       	pop	r15
    1c6c:	ef 90       	pop	r14
    1c6e:	df 90       	pop	r13
    1c70:	08 95       	ret

00001c72 <V2P_GetChecksum>:
	
	/* Checksum for the V2 protocol is comprised of an XOR of all the packet 
      bytes, including the start, sequence number, size and token bytes.    */
	
	CheckSumByte  = MESSAGE_START;
    1c72:	6b e1       	ldi	r22, 0x1B	; 27
	CheckSumByte ^= SequenceNum;
    1c74:	80 91 49 01 	lds	r24, 0x0149
    1c78:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize >> 8);
    1c7a:	20 91 47 01 	lds	r18, 0x0147
    1c7e:	30 91 48 01 	lds	r19, 0x0148
    1c82:	83 2f       	mov	r24, r19
    1c84:	99 27       	eor	r25, r25
    1c86:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize);
    1c88:	80 91 47 01 	lds	r24, 0x0147
    1c8c:	68 27       	eor	r22, r24
	CheckSumByte ^= TOKEN;
    1c8e:	8e e0       	ldi	r24, 0x0E	; 14
    1c90:	68 27       	eor	r22, r24
	
	for (uint16_t CByteIndex = 0; CByteIndex < MessageSize; CByteIndex++)
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	42 17       	cp	r20, r18
    1c98:	53 07       	cpc	r21, r19
    1c9a:	48 f4       	brcc	.+18     	; 0x1cae <V2P_GetChecksum+0x3c>
    1c9c:	eb e4       	ldi	r30, 0x4B	; 75
    1c9e:	f1 e0       	ldi	r31, 0x01	; 1
	   CheckSumByte ^= PacketBytes[CByteIndex];
    1ca0:	81 91       	ld	r24, Z+
    1ca2:	68 27       	eor	r22, r24
    1ca4:	4f 5f       	subi	r20, 0xFF	; 255
    1ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca8:	42 17       	cp	r20, r18
    1caa:	53 07       	cpc	r21, r19
    1cac:	c8 f3       	brcs	.-14     	; 0x1ca0 <V2P_GetChecksum+0x2e>

	return CheckSumByte;
}
    1cae:	86 2f       	mov	r24, r22
    1cb0:	99 27       	eor	r25, r25
    1cb2:	08 95       	ret

00001cb4 <V2P_SendPacket>:
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	8b e1       	ldi	r24, 0x1B	; 27
    1cbe:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1cc2:	80 91 49 01 	lds	r24, 0x0149
    1cc6:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1cca:	80 91 48 01 	lds	r24, 0x0148
    1cce:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1cd2:	80 91 47 01 	lds	r24, 0x0147
    1cd6:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1cda:	8e e0       	ldi	r24, 0x0E	; 14
    1cdc:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1ce0:	c0 e0       	ldi	r28, 0x00	; 0
    1ce2:	d0 e0       	ldi	r29, 0x00	; 0
    1ce4:	80 91 47 01 	lds	r24, 0x0147
    1ce8:	90 91 48 01 	lds	r25, 0x0148
    1cec:	c8 17       	cp	r28, r24
    1cee:	d9 07       	cpc	r29, r25
    1cf0:	78 f4       	brcc	.+30     	; 0x1d10 <V2P_SendPacket+0x5c>
    1cf2:	0b e4       	ldi	r16, 0x4B	; 75
    1cf4:	11 e0       	ldi	r17, 0x01	; 1
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	81 91       	ld	r24, Z+
    1cfa:	8f 01       	movw	r16, r30
    1cfc:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1d00:	21 96       	adiw	r28, 0x01	; 1
    1d02:	80 91 47 01 	lds	r24, 0x0147
    1d06:	90 91 48 01 	lds	r25, 0x0148
    1d0a:	c8 17       	cp	r28, r24
    1d0c:	d9 07       	cpc	r29, r25
    1d0e:	98 f3       	brcs	.-26     	; 0x1cf6 <V2P_SendPacket+0x42>
    1d10:	0e 94 39 0e 	call	0x1c72 <V2P_GetChecksum>
    1d14:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1d18:	80 91 49 01 	lds	r24, 0x0149
    1d1c:	90 91 4a 01 	lds	r25, 0x014A
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	90 93 4a 01 	sts	0x014A, r25
    1d26:	80 93 49 01 	sts	0x0149, r24
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	08 95       	ret

00001d34 <V2P_GetSetParamater>:

void V2P_GetSetParamater(void)
{
	uint8_t Param_Name = PacketBytes[1];    // Save the parameter number
    1d34:	20 91 4c 01 	lds	r18, 0x014C

	MessageSize = 3;                        // Set the default response message size to 3 bytes     
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	90 93 48 01 	sts	0x0148, r25
    1d40:	80 93 47 01 	sts	0x0147, r24
	PacketBytes[1] = STATUS_CMD_OK;         // Set the default response to OK
    1d44:	10 92 4c 01 	sts	0x014C, r1

	switch (Param_Name)                    // Switch based on the recieved parameter byte
    1d48:	33 27       	eor	r19, r19
    1d4a:	22 39       	cpi	r18, 0x92	; 146
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	51 f1       	breq	.+84     	; 0x1da4 <V2P_GetSetParamater+0x70>
    1d50:	23 39       	cpi	r18, 0x93	; 147
    1d52:	31 05       	cpc	r19, r1
    1d54:	8c f4       	brge	.+34     	; 0x1d78 <V2P_GetSetParamater+0x44>
    1d56:	21 38       	cpi	r18, 0x81	; 129
    1d58:	31 05       	cpc	r19, r1
    1d5a:	01 f1       	breq	.+64     	; 0x1d9c <V2P_GetSetParamater+0x68>
    1d5c:	22 38       	cpi	r18, 0x82	; 130
    1d5e:	31 05       	cpc	r19, r1
    1d60:	24 f4       	brge	.+8      	; 0x1d6a <V2P_GetSetParamater+0x36>
    1d62:	20 38       	cpi	r18, 0x80	; 128
    1d64:	31 05       	cpc	r19, r1
    1d66:	41 f1       	breq	.+80     	; 0x1db8 <V2P_GetSetParamater+0x84>
    1d68:	7a c0       	rjmp	.+244    	; 0x1e5e <V2P_GetSetParamater+0x12a>
    1d6a:	20 39       	cpi	r18, 0x90	; 144
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	c1 f0       	breq	.+48     	; 0x1da0 <V2P_GetSetParamater+0x6c>
    1d70:	21 39       	cpi	r18, 0x91	; 145
    1d72:	31 05       	cpc	r19, r1
    1d74:	a9 f0       	breq	.+42     	; 0x1da0 <V2P_GetSetParamater+0x6c>
    1d76:	73 c0       	rjmp	.+230    	; 0x1e5e <V2P_GetSetParamater+0x12a>
    1d78:	28 39       	cpi	r18, 0x98	; 152
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	89 f1       	breq	.+98     	; 0x1de0 <V2P_GetSetParamater+0xac>
    1d7e:	29 39       	cpi	r18, 0x99	; 153
    1d80:	31 05       	cpc	r19, r1
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <V2P_GetSetParamater+0x5a>
    1d84:	26 39       	cpi	r18, 0x96	; 150
    1d86:	31 05       	cpc	r19, r1
    1d88:	0c f4       	brge	.+2      	; 0x1d8c <V2P_GetSetParamater+0x58>
    1d8a:	69 c0       	rjmp	.+210    	; 0x1e5e <V2P_GetSetParamater+0x12a>
    1d8c:	5a c0       	rjmp	.+180    	; 0x1e42 <V2P_GetSetParamater+0x10e>
    1d8e:	2e 39       	cpi	r18, 0x9E	; 158
    1d90:	31 05       	cpc	r19, r1
    1d92:	e1 f1       	breq	.+120    	; 0x1e0c <V2P_GetSetParamater+0xd8>
    1d94:	2f 39       	cpi	r18, 0x9F	; 159
    1d96:	31 05       	cpc	r19, r1
    1d98:	89 f0       	breq	.+34     	; 0x1dbc <V2P_GetSetParamater+0x88>
    1d9a:	61 c0       	rjmp	.+194    	; 0x1e5e <V2P_GetSetParamater+0x12a>
	{
		case PARAM_BUILD_NUMBER_LOW:
			PacketBytes[2] = VERSION_MINOR;

			break;
		case PARAM_BUILD_NUMBER_HIGH:
			PacketBytes[2] = VERSION_MAJOR;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	3f c0       	rjmp	.+126    	; 0x1e1e <V2P_GetSetParamater+0xea>

			break;
		case PARAM_HARDWARE_VERSION:
			PacketBytes[2] = V2P_HW_VERSION;

			break;
		case PARAM_SW_MAJOR:
			PacketBytes[2] = V2P_SW_VERSION_MAJOR;
    1da0:	82 e0       	ldi	r24, 0x02	; 2
    1da2:	3d c0       	rjmp	.+122    	; 0x1e1e <V2P_GetSetParamater+0xea>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    1da4:	a6 e8       	ldi	r26, 0x86	; 134
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	9d 01       	movw	r18, r26
  uint8_t result;
  asm volatile
    1daa:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
    1dae:	80 2d       	mov	r24, r0
    1db0:	8f 3f       	cpi	r24, 0xFF	; 255
    1db2:	11 f0       	breq	.+4      	; 0x1db8 <V2P_GetSetParamater+0x84>
    1db4:	d9 01       	movw	r26, r18
    1db6:	30 c0       	rjmp	.+96     	; 0x1e18 <V2P_GetSetParamater+0xe4>
    1db8:	84 e0       	ldi	r24, 0x04	; 4
    1dba:	31 c0       	rjmp	.+98     	; 0x1e1e <V2P_GetSetParamater+0xea>

			break;
		case PARAM_SW_MINOR:
			PacketBytes[2] = ((eeprom_read_byte(&EEPROMVars.FirmVerMinor) == 0xFF)? V2P_SW_VERSION_MINOR_DEFAULT : eeprom_read_byte(&EEPROMVars.FirmVerMinor));

			break;
		case PARAM_CONTROLLER_INIT:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1dbc:	80 91 4b 01 	lds	r24, 0x014B
    1dc0:	83 30       	cpi	r24, 0x03	; 3
    1dc2:	19 f4       	brne	.+6      	; 0x1dca <V2P_GetSetParamater+0x96>
			{
				PacketBytes[2] = Param_ControllerInit;
    1dc4:	80 91 41 01 	lds	r24, 0x0141
    1dc8:	2a c0       	rjmp	.+84     	; 0x1e1e <V2P_GetSetParamater+0xea>
			}
			else
			{
				MessageSize = 2;
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	90 93 48 01 	sts	0x0148, r25
    1dd2:	80 93 47 01 	sts	0x0147, r24
				Param_ControllerInit = PacketBytes[2];
    1dd6:	80 91 4d 01 	lds	r24, 0x014D
    1dda:	80 93 41 01 	sts	0x0141, r24
			}
			
			break;
    1dde:	48 c0       	rjmp	.+144    	; 0x1e70 <V2P_GetSetParamater+0x13c>
		case PARAM_SCK_DURATION:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1de0:	80 91 4b 01 	lds	r24, 0x014B
    1de4:	a1 e0       	ldi	r26, 0x01	; 1
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	83 30       	cpi	r24, 0x03	; 3
    1dea:	b1 f0       	breq	.+44     	; 0x1e18 <V2P_GetSetParamater+0xe4>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.SCKDuration);
			}
			else
			{
				MessageSize = 2;
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	90 93 48 01 	sts	0x0148, r25
    1df4:	80 93 47 01 	sts	0x0147, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1df8:	80 91 4d 01 	lds	r24, 0x014D
  asm volatile (
    1dfc:	08 2e       	mov	r0, r24
    1dfe:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.SCKDuration, PacketBytes[2]);
				USI_SPISetSpeed(PacketBytes[2]); // Re-Initialise the USI system with the new frequency
    1e02:	80 91 4d 01 	lds	r24, 0x014D
    1e06:	0e 94 68 09 	call	0x12d0 <USI_SPISetSpeed>
			}
					
			break;
    1e0a:	32 c0       	rjmp	.+100    	; 0x1e70 <V2P_GetSetParamater+0x13c>
		case PARAM_RESET_POLARITY:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1e0c:	80 91 4b 01 	lds	r24, 0x014B
    1e10:	a0 e0       	ldi	r26, 0x00	; 0
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	83 30       	cpi	r24, 0x03	; 3
    1e16:	31 f4       	brne	.+12     	; 0x1e24 <V2P_GetSetParamater+0xf0>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1e18:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
    1e1c:	80 2d       	mov	r24, r0
    1e1e:	80 93 4d 01 	sts	0x014D, r24
    1e22:	26 c0       	rjmp	.+76     	; 0x1e70 <V2P_GetSetParamater+0x13c>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.ResetPolarity);		
			}
			else
			{
				MessageSize = 2;
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	90 93 48 01 	sts	0x0148, r25
    1e2c:	80 93 47 01 	sts	0x0147, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1e30:	80 91 4d 01 	lds	r24, 0x014D
  asm volatile (
    1e34:	08 2e       	mov	r0, r24
    1e36:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.ResetPolarity, PacketBytes[2]);
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Change takes effect immediatly
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
			}
			
			break;
    1e40:	17 c0       	rjmp	.+46     	; 0x1e70 <V2P_GetSetParamater+0x13c>
		case PARAM_OSC_PSCALE:
		case PARAM_OSC_CMATCH:
			/* Despite not supporting these parameters (STK500 only), the AVR Studio programmer
			   sends them along with the SCK duration. A OK must be returned or the sequence will fail
			   and the SCK duration byte will not be sent.                                             */
		
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1e42:	80 91 4b 01 	lds	r24, 0x014B
    1e46:	83 30       	cpi	r24, 0x03	; 3
    1e48:	19 f4       	brne	.+6      	; 0x1e50 <V2P_GetSetParamater+0x11c>
			  PacketBytes[2] = 0;             // If the command is a read, return a 0 for both parameters
    1e4a:	10 92 4d 01 	sts	0x014D, r1
    1e4e:	10 c0       	rjmp	.+32     	; 0x1e70 <V2P_GetSetParamater+0x13c>
			else
			  MessageSize = 2;                // Otherwise just send back an OK if the command is a set		
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	90 93 48 01 	sts	0x0148, r25
    1e58:	80 93 47 01 	sts	0x0147, r24
			
			break;
    1e5c:	09 c0       	rjmp	.+18     	; 0x1e70 <V2P_GetSetParamater+0x13c>
		default:                             // Unrecognised parameter
			MessageSize = 2;
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	90 93 48 01 	sts	0x0148, r25
    1e66:	80 93 47 01 	sts	0x0147, r24
			PacketBytes[1] = STATUS_CMD_FAILED;			
    1e6a:	80 ec       	ldi	r24, 0xC0	; 192
    1e6c:	80 93 4c 01 	sts	0x014C, r24
	}
	
	V2P_SendPacket();
    1e70:	0e 94 5a 0e 	call	0x1cb4 <V2P_SendPacket>
    1e74:	08 95       	ret

00001e76 <V2P_IncrementCurrAddress>:
}

void V2P_IncrementCurrAddress(void)
{
	// Incrementing a 32-bit unsigned variable takes a lot of code. Because much of the code is
	// not very time critical (much of it is waiting for the hardware), i've chosen to waste
	// a few extra cycles per increment and save a good 60 bytes or so of code space by putting
	// the incrmement inside a function.

	CurrAddress++;
    1e76:	80 91 42 01 	lds	r24, 0x0142
    1e7a:	90 91 43 01 	lds	r25, 0x0143
    1e7e:	a0 91 44 01 	lds	r26, 0x0144
    1e82:	b0 91 45 01 	lds	r27, 0x0145
    1e86:	01 96       	adiw	r24, 0x01	; 1
    1e88:	a1 1d       	adc	r26, r1
    1e8a:	b1 1d       	adc	r27, r1
    1e8c:	80 93 42 01 	sts	0x0142, r24
    1e90:	90 93 43 01 	sts	0x0143, r25
    1e94:	a0 93 44 01 	sts	0x0144, r26
    1e98:	b0 93 45 01 	sts	0x0145, r27
    1e9c:	08 95       	ret

00001e9e <V2P_CheckForExtendedAddress>:
}

void V2P_CheckForExtendedAddress(void)
{
	if (CurrAddress & V2P_LOAD_EXTENDED_ADDR_FLAG)     // MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
    1e9e:	80 91 42 01 	lds	r24, 0x0142
    1ea2:	90 91 43 01 	lds	r25, 0x0143
    1ea6:	a0 91 44 01 	lds	r26, 0x0144
    1eaa:	b0 91 45 01 	lds	r27, 0x0145
    1eae:	b7 ff       	sbrs	r27, 7
    1eb0:	1e c0       	rjmp	.+60     	; 0x1eee <V2P_CheckForExtendedAddress+0x50>
	{
		USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);   // Load extended address command
    1eb2:	8d e4       	ldi	r24, 0x4D	; 77
    1eb4:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
		USI_SPITransmit((CurrAddress & V2P_LOAD_EXTENDED_ADDR_MASK) >> V2P_LOAD_EXTENDED_ADDR_SHIFT);
    1ebe:	80 91 44 01 	lds	r24, 0x0144
    1ec2:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
		
		CurrAddress &= ~(V2P_LOAD_EXTENDED_ADDR_FLAG); // Clear the flag
    1ecc:	80 91 42 01 	lds	r24, 0x0142
    1ed0:	90 91 43 01 	lds	r25, 0x0143
    1ed4:	a0 91 44 01 	lds	r26, 0x0144
    1ed8:	b0 91 45 01 	lds	r27, 0x0145
    1edc:	bf 77       	andi	r27, 0x7F	; 127
    1ede:	80 93 42 01 	sts	0x0142, r24
    1ee2:	90 93 43 01 	sts	0x0143, r25
    1ee6:	a0 93 44 01 	sts	0x0144, r26
    1eea:	b0 93 45 01 	sts	0x0145, r27
    1eee:	08 95       	ret

00001ef0 <V2P_RunStateMachine>:
    1ef0:	ef 92       	push	r14
    1ef2:	ff 92       	push	r15
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	c0 e0       	ldi	r28, 0x00	; 0
    1efc:	ee 24       	eor	r14, r14
    1efe:	ff 24       	eor	r15, r15
    1f00:	0e 94 9f 0b 	call	0x173e <BUFF_InitialiseBuffer>
    1f04:	c0 93 81 00 	sts	0x0081, r28
    1f08:	c0 93 46 01 	sts	0x0146, r28
    1f0c:	10 92 42 01 	sts	0x0142, r1
    1f10:	10 92 43 01 	sts	0x0143, r1
    1f14:	10 92 44 01 	sts	0x0144, r1
    1f18:	10 92 45 01 	sts	0x0145, r1
    1f1c:	80 91 3f 01 	lds	r24, 0x013F
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	11 f4       	brne	.+4      	; 0x1f28 <V2P_RunStateMachine+0x38>
    1f24:	ca e0       	ldi	r28, 0x0A	; 10
    1f26:	11 c0       	rjmp	.+34     	; 0x1f4a <V2P_RunStateMachine+0x5a>
    1f28:	cc 23       	and	r28, r28
    1f2a:	79 f0       	breq	.+30     	; 0x1f4a <V2P_RunStateMachine+0x5a>
    1f2c:	10 92 3f 01 	sts	0x013F, r1
    1f30:	10 92 40 01 	sts	0x0140, r1
    1f34:	10 92 b2 00 	sts	0x00B2, r1
    1f38:	80 ef       	ldi	r24, 0xF0	; 240
    1f3a:	80 93 b3 00 	sts	0x00B3, r24
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	80 93 70 00 	sts	0x0070, r24
    1f44:	8f e0       	ldi	r24, 0x0F	; 15
    1f46:	80 93 b0 00 	sts	0x00B0, r24
    1f4a:	8c 2f       	mov	r24, r28
    1f4c:	99 27       	eor	r25, r25
    1f4e:	85 30       	cpi	r24, 0x05	; 5
    1f50:	91 05       	cpc	r25, r1
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <V2P_RunStateMachine+0x66>
    1f54:	88 c0       	rjmp	.+272    	; 0x2066 <V2P_RunStateMachine+0x176>
    1f56:	86 30       	cpi	r24, 0x06	; 6
    1f58:	91 05       	cpc	r25, r1
    1f5a:	ac f4       	brge	.+42     	; 0x1f86 <V2P_RunStateMachine+0x96>
    1f5c:	82 30       	cpi	r24, 0x02	; 2
    1f5e:	91 05       	cpc	r25, r1
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <V2P_RunStateMachine+0x74>
    1f62:	58 c0       	rjmp	.+176    	; 0x2014 <V2P_RunStateMachine+0x124>
    1f64:	83 30       	cpi	r24, 0x03	; 3
    1f66:	91 05       	cpc	r25, r1
    1f68:	34 f4       	brge	.+12     	; 0x1f76 <V2P_RunStateMachine+0x86>
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	99 f1       	breq	.+102    	; 0x1fd4 <V2P_RunStateMachine+0xe4>
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <V2P_RunStateMachine+0x84>
    1f72:	4a c0       	rjmp	.+148    	; 0x2008 <V2P_RunStateMachine+0x118>
    1f74:	d3 cf       	rjmp	.-90     	; 0x1f1c <V2P_RunStateMachine+0x2c>
    1f76:	83 30       	cpi	r24, 0x03	; 3
    1f78:	91 05       	cpc	r25, r1
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <V2P_RunStateMachine+0x8e>
    1f7c:	54 c0       	rjmp	.+168    	; 0x2026 <V2P_RunStateMachine+0x136>
    1f7e:	04 97       	sbiw	r24, 0x04	; 4
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <V2P_RunStateMachine+0x94>
    1f82:	5c c0       	rjmp	.+184    	; 0x203c <V2P_RunStateMachine+0x14c>
    1f84:	cb cf       	rjmp	.-106    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    1f86:	88 30       	cpi	r24, 0x08	; 8
    1f88:	91 05       	cpc	r25, r1
    1f8a:	d1 f0       	breq	.+52     	; 0x1fc0 <V2P_RunStateMachine+0xd0>
    1f8c:	89 30       	cpi	r24, 0x09	; 9
    1f8e:	91 05       	cpc	r25, r1
    1f90:	44 f4       	brge	.+16     	; 0x1fa2 <V2P_RunStateMachine+0xb2>
    1f92:	86 30       	cpi	r24, 0x06	; 6
    1f94:	91 05       	cpc	r25, r1
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <V2P_RunStateMachine+0xaa>
    1f98:	6e c0       	rjmp	.+220    	; 0x2076 <V2P_RunStateMachine+0x186>
    1f9a:	07 97       	sbiw	r24, 0x07	; 7
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <V2P_RunStateMachine+0xb0>
    1f9e:	7f c0       	rjmp	.+254    	; 0x209e <V2P_RunStateMachine+0x1ae>
    1fa0:	bd cf       	rjmp	.-134    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    1fa2:	89 30       	cpi	r24, 0x09	; 9
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <V2P_RunStateMachine+0xba>
    1fa8:	ac c0       	rjmp	.+344    	; 0x2102 <V2P_RunStateMachine+0x212>
    1faa:	0a 97       	sbiw	r24, 0x0a	; 10
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <V2P_RunStateMachine+0xc0>
    1fae:	b6 cf       	rjmp	.-148    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    1fb0:	82 e0       	ldi	r24, 0x02	; 2
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	90 93 48 01 	sts	0x0148, r25
    1fb8:	80 93 47 01 	sts	0x0147, r24
    1fbc:	80 e8       	ldi	r24, 0x80	; 128
    1fbe:	f7 c0       	rjmp	.+494    	; 0x21ae <V2P_RunStateMachine+0x2be>
    1fc0:	10 92 3f 01 	sts	0x013F, r1
    1fc4:	0e 94 9f 0b 	call	0x173e <BUFF_InitialiseBuffer>
    1fc8:	10 92 b0 00 	sts	0x00B0, r1
    1fcc:	10 92 70 00 	sts	0x0070, r1
    1fd0:	c0 e0       	ldi	r28, 0x00	; 0
    1fd2:	a4 cf       	rjmp	.-184    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    1fd4:	80 91 b3 02 	lds	r24, 0x02B3
    1fd8:	81 11       	cpse	r24, r1
    1fda:	c1 e0       	ldi	r28, 0x01	; 1
    1fdc:	f2 9b       	sbis	0x1e, 2	; 30
    1fde:	9e cf       	rjmp	.-196    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    1fe0:	80 91 46 01 	lds	r24, 0x0146
    1fe4:	88 23       	and	r24, r24
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <V2P_RunStateMachine+0xfa>
    1fe8:	99 cf       	rjmp	.-206    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    1fea:	80 e8       	ldi	r24, 0x80	; 128
    1fec:	80 93 61 00 	sts	0x0061, r24
    1ff0:	83 e0       	ldi	r24, 0x03	; 3
    1ff2:	80 93 61 00 	sts	0x0061, r24
    1ff6:	80 91 c1 00 	lds	r24, 0x00C1
    1ffa:	80 78       	andi	r24, 0x80	; 128
    1ffc:	80 93 c1 00 	sts	0x00C1, r24
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	80 93 81 00 	sts	0x0081, r24
    2006:	d9 c0       	rjmp	.+434    	; 0x21ba <V2P_RunStateMachine+0x2ca>
    2008:	0e 94 22 09 	call	0x1244 <USART_Rx>
    200c:	8b 31       	cpi	r24, 0x1B	; 27
    200e:	89 f5       	brne	.+98     	; 0x2072 <V2P_RunStateMachine+0x182>
    2010:	c2 e0       	ldi	r28, 0x02	; 2
    2012:	84 cf       	rjmp	.-248    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    2014:	0e 94 22 09 	call	0x1244 <USART_Rx>
    2018:	99 27       	eor	r25, r25
    201a:	90 93 4a 01 	sts	0x014A, r25
    201e:	80 93 49 01 	sts	0x0149, r24
    2022:	c3 e0       	ldi	r28, 0x03	; 3
    2024:	7b cf       	rjmp	.-266    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    2026:	0e 94 22 09 	call	0x1244 <USART_Rx>
    202a:	99 27       	eor	r25, r25
    202c:	98 2f       	mov	r25, r24
    202e:	88 27       	eor	r24, r24
    2030:	90 93 48 01 	sts	0x0148, r25
    2034:	80 93 47 01 	sts	0x0147, r24
    2038:	c4 e0       	ldi	r28, 0x04	; 4
    203a:	70 cf       	rjmp	.-288    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    203c:	0e 94 22 09 	call	0x1244 <USART_Rx>
    2040:	28 2f       	mov	r18, r24
    2042:	33 27       	eor	r19, r19
    2044:	80 91 47 01 	lds	r24, 0x0147
    2048:	90 91 48 01 	lds	r25, 0x0148
    204c:	82 2b       	or	r24, r18
    204e:	93 2b       	or	r25, r19
    2050:	90 93 48 01 	sts	0x0148, r25
    2054:	80 93 47 01 	sts	0x0147, r24
    2058:	83 51       	subi	r24, 0x13	; 19
    205a:	91 40       	sbci	r25, 0x01	; 1
    205c:	50 f4       	brcc	.+20     	; 0x2072 <V2P_RunStateMachine+0x182>
    205e:	c5 e0       	ldi	r28, 0x05	; 5
    2060:	ee 24       	eor	r14, r14
    2062:	ff 24       	eor	r15, r15
    2064:	5b cf       	rjmp	.-330    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    2066:	0e 94 22 09 	call	0x1244 <USART_Rx>
    206a:	8e 30       	cpi	r24, 0x0E	; 14
    206c:	11 f4       	brne	.+4      	; 0x2072 <V2P_RunStateMachine+0x182>
    206e:	c6 e0       	ldi	r28, 0x06	; 6
    2070:	55 cf       	rjmp	.-342    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    2072:	c9 e0       	ldi	r28, 0x09	; 9
    2074:	53 cf       	rjmp	.-346    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    2076:	80 91 47 01 	lds	r24, 0x0147
    207a:	90 91 48 01 	lds	r25, 0x0148
    207e:	e8 16       	cp	r14, r24
    2080:	f9 06       	cpc	r15, r25
    2082:	11 f4       	brne	.+4      	; 0x2088 <V2P_RunStateMachine+0x198>
    2084:	c7 e0       	ldi	r28, 0x07	; 7
    2086:	4a cf       	rjmp	.-364    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    2088:	87 01       	movw	r16, r14
    208a:	05 5b       	subi	r16, 0xB5	; 181
    208c:	1e 4f       	sbci	r17, 0xFE	; 254
    208e:	08 94       	sec
    2090:	e1 1c       	adc	r14, r1
    2092:	f1 1c       	adc	r15, r1
    2094:	0e 94 22 09 	call	0x1244 <USART_Rx>
    2098:	f8 01       	movw	r30, r16
    209a:	80 83       	st	Z, r24
    209c:	3f cf       	rjmp	.-386    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    209e:	0e 94 39 0e 	call	0x1c72 <V2P_GetChecksum>
    20a2:	18 2f       	mov	r17, r24
    20a4:	0e 94 22 09 	call	0x1244 <USART_Rx>
    20a8:	18 17       	cp	r17, r24
    20aa:	09 f0       	breq	.+2      	; 0x20ae <V2P_RunStateMachine+0x1be>
    20ac:	79 c0       	rjmp	.+242    	; 0x21a0 <V2P_RunStateMachine+0x2b0>
    20ae:	c0 91 3f 01 	lds	r28, 0x013F
    20b2:	cc 23       	and	r28, r28
    20b4:	09 f0       	breq	.+2      	; 0x20b8 <V2P_RunStateMachine+0x1c8>
    20b6:	74 c0       	rjmp	.+232    	; 0x21a0 <V2P_RunStateMachine+0x2b0>
    20b8:	80 91 4b 01 	lds	r24, 0x014B
    20bc:	99 27       	eor	r25, r25
    20be:	84 30       	cpi	r24, 0x04	; 4
    20c0:	91 05       	cpc	r25, r1
    20c2:	3c f4       	brge	.+14     	; 0x20d2 <V2P_RunStateMachine+0x1e2>
    20c4:	82 30       	cpi	r24, 0x02	; 2
    20c6:	91 05       	cpc	r25, r1
    20c8:	0c f0       	brlt	.+2      	; 0x20cc <V2P_RunStateMachine+0x1dc>
    20ca:	61 c0       	rjmp	.+194    	; 0x218e <V2P_RunStateMachine+0x29e>
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	39 f0       	breq	.+14     	; 0x20de <V2P_RunStateMachine+0x1ee>
    20d0:	61 c0       	rjmp	.+194    	; 0x2194 <V2P_RunStateMachine+0x2a4>
    20d2:	86 30       	cpi	r24, 0x06	; 6
    20d4:	91 05       	cpc	r25, r1
    20d6:	e9 f0       	breq	.+58     	; 0x2112 <V2P_RunStateMachine+0x222>
    20d8:	07 97       	sbiw	r24, 0x07	; 7
    20da:	99 f0       	breq	.+38     	; 0x2102 <V2P_RunStateMachine+0x212>
    20dc:	5b c0       	rjmp	.+182    	; 0x2194 <V2P_RunStateMachine+0x2a4>
    20de:	8b e0       	ldi	r24, 0x0B	; 11
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	90 93 48 01 	sts	0x0148, r25
    20e6:	80 93 47 01 	sts	0x0147, r24
    20ea:	ab e4       	ldi	r26, 0x4B	; 75
    20ec:	b1 e0       	ldi	r27, 0x01	; 1
    20ee:	e2 ee       	ldi	r30, 0xE2	; 226
    20f0:	f3 e0       	ldi	r31, 0x03	; 3
    20f2:	9a e0       	ldi	r25, 0x0A	; 10
    20f4:	84 91       	lpm	r24, Z
    20f6:	8d 93       	st	X+, r24
    20f8:	91 50       	subi	r25, 0x01	; 1
    20fa:	31 96       	adiw	r30, 0x01	; 1
    20fc:	97 ff       	sbrs	r25, 7
    20fe:	fa cf       	rjmp	.-12     	; 0x20f4 <V2P_RunStateMachine+0x204>
    2100:	58 c0       	rjmp	.+176    	; 0x21b2 <V2P_RunStateMachine+0x2c2>
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	90 93 48 01 	sts	0x0148, r25
    210a:	80 93 47 01 	sts	0x0147, r24
    210e:	80 ec       	ldi	r24, 0xC0	; 192
    2110:	4e c0       	rjmp	.+156    	; 0x21ae <V2P_RunStateMachine+0x2be>
    2112:	82 e0       	ldi	r24, 0x02	; 2
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	90 93 48 01 	sts	0x0148, r25
    211a:	80 93 47 01 	sts	0x0147, r24
    211e:	0e 94 4f 0f 	call	0x1e9e <V2P_CheckForExtendedAddress>
    2122:	80 91 4c 01 	lds	r24, 0x014C
    2126:	99 27       	eor	r25, r25
    2128:	aa 27       	eor	r26, r26
    212a:	bb 27       	eor	r27, r27
    212c:	b8 2f       	mov	r27, r24
    212e:	aa 27       	eor	r26, r26
    2130:	99 27       	eor	r25, r25
    2132:	88 27       	eor	r24, r24
    2134:	20 91 4d 01 	lds	r18, 0x014D
    2138:	33 27       	eor	r19, r19
    213a:	44 27       	eor	r20, r20
    213c:	55 27       	eor	r21, r21
    213e:	a9 01       	movw	r20, r18
    2140:	33 27       	eor	r19, r19
    2142:	22 27       	eor	r18, r18
    2144:	82 2b       	or	r24, r18
    2146:	93 2b       	or	r25, r19
    2148:	a4 2b       	or	r26, r20
    214a:	b5 2b       	or	r27, r21
    214c:	20 91 4e 01 	lds	r18, 0x014E
    2150:	33 27       	eor	r19, r19
    2152:	44 27       	eor	r20, r20
    2154:	55 27       	eor	r21, r21
    2156:	54 2f       	mov	r21, r20
    2158:	43 2f       	mov	r20, r19
    215a:	32 2f       	mov	r19, r18
    215c:	22 27       	eor	r18, r18
    215e:	82 2b       	or	r24, r18
    2160:	93 2b       	or	r25, r19
    2162:	a4 2b       	or	r26, r20
    2164:	b5 2b       	or	r27, r21
    2166:	20 91 4f 01 	lds	r18, 0x014F
    216a:	33 27       	eor	r19, r19
    216c:	44 27       	eor	r20, r20
    216e:	55 27       	eor	r21, r21
    2170:	82 2b       	or	r24, r18
    2172:	93 2b       	or	r25, r19
    2174:	a4 2b       	or	r26, r20
    2176:	b5 2b       	or	r27, r21
    2178:	80 93 42 01 	sts	0x0142, r24
    217c:	90 93 43 01 	sts	0x0143, r25
    2180:	a0 93 44 01 	sts	0x0144, r26
    2184:	b0 93 45 01 	sts	0x0145, r27
    2188:	c0 93 4c 01 	sts	0x014C, r28
    218c:	12 c0       	rjmp	.+36     	; 0x21b2 <V2P_RunStateMachine+0x2c2>
    218e:	0e 94 9a 0e 	call	0x1d34 <V2P_GetSetParamater>
    2192:	11 c0       	rjmp	.+34     	; 0x21b6 <V2P_RunStateMachine+0x2c6>
    2194:	e0 91 02 01 	lds	r30, 0x0102
    2198:	f0 91 03 01 	lds	r31, 0x0103
    219c:	09 95       	icall
    219e:	0b c0       	rjmp	.+22     	; 0x21b6 <V2P_RunStateMachine+0x2c6>
    21a0:	82 e0       	ldi	r24, 0x02	; 2
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	90 93 48 01 	sts	0x0148, r25
    21a8:	80 93 47 01 	sts	0x0147, r24
    21ac:	81 ec       	ldi	r24, 0xC1	; 193
    21ae:	80 93 4c 01 	sts	0x014C, r24
    21b2:	0e 94 5a 0e 	call	0x1cb4 <V2P_SendPacket>
    21b6:	c8 e0       	ldi	r28, 0x08	; 8
    21b8:	b1 ce       	rjmp	.-670    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    21ba:	cf 91       	pop	r28
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	ff 90       	pop	r15
    21c2:	ef 90       	pop	r14
    21c4:	08 95       	ret

000021c6 <ISPCC_EnterChipProgrammingMode>:

// ======================================================================================

void ISPCC_EnterChipProgrammingMode(void)
{
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
	uint8_t ByteDelay = PacketBytes[5];
    21cc:	10 91 50 01 	lds	r17, 0x0150
	uint8_t Attempts  = PacketBytes[4];
    21d0:	c0 91 4f 01 	lds	r28, 0x014F
	uint8_t Response;

	MAIN_Delay1MS(PacketBytes[2]);         // Wait before continuing, amount specified in the packet
    21d4:	80 91 4d 01 	lds	r24, 0x014D
    21d8:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>

	if ((!(Attempts)) || (Attempts > 100)) // if no attempts or too high a value is specified, a fixed number is chosen
    21dc:	8c 2f       	mov	r24, r28
    21de:	81 50       	subi	r24, 0x01	; 1
    21e0:	84 36       	cpi	r24, 0x64	; 100
    21e2:	08 f0       	brcs	.+2      	; 0x21e6 <ISPCC_EnterChipProgrammingMode+0x20>
	   Attempts = 24;
    21e4:	c8 e1       	ldi	r28, 0x18	; 24
		
	while (Attempts--)
	{
		USI_SPITransmit(PacketBytes[8]);
		MAIN_Delay1MS(ByteDelay);
		USI_SPITransmit(PacketBytes[9]);
		MAIN_Delay1MS(ByteDelay);
			
		Response = USI_SPITransmit(PacketBytes[10]);
		MAIN_Delay1MS(ByteDelay);

		if (PacketBytes[7] == ISPCC_POLL_MODE_AVR)
		  USI_SPITransmit(PacketBytes[11]);
		else
		  Response = USI_SPITransmit(PacketBytes[11]);
				
		if (!(PacketBytes[7]) || (Response == PacketBytes[6])) // Polling disabled, or returned value matches expected poll value
		{
			MAIN_Delay1MS(ByteDelay);

			InProgrammingMode = TRUE;
			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;
			return;
		}
		
		MAIN_Delay1MS(ByteDelay);
		USI_SPIToggleClock();            // Out of sync, shift in one bit and try again
    21e6:	c1 50       	subi	r28, 0x01	; 1
    21e8:	cf 3f       	cpi	r28, 0xFF	; 255
    21ea:	09 f4       	brne	.+2      	; 0x21ee <ISPCC_EnterChipProgrammingMode+0x28>
    21ec:	3f c0       	rjmp	.+126    	; 0x226c <ISPCC_EnterChipProgrammingMode+0xa6>
    21ee:	80 91 53 01 	lds	r24, 0x0153
    21f2:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    21f6:	81 2f       	mov	r24, r17
    21f8:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    21fc:	80 91 54 01 	lds	r24, 0x0154
    2200:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2204:	81 2f       	mov	r24, r17
    2206:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    220a:	80 91 55 01 	lds	r24, 0x0155
    220e:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2212:	08 2f       	mov	r16, r24
    2214:	81 2f       	mov	r24, r17
    2216:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    221a:	80 91 52 01 	lds	r24, 0x0152
    221e:	83 30       	cpi	r24, 0x03	; 3
    2220:	29 f4       	brne	.+10     	; 0x222c <ISPCC_EnterChipProgrammingMode+0x66>
    2222:	80 91 56 01 	lds	r24, 0x0156
    2226:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    222a:	05 c0       	rjmp	.+10     	; 0x2236 <ISPCC_EnterChipProgrammingMode+0x70>
    222c:	80 91 56 01 	lds	r24, 0x0156
    2230:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2234:	08 2f       	mov	r16, r24
    2236:	80 91 52 01 	lds	r24, 0x0152
    223a:	88 23       	and	r24, r24
    223c:	21 f0       	breq	.+8      	; 0x2246 <ISPCC_EnterChipProgrammingMode+0x80>
    223e:	80 91 51 01 	lds	r24, 0x0151
    2242:	08 17       	cp	r16, r24
    2244:	69 f4       	brne	.+26     	; 0x2260 <ISPCC_EnterChipProgrammingMode+0x9a>
    2246:	81 2f       	mov	r24, r17
    2248:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	80 93 46 01 	sts	0x0146, r24
    2252:	81 b3       	in	r24, 0x11	; 17
    2254:	8f 7c       	andi	r24, 0xCF	; 207
    2256:	80 62       	ori	r24, 0x20	; 32
    2258:	81 bb       	out	0x11, r24	; 17
    225a:	10 92 4c 01 	sts	0x014C, r1
    225e:	0d c0       	rjmp	.+26     	; 0x227a <ISPCC_EnterChipProgrammingMode+0xb4>
    2260:	81 2f       	mov	r24, r17
    2262:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    2266:	0e 94 be 09 	call	0x137c <USI_SPIToggleClock>
    226a:	bd cf       	rjmp	.-134    	; 0x21e6 <ISPCC_EnterChipProgrammingMode+0x20>
	}

	// If function hasn't returned by now, all the attempts have failed. Show this by
	// resetting the status leds to green (ready) and send a fail message.

	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
    226c:	81 b3       	in	r24, 0x11	; 17
    226e:	8f 7c       	andi	r24, 0xCF	; 207
    2270:	80 61       	ori	r24, 0x10	; 16
    2272:	81 bb       	out	0x11, r24	; 17
	PacketBytes[1] = STATUS_CMD_FAILED;
    2274:	80 ec       	ldi	r24, 0xC0	; 192
    2276:	80 93 4c 01 	sts	0x014C, r24
    227a:	cf 91       	pop	r28
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	08 95       	ret

00002282 <ISPCC_PollForProgComplete>:
}

void ISPCC_ProgramChip(void)
{
	uint16_t PollAddress  = 0;
	uint8_t  ProgMode     = PacketBytes[3];
	uint8_t  WriteCommand = PacketBytes[5];
	uint16_t StartAddress = (uint16_t)CurrAddress;
	uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
	                      | PacketBytes[2];
	uint8_t  PollType;
	uint8_t  ByteToWrite;
			
	if (ProgMode & ISPCC_PROG_MODE_PAGE)                 // Page writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++) // Transmit the page bytes
		{
			ByteToWrite = PacketBytes[10 + WriteByte];
		
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash write mode - word addresses so MSB/LSB masking 
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else                                         // EEPROM write mode - byte addresses so no masking 
			   USI_SPITransmit(WriteCommand);

			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Only the LSW of the address should be sent
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			if (!(PollAddress))
			{
				if ((PacketBytes[8] != ByteToWrite)       // Can do polling
				   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
				{
					PollAddress = (CurrAddress & 0xFFFF); // Save the current address
				
					if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
					   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
				}
			}

			// Flash addresses are in words; only increment address on odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();
		}

		PollType = ProgMode;

		if (ProgMode & ISPCC_PROG_MODE_PAGEDONE)         // If this packet is the end of a page, we need to send the program page command
		{
			USI_SPITransmit(PacketBytes[6]);             // Send the write program memory page command
			USI_SPITransmitWord(StartAddress);           // Send the page address word
			USI_SPITransmit(0x00);

			if (!(PollAddress))                          // No polling address
			   PollType = ((ProgMode & ~ISPCC_PAGE_POLLTYPE_MASK) | ISPCC_PAGE_POLLTYPE_WAIT);

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
	else                                                 // Flash Word writing mode or EEPROM byte writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++)
		{
			ByteToWrite = PacketBytes[10 + WriteByte];

			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else
			   USI_SPITransmit(WriteCommand);					
					
			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Transmit the current address to the slave AVR
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			PollType = ProgMode;

			if ((PacketBytes[8] != ByteToWrite)           // Can do polling
			   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
			{
				PollAddress = (CurrAddress & 0xFFFF);     // Save the current address;

				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
				   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
			}
			else
			{
				PollType = ((ProgMode & ~ISPCC_WORD_POLLTYPE_MASK) | ISPCC_WORD_POLLTYPE_WAIT);
			}					

			// Flash addresses are in words; only increment address on the odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
}

void ISPCC_PollForProgComplete(const uint8_t PollData, uint16_t PollAddr)
{
    2282:	1f 93       	push	r17
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	eb 01       	movw	r28, r22
	uint8_t PollType;
	uint8_t ProgCommand;

	if (PollData & ISPCC_PROG_MODE_PAGE)
    228a:	99 27       	eor	r25, r25
    228c:	80 ff       	sbrs	r24, 0
    228e:	08 c0       	rjmp	.+16     	; 0x22a0 <ISPCC_PollForProgComplete+0x1e>
	   PollType = ((PollData & ISPCC_PAGE_POLLTYPE_MASK) >> ISPCC_PAGE_POLLTYPE_MASKSHIFT);
    2290:	80 77       	andi	r24, 0x70	; 112
    2292:	90 70       	andi	r25, 0x00	; 0
    2294:	34 e0       	ldi	r19, 0x04	; 4
    2296:	95 95       	asr	r25
    2298:	87 95       	ror	r24
    229a:	3a 95       	dec	r19
    229c:	e1 f7       	brne	.-8      	; 0x2296 <ISPCC_PollForProgComplete+0x14>
    229e:	04 c0       	rjmp	.+8      	; 0x22a8 <ISPCC_PollForProgComplete+0x26>
	else
	   PollType = ((PollData & ISPCC_WORD_POLLTYPE_MASK) >> ISPCC_WORD_POLLTYPE_MASKSHIFT);	
    22a0:	8e 70       	andi	r24, 0x0E	; 14
    22a2:	90 70       	andi	r25, 0x00	; 0
    22a4:	95 95       	asr	r25
    22a6:	87 95       	ror	r24

	switch (PollType & ISPCC_POLLTYPE_MASK)
    22a8:	99 27       	eor	r25, r25
    22aa:	87 70       	andi	r24, 0x07	; 7
    22ac:	90 70       	andi	r25, 0x00	; 0
    22ae:	82 30       	cpi	r24, 0x02	; 2
    22b0:	91 05       	cpc	r25, r1
    22b2:	19 f0       	breq	.+6      	; 0x22ba <ISPCC_PollForProgComplete+0x38>
    22b4:	04 97       	sbiw	r24, 0x04	; 4
    22b6:	e1 f0       	breq	.+56     	; 0x22f0 <ISPCC_PollForProgComplete+0x6e>
    22b8:	26 c0       	rjmp	.+76     	; 0x2306 <ISPCC_PollForProgComplete+0x84>
	{
		case ISPCC_POLLTYPE_DATA:
			ProgCommand = PacketBytes[7];
    22ba:	10 91 52 01 	lds	r17, 0x0152
			
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash uses word addresses
    22be:	80 91 4b 01 	lds	r24, 0x014B
    22c2:	83 31       	cpi	r24, 0x13	; 19
    22c4:	39 f4       	brne	.+14     	; 0x22d4 <ISPCC_PollForProgComplete+0x52>
			{
				ProgCommand  |= ((PollAddr & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ);
    22c6:	81 2f       	mov	r24, r17
    22c8:	99 27       	eor	r25, r25
    22ca:	c0 fd       	sbrc	r28, 0
    22cc:	88 60       	ori	r24, 0x08	; 8
    22ce:	18 2f       	mov	r17, r24
				PollAddr    >>= 1;
    22d0:	d6 95       	lsr	r29
    22d2:	c7 95       	ror	r28
			}

			do
			{
				USI_SPITransmit(ProgCommand);
    22d4:	81 2f       	mov	r24, r17
    22d6:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
				USI_SPITransmitWord(PollAddr);
    22da:	ce 01       	movw	r24, r28
    22dc:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
			}
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    22e6:	90 91 53 01 	lds	r25, 0x0153
    22ea:	89 17       	cp	r24, r25
    22ec:	99 f3       	breq	.-26     	; 0x22d4 <ISPCC_PollForProgComplete+0x52>
			while (USI_SPITransmit(0x00) == PacketBytes[8]);
						
			break;
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <ISPCC_PollForProgComplete+0x8c>
		case ISPCC_POLLTYPE_READY:
			do
			   USI_SPITransmitWord(0xF000);
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	90 ef       	ldi	r25, 0xF0	; 240
    22f4:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2300:	80 fd       	sbrc	r24, 0
    2302:	f6 cf       	rjmp	.-20     	; 0x22f0 <ISPCC_PollForProgComplete+0x6e>
			while (USI_SPITransmitWord(0x0000) & ISPCC_POLL_BUSYFLAG);

			break;
    2304:	04 c0       	rjmp	.+8      	; 0x230e <ISPCC_PollForProgComplete+0x8c>
		default:                                      // Default is Wait polling
			MAIN_Delay1MS(PacketBytes[4]);	
    2306:	80 91 4f 01 	lds	r24, 0x014F
    230a:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	1f 91       	pop	r17
    2314:	08 95       	ret

00002316 <ISPCC_ProgramChip>:
    2316:	6f 92       	push	r6
    2318:	7f 92       	push	r7
    231a:	9f 92       	push	r9
    231c:	af 92       	push	r10
    231e:	bf 92       	push	r11
    2320:	cf 92       	push	r12
    2322:	df 92       	push	r13
    2324:	ef 92       	push	r14
    2326:	ff 92       	push	r15
    2328:	0f 93       	push	r16
    232a:	1f 93       	push	r17
    232c:	cf 93       	push	r28
    232e:	df 93       	push	r29
    2330:	00 e0       	ldi	r16, 0x00	; 0
    2332:	10 e0       	ldi	r17, 0x00	; 0
    2334:	90 90 4e 01 	lds	r9, 0x014E
    2338:	c0 90 50 01 	lds	r12, 0x0150
    233c:	60 90 42 01 	lds	r6, 0x0142
    2340:	70 90 43 01 	lds	r7, 0x0143
    2344:	80 91 4c 01 	lds	r24, 0x014C
    2348:	99 27       	eor	r25, r25
    234a:	b8 2e       	mov	r11, r24
    234c:	aa 24       	eor	r10, r10
    234e:	80 91 4d 01 	lds	r24, 0x014D
    2352:	99 27       	eor	r25, r25
    2354:	a8 2a       	or	r10, r24
    2356:	b9 2a       	or	r11, r25
    2358:	90 fe       	sbrs	r9, 0
    235a:	62 c0       	rjmp	.+196    	; 0x2420 <ISPCC_ProgramChip+0x10a>
    235c:	78 01       	movw	r14, r16
    235e:	0a 15       	cp	r16, r10
    2360:	1b 05       	cpc	r17, r11
    2362:	08 f0       	brcs	.+2      	; 0x2366 <ISPCC_ProgramChip+0x50>
    2364:	46 c0       	rjmp	.+140    	; 0x23f2 <ISPCC_ProgramChip+0xdc>
    2366:	c5 e5       	ldi	r28, 0x55	; 85
    2368:	d1 e0       	ldi	r29, 0x01	; 1
    236a:	d9 90       	ld	r13, Y+
    236c:	80 91 4b 01 	lds	r24, 0x014B
    2370:	83 31       	cpi	r24, 0x13	; 19
    2372:	31 f4       	brne	.+12     	; 0x2380 <ISPCC_ProgramChip+0x6a>
    2374:	8c 2d       	mov	r24, r12
    2376:	99 27       	eor	r25, r25
    2378:	e0 fe       	sbrs	r14, 0
    237a:	03 c0       	rjmp	.+6      	; 0x2382 <ISPCC_ProgramChip+0x6c>
    237c:	88 60       	ori	r24, 0x08	; 8
    237e:	01 c0       	rjmp	.+2      	; 0x2382 <ISPCC_ProgramChip+0x6c>
    2380:	8c 2d       	mov	r24, r12
    2382:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2386:	80 91 42 01 	lds	r24, 0x0142
    238a:	90 91 43 01 	lds	r25, 0x0143
    238e:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2392:	8d 2d       	mov	r24, r13
    2394:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2398:	01 15       	cp	r16, r1
    239a:	11 05       	cpc	r17, r1
    239c:	d9 f4       	brne	.+54     	; 0x23d4 <ISPCC_ProgramChip+0xbe>
    239e:	80 91 53 01 	lds	r24, 0x0153
    23a2:	8d 15       	cp	r24, r13
    23a4:	b9 f0       	breq	.+46     	; 0x23d4 <ISPCC_ProgramChip+0xbe>
    23a6:	90 91 4b 01 	lds	r25, 0x014B
    23aa:	93 31       	cpi	r25, 0x13	; 19
    23ac:	31 f0       	breq	.+12     	; 0x23ba <ISPCC_ProgramChip+0xa4>
    23ae:	95 31       	cpi	r25, 0x15	; 21
    23b0:	89 f4       	brne	.+34     	; 0x23d4 <ISPCC_ProgramChip+0xbe>
    23b2:	80 91 54 01 	lds	r24, 0x0154
    23b6:	8d 15       	cp	r24, r13
    23b8:	69 f0       	breq	.+26     	; 0x23d4 <ISPCC_ProgramChip+0xbe>
    23ba:	00 91 42 01 	lds	r16, 0x0142
    23be:	10 91 43 01 	lds	r17, 0x0143
    23c2:	93 31       	cpi	r25, 0x13	; 19
    23c4:	39 f4       	brne	.+14     	; 0x23d4 <ISPCC_ProgramChip+0xbe>
    23c6:	00 0f       	add	r16, r16
    23c8:	11 1f       	adc	r17, r17
    23ca:	c7 01       	movw	r24, r14
    23cc:	81 70       	andi	r24, 0x01	; 1
    23ce:	90 70       	andi	r25, 0x00	; 0
    23d0:	08 0f       	add	r16, r24
    23d2:	19 1f       	adc	r17, r25
    23d4:	e0 fc       	sbrc	r14, 0
    23d6:	04 c0       	rjmp	.+8      	; 0x23e0 <ISPCC_ProgramChip+0xca>
    23d8:	80 91 4b 01 	lds	r24, 0x014B
    23dc:	85 31       	cpi	r24, 0x15	; 21
    23de:	11 f4       	brne	.+4      	; 0x23e4 <ISPCC_ProgramChip+0xce>
    23e0:	0e 94 3b 0f 	call	0x1e76 <V2P_IncrementCurrAddress>
    23e4:	08 94       	sec
    23e6:	e1 1c       	adc	r14, r1
    23e8:	f1 1c       	adc	r15, r1
    23ea:	ea 14       	cp	r14, r10
    23ec:	fb 04       	cpc	r15, r11
    23ee:	08 f4       	brcc	.+2      	; 0x23f2 <ISPCC_ProgramChip+0xdc>
    23f0:	bc cf       	rjmp	.-136    	; 0x236a <ISPCC_ProgramChip+0x54>
    23f2:	c9 2d       	mov	r28, r9
    23f4:	97 fe       	sbrs	r9, 7
    23f6:	69 c0       	rjmp	.+210    	; 0x24ca <ISPCC_ProgramChip+0x1b4>
    23f8:	80 91 51 01 	lds	r24, 0x0151
    23fc:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2400:	c3 01       	movw	r24, r6
    2402:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    240c:	01 15       	cp	r16, r1
    240e:	11 05       	cpc	r17, r1
    2410:	11 f4       	brne	.+4      	; 0x2416 <ISPCC_ProgramChip+0x100>
    2412:	cf 78       	andi	r28, 0x8F	; 143
    2414:	c0 61       	ori	r28, 0x10	; 16
    2416:	b8 01       	movw	r22, r16
    2418:	8c 2f       	mov	r24, r28
    241a:	0e 94 41 11 	call	0x2282 <ISPCC_PollForProgComplete>
    241e:	55 c0       	rjmp	.+170    	; 0x24ca <ISPCC_ProgramChip+0x1b4>
    2420:	78 01       	movw	r14, r16
    2422:	0a 15       	cp	r16, r10
    2424:	1b 05       	cpc	r17, r11
    2426:	08 f0       	brcs	.+2      	; 0x242a <ISPCC_ProgramChip+0x114>
    2428:	50 c0       	rjmp	.+160    	; 0x24ca <ISPCC_ProgramChip+0x1b4>
    242a:	55 e5       	ldi	r21, 0x55	; 85
    242c:	65 2e       	mov	r6, r21
    242e:	51 e0       	ldi	r21, 0x01	; 1
    2430:	75 2e       	mov	r7, r21
    2432:	f3 01       	movw	r30, r6
    2434:	d1 90       	ld	r13, Z+
    2436:	3f 01       	movw	r6, r30
    2438:	80 91 4b 01 	lds	r24, 0x014B
    243c:	83 31       	cpi	r24, 0x13	; 19
    243e:	31 f4       	brne	.+12     	; 0x244c <ISPCC_ProgramChip+0x136>
    2440:	8c 2d       	mov	r24, r12
    2442:	99 27       	eor	r25, r25
    2444:	e0 fe       	sbrs	r14, 0
    2446:	03 c0       	rjmp	.+6      	; 0x244e <ISPCC_ProgramChip+0x138>
    2448:	88 60       	ori	r24, 0x08	; 8
    244a:	01 c0       	rjmp	.+2      	; 0x244e <ISPCC_ProgramChip+0x138>
    244c:	8c 2d       	mov	r24, r12
    244e:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2452:	80 91 42 01 	lds	r24, 0x0142
    2456:	90 91 43 01 	lds	r25, 0x0143
    245a:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    245e:	8d 2d       	mov	r24, r13
    2460:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2464:	c9 2d       	mov	r28, r9
    2466:	80 91 53 01 	lds	r24, 0x0153
    246a:	8d 15       	cp	r24, r13
    246c:	c1 f0       	breq	.+48     	; 0x249e <ISPCC_ProgramChip+0x188>
    246e:	90 91 4b 01 	lds	r25, 0x014B
    2472:	93 31       	cpi	r25, 0x13	; 19
    2474:	31 f0       	breq	.+12     	; 0x2482 <ISPCC_ProgramChip+0x16c>
    2476:	95 31       	cpi	r25, 0x15	; 21
    2478:	91 f4       	brne	.+36     	; 0x249e <ISPCC_ProgramChip+0x188>
    247a:	80 91 54 01 	lds	r24, 0x0154
    247e:	8d 15       	cp	r24, r13
    2480:	71 f0       	breq	.+28     	; 0x249e <ISPCC_ProgramChip+0x188>
    2482:	00 91 42 01 	lds	r16, 0x0142
    2486:	10 91 43 01 	lds	r17, 0x0143
    248a:	93 31       	cpi	r25, 0x13	; 19
    248c:	59 f4       	brne	.+22     	; 0x24a4 <ISPCC_ProgramChip+0x18e>
    248e:	00 0f       	add	r16, r16
    2490:	11 1f       	adc	r17, r17
    2492:	c7 01       	movw	r24, r14
    2494:	81 70       	andi	r24, 0x01	; 1
    2496:	90 70       	andi	r25, 0x00	; 0
    2498:	08 0f       	add	r16, r24
    249a:	19 1f       	adc	r17, r25
    249c:	03 c0       	rjmp	.+6      	; 0x24a4 <ISPCC_ProgramChip+0x18e>
    249e:	c9 2d       	mov	r28, r9
    24a0:	c1 7f       	andi	r28, 0xF1	; 241
    24a2:	c2 60       	ori	r28, 0x02	; 2
    24a4:	e0 fc       	sbrc	r14, 0
    24a6:	04 c0       	rjmp	.+8      	; 0x24b0 <ISPCC_ProgramChip+0x19a>
    24a8:	80 91 4b 01 	lds	r24, 0x014B
    24ac:	85 31       	cpi	r24, 0x15	; 21
    24ae:	11 f4       	brne	.+4      	; 0x24b4 <ISPCC_ProgramChip+0x19e>
    24b0:	0e 94 3b 0f 	call	0x1e76 <V2P_IncrementCurrAddress>
    24b4:	b8 01       	movw	r22, r16
    24b6:	8c 2f       	mov	r24, r28
    24b8:	0e 94 41 11 	call	0x2282 <ISPCC_PollForProgComplete>
    24bc:	08 94       	sec
    24be:	e1 1c       	adc	r14, r1
    24c0:	f1 1c       	adc	r15, r1
    24c2:	ea 14       	cp	r14, r10
    24c4:	fb 04       	cpc	r15, r11
    24c6:	08 f4       	brcc	.+2      	; 0x24ca <ISPCC_ProgramChip+0x1b4>
    24c8:	b4 cf       	rjmp	.-152    	; 0x2432 <ISPCC_ProgramChip+0x11c>
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	1f 91       	pop	r17
    24d0:	0f 91       	pop	r16
    24d2:	ff 90       	pop	r15
    24d4:	ef 90       	pop	r14
    24d6:	df 90       	pop	r13
    24d8:	cf 90       	pop	r12
    24da:	bf 90       	pop	r11
    24dc:	af 90       	pop	r10
    24de:	9f 90       	pop	r9
    24e0:	7f 90       	pop	r7
    24e2:	6f 90       	pop	r6
    24e4:	08 95       	ret

000024e6 <AICI_InterpretPacket>:

// ======================================================================================

void AICI_InterpretPacket(void)
{
    24e6:	df 92       	push	r13
    24e8:	ef 92       	push	r14
    24ea:	ff 92       	push	r15
    24ec:	0f 93       	push	r16
    24ee:	1f 93       	push	r17
    24f0:	cf 93       	push	r28
    24f2:	df 93       	push	r29
	switch (PacketBytes[0])
    24f4:	80 91 4b 01 	lds	r24, 0x014B
    24f8:	99 27       	eor	r25, r25
    24fa:	86 31       	cpi	r24, 0x16	; 22
    24fc:	91 05       	cpc	r25, r1
    24fe:	09 f4       	brne	.+2      	; 0x2502 <AICI_InterpretPacket+0x1c>
    2500:	fb c0       	rjmp	.+502    	; 0x26f8 <AICI_InterpretPacket+0x212>
    2502:	87 31       	cpi	r24, 0x17	; 23
    2504:	91 05       	cpc	r25, r1
    2506:	94 f4       	brge	.+36     	; 0x252c <AICI_InterpretPacket+0x46>
    2508:	82 31       	cpi	r24, 0x12	; 18
    250a:	91 05       	cpc	r25, r1
    250c:	09 f4       	brne	.+2      	; 0x2510 <AICI_InterpretPacket+0x2a>
    250e:	60 c0       	rjmp	.+192    	; 0x25d0 <AICI_InterpretPacket+0xea>
    2510:	83 31       	cpi	r24, 0x13	; 19
    2512:	91 05       	cpc	r25, r1
    2514:	3c f4       	brge	.+14     	; 0x2524 <AICI_InterpretPacket+0x3e>
    2516:	80 31       	cpi	r24, 0x10	; 16
    2518:	91 05       	cpc	r25, r1
    251a:	f9 f0       	breq	.+62     	; 0x255a <AICI_InterpretPacket+0x74>
    251c:	41 97       	sbiw	r24, 0x11	; 17
    251e:	09 f4       	brne	.+2      	; 0x2522 <AICI_InterpretPacket+0x3c>
    2520:	3d c0       	rjmp	.+122    	; 0x259c <AICI_InterpretPacket+0xb6>
    2522:	3e c1       	rjmp	.+636    	; 0x27a0 <AICI_InterpretPacket+0x2ba>
    2524:	44 97       	sbiw	r24, 0x14	; 20
    2526:	09 f4       	brne	.+2      	; 0x252a <AICI_InterpretPacket+0x44>
    2528:	e7 c0       	rjmp	.+462    	; 0x26f8 <AICI_InterpretPacket+0x212>
    252a:	2f c1       	rjmp	.+606    	; 0x278a <AICI_InterpretPacket+0x2a4>
    252c:	89 31       	cpi	r24, 0x19	; 25
    252e:	91 05       	cpc	r25, r1
    2530:	09 f4       	brne	.+2      	; 0x2534 <AICI_InterpretPacket+0x4e>
    2532:	cc c0       	rjmp	.+408    	; 0x26cc <AICI_InterpretPacket+0x1e6>
    2534:	8a 31       	cpi	r24, 0x1A	; 26
    2536:	91 05       	cpc	r25, r1
    2538:	44 f4       	brge	.+16     	; 0x254a <AICI_InterpretPacket+0x64>
    253a:	87 31       	cpi	r24, 0x17	; 23
    253c:	91 05       	cpc	r25, r1
    253e:	09 f4       	brne	.+2      	; 0x2542 <AICI_InterpretPacket+0x5c>
    2540:	c5 c0       	rjmp	.+394    	; 0x26cc <AICI_InterpretPacket+0x1e6>
    2542:	48 97       	sbiw	r24, 0x18	; 24
    2544:	09 f4       	brne	.+2      	; 0x2548 <AICI_InterpretPacket+0x62>
    2546:	a5 c0       	rjmp	.+330    	; 0x2692 <AICI_InterpretPacket+0x1ac>
    2548:	2b c1       	rjmp	.+598    	; 0x27a0 <AICI_InterpretPacket+0x2ba>
    254a:	8d 31       	cpi	r24, 0x1D	; 29
    254c:	91 05       	cpc	r25, r1
    254e:	0c f4       	brge	.+2      	; 0x2552 <AICI_InterpretPacket+0x6c>
    2550:	a0 c0       	rjmp	.+320    	; 0x2692 <AICI_InterpretPacket+0x1ac>
    2552:	4d 97       	sbiw	r24, 0x1d	; 29
    2554:	09 f4       	brne	.+2      	; 0x2558 <AICI_InterpretPacket+0x72>
    2556:	61 c0       	rjmp	.+194    	; 0x261a <AICI_InterpretPacket+0x134>
    2558:	23 c1       	rjmp	.+582    	; 0x27a0 <AICI_InterpretPacket+0x2ba>
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
    255a:	82 e0       	ldi	r24, 0x02	; 2
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	90 93 48 01 	sts	0x0148, r25
    2562:	80 93 47 01 	sts	0x0147, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2566:	a1 e0       	ldi	r26, 0x01	; 1
    2568:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    256a:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
    256e:	80 2d       	mov	r24, r0
    2570:	0e 94 83 09 	call	0x1306 <USI_SPIInitMaster>
			
			USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));

			MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);  // Pull the slave AVR's RESET line to active
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
			MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE); // Orange = Busy
    257a:	81 b3       	in	r24, 0x11	; 17
    257c:	80 63       	ori	r24, 0x30	; 48
    257e:	81 bb       	out	0x11, r24	; 17
			ISPCC_EnterChipProgrammingMode();       // Run the Enter Programming Mode routine
    2580:	0e 94 e3 10 	call	0x21c6 <ISPCC_EnterChipProgrammingMode>

			if (InProgrammingMode)
    2584:	80 91 46 01 	lds	r24, 0x0146
    2588:	88 23       	and	r24, r24
    258a:	19 f0       	breq	.+6      	; 0x2592 <AICI_InterpretPacket+0xac>
			   LCD_puts_f(AVRISPModeMessage);
    258c:	88 ef       	ldi	r24, 0xF8	; 248
    258e:	93 e0       	ldi	r25, 0x03	; 3
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <AICI_InterpretPacket+0xb0>
			else
			   LCD_puts_f(SyncErrorMessage);
    2592:	8d ee       	ldi	r24, 0xED	; 237
    2594:	93 e0       	ldi	r25, 0x03	; 3
    2596:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
			
			break;
    259a:	0b c1       	rjmp	.+534    	; 0x27b2 <AICI_InterpretPacket+0x2cc>
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;
    259c:	82 e0       	ldi	r24, 0x02	; 2
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	90 93 48 01 	sts	0x0148, r25
    25a4:	80 93 47 01 	sts	0x0147, r24

			MAIN_Delay1MS(PacketBytes[1]);           // Wait for the "PreDelay" amount specified in the packet
    25a8:	80 91 4c 01 	lds	r24, 0x014C
    25ac:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Non programming mode = green status led
    25b0:	81 b3       	in	r24, 0x11	; 17
    25b2:	8f 7c       	andi	r24, 0xCF	; 207
    25b4:	80 61       	ori	r24, 0x10	; 16
    25b6:	81 bb       	out	0x11, r24	; 17
			InProgrammingMode = FALSE;
    25b8:	10 92 46 01 	sts	0x0146, r1
			MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
			MAIN_Delay1MS(PacketBytes[2]);           // Wait for the "PostDelay" amount specified in the packet
    25c2:	80 91 4d 01 	lds	r24, 0x014D
    25c6:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
			
			USI_SPIOff();
    25ca:	0e 94 93 09 	call	0x1326 <USI_SPIOff>
    25ce:	e5 c0       	rjmp	.+458    	; 0x279a <AICI_InterpretPacket+0x2b4>

			PacketBytes[1] = STATUS_CMD_OK;      // Return OK

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;
    25d0:	82 e0       	ldi	r24, 0x02	; 2
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	90 93 48 01 	sts	0x0148, r25
    25d8:	80 93 47 01 	sts	0x0147, r24
			
			for (uint8_t PacketB = 3; PacketB <= 6; PacketB++) // Send the erase commands to the slave AVR
    25dc:	c3 e0       	ldi	r28, 0x03	; 3
    25de:	0e e4       	ldi	r16, 0x4E	; 78
    25e0:	11 e0       	ldi	r17, 0x01	; 1
				USI_SPITransmit(PacketBytes[PacketB]);
    25e2:	f8 01       	movw	r30, r16
    25e4:	81 91       	ld	r24, Z+
    25e6:	8f 01       	movw	r16, r30
    25e8:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    25ec:	c1 50       	subi	r28, 0x01	; 1
    25ee:	c7 ff       	sbrs	r28, 7
    25f0:	f8 cf       	rjmp	.-16     	; 0x25e2 <AICI_InterpretPacket+0xfc>

			if (PacketBytes[2])                  // Poll mode, value of 1 indicates a busy flag wait
    25f2:	80 91 4d 01 	lds	r24, 0x014D
    25f6:	88 23       	and	r24, r24
    25f8:	59 f0       	breq	.+22     	; 0x2610 <AICI_InterpretPacket+0x12a>
			{
				do
					USI_SPITransmitWord(0xF000);
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 ef       	ldi	r25, 0xF0	; 240
    25fe:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    260a:	80 fd       	sbrc	r24, 0
    260c:	f6 cf       	rjmp	.-20     	; 0x25fa <AICI_InterpretPacket+0x114>
    260e:	c5 c0       	rjmp	.+394    	; 0x279a <AICI_InterpretPacket+0x2b4>
				while (USI_SPITransmitWord(0x0000) & 0x01);
			}
			else                                // Poll mode flag of 0 indicates a predefined delay
			{
				MAIN_Delay1MS(PacketBytes[1]);   // Wait the specified interval to ensure erase complete
    2610:	80 91 4c 01 	lds	r24, 0x014C
    2614:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    2618:	c0 c0       	rjmp	.+384    	; 0x279a <AICI_InterpretPacket+0x2b4>
			}
			
			PacketBytes[1] = STATUS_CMD_OK;      // Always return OK
			
			break;
		case CMD_SPI_MULTI:
				MessageSize = (3 + PacketBytes[2]);    // Number of recieved bytes, plus two OKs and the command byte
    261a:	e0 90 4d 01 	lds	r14, 0x014D
    261e:	8e 2d       	mov	r24, r14
    2620:	99 27       	eor	r25, r25
    2622:	03 96       	adiw	r24, 0x03	; 3
    2624:	90 93 48 01 	sts	0x0148, r25
    2628:	80 93 47 01 	sts	0x0147, r24
		
				uint8_t TxBytes      = PacketBytes[1]; // \. The packet data is overwritten during the transfer. Because
    262c:	00 91 4c 01 	lds	r16, 0x014C
				uint8_t RxStartByte  = PacketBytes[2]; // |  of this each data byte must be stored into temp variables
				uint8_t RxBytes      = PacketBytes[3]; // /  so that their contents are not lost.
    2630:	f0 90 4e 01 	lds	r15, 0x014E
				uint8_t RxByteNum    = 1;
    2634:	c1 e0       	ldi	r28, 0x01	; 1
				uint8_t TxByteNum    = 1;
				uint8_t RecievedByte = 0;

				while (TxByteNum++ < TxBytes)          // Still bytes to transfer
				{
					RecievedByte = USI_SPITransmit(PacketBytes[3 + TxByteNum]); // Transmit the byte, store the answer

					if ((TxByteNum >= RxStartByte) && (RxByteNum < RxBytes))
					   PacketBytes[2 + RxByteNum++] = RecievedByte;
    2636:	12 e0       	ldi	r17, 0x02	; 2
    2638:	c0 17       	cp	r28, r16
    263a:	a8 f4       	brcc	.+42     	; 0x2666 <AICI_InterpretPacket+0x180>
    263c:	e1 2f       	mov	r30, r17
    263e:	ff 27       	eor	r31, r31
    2640:	e5 5b       	subi	r30, 0xB5	; 181
    2642:	fe 4f       	sbci	r31, 0xFE	; 254
    2644:	83 81       	ldd	r24, Z+3	; 0x03
    2646:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    264a:	1e 15       	cp	r17, r14
    264c:	40 f0       	brcs	.+16     	; 0x265e <AICI_InterpretPacket+0x178>
    264e:	cf 15       	cp	r28, r15
    2650:	30 f4       	brcc	.+12     	; 0x265e <AICI_InterpretPacket+0x178>
    2652:	ec 2f       	mov	r30, r28
    2654:	ff 27       	eor	r31, r31
    2656:	e5 5b       	subi	r30, 0xB5	; 181
    2658:	fe 4f       	sbci	r31, 0xFE	; 254
    265a:	82 83       	std	Z+2, r24	; 0x02
    265c:	cf 5f       	subi	r28, 0xFF	; 255
    265e:	81 2f       	mov	r24, r17
    2660:	1f 5f       	subi	r17, 0xFF	; 255
    2662:	80 17       	cp	r24, r16
    2664:	58 f3       	brcs	.-42     	; 0x263c <AICI_InterpretPacket+0x156>
				}

				while (RxByteNum++ < RxBytes)                         // Still more bytes to recieve
				   PacketBytes[2 + RxByteNum] = USI_SPITransmit(0x00); // its answer to be recorded (or more bytes than sent need responses), send dummy bytes to fetch the response(s)
    2666:	8c 2f       	mov	r24, r28
    2668:	cf 5f       	subi	r28, 0xFF	; 255
    266a:	8f 15       	cp	r24, r15
    266c:	50 f4       	brcc	.+20     	; 0x2682 <AICI_InterpretPacket+0x19c>
    266e:	0c 2f       	mov	r16, r28
    2670:	11 27       	eor	r17, r17
    2672:	05 5b       	subi	r16, 0xB5	; 181
    2674:	1e 4f       	sbci	r17, 0xFE	; 254
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    267c:	f8 01       	movw	r30, r16
    267e:	82 83       	std	Z+2, r24	; 0x02
    2680:	f2 cf       	rjmp	.-28     	; 0x2666 <AICI_InterpretPacket+0x180>

				PacketBytes[1]             = STATUS_CMD_OK; // Data should be encompassed
    2682:	10 92 4c 01 	sts	0x014C, r1
				PacketBytes[3 + RxByteNum] = STATUS_CMD_OK; //  by STATS_CMD_OKs
    2686:	ec 2f       	mov	r30, r28
    2688:	ff 27       	eor	r31, r31
    268a:	e5 5b       	subi	r30, 0xB5	; 181
    268c:	fe 4f       	sbci	r31, 0xFE	; 254
    268e:	13 82       	std	Z+3, r1	; 0x03

				break;
    2690:	90 c0       	rjmp	.+288    	; 0x27b2 <AICI_InterpretPacket+0x2cc>
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;
    2692:	84 e0       	ldi	r24, 0x04	; 4
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	90 93 48 01 	sts	0x0148, r25
    269a:	80 93 47 01 	sts	0x0147, r24
	
			for (uint8_t ByteNum = 1; ByteNum <= 4; ByteNum++)
    269e:	c1 e0       	ldi	r28, 0x01	; 1
    26a0:	0d e4       	ldi	r16, 0x4D	; 77
    26a2:	11 e0       	ldi	r17, 0x01	; 1
			{
				uint8_t Response = USI_SPITransmit(PacketBytes[1 + ByteNum]); // Transmit the four signature request bytes
    26a4:	f8 01       	movw	r30, r16
    26a6:	81 91       	ld	r24, Z+
    26a8:	8f 01       	movw	r16, r30
    26aa:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    26ae:	98 2f       	mov	r25, r24

				if (ByteNum == PacketBytes[1])         // If the current byte is the requested signature byte, save the reponse in the packet
    26b0:	80 91 4c 01 	lds	r24, 0x014C
    26b4:	c8 17       	cp	r28, r24
    26b6:	11 f4       	brne	.+4      	; 0x26bc <AICI_InterpretPacket+0x1d6>
					PacketBytes[2] = Response;
    26b8:	90 93 4d 01 	sts	0x014D, r25
    26bc:	cf 5f       	subi	r28, 0xFF	; 255
    26be:	c5 30       	cpi	r28, 0x05	; 5
    26c0:	88 f3       	brcs	.-30     	; 0x26a4 <AICI_InterpretPacket+0x1be>
			}

			PacketBytes[1] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    26c2:	10 92 4c 01 	sts	0x014C, r1
			PacketBytes[3] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    26c6:	10 92 4e 01 	sts	0x014E, r1

			break;
    26ca:	73 c0       	rjmp	.+230    	; 0x27b2 <AICI_InterpretPacket+0x2cc>
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;
    26cc:	83 e0       	ldi	r24, 0x03	; 3
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	90 93 48 01 	sts	0x0148, r25
    26d4:	80 93 47 01 	sts	0x0147, r24
    26d8:	0c e4       	ldi	r16, 0x4C	; 76
    26da:	11 e0       	ldi	r17, 0x01	; 1
    26dc:	c3 e0       	ldi	r28, 0x03	; 3
			
			for (uint8_t PacketB = 1; PacketB <= 4; PacketB++) // Send the lock-byte values to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    26de:	f8 01       	movw	r30, r16
    26e0:	81 91       	ld	r24, Z+
    26e2:	8f 01       	movw	r16, r30
    26e4:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    26e8:	c1 50       	subi	r28, 0x01	; 1
    26ea:	c7 ff       	sbrs	r28, 7
    26ec:	f8 cf       	rjmp	.-16     	; 0x26de <AICI_InterpretPacket+0x1f8>

			PacketBytes[1] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    26ee:	10 92 4c 01 	sts	0x014C, r1
			PacketBytes[2] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    26f2:	10 92 4d 01 	sts	0x014D, r1

			break;
    26f6:	5d c0       	rjmp	.+186    	; 0x27b2 <AICI_InterpretPacket+0x2cc>
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			MessageSize = 0;                           // Here to prevent compiler from complaining if a var dec appears straight after a case

			uint8_t  ReadCommand = PacketBytes[3];
    26f8:	d0 90 4e 01 	lds	r13, 0x014E
			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8) // Load in the number of bytes that is to
    26fc:	80 91 4c 01 	lds	r24, 0x014C
    2700:	99 27       	eor	r25, r25
    2702:	d8 2f       	mov	r29, r24
    2704:	cc 27       	eor	r28, r28
    2706:	80 91 4d 01 	lds	r24, 0x014D
    270a:	99 27       	eor	r25, r25
    270c:	c8 2b       	or	r28, r24
    270e:	d9 2b       	or	r29, r25
			                     | PacketBytes[2];                 // be read into a temp variable (MSB first)

			MessageSize = BytesToRead + 3;
    2710:	23 96       	adiw	r28, 0x03	; 3
    2712:	d0 93 48 01 	sts	0x0148, r29
    2716:	c0 93 47 01 	sts	0x0147, r28
    271a:	23 97       	sbiw	r28, 0x03	; 3

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
    271c:	00 e0       	ldi	r16, 0x00	; 0
    271e:	10 e0       	ldi	r17, 0x00	; 0
    2720:	0c 17       	cp	r16, r28
    2722:	1d 07       	cpc	r17, r29
    2724:	60 f5       	brcc	.+88     	; 0x277e <AICI_InterpretPacket+0x298>
    2726:	8d e4       	ldi	r24, 0x4D	; 77
    2728:	e8 2e       	mov	r14, r24
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	f8 2e       	mov	r15, r24
			{
				if (PacketBytes[0] == CMD_READ_FLASH_ISP)  // Flash read mode - word addresses so MSB/LSB masking nessesary
    272e:	80 91 4b 01 	lds	r24, 0x014B
    2732:	84 31       	cpi	r24, 0x14	; 20
    2734:	31 f4       	brne	.+12     	; 0x2742 <AICI_InterpretPacket+0x25c>
				{
					USI_SPITransmit(ReadCommand | ((ReadByte & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ));
    2736:	8d 2d       	mov	r24, r13
    2738:	99 27       	eor	r25, r25
    273a:	00 ff       	sbrs	r16, 0
    273c:	03 c0       	rjmp	.+6      	; 0x2744 <AICI_InterpretPacket+0x25e>
    273e:	88 60       	ori	r24, 0x08	; 8
    2740:	01 c0       	rjmp	.+2      	; 0x2744 <AICI_InterpretPacket+0x25e>
				}
				else                                       // EEPROM read mode, address is in bytes and so no masking nessesary
				{
					USI_SPITransmit(ReadCommand);
    2742:	8d 2d       	mov	r24, r13
    2744:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
				}
				
				USI_SPITransmitWord(CurrAddress);          // Transmit the current address to the slave AVR
    2748:	80 91 42 01 	lds	r24, 0x0142
    274c:	90 91 43 01 	lds	r25, 0x0143
    2750:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>

				PacketBytes[2 + ReadByte] = USI_SPITransmit(0x00); // Read in the byte stored at the requested location
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    275a:	f7 01       	movw	r30, r14
    275c:	80 83       	st	Z, r24

				if ((ReadByte & 0x01) || (PacketBytes[0] == CMD_READ_EEPROM_ISP)) // Flash addresses are given in words; only increment on the odd byte if reading the flash.
    275e:	00 fd       	sbrc	r16, 0
    2760:	04 c0       	rjmp	.+8      	; 0x276a <AICI_InterpretPacket+0x284>
    2762:	80 91 4b 01 	lds	r24, 0x014B
    2766:	86 31       	cpi	r24, 0x16	; 22
    2768:	11 f4       	brne	.+4      	; 0x276e <AICI_InterpretPacket+0x288>
				{
					V2P_IncrementCurrAddress();             // Increment the address counter
    276a:	0e 94 3b 0f 	call	0x1e76 <V2P_IncrementCurrAddress>
    276e:	0f 5f       	subi	r16, 0xFF	; 255
    2770:	1f 4f       	sbci	r17, 0xFF	; 255
    2772:	08 94       	sec
    2774:	e1 1c       	adc	r14, r1
    2776:	f1 1c       	adc	r15, r1
    2778:	0c 17       	cp	r16, r28
    277a:	1d 07       	cpc	r17, r29
    277c:	c0 f2       	brcs	.-80     	; 0x272e <AICI_InterpretPacket+0x248>
				}
				else
				{
					if ((CurrAddress & 0x00FF0000) & !(CurrAddress & 0x0000FFFF))
					{
						CurrAddress |= (1UL << 31);        // Set MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
						V2P_CheckForExtendedAddress();
					}
				}
			}
			
			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    277e:	10 92 4c 01 	sts	0x014C, r1
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    2782:	c5 5b       	subi	r28, 0xB5	; 181
    2784:	de 4f       	sbci	r29, 0xFE	; 254
    2786:	1a 82       	std	Y+2, r1	; 0x02

			break;
    2788:	14 c0       	rjmp	.+40     	; 0x27b2 <AICI_InterpretPacket+0x2cc>
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPCC_ProgramChip();                          // Program the bytes into the chip
    278a:	0e 94 8b 11 	call	0x2316 <ISPCC_ProgramChip>
			
			MessageSize = 2;
    278e:	82 e0       	ldi	r24, 0x02	; 2
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	90 93 48 01 	sts	0x0148, r25
    2796:	80 93 47 01 	sts	0x0147, r24

			PacketBytes[1] = STATUS_CMD_OK;
    279a:	10 92 4c 01 	sts	0x014C, r1
			
			break;
    279e:	09 c0       	rjmp	.+18     	; 0x27b2 <AICI_InterpretPacket+0x2cc>
		default:                                        // Unknown command, return error
			MessageSize = 1;
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	90 93 48 01 	sts	0x0148, r25
    27a8:	80 93 47 01 	sts	0x0147, r24
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
    27ac:	89 ec       	ldi	r24, 0xC9	; 201
    27ae:	80 93 4c 01 	sts	0x014C, r24
	}

	V2P_SendPacket();                                   // Send the response packet
    27b2:	0e 94 5a 0e 	call	0x1cb4 <V2P_SendPacket>
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	1f 91       	pop	r17
    27bc:	0f 91       	pop	r16
    27be:	ff 90       	pop	r15
    27c0:	ef 90       	pop	r14
    27c2:	df 90       	pop	r13
    27c4:	08 95       	ret

000027c6 <PM_GetStoredDataSize>:

// ======================================================================================

uint32_t PM_GetStoredDataSize(const uint8_t Type)
{
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	24 97       	sbiw	r28, 0x04	; 4
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
	/* This take a **LOT** of code and is accessed several times throughout
	   the program, so I've put it into a seperate function to save on flash. */

	uint32_t ProgDataSize = 0;
    27da:	19 82       	std	Y+1, r1	; 0x01
    27dc:	1a 82       	std	Y+2, r1	; 0x02
    27de:	1b 82       	std	Y+3, r1	; 0x03
    27e0:	1c 82       	std	Y+4, r1	; 0x04
void 
eeprom_read_block (void *pointer_ram,
                   const void *pointer_eeprom,
                   size_t n)
{
    27e2:	fe 01       	movw	r30, r28
    27e4:	31 96       	adiw	r30, 0x01	; 1
    27e6:	81 30       	cpi	r24, 0x01	; 1
    27e8:	19 f4       	brne	.+6      	; 0x27f0 <PM_GetStoredDataSize+0x2a>
    27ea:	ab e1       	ldi	r26, 0x1B	; 27
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <PM_GetStoredDataSize+0x2e>
    27f0:	af e1       	ldi	r26, 0x1F	; 31
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
             XCALL " __eeprom_read_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "st z+,__tmp_reg__" CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                  XCALL " __eeprom_read_block_" _REG_LOCATION_SUFFIX 
                : "+x" (pointer_eeprom),
                  "=z" (pointer_ram)
                : "z"  (pointer_ram)
                : "memory");
            }
          else
            {
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 
    27f4:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    27f6:	18 2e       	mov	r1, r24
    27f8:	0e 94 5f 1a 	call	0x34be <__eeprom_read_block_1F2021>

	eeprom_read_block((void*)&ProgDataSize, (const void*)((Type == TYPE_FLASH)? &EEPROMVars.DataSize : &EEPROMVars.EEPROMSize), sizeof(uint32_t));

	if (ProgDataSize == 0xFFFFFFFF)                                      // Blank EEPROM, return a size  of 0 bytes
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2800:	ab 81       	ldd	r26, Y+3	; 0x03
    2802:	bc 81       	ldd	r27, Y+4	; 0x04
    2804:	8f 5f       	subi	r24, 0xFF	; 255
    2806:	9f 4f       	sbci	r25, 0xFF	; 255
    2808:	af 4f       	sbci	r26, 0xFF	; 255
    280a:	bf 4f       	sbci	r27, 0xFF	; 255
    280c:	21 f4       	brne	.+8      	; 0x2816 <PM_GetStoredDataSize+0x50>
	  ProgDataSize = 0x00;
    280e:	19 82       	std	Y+1, r1	; 0x01
    2810:	1a 82       	std	Y+2, r1	; 0x02
    2812:	1b 82       	std	Y+3, r1	; 0x03
    2814:	1c 82       	std	Y+4, r1	; 0x04

	return ProgDataSize;
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	9a 81       	ldd	r25, Y+2	; 0x02
    281a:	ab 81       	ldd	r26, Y+3	; 0x03
    281c:	bc 81       	ldd	r27, Y+4	; 0x04
}
    281e:	bc 01       	movw	r22, r24
    2820:	cd 01       	movw	r24, r26
    2822:	24 96       	adiw	r28, 0x04	; 4
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	08 95       	ret

00002834 <PM_SetupDFAddressCounters>:

void PM_SetupDFAddressCounters(const uint8_t Type)
{
	uint32_t StartAddress;
	
	MemoryType  = Type;
    2834:	80 93 61 02 	sts	0x0261, r24
	GPageLength = 0;
    2838:	10 92 5f 02 	sts	0x025F, r1
    283c:	10 92 5e 02 	sts	0x025E, r1
    2840:	20 91 42 01 	lds	r18, 0x0142
    2844:	30 91 43 01 	lds	r19, 0x0143
    2848:	40 91 44 01 	lds	r20, 0x0144
    284c:	50 91 45 01 	lds	r21, 0x0145

	if (Type == TYPE_FLASH)                                              // Type 1 = Flash
    2850:	81 30       	cpi	r24, 0x01	; 1
    2852:	39 f4       	brne	.+14     	; 0x2862 <PM_SetupDFAddressCounters+0x2e>
	  StartAddress = (CurrAddress << 1);                               // Convert flash word address to byte address
    2854:	da 01       	movw	r26, r20
    2856:	c9 01       	movw	r24, r18
    2858:	88 0f       	add	r24, r24
    285a:	99 1f       	adc	r25, r25
    285c:	aa 1f       	adc	r26, r26
    285e:	bb 1f       	adc	r27, r27
    2860:	06 c0       	rjmp	.+12     	; 0x286e <PM_SetupDFAddressCounters+0x3a>
	else
	  StartAddress = CurrAddress + PM_EEPROM_OFFSET;                   // EEPROM uses byte addresses, and starts at the 257th kilobyte in Dataflash
    2862:	da 01       	movw	r26, r20
    2864:	c9 01       	movw	r24, r18
    2866:	80 50       	subi	r24, 0x00	; 0
    2868:	9c 4f       	sbci	r25, 0xFC	; 252
    286a:	ab 4f       	sbci	r26, 0xFB	; 251
    286c:	bf 4f       	sbci	r27, 0xFF	; 255
	
	CurrPageAddress = 0;
    286e:	10 92 6e 02 	sts	0x026E, r1
    2872:	10 92 6d 02 	sts	0x026D, r1

	while (StartAddress >= DF_INTERNALDF_BUFFBYTES)                      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DF_INTERNALDF_BUFFBYTES;                         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    2876:	88 30       	cpi	r24, 0x08	; 8
    2878:	21 e0       	ldi	r18, 0x01	; 1
    287a:	92 07       	cpc	r25, r18
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	a2 07       	cpc	r26, r18
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	b2 07       	cpc	r27, r18
    2884:	a0 f0       	brcs	.+40     	; 0x28ae <PM_SetupDFAddressCounters+0x7a>
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	88 50       	subi	r24, 0x08	; 8
    288c:	91 40       	sbci	r25, 0x01	; 1
    288e:	a0 40       	sbci	r26, 0x00	; 0
    2890:	b0 40       	sbci	r27, 0x00	; 0
    2892:	2f 5f       	subi	r18, 0xFF	; 255
    2894:	3f 4f       	sbci	r19, 0xFF	; 255
    2896:	88 30       	cpi	r24, 0x08	; 8
    2898:	41 e0       	ldi	r20, 0x01	; 1
    289a:	94 07       	cpc	r25, r20
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	a4 07       	cpc	r26, r20
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	b4 07       	cpc	r27, r20
    28a4:	90 f7       	brcc	.-28     	; 0x288a <PM_SetupDFAddressCounters+0x56>
    28a6:	30 93 6e 02 	sts	0x026E, r19
    28aa:	20 93 6d 02 	sts	0x026D, r18
	}
	
	CurrBuffByte = (uint16_t)StartAddress;                               // The buffer byte is the remainder
    28ae:	90 93 67 02 	sts	0x0267, r25
    28b2:	80 93 66 02 	sts	0x0266, r24
    28b6:	08 95       	ret

000028b8 <PM_StoreProgramByte>:
}

void PM_StoreProgramByte(const uint8_t Data)
{
    28b8:	cf 93       	push	r28
    28ba:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DF_INTERNALDF_BUFFBYTES)
    28bc:	80 91 66 02 	lds	r24, 0x0266
    28c0:	90 91 67 02 	lds	r25, 0x0267
    28c4:	88 50       	subi	r24, 0x08	; 8
    28c6:	91 40       	sbci	r25, 0x01	; 1
    28c8:	a9 f4       	brne	.+42     	; 0x28f4 <PM_StoreProgramByte+0x3c>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    28ca:	80 91 6d 02 	lds	r24, 0x026D
    28ce:	90 91 6e 02 	lds	r25, 0x026E
    28d2:	9c 01       	movw	r18, r24
    28d4:	01 96       	adiw	r24, 0x01	; 1
    28d6:	90 93 6e 02 	sts	0x026E, r25
    28da:	80 93 6d 02 	sts	0x026D, r24
    28de:	c9 01       	movw	r24, r18
    28e0:	0e 94 cf 0a 	call	0x159e <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 45 0a 	call	0x148a <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    28ec:	10 92 67 02 	sts	0x0267, r1
    28f0:	10 92 66 02 	sts	0x0266, r1
	}
	
	SPI_SPITransmit(Data);                                               // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    28f4:	8c 2f       	mov	r24, r28
    28f6:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
	CurrBuffByte++;
    28fa:	80 91 66 02 	lds	r24, 0x0266
    28fe:	90 91 67 02 	lds	r25, 0x0267
    2902:	01 96       	adiw	r24, 0x01	; 1
    2904:	90 93 67 02 	sts	0x0267, r25
    2908:	80 93 66 02 	sts	0x0266, r24
	GPageLength++;
    290c:	80 91 5e 02 	lds	r24, 0x025E
    2910:	90 91 5f 02 	lds	r25, 0x025F
    2914:	01 96       	adiw	r24, 0x01	; 1
    2916:	90 93 5f 02 	sts	0x025F, r25
    291a:	80 93 5e 02 	sts	0x025E, r24
    291e:	cf 91       	pop	r28
    2920:	08 95       	ret

00002922 <PM_CheckEndOfFuseLockData>:
}

void PM_InterpretAVRISPPacket(void)
{
	uint8_t* EEPROMAddress;

	switch (PacketBytes[0])
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
						
			for (uint8_t PacketB = 0; PacketB <= 11; PacketB++)          // Save the enter programming mode command bytes
			  eeprom_write_byte(&EEPROMVars.EnterProgMode[PacketB], PacketBytes[PacketB]);
			
			InProgrammingMode = TRUE;                                    // Set the flag, prevent the user from exiting the V2P state machine			
			CurrentMode = PM_NO_SETUP;                                   // Clear the current mode variable

			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;

			break;			
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;

			PM_CheckEndOfFuseLockData();                                 // Check for remaining bytes to be stored and general cleanup
			
			InProgrammingMode = FALSE;                                   // Clear the flag, allow the user to exit the V2P state machine

			DF_EnableDataflash(FALSE);

			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
			PacketBytes[1] = STATUS_CMD_OK;

			break;
		case CMD_READ_SIGNATURE_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x01;                                       // Signature bytes all return "01" in storage mode
			PacketBytes[3] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;

			for (uint8_t PacketB = 1; PacketB <= 6; PacketB++)          // Save the erase chip command bytes to EEPROM
			  eeprom_write_byte(&EEPROMVars.EraseChip[PacketB], PacketBytes[PacketB]);

			for (uint8_t Byte = 0; Byte < 8; Byte++)                    // Clear the program and EEPROM size counters
			{
				eeprom_write_byte(&EEPROMVars.DataSize[Byte], 0x00);
				eeprom_write_byte(&EEPROMVars.EEPROMSize[Byte], 0x00);
			}
						
			eeprom_write_byte(&EEPROMVars.EraseCmdStored, TRUE);
			
			PacketBytes[1] = STATUS_CMD_OK;
			
			break;
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x00;                                      // Return 0x00 for the OSCCAL byte
			PacketBytes[3] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs

			break;
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
			MessageSize = 4;
	
			if (CurrentMode != PM_LOCKFUSEBITS_READ)                    // First lock or fuse byte being read, set the EEPROM pointer
			{
				PM_CheckEndOfFuseLockData();                            // Check for remaining bytes to be stored and general cleanup
				
				CurrBuffByte = 0;
				CurrentMode  = PM_LOCKFUSEBITS_READ;
			}
			
			if (CurrBuffByte > eeprom_read_byte((PacketBytes[0] == CMD_READ_FUSE_ISP)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes))  // Trying to read more fuse/lock bytes than are stored in memory
			{
				PacketBytes[2] = 0xFF;                                 // Return 0xFF for the fuse/lock byte
			}
			else
			{
				PacketBytes[2] = eeprom_read_byte((uint8_t*)(((PacketBytes[0] == CMD_READ_FUSE_ISP)? &EEPROMVars.FuseBytes : &EEPROMVars.LockBytes) // Starting location
									                         + (CurrBuffByte << 2) + (PacketBytes[1] - 1)));                                        // The start position of the actual fuse/lock byte to read (4 bytes each));
			}

			PacketBytes[1] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs
			PacketBytes[3] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs

			CurrBuffByte++;

			break;
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;

			if (CurrentMode != PM_LOCKFUSEBITS_WRITE)                  // First lock or fuse byte being written, set the EEPROM pointer
			{
				CurrentMode   = PM_LOCKFUSEBITS_WRITE;
				CurrBuffByte  = 0;                                     // CurrBuffByte is used to store the total fuse/lock bytes written
			}

			if (PacketBytes[0] == CMD_PROGRAM_FUSE_ISP)
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.FuseBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_FUSE;
			}
			else
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.LockBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_LOCK;
			}				
			
			if (CurrBuffByte < PM_MAX_FUSELOCKBITS)
			{
				for (uint8_t FLByte = 1; FLByte <= 4; FLByte++)
				{
					eeprom_write_byte(EEPROMAddress, PacketBytes[FLByte]);
					EEPROMAddress++;
				}

				CurrBuffByte++;                                        // Increment the total fuse/lock bytes written counter
			}
			
			PacketBytes[1] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned
			PacketBytes[2] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned

			break;
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			MessageSize = 2;

			if (CurrentMode != PM_DATAFLASH_WRITE)                     // First programming packet
			{
				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)           // Flash programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram; // Set the eeprom address to the Program command bytes location
					PM_SetupDFAddressCounters(TYPE_FLASH);
				}
				else                                                   // EEPROM programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;  // Set the eeprom address to the EEPROM command bytes location
					PM_SetupDFAddressCounters(TYPE_EEPROM);
				}
				
				DF_BufferWriteEnable(CurrBuffByte);
				CurrentMode = PM_DATAFLASH_WRITE;
				
				for (uint8_t B = 1; B <= 9; B++)                       // Save the command bytes
				  eeprom_write_byte(EEPROMAddress, PacketBytes[B]);
			}

			uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
			                      | PacketBytes[2];

			for (uint16_t CurrByte = 0; CurrByte < BytesToWrite; CurrByte++)
				PM_StoreProgramByte(PacketBytes[10 + CurrByte]);

			if (!(GPageLength & PM_PAGELENGTH_FOUNDBIT) && (PacketBytes[3] & ISPCC_PROG_MODE_PAGEDONE) && GPageLength)
			{
				eeprom_write_word(((MemoryType == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength), GPageLength);
		
				GPageLength |= PM_PAGELENGTH_FOUNDBIT;                 // Bit 15 is used to indicate if the length has been found
			}

			PacketBytes[1] = STATUS_CMD_OK;
		
			break;
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:	
			if (CurrentMode != PM_DATAFLASH_READ)
			{
				PM_CheckEndOfFuseLockData();                           // Check for remaining bytes to be stored and general cleanup
				
				PM_SetupDFAddressCounters((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);
				DF_ContinuousReadEnable(CurrPageAddress, CurrBuffByte);
				
				CurrentMode = PM_DATAFLASH_READ;
				CurrAddress = 0;
			}

			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8)    // \. Load in the number of bytes that is to
			                     | PacketBytes[2];                    // /  be read into a temp variable (MSB first)
						
			uint16_t BytesInMem  = PM_GetStoredDataSize((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
			   PacketBytes[2 + ReadByte] = ((CurrAddress < BytesInMem)? SPI_SPITransmit(0x00) : 0xFF); // Read in the next dataflash byte if present
			   V2P_IncrementCurrAddress();
			}
			
			MessageSize = BytesToRead + 3;

			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
		
			break;
		default:
			MessageSize = 1;
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
	}

	V2P_SendPacket();                                   // Send the response packet
}

void PM_CheckEndOfFuseLockData(void)
{
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	24 97       	sbiw	r28, 0x04	; 4
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61
	if (CurrentMode == PM_DATAFLASH_WRITE)
    2936:	80 91 60 02 	lds	r24, 0x0260
    293a:	81 30       	cpi	r24, 0x01	; 1
    293c:	09 f0       	breq	.+2      	; 0x2940 <PM_CheckEndOfFuseLockData+0x1e>
    293e:	3f c0       	rjmp	.+126    	; 0x29be <PM_CheckEndOfFuseLockData+0x9c>
	{
		if (CurrBuffByte)                               // Data in the dataflash buffer, pending to be written
    2940:	80 91 66 02 	lds	r24, 0x0266
    2944:	90 91 67 02 	lds	r25, 0x0267
    2948:	89 2b       	or	r24, r25
    294a:	31 f0       	breq	.+12     	; 0x2958 <PM_CheckEndOfFuseLockData+0x36>
		  DF_CopyBufferToFlashPage(CurrPageAddress);    // Save the remaining buffer bytes
    294c:	80 91 6d 02 	lds	r24, 0x026D
    2950:	90 91 6e 02 	lds	r25, 0x026E
    2954:	0e 94 cf 0a 	call	0x159e <DF_CopyBufferToFlashPage>

		uint32_t DataSize = ((CurrPageAddress * DF_INTERNALDF_BUFFBYTES) + CurrBuffByte);
    2958:	20 91 6d 02 	lds	r18, 0x026D
    295c:	30 91 6e 02 	lds	r19, 0x026E
    2960:	88 e0       	ldi	r24, 0x08	; 8
    2962:	91 e0       	ldi	r25, 0x01	; 1
    2964:	28 9f       	mul	r18, r24
    2966:	a0 01       	movw	r20, r0
    2968:	29 9f       	mul	r18, r25
    296a:	50 0d       	add	r21, r0
    296c:	38 9f       	mul	r19, r24
    296e:	50 0d       	add	r21, r0
    2970:	11 24       	eor	r1, r1
    2972:	ca 01       	movw	r24, r20
    2974:	20 91 66 02 	lds	r18, 0x0266
    2978:	30 91 67 02 	lds	r19, 0x0267
    297c:	82 0f       	add	r24, r18
    297e:	93 1f       	adc	r25, r19
    2980:	9c 01       	movw	r18, r24
    2982:	44 27       	eor	r20, r20
    2984:	55 27       	eor	r21, r21
    2986:	29 83       	std	Y+1, r18	; 0x01
    2988:	3a 83       	std	Y+2, r19	; 0x02
    298a:	4b 83       	std	Y+3, r20	; 0x03
    298c:	5c 83       	std	Y+4, r21	; 0x04

		if (MemoryType == TYPE_FLASH)
    298e:	80 91 61 02 	lds	r24, 0x0261
    2992:	fe 01       	movw	r30, r28
    2994:	31 96       	adiw	r30, 0x01	; 1
    2996:	81 30       	cpi	r24, 0x01	; 1
    2998:	19 f4       	brne	.+6      	; 0x29a0 <PM_CheckEndOfFuseLockData+0x7e>
void 
eeprom_write_block (const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t n)
{
    299a:	ab e1       	ldi	r26, 0x1B	; 27
    299c:	b0 e0       	ldi	r27, 0x00	; 0
    299e:	0a c0       	rjmp	.+20     	; 0x29b4 <PM_CheckEndOfFuseLockData+0x92>
		{
			eeprom_write_block((const void*)&DataSize, (void*)&EEPROMVars.DataSize, sizeof(uint32_t));
		}
		else
		{
			DataSize -= PM_EEPROM_OFFSET;                // Remove DataFlash EEPROM start offset
    29a0:	20 50       	subi	r18, 0x00	; 0
    29a2:	34 40       	sbci	r19, 0x04	; 4
    29a4:	44 40       	sbci	r20, 0x04	; 4
    29a6:	50 40       	sbci	r21, 0x00	; 0
    29a8:	29 83       	std	Y+1, r18	; 0x01
    29aa:	3a 83       	std	Y+2, r19	; 0x02
    29ac:	4b 83       	std	Y+3, r20	; 0x03
    29ae:	5c 83       	std	Y+4, r21	; 0x04
void 
eeprom_write_block (const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t n)
{
    29b0:	af e1       	ldi	r26, 0x1F	; 31
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
            "ld __tmp_reg__,z+" CR_TAB
             XCALL " __eeprom_write_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      /* Do nothing for compile time constant transfer size n == 0.  */
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                 XCALL " __eeprom_write_block_" _REG_LOCATION_SUFFIX
               : "+x" (pointer_eeprom),
                 "=z" (pointer_ram)
               : "z"  (pointer_ram)
               : "memory" );
            }
          else
            {
              uint8_t len;
              len = (uint8_t) n;
    29b4:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    29b6:	18 2e       	mov	r1, r24
    29b8:	0e 94 7a 1a 	call	0x34f4 <__eeprom_write_block_1F2021>
    29bc:	10 c0       	rjmp	.+32     	; 0x29de <PM_CheckEndOfFuseLockData+0xbc>
			eeprom_write_block((const void*)&DataSize, (void*)&EEPROMVars.EEPROMSize, sizeof(uint32_t));
		}
	}
	else if (CurrentMode == PM_LOCKFUSEBITS_WRITE)
    29be:	83 30       	cpi	r24, 0x03	; 3
    29c0:	71 f4       	brne	.+28     	; 0x29de <PM_CheckEndOfFuseLockData+0xbc>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    29c2:	80 91 61 02 	lds	r24, 0x0261
    29c6:	82 30       	cpi	r24, 0x02	; 2
    29c8:	19 f4       	brne	.+6      	; 0x29d0 <PM_CheckEndOfFuseLockData+0xae>
    29ca:	af e2       	ldi	r26, 0x2F	; 47
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	02 c0       	rjmp	.+4      	; 0x29d4 <PM_CheckEndOfFuseLockData+0xb2>
    29d0:	a0 e3       	ldi	r26, 0x30	; 48
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	80 91 66 02 	lds	r24, 0x0266
  asm volatile (
    29d8:	08 2e       	mov	r0, r24
    29da:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
    29de:	24 96       	adiw	r28, 0x04	; 4
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	08 95       	ret

000029f0 <PM_InterpretAVRISPPacket>:
    29f0:	cf 92       	push	r12
    29f2:	df 92       	push	r13
    29f4:	ef 92       	push	r14
    29f6:	ff 92       	push	r15
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	cf 93       	push	r28
    29fe:	df 93       	push	r29
    2a00:	40 91 4b 01 	lds	r20, 0x014B
    2a04:	84 2f       	mov	r24, r20
    2a06:	99 27       	eor	r25, r25
    2a08:	86 31       	cpi	r24, 0x16	; 22
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	09 f4       	brne	.+2      	; 0x2a10 <PM_InterpretAVRISPPacket+0x20>
    2a0e:	bc c1       	rjmp	.+888    	; 0x2d88 <PM_InterpretAVRISPPacket+0x398>
    2a10:	87 31       	cpi	r24, 0x17	; 23
    2a12:	91 05       	cpc	r25, r1
    2a14:	94 f4       	brge	.+36     	; 0x2a3a <PM_InterpretAVRISPPacket+0x4a>
    2a16:	82 31       	cpi	r24, 0x12	; 18
    2a18:	91 05       	cpc	r25, r1
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <PM_InterpretAVRISPPacket+0x2e>
    2a1c:	66 c0       	rjmp	.+204    	; 0x2aea <PM_InterpretAVRISPPacket+0xfa>
    2a1e:	83 31       	cpi	r24, 0x13	; 19
    2a20:	91 05       	cpc	r25, r1
    2a22:	3c f4       	brge	.+14     	; 0x2a32 <PM_InterpretAVRISPPacket+0x42>
    2a24:	80 31       	cpi	r24, 0x10	; 16
    2a26:	91 05       	cpc	r25, r1
    2a28:	11 f1       	breq	.+68     	; 0x2a6e <PM_InterpretAVRISPPacket+0x7e>
    2a2a:	41 97       	sbiw	r24, 0x11	; 17
    2a2c:	09 f4       	brne	.+2      	; 0x2a30 <PM_InterpretAVRISPPacket+0x40>
    2a2e:	3f c0       	rjmp	.+126    	; 0x2aae <PM_InterpretAVRISPPacket+0xbe>
    2a30:	19 c2       	rjmp	.+1074   	; 0x2e64 <PM_InterpretAVRISPPacket+0x474>
    2a32:	44 97       	sbiw	r24, 0x14	; 20
    2a34:	09 f4       	brne	.+2      	; 0x2a38 <PM_InterpretAVRISPPacket+0x48>
    2a36:	a8 c1       	rjmp	.+848    	; 0x2d88 <PM_InterpretAVRISPPacket+0x398>
    2a38:	3c c1       	rjmp	.+632    	; 0x2cb2 <PM_InterpretAVRISPPacket+0x2c2>
    2a3a:	89 31       	cpi	r24, 0x19	; 25
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	09 f4       	brne	.+2      	; 0x2a42 <PM_InterpretAVRISPPacket+0x52>
    2a40:	e6 c0       	rjmp	.+460    	; 0x2c0e <PM_InterpretAVRISPPacket+0x21e>
    2a42:	8a 31       	cpi	r24, 0x1A	; 26
    2a44:	91 05       	cpc	r25, r1
    2a46:	44 f4       	brge	.+16     	; 0x2a58 <PM_InterpretAVRISPPacket+0x68>
    2a48:	87 31       	cpi	r24, 0x17	; 23
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <PM_InterpretAVRISPPacket+0x60>
    2a4e:	df c0       	rjmp	.+446    	; 0x2c0e <PM_InterpretAVRISPPacket+0x21e>
    2a50:	48 97       	sbiw	r24, 0x18	; 24
    2a52:	09 f4       	brne	.+2      	; 0x2a56 <PM_InterpretAVRISPPacket+0x66>
    2a54:	89 c0       	rjmp	.+274    	; 0x2b68 <PM_InterpretAVRISPPacket+0x178>
    2a56:	06 c2       	rjmp	.+1036   	; 0x2e64 <PM_InterpretAVRISPPacket+0x474>
    2a58:	8b 31       	cpi	r24, 0x1B	; 27
    2a5a:	91 05       	cpc	r25, r1
    2a5c:	d1 f1       	breq	.+116    	; 0x2ad2 <PM_InterpretAVRISPPacket+0xe2>
    2a5e:	8b 31       	cpi	r24, 0x1B	; 27
    2a60:	91 05       	cpc	r25, r1
    2a62:	0c f4       	brge	.+2      	; 0x2a66 <PM_InterpretAVRISPPacket+0x76>
    2a64:	81 c0       	rjmp	.+258    	; 0x2b68 <PM_InterpretAVRISPPacket+0x178>
    2a66:	4c 97       	sbiw	r24, 0x1c	; 28
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <PM_InterpretAVRISPPacket+0x7c>
    2a6a:	71 c0       	rjmp	.+226    	; 0x2b4e <PM_InterpretAVRISPPacket+0x15e>
    2a6c:	fb c1       	rjmp	.+1014   	; 0x2e64 <PM_InterpretAVRISPPacket+0x474>
    2a6e:	82 e0       	ldi	r24, 0x02	; 2
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	90 93 48 01 	sts	0x0148, r25
    2a76:	80 93 47 01 	sts	0x0147, r24
    2a7a:	eb e4       	ldi	r30, 0x4B	; 75
    2a7c:	f1 e0       	ldi	r31, 0x01	; 1
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	9b e0       	ldi	r25, 0x0B	; 11
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2a84:	d9 01       	movw	r26, r18
    2a86:	ad 5d       	subi	r26, 0xDD	; 221
    2a88:	bf 4f       	sbci	r27, 0xFF	; 255
    2a8a:	81 91       	ld	r24, Z+
  asm volatile (
    2a8c:	08 2e       	mov	r0, r24
    2a8e:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
    2a92:	91 50       	subi	r25, 0x01	; 1
    2a94:	2f 5f       	subi	r18, 0xFF	; 255
    2a96:	3f 4f       	sbci	r19, 0xFF	; 255
    2a98:	97 ff       	sbrs	r25, 7
    2a9a:	f4 cf       	rjmp	.-24     	; 0x2a84 <PM_InterpretAVRISPPacket+0x94>
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	80 93 46 01 	sts	0x0146, r24
    2aa2:	10 92 60 02 	sts	0x0260, r1
    2aa6:	81 b3       	in	r24, 0x11	; 17
    2aa8:	8f 7c       	andi	r24, 0xCF	; 207
    2aaa:	80 62       	ori	r24, 0x20	; 32
    2aac:	10 c0       	rjmp	.+32     	; 0x2ace <PM_InterpretAVRISPPacket+0xde>
    2aae:	82 e0       	ldi	r24, 0x02	; 2
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	90 93 48 01 	sts	0x0148, r25
    2ab6:	80 93 47 01 	sts	0x0147, r24
    2aba:	0e 94 91 14 	call	0x2922 <PM_CheckEndOfFuseLockData>
    2abe:	10 92 46 01 	sts	0x0146, r1
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    2ac8:	81 b3       	in	r24, 0x11	; 17
    2aca:	8f 7c       	andi	r24, 0xCF	; 207
    2acc:	80 61       	ori	r24, 0x10	; 16
    2ace:	81 bb       	out	0x11, r24	; 17
    2ad0:	58 c1       	rjmp	.+688    	; 0x2d82 <PM_InterpretAVRISPPacket+0x392>
    2ad2:	84 e0       	ldi	r24, 0x04	; 4
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	90 93 48 01 	sts	0x0148, r25
    2ada:	80 93 47 01 	sts	0x0147, r24
    2ade:	10 92 4c 01 	sts	0x014C, r1
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	80 93 4d 01 	sts	0x014D, r24
    2ae8:	3c c0       	rjmp	.+120    	; 0x2b62 <PM_InterpretAVRISPPacket+0x172>
    2aea:	82 e0       	ldi	r24, 0x02	; 2
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	90 93 48 01 	sts	0x0148, r25
    2af2:	80 93 47 01 	sts	0x0147, r24
    2af6:	ec e4       	ldi	r30, 0x4C	; 76
    2af8:	f1 e0       	ldi	r31, 0x01	; 1
    2afa:	21 e0       	ldi	r18, 0x01	; 1
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	95 e0       	ldi	r25, 0x05	; 5
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b00:	d9 01       	movw	r26, r18
    2b02:	ab 5e       	subi	r26, 0xEB	; 235
    2b04:	bf 4f       	sbci	r27, 0xFF	; 255
    2b06:	81 91       	ld	r24, Z+
  asm volatile (
    2b08:	08 2e       	mov	r0, r24
    2b0a:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
    2b0e:	91 50       	subi	r25, 0x01	; 1
    2b10:	2f 5f       	subi	r18, 0xFF	; 255
    2b12:	3f 4f       	sbci	r19, 0xFF	; 255
    2b14:	97 ff       	sbrs	r25, 7
    2b16:	f4 cf       	rjmp	.-24     	; 0x2b00 <PM_InterpretAVRISPPacket+0x110>
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	37 e0       	ldi	r19, 0x07	; 7
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b20:	dc 01       	movw	r26, r24
    2b22:	a5 5e       	subi	r26, 0xE5	; 229
    2b24:	bf 4f       	sbci	r27, 0xFF	; 255
  asm volatile (
    2b26:	02 2e       	mov	r0, r18
    2b28:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	a1 5e       	subi	r26, 0xE1	; 225
    2b30:	bf 4f       	sbci	r27, 0xFF	; 255
    2b32:	02 2e       	mov	r0, r18
    2b34:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
    2b38:	31 50       	subi	r19, 0x01	; 1
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	37 ff       	sbrs	r19, 7
    2b3e:	f0 cf       	rjmp	.-32     	; 0x2b20 <PM_InterpretAVRISPPacket+0x130>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b40:	a4 e1       	ldi	r26, 0x14	; 20
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	81 e0       	ldi	r24, 0x01	; 1
  asm volatile (
    2b46:	08 2e       	mov	r0, r24
    2b48:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
    2b4c:	1a c1       	rjmp	.+564    	; 0x2d82 <PM_InterpretAVRISPPacket+0x392>
    2b4e:	84 e0       	ldi	r24, 0x04	; 4
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	90 93 48 01 	sts	0x0148, r25
    2b56:	80 93 47 01 	sts	0x0147, r24
    2b5a:	10 92 4c 01 	sts	0x014C, r1
    2b5e:	10 92 4d 01 	sts	0x014D, r1
    2b62:	10 92 4e 01 	sts	0x014E, r1
    2b66:	87 c1       	rjmp	.+782    	; 0x2e76 <PM_InterpretAVRISPPacket+0x486>
    2b68:	84 e0       	ldi	r24, 0x04	; 4
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	90 93 48 01 	sts	0x0148, r25
    2b70:	80 93 47 01 	sts	0x0147, r24
    2b74:	80 91 60 02 	lds	r24, 0x0260
    2b78:	84 30       	cpi	r24, 0x04	; 4
    2b7a:	49 f0       	breq	.+18     	; 0x2b8e <PM_InterpretAVRISPPacket+0x19e>
    2b7c:	0e 94 91 14 	call	0x2922 <PM_CheckEndOfFuseLockData>
    2b80:	10 92 67 02 	sts	0x0267, r1
    2b84:	10 92 66 02 	sts	0x0266, r1
    2b88:	84 e0       	ldi	r24, 0x04	; 4
    2b8a:	80 93 60 02 	sts	0x0260, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2b8e:	60 91 4b 01 	lds	r22, 0x014B
    2b92:	68 31       	cpi	r22, 0x18	; 24
    2b94:	19 f4       	brne	.+6      	; 0x2b9c <PM_InterpretAVRISPPacket+0x1ac>
    2b96:	af e2       	ldi	r26, 0x2F	; 47
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <PM_InterpretAVRISPPacket+0x1b0>
    2b9c:	a0 e3       	ldi	r26, 0x30	; 48
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2ba0:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
    2ba4:	80 2d       	mov	r24, r0
    2ba6:	99 27       	eor	r25, r25
    2ba8:	40 91 66 02 	lds	r20, 0x0266
    2bac:	50 91 67 02 	lds	r21, 0x0267
    2bb0:	84 17       	cp	r24, r20
    2bb2:	95 07       	cpc	r25, r21
    2bb4:	10 f4       	brcc	.+4      	; 0x2bba <PM_InterpretAVRISPPacket+0x1ca>
    2bb6:	8f ef       	ldi	r24, 0xFF	; 255
    2bb8:	1d c0       	rjmp	.+58     	; 0x2bf4 <PM_InterpretAVRISPPacket+0x204>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2bba:	80 ea       	ldi	r24, 0xA0	; 160
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	48 9f       	mul	r20, r24
    2bc0:	90 01       	movw	r18, r0
    2bc2:	49 9f       	mul	r20, r25
    2bc4:	30 0d       	add	r19, r0
    2bc6:	58 9f       	mul	r21, r24
    2bc8:	30 0d       	add	r19, r0
    2bca:	11 24       	eor	r1, r1
    2bcc:	90 91 4c 01 	lds	r25, 0x014C
    2bd0:	88 e2       	ldi	r24, 0x28	; 40
    2bd2:	98 9f       	mul	r25, r24
    2bd4:	c0 01       	movw	r24, r0
    2bd6:	11 24       	eor	r1, r1
    2bd8:	28 0f       	add	r18, r24
    2bda:	39 1f       	adc	r19, r25
    2bdc:	68 31       	cpi	r22, 0x18	; 24
    2bde:	21 f4       	brne	.+8      	; 0x2be8 <PM_InterpretAVRISPPacket+0x1f8>
    2be0:	d9 01       	movw	r26, r18
    2be2:	a7 5f       	subi	r26, 0xF7	; 247
    2be4:	bf 4f       	sbci	r27, 0xFF	; 255
    2be6:	03 c0       	rjmp	.+6      	; 0x2bee <PM_InterpretAVRISPPacket+0x1fe>
    2be8:	d9 01       	movw	r26, r18
    2bea:	af 5c       	subi	r26, 0xCF	; 207
    2bec:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2bee:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
    2bf2:	80 2d       	mov	r24, r0
    2bf4:	80 93 4d 01 	sts	0x014D, r24
    2bf8:	10 92 4c 01 	sts	0x014C, r1
    2bfc:	10 92 4e 01 	sts	0x014E, r1
    2c00:	4f 5f       	subi	r20, 0xFF	; 255
    2c02:	5f 4f       	sbci	r21, 0xFF	; 255
    2c04:	50 93 67 02 	sts	0x0267, r21
    2c08:	40 93 66 02 	sts	0x0266, r20
    2c0c:	34 c1       	rjmp	.+616    	; 0x2e76 <PM_InterpretAVRISPPacket+0x486>
    2c0e:	83 e0       	ldi	r24, 0x03	; 3
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	90 93 48 01 	sts	0x0148, r25
    2c16:	80 93 47 01 	sts	0x0147, r24
    2c1a:	80 91 60 02 	lds	r24, 0x0260
    2c1e:	83 30       	cpi	r24, 0x03	; 3
    2c20:	39 f0       	breq	.+14     	; 0x2c30 <PM_InterpretAVRISPPacket+0x240>
    2c22:	83 e0       	ldi	r24, 0x03	; 3
    2c24:	80 93 60 02 	sts	0x0260, r24
    2c28:	10 92 67 02 	sts	0x0267, r1
    2c2c:	10 92 66 02 	sts	0x0266, r1
    2c30:	20 91 66 02 	lds	r18, 0x0266
    2c34:	30 91 67 02 	lds	r19, 0x0267
    2c38:	47 31       	cpi	r20, 0x17	; 23
    2c3a:	69 f4       	brne	.+26     	; 0x2c56 <PM_InterpretAVRISPPacket+0x266>
    2c3c:	80 ea       	ldi	r24, 0xA0	; 160
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	28 9f       	mul	r18, r24
    2c42:	e0 01       	movw	r28, r0
    2c44:	29 9f       	mul	r18, r25
    2c46:	d0 0d       	add	r29, r0
    2c48:	38 9f       	mul	r19, r24
    2c4a:	d0 0d       	add	r29, r0
    2c4c:	11 24       	eor	r1, r1
    2c4e:	cf 5c       	subi	r28, 0xCF	; 207
    2c50:	df 4f       	sbci	r29, 0xFF	; 255
    2c52:	82 e0       	ldi	r24, 0x02	; 2
    2c54:	0c c0       	rjmp	.+24     	; 0x2c6e <PM_InterpretAVRISPPacket+0x27e>
    2c56:	80 ea       	ldi	r24, 0xA0	; 160
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	28 9f       	mul	r18, r24
    2c5c:	e0 01       	movw	r28, r0
    2c5e:	29 9f       	mul	r18, r25
    2c60:	d0 0d       	add	r29, r0
    2c62:	38 9f       	mul	r19, r24
    2c64:	d0 0d       	add	r29, r0
    2c66:	11 24       	eor	r1, r1
    2c68:	c7 5a       	subi	r28, 0xA7	; 167
    2c6a:	df 4f       	sbci	r29, 0xFF	; 255
    2c6c:	83 e0       	ldi	r24, 0x03	; 3
    2c6e:	80 93 61 02 	sts	0x0261, r24
    2c72:	80 91 66 02 	lds	r24, 0x0266
    2c76:	90 91 67 02 	lds	r25, 0x0267
    2c7a:	0a 97       	sbiw	r24, 0x0a	; 10
    2c7c:	a8 f4       	brcc	.+42     	; 0x2ca8 <PM_InterpretAVRISPPacket+0x2b8>
    2c7e:	ec e4       	ldi	r30, 0x4C	; 76
    2c80:	f1 e0       	ldi	r31, 0x01	; 1
    2c82:	93 e0       	ldi	r25, 0x03	; 3
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2c84:	81 91       	ld	r24, Z+
  asm volatile (
    2c86:	de 01       	movw	r26, r28
    2c88:	08 2e       	mov	r0, r24
    2c8a:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
    2c8e:	21 96       	adiw	r28, 0x01	; 1
    2c90:	91 50       	subi	r25, 0x01	; 1
    2c92:	97 ff       	sbrs	r25, 7
    2c94:	f7 cf       	rjmp	.-18     	; 0x2c84 <PM_InterpretAVRISPPacket+0x294>
    2c96:	80 91 66 02 	lds	r24, 0x0266
    2c9a:	90 91 67 02 	lds	r25, 0x0267
    2c9e:	01 96       	adiw	r24, 0x01	; 1
    2ca0:	90 93 67 02 	sts	0x0267, r25
    2ca4:	80 93 66 02 	sts	0x0266, r24
    2ca8:	10 92 4c 01 	sts	0x014C, r1
    2cac:	10 92 4d 01 	sts	0x014D, r1
    2cb0:	e2 c0       	rjmp	.+452    	; 0x2e76 <PM_InterpretAVRISPPacket+0x486>
    2cb2:	82 e0       	ldi	r24, 0x02	; 2
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	90 93 48 01 	sts	0x0148, r25
    2cba:	80 93 47 01 	sts	0x0147, r24
    2cbe:	80 91 60 02 	lds	r24, 0x0260
    2cc2:	81 30       	cpi	r24, 0x01	; 1
    2cc4:	f9 f0       	breq	.+62     	; 0x2d04 <PM_InterpretAVRISPPacket+0x314>
    2cc6:	43 31       	cpi	r20, 0x13	; 19
    2cc8:	21 f4       	brne	.+8      	; 0x2cd2 <PM_InterpretAVRISPPacket+0x2e2>
    2cca:	c2 e0       	ldi	r28, 0x02	; 2
    2ccc:	d0 e0       	ldi	r29, 0x00	; 0
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	03 c0       	rjmp	.+6      	; 0x2cd8 <PM_InterpretAVRISPPacket+0x2e8>
    2cd2:	cb e0       	ldi	r28, 0x0B	; 11
    2cd4:	d0 e0       	ldi	r29, 0x00	; 0
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	0e 94 1a 14 	call	0x2834 <PM_SetupDFAddressCounters>
    2cdc:	80 91 66 02 	lds	r24, 0x0266
    2ce0:	90 91 67 02 	lds	r25, 0x0267
    2ce4:	0e 94 45 0a 	call	0x148a <DF_BufferWriteEnable>
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	80 93 60 02 	sts	0x0260, r24
    2cee:	ec e4       	ldi	r30, 0x4C	; 76
    2cf0:	f1 e0       	ldi	r31, 0x01	; 1
    2cf2:	98 e0       	ldi	r25, 0x08	; 8
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2cf4:	81 91       	ld	r24, Z+
  asm volatile (
    2cf6:	de 01       	movw	r26, r28
    2cf8:	08 2e       	mov	r0, r24
    2cfa:	0e 94 69 1a 	call	0x34d2 <__eeprom_write_byte_1F2021>
    2cfe:	91 50       	subi	r25, 0x01	; 1
    2d00:	97 ff       	sbrs	r25, 7
    2d02:	f8 cf       	rjmp	.-16     	; 0x2cf4 <PM_InterpretAVRISPPacket+0x304>
    2d04:	80 91 4c 01 	lds	r24, 0x014C
    2d08:	99 27       	eor	r25, r25
    2d0a:	d8 2f       	mov	r29, r24
    2d0c:	cc 27       	eor	r28, r28
    2d0e:	80 91 4d 01 	lds	r24, 0x014D
    2d12:	99 27       	eor	r25, r25
    2d14:	c8 2b       	or	r28, r24
    2d16:	d9 2b       	or	r29, r25
    2d18:	00 e0       	ldi	r16, 0x00	; 0
    2d1a:	10 e0       	ldi	r17, 0x00	; 0
    2d1c:	0c 17       	cp	r16, r28
    2d1e:	1d 07       	cpc	r17, r29
    2d20:	70 f4       	brcc	.+28     	; 0x2d3e <PM_InterpretAVRISPPacket+0x34e>
    2d22:	55 e5       	ldi	r21, 0x55	; 85
    2d24:	e5 2e       	mov	r14, r21
    2d26:	51 e0       	ldi	r21, 0x01	; 1
    2d28:	f5 2e       	mov	r15, r21
    2d2a:	f7 01       	movw	r30, r14
    2d2c:	81 91       	ld	r24, Z+
    2d2e:	7f 01       	movw	r14, r30
    2d30:	0e 94 5c 14 	call	0x28b8 <PM_StoreProgramByte>
    2d34:	0f 5f       	subi	r16, 0xFF	; 255
    2d36:	1f 4f       	sbci	r17, 0xFF	; 255
    2d38:	0c 17       	cp	r16, r28
    2d3a:	1d 07       	cpc	r17, r29
    2d3c:	b0 f3       	brcs	.-20     	; 0x2d2a <PM_InterpretAVRISPPacket+0x33a>
    2d3e:	20 91 5e 02 	lds	r18, 0x025E
    2d42:	30 91 5f 02 	lds	r19, 0x025F
    2d46:	37 fd       	sbrc	r19, 7
    2d48:	1c c0       	rjmp	.+56     	; 0x2d82 <PM_InterpretAVRISPPacket+0x392>
    2d4a:	80 91 4e 01 	lds	r24, 0x014E
    2d4e:	87 ff       	sbrs	r24, 7
    2d50:	18 c0       	rjmp	.+48     	; 0x2d82 <PM_InterpretAVRISPPacket+0x392>
    2d52:	21 15       	cp	r18, r1
    2d54:	31 05       	cpc	r19, r1
    2d56:	a9 f0       	breq	.+42     	; 0x2d82 <PM_InterpretAVRISPPacket+0x392>
    Write a word \c value to EEPROM address \c addr. */

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
    2d58:	80 91 61 02 	lds	r24, 0x0261
    2d5c:	81 30       	cpi	r24, 0x01	; 1
    2d5e:	19 f4       	brne	.+6      	; 0x2d66 <PM_InterpretAVRISPPacket+0x376>
    2d60:	a1 e8       	ldi	r26, 0x81	; 129
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <PM_InterpretAVRISPPacket+0x37a>
    2d66:	a3 e8       	ldi	r26, 0x83	; 131
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
  asm volatile (
    2d6a:	09 01       	movw	r0, r18
    2d6c:	0e 94 75 1a 	call	0x34ea <__eeprom_write_word_1F2021>
    2d70:	80 91 5e 02 	lds	r24, 0x025E
    2d74:	90 91 5f 02 	lds	r25, 0x025F
    2d78:	90 68       	ori	r25, 0x80	; 128
    2d7a:	90 93 5f 02 	sts	0x025F, r25
    2d7e:	80 93 5e 02 	sts	0x025E, r24
    2d82:	10 92 4c 01 	sts	0x014C, r1
    2d86:	77 c0       	rjmp	.+238    	; 0x2e76 <PM_InterpretAVRISPPacket+0x486>
    2d88:	80 91 60 02 	lds	r24, 0x0260
    2d8c:	82 30       	cpi	r24, 0x02	; 2
    2d8e:	01 f1       	breq	.+64     	; 0x2dd0 <PM_InterpretAVRISPPacket+0x3e0>
    2d90:	0e 94 91 14 	call	0x2922 <PM_CheckEndOfFuseLockData>
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	80 91 4b 01 	lds	r24, 0x014B
    2d9a:	84 31       	cpi	r24, 0x14	; 20
    2d9c:	09 f4       	brne	.+2      	; 0x2da0 <PM_InterpretAVRISPPacket+0x3b0>
    2d9e:	91 e0       	ldi	r25, 0x01	; 1
    2da0:	89 2f       	mov	r24, r25
    2da2:	0e 94 1a 14 	call	0x2834 <PM_SetupDFAddressCounters>
    2da6:	60 91 66 02 	lds	r22, 0x0266
    2daa:	70 91 67 02 	lds	r23, 0x0267
    2dae:	80 91 6d 02 	lds	r24, 0x026D
    2db2:	90 91 6e 02 	lds	r25, 0x026E
    2db6:	0e 94 09 0a 	call	0x1412 <DF_ContinuousReadEnable>
    2dba:	82 e0       	ldi	r24, 0x02	; 2
    2dbc:	80 93 60 02 	sts	0x0260, r24
    2dc0:	10 92 42 01 	sts	0x0142, r1
    2dc4:	10 92 43 01 	sts	0x0143, r1
    2dc8:	10 92 44 01 	sts	0x0144, r1
    2dcc:	10 92 45 01 	sts	0x0145, r1
    2dd0:	80 91 4c 01 	lds	r24, 0x014C
    2dd4:	99 27       	eor	r25, r25
    2dd6:	d8 2f       	mov	r29, r24
    2dd8:	cc 27       	eor	r28, r28
    2dda:	80 91 4d 01 	lds	r24, 0x014D
    2dde:	99 27       	eor	r25, r25
    2de0:	c8 2b       	or	r28, r24
    2de2:	d9 2b       	or	r29, r25
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	80 91 4b 01 	lds	r24, 0x014B
    2dea:	84 31       	cpi	r24, 0x14	; 20
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <PM_InterpretAVRISPPacket+0x400>
    2dee:	91 e0       	ldi	r25, 0x01	; 1
    2df0:	89 2f       	mov	r24, r25
    2df2:	0e 94 e3 13 	call	0x27c6 <PM_GetStoredDataSize>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	7c 01       	movw	r14, r24
    2dfc:	00 e0       	ldi	r16, 0x00	; 0
    2dfe:	10 e0       	ldi	r17, 0x00	; 0
    2e00:	0c 17       	cp	r16, r28
    2e02:	1d 07       	cpc	r17, r29
    2e04:	18 f5       	brcc	.+70     	; 0x2e4c <PM_InterpretAVRISPPacket+0x45c>
    2e06:	3d e4       	ldi	r19, 0x4D	; 77
    2e08:	c3 2e       	mov	r12, r19
    2e0a:	31 e0       	ldi	r19, 0x01	; 1
    2e0c:	d3 2e       	mov	r13, r19
    2e0e:	97 01       	movw	r18, r14
    2e10:	44 27       	eor	r20, r20
    2e12:	55 27       	eor	r21, r21
    2e14:	80 91 42 01 	lds	r24, 0x0142
    2e18:	90 91 43 01 	lds	r25, 0x0143
    2e1c:	a0 91 44 01 	lds	r26, 0x0144
    2e20:	b0 91 45 01 	lds	r27, 0x0145
    2e24:	82 17       	cp	r24, r18
    2e26:	93 07       	cpc	r25, r19
    2e28:	a4 07       	cpc	r26, r20
    2e2a:	b5 07       	cpc	r27, r21
    2e2c:	20 f4       	brcc	.+8      	; 0x2e36 <PM_InterpretAVRISPPacket+0x446>
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    2e34:	01 c0       	rjmp	.+2      	; 0x2e38 <PM_InterpretAVRISPPacket+0x448>
    2e36:	8f ef       	ldi	r24, 0xFF	; 255
    2e38:	f6 01       	movw	r30, r12
    2e3a:	81 93       	st	Z+, r24
    2e3c:	6f 01       	movw	r12, r30
    2e3e:	0e 94 3b 0f 	call	0x1e76 <V2P_IncrementCurrAddress>
    2e42:	0f 5f       	subi	r16, 0xFF	; 255
    2e44:	1f 4f       	sbci	r17, 0xFF	; 255
    2e46:	0c 17       	cp	r16, r28
    2e48:	1d 07       	cpc	r17, r29
    2e4a:	08 f3       	brcs	.-62     	; 0x2e0e <PM_InterpretAVRISPPacket+0x41e>
    2e4c:	23 96       	adiw	r28, 0x03	; 3
    2e4e:	d0 93 48 01 	sts	0x0148, r29
    2e52:	c0 93 47 01 	sts	0x0147, r28
    2e56:	23 97       	sbiw	r28, 0x03	; 3
    2e58:	10 92 4c 01 	sts	0x014C, r1
    2e5c:	c5 5b       	subi	r28, 0xB5	; 181
    2e5e:	de 4f       	sbci	r29, 0xFE	; 254
    2e60:	1a 82       	std	Y+2, r1	; 0x02
    2e62:	09 c0       	rjmp	.+18     	; 0x2e76 <PM_InterpretAVRISPPacket+0x486>
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	90 93 48 01 	sts	0x0148, r25
    2e6c:	80 93 47 01 	sts	0x0147, r24
    2e70:	89 ec       	ldi	r24, 0xC9	; 201
    2e72:	80 93 4c 01 	sts	0x014C, r24
    2e76:	0e 94 5a 0e 	call	0x1cb4 <V2P_SendPacket>
    2e7a:	df 91       	pop	r29
    2e7c:	cf 91       	pop	r28
    2e7e:	1f 91       	pop	r17
    2e80:	0f 91       	pop	r16
    2e82:	ff 90       	pop	r15
    2e84:	ef 90       	pop	r14
    2e86:	df 90       	pop	r13
    2e88:	cf 90       	pop	r12
    2e8a:	08 95       	ret

00002e8c <PM_SendFuseLockBytes>:
	{
		// CurrBuffByte stores the total number of fuse/lock bytes written in this case:
		eeprom_write_byte(((MemoryType == TYPE_FUSE)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes), CurrBuffByte);
	}
}

void PM_SendFuseLockBytes(const uint8_t Type)
{
    2e8c:	0f 93       	push	r16
    2e8e:	1f 93       	push	r17
    2e90:	cf 93       	push	r28
    2e92:	df 93       	push	r29
	uint8_t* EEPROMAddress;
	uint8_t  TotalBytes;

	if (Type == TYPE_FUSE)
    2e94:	82 30       	cpi	r24, 0x02	; 2
    2e96:	49 f4       	brne	.+18     	; 0x2eaa <PM_SendFuseLockBytes+0x1e>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2e98:	af e2       	ldi	r26, 0x2F	; 47
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2e9c:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
    2ea0:	80 2d       	mov	r24, r0
    2ea2:	18 2f       	mov	r17, r24
	{
		TotalBytes    = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
		EEPROMAddress = EEPROMVars.FuseBytes;
    2ea4:	c1 e3       	ldi	r28, 0x31	; 49
    2ea6:	d0 e0       	ldi	r29, 0x00	; 0
    2ea8:	08 c0       	rjmp	.+16     	; 0x2eba <PM_SendFuseLockBytes+0x2e>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2eaa:	a0 e3       	ldi	r26, 0x30	; 48
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2eae:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
    2eb2:	80 2d       	mov	r24, r0
    2eb4:	18 2f       	mov	r17, r24
	}
	else
	{
		TotalBytes    = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
		EEPROMAddress = EEPROMVars.LockBytes;	
    2eb6:	c9 e5       	ldi	r28, 0x59	; 89
    2eb8:	d0 e0       	ldi	r29, 0x00	; 0
	}

	while (TotalBytes--)                              // Write each of the fuse/lock bytes stored in memory to the slave AVR
	{
		for (uint8_t CommandByte = 0; CommandByte < 4; CommandByte++)      // Write each individual command byte
		{
			USI_SPITransmit(eeprom_read_byte(EEPROMAddress));
			EEPROMAddress++;
		}
		
		// Add some delay before programming next byte, if there is one:
		if (TotalBytes)
		  MAIN_Delay10MS(5);
    2eba:	11 50       	subi	r17, 0x01	; 1
    2ebc:	1f 3f       	cpi	r17, 0xFF	; 255
    2ebe:	91 f0       	breq	.+36     	; 0x2ee4 <PM_SendFuseLockBytes+0x58>
    2ec0:	03 e0       	ldi	r16, 0x03	; 3
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2ec2:	de 01       	movw	r26, r28
    2ec4:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
    2ec8:	80 2d       	mov	r24, r0
    2eca:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2ece:	21 96       	adiw	r28, 0x01	; 1
    2ed0:	01 50       	subi	r16, 0x01	; 1
    2ed2:	07 ff       	sbrs	r16, 7
    2ed4:	f6 cf       	rjmp	.-20     	; 0x2ec2 <PM_SendFuseLockBytes+0x36>
    2ed6:	11 23       	and	r17, r17
    2ed8:	19 f0       	breq	.+6      	; 0x2ee0 <PM_SendFuseLockBytes+0x54>
    2eda:	85 e0       	ldi	r24, 0x05	; 5
    2edc:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
    2ee0:	11 50       	subi	r17, 0x01	; 1
    2ee2:	70 f7       	brcc	.-36     	; 0x2ec0 <PM_SendFuseLockBytes+0x34>
    2ee4:	df 91       	pop	r29
    2ee6:	cf 91       	pop	r28
    2ee8:	1f 91       	pop	r17
    2eea:	0f 91       	pop	r16
    2eec:	08 95       	ret

00002eee <PM_SendEraseCommand>:
	}
}

void PM_SendEraseCommand(void)
{			
    2eee:	1f 93       	push	r17
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    2ef4:	c2 e0       	ldi	r28, 0x02	; 2
    2ef6:	d0 e0       	ldi	r29, 0x00	; 0
    2ef8:	13 e0       	ldi	r17, 0x03	; 3
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2efa:	de 01       	movw	r26, r28
    2efc:	ab 5e       	subi	r26, 0xEB	; 235
    2efe:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2f00:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
    2f04:	80 2d       	mov	r24, r0
    2f06:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
	for (uint8_t B = 2; B < 6 ; B++)                  // Read out the erase chip command bytes
    2f0a:	11 50       	subi	r17, 0x01	; 1
    2f0c:	21 96       	adiw	r28, 0x01	; 1
    2f0e:	17 ff       	sbrs	r17, 7
    2f10:	f4 cf       	rjmp	.-24     	; 0x2efa <PM_SendEraseCommand+0xc>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2f12:	a6 e1       	ldi	r26, 0x16	; 22
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2f16:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
    2f1a:	80 2d       	mov	r24, r0
    2f1c:	88 23       	and	r24, r24
    2f1e:	59 f0       	breq	.+22     	; 0x2f36 <PM_SendEraseCommand+0x48>
	  USI_SPITransmit(eeprom_read_byte(&EEPROMVars.EraseChip[B])); // Send the erase chip commands
			
	if (eeprom_read_byte(&EEPROMVars.EraseChip[1]))   // Value of 1 indicates a busy flag test
	{
		do
			USI_SPITransmitWord(0xF000);
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	90 ef       	ldi	r25, 0xF0	; 240
    2f24:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2f30:	80 fd       	sbrc	r24, 0
    2f32:	f6 cf       	rjmp	.-20     	; 0x2f20 <PM_SendEraseCommand+0x32>
    2f34:	07 c0       	rjmp	.+14     	; 0x2f44 <PM_SendEraseCommand+0x56>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2f36:	a5 e1       	ldi	r26, 0x15	; 21
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2f3a:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
    2f3e:	80 2d       	mov	r24, r0
    2f40:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    2f44:	df 91       	pop	r29
    2f46:	cf 91       	pop	r28
    2f48:	1f 91       	pop	r17
    2f4a:	08 95       	ret

00002f4c <PM_CreateProgrammingPackets>:
		while (USI_SPITransmitWord(0x0000) & 0x01);
	}
	else                                              // Cleared flag means use a predefined delay
	{		
		MAIN_Delay1MS(eeprom_read_byte(&EEPROMVars.EraseChip[0])); // Wait the erase delay
	}
}

void PM_CreateProgrammingPackets(const uint8_t Type)
{			
    2f4c:	3f 92       	push	r3
    2f4e:	4f 92       	push	r4
    2f50:	5f 92       	push	r5
    2f52:	6f 92       	push	r6
    2f54:	7f 92       	push	r7
    2f56:	8f 92       	push	r8
    2f58:	9f 92       	push	r9
    2f5a:	af 92       	push	r10
    2f5c:	bf 92       	push	r11
    2f5e:	cf 92       	push	r12
    2f60:	df 92       	push	r13
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	c8 2f       	mov	r28, r24
	uint32_t BytesRead       = 0;
    2f70:	aa 24       	eor	r10, r10
    2f72:	bb 24       	eor	r11, r11
    2f74:	65 01       	movw	r12, r10
	uint32_t BytesToRead     = PM_GetStoredDataSize(Type);      // Get the byte size of the stored program
    2f76:	0e 94 e3 13 	call	0x27c6 <PM_GetStoredDataSize>
    2f7a:	2b 01       	movw	r4, r22
    2f7c:	3c 01       	movw	r6, r24
	uint16_t BytesPerProgram;
	uint16_t PageLength;
	uint8_t* EEPROMAddress;
	uint8_t  ContinuedPage   = FALSE;
    2f7e:	33 24       	eor	r3, r3
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \c addr. */
uint16_t
eeprom_read_word (const uint16_t *addr)
{
    2f80:	c1 30       	cpi	r28, 0x01	; 1
    2f82:	19 f4       	brne	.+6      	; 0x2f8a <PM_CreateProgrammingPackets+0x3e>
    2f84:	a1 e8       	ldi	r26, 0x81	; 129
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	02 c0       	rjmp	.+4      	; 0x2f8e <PM_CreateProgrammingPackets+0x42>
    2f8a:	a3 e8       	ldi	r26, 0x83	; 131
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
  uint16_t result;

  asm ( 
    2f8e:	0e 94 64 1a 	call	0x34c8 <__eeprom_read_word_1F2021>
    2f92:	4f 01       	movw	r8, r30

	PageLength  = eeprom_read_word((Type == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength);
	CurrAddress = 0;
    2f94:	10 92 42 01 	sts	0x0142, r1
    2f98:	10 92 43 01 	sts	0x0143, r1
    2f9c:	10 92 44 01 	sts	0x0144, r1
    2fa0:	10 92 45 01 	sts	0x0145, r1

	if (Type == TYPE_FLASH)
    2fa4:	c1 30       	cpi	r28, 0x01	; 1
    2fa6:	49 f4       	brne	.+18     	; 0x2fba <PM_CreateProgrammingPackets+0x6e>
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram;       // Set the EEPROM pointer to the write flash command bytes location
    2fa8:	c2 e0       	ldi	r28, 0x02	; 2
    2faa:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(0, 0);
    2fac:	60 e0       	ldi	r22, 0x00	; 0
    2fae:	70 e0       	ldi	r23, 0x00	; 0
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	0e 94 09 0a 	call	0x1412 <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_FLASH_ISP;
    2fb6:	83 e1       	ldi	r24, 0x13	; 19
    2fb8:	09 c0       	rjmp	.+18     	; 0x2fcc <PM_CreateProgrammingPackets+0x80>
	}
	else
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;        // Set the EEPROM pointer to the write EEPROM command bytes location
    2fba:	cb e0       	ldi	r28, 0x0B	; 11
    2fbc:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(PM_EEPROM_OFFSET / DF_INTERNALDF_BUFFBYTES, PM_EEPROM_OFFSET % DF_INTERNALDF_BUFFBYTES); // Start read from the EEPROM offset location
    2fbe:	60 ee       	ldi	r22, 0xE0	; 224
    2fc0:	70 e0       	ldi	r23, 0x00	; 0
    2fc2:	84 ee       	ldi	r24, 0xE4	; 228
    2fc4:	93 e0       	ldi	r25, 0x03	; 3
    2fc6:	0e 94 09 0a 	call	0x1412 <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_EEPROM_ISP;
    2fca:	85 e1       	ldi	r24, 0x15	; 21
    2fcc:	80 93 4b 01 	sts	0x014B, r24
    2fd0:	ec e4       	ldi	r30, 0x4C	; 76
    2fd2:	f1 e0       	ldi	r31, 0x01	; 1
    2fd4:	98 e0       	ldi	r25, 0x08	; 8
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2fd6:	de 01       	movw	r26, r28
    2fd8:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
    2fdc:	80 2d       	mov	r24, r0
    2fde:	81 93       	st	Z+, r24
	}

	for (uint8_t B = 1; B <= 9 ; B++)                 // Load in the write data command bytes
	{
		PacketBytes[B] = eeprom_read_byte(EEPROMAddress); // Synthesise a write packet header
		EEPROMAddress++;                               // Increment the EEPROM location counter
    2fe0:	21 96       	adiw	r28, 0x01	; 1
    2fe2:	91 50       	subi	r25, 0x01	; 1
    2fe4:	97 ff       	sbrs	r25, 7
    2fe6:	f7 cf       	rjmp	.-18     	; 0x2fd6 <PM_CreateProgrammingPackets+0x8a>
	}
	
	BytesPerProgram = ((uint16_t)PacketBytes[1] << 8)
    2fe8:	80 91 4c 01 	lds	r24, 0x014C
    2fec:	99 27       	eor	r25, r25
    2fee:	d8 2f       	mov	r29, r24
    2ff0:	cc 27       	eor	r28, r28
    2ff2:	80 91 4d 01 	lds	r24, 0x014D
    2ff6:	99 27       	eor	r25, r25
    2ff8:	c8 2b       	or	r28, r24
    2ffa:	d9 2b       	or	r29, r25
	                | PacketBytes[2];

	while (BytesRead < BytesToRead)
	{
		if (PacketBytes[3] & ISPCC_PROG_MODE_PAGE)
		{
			if (PageLength > 160) // Max 160 bytes at a time
			{
				if (!(ContinuedPage))                      // Start of a new page, program in the first 150 bytes
				{
					BytesPerProgram = 160;
					PacketBytes[3] &= ~ISPCC_PROG_MODE_PAGEDONE;		
					ContinuedPage = TRUE;
				}
				else                                       // Middle of a page, program in the remainder
				{
					BytesPerProgram = PageLength - 160;
					PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
					ContinuedPage = FALSE;
				}
				
				for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page				

				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);
				PacketBytes[2] = (uint8_t)(BytesPerProgram);

				BytesRead += BytesPerProgram;                         // Increment the counter
			}
			else
			{
				for (uint16_t LoadB = 0; LoadB < PageLength; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page
			
				PacketBytes[1]  = (uint8_t)(PageLength >> 8);
				PacketBytes[2]  = (uint8_t)(PageLength);
				PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;

				BytesRead += PageLength;                            // Increment the counter
			}
		}
		else
		{
			if ((BytesRead + BytesPerProgram) > BytesToRead)        // Less than a whole BytesPerProgram left of data to write
			{
				BytesPerProgram = BytesToRead - BytesRead;          // Next lot of bytes will be the remaining data length
				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);   // \. Save the new length
				PacketBytes[2] = (uint8_t)(BytesPerProgram);        // /  into the data packet
			}

			for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
				PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);    // Load in the page
			
			BytesRead += BytesPerProgram;                           // Increment the counter
		}
	
		if (!(BytesRead & 0xFFFF) && (BytesRead & 0x00FF0000))      // Extended address required
		{
			USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);            // Load extended address command
			USI_SPITransmit(0x00);
			USI_SPITransmit((BytesRead & 0x00FF0000) >> 16);        // The 3rd byte of the long holds the extended address
			USI_SPITransmit(0x00);
		}

		ISPCC_ProgramChip();                                        // Start the program cycle
    2ffc:	a4 14       	cp	r10, r4
    2ffe:	b5 04       	cpc	r11, r5
    3000:	c6 04       	cpc	r12, r6
    3002:	d7 04       	cpc	r13, r7
    3004:	08 f0       	brcs	.+2      	; 0x3008 <PM_CreateProgrammingPackets+0xbc>
    3006:	b2 c0       	rjmp	.+356    	; 0x316c <PM_CreateProgrammingPackets+0x220>
    3008:	20 91 4e 01 	lds	r18, 0x014E
    300c:	82 2f       	mov	r24, r18
    300e:	99 27       	eor	r25, r25
    3010:	ac 01       	movw	r20, r24
    3012:	41 70       	andi	r20, 0x01	; 1
    3014:	50 70       	andi	r21, 0x00	; 0
    3016:	80 ff       	sbrs	r24, 0
    3018:	53 c0       	rjmp	.+166    	; 0x30c0 <PM_CreateProgrammingPackets+0x174>
    301a:	f1 ea       	ldi	r31, 0xA1	; 161
    301c:	8f 16       	cp	r8, r31
    301e:	91 04       	cpc	r9, r1
    3020:	60 f1       	brcs	.+88     	; 0x307a <PM_CreateProgrammingPackets+0x12e>
    3022:	33 20       	and	r3, r3
    3024:	41 f4       	brne	.+16     	; 0x3036 <PM_CreateProgrammingPackets+0xea>
    3026:	c0 ea       	ldi	r28, 0xA0	; 160
    3028:	d0 e0       	ldi	r29, 0x00	; 0
    302a:	2f 77       	andi	r18, 0x7F	; 127
    302c:	20 93 4e 01 	sts	0x014E, r18
    3030:	31 e0       	ldi	r19, 0x01	; 1
    3032:	33 2e       	mov	r3, r19
    3034:	07 c0       	rjmp	.+14     	; 0x3044 <PM_CreateProgrammingPackets+0xf8>
    3036:	e4 01       	movw	r28, r8
    3038:	c0 5a       	subi	r28, 0xA0	; 160
    303a:	d0 40       	sbci	r29, 0x00	; 0
    303c:	20 68       	ori	r18, 0x80	; 128
    303e:	20 93 4e 01 	sts	0x014E, r18
    3042:	33 24       	eor	r3, r3
    3044:	00 e0       	ldi	r16, 0x00	; 0
    3046:	10 e0       	ldi	r17, 0x00	; 0
    3048:	0c 17       	cp	r16, r28
    304a:	1d 07       	cpc	r17, r29
    304c:	78 f4       	brcc	.+30     	; 0x306c <PM_CreateProgrammingPackets+0x120>
    304e:	25 e5       	ldi	r18, 0x55	; 85
    3050:	e2 2e       	mov	r14, r18
    3052:	21 e0       	ldi	r18, 0x01	; 1
    3054:	f2 2e       	mov	r15, r18
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    305c:	f7 01       	movw	r30, r14
    305e:	81 93       	st	Z+, r24
    3060:	7f 01       	movw	r14, r30
    3062:	0f 5f       	subi	r16, 0xFF	; 255
    3064:	1f 4f       	sbci	r17, 0xFF	; 255
    3066:	0c 17       	cp	r16, r28
    3068:	1d 07       	cpc	r17, r29
    306a:	a8 f3       	brcs	.-22     	; 0x3056 <PM_CreateProgrammingPackets+0x10a>
    306c:	8d 2f       	mov	r24, r29
    306e:	99 27       	eor	r25, r25
    3070:	80 93 4c 01 	sts	0x014C, r24
    3074:	c0 93 4d 01 	sts	0x014D, r28
    3078:	4b c0       	rjmp	.+150    	; 0x3110 <PM_CreateProgrammingPackets+0x1c4>
    307a:	00 e0       	ldi	r16, 0x00	; 0
    307c:	10 e0       	ldi	r17, 0x00	; 0
    307e:	08 15       	cp	r16, r8
    3080:	19 05       	cpc	r17, r9
    3082:	78 f4       	brcc	.+30     	; 0x30a2 <PM_CreateProgrammingPackets+0x156>
    3084:	85 e5       	ldi	r24, 0x55	; 85
    3086:	e8 2e       	mov	r14, r24
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	f8 2e       	mov	r15, r24
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    3092:	f7 01       	movw	r30, r14
    3094:	81 93       	st	Z+, r24
    3096:	7f 01       	movw	r14, r30
    3098:	0f 5f       	subi	r16, 0xFF	; 255
    309a:	1f 4f       	sbci	r17, 0xFF	; 255
    309c:	08 15       	cp	r16, r8
    309e:	19 05       	cpc	r17, r9
    30a0:	a8 f3       	brcs	.-22     	; 0x308c <PM_CreateProgrammingPackets+0x140>
    30a2:	89 2d       	mov	r24, r9
    30a4:	99 27       	eor	r25, r25
    30a6:	80 93 4c 01 	sts	0x014C, r24
    30aa:	80 92 4d 01 	sts	0x014D, r8
    30ae:	80 91 4e 01 	lds	r24, 0x014E
    30b2:	80 68       	ori	r24, 0x80	; 128
    30b4:	80 93 4e 01 	sts	0x014E, r24
    30b8:	c4 01       	movw	r24, r8
    30ba:	aa 27       	eor	r26, r26
    30bc:	bb 27       	eor	r27, r27
    30be:	2b c0       	rjmp	.+86     	; 0x3116 <PM_CreateProgrammingPackets+0x1ca>
    30c0:	ce 01       	movw	r24, r28
    30c2:	aa 27       	eor	r26, r26
    30c4:	bb 27       	eor	r27, r27
    30c6:	8a 0d       	add	r24, r10
    30c8:	9b 1d       	adc	r25, r11
    30ca:	ac 1d       	adc	r26, r12
    30cc:	bd 1d       	adc	r27, r13
    30ce:	48 16       	cp	r4, r24
    30d0:	59 06       	cpc	r5, r25
    30d2:	6a 06       	cpc	r6, r26
    30d4:	7b 06       	cpc	r7, r27
    30d6:	48 f4       	brcc	.+18     	; 0x30ea <PM_CreateProgrammingPackets+0x19e>
    30d8:	e2 01       	movw	r28, r4
    30da:	ca 19       	sub	r28, r10
    30dc:	db 09       	sbc	r29, r11
    30de:	8d 2f       	mov	r24, r29
    30e0:	99 27       	eor	r25, r25
    30e2:	80 93 4c 01 	sts	0x014C, r24
    30e6:	c0 93 4d 01 	sts	0x014D, r28
    30ea:	8a 01       	movw	r16, r20
    30ec:	4c 17       	cp	r20, r28
    30ee:	5d 07       	cpc	r21, r29
    30f0:	78 f4       	brcc	.+30     	; 0x3110 <PM_CreateProgrammingPackets+0x1c4>
    30f2:	f5 e5       	ldi	r31, 0x55	; 85
    30f4:	ef 2e       	mov	r14, r31
    30f6:	f1 e0       	ldi	r31, 0x01	; 1
    30f8:	ff 2e       	mov	r15, r31
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    3100:	f7 01       	movw	r30, r14
    3102:	81 93       	st	Z+, r24
    3104:	7f 01       	movw	r14, r30
    3106:	0f 5f       	subi	r16, 0xFF	; 255
    3108:	1f 4f       	sbci	r17, 0xFF	; 255
    310a:	0c 17       	cp	r16, r28
    310c:	1d 07       	cpc	r17, r29
    310e:	a8 f3       	brcs	.-22     	; 0x30fa <PM_CreateProgrammingPackets+0x1ae>
    3110:	ce 01       	movw	r24, r28
    3112:	aa 27       	eor	r26, r26
    3114:	bb 27       	eor	r27, r27
    3116:	a8 0e       	add	r10, r24
    3118:	b9 1e       	adc	r11, r25
    311a:	ca 1e       	adc	r12, r26
    311c:	db 1e       	adc	r13, r27
    311e:	a1 14       	cp	r10, r1
    3120:	b1 04       	cpc	r11, r1
    3122:	e1 f4       	brne	.+56     	; 0x315c <PM_CreateProgrammingPackets+0x210>
    3124:	e1 2c       	mov	r14, r1
    3126:	f1 2c       	mov	r15, r1
    3128:	ef ef       	ldi	r30, 0xFF	; 255
    312a:	0e 2f       	mov	r16, r30
    312c:	11 2d       	mov	r17, r1
    312e:	ea 20       	and	r14, r10
    3130:	fb 20       	and	r15, r11
    3132:	0c 21       	and	r16, r12
    3134:	1d 21       	and	r17, r13
    3136:	e1 14       	cp	r14, r1
    3138:	f1 04       	cpc	r15, r1
    313a:	01 05       	cpc	r16, r1
    313c:	11 05       	cpc	r17, r1
    313e:	71 f0       	breq	.+28     	; 0x315c <PM_CreateProgrammingPackets+0x210>
    3140:	8d e4       	ldi	r24, 0x4D	; 77
    3142:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    314c:	c8 01       	movw	r24, r16
    314e:	aa 27       	eor	r26, r26
    3150:	bb 27       	eor	r27, r27
    3152:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    315c:	0e 94 8b 11 	call	0x2316 <ISPCC_ProgramChip>
    3160:	a4 14       	cp	r10, r4
    3162:	b5 04       	cpc	r11, r5
    3164:	c6 04       	cpc	r12, r6
    3166:	d7 04       	cpc	r13, r7
    3168:	08 f4       	brcc	.+2      	; 0x316c <PM_CreateProgrammingPackets+0x220>
    316a:	4e cf       	rjmp	.-356    	; 0x3008 <PM_CreateProgrammingPackets+0xbc>
    316c:	df 91       	pop	r29
    316e:	cf 91       	pop	r28
    3170:	1f 91       	pop	r17
    3172:	0f 91       	pop	r16
    3174:	ff 90       	pop	r15
    3176:	ef 90       	pop	r14
    3178:	df 90       	pop	r13
    317a:	cf 90       	pop	r12
    317c:	bf 90       	pop	r11
    317e:	af 90       	pop	r10
    3180:	9f 90       	pop	r9
    3182:	8f 90       	pop	r8
    3184:	7f 90       	pop	r7
    3186:	6f 90       	pop	r6
    3188:	5f 90       	pop	r5
    318a:	4f 90       	pop	r4
    318c:	3f 90       	pop	r3
    318e:	08 95       	ret

00003190 <PM_ShowStoredItemSizes>:
	}
}

void PM_ShowStoredItemSizes(void)
{
    3190:	1f 93       	push	r17
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
    319a:	2e 97       	sbiw	r28, 0x0e	; 14
    319c:	0f b6       	in	r0, 0x3f	; 63
    319e:	f8 94       	cli
    31a0:	de bf       	out	0x3e, r29	; 62
    31a2:	0f be       	out	0x3f, r0	; 63
    31a4:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[14];
	uint8_t ItemInfoIndex = 0;
    31a6:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t TempB;
	
	JoyStatus = 1;
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)                           // Joystick is in the non-center position
    31ac:	8e b3       	in	r24, 0x1e	; 30
    31ae:	88 23       	and	r24, r24
    31b0:	e9 f3       	breq	.-6      	; 0x31ac <PM_ShowStoredItemSizes+0x1c>
		{
			if (JoyStatus & JOY_UP)              // Previous item
    31b2:	f6 9b       	sbis	0x1e, 6	; 30
    31b4:	06 c0       	rjmp	.+12     	; 0x31c2 <PM_ShowStoredItemSizes+0x32>
				(ItemInfoIndex == 0)? ItemInfoIndex = 3 : ItemInfoIndex--;
    31b6:	11 23       	and	r17, r17
    31b8:	11 f4       	brne	.+4      	; 0x31be <PM_ShowStoredItemSizes+0x2e>
    31ba:	13 e0       	ldi	r17, 0x03	; 3
    31bc:	0c c0       	rjmp	.+24     	; 0x31d6 <PM_ShowStoredItemSizes+0x46>
    31be:	11 50       	subi	r17, 0x01	; 1
    31c0:	0a c0       	rjmp	.+20     	; 0x31d6 <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_DOWN)      // Next item
    31c2:	f7 9b       	sbis	0x1e, 7	; 30
    31c4:	06 c0       	rjmp	.+12     	; 0x31d2 <PM_ShowStoredItemSizes+0x42>
				(ItemInfoIndex == 3)? ItemInfoIndex = 0 : ItemInfoIndex++;
    31c6:	13 30       	cpi	r17, 0x03	; 3
    31c8:	11 f4       	brne	.+4      	; 0x31ce <PM_ShowStoredItemSizes+0x3e>
    31ca:	10 e0       	ldi	r17, 0x00	; 0
    31cc:	04 c0       	rjmp	.+8      	; 0x31d6 <PM_ShowStoredItemSizes+0x46>
    31ce:	1f 5f       	subi	r17, 0xFF	; 255
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_LEFT)
    31d2:	f2 99       	sbic	0x1e, 2	; 30
    31d4:	54 c0       	rjmp	.+168    	; 0x327e <PM_ShowStoredItemSizes+0xee>
				return;
		
			switch (ItemInfoIndex)
    31d6:	81 2f       	mov	r24, r17
    31d8:	99 27       	eor	r25, r25
    31da:	81 30       	cpi	r24, 0x01	; 1
    31dc:	91 05       	cpc	r25, r1
    31de:	a1 f0       	breq	.+40     	; 0x3208 <PM_ShowStoredItemSizes+0x78>
    31e0:	82 30       	cpi	r24, 0x02	; 2
    31e2:	91 05       	cpc	r25, r1
    31e4:	1c f4       	brge	.+6      	; 0x31ec <PM_ShowStoredItemSizes+0x5c>
    31e6:	89 2b       	or	r24, r25
    31e8:	39 f0       	breq	.+14     	; 0x31f8 <PM_ShowStoredItemSizes+0x68>
    31ea:	42 c0       	rjmp	.+132    	; 0x3270 <PM_ShowStoredItemSizes+0xe0>
    31ec:	82 30       	cpi	r24, 0x02	; 2
    31ee:	91 05       	cpc	r25, r1
    31f0:	01 f1       	breq	.+64     	; 0x3232 <PM_ShowStoredItemSizes+0xa2>
    31f2:	03 97       	sbiw	r24, 0x03	; 3
    31f4:	39 f1       	breq	.+78     	; 0x3244 <PM_ShowStoredItemSizes+0xb4>
    31f6:	3c c0       	rjmp	.+120    	; 0x3270 <PM_ShowStoredItemSizes+0xe0>
			{
				case 0:
					strcpy_P(Buffer, PSTR("DATA-"));
    31f8:	68 e0       	ldi	r22, 0x08	; 8
    31fa:	74 e0       	ldi	r23, 0x04	; 4
    31fc:	ce 01       	movw	r24, r28
    31fe:	01 96       	adiw	r24, 0x01	; 1
    3200:	0e 94 1b 1a 	call	0x3436 <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_FLASH), &Buffer[5], 10);
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	07 c0       	rjmp	.+14     	; 0x3216 <PM_ShowStoredItemSizes+0x86>
					break;
				case 1:
					strcpy_P(Buffer, PSTR("EPRM-"));
    3208:	6e e0       	ldi	r22, 0x0E	; 14
    320a:	74 e0       	ldi	r23, 0x04	; 4
    320c:	ce 01       	movw	r24, r28
    320e:	01 96       	adiw	r24, 0x01	; 1
    3210:	0e 94 1b 1a 	call	0x3436 <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_EEPROM), &Buffer[5], 10);
    3214:	80 e0       	ldi	r24, 0x00	; 0
    3216:	0e 94 e3 13 	call	0x27c6 <PM_GetStoredDataSize>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	2a e0       	ldi	r18, 0x0A	; 10
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	ae 01       	movw	r20, r28
    3224:	4a 5f       	subi	r20, 0xFA	; 250
    3226:	5f 4f       	sbci	r21, 0xFF	; 255
    3228:	bc 01       	movw	r22, r24
    322a:	cd 01       	movw	r24, r26
    322c:	0e 94 22 1a 	call	0x3444 <ultoa>
					break;
    3230:	1f c0       	rjmp	.+62     	; 0x3270 <PM_ShowStoredItemSizes+0xe0>
				case 2:
					strcpy_P(Buffer, PSTR("FUSE-"));
    3232:	64 e1       	ldi	r22, 0x14	; 20
    3234:	74 e0       	ldi	r23, 0x04	; 4
    3236:	ce 01       	movw	r24, r28
    3238:	01 96       	adiw	r24, 0x01	; 1
    323a:	0e 94 1b 1a 	call	0x3436 <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    323e:	af e2       	ldi	r26, 0x2F	; 47
    3240:	b0 e0       	ldi	r27, 0x00	; 0
    3242:	08 c0       	rjmp	.+16     	; 0x3254 <PM_ShowStoredItemSizes+0xc4>
					TempB = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);
					break;
				case 3:
					strcpy_P(Buffer, PSTR("LOCK-"));
    3244:	6a e1       	ldi	r22, 0x1A	; 26
    3246:	74 e0       	ldi	r23, 0x04	; 4
    3248:	ce 01       	movw	r24, r28
    324a:	01 96       	adiw	r24, 0x01	; 1
    324c:	0e 94 1b 1a 	call	0x3436 <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    3250:	a0 e3       	ldi	r26, 0x30	; 48
    3252:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    3254:	0e 94 57 1a 	call	0x34ae <__eeprom_read_byte_1F2021>
    3258:	80 2d       	mov	r24, r0
					TempB = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);		
    325a:	8f 3f       	cpi	r24, 0xFF	; 255
    325c:	11 f0       	breq	.+4      	; 0x3262 <PM_ShowStoredItemSizes+0xd2>
    325e:	99 27       	eor	r25, r25
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <PM_ShowStoredItemSizes+0xd6>
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	be 01       	movw	r22, r28
    3268:	6a 5f       	subi	r22, 0xFA	; 250
    326a:	7f 4f       	sbci	r23, 0xFF	; 255
    326c:	0e 94 35 03 	call	0x66a <MAIN_IntToStr>
			}
	
			LCD_puts(Buffer);
    3270:	ce 01       	movw	r24, r28
    3272:	01 96       	adiw	r24, 0x01	; 1
    3274:	0e 94 19 08 	call	0x1032 <LCD_puts>

			MAIN_WaitForJoyRelease();
    3278:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
    327c:	97 cf       	rjmp	.-210    	; 0x31ac <PM_ShowStoredItemSizes+0x1c>
    327e:	2e 96       	adiw	r28, 0x0e	; 14
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	de bf       	out	0x3e, r29	; 62
    3286:	0f be       	out	0x3f, r0	; 63
    3288:	cd bf       	out	0x3d, r28	; 61
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	1f 91       	pop	r17
    3290:	08 95       	ret

00003292 <TM_FindNextTag>:
	DF_EnableDataflash(FALSE);
}

void TM_FindNextTag(void)
{
    3292:	af 92       	push	r10
    3294:	bf 92       	push	r11
    3296:	df 92       	push	r13
    3298:	ef 92       	push	r14
    329a:	ff 92       	push	r15
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
    32a8:	69 97       	sbiw	r28, 0x19	; 25
    32aa:	0f b6       	in	r0, 0x3f	; 63
    32ac:	f8 94       	cli
    32ae:	de bf       	out	0x3e, r29	; 62
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Buffer[21];
	uint8_t  HeadBuff[4]      = BT_TAGHEADER;
    32b4:	80 e4       	ldi	r24, 0x40	; 64
    32b6:	8e 8b       	std	Y+22, r24	; 0x16
    32b8:	86 e1       	ldi	r24, 0x16	; 22
    32ba:	a8 2e       	mov	r10, r24
    32bc:	b1 2c       	mov	r11, r1
    32be:	ac 0e       	add	r10, r28
    32c0:	bd 1e       	adc	r11, r29
    32c2:	88 e2       	ldi	r24, 0x28	; 40
    32c4:	8f 8b       	std	Y+23, r24	; 0x17
    32c6:	83 e2       	ldi	r24, 0x23	; 35
    32c8:	88 8f       	std	Y+24, r24	; 0x18
    32ca:	89 e2       	ldi	r24, 0x29	; 41
    32cc:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t ProgDataSize     = PM_GetStoredDataSize(TYPE_FLASH);
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	0e 94 e3 13 	call	0x27c6 <PM_GetStoredDataSize>
    32d4:	7b 01       	movw	r14, r22
    32d6:	8c 01       	movw	r16, r24
	uint8_t  TotalOkHeadBytes = 0;
    32d8:	dd 24       	eor	r13, r13
	uint8_t  TagByte;
	uint8_t  BytesRead;
	
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);    // Orange = busy
    32da:	81 b3       	in	r24, 0x11	; 17
    32dc:	80 63       	ori	r24, 0x30	; 48
    32de:	81 bb       	out	0x11, r24	; 17

	while (DFPos < ProgDataSize)
	{
		BytesRead = 1;
		
		if (SPI_SPITransmit(0x00) == HeadBuff[TotalOkHeadBytes++])
		{
			if (TotalOkHeadBytes == 4)
			{
				uint8_t HB;
			
				for (HB = 0; HB < 20; HB++)
				{
					TagByte = SPI_SPITransmit(0x00);
					Buffer[HB] = TagByte;
					
					if (TagByte == 0x00)
					  break;
				}
				
				Buffer[20] = '\0';             // Make sure string is null-terminated

				TagExists = TRUE;
				BytesRead = (HB + 2);

				LCD_puts(Buffer);
				MAIN_SETSTATUSLED(MAIN_STATLED_GREEN); // Green = ready
				return;
			}
		}
		else
		{
			TotalOkHeadBytes = 0;
		}

		DFPos += BytesRead;
    32e0:	80 91 b4 02 	lds	r24, 0x02B4
    32e4:	90 91 b5 02 	lds	r25, 0x02B5
    32e8:	a0 91 b6 02 	lds	r26, 0x02B6
    32ec:	b0 91 b7 02 	lds	r27, 0x02B7
    32f0:	8e 15       	cp	r24, r14
    32f2:	9f 05       	cpc	r25, r15
    32f4:	a0 07       	cpc	r26, r16
    32f6:	b1 07       	cpc	r27, r17
    32f8:	08 f0       	brcs	.+2      	; 0x32fc <TM_FindNextTag+0x6a>
    32fa:	43 c0       	rjmp	.+134    	; 0x3382 <TM_FindNextTag+0xf0>
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    3302:	f5 01       	movw	r30, r10
    3304:	ed 0d       	add	r30, r13
    3306:	f1 1d       	adc	r31, r1
    3308:	d3 94       	inc	r13
    330a:	90 81       	ld	r25, Z
    330c:	89 17       	cp	r24, r25
    330e:	21 f5       	brne	.+72     	; 0x3358 <TM_FindNextTag+0xc6>
    3310:	84 e0       	ldi	r24, 0x04	; 4
    3312:	d8 16       	cp	r13, r24
    3314:	11 f5       	brne	.+68     	; 0x335a <TM_FindNextTag+0xc8>
    3316:	ff 24       	eor	r15, r15
    3318:	00 e0       	ldi	r16, 0x00	; 0
    331a:	10 e0       	ldi	r17, 0x00	; 0
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    3322:	9e 01       	movw	r18, r28
    3324:	2f 5f       	subi	r18, 0xFF	; 255
    3326:	3f 4f       	sbci	r19, 0xFF	; 255
    3328:	f8 01       	movw	r30, r16
    332a:	e2 0f       	add	r30, r18
    332c:	f3 1f       	adc	r31, r19
    332e:	80 83       	st	Z, r24
    3330:	88 23       	and	r24, r24
    3332:	31 f0       	breq	.+12     	; 0x3340 <TM_FindNextTag+0xae>
    3334:	f3 94       	inc	r15
    3336:	0f 5f       	subi	r16, 0xFF	; 255
    3338:	1f 4f       	sbci	r17, 0xFF	; 255
    333a:	83 e1       	ldi	r24, 0x13	; 19
    333c:	8f 15       	cp	r24, r15
    333e:	70 f7       	brcc	.-36     	; 0x331c <TM_FindNextTag+0x8a>
    3340:	1d 8a       	std	Y+21, r1	; 0x15
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	80 93 62 02 	sts	0x0262, r24
    3348:	c9 01       	movw	r24, r18
    334a:	0e 94 19 08 	call	0x1032 <LCD_puts>
    334e:	81 b3       	in	r24, 0x11	; 17
    3350:	8f 7c       	andi	r24, 0xCF	; 207
    3352:	80 61       	ori	r24, 0x10	; 16
    3354:	81 bb       	out	0x11, r24	; 17
    3356:	31 c0       	rjmp	.+98     	; 0x33ba <TM_FindNextTag+0x128>
    3358:	dd 24       	eor	r13, r13
    335a:	80 91 b4 02 	lds	r24, 0x02B4
    335e:	90 91 b5 02 	lds	r25, 0x02B5
    3362:	a0 91 b6 02 	lds	r26, 0x02B6
    3366:	b0 91 b7 02 	lds	r27, 0x02B7
    336a:	01 96       	adiw	r24, 0x01	; 1
    336c:	a1 1d       	adc	r26, r1
    336e:	b1 1d       	adc	r27, r1
    3370:	80 93 b4 02 	sts	0x02B4, r24
    3374:	90 93 b5 02 	sts	0x02B5, r25
    3378:	a0 93 b6 02 	sts	0x02B6, r26
    337c:	b0 93 b7 02 	sts	0x02B7, r27
    3380:	b7 cf       	rjmp	.-146    	; 0x32f0 <TM_FindNextTag+0x5e>
	}
	
	DF_ContinuousReadEnable(0, 0);
    3382:	60 e0       	ldi	r22, 0x00	; 0
    3384:	70 e0       	ldi	r23, 0x00	; 0
    3386:	cb 01       	movw	r24, r22
    3388:	0e 94 09 0a 	call	0x1412 <DF_ContinuousReadEnable>
	DFPos = 0;
    338c:	10 92 b4 02 	sts	0x02B4, r1
    3390:	10 92 b5 02 	sts	0x02B5, r1
    3394:	10 92 b6 02 	sts	0x02B6, r1
    3398:	10 92 b7 02 	sts	0x02B7, r1
	
	if (TagExists == FALSE)
    339c:	80 91 62 02 	lds	r24, 0x0262
    33a0:	88 23       	and	r24, r24
    33a2:	49 f4       	brne	.+18     	; 0x33b6 <TM_FindNextTag+0x124>
	{
		MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);  // Green = ready
    33a4:	81 b3       	in	r24, 0x11	; 17
    33a6:	8f 7c       	andi	r24, 0xCF	; 207
    33a8:	80 61       	ori	r24, 0x10	; 16
    33aa:	81 bb       	out	0x11, r24	; 17
		MAIN_ShowError(PSTR("NO TAGS"));
    33ac:	80 e2       	ldi	r24, 0x20	; 32
    33ae:	94 e0       	ldi	r25, 0x04	; 4
    33b0:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
    33b4:	02 c0       	rjmp	.+4      	; 0x33ba <TM_FindNextTag+0x128>
	}
	else
	{
		/* The following line _is_ recursion, but the function will only ever call itself
		   a maximum of one time. The function will call itself upon skipping from the last
		   tag stored in the program data to the first; to guard against infinite recursion
		   if no tags are present, the system will error out if the TagExists flag is empty
		   after a full data read. Once a tag has been read and displayed onto the LCD, the
           function returns to the main tag handling routine.                               */
		TM_FindNextTag();
    33b6:	0e 94 49 19 	call	0x3292 <TM_FindNextTag>
    33ba:	69 96       	adiw	r28, 0x19	; 25
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	f8 94       	cli
    33c0:	de bf       	out	0x3e, r29	; 62
    33c2:	0f be       	out	0x3f, r0	; 63
    33c4:	cd bf       	out	0x3d, r28	; 61
    33c6:	df 91       	pop	r29
    33c8:	cf 91       	pop	r28
    33ca:	1f 91       	pop	r17
    33cc:	0f 91       	pop	r16
    33ce:	ff 90       	pop	r15
    33d0:	ef 90       	pop	r14
    33d2:	df 90       	pop	r13
    33d4:	bf 90       	pop	r11
    33d6:	af 90       	pop	r10
    33d8:	08 95       	ret

000033da <TM_ShowTags>:
    33da:	60 e0       	ldi	r22, 0x00	; 0
    33dc:	70 e0       	ldi	r23, 0x00	; 0
    33de:	cb 01       	movw	r24, r22
    33e0:	0e 94 09 0a 	call	0x1412 <DF_ContinuousReadEnable>
    33e4:	10 92 62 02 	sts	0x0262, r1
    33e8:	10 92 b4 02 	sts	0x02B4, r1
    33ec:	10 92 b5 02 	sts	0x02B5, r1
    33f0:	10 92 b6 02 	sts	0x02B6, r1
    33f4:	10 92 b7 02 	sts	0x02B7, r1
    33f8:	0e 94 49 19 	call	0x3292 <TM_FindNextTag>
    33fc:	80 91 62 02 	lds	r24, 0x0262
    3400:	88 23       	and	r24, r24
    3402:	71 f0       	breq	.+28     	; 0x3420 <TM_ShowTags+0x46>
    3404:	8e b3       	in	r24, 0x1e	; 30
    3406:	88 23       	and	r24, r24
    3408:	e9 f3       	breq	.-6      	; 0x3404 <TM_ShowTags+0x2a>
    340a:	f7 9b       	sbis	0x1e, 7	; 30
    340c:	03 c0       	rjmp	.+6      	; 0x3414 <TM_ShowTags+0x3a>
    340e:	0e 94 49 19 	call	0x3292 <TM_FindNextTag>
    3412:	02 c0       	rjmp	.+4      	; 0x3418 <TM_ShowTags+0x3e>
    3414:	f2 99       	sbic	0x1e, 2	; 30
    3416:	03 c0       	rjmp	.+6      	; 0x341e <TM_ShowTags+0x44>
    3418:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
    341c:	f3 cf       	rjmp	.-26     	; 0x3404 <TM_ShowTags+0x2a>
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    3424:	08 95       	ret

00003426 <__vector_2>:
.global PCINT0_vect             ; Pin change 0 (joystick)
.global PCINT1_vect             ; Pin change 1 (joystick)

PCINT0_vect:
  jmp PCINT1_vect
    3426:	0c 94 94 03 	jmp	0x728 <__vector_3>

0000342a <__vector_10>:

.global TIMER0_COMP_vect             ; Timer 0 compare

TIMER0_COMP_vect:
  push r24
    342a:	8f 93       	push	r24
  ldi r24, (USI_CONTROL_REG_FLAGS | (1<<USITC))
    342c:	8b e5       	ldi	r24, 0x5B	; 91
  sts _SFR_MEM_ADDR(USICR), r24
    342e:	80 93 b8 00 	sts	0x00B8, r24
  pop r24
    3432:	8f 91       	pop	r24
  reti
    3434:	18 95       	reti

00003436 <strcpy_P>:
    3436:	fb 01       	movw	r30, r22
    3438:	dc 01       	movw	r26, r24
    343a:	05 90       	lpm	r0, Z+
    343c:	0d 92       	st	X+, r0
    343e:	00 20       	and	r0, r0
    3440:	e1 f7       	brne	.-8      	; 0x343a <strcpy_P+0x4>
    3442:	08 95       	ret

00003444 <ultoa>:
    3444:	fa 01       	movw	r30, r20
    3446:	cf 93       	push	r28
    3448:	ff 93       	push	r31
    344a:	ef 93       	push	r30
    344c:	22 30       	cpi	r18, 0x02	; 2
    344e:	cc f0       	brlt	.+50     	; 0x3482 <ultoa+0x3e>
    3450:	25 32       	cpi	r18, 0x25	; 37
    3452:	bc f4       	brge	.+46     	; 0x3482 <ultoa+0x3e>
    3454:	c2 2f       	mov	r28, r18
    3456:	2c 2f       	mov	r18, r28
    3458:	33 27       	eor	r19, r19
    345a:	44 27       	eor	r20, r20
    345c:	55 27       	eor	r21, r21
    345e:	ff 93       	push	r31
    3460:	ef 93       	push	r30
    3462:	0e 94 7f 1a 	call	0x34fe <__udivmodsi4>
    3466:	ef 91       	pop	r30
    3468:	ff 91       	pop	r31
    346a:	60 5d       	subi	r22, 0xD0	; 208
    346c:	6a 33       	cpi	r22, 0x3A	; 58
    346e:	0c f0       	brlt	.+2      	; 0x3472 <ultoa+0x2e>
    3470:	69 5d       	subi	r22, 0xD9	; 217
    3472:	61 93       	st	Z+, r22
    3474:	b9 01       	movw	r22, r18
    3476:	ca 01       	movw	r24, r20
    3478:	60 50       	subi	r22, 0x00	; 0
    347a:	70 40       	sbci	r23, 0x00	; 0
    347c:	80 40       	sbci	r24, 0x00	; 0
    347e:	90 40       	sbci	r25, 0x00	; 0
    3480:	51 f7       	brne	.-44     	; 0x3456 <ultoa+0x12>
    3482:	10 82       	st	Z, r1
    3484:	8f 91       	pop	r24
    3486:	9f 91       	pop	r25
    3488:	cf 91       	pop	r28
    348a:	0c 94 47 1a 	jmp	0x348e <strrev>

0000348e <strrev>:
    348e:	dc 01       	movw	r26, r24
    3490:	fc 01       	movw	r30, r24
    3492:	01 90       	ld	r0, Z+
    3494:	00 20       	and	r0, r0
    3496:	e9 f7       	brne	.-6      	; 0x3492 <strrev+0x4>
    3498:	32 97       	sbiw	r30, 0x02	; 2
    349a:	ae 17       	cp	r26, r30
    349c:	bf 07       	cpc	r27, r31
    349e:	30 f4       	brcc	.+12     	; 0x34ac <strrev+0x1e>
    34a0:	7c 91       	ld	r23, X
    34a2:	60 81       	ld	r22, Z
    34a4:	70 83       	st	Z, r23
    34a6:	31 97       	sbiw	r30, 0x01	; 1
    34a8:	6d 93       	st	X+, r22
    34aa:	f7 cf       	rjmp	.-18     	; 0x349a <strrev+0xc>
    34ac:	08 95       	ret

000034ae <__eeprom_read_byte_1F2021>:
    34ae:	f9 99       	sbic	0x1f, 1	; 31
    34b0:	fe cf       	rjmp	.-4      	; 0x34ae <__eeprom_read_byte_1F2021>
    34b2:	b2 bd       	out	0x22, r27	; 34
    34b4:	a1 bd       	out	0x21, r26	; 33
    34b6:	f8 9a       	sbi	0x1f, 0	; 31
    34b8:	11 96       	adiw	r26, 0x01	; 1
    34ba:	00 b4       	in	r0, 0x20	; 32
    34bc:	08 95       	ret

000034be <__eeprom_read_block_1F2021>:
    34be:	f7 df       	rcall	.-18     	; 0x34ae <__eeprom_read_byte_1F2021>
    34c0:	01 92       	st	Z+, r0
    34c2:	1a 94       	dec	r1
    34c4:	e1 f7       	brne	.-8      	; 0x34be <__eeprom_read_block_1F2021>
    34c6:	08 95       	ret

000034c8 <__eeprom_read_word_1F2021>:
    34c8:	f2 df       	rcall	.-28     	; 0x34ae <__eeprom_read_byte_1F2021>
    34ca:	e0 2d       	mov	r30, r0
    34cc:	f0 df       	rcall	.-32     	; 0x34ae <__eeprom_read_byte_1F2021>
    34ce:	f0 2d       	mov	r31, r0
    34d0:	08 95       	ret

000034d2 <__eeprom_write_byte_1F2021>:
    34d2:	f9 99       	sbic	0x1f, 1	; 31
    34d4:	fe cf       	rjmp	.-4      	; 0x34d2 <__eeprom_write_byte_1F2021>
    34d6:	b2 bd       	out	0x22, r27	; 34
    34d8:	a1 bd       	out	0x21, r26	; 33
    34da:	00 bc       	out	0x20, r0	; 32
    34dc:	11 96       	adiw	r26, 0x01	; 1
    34de:	0f b6       	in	r0, 0x3f	; 63
    34e0:	f8 94       	cli
    34e2:	fa 9a       	sbi	0x1f, 2	; 31
    34e4:	f9 9a       	sbi	0x1f, 1	; 31
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	08 95       	ret

000034ea <__eeprom_write_word_1F2021>:
    34ea:	f3 df       	rcall	.-26     	; 0x34d2 <__eeprom_write_byte_1F2021>
    34ec:	01 2c       	mov	r0, r1
    34ee:	f1 df       	rcall	.-30     	; 0x34d2 <__eeprom_write_byte_1F2021>
    34f0:	11 24       	eor	r1, r1
    34f2:	08 95       	ret

000034f4 <__eeprom_write_block_1F2021>:
    34f4:	01 90       	ld	r0, Z+
    34f6:	ed df       	rcall	.-38     	; 0x34d2 <__eeprom_write_byte_1F2021>
    34f8:	1a 94       	dec	r1
    34fa:	e1 f7       	brne	.-8      	; 0x34f4 <__eeprom_write_block_1F2021>
    34fc:	08 95       	ret

000034fe <__udivmodsi4>:
    34fe:	a1 e2       	ldi	r26, 0x21	; 33
    3500:	1a 2e       	mov	r1, r26
    3502:	aa 1b       	sub	r26, r26
    3504:	bb 1b       	sub	r27, r27
    3506:	fd 01       	movw	r30, r26
    3508:	0d c0       	rjmp	.+26     	; 0x3524 <__udivmodsi4_ep>

0000350a <__udivmodsi4_loop>:
    350a:	aa 1f       	adc	r26, r26
    350c:	bb 1f       	adc	r27, r27
    350e:	ee 1f       	adc	r30, r30
    3510:	ff 1f       	adc	r31, r31
    3512:	a2 17       	cp	r26, r18
    3514:	b3 07       	cpc	r27, r19
    3516:	e4 07       	cpc	r30, r20
    3518:	f5 07       	cpc	r31, r21
    351a:	20 f0       	brcs	.+8      	; 0x3524 <__udivmodsi4_ep>
    351c:	a2 1b       	sub	r26, r18
    351e:	b3 0b       	sbc	r27, r19
    3520:	e4 0b       	sbc	r30, r20
    3522:	f5 0b       	sbc	r31, r21

00003524 <__udivmodsi4_ep>:
    3524:	66 1f       	adc	r22, r22
    3526:	77 1f       	adc	r23, r23
    3528:	88 1f       	adc	r24, r24
    352a:	99 1f       	adc	r25, r25
    352c:	1a 94       	dec	r1
    352e:	69 f7       	brne	.-38     	; 0x350a <__udivmodsi4_loop>
    3530:	60 95       	com	r22
    3532:	70 95       	com	r23
    3534:	80 95       	com	r24
    3536:	90 95       	com	r25
    3538:	9b 01       	movw	r18, r22
    353a:	ac 01       	movw	r20, r24
    353c:	bd 01       	movw	r22, r26
    353e:	cf 01       	movw	r24, r30
    3540:	08 95       	ret
