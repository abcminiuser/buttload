
ButtLoad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000353e  000035f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000353e  00000000  00000000  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b4  00800104  00800104  000035f6  2**0
                  ALLOC
  3 .noinit       00000000  008002b8  008002b8  0000367f  2**0
                  CONTENTS
  4 .eeprom       00000089  00810000  00810000  000035f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .stab         000003e4  00000000  00000000  00003680  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000000fb  00000000  00000000  00003a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 0000012c  00000000  00000000  00003b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d49  00000000  00000000  00003c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000041ec  00000000  00000000  000049d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000100a  00000000  00000000  00008bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000033aa  00000000  00000000  00009bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000114f  00000000  00000000  0000cf74  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 14 02 	jmp	0x428 <__init>
       4:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
       8:	0c 94 11 1a 	jmp	0x3422 <__vector_2>
       c:	0c 94 94 03 	jmp	0x728 <__vector_3>
      10:	0c 94 cc 0b 	jmp	0x1798 <__vector_4>
      14:	0c 94 e9 07 	jmp	0xfd2 <__vector_5>
      18:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      1c:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      20:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      24:	0c 94 10 0c 	jmp	0x1820 <__vector_9>
      28:	0c 94 13 1a 	jmp	0x3426 <__vector_10>
      2c:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      30:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      34:	0c 94 52 0b 	jmp	0x16a4 <__vector_13>
      38:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      3c:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      40:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      44:	0c 94 4b 09 	jmp	0x1296 <__vector_17>
      48:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      4c:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      50:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      54:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      58:	0c 94 96 08 	jmp	0x112c <__vector_22>

0000005c <SIFONames>:
      5c:	53 54 4f 52 41 47 45 20 53 49 5a 45 53 00 00 56     STORAGE SIZES..V
      6c:	49 45 57 20 44 41 54 41 20 54 41 47 53 00           IEW DATA TAGS.

0000007a <USISpeeds>:
      7a:	20 35 37 31 35 33 20 48 5a 00 20 38 36 37 33 38      57153 HZ. 86738
      8a:	20 48 5a 00 31 31 33 34 32 37 20 48 5a 00 32 31      HZ.113427 HZ.21
      9a:	30 36 35 31 20 48 5a 00                             0651 HZ.

000000a2 <ProgOptions>:
      a2:	0b 01 ff 00 ef 00 df 00 cf 00 bb 00 b0 00           ..............

000000b0 <PRG_C>:
      b0:	45 52 41 53 45 20 4f 4e 4c 59 00                    ERASE ONLY.

000000bb <PRG_FL>:
      bb:	46 55 53 45 20 41 4e 44 20 4c 4f 43 4b 20 42 59     FUSE AND LOCK BY
      cb:	54 45 53 00                                         TES.

000000cf <PRG_L>:
      cf:	4c 4f 43 4b 20 42 59 54 45 53 20 4f 4e 4c 59 00     LOCK BYTES ONLY.

000000df <PRG_F>:
      df:	46 55 53 45 20 42 59 54 45 53 20 4f 4e 4c 59 00     FUSE BYTES ONLY.

000000ef <PRG_DE>:
      ef:	44 41 54 41 20 41 4e 44 20 45 45 50 52 4f 4d 00     DATA AND EEPROM.

000000ff <PRG_E>:
      ff:	45 45 50 52 4f 4d 20 4f 4e 4c 59 00                 EEPROM ONLY.

0000010b <PRG_D>:
     10b:	44 41 54 41 20 4f 4e 4c 59 00                       DATA ONLY.

00000115 <SettingFunctionPtrs>:
     115:	d2 05 25 06 5d 06 a9 06 9e 05 76 07                 ..%.].....v.

00000121 <SettingFunctionNames>:
     121:	7e 01 70 01 5f 01 4d 01 40 01 2d 01                 ~.p._.M.@.-.

0000012d <SFunc_GOBOOTLOADER>:
     12d:	4a 55 4d 50 20 54 4f 20 42 4f 4f 54 4c 4f 41 44     JUMP TO BOOTLOAD
     13d:	45 52 00                                            ER.

00000140 <SFunc_CLEARMEM>:
     140:	43 4c 45 41 52 20 4d 45 4d 4f 52 59 00              CLEAR MEMORY.

0000014d <SFunc_SETAUTOSLEEPTO>:
     14d:	53 45 54 20 53 4c 45 45 50 20 54 49 4d 45 4f 55     SET SLEEP TIMEOU
     15d:	54 00                                               T.

0000015f <SFunc_SETFIRMMINOR>:
     15f:	53 45 54 20 46 49 52 4d 20 56 45 52 53 49 4f 4e     SET FIRM VERSION
	...

00000170 <SFunc_SETSPISPEED>:
     170:	53 45 54 20 53 50 49 20 53 50 45 45 44 00           SET SPI SPEED.

0000017e <SFunc_SETCONTRAST>:
     17e:	53 45 54 20 43 4f 4e 54 52 41 53 54 00              SET CONTRAST.

0000018b <MainFunctionPtrs>:
     18b:	ed 03 6c 05 37 04 06 04 20 07 b8 03 0c 07           ..l.7... .....

00000199 <MainFunctionNames>:
     199:	f0 01 e5 01 d9 01 ca 01 bb 01 b2 01 a7 01           ..............

000001a7 <Func_SLEEP>:
     1a7:	53 4c 45 45 50 20 4d 4f 44 45 00                    SLEEP MODE.

000001b2 <Func_SETTINGS>:
     1b2:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

000001bb <Func_PRGMSTOREINFO>:
     1bb:	44 41 54 41 53 54 4f 52 45 20 49 4e 46 4f 00        DATASTORE INFO.

000001ca <Func_PRGMDATAFLASH>:
     1ca:	44 41 54 41 46 4c 41 53 48 20 50 52 47 4d 00        DATAFLASH PRGM.

000001d9 <Func_PRGMAVR>:
     1d9:	50 52 4f 47 52 41 4d 20 41 56 52 00                 PROGRAM AVR.

000001e5 <Func_STOREPRGM>:
     1e5:	53 54 4f 52 45 20 50 52 47 4d 00                    STORE PRGM.

000001f0 <Func_ISPPRGM>:
     1f0:	41 56 52 49 53 50 20 4d 4f 44 45 00                 AVRISP MODE.

000001fc <AboutTextPtrs>:
     1fc:	27 02 22 02 13 02 04 02                             '.".....

00000204 <CopyRight>:
     204:	3c 43 3e 20 32 30 30 36 20 2d 20 47 50 4c 00        <C> 2006 - GPL.

00000213 <AuthorName>:
     213:	42 59 20 44 45 41 4e 20 43 41 4d 45 52 41 00        BY DEAN CAMERA.

00000222 <VersionInfo>:
     222:	56 31 2d 34 00                                      V1-4.

00000227 <ProgrammerName>:
     227:	42 55 54 54 4c 4f 41 44 00                          BUTTLOAD.

00000230 <WaitText>:
     230:	2a 57 41 49 54 2a 00                                *WAIT*.

00000237 <BUTTTAG_Author>:
     237:	40 28 23 29 42 59 20 44 45 41 4e 20 43 41 4d 45     @(#)BY DEAN CAME
     247:	52 41 00                                            RA.

0000024a <BUTTTAG_Name>:
     24a:	40 28 23 29 42 55 54 54 4c 4f 41 44 20 41 56 52     @(#)BUTTLOAD AVR
     25a:	49 53 50 00                                         ISP.

0000025e <__c.17>:
     25e:	50 52 47 3e 20 20 00                                PRG>  .

00000265 <__c.16>:
     265:	42 41 44 49 53 52 00                                BADISR.

0000026c <__c.9>:
     26c:	4e 4f 20 45 52 41 53 45 20 43 4d 44 00              NO ERASE CMD.

00000279 <__c.10>:
     279:	4e 4f 20 44 41 54 41 00                             NO DATA.

00000281 <__c.11>:
     281:	4e 4f 20 45 45 50 52 4f 4d 00                       NO EEPROM.

0000028b <__c.12>:
     28b:	4e 4f 20 46 55 53 45 20 42 59 54 45 53 00           NO FUSE BYTES.

00000299 <__c.13>:
     299:	4e 4f 20 4c 4f 43 4b 20 42 59 54 45 53 00           NO LOCK BYTES.

000002a7 <__c.14>:
     2a7:	50 52 4f 47 52 41 4d 4d 49 4e 47 20 44 4f 4e 45     PROGRAMMING DONE
	...

000002b8 <__c.15>:
     2b8:	46 41 49 4c 45 44 00                                FAILED.

000002bf <__c.8>:
     2bf:	2a 53 54 4f 52 41 47 45 20 4d 4f 44 45 2a 00        *STORAGE MODE*.

000002ce <__c.5>:
     2ce:	43 4f 4e 46 49 52 4d 00                             CONFIRM.

000002d6 <__c.6>:
     2d6:	3c 4e 20 59 3e 00                                   <N Y>.

000002dc <__c.7>:
     2dc:	4d 45 4d 20 43 4c 45 41 52 45 44 00                 MEM CLEARED.

000002e8 <__c.4>:
     2e8:	56 32 2d 20 00                                      V2- .

000002ed <__c.2>:
     2ed:	20 20 20 20 53 45 43 00                                 SEC.

000002f5 <__c.3>:
     2f5:	4f 46 46 00                                         OFF.

000002f9 <__c.1>:
     2f9:	4e 4f 20 53 54 4f 52 45 44 20 50 52 47 4d 00        NO STORED PRGM.

00000308 <__c.0>:
     308:	2a 4a 54 41 47 20 4f 4e 2a 00                       *JTAG ON*.

00000312 <LCD_SegTable>:
     312:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
     322:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
     332:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
     342:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
     352:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
     362:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
     372:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

0000037e <USIPSValues>:
     37e:	03 80 02 54 01 40 00 22                             ...T.@."

00000386 <DataFlashError>:
     386:	44 41 54 41 46 4c 41 53 48 20 45 52 52 4f 52 00     DATAFLASH ERROR.

00000396 <DF_Pages>:
     396:	00 01 00 02 00 04 00 08 00 10 00 10 00 20 00 20     ............. . 

000003a6 <DF_PageSize>:
     3a6:	08 01 08 01 08 01 08 01 08 01 10 02 10 02 20 04     .............. .

000003b6 <DF_PageBits>:
     3b6:	09 09 09 09 09 0a 0a 0b                             ........

000003be <__c.0>:
     3be:	42 55 46 46 20 4f 56 45 52 46 4c 4f 57 00           BUFF OVERFLOW.

000003cc <AutoSleepTOValues>:
     3cc:	00 0f 1e 3c 78                                      ...<x

000003d1 <DataFlashProgMode>:
     3d1:	2a 44 41 54 41 46 4c 41 53 48 20 4d 4f 44 45 2a     *DATAFLASH MODE*
	...

000003e2 <SignonResponse>:
     3e2:	01 00 08 41 56 52 49 53 50 5f 32                    ...AVRISP_2

000003ed <SyncErrorMessage>:
     3ed:	53 59 4e 43 20 45 52 52 4f 52 00                    SYNC ERROR.

000003f8 <AVRISPModeMessage>:
     3f8:	2a 41 54 41 56 52 49 53 50 20 4d 4f 44 45 2a 00     *ATAVRISP MODE*.

00000408 <__c.0>:
     408:	44 41 54 41 2d 00                                   DATA-.

0000040e <__c.1>:
     40e:	45 50 52 4d 2d 00                                   EPRM-.

00000414 <__c.2>:
     414:	46 55 53 45 2d 00                                   FUSE-.

0000041a <__c.3>:
     41a:	4c 4f 43 4b 2d 00                                   LOCK-.

00000420 <__c.0>:
     420:	4e 4f 20 54 41 47 53 00                             NO TAGS.

00000428 <__init>:
     428:	11 24       	eor	r1, r1
     42a:	1f be       	out	0x3f, r1	; 63
     42c:	cf ef       	ldi	r28, 0xFF	; 255
     42e:	d4 e0       	ldi	r29, 0x04	; 4
     430:	de bf       	out	0x3e, r29	; 62
     432:	cd bf       	out	0x3d, r28	; 61

00000434 <__do_copy_data>:
     434:	11 e0       	ldi	r17, 0x01	; 1
     436:	a0 e0       	ldi	r26, 0x00	; 0
     438:	b1 e0       	ldi	r27, 0x01	; 1
     43a:	ee e3       	ldi	r30, 0x3E	; 62
     43c:	f5 e3       	ldi	r31, 0x35	; 53
     43e:	02 c0       	rjmp	.+4      	; 0x444 <.do_copy_data_start>

00000440 <.do_copy_data_loop>:
     440:	05 90       	lpm	r0, Z+
     442:	0d 92       	st	X+, r0

00000444 <.do_copy_data_start>:
     444:	a4 30       	cpi	r26, 0x04	; 4
     446:	b1 07       	cpc	r27, r17
     448:	d9 f7       	brne	.-10     	; 0x440 <.do_copy_data_loop>

0000044a <__do_clear_bss>:
     44a:	12 e0       	ldi	r17, 0x02	; 2
     44c:	a4 e0       	ldi	r26, 0x04	; 4
     44e:	b1 e0       	ldi	r27, 0x01	; 1
     450:	01 c0       	rjmp	.+2      	; 0x454 <.do_clear_bss_start>

00000452 <.do_clear_bss_loop>:
     452:	1d 92       	st	X+, r1

00000454 <.do_clear_bss_start>:
     454:	a8 3b       	cpi	r26, 0xB8	; 184
     456:	b1 07       	cpc	r27, r17
     458:	e1 f7       	brne	.-8      	; 0x452 <.do_clear_bss_loop>
     45a:	0c 94 75 02 	jmp	0x4ea <main>

0000045e <__bad_interrupt>:
     45e:	0c 94 b3 03 	jmp	0x766 <__vector_default>

00000462 <MAIN_Delay10MS>:

// ======================================================================================

void MAIN_Delay10MS(uint8_t loops)
{
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     466:	28 2f       	mov	r18, r24
     468:	21 50       	subi	r18, 0x01	; 1
     46a:	2f 3f       	cpi	r18, 0xFF	; 255
     46c:	49 f0       	breq	.+18     	; 0x480 <MAIN_Delay10MS+0x1e>
     46e:	a0 e0       	ldi	r26, 0x00	; 0
     470:	b8 e4       	ldi	r27, 0x48	; 72
     472:	c0 e0       	ldi	r28, 0x00	; 0
     474:	d0 e0       	ldi	r29, 0x00	; 0
     476:	cd 01       	movw	r24, r26
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <MAIN_Delay10MS+0x16>
     47c:	21 50       	subi	r18, 0x01	; 1
     47e:	d8 f7       	brcc	.-10     	; 0x476 <MAIN_Delay10MS+0x14>
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <MAIN_WaitForJoyRelease>:
  /* Prevents the use of floating point libraries. Delaying in groups of
     10ms increases accuracy by reducing the time overhead for each loop
     interation of the while.                                            */

	while (loops--)
	  _delay_ms(10);
}

void MAIN_Delay1MS(uint8_t loops)
{
  /* Prevents the use of floating point libraries. Less accurate than the
     Delay10MS routine, but nessesary for many commands. The overhead required
     to call the routine is substantially less than the overhead required to
     calculate the float at compile time, so this actually saves execution time. */

	while (loops--)
	  _delay_ms(1);
}

void MAIN_ResetCSLine(const uint8_t ActiveInactive)
{
	/* ActiveInactive controls the /Reset line to an AVR device or external dataflash
	/CS line. If the reset polarity parameter is a 0 then interfacing with AT89
	devices which has an active high reset. Pins are tristated when inactive.         */
	
	switch (ActiveInactive)
	{
		case MAIN_RESETCS_ACTIVE:      // The target RESET line may be either active high or low.
			DDRF |= (1 << 6);
		
			if (!(eeprom_read_byte(&EEPROMVars.ResetPolarity))) // Translate to correct logic level for target device type
			  PORTF |=  (1 << 6);
			else
			  PORTF &= ~(1 << 6);
		
			break;
		case MAIN_RESETCS_EXTDFACTIVE: // Dataflashes are always active low.
			DDRF  |=  (1 << 6);
			PORTF &= ~(1 << 6);
			
			break;
		case MAIN_RESETCS_INACTIVE:    // Both modes tristate the pins when inactive.
			DDRF  &= ~(1 << 6);
			PORTF &= ~(1 << 6);
	}
}

void MAIN_WaitForJoyRelease(void)
{
	while (1)
	{
		while (JoyStatus) {};                   // Wait until joystick released
     486:	8e b3       	in	r24, 0x1e	; 30
     488:	88 23       	and	r24, r24
     48a:	e9 f7       	brne	.-6      	; 0x486 <MAIN_WaitForJoyRelease>

		MAIN_Delay10MS(1);
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>

		if (!(JoyStatus))                       // Joystick still released (not bouncing), return
     492:	8e b3       	in	r24, 0x1e	; 30
     494:	88 23       	and	r24, r24
     496:	b9 f7       	brne	.-18     	; 0x486 <MAIN_WaitForJoyRelease>
     498:	08 95       	ret

0000049a <FUNCShowAbout>:
		  return;
	}
}

void MAIN_IntToStr(uint16_t IntV, uint8_t* Buff)
{
	// Shows leading zeros, unlike itoa.

	uint8_t Temp = 0;
	
	while (IntV >= 100)
	{
		Temp++;
		IntV -= 100;
	}

	*(Buff++) = '0' + Temp;
	
	Temp = 0;
	
	while (IntV >= 10)
	{
		Temp++;
		IntV -= 10;
	}
		
	*(Buff++) = '0' + Temp;
	*(Buff++) = '0' + IntV;
	*(Buff)   = '\0';
}

void MAIN_ShowProgType(const uint8_t Letter)
{
	uint8_t ProgTypeBuffer[7];

	strcpy_P(ProgTypeBuffer, PSTR("PRG>  "));
	ProgTypeBuffer[5] = Letter;
	
	LCD_puts(ProgTypeBuffer);
}

void MAIN_ShowError(const uint8_t *pFlashStr)
{
	uint8_t ErrorBuff[LCD_TEXTBUFFER_SIZE];   // New buffer, LCD text buffer size
	
	ErrorBuff[0] = 'E';
	ErrorBuff[1] = '>';

	strcpy_P(&ErrorBuff[2], pFlashStr);       // WARNING: If error text is larger than (TEXTBUFFER_SIZE - 2),
	                                          // this will overflow the buffer and probably crash the micro!
	LCD_puts(ErrorBuff);
	
	MAIN_WaitForJoyRelease();
	while (!(JoyStatus & JOY_PRESS)) {};
	MAIN_WaitForJoyRelease();
}

// ======================================================================================

ISR(PCINT1_vect, ISR_NOBLOCK)                 // Joystick routine; PCINT0_vect is bound to this also via JoystickInterrupt.S
{
	JoyStatus = (~PINB & JOY_BMASK)
	          | (~PINE & JOY_EMASK);
			  
	TIMEOUT_SLEEP_TIMEOUT_RESET();
}

ISR(BADISR_vect, ISR_NAKED)                   // Bad ISR routine; should never be called, here for safety
{
	MAIN_ShowError(PSTR("BADISR"));
	while (1) {};
}

// ======================================================================================

void FUNCChangeSettings(void)
{
	uint8_t CurrSFunc = 0;
	
	JoyStatus = 1;

	while (1)
	{
		if (JoyStatus)                         // Joystick is in the non-center position
		{
			if (JoyStatus & JOY_UP)            // Previous function
			  (CurrSFunc == 0)? CurrSFunc = 5 : CurrSFunc--;
			else if (JoyStatus & JOY_DOWN)     // Next function
			  (CurrSFunc == 5)? CurrSFunc = 0 : CurrSFunc++;
			else if (JoyStatus & JOY_PRESS)    // Select current function
			  ((FuncPtr)pgm_read_word(&SettingFunctionPtrs[CurrSFunc]))(); // Run associated function
			else if (JoyStatus & JOY_LEFT)
			  return;
		
			// Show current function onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&SettingFunctionNames[CurrSFunc]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCShowAbout(void)
{
     49a:	cf 93       	push	r28
	uint8_t InfoNum = 0;
     49c:	c0 e0       	ldi	r28, 0x00	; 0
	
	JoyStatus = 1;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	8e bb       	out	0x1e, r24	; 30
			
	while (1)
	{
		if (JoyStatus)
     4a2:	8e b3       	in	r24, 0x1e	; 30
     4a4:	88 23       	and	r24, r24
     4a6:	e9 f3       	breq	.-6      	; 0x4a2 <FUNCShowAbout+0x8>
		{
			if (JoyStatus & JOY_UP)
     4a8:	f6 9b       	sbis	0x1e, 6	; 30
     4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <FUNCShowAbout+0x1e>
			  (InfoNum == 0)? InfoNum = 3 : InfoNum--;
     4ac:	cc 23       	and	r28, r28
     4ae:	11 f4       	brne	.+4      	; 0x4b4 <FUNCShowAbout+0x1a>
     4b0:	c3 e0       	ldi	r28, 0x03	; 3
     4b2:	0c c0       	rjmp	.+24     	; 0x4cc <FUNCShowAbout+0x32>
     4b4:	c1 50       	subi	r28, 0x01	; 1
     4b6:	0a c0       	rjmp	.+20     	; 0x4cc <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_DOWN)
     4b8:	f7 9b       	sbis	0x1e, 7	; 30
     4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <FUNCShowAbout+0x2e>
			  (InfoNum == 3)? InfoNum = 0 : InfoNum++;
     4bc:	c3 30       	cpi	r28, 0x03	; 3
     4be:	11 f4       	brne	.+4      	; 0x4c4 <FUNCShowAbout+0x2a>
     4c0:	c0 e0       	ldi	r28, 0x00	; 0
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <FUNCShowAbout+0x32>
     4c4:	cf 5f       	subi	r28, 0xFF	; 255
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_LEFT)
     4c8:	f2 99       	sbic	0x1e, 2	; 30
     4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <FUNCShowAbout+0x4c>
			  return;

			LCD_puts_f((uint8_t*)pgm_read_word(&AboutTextPtrs[InfoNum]));
     4cc:	ec 2f       	mov	r30, r28
     4ce:	ff 27       	eor	r31, r31
     4d0:	ee 0f       	add	r30, r30
     4d2:	ff 1f       	adc	r31, r31
     4d4:	e4 50       	subi	r30, 0x04	; 4
     4d6:	fe 4f       	sbci	r31, 0xFE	; 254
     4d8:	85 91       	lpm	r24, Z+
     4da:	94 91       	lpm	r25, Z
     4dc:	0e 94 4d 08 	call	0x109a <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     4e0:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     4e4:	de cf       	rjmp	.-68     	; 0x4a2 <FUNCShowAbout+0x8>
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <main>:
     4ea:	cf ef       	ldi	r28, 0xFF	; 255
     4ec:	d4 e0       	ldi	r29, 0x04	; 4
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	c0 e0       	ldi	r28, 0x00	; 0
     4f4:	80 e8       	ldi	r24, 0x80	; 128
     4f6:	80 bf       	out	0x30, r24	; 48
     4f8:	85 e0       	ldi	r24, 0x05	; 5
     4fa:	80 93 64 00 	sts	0x0064, r24
     4fe:	80 e3       	ldi	r24, 0x30	; 48
     500:	80 bb       	out	0x10, r24	; 16
     502:	87 e2       	ldi	r24, 0x27	; 39
     504:	84 b9       	out	0x04, r24	; 4
     506:	8f ed       	ldi	r24, 0xDF	; 223
     508:	85 b9       	out	0x05, r24	; 5
     50a:	8c e0       	ldi	r24, 0x0C	; 12
     50c:	8e b9       	out	0x0e, r24	; 14
     50e:	80 93 6b 00 	sts	0x006B, r24
     512:	80 ed       	ldi	r24, 0xD0	; 208
     514:	80 93 6c 00 	sts	0x006C, r24
     518:	80 ec       	ldi	r24, 0xC0	; 192
     51a:	8d bb       	out	0x1d, r24	; 29
     51c:	8c bb       	out	0x1c, r24	; 28
     51e:	81 b3       	in	r24, 0x11	; 17
     520:	8f 7c       	andi	r24, 0xCF	; 207
     522:	80 62       	ori	r24, 0x20	; 32
     524:	81 bb       	out	0x11, r24	; 17
     526:	0e 94 0a 08 	call	0x1014 <LCD_Init>
     52a:	8f e0       	ldi	r24, 0x0F	; 15
     52c:	80 93 e7 00 	sts	0x00E7, r24
     530:	80 e3       	ldi	r24, 0x30	; 48
     532:	92 e0       	ldi	r25, 0x02	; 2
     534:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
     538:	78 94       	sei
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     53a:	28 e8       	ldi	r18, 0x88	; 136
     53c:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t result;
  asm volatile
     53e:	d9 01       	movw	r26, r18
     540:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
     544:	80 2d       	mov	r24, r0
     546:	8a 37       	cpi	r24, 0x7A	; 122
     548:	89 f0       	breq	.+34     	; 0x56c <__stack+0x6d>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	4f ef       	ldi	r20, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     550:	dc 01       	movw	r26, r24
     552:	04 2e       	mov	r0, r20
     554:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	52 e0       	ldi	r21, 0x02	; 2
     55c:	80 30       	cpi	r24, 0x00	; 0
     55e:	95 07       	cpc	r25, r21
     560:	b8 f3       	brcs	.-18     	; 0x550 <__stack+0x51>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
     562:	8a e7       	ldi	r24, 0x7A	; 122
  asm volatile (
     564:	d9 01       	movw	r26, r18
     566:	08 2e       	mov	r0, r24
     568:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
     56c:	a5 e8       	ldi	r26, 0x85	; 133
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
     574:	80 2d       	mov	r24, r0
     576:	8f 70       	andi	r24, 0x0F	; 15
     578:	80 93 e7 00 	sts	0x00E7, r24
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
     582:	81 b3       	in	r24, 0x11	; 17
     584:	80 63       	ori	r24, 0x30	; 48
     586:	81 bb       	out	0x11, r24	; 17
     588:	0e 94 07 09 	call	0x120e <USART_Init>
     58c:	0e 94 84 07 	call	0xf08 <OSCCAL_Calibrate>
     590:	0e 94 e7 0b 	call	0x17ce <TOUT_SetupSleepTimer>
     594:	81 b3       	in	r24, 0x11	; 17
     596:	8f 7c       	andi	r24, 0xCF	; 207
     598:	80 61       	ori	r24, 0x10	; 16
     59a:	81 bb       	out	0x11, r24	; 17
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	8e bb       	out	0x1e, r24	; 30
     5a0:	80 e8       	ldi	r24, 0x80	; 128
     5a2:	80 93 61 00 	sts	0x0061, r24
     5a6:	83 e0       	ldi	r24, 0x03	; 3
     5a8:	80 93 61 00 	sts	0x0061, r24
     5ac:	8e b3       	in	r24, 0x1e	; 30
     5ae:	88 23       	and	r24, r24
     5b0:	e9 f3       	breq	.-6      	; 0x5ac <__stack+0xad>
     5b2:	f6 9b       	sbis	0x1e, 6	; 30
     5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <__stack+0xc3>
     5b6:	cc 23       	and	r28, r28
     5b8:	11 f4       	brne	.+4      	; 0x5be <__stack+0xbf>
     5ba:	c6 e0       	ldi	r28, 0x06	; 6
     5bc:	1b c0       	rjmp	.+54     	; 0x5f4 <__stack+0xf5>
     5be:	c1 50       	subi	r28, 0x01	; 1
     5c0:	19 c0       	rjmp	.+50     	; 0x5f4 <__stack+0xf5>
     5c2:	f7 9b       	sbis	0x1e, 7	; 30
     5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <__stack+0xd3>
     5c6:	c6 30       	cpi	r28, 0x06	; 6
     5c8:	11 f4       	brne	.+4      	; 0x5ce <__stack+0xcf>
     5ca:	c0 e0       	ldi	r28, 0x00	; 0
     5cc:	13 c0       	rjmp	.+38     	; 0x5f4 <__stack+0xf5>
     5ce:	cf 5f       	subi	r28, 0xFF	; 255
     5d0:	11 c0       	rjmp	.+34     	; 0x5f4 <__stack+0xf5>
     5d2:	f4 9b       	sbis	0x1e, 4	; 30
     5d4:	0b c0       	rjmp	.+22     	; 0x5ec <__stack+0xed>
     5d6:	ec 2f       	mov	r30, r28
     5d8:	ff 27       	eor	r31, r31
     5da:	ee 0f       	add	r30, r30
     5dc:	ff 1f       	adc	r31, r31
     5de:	e5 57       	subi	r30, 0x75	; 117
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	85 91       	lpm	r24, Z+
     5e4:	94 91       	lpm	r25, Z
     5e6:	fc 01       	movw	r30, r24
     5e8:	09 95       	icall
     5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <__stack+0xf5>
     5ec:	f3 9b       	sbis	0x1e, 3	; 30
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <__stack+0xf5>
     5f0:	0e 94 4d 02 	call	0x49a <FUNCShowAbout>
     5f4:	ec 2f       	mov	r30, r28
     5f6:	ff 27       	eor	r31, r31
     5f8:	ee 0f       	add	r30, r30
     5fa:	ff 1f       	adc	r31, r31
     5fc:	e7 56       	subi	r30, 0x67	; 103
     5fe:	fe 4f       	sbci	r31, 0xFE	; 254
     600:	85 91       	lpm	r24, Z+
     602:	94 91       	lpm	r25, Z
     604:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
     608:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     60c:	cf cf       	rjmp	.-98     	; 0x5ac <__stack+0xad>

0000060e <MAIN_Delay1MS>:
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     612:	28 2f       	mov	r18, r24
     614:	21 50       	subi	r18, 0x01	; 1
     616:	2f 3f       	cpi	r18, 0xFF	; 255
     618:	49 f0       	breq	.+18     	; 0x62c <MAIN_Delay1MS+0x1e>
     61a:	a3 e3       	ldi	r26, 0x33	; 51
     61c:	b7 e0       	ldi	r27, 0x07	; 7
     61e:	c0 e0       	ldi	r28, 0x00	; 0
     620:	d0 e0       	ldi	r29, 0x00	; 0
     622:	cd 01       	movw	r24, r26
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <MAIN_Delay1MS+0x16>
     628:	21 50       	subi	r18, 0x01	; 1
     62a:	d8 f7       	brcc	.-10     	; 0x622 <MAIN_Delay1MS+0x14>
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <MAIN_ResetCSLine>:
     632:	99 27       	eor	r25, r25
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	91 05       	cpc	r25, r1
     638:	b1 f0       	breq	.+44     	; 0x666 <MAIN_ResetCSLine+0x34>
     63a:	82 30       	cpi	r24, 0x02	; 2
     63c:	91 05       	cpc	r25, r1
     63e:	1c f4       	brge	.+6      	; 0x646 <MAIN_ResetCSLine+0x14>
     640:	89 2b       	or	r24, r25
     642:	21 f0       	breq	.+8      	; 0x64c <MAIN_ResetCSLine+0x1a>
     644:	08 95       	ret
     646:	02 97       	sbiw	r24, 0x02	; 2
     648:	59 f0       	breq	.+22     	; 0x660 <MAIN_ResetCSLine+0x2e>
     64a:	08 95       	ret
     64c:	86 9a       	sbi	0x10, 6	; 16
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     64e:	a0 e0       	ldi	r26, 0x00	; 0
     650:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     652:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
     656:	80 2d       	mov	r24, r0
     658:	88 23       	and	r24, r24
     65a:	19 f4       	brne	.+6      	; 0x662 <MAIN_ResetCSLine+0x30>
     65c:	8e 9a       	sbi	0x11, 6	; 17
     65e:	08 95       	ret
     660:	86 9a       	sbi	0x10, 6	; 16
     662:	8e 98       	cbi	0x11, 6	; 17
     664:	08 95       	ret
     666:	86 98       	cbi	0x10, 6	; 16
     668:	fc cf       	rjmp	.-8      	; 0x662 <MAIN_ResetCSLine+0x30>

0000066a <MAIN_IntToStr>:
     66a:	fb 01       	movw	r30, r22
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	84 36       	cpi	r24, 0x64	; 100
     670:	91 05       	cpc	r25, r1
     672:	20 f0       	brcs	.+8      	; 0x67c <MAIN_IntToStr+0x12>
     674:	2f 5f       	subi	r18, 0xFF	; 255
     676:	84 56       	subi	r24, 0x64	; 100
     678:	90 40       	sbci	r25, 0x00	; 0
     67a:	f9 cf       	rjmp	.-14     	; 0x66e <MAIN_IntToStr+0x4>
     67c:	20 5d       	subi	r18, 0xD0	; 208
     67e:	21 93       	st	Z+, r18
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	8a 30       	cpi	r24, 0x0A	; 10
     684:	91 05       	cpc	r25, r1
     686:	18 f0       	brcs	.+6      	; 0x68e <MAIN_IntToStr+0x24>
     688:	2f 5f       	subi	r18, 0xFF	; 255
     68a:	0a 97       	sbiw	r24, 0x0a	; 10
     68c:	fa cf       	rjmp	.-12     	; 0x682 <MAIN_IntToStr+0x18>
     68e:	20 5d       	subi	r18, 0xD0	; 208
     690:	21 93       	st	Z+, r18
     692:	80 5d       	subi	r24, 0xD0	; 208
     694:	81 93       	st	Z+, r24
     696:	10 82       	st	Z, r1
     698:	08 95       	ret

0000069a <MAIN_ShowProgType>:
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	27 97       	sbiw	r28, 0x07	; 7
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	cd bf       	out	0x3d, r28	; 61
     6b0:	18 2f       	mov	r17, r24
     6b2:	6e e5       	ldi	r22, 0x5E	; 94
     6b4:	72 e0       	ldi	r23, 0x02	; 2
     6b6:	ce 01       	movw	r24, r28
     6b8:	01 96       	adiw	r24, 0x01	; 1
     6ba:	0e 94 19 1a 	call	0x3432 <strcpy_P>
     6be:	1e 83       	std	Y+6, r17	; 0x06
     6c0:	ce 01       	movw	r24, r28
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	0e 94 17 08 	call	0x102e <LCD_puts>
     6c8:	27 96       	adiw	r28, 0x07	; 7
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	f8 94       	cli
     6ce:	de bf       	out	0x3e, r29	; 62
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	08 95       	ret

000006dc <MAIN_ShowError>:
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	64 97       	sbiw	r28, 0x14	; 20
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	25 e4       	ldi	r18, 0x45	; 69
     6f2:	29 83       	std	Y+1, r18	; 0x01
     6f4:	2e e3       	ldi	r18, 0x3E	; 62
     6f6:	2a 83       	std	Y+2, r18	; 0x02
     6f8:	bc 01       	movw	r22, r24
     6fa:	ce 01       	movw	r24, r28
     6fc:	03 96       	adiw	r24, 0x03	; 3
     6fe:	0e 94 19 1a 	call	0x3432 <strcpy_P>
     702:	ce 01       	movw	r24, r28
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	0e 94 17 08 	call	0x102e <LCD_puts>
     70a:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     70e:	f4 9b       	sbis	0x1e, 4	; 30
     710:	fe cf       	rjmp	.-4      	; 0x70e <MAIN_ShowError+0x32>
     712:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     716:	64 96       	adiw	r28, 0x14	; 20
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <__vector_3>:
     728:	78 94       	sei
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	8f 93       	push	r24
     736:	9f 93       	push	r25
     738:	93 b1       	in	r25, 0x03	; 3
     73a:	90 95       	com	r25
     73c:	90 7d       	andi	r25, 0xD0	; 208
     73e:	8c b1       	in	r24, 0x0c	; 12
     740:	80 95       	com	r24
     742:	8c 70       	andi	r24, 0x0C	; 12
     744:	98 2b       	or	r25, r24
     746:	9e bb       	out	0x1e, r25	; 30
     748:	10 92 3e 01 	sts	0x013E, r1
     74c:	10 92 3d 01 	sts	0x013D, r1
     750:	10 92 85 00 	sts	0x0085, r1
     754:	10 92 84 00 	sts	0x0084, r1
     758:	9f 91       	pop	r25
     75a:	8f 91       	pop	r24
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <__vector_default>:
     766:	85 e6       	ldi	r24, 0x65	; 101
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
     76e:	ff cf       	rjmp	.-2      	; 0x76e <__vector_default+0x8>

00000770 <FUNCChangeSettings>:
     770:	cf 93       	push	r28
     772:	c0 e0       	ldi	r28, 0x00	; 0
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	8e bb       	out	0x1e, r24	; 30
     778:	8e b3       	in	r24, 0x1e	; 30
     77a:	88 23       	and	r24, r24
     77c:	e9 f3       	breq	.-6      	; 0x778 <FUNCChangeSettings+0x8>
     77e:	f6 9b       	sbis	0x1e, 6	; 30
     780:	06 c0       	rjmp	.+12     	; 0x78e <FUNCChangeSettings+0x1e>
     782:	cc 23       	and	r28, r28
     784:	11 f4       	brne	.+4      	; 0x78a <FUNCChangeSettings+0x1a>
     786:	c5 e0       	ldi	r28, 0x05	; 5
     788:	19 c0       	rjmp	.+50     	; 0x7bc <FUNCChangeSettings+0x4c>
     78a:	c1 50       	subi	r28, 0x01	; 1
     78c:	17 c0       	rjmp	.+46     	; 0x7bc <FUNCChangeSettings+0x4c>
     78e:	f7 9b       	sbis	0x1e, 7	; 30
     790:	06 c0       	rjmp	.+12     	; 0x79e <FUNCChangeSettings+0x2e>
     792:	c5 30       	cpi	r28, 0x05	; 5
     794:	11 f4       	brne	.+4      	; 0x79a <FUNCChangeSettings+0x2a>
     796:	c0 e0       	ldi	r28, 0x00	; 0
     798:	11 c0       	rjmp	.+34     	; 0x7bc <FUNCChangeSettings+0x4c>
     79a:	cf 5f       	subi	r28, 0xFF	; 255
     79c:	0f c0       	rjmp	.+30     	; 0x7bc <FUNCChangeSettings+0x4c>
     79e:	f4 9b       	sbis	0x1e, 4	; 30
     7a0:	0b c0       	rjmp	.+22     	; 0x7b8 <FUNCChangeSettings+0x48>
     7a2:	ec 2f       	mov	r30, r28
     7a4:	ff 27       	eor	r31, r31
     7a6:	ee 0f       	add	r30, r30
     7a8:	ff 1f       	adc	r31, r31
     7aa:	eb 5e       	subi	r30, 0xEB	; 235
     7ac:	fe 4f       	sbci	r31, 0xFE	; 254
     7ae:	85 91       	lpm	r24, Z+
     7b0:	94 91       	lpm	r25, Z
     7b2:	fc 01       	movw	r30, r24
     7b4:	09 95       	icall
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <FUNCChangeSettings+0x4c>
     7b8:	f2 99       	sbic	0x1e, 2	; 30
     7ba:	0d c0       	rjmp	.+26     	; 0x7d6 <FUNCChangeSettings+0x66>
     7bc:	ec 2f       	mov	r30, r28
     7be:	ff 27       	eor	r31, r31
     7c0:	ee 0f       	add	r30, r30
     7c2:	ff 1f       	adc	r31, r31
     7c4:	ef 5d       	subi	r30, 0xDF	; 223
     7c6:	fe 4f       	sbci	r31, 0xFE	; 254
     7c8:	85 91       	lpm	r24, Z+
     7ca:	94 91       	lpm	r25, Z
     7cc:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
     7d0:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     7d4:	d1 cf       	rjmp	.-94     	; 0x778 <FUNCChangeSettings+0x8>
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <FUNCAVRISPMode>:
		}
	}
}

void FUNCAVRISPMode(void)
{
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     7da:	80 e3       	ldi	r24, 0x30	; 48
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
     7e2:	0e 94 84 07 	call	0xf08 <OSCCAL_Calibrate>
     7e6:	80 91 c1 00 	lds	r24, 0x00C1
     7ea:	80 78       	andi	r24, 0x80	; 128
     7ec:	88 61       	ori	r24, 0x18	; 24
     7ee:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(AVRISPModeMessage);
     7f2:	88 ef       	ldi	r24, 0xF8	; 248
     7f4:	93 e0       	ldi	r25, 0x03	; 3
     7f6:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
	
	InterpretPacketRoutine = (FuncPtr)AICI_InterpretPacket;
     7fa:	81 e7       	ldi	r24, 0x71	; 113
     7fc:	92 e1       	ldi	r25, 0x12	; 18
     7fe:	90 93 03 01 	sts	0x0103, r25
     802:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     806:	0e 94 76 0f 	call	0x1eec <V2P_RunStateMachine>
     80a:	08 95       	ret

0000080c <FUNCProgramDataflash>:
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     80c:	a1 e0       	ldi	r26, 0x01	; 1
     80e:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     810:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
     814:	80 2d       	mov	r24, r0
     816:	0e 94 81 09 	call	0x1302 <USI_SPIInitMaster>
}

void FUNCProgramDataflash(void)
{
	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	UseExernalDF = TRUE;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	80 93 65 02 	sts	0x0265, r24
	DFSPIRoutinePointer = USI_SPITransmit;
     820:	8b e9       	ldi	r24, 0x9B	; 155
     822:	99 e0       	ldi	r25, 0x09	; 9
     824:	90 93 01 01 	sts	0x0101, r25
     828:	80 93 00 01 	sts	0x0100, r24
	
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     82c:	80 e3       	ldi	r24, 0x30	; 48
     82e:	92 e0       	ldi	r25, 0x02	; 2
     830:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
     834:	0e 94 84 07 	call	0xf08 <OSCCAL_Calibrate>
     838:	80 91 c1 00 	lds	r24, 0x00C1
     83c:	80 78       	andi	r24, 0x80	; 128
     83e:	88 61       	ori	r24, 0x18	; 24
     840:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(DataFlashProgMode);
     844:	81 ed       	ldi	r24, 0xD1	; 209
     846:	93 e0       	ldi	r25, 0x03	; 3
     848:	0e 94 4d 08 	call	0x109a <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PD_InterpretAVRISPPacket;
     84c:	87 ea       	ldi	r24, 0xA7	; 167
     84e:	9c e0       	ldi	r25, 0x0C	; 12
     850:	90 93 03 01 	sts	0x0103, r25
     854:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     858:	0e 94 76 0f 	call	0x1eec <V2P_RunStateMachine>
	   
	DF_EnableDataflash(FALSE);
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
	SPI_SPIOFF();
     862:	80 91 64 00 	lds	r24, 0x0064
     866:	84 60       	ori	r24, 0x04	; 4
     868:	80 93 64 00 	sts	0x0064, r24
     86c:	08 95       	ret

0000086e <FUNCProgramAVR>:
}

void FUNCProgramAVR(void)
{
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	63 97       	sbiw	r28, 0x13	; 19
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
	uint8_t  DoneFailMessageBuff[19];
	uint8_t  Fault = ISPCC_NO_FAULT;
     886:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t  ProgMode = 0;
     888:	10 2f       	mov	r17, r16

	SPI_SPIInit();
     88a:	0e 94 2c 09 	call	0x1258 <SPI_SPIInit>
	UseExernalDF = FALSE;
     88e:	00 93 65 02 	sts	0x0265, r16
	DFSPIRoutinePointer = SPI_SPITransmit;
     892:	86 e3       	ldi	r24, 0x36	; 54
     894:	99 e0       	ldi	r25, 0x09	; 9
     896:	90 93 01 01 	sts	0x0101, r25
     89a:	80 93 00 01 	sts	0x0100, r24
	
	if (!(DF_CheckCorrectOnboardChip()))
     89e:	0e 94 3a 0b 	call	0x1674 <DF_CheckCorrectOnboardChip>
     8a2:	88 23       	and	r24, r24
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <FUNCProgramAVR+0x3a>
     8a6:	0d c1       	rjmp	.+538    	; 0xac2 <FUNCProgramAVR+0x254>
	  return;

	MAIN_WaitForJoyRelease();
     8a8:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
	
	JoyStatus = 1;                              // Use an invalid joystick value to force the program to write the
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	8e bb       	out	0x1e, r24	; 30
	                                            // name of the default command onto the LCD
	while (1)
	{
		if (JoyStatus)
     8b0:	8e b3       	in	r24, 0x1e	; 30
     8b2:	88 23       	and	r24, r24
     8b4:	e9 f3       	breq	.-6      	; 0x8b0 <FUNCProgramAVR+0x42>
		{
			if (JoyStatus & JOY_LEFT)
     8b6:	f2 99       	sbic	0x1e, 2	; 30
     8b8:	04 c1       	rjmp	.+520    	; 0xac2 <FUNCProgramAVR+0x254>
			  return;
			else if (JoyStatus & JOY_PRESS)
     8ba:	f4 99       	sbic	0x1e, 4	; 30
     8bc:	1c c0       	rjmp	.+56     	; 0x8f6 <FUNCProgramAVR+0x88>
			  break;
			else if (JoyStatus & JOY_UP)
     8be:	f6 9b       	sbis	0x1e, 6	; 30
     8c0:	06 c0       	rjmp	.+12     	; 0x8ce <FUNCProgramAVR+0x60>
			  (ProgMode == 0)? ProgMode = 6 : ProgMode--;
     8c2:	11 23       	and	r17, r17
     8c4:	11 f4       	brne	.+4      	; 0x8ca <FUNCProgramAVR+0x5c>
     8c6:	16 e0       	ldi	r17, 0x06	; 6
     8c8:	09 c0       	rjmp	.+18     	; 0x8dc <FUNCProgramAVR+0x6e>
     8ca:	11 50       	subi	r17, 0x01	; 1
     8cc:	07 c0       	rjmp	.+14     	; 0x8dc <FUNCProgramAVR+0x6e>
			else if (JoyStatus & JOY_DOWN)
     8ce:	f7 9b       	sbis	0x1e, 7	; 30
     8d0:	05 c0       	rjmp	.+10     	; 0x8dc <FUNCProgramAVR+0x6e>
			  (ProgMode == 6)? ProgMode = 0 : ProgMode++;
     8d2:	16 30       	cpi	r17, 0x06	; 6
     8d4:	11 f4       	brne	.+4      	; 0x8da <FUNCProgramAVR+0x6c>
     8d6:	10 e0       	ldi	r17, 0x00	; 0
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <FUNCProgramAVR+0x6e>
     8da:	1f 5f       	subi	r17, 0xFF	; 255

			LCD_puts_f((uint8_t*)pgm_read_word(&ProgOptions[ProgMode])); // Show current function onto the LCD
     8dc:	e1 2f       	mov	r30, r17
     8de:	ff 27       	eor	r31, r31
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	ee 55       	subi	r30, 0x5E	; 94
     8e6:	ff 4f       	sbci	r31, 0xFF	; 255
     8e8:	85 91       	lpm	r24, Z+
     8ea:	94 91       	lpm	r25, Z
     8ec:	0e 94 4d 08 	call	0x109a <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     8f0:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     8f4:	dd cf       	rjmp	.-70     	; 0x8b0 <FUNCProgramAVR+0x42>
		}
	}

	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);                // Orange = busy
     8f6:	81 b3       	in	r24, 0x11	; 17
     8f8:	80 63       	ori	r24, 0x30	; 48
     8fa:	81 bb       	out	0x11, r24	; 17
	LCD_puts_f(WaitText);
     8fc:	80 e3       	ldi	r24, 0x30	; 48
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     904:	a1 e0       	ldi	r26, 0x01	; 1
     906:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     908:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
     90c:	80 2d       	mov	r24, r0
     90e:	0e 94 81 09 	call	0x1302 <USI_SPIInitMaster>

	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
     918:	eb e4       	ldi	r30, 0x4B	; 75
     91a:	f1 e0       	ldi	r31, 0x01	; 1
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	9b e0       	ldi	r25, 0x0B	; 11
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     922:	d9 01       	movw	r26, r18
     924:	ad 5d       	subi	r26, 0xDD	; 221
     926:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
     928:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
     92c:	80 2d       	mov	r24, r0
     92e:	81 93       	st	Z+, r24
			
	for (uint8_t PacketB = 0; PacketB <= 11; PacketB++) // Read the enter programming mode command bytes
     930:	91 50       	subi	r25, 0x01	; 1
     932:	2f 5f       	subi	r18, 0xFF	; 255
     934:	3f 4f       	sbci	r19, 0xFF	; 255
     936:	97 ff       	sbrs	r25, 7
     938:	f4 cf       	rjmp	.-24     	; 0x922 <FUNCProgramAVR+0xb4>
	  PacketBytes[PacketB] = eeprom_read_byte(&EEPROMVars.EnterProgMode[PacketB]);
	
	ISPCC_EnterChipProgrammingMode();    // Try to sync with the slave AVR
     93a:	0e 94 e1 10 	call	0x21c2 <ISPCC_EnterChipProgrammingMode>

	CurrAddress = 0;
     93e:	10 92 42 01 	sts	0x0142, r1
     942:	10 92 43 01 	sts	0x0143, r1
     946:	10 92 44 01 	sts	0x0144, r1
     94a:	10 92 45 01 	sts	0x0145, r1

	if (PacketBytes[1] == STATUS_CMD_OK) // ISPCC_EnterChipProgrammingMode alters the PacketBytes buffer rather than returning a value
     94e:	80 91 4c 01 	lds	r24, 0x014C
     952:	88 23       	and	r24, r24
     954:	09 f0       	breq	.+2      	; 0x958 <FUNCProgramAVR+0xea>
     956:	a0 c0       	rjmp	.+320    	; 0xa98 <FUNCProgramAVR+0x22a>
	{						
		if ((ProgMode == 6) || (ProgMode == 0) || (ProgMode == 2)) // Erase chip, or program flash mode
     958:	16 30       	cpi	r17, 0x06	; 6
     95a:	21 f0       	breq	.+8      	; 0x964 <FUNCProgramAVR+0xf6>
     95c:	11 23       	and	r17, r17
     95e:	11 f0       	breq	.+4      	; 0x964 <FUNCProgramAVR+0xf6>
     960:	12 30       	cpi	r17, 0x02	; 2
     962:	91 f4       	brne	.+36     	; 0x988 <FUNCProgramAVR+0x11a>
		{
			MAIN_ShowProgType('C');
     964:	83 e4       	ldi	r24, 0x43	; 67
     966:	0e 94 4d 03 	call	0x69a <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     96a:	a4 e1       	ldi	r26, 0x14	; 20
     96c:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     96e:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
     972:	80 2d       	mov	r24, r0
     974:	81 30       	cpi	r24, 0x01	; 1
     976:	31 f0       	breq	.+12     	; 0x984 <FUNCProgramAVR+0x116>
			
			if (!(eeprom_read_byte(&EEPROMVars.EraseCmdStored) == TRUE))
			{
				Fault = ISPCC_FAULT_NOERASE;
     978:	02 e0       	ldi	r16, 0x02	; 2
				MAIN_ShowError(PSTR("NO ERASE CMD"));
     97a:	8c e6       	ldi	r24, 0x6C	; 108
     97c:	92 e0       	ldi	r25, 0x02	; 2
     97e:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
     982:	02 c0       	rjmp	.+4      	; 0x988 <FUNCProgramAVR+0x11a>
			}
			else
			{
				PM_SendEraseCommand();
     984:	0e 94 75 17 	call	0x2eea <PM_SendEraseCommand>
			}
		}

		if (((ProgMode == 0) || (ProgMode == 2)) && (Fault == ISPCC_NO_FAULT)) // Program flash
     988:	11 23       	and	r17, r17
     98a:	11 f0       	breq	.+4      	; 0x990 <FUNCProgramAVR+0x122>
     98c:	12 30       	cpi	r17, 0x02	; 2
     98e:	b9 f4       	brne	.+46     	; 0x9be <FUNCProgramAVR+0x150>
     990:	00 23       	and	r16, r16
     992:	a9 f4       	brne	.+42     	; 0x9be <FUNCProgramAVR+0x150>
		{
			MAIN_ShowProgType('D');
     994:	84 e4       	ldi	r24, 0x44	; 68
     996:	0e 94 4d 03 	call	0x69a <MAIN_ShowProgType>

			if (!(PM_GetStoredDataSize(TYPE_FLASH))) // Check to make sure a program is present in memory
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	0e 94 e1 13 	call	0x27c2 <PM_GetStoredDataSize>
     9a0:	dc 01       	movw	r26, r24
     9a2:	cb 01       	movw	r24, r22
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	a1 05       	cpc	r26, r1
     9a8:	b1 05       	cpc	r27, r1
     9aa:	31 f4       	brne	.+12     	; 0x9b8 <FUNCProgramAVR+0x14a>
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     9ac:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO DATA"));
     9ae:	89 e7       	ldi	r24, 0x79	; 121
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <FUNCProgramAVR+0x150>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_FLASH);
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	0e 94 a4 17 	call	0x2f48 <PM_CreateProgrammingPackets>
			}
		}
	
		if ((ProgMode == 1) || (ProgMode == 2)) // Program EEPROM
     9be:	81 2f       	mov	r24, r17
     9c0:	81 50       	subi	r24, 0x01	; 1
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	a8 f4       	brcc	.+42     	; 0x9f0 <FUNCProgramAVR+0x182>
		{
			MAIN_ShowProgType('E');
     9c6:	85 e4       	ldi	r24, 0x45	; 69
     9c8:	0e 94 4d 03 	call	0x69a <MAIN_ShowProgType>
				
			if (!(PM_GetStoredDataSize(TYPE_EEPROM))) // Check to make sure EEPROM data is present in memory
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	0e 94 e1 13 	call	0x27c2 <PM_GetStoredDataSize>
     9d2:	dc 01       	movw	r26, r24
     9d4:	cb 01       	movw	r24, r22
     9d6:	00 97       	sbiw	r24, 0x00	; 0
     9d8:	a1 05       	cpc	r26, r1
     9da:	b1 05       	cpc	r27, r1
     9dc:	31 f4       	brne	.+12     	; 0x9ea <FUNCProgramAVR+0x17c>
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     9de:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO EEPROM"));
     9e0:	81 e8       	ldi	r24, 0x81	; 129
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <FUNCProgramAVR+0x182>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_EEPROM);
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	0e 94 a4 17 	call	0x2f48 <PM_CreateProgrammingPackets>
			}
		}

		if ((ProgMode == 3) || (ProgMode == 5)) // Program Fuse bytes
     9f0:	13 30       	cpi	r17, 0x03	; 3
     9f2:	11 f0       	breq	.+4      	; 0x9f8 <FUNCProgramAVR+0x18a>
     9f4:	15 30       	cpi	r17, 0x05	; 5
     9f6:	99 f4       	brne	.+38     	; 0xa1e <FUNCProgramAVR+0x1b0>
		{
			MAIN_ShowProgType('F');
     9f8:	86 e4       	ldi	r24, 0x46	; 70
     9fa:	0e 94 4d 03 	call	0x69a <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     9fe:	af e2       	ldi	r26, 0x2F	; 47
     a00:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     a02:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
     a06:	80 2d       	mov	r24, r0
     a08:	88 23       	and	r24, r24
     a0a:	31 f4       	brne	.+12     	; 0xa18 <FUNCProgramAVR+0x1aa>
			
			if (!(eeprom_read_byte(&EEPROMVars.TotalFuseBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     a0c:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO FUSE BYTES"));
     a0e:	8b e8       	ldi	r24, 0x8B	; 139
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <FUNCProgramAVR+0x1b0>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_FUSE);
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	0e 94 44 17 	call	0x2e88 <PM_SendFuseLockBytes>
			}
		}

		if ((ProgMode == 4) || (ProgMode == 5)) // Program Lock bytes
     a1e:	81 2f       	mov	r24, r17
     a20:	84 50       	subi	r24, 0x04	; 4
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	00 f5       	brcc	.+64     	; 0xa66 <FUNCProgramAVR+0x1f8>
		{
			if (ProgMode == 5)                    // If fusebytes have already been written, we need to reenter programming mode to latch them
     a26:	15 30       	cpi	r17, 0x05	; 5
     a28:	59 f4       	brne	.+22     	; 0xa40 <FUNCProgramAVR+0x1d2>
			{
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line of the slave AVR
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
				MAIN_Delay10MS(1);
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
				MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
				ISPCC_EnterChipProgrammingMode(); // Try to sync with the slave AVR
     a3c:	0e 94 e1 10 	call	0x21c2 <ISPCC_EnterChipProgrammingMode>
			}

			MAIN_ShowProgType('L');
     a40:	8c e4       	ldi	r24, 0x4C	; 76
     a42:	0e 94 4d 03 	call	0x69a <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     a46:	a0 e3       	ldi	r26, 0x30	; 48
     a48:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     a4a:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
     a4e:	80 2d       	mov	r24, r0
     a50:	88 23       	and	r24, r24
     a52:	31 f4       	brne	.+12     	; 0xa60 <FUNCProgramAVR+0x1f2>
		
			if (!(eeprom_read_byte(&EEPROMVars.TotalLockBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     a54:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO LOCK BYTES"));
     a56:	89 e9       	ldi	r24, 0x99	; 153
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
     a5e:	03 c0       	rjmp	.+6      	; 0xa66 <FUNCProgramAVR+0x1f8>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_LOCK);
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	0e 94 44 17 	call	0x2e88 <PM_SendFuseLockBytes>
			}
		}

		strcpy_P(DoneFailMessageBuff, PSTR("PROGRAMMING DONE"));
     a66:	67 ea       	ldi	r22, 0xA7	; 167
     a68:	72 e0       	ldi	r23, 0x02	; 2
     a6a:	ce 01       	movw	r24, r28
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	0e 94 19 1a 	call	0x3432 <strcpy_P>

		if (Fault != ISPCC_NO_FAULT)         // Takes less code to just overwrite part of the string on fail
     a72:	00 23       	and	r16, r16
     a74:	31 f0       	breq	.+12     	; 0xa82 <FUNCProgramAVR+0x214>
		  strcpy_P(&DoneFailMessageBuff[12], PSTR("FAILED"));
     a76:	68 eb       	ldi	r22, 0xB8	; 184
     a78:	72 e0       	ldi	r23, 0x02	; 2
     a7a:	ce 01       	movw	r24, r28
     a7c:	0d 96       	adiw	r24, 0x0d	; 13
     a7e:	0e 94 19 1a 	call	0x3432 <strcpy_P>

		LCD_puts(DoneFailMessageBuff);
     a82:	ce 01       	movw	r24, r28
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	0e 94 17 08 	call	0x102e <LCD_puts>

		MAIN_Delay10MS(255);
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
		MAIN_Delay10MS(100);
     a90:	84 e6       	ldi	r24, 0x64	; 100
     a92:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <FUNCProgramAVR+0x232>
	}
	else
	{
		MAIN_ShowError(SyncErrorMessage);
     a98:	8d ee       	ldi	r24, 0xED	; 237
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
	}
	
	MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run	
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
	USI_SPIOff();
     aa6:	0e 94 91 09 	call	0x1322 <USI_SPIOff>
	DF_EnableDataflash(FALSE);
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
	SPI_SPIOFF();
     ab0:	80 91 64 00 	lds	r24, 0x0064
     ab4:	84 60       	ori	r24, 0x04	; 4
     ab6:	80 93 64 00 	sts	0x0064, r24
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Green = ready
     aba:	81 b3       	in	r24, 0x11	; 17
     abc:	8f 7c       	andi	r24, 0xCF	; 207
     abe:	80 61       	ori	r24, 0x10	; 16
     ac0:	81 bb       	out	0x11, r24	; 17
     ac2:	63 96       	adiw	r28, 0x13	; 19
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	cd bf       	out	0x3d, r28	; 61
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	08 95       	ret

00000ad8 <FUNCStoreProgram>:
}

void FUNCStoreProgram(void)
{
	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     ad8:	86 e3       	ldi	r24, 0x36	; 54
     ada:	99 e0       	ldi	r25, 0x09	; 9
     adc:	90 93 01 01 	sts	0x0101, r25
     ae0:	80 93 00 01 	sts	0x0100, r24
	SPI_SPIInit();
     ae4:	0e 94 2c 09 	call	0x1258 <SPI_SPIInit>
	UseExernalDF = FALSE;
     ae8:	10 92 65 02 	sts	0x0265, r1
	DF_EnableDataflash(TRUE);
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>

	if (!(DF_CheckCorrectOnboardChip()))
     af2:	0e 94 3a 0b 	call	0x1674 <DF_CheckCorrectOnboardChip>
     af6:	88 23       	and	r24, r24
     af8:	01 f1       	breq	.+64     	; 0xb3a <FUNCStoreProgram+0x62>
	  return;
			
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     afa:	80 e3       	ldi	r24, 0x30	; 48
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
     b02:	0e 94 84 07 	call	0xf08 <OSCCAL_Calibrate>
     b06:	80 91 c1 00 	lds	r24, 0x00C1
     b0a:	80 78       	andi	r24, 0x80	; 128
     b0c:	88 61       	ori	r24, 0x18	; 24
     b0e:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(PSTR("*STORAGE MODE*"));
     b12:	8f eb       	ldi	r24, 0xBF	; 191
     b14:	92 e0       	ldi	r25, 0x02	; 2
     b16:	0e 94 4d 08 	call	0x109a <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PM_InterpretAVRISPPacket;
     b1a:	86 ef       	ldi	r24, 0xF6	; 246
     b1c:	94 e1       	ldi	r25, 0x14	; 20
     b1e:	90 93 03 01 	sts	0x0103, r25
     b22:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     b26:	0e 94 76 0f 	call	0x1eec <V2P_RunStateMachine>
	DF_EnableDataflash(FALSE);
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
	SPI_SPIOFF();
     b30:	80 91 64 00 	lds	r24, 0x0064
     b34:	84 60       	ori	r24, 0x04	; 4
     b36:	80 93 64 00 	sts	0x0064, r24
     b3a:	08 95       	ret

00000b3c <FUNCClearMem>:
}

void FUNCClearMem(void)
{
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
	LCD_puts_f(PSTR("CONFIRM"));
     b40:	8e ec       	ldi	r24, 0xCE	; 206
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
	MAIN_Delay10MS(180);
     b48:	84 eb       	ldi	r24, 0xB4	; 180
     b4a:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>

	LCD_puts_f(PSTR("<N Y>"));
     b4e:	86 ed       	ldi	r24, 0xD6	; 214
     b50:	92 e0       	ldi	r25, 0x02	; 2
     b52:	0e 94 4d 08 	call	0x109a <LCD_puts_f>

	while (1)
	{
		if (JoyStatus)
     b56:	8e b3       	in	r24, 0x1e	; 30
     b58:	88 23       	and	r24, r24
     b5a:	e9 f3       	breq	.-6      	; 0xb56 <FUNCClearMem+0x1a>
		{
			if (JoyStatus & JOY_LEFT)
     b5c:	8e b3       	in	r24, 0x1e	; 30
     b5e:	99 27       	eor	r25, r25
     b60:	ec 01       	movw	r28, r24
     b62:	c4 70       	andi	r28, 0x04	; 4
     b64:	d0 70       	andi	r29, 0x00	; 0
     b66:	82 fd       	sbrc	r24, 2
     b68:	1a c0       	rjmp	.+52     	; 0xb9e <FUNCClearMem+0x62>
			  return;
			else if (JoyStatus & JOY_RIGHT)
     b6a:	f3 9b       	sbis	0x1e, 3	; 30
     b6c:	f4 cf       	rjmp	.-24     	; 0xb56 <FUNCClearMem+0x1a>
			  break;
		}
	}

	MAIN_WaitForJoyRelease();
     b6e:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>

	LCD_puts_f(WaitText);
     b72:	80 e3       	ldi	r24, 0x30	; 48
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	0e 94 4d 08 	call	0x109a <LCD_puts_f>

	for (uint16_t EAddr = 0; EAddr < 512; EAddr++)
     b7a:	ce 01       	movw	r24, r28
     b7c:	2f ef       	ldi	r18, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     b7e:	dc 01       	movw	r26, r24
     b80:	02 2e       	mov	r0, r18
     b82:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	32 e0       	ldi	r19, 0x02	; 2
     b8a:	80 30       	cpi	r24, 0x00	; 0
     b8c:	93 07       	cpc	r25, r19
     b8e:	b8 f3       	brcs	.-18     	; 0xb7e <FUNCClearMem+0x42>
	  eeprom_write_byte((uint8_t*)EAddr, 0xFF);

	LCD_puts_f(PSTR("MEM CLEARED"));
     b90:	8c ed       	ldi	r24, 0xDC	; 220
     b92:	92 e0       	ldi	r25, 0x02	; 2
     b94:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
	MAIN_Delay10MS(255);
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <FUNCSetContrast>:
}

void FUNCSetContrast(void)
{
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	26 97       	sbiw	r28, 0x06	; 6
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     bbe:	85 e8       	ldi	r24, 0x85	; 133
     bc0:	e8 2e       	mov	r14, r24
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	f8 2e       	mov	r15, r24
  uint8_t result;
  asm volatile
     bc6:	d7 01       	movw	r26, r14
     bc8:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
     bcc:	80 2d       	mov	r24, r0
     bce:	18 2f       	mov	r17, r24
     bd0:	1f 70       	andi	r17, 0x0F	; 15
	uint8_t Buffer[6];
	uint8_t Contrast = (eeprom_read_byte(&EEPROMVars.LCDContrast) & 0x0F); // Ranges from 0-15 so mask retuns 15 on blank EEPROM (0xFF)
	
	JoyStatus = 1;                          // Invalid value to force the LCD to update
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)
     bd6:	8e b3       	in	r24, 0x1e	; 30
     bd8:	88 23       	and	r24, r24
     bda:	e9 f3       	breq	.-6      	; 0xbd6 <FUNCSetContrast+0x32>
		{
			if (JoyStatus & JOY_UP)
     bdc:	f6 9b       	sbis	0x1e, 6	; 30
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <FUNCSetContrast+0x44>
			{
				if (Contrast < 15)
     be0:	1f 30       	cpi	r17, 0x0F	; 15
     be2:	78 f4       	brcc	.+30     	; 0xc02 <FUNCSetContrast+0x5e>
				  Contrast++;
     be4:	1f 5f       	subi	r17, 0xFF	; 255
     be6:	0d c0       	rjmp	.+26     	; 0xc02 <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_DOWN)
     be8:	f7 9b       	sbis	0x1e, 7	; 30
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <FUNCSetContrast+0x50>
			{
				if (Contrast > 1)          // Zero is non-visible, so 1 is the minimum
     bec:	12 30       	cpi	r17, 0x02	; 2
     bee:	48 f0       	brcs	.+18     	; 0xc02 <FUNCSetContrast+0x5e>
				  Contrast--;
     bf0:	11 50       	subi	r17, 0x01	; 1
     bf2:	07 c0       	rjmp	.+14     	; 0xc02 <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_LEFT)
     bf4:	f2 9b       	sbis	0x1e, 2	; 30
     bf6:	05 c0       	rjmp	.+10     	; 0xc02 <FUNCSetContrast+0x5e>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     bf8:	d7 01       	movw	r26, r14
     bfa:	01 2e       	mov	r0, r17
     bfc:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.LCDContrast, Contrast);
				return;
     c00:	18 c0       	rjmp	.+48     	; 0xc32 <FUNCSetContrast+0x8e>
			}
					
			Buffer[0] = 'C';
     c02:	83 e4       	ldi	r24, 0x43	; 67
     c04:	89 83       	std	Y+1, r24	; 0x01
			Buffer[1] = 'T';
     c06:	84 e5       	ldi	r24, 0x54	; 84
     c08:	8a 83       	std	Y+2, r24	; 0x02
			Buffer[2] = ' ';
     c0a:	80 e2       	ldi	r24, 0x20	; 32
     c0c:	8b 83       	std	Y+3, r24	; 0x03

			MAIN_IntToStr((uint16_t)Contrast, &Buffer[3]);
     c0e:	be 01       	movw	r22, r28
     c10:	6c 5f       	subi	r22, 0xFC	; 252
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	81 2f       	mov	r24, r17
     c16:	99 27       	eor	r25, r25
     c18:	0e 94 35 03 	call	0x66a <MAIN_IntToStr>
			LCD_puts(Buffer);
     c1c:	ce 01       	movw	r24, r28
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	0e 94 17 08 	call	0x102e <LCD_puts>

			LCD_CONTRAST_LEVEL(Contrast);
     c24:	81 2f       	mov	r24, r17
     c26:	8f 70       	andi	r24, 0x0F	; 15
     c28:	80 93 e7 00 	sts	0x00E7, r24

			MAIN_WaitForJoyRelease();
     c2c:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     c30:	d2 cf       	rjmp	.-92     	; 0xbd6 <FUNCSetContrast+0x32>
     c32:	26 96       	adiw	r28, 0x06	; 6
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	08 95       	ret

00000c4a <FUNCSetISPSpeed>:
		}
	}
}

void FUNCSetISPSpeed(void)
{
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     c50:	01 e0       	ldi	r16, 0x01	; 1
     c52:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t result;
  asm volatile
     c54:	d8 01       	movw	r26, r16
     c56:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
     c5a:	80 2d       	mov	r24, r0
     c5c:	c8 2f       	mov	r28, r24
	uint8_t CurrSpeed = eeprom_read_byte(&EEPROMVars.SCKDuration);

	if (CurrSpeed > (USI_PRESET_SPEEDS - 1)) CurrSpeed = (USI_PRESET_SPEEDS - 1); // Protection against blank EEPROM
     c5e:	84 30       	cpi	r24, 0x04	; 4
     c60:	08 f0       	brcs	.+2      	; 0xc64 <FUNCSetISPSpeed+0x1a>
     c62:	c3 e0       	ldi	r28, 0x03	; 3

	JoyStatus = 1;                         // Invalid value to force the LCD to update
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     c68:	8e b3       	in	r24, 0x1e	; 30
     c6a:	88 23       	and	r24, r24
     c6c:	e9 f3       	breq	.-6      	; 0xc68 <FUNCSetISPSpeed+0x1e>
		{
			if (JoyStatus & JOY_UP)
     c6e:	f6 9b       	sbis	0x1e, 6	; 30
     c70:	06 c0       	rjmp	.+12     	; 0xc7e <FUNCSetISPSpeed+0x34>
			{
				(CurrSpeed == 0)? CurrSpeed = (USI_PRESET_SPEEDS - 1) : CurrSpeed--;
     c72:	cc 23       	and	r28, r28
     c74:	11 f4       	brne	.+4      	; 0xc7a <FUNCSetISPSpeed+0x30>
     c76:	c3 e0       	ldi	r28, 0x03	; 3
     c78:	11 c0       	rjmp	.+34     	; 0xc9c <FUNCSetISPSpeed+0x52>
     c7a:	c1 50       	subi	r28, 0x01	; 1
     c7c:	0f c0       	rjmp	.+30     	; 0xc9c <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_DOWN)
     c7e:	f7 9b       	sbis	0x1e, 7	; 30
     c80:	06 c0       	rjmp	.+12     	; 0xc8e <FUNCSetISPSpeed+0x44>
			{
				(CurrSpeed == (USI_PRESET_SPEEDS - 1))? CurrSpeed = 0 : CurrSpeed++;
     c82:	c3 30       	cpi	r28, 0x03	; 3
     c84:	11 f4       	brne	.+4      	; 0xc8a <FUNCSetISPSpeed+0x40>
     c86:	c0 e0       	ldi	r28, 0x00	; 0
     c88:	09 c0       	rjmp	.+18     	; 0xc9c <FUNCSetISPSpeed+0x52>
     c8a:	cf 5f       	subi	r28, 0xFF	; 255
     c8c:	07 c0       	rjmp	.+14     	; 0xc9c <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_LEFT)
     c8e:	f2 9b       	sbis	0x1e, 2	; 30
     c90:	05 c0       	rjmp	.+10     	; 0xc9c <FUNCSetISPSpeed+0x52>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     c92:	d8 01       	movw	r26, r16
     c94:	0c 2e       	mov	r0, r28
     c96:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.SCKDuration, CurrSpeed);
				return;
     c9a:	0b c0       	rjmp	.+22     	; 0xcb2 <FUNCSetISPSpeed+0x68>
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f(USISpeeds[CurrSpeed]);
     c9c:	8a e0       	ldi	r24, 0x0A	; 10
     c9e:	c8 9f       	mul	r28, r24
     ca0:	c0 01       	movw	r24, r0
     ca2:	11 24       	eor	r1, r1
     ca4:	86 58       	subi	r24, 0x86	; 134
     ca6:	9f 4f       	sbci	r25, 0xFF	; 255
     ca8:	0e 94 4d 08 	call	0x109a <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     cac:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     cb0:	db cf       	rjmp	.-74     	; 0xc68 <FUNCSetISPSpeed+0x1e>
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	08 95       	ret

00000cba <FUNCSetFirmMinorVer>:
		}
	}
}

void FUNCSetFirmMinorVer(void)
{
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	25 97       	sbiw	r28, 0x05	; 5
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     cd4:	96 e8       	ldi	r25, 0x86	; 134
     cd6:	e9 2e       	mov	r14, r25
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	f9 2e       	mov	r15, r25
  uint8_t result;
  asm volatile
     cdc:	d7 01       	movw	r26, r14
     cde:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
     ce2:	80 2d       	mov	r24, r0
     ce4:	18 2f       	mov	r17, r24
	uint8_t VerBuffer[5];
	uint8_t VerMinor = eeprom_read_byte(&EEPROMVars.FirmVerMinor);

	if (VerMinor > 9)
     ce6:	8a 30       	cpi	r24, 0x0A	; 10
     ce8:	08 f0       	brcs	.+2      	; 0xcec <FUNCSetFirmMinorVer+0x32>
	  VerMinor = V2P_SW_VERSION_MINOR_DEFAULT;
     cea:	14 e0       	ldi	r17, 0x04	; 4
	
	strcpy_P(VerBuffer, PSTR("V2- "));
     cec:	68 ee       	ldi	r22, 0xE8	; 232
     cee:	72 e0       	ldi	r23, 0x02	; 2
     cf0:	ce 01       	movw	r24, r28
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	0e 94 19 1a 	call	0x3432 <strcpy_P>

	JoyStatus = 1;                        // Invalid value to force the LCD to update
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     cfc:	8e b3       	in	r24, 0x1e	; 30
     cfe:	88 23       	and	r24, r24
     d00:	e9 f3       	breq	.-6      	; 0xcfc <FUNCSetFirmMinorVer+0x42>
		{
			if (JoyStatus & JOY_UP)
     d02:	f6 9b       	sbis	0x1e, 6	; 30
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <FUNCSetFirmMinorVer+0x52>
			{
				if (VerMinor < 9)
     d06:	19 30       	cpi	r17, 0x09	; 9
     d08:	08 f4       	brcc	.+2      	; 0xd0c <FUNCSetFirmMinorVer+0x52>
				  VerMinor++;
     d0a:	1f 5f       	subi	r17, 0xFF	; 255
			}
			if (JoyStatus & JOY_DOWN)
     d0c:	f7 9b       	sbis	0x1e, 7	; 30
     d0e:	04 c0       	rjmp	.+8      	; 0xd18 <FUNCSetFirmMinorVer+0x5e>
			{
				if (VerMinor)
     d10:	11 23       	and	r17, r17
     d12:	49 f0       	breq	.+18     	; 0xd26 <FUNCSetFirmMinorVer+0x6c>
				  VerMinor--;
     d14:	11 50       	subi	r17, 0x01	; 1
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <FUNCSetFirmMinorVer+0x6c>
			}
			else if (JoyStatus & JOY_LEFT)
     d18:	f2 9b       	sbis	0x1e, 2	; 30
     d1a:	05 c0       	rjmp	.+10     	; 0xd26 <FUNCSetFirmMinorVer+0x6c>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     d1c:	d7 01       	movw	r26, r14
     d1e:	01 2e       	mov	r0, r17
     d20:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.FirmVerMinor, VerMinor);
				return;
     d24:	0a c0       	rjmp	.+20     	; 0xd3a <FUNCSetFirmMinorVer+0x80>
			}
			
			VerBuffer[3] = ('0' + VerMinor);
     d26:	10 5d       	subi	r17, 0xD0	; 208
     d28:	1c 83       	std	Y+4, r17	; 0x04
     d2a:	10 53       	subi	r17, 0x30	; 48
			LCD_puts(VerBuffer);
     d2c:	ce 01       	movw	r24, r28
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	0e 94 17 08 	call	0x102e <LCD_puts>

			MAIN_WaitForJoyRelease();
     d34:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     d38:	e1 cf       	rjmp	.-62     	; 0xcfc <FUNCSetFirmMinorVer+0x42>
     d3a:	25 96       	adiw	r28, 0x05	; 5
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	08 95       	ret

00000d52 <FUNCSetAutoSleepTimeOut>:
		}
	}	
}

void FUNCSetAutoSleepTimeOut(void)
{
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	28 97       	sbiw	r28, 0x08	; 8
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     d6c:	27 e8       	ldi	r18, 0x87	; 135
     d6e:	e2 2e       	mov	r14, r18
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	f2 2e       	mov	r15, r18
  uint8_t result;
  asm volatile
     d74:	d7 01       	movw	r26, r14
     d76:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
     d7a:	80 2d       	mov	r24, r0
     d7c:	18 2f       	mov	r17, r24
	uint8_t SleepTxtBuffer[8];
	uint8_t SleepVal = eeprom_read_byte(&EEPROMVars.AutoSleepValIndex);

	if (SleepVal > 4)
     d7e:	85 30       	cpi	r24, 0x05	; 5
     d80:	08 f0       	brcs	.+2      	; 0xd84 <FUNCSetAutoSleepTimeOut+0x32>
	  SleepVal = 4;
     d82:	14 e0       	ldi	r17, 0x04	; 4

	strcpy_P(SleepTxtBuffer, PSTR("    SEC"));
     d84:	6d ee       	ldi	r22, 0xED	; 237
     d86:	72 e0       	ldi	r23, 0x02	; 2
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	0e 94 19 1a 	call	0x3432 <strcpy_P>
	
	JoyStatus = 1;                        // Invalid value to force the LCD to update
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     d94:	8e b3       	in	r24, 0x1e	; 30
     d96:	88 23       	and	r24, r24
     d98:	e9 f3       	breq	.-6      	; 0xd94 <FUNCSetAutoSleepTimeOut+0x42>
		{
			if (JoyStatus & JOY_UP)
     d9a:	f6 9b       	sbis	0x1e, 6	; 30
     d9c:	05 c0       	rjmp	.+10     	; 0xda8 <FUNCSetAutoSleepTimeOut+0x56>
			{
				(SleepVal == 0)? SleepVal = 4 : SleepVal--;
     d9e:	11 23       	and	r17, r17
     da0:	11 f4       	brne	.+4      	; 0xda6 <FUNCSetAutoSleepTimeOut+0x54>
     da2:	14 e0       	ldi	r17, 0x04	; 4
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <FUNCSetAutoSleepTimeOut+0x56>
     da6:	11 50       	subi	r17, 0x01	; 1
			}
			if (JoyStatus & JOY_DOWN)
     da8:	f7 9b       	sbis	0x1e, 7	; 30
     daa:	06 c0       	rjmp	.+12     	; 0xdb8 <FUNCSetAutoSleepTimeOut+0x66>
			{
				(SleepVal == 4)? SleepVal = 0 : SleepVal++;
     dac:	14 30       	cpi	r17, 0x04	; 4
     dae:	11 f4       	brne	.+4      	; 0xdb4 <FUNCSetAutoSleepTimeOut+0x62>
     db0:	10 e0       	ldi	r17, 0x00	; 0
     db2:	0d c0       	rjmp	.+26     	; 0xdce <FUNCSetAutoSleepTimeOut+0x7c>
     db4:	1f 5f       	subi	r17, 0xFF	; 255
     db6:	09 c0       	rjmp	.+18     	; 0xdca <FUNCSetAutoSleepTimeOut+0x78>
			}
			else if (JoyStatus & JOY_LEFT)
     db8:	f2 9b       	sbis	0x1e, 2	; 30
     dba:	07 c0       	rjmp	.+14     	; 0xdca <FUNCSetAutoSleepTimeOut+0x78>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     dbc:	d7 01       	movw	r26, r14
     dbe:	01 2e       	mov	r0, r17
     dc0:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.AutoSleepValIndex, SleepVal);
				TOUT_SetupSleepTimer();
     dc4:	0e 94 e7 0b 	call	0x17ce <TOUT_SetupSleepTimer>
				return;
     dc8:	1b c0       	rjmp	.+54     	; 0xe00 <FUNCSetAutoSleepTimeOut+0xae>
			}

			if (!(SleepVal))
     dca:	11 23       	and	r17, r17
     dcc:	29 f4       	brne	.+10     	; 0xdd8 <FUNCSetAutoSleepTimeOut+0x86>
			{
				LCD_puts_f(PSTR("OFF"));
     dce:	85 ef       	ldi	r24, 0xF5	; 245
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
     dd6:	11 c0       	rjmp	.+34     	; 0xdfa <FUNCSetAutoSleepTimeOut+0xa8>
			}
			else
			{
				MAIN_IntToStr(pgm_read_byte(&AutoSleepTOValues[SleepVal]), &SleepTxtBuffer[0]);
     dd8:	e1 2f       	mov	r30, r17
     dda:	ff 27       	eor	r31, r31
     ddc:	e4 53       	subi	r30, 0x34	; 52
     dde:	fc 4f       	sbci	r31, 0xFC	; 252
     de0:	84 91       	lpm	r24, Z
     de2:	be 01       	movw	r22, r28
     de4:	6f 5f       	subi	r22, 0xFF	; 255
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	99 27       	eor	r25, r25
     dea:	0e 94 35 03 	call	0x66a <MAIN_IntToStr>
				SleepTxtBuffer[3] = ' '; // Remove the auto-string termination from the buffer
     dee:	80 e2       	ldi	r24, 0x20	; 32
     df0:	8c 83       	std	Y+4, r24	; 0x04
				LCD_puts(SleepTxtBuffer);
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	0e 94 17 08 	call	0x102e <LCD_puts>
			}

			MAIN_WaitForJoyRelease();
     dfa:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     dfe:	ca cf       	rjmp	.-108    	; 0xd94 <FUNCSetAutoSleepTimeOut+0x42>
     e00:	28 96       	adiw	r28, 0x08	; 8
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	08 95       	ret

00000e18 <FUNCSleepMode>:
		}
	}	
}

void FUNCSleepMode(void)
{
	SMCR    = ((1 << SM1) | (1 << SE));    // Power down sleep mode
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	83 bf       	out	0x33, r24	; 51
	LCDCRA &= ~(1 << LCDEN); 
     e1c:	80 91 e4 00 	lds	r24, 0x00E4
     e20:	8f 77       	andi	r24, 0x7F	; 127
     e22:	80 93 e4 00 	sts	0x00E4, r24
	
	while (!(JoyStatus & JOY_UP))         // Joystick interrupt wakes the micro
	  SLEEP();
     e26:	f6 99       	sbic	0x1e, 6	; 30
     e28:	03 c0       	rjmp	.+6      	; 0xe30 <FUNCSleepMode+0x18>
     e2a:	88 95       	sleep
     e2c:	f6 9b       	sbis	0x1e, 6	; 30
     e2e:	fd cf       	rjmp	.-6      	; 0xe2a <FUNCSleepMode+0x12>
	   
	LCDCRA |= (1 << LCDEN);
     e30:	80 91 e4 00 	lds	r24, 0x00E4
     e34:	80 68       	ori	r24, 0x80	; 128
     e36:	80 93 e4 00 	sts	0x00E4, r24
	
	MAIN_WaitForJoyRelease();
     e3a:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     e3e:	08 95       	ret

00000e40 <FUNCStorageInfo>:
}

void FUNCStorageInfo(void)
{
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
	uint8_t SelectedItem = 0;
     e44:	10 e0       	ldi	r17, 0x00	; 0

	MAIN_WaitForJoyRelease();
     e46:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>

	JoyStatus = 1;                        // Invalid value to force the LCD to update
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     e4e:	8e b3       	in	r24, 0x1e	; 30
     e50:	88 23       	and	r24, r24
     e52:	e9 f3       	breq	.-6      	; 0xe4e <FUNCStorageInfo+0xe>
		{
			if (JoyStatus & (JOY_UP | JOY_DOWN))
     e54:	ce b3       	in	r28, 0x1e	; 30
     e56:	c0 7c       	andi	r28, 0xC0	; 192
     e58:	19 f0       	breq	.+6      	; 0xe60 <FUNCStorageInfo+0x20>
			{
				SelectedItem ^= 1;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	18 27       	eor	r17, r24
     e5e:	38 c0       	rjmp	.+112    	; 0xed0 <FUNCStorageInfo+0x90>
			}
			else if (JoyStatus & JOY_LEFT)
     e60:	f2 99       	sbic	0x1e, 2	; 30
     e62:	41 c0       	rjmp	.+130    	; 0xee6 <FUNCStorageInfo+0xa6>
			{
				return;
			}
			else if (JoyStatus & JOY_PRESS)
     e64:	f4 9b       	sbis	0x1e, 4	; 30
     e66:	34 c0       	rjmp	.+104    	; 0xed0 <FUNCStorageInfo+0x90>
			{
				if (SelectedItem == 1)    // View storage tags
     e68:	11 30       	cpi	r17, 0x01	; 1
     e6a:	81 f5       	brne	.+96     	; 0xecc <FUNCStorageInfo+0x8c>
				{
					DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     e6c:	86 e3       	ldi	r24, 0x36	; 54
     e6e:	99 e0       	ldi	r25, 0x09	; 9
     e70:	90 93 01 01 	sts	0x0101, r25
     e74:	80 93 00 01 	sts	0x0100, r24
					SPI_SPIInit();
     e78:	0e 94 2c 09 	call	0x1258 <SPI_SPIInit>
					UseExernalDF = FALSE;
     e7c:	c0 93 65 02 	sts	0x0265, r28
					DF_EnableDataflash(TRUE);
     e80:	81 2f       	mov	r24, r17
     e82:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>

					if (DF_CheckCorrectOnboardChip())
     e86:	0e 94 3a 0b 	call	0x1674 <DF_CheckCorrectOnboardChip>
     e8a:	c8 2f       	mov	r28, r24
     e8c:	88 23       	and	r24, r24
     e8e:	41 f0       	breq	.+16     	; 0xea0 <FUNCStorageInfo+0x60>
					{
						TM_ShowTags();
     e90:	0e 94 eb 19 	call	0x33d6 <TM_ShowTags>
						SPI_SPIOFF();
     e94:	80 91 64 00 	lds	r24, 0x0064
     e98:	84 60       	ori	r24, 0x04	; 4
     e9a:	80 93 64 00 	sts	0x0064, r24
     e9e:	18 c0       	rjmp	.+48     	; 0xed0 <FUNCStorageInfo+0x90>
					}
					else if (!(PM_GetStoredDataSize(TYPE_FLASH)))
     ea0:	81 2f       	mov	r24, r17
     ea2:	0e 94 e1 13 	call	0x27c2 <PM_GetStoredDataSize>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	a1 05       	cpc	r26, r1
     eae:	b1 05       	cpc	r27, r1
     eb0:	79 f4       	brne	.+30     	; 0xed0 <FUNCStorageInfo+0x90>
					{
						DF_EnableDataflash(FALSE);
     eb2:	8c 2f       	mov	r24, r28
     eb4:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
						SPI_SPIOFF();
     eb8:	80 91 64 00 	lds	r24, 0x0064
     ebc:	84 60       	ori	r24, 0x04	; 4
     ebe:	80 93 64 00 	sts	0x0064, r24

						MAIN_ShowError(PSTR("NO STORED PRGM"));
     ec2:	89 ef       	ldi	r24, 0xF9	; 249
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <FUNCStorageInfo+0x90>
					}	
				}
				else                      // View stored data sizes
				{
					PM_ShowStoredItemSizes();
     ecc:	0e 94 c6 18 	call	0x318c <PM_ShowStoredItemSizes>
				}
			}
			
			LCD_puts_f(SIFONames[SelectedItem]);
     ed0:	8f e0       	ldi	r24, 0x0F	; 15
     ed2:	18 9f       	mul	r17, r24
     ed4:	c0 01       	movw	r24, r0
     ed6:	11 24       	eor	r1, r1
     ed8:	84 5a       	subi	r24, 0xA4	; 164
     eda:	9f 4f       	sbci	r25, 0xFF	; 255
     edc:	0e 94 4d 08 	call	0x109a <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     ee0:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     ee4:	b4 cf       	rjmp	.-152    	; 0xe4e <FUNCStorageInfo+0xe>
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	08 95       	ret

00000eec <FUNCGoBootloader>:
		}
	}
}

void FUNCGoBootloader(void)
{
	uint8_t MD = (MCUCR & ~(1 << JTD));   // Forces compiler to use IN, AND plus two OUTs rather than two lots of IN/AND/OUTs
     eec:	85 b7       	in	r24, 0x35	; 53
     eee:	8f 77       	andi	r24, 0x7F	; 127
	MCUCR = MD;                           // Turn on JTAG via code
     ef0:	85 bf       	out	0x35, r24	; 53
	MCUCR = MD;                           // Set bit twice as specified in datasheet        
     ef2:	85 bf       	out	0x35, r24	; 53
	
	LCD_puts_f(PSTR("*JTAG ON*"));
     ef4:	88 e0       	ldi	r24, 0x08	; 8
     ef6:	93 e0       	ldi	r25, 0x03	; 3
     ef8:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
	
	MAIN_WaitForJoyRelease();
     efc:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
	
	WDTCR = ((1<<WDCE) | (1<<WDE));       // Enable Watchdog Timer to give reset after minimum timeout
     f00:	88 e1       	ldi	r24, 0x18	; 24
     f02:	80 93 60 00 	sts	0x0060, r24
	while (1) {};                        // Eternal loop - when watchdog resets the AVR it will enter the bootloader
     f06:	ff cf       	rjmp	.-2      	; 0xf06 <FUNCGoBootloader+0x1a>

00000f08 <OSCCAL_Calibrate>:

static volatile uint16_t ActualCount;

void OSCCAL_Calibrate(void)
{
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
	uint8_t SREG_Backup;
	uint8_t LoopCount = (0x7F / 2); // Maximum range is 128, and starts from the middle, so 64 is the max number of iterations required
     f0c:	4f e3       	ldi	r20, 0x3F	; 63
	uint8_t PrevOSCALValues[2];
   
	// Reset ActualCount
	ActualCount = 0;
     f0e:	10 92 05 01 	sts	0x0105, r1
     f12:	10 92 04 01 	sts	0x0104, r1
   
	// Make sure all clock division is turned off (8Mhz RC clock)
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_8MHZ);
     f16:	80 e8       	ldi	r24, 0x80	; 128
     f18:	80 93 61 00 	sts	0x0061, r24
     f1c:	10 92 61 00 	sts	0x0061, r1

	// Inital OSCCAL of half its maximum for speed
	OSCCAL = (0x7F / 2);
     f20:	40 93 66 00 	sts	0x0066, r20

	// Save the SREG
	SREG_Backup = SREG;
     f24:	5f b7       	in	r21, 0x3f	; 63
    
	// Disable all timer 1 interrupts
	TIMSK1 = 0;
     f26:	10 92 6f 00 	sts	0x006F, r1
        
	// Set timer 2 to asyncronous mode (32.768KHz crystal)
	ASSR   = (1 << AS2);
     f2a:	88 e0       	ldi	r24, 0x08	; 8
     f2c:	80 93 b6 00 	sts	0x00B6, r24
        
	// Timer 2 overflow interrupt enable
	TIMSK2 = (1 << TOIE2);
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	80 93 70 00 	sts	0x0070, r24

	// Enable interrupts
	sei();
     f36:	78 94       	sei

	// Start both counters with no prescaling
	TCCR1B = (1 << CS10);
     f38:	80 93 81 00 	sts	0x0081, r24
	TCCR2A = (1 << CS20);
     f3c:	80 93 b0 00 	sts	0x00B0, r24
	 	 
	// Previous OSCCAL value of 0
	PrevOSCALValues[0] = 0;
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0

	// Wait until timer 2's external 32.768KHz crystal is stable
	while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB) | (1 << OCR2UB)));
     f44:	80 91 b6 00 	lds	r24, 0x00B6
     f48:	99 27       	eor	r25, r25
     f4a:	87 70       	andi	r24, 0x07	; 7
     f4c:	90 70       	andi	r25, 0x00	; 0
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	c9 f7       	brne	.-14     	; 0xf44 <OSCCAL_Calibrate+0x3c>
    
	// Clear the timer values
	TCNT1  = 0;
     f52:	90 93 85 00 	sts	0x0085, r25
     f56:	80 93 84 00 	sts	0x0084, r24
	TCNT2  = 0;
     f5a:	10 92 b2 00 	sts	0x00B2, r1
    
	while (LoopCount--)
	{
		// Let it take a few readings (14ms, approx 2 readings)
		_delay_ms(14);

		PrevOSCALValues[1] = PrevOSCALValues[0];
		PrevOSCALValues[0] = OSCCAL;
        
		if (ActualCount > OSCCAL_UPPERCOUNTBOUND)       // Clock is running too fast
			OSCCAL--;
		else if (ActualCount < OSCCAL_LOWERCOUNTBOUND) // Clock is running too slow
			OSCCAL++;
		else		                                     // Clock is just right
			break;
		
		// If the routine cannot find a value withing the count tollerance,
		// it will cause the OSCCAL to hover around the closest two values.
		// If the current value is the same as the 2*n previous, exit the
		// routine as the best value has been found.
		if (OSCCAL == PrevOSCALValues[1])
		  break;
     f5e:	4e e3       	ldi	r20, 0x3E	; 62
     f60:	ac ec       	ldi	r26, 0xCC	; 204
     f62:	b4 e6       	ldi	r27, 0x64	; 100
     f64:	c0 e0       	ldi	r28, 0x00	; 0
     f66:	d0 e0       	ldi	r29, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f68:	cd 01       	movw	r24, r26
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <OSCCAL_Calibrate+0x62>
     f6e:	32 2f       	mov	r19, r18
     f70:	80 91 66 00 	lds	r24, 0x0066
     f74:	28 2f       	mov	r18, r24
     f76:	80 91 04 01 	lds	r24, 0x0104
     f7a:	90 91 05 01 	lds	r25, 0x0105
     f7e:	81 50       	subi	r24, 0x01	; 1
     f80:	91 4e       	sbci	r25, 0xE1	; 225
     f82:	20 f0       	brcs	.+8      	; 0xf8c <OSCCAL_Calibrate+0x84>
     f84:	80 91 66 00 	lds	r24, 0x0066
     f88:	81 50       	subi	r24, 0x01	; 1
     f8a:	0a c0       	rjmp	.+20     	; 0xfa0 <OSCCAL_Calibrate+0x98>
     f8c:	80 91 04 01 	lds	r24, 0x0104
     f90:	90 91 05 01 	lds	r25, 0x0105
     f94:	86 5f       	subi	r24, 0xF6	; 246
     f96:	90 4e       	sbci	r25, 0xE0	; 224
     f98:	58 f4       	brcc	.+22     	; 0xfb0 <OSCCAL_Calibrate+0xa8>
     f9a:	80 91 66 00 	lds	r24, 0x0066
     f9e:	8f 5f       	subi	r24, 0xFF	; 255
     fa0:	80 93 66 00 	sts	0x0066, r24
     fa4:	80 91 66 00 	lds	r24, 0x0066
     fa8:	83 17       	cp	r24, r19
     faa:	11 f0       	breq	.+4      	; 0xfb0 <OSCCAL_Calibrate+0xa8>
     fac:	41 50       	subi	r20, 0x01	; 1
     fae:	e0 f6       	brcc	.-72     	; 0xf68 <OSCCAL_Calibrate+0x60>
	}

	// Disable all timer interrupts
	TIMSK1 = 0;
     fb0:	10 92 6f 00 	sts	0x006F, r1
	TIMSK2 = 0;
     fb4:	10 92 70 00 	sts	0x0070, r1
    
	// Stop the timers
	TCCR1B = 0x00;
     fb8:	10 92 81 00 	sts	0x0081, r1
	TCCR2A = 0x00;
     fbc:	10 92 b0 00 	sts	0x00B0, r1

	// Turn off timer 2 asynchronous mode
	ASSR  &= ~(1 << AS2);
     fc0:	80 91 b6 00 	lds	r24, 0x00B6
     fc4:	87 7f       	andi	r24, 0xF7	; 247
     fc6:	80 93 b6 00 	sts	0x00B6, r24

	// Restore SREG
	SREG = SREG_Backup;
     fca:	5f bf       	out	0x3f, r21	; 63
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <__vector_5>:
        
	return;
}

ISR(TIMER2_OVF_vect, ISR_BLOCK) // Occurs 32768/256 timers per second, or 128Hz
{
     fd2:	1f 92       	push	r1
     fd4:	0f 92       	push	r0
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	0f 92       	push	r0
     fda:	11 24       	eor	r1, r1
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
	// Stop timer 1 so it can be read
	TCCR1B = 0x00;
     fe0:	10 92 81 00 	sts	0x0081, r1
    
	// Record timer 1's value
	ActualCount = TCNT1;
     fe4:	80 91 84 00 	lds	r24, 0x0084
     fe8:	90 91 85 00 	lds	r25, 0x0085
     fec:	90 93 05 01 	sts	0x0105, r25
     ff0:	80 93 04 01 	sts	0x0104, r24
	     
	// Reset counters and restart timer 1
	TCNT1  = 0;
     ff4:	10 92 85 00 	sts	0x0085, r1
     ff8:	10 92 84 00 	sts	0x0084, r1
	TCNT2  = 0;
     ffc:	10 92 b2 00 	sts	0x00B2, r1
	TCCR1B = (1 << CS10);
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	80 93 81 00 	sts	0x0081, r24
    1006:	9f 91       	pop	r25
    1008:	8f 91       	pop	r24
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <LCD_Init>:

void LCD_Init(void)
{
	// Set the initial contrast level to maximum:
	LCDCCR = 0x0F;
    1014:	8f e0       	ldi	r24, 0x0F	; 15
    1016:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all segment pins:
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
    101a:	87 eb       	ldi	r24, 0xB7	; 183
    101c:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32Hz:
    LCDFRR  = (7<<LCDCD0);    
    1020:	87 e0       	ldi	r24, 0x07	; 7
    1022:	80 93 e6 00 	sts	0x00E6, r24

	// Enable LCD and set low power waveform, enable start of frame interrupt:
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB) | (1<<LCDIE);
    1026:	88 ec       	ldi	r24, 0xC8	; 200
    1028:	80 93 e4 00 	sts	0x00E4, r24
    102c:	08 95       	ret

0000102e <LCD_puts>:
}

void LCD_puts_f(const uint8_t *FlashData)
{
	uint8_t StrBuff[LCD_TEXTBUFFER_SIZE];

	strcpy_P(StrBuff, FlashData);
	LCD_puts(StrBuff);
}

void LCD_puts(const uint8_t *Data)
{
    102e:	dc 01       	movw	r26, r24
	uint8_t LoadB;
	
	for (LoadB = 0; LoadB < 20; LoadB++)
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	3f ef       	ldi	r19, 0xFF	; 255
    1034:	e6 e0       	ldi	r30, 0x06	; 6
    1036:	f1 e0       	ldi	r31, 0x01	; 1
	{
		uint8_t CByte = *(Data++);
    1038:	9d 91       	ld	r25, X+
	
		if ((CByte >= '*') && (CByte <= 'z') && (CByte != ' '))
    103a:	89 2f       	mov	r24, r25
    103c:	8a 52       	subi	r24, 0x2A	; 42
    103e:	81 35       	cpi	r24, 0x51	; 81
    1040:	10 f4       	brcc	.+4      	; 0x1046 <LCD_puts+0x18>
		  TextBuffer[LoadB] = (CByte - '*');
    1042:	80 83       	st	Z, r24
    1044:	03 c0       	rjmp	.+6      	; 0x104c <LCD_puts+0x1e>
		else if (CByte == 0x00)
    1046:	99 23       	and	r25, r25
    1048:	29 f0       	breq	.+10     	; 0x1054 <LCD_puts+0x26>
		  break;
		else
		  TextBuffer[LoadB] = 0xFF;		
    104a:	30 83       	st	Z, r19
    104c:	2f 5f       	subi	r18, 0xFF	; 255
    104e:	31 96       	adiw	r30, 0x01	; 1
    1050:	24 31       	cpi	r18, 0x14	; 20
    1052:	90 f3       	brcs	.-28     	; 0x1038 <LCD_puts+0xa>
	}

	ScrollMode  = ((LoadB > 6)? TRUE : FALSE);
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	27 30       	cpi	r18, 0x07	; 7
    1058:	08 f0       	brcs	.+2      	; 0x105c <LCD_puts+0x2e>
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	80 93 37 01 	sts	0x0137, r24
	ScrollCount = 0;
    1060:	10 92 38 01 	sts	0x0138, r1
    1064:	9f ef       	ldi	r25, 0xFF	; 255
    1066:	86 e0       	ldi	r24, 0x06	; 6

	for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
		TextBuffer[LoadB++] = 0xFF;
    1068:	e2 2f       	mov	r30, r18
    106a:	ff 27       	eor	r31, r31
    106c:	ea 5f       	subi	r30, 0xFA	; 250
    106e:	fe 4f       	sbci	r31, 0xFE	; 254
    1070:	90 83       	st	Z, r25
    1072:	2f 5f       	subi	r18, 0xFF	; 255
    1074:	81 50       	subi	r24, 0x01	; 1
    1076:	87 ff       	sbrs	r24, 7
    1078:	f7 cf       	rjmp	.-18     	; 0x1068 <LCD_puts+0x3a>
	
	TextBuffer[LoadB] = 0x00;
    107a:	e2 2f       	mov	r30, r18
    107c:	ff 27       	eor	r31, r31
    107e:	ea 5f       	subi	r30, 0xFA	; 250
    1080:	fe 4f       	sbci	r31, 0xFE	; 254
    1082:	10 82       	st	Z, r1
	StrStart   = 0;
    1084:	10 92 35 01 	sts	0x0135, r1
	StrEnd     = LoadB;	
    1088:	20 93 36 01 	sts	0x0136, r18
	DelayCount = LCD_DELAYCOUNT_DEFAULT;
    108c:	8a e0       	ldi	r24, 0x0A	; 10
    108e:	80 93 39 01 	sts	0x0139, r24

	UpdateLCD  = TRUE;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	80 93 3a 01 	sts	0x013A, r24
    1098:	08 95       	ret

0000109a <LCD_puts_f>:
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	64 97       	sbiw	r28, 0x14	; 20
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	bc 01       	movw	r22, r24
    10b0:	ce 01       	movw	r24, r28
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	0e 94 19 1a 	call	0x3432 <strcpy_P>
    10b8:	ce 01       	movw	r24, r28
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	0e 94 17 08 	call	0x102e <LCD_puts>
    10c0:	64 96       	adiw	r28, 0x14	; 20
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <LCD_WriteChar>:
}

void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit)
{
    10d2:	e8 2f       	mov	r30, r24
	uint16_t SegData  = 0x00;
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1));
    10d8:	86 2f       	mov	r24, r22
    10da:	86 95       	lsr	r24
    10dc:	a8 2f       	mov	r26, r24
    10de:	bb 27       	eor	r27, r27
    10e0:	af 5d       	subi	r26, 0xDF	; 223
    10e2:	be 4f       	sbci	r27, 0xFE	; 254

	if (Byte != 0xFF)
    10e4:	ef 3f       	cpi	r30, 0xFF	; 255
    10e6:	39 f0       	breq	.+14     	; 0x10f6 <LCD_WriteChar+0x24>
	  SegData = pgm_read_word(&LCD_SegTable[Byte]);	
    10e8:	ff 27       	eor	r31, r31
    10ea:	ee 0f       	add	r30, r30
    10ec:	ff 1f       	adc	r31, r31
    10ee:	ee 5e       	subi	r30, 0xEE	; 238
    10f0:	fc 4f       	sbci	r31, 0xFC	; 252
    10f2:	25 91       	lpm	r18, Z+
    10f4:	34 91       	lpm	r19, Z
    10f6:	77 27       	eor	r23, r23
    10f8:	61 70       	andi	r22, 0x01	; 1
    10fa:	70 70       	andi	r23, 0x00	; 0
    10fc:	43 e0       	ldi	r20, 0x03	; 3

	for (uint8_t BNib = 0; BNib < 4; BNib++)
	{
		uint8_t Mask          = 0xF0;
    10fe:	50 ef       	ldi	r21, 0xF0	; 240
		uint8_t MaskedSegData = (SegData & 0x0000F);
    1100:	92 2f       	mov	r25, r18
    1102:	9f 70       	andi	r25, 0x0F	; 15
	
		if (Digit & 0x01)
    1104:	61 15       	cp	r22, r1
    1106:	71 05       	cpc	r23, r1
    1108:	19 f0       	breq	.+6      	; 0x1110 <LCD_WriteChar+0x3e>
		{
			Mask = 0x0F;
    110a:	5f e0       	ldi	r21, 0x0F	; 15
			MaskedSegData <<= 4;
    110c:	92 95       	swap	r25
    110e:	90 7f       	andi	r25, 0xF0	; 240
		}
		
		*BuffPtr = ((*BuffPtr & Mask) | MaskedSegData);
    1110:	8c 91       	ld	r24, X
    1112:	85 23       	and	r24, r21
    1114:	89 2b       	or	r24, r25
    1116:	8c 93       	st	X, r24

		SegData >>= 4;
    1118:	84 e0       	ldi	r24, 0x04	; 4
    111a:	36 95       	lsr	r19
    111c:	27 95       	ror	r18
    111e:	8a 95       	dec	r24
    1120:	e1 f7       	brne	.-8      	; 0x111a <LCD_WriteChar+0x48>
		BuffPtr  += 5;
    1122:	15 96       	adiw	r26, 0x05	; 5
    1124:	41 50       	subi	r20, 0x01	; 1
    1126:	47 ff       	sbrs	r20, 7
    1128:	ea cf       	rjmp	.-44     	; 0x10fe <LCD_WriteChar+0x2c>
    112a:	08 95       	ret

0000112c <__vector_22>:
	}
}

ISR(LCD_vect, ISR_NOBLOCK)
{
    112c:	78 94       	sei
    112e:	1f 92       	push	r1
    1130:	0f 92       	push	r0
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	0f 92       	push	r0
    1136:	11 24       	eor	r1, r1
    1138:	2f 93       	push	r18
    113a:	3f 93       	push	r19
    113c:	4f 93       	push	r20
    113e:	5f 93       	push	r21
    1140:	6f 93       	push	r22
    1142:	7f 93       	push	r23
    1144:	8f 93       	push	r24
    1146:	9f 93       	push	r25
    1148:	af 93       	push	r26
    114a:	bf 93       	push	r27
    114c:	cf 93       	push	r28
    114e:	ef 93       	push	r30
    1150:	ff 93       	push	r31
	if (ScrollMode)
    1152:	80 91 37 01 	lds	r24, 0x0137
    1156:	88 23       	and	r24, r24
    1158:	99 f0       	breq	.+38     	; 0x1180 <__vector_22+0x54>
	{
		if (DelayCount)
    115a:	80 91 39 01 	lds	r24, 0x0139
    115e:	88 23       	and	r24, r24
    1160:	21 f0       	breq	.+8      	; 0x116a <__vector_22+0x3e>
		{
			DelayCount--;
    1162:	81 50       	subi	r24, 0x01	; 1
    1164:	80 93 39 01 	sts	0x0139, r24
    1168:	0b c0       	rjmp	.+22     	; 0x1180 <__vector_22+0x54>
		}
		else
		{
			if (!(ScrollCount))
    116a:	80 91 38 01 	lds	r24, 0x0138
    116e:	88 23       	and	r24, r24
    1170:	21 f4       	brne	.+8      	; 0x117a <__vector_22+0x4e>
			  UpdateLCD = TRUE;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	80 93 3a 01 	sts	0x013A, r24
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <__vector_22+0x54>
			else
			  ScrollCount--;
    117a:	81 50       	subi	r24, 0x01	; 1
    117c:	80 93 38 01 	sts	0x0138, r24
		}
	}

	if (UpdateLCD)
    1180:	80 91 3a 01 	lds	r24, 0x013A
    1184:	88 23       	and	r24, r24
    1186:	39 f1       	breq	.+78     	; 0x11d6 <__vector_22+0xaa>
	{
		for (uint8_t Character = 0; Character < 6; Character++)
    1188:	c0 e0       	ldi	r28, 0x00	; 0
		{
			uint8_t Byte = (StrStart + Character);
    118a:	80 91 35 01 	lds	r24, 0x0135
    118e:	8c 0f       	add	r24, r28

			if (Byte >= StrEnd)
    1190:	90 91 36 01 	lds	r25, 0x0136
    1194:	e8 2f       	mov	r30, r24
    1196:	ff 27       	eor	r31, r31
    1198:	89 17       	cp	r24, r25
    119a:	10 f0       	brcs	.+4      	; 0x11a0 <__vector_22+0x74>
			  Byte = TextBuffer[Byte - StrEnd];
    119c:	e9 1b       	sub	r30, r25
    119e:	f1 09       	sbc	r31, r1
			else
			  Byte = TextBuffer[Byte];
    11a0:	ea 5f       	subi	r30, 0xFA	; 250
    11a2:	fe 4f       	sbci	r31, 0xFE	; 254
    11a4:	80 81       	ld	r24, Z
			
			LCD_WriteChar(Byte, Character);
    11a6:	6c 2f       	mov	r22, r28
    11a8:	0e 94 69 08 	call	0x10d2 <LCD_WriteChar>
    11ac:	cf 5f       	subi	r28, 0xFF	; 255
    11ae:	c6 30       	cpi	r28, 0x06	; 6
    11b0:	60 f3       	brcs	.-40     	; 0x118a <__vector_22+0x5e>
		}
		
		if (StrStart++ == StrEnd)
    11b2:	80 91 35 01 	lds	r24, 0x0135
    11b6:	98 2f       	mov	r25, r24
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
    11ba:	80 93 35 01 	sts	0x0135, r24
    11be:	80 91 36 01 	lds	r24, 0x0136
    11c2:	98 17       	cp	r25, r24
    11c4:	19 f4       	brne	.+6      	; 0x11cc <__vector_22+0xa0>
		  StrStart = 1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	80 93 35 01 	sts	0x0135, r24
		
		ScrollCount = LCD_SCROLLCOUNT_DEFAULT;
    11cc:	83 e0       	ldi	r24, 0x03	; 3
    11ce:	80 93 38 01 	sts	0x0138, r24
		UpdateLCD = FALSE;
    11d2:	10 92 3a 01 	sts	0x013A, r1
    11d6:	ac ee       	ldi	r26, 0xEC	; 236
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e1 e2       	ldi	r30, 0x21	; 33
    11dc:	f1 e0       	ldi	r31, 0x01	; 1
    11de:	93 e1       	ldi	r25, 0x13	; 19
	}

	for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++)
	  *(pLCDREG + LCDChar) = SegBuffer[LCDChar];
    11e0:	81 91       	ld	r24, Z+
    11e2:	8d 93       	st	X+, r24
    11e4:	91 50       	subi	r25, 0x01	; 1
    11e6:	97 ff       	sbrs	r25, 7
    11e8:	fb cf       	rjmp	.-10     	; 0x11e0 <__vector_22+0xb4>
    11ea:	ff 91       	pop	r31
    11ec:	ef 91       	pop	r30
    11ee:	cf 91       	pop	r28
    11f0:	bf 91       	pop	r27
    11f2:	af 91       	pop	r26
    11f4:	9f 91       	pop	r25
    11f6:	8f 91       	pop	r24
    11f8:	7f 91       	pop	r23
    11fa:	6f 91       	pop	r22
    11fc:	5f 91       	pop	r21
    11fe:	4f 91       	pop	r20
    1200:	3f 91       	pop	r19
    1202:	2f 91       	pop	r18
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	0f 90       	pop	r0
    120a:	1f 90       	pop	r1
    120c:	18 95       	reti

0000120e <USART_Init>:
*****************************************************************************/
void USART_Init(void)
{
    // Set baud rate
    UBRRH = (uint8_t)(USART_BAUDVALUE >> 8);
    120e:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = (uint8_t)(USART_BAUDVALUE);
    1212:	87 e0       	ldi	r24, 0x07	; 7
    1214:	80 93 c4 00 	sts	0x00C4, r24

    // Double speed
	UCSRA = (USART_DOUBLESPEED << U2X);
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	80 93 c0 00 	sts	0x00C0, r24

    // Enable recieve complete interrupt
	UCSRB = (1 << RXCIE);
    121e:	80 e8       	ldi	r24, 0x80	; 128
    1220:	80 93 c1 00 	sts	0x00C1, r24
	 
    // Async. mode, 8N1
    UCSRC = (3 << UCSZ0);
    1224:	86 e0       	ldi	r24, 0x06	; 6
    1226:	80 93 c2 00 	sts	0x00C2, r24
	 
	 // Initalise ringbuffer
	BUFF_InitialiseBuffer();
    122a:	0e 94 9d 0b 	call	0x173a <BUFF_InitialiseBuffer>
    122e:	08 95       	ret

00001230 <USART_Tx>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_Tx(const char data)
{
    1230:	98 2f       	mov	r25, r24
    while (!(UCSRA & (1 << UDRE)));
    1232:	80 91 c0 00 	lds	r24, 0x00C0
    1236:	85 ff       	sbrs	r24, 5
    1238:	fc cf       	rjmp	.-8      	; 0x1232 <USART_Tx+0x2>
    UDR = data;
    123a:	90 93 c6 00 	sts	0x00C6, r25
    123e:	08 95       	ret

00001240 <USART_Rx>:
}

/*****************************************************************************
*
*   Function name : Usart_Rx
*
*   Returns :       char: byte received
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART
*
*****************************************************************************/
char USART_Rx(void)
{
    while (!(BuffElements) && !(PacketTimeOut)) {};
    1240:	80 91 b3 02 	lds	r24, 0x02B3
    1244:	88 23       	and	r24, r24
    1246:	21 f4       	brne	.+8      	; 0x1250 <USART_Rx+0x10>
    1248:	80 91 3f 01 	lds	r24, 0x013F
    124c:	88 23       	and	r24, r24
    124e:	c1 f3       	breq	.-16     	; 0x1240 <USART_Rx>
    return BUFF_GetBuffByte();
    1250:	0e 94 aa 0b 	call	0x1754 <BUFF_GetBuffByte>
}
    1254:	99 27       	eor	r25, r25
    1256:	08 95       	ret

00001258 <SPI_SPIInit>:
// ======================================================================================

void SPI_SPIInit(void)
{
	PRR &= ~(1 << PRSPI);              // Enable the SPI system by clearing the power save register SPI disable bit
    1258:	80 91 64 00 	lds	r24, 0x0064
    125c:	8b 7f       	andi	r24, 0xFB	; 251
    125e:	80 93 64 00 	sts	0x0064, r24

	// Master, Sample falling edge (setup rising), Fosc/2 speed (8Mhz/2 = 4MHz)
	SPSR = (1 << SPI2X);
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	8d bd       	out	0x2d, r24	; 45
	SPCR = ((1 << SPE) | (1 << MSTR) | (1 << CPHA) | (1 << CPOL));
    1266:	8c e5       	ldi	r24, 0x5C	; 92
    1268:	8c bd       	out	0x2c, r24	; 44
    126a:	08 95       	ret

0000126c <SPI_SPITransmit>:
}

uint8_t SPI_SPITransmit(const uint8_t Data)
{
	SPDR = Data;                       // Loading a byte into the register starts the transmission
    126c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));    // Wait until transmission completed
    126e:	0d b4       	in	r0, 0x2d	; 45
    1270:	07 fe       	sbrs	r0, 7
    1272:	fd cf       	rjmp	.-6      	; 0x126e <SPI_SPITransmit+0x2>
	return SPDR;
    1274:	8e b5       	in	r24, 0x2e	; 46
}
    1276:	99 27       	eor	r25, r25
    1278:	08 95       	ret

0000127a <SPI_SPITransmitWord>:

uint8_t SPI_SPITransmitWord(const uint16_t Data)
{
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	8c 01       	movw	r16, r24
	SPI_SPITransmit((uint8_t)(Data >> 8));
    1280:	81 2f       	mov	r24, r17
    1282:	99 27       	eor	r25, r25
    1284:	0e 94 36 09 	call	0x126c <SPI_SPITransmit>
	return SPI_SPITransmit((uint8_t)Data);
    1288:	80 2f       	mov	r24, r16
    128a:	0e 94 36 09 	call	0x126c <SPI_SPITransmit>
}
    128e:	99 27       	eor	r25, r25
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <__vector_17>:
 *  have to stop the timer tick.
 *  For all modes the USIDR contents are stored and flags are updated.
 */
ISR(USI_OVERFLOW_vect, ISR_BLOCK)
{
    1296:	1f 92       	push	r1
    1298:	0f 92       	push	r0
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	0f 92       	push	r0
    129e:	11 24       	eor	r1, r1
    12a0:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	TIMSK0 &= ~(1<<OCIE0A);
    12a2:	80 91 6e 00 	lds	r24, 0x006E
    12a6:	8d 7f       	andi	r24, 0xFD	; 253
    12a8:	80 93 6e 00 	sts	0x006E, r24
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
    12ac:	80 e4       	ldi	r24, 0x40	; 64
    12ae:	80 93 b9 00 	sts	0x00B9, r24
	TransferComplete = 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	80 93 63 02 	sts	0x0263, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
    12b8:	80 91 ba 00 	lds	r24, 0x00BA
    12bc:	80 93 64 02 	sts	0x0264, r24
    12c0:	8f 91       	pop	r24
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <USI_SPISetSpeed>:
}



/*! \brief  Initialize USI as SPI master.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from slave to master mode.
 *  Note that the stored USIDR value is cleared.
 *
 */
void USI_SPIInitMaster(const uint8_t Freq)
{
	// Configure port directions.
 	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN);  // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                       // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                        // Pull-ups.
	USI_OUT_REG &= ~(1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Pull-ups.
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = USI_CONTROL_REG_FLAGS;

	// Set the compare and prescaler for the requested frequency:
	USI_SPISetSpeed(Freq);
	
	// Init driver status register.
	TransferComplete = 0;
	
	storedUSIDR = 0;
}

void USI_SPIOff(void)
{
	USI_DIR_REG &= ~((1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN));                        // Inputs.
	USI_OUT_REG &= ~((1<<USI_DATAIN_PIN)  | (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN)); // Pull-ups.
	DDRF  &= ~(1 << 6);
	PORTF &= ~(1 << 6);
	
	USI_STOPUSITIMER();
}

/*! \brief  Put one byte on bus.
 *
 *  Use this function like you would write to the SPDR register in the native SPI module.
 *  Calling this function in master mode starts a transfer, while in slave mode, a
 *  byte will be prepared for the next transfer initiated by the master device.
 *  If a transfer is in progress, this function will set the write collision flag
 *  and return without altering the data registers.
 *
 *  \returns  Value returned by slave.
 */
uint8_t USI_SPITransmit(uint8_t val)
{
	// Reinit flags.
	TransferComplete = 0;

	// Put data in USI data register.
	USIDR = val;
	
	TIFR0  |= (1<<OCF0A);  // Clear compare match flag.
	TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.

	// Clear the timer 0 value
	TCNT0 = 0;

	while (!(TransferComplete));

	return storedUSIDR;
}

uint8_t USI_SPITransmitWord(const uint16_t val )
{
	USI_SPITransmit((uint8_t)(val >> 8));
	return USI_SPITransmit((uint8_t)val);
}

void USI_SPIToggleClock(void)
{
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);	
}

void USI_SPISetSpeed(const uint8_t Freq)
{
    12cc:	48 2f       	mov	r20, r24
	for (uint8_t MatchIndex = 0; MatchIndex < USI_PRESET_SPEEDS; MatchIndex++)
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	6f e7       	ldi	r22, 0x7F	; 127
    12d2:	73 e0       	ldi	r23, 0x03	; 3
    12d4:	9b 01       	movw	r18, r22
    12d6:	21 50       	subi	r18, 0x01	; 1
    12d8:	30 40       	sbci	r19, 0x00	; 0
	{
		if ((pgm_read_byte(&USIPSValues[MatchIndex][0]) == Freq) || (MatchIndex == (USI_PRESET_SPEEDS - 1)))
    12da:	f9 01       	movw	r30, r18
    12dc:	84 91       	lpm	r24, Z
    12de:	84 17       	cp	r24, r20
    12e0:	11 f0       	breq	.+4      	; 0x12e6 <USI_SPISetSpeed+0x1a>
    12e2:	93 30       	cpi	r25, 0x03	; 3
    12e4:	31 f4       	brne	.+12     	; 0x12f2 <USI_SPISetSpeed+0x26>
		{
			// Init Output Compare Register.
			OCR0A = pgm_read_byte(&USIPSValues[MatchIndex][1]);
    12e6:	fb 01       	movw	r30, r22
    12e8:	84 91       	lpm	r24, Z
    12ea:	87 bd       	out	0x27, r24	; 39

			// Enable 'Clear Timer on Compare match' and set prescaler, which starts the timer
			TCCR0A = ((1<<WGM01) | TC0_PS_1);
    12ec:	89 e0       	ldi	r24, 0x09	; 9
    12ee:	84 bd       	out	0x24, r24	; 36
				
			return;
    12f0:	08 95       	ret
    12f2:	9f 5f       	subi	r25, 0xFF	; 255
    12f4:	2e 5f       	subi	r18, 0xFE	; 254
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	6e 5f       	subi	r22, 0xFE	; 254
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	94 30       	cpi	r25, 0x04	; 4
    12fe:	68 f3       	brcs	.-38     	; 0x12da <USI_SPISetSpeed+0xe>
    1300:	08 95       	ret

00001302 <USI_SPIInitMaster>:
    1302:	9d b1       	in	r25, 0x0d	; 13
    1304:	90 65       	ori	r25, 0x50	; 80
    1306:	9d b9       	out	0x0d, r25	; 13
    1308:	6d 98       	cbi	0x0d, 5	; 13
    130a:	75 9a       	sbi	0x0e, 5	; 14
    130c:	76 98       	cbi	0x0e, 6	; 14
    130e:	9a e5       	ldi	r25, 0x5A	; 90
    1310:	90 93 b8 00 	sts	0x00B8, r25
    1314:	0e 94 66 09 	call	0x12cc <USI_SPISetSpeed>
    1318:	10 92 63 02 	sts	0x0263, r1
    131c:	10 92 64 02 	sts	0x0264, r1
    1320:	08 95       	ret

00001322 <USI_SPIOff>:
    1322:	8d b1       	in	r24, 0x0d	; 13
    1324:	8f 7a       	andi	r24, 0xAF	; 175
    1326:	8d b9       	out	0x0d, r24	; 13
    1328:	8e b1       	in	r24, 0x0e	; 14
    132a:	8f 78       	andi	r24, 0x8F	; 143
    132c:	8e b9       	out	0x0e, r24	; 14
    132e:	86 98       	cbi	0x10, 6	; 16
    1330:	8e 98       	cbi	0x11, 6	; 17
    1332:	14 bc       	out	0x24, r1	; 36
    1334:	08 95       	ret

00001336 <USI_SPITransmit>:
    1336:	10 92 63 02 	sts	0x0263, r1
    133a:	80 93 ba 00 	sts	0x00BA, r24
    133e:	a9 9a       	sbi	0x15, 1	; 21
    1340:	80 91 6e 00 	lds	r24, 0x006E
    1344:	82 60       	ori	r24, 0x02	; 2
    1346:	80 93 6e 00 	sts	0x006E, r24
    134a:	16 bc       	out	0x26, r1	; 38
    134c:	80 91 63 02 	lds	r24, 0x0263
    1350:	88 23       	and	r24, r24
    1352:	e1 f3       	breq	.-8      	; 0x134c <USI_SPITransmit+0x16>
    1354:	80 91 64 02 	lds	r24, 0x0264
    1358:	99 27       	eor	r25, r25
    135a:	08 95       	ret

0000135c <USI_SPITransmitWord>:
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	8c 01       	movw	r16, r24
    1362:	81 2f       	mov	r24, r17
    1364:	99 27       	eor	r25, r25
    1366:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    136a:	80 2f       	mov	r24, r16
    136c:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    1370:	99 27       	eor	r25, r25
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	08 95       	ret

00001378 <USI_SPIToggleClock>:
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    137e:	80 91 b8 00 	lds	r24, 0x00B8
    1382:	81 60       	ori	r24, 0x01	; 1
    1384:	80 93 b8 00 	sts	0x00B8, r24
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    138e:	80 91 b8 00 	lds	r24, 0x00B8
    1392:	81 60       	ori	r24, 0x01	; 1
    1394:	80 93 b8 00 	sts	0x00B8, r24
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    139e:	08 95       	ret

000013a0 <DF_EnableDataflash>:
	DF_WaitWhileBusy();
}

void DF_EnableDataflash(const uint8_t Enabled)
{
    13a0:	90 91 65 02 	lds	r25, 0x0265
	if (Enabled == TRUE)
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	31 f4       	brne	.+12     	; 0x13b4 <DF_EnableDataflash+0x14>
	{
		if (UseExernalDF == TRUE)
    13a8:	91 30       	cpi	r25, 0x01	; 1
    13aa:	11 f4       	brne	.+4      	; 0x13b0 <DF_EnableDataflash+0x10>
		  MAIN_ResetCSLine(MAIN_RESETCS_EXTDFACTIVE);
    13ac:	82 e0       	ldi	r24, 0x02	; 2
    13ae:	05 c0       	rjmp	.+10     	; 0x13ba <DF_EnableDataflash+0x1a>
		else
		  PORTB &= ~(1 << 0);
    13b0:	28 98       	cbi	0x05, 0	; 5
    13b2:	08 95       	ret
	}
	else
	{
		if (UseExernalDF == TRUE)
    13b4:	91 30       	cpi	r25, 0x01	; 1
    13b6:	21 f4       	brne	.+8      	; 0x13c0 <DF_EnableDataflash+0x20>
		  MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE);
    13b8:	89 2f       	mov	r24, r25
    13ba:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
    13be:	08 95       	ret
		else
		  PORTB |= (1 << 0);
    13c0:	28 9a       	sbi	0x05, 0	; 5
    13c2:	08 95       	ret

000013c4 <DF_ReadBufferByte>:
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	7c 01       	movw	r14, r24
    13ce:	00 91 00 01 	lds	r16, 0x0100
    13d2:	10 91 01 01 	lds	r17, 0x0101
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    13e2:	84 e5       	ldi	r24, 0x54	; 84
    13e4:	f8 01       	movw	r30, r16
    13e6:	09 95       	icall
    13e8:	8f 2d       	mov	r24, r15
    13ea:	99 27       	eor	r25, r25
    13ec:	f8 01       	movw	r30, r16
    13ee:	09 95       	icall
    13f0:	8e 2d       	mov	r24, r14
    13f2:	f8 01       	movw	r30, r16
    13f4:	09 95       	icall
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	f8 01       	movw	r30, r16
    13fa:	09 95       	icall
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	f8 01       	movw	r30, r16
    1400:	09 95       	icall
    1402:	99 27       	eor	r25, r25
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	08 95       	ret

0000140e <DF_ContinuousReadEnable>:
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	8c 01       	movw	r16, r24
    141c:	7b 01       	movw	r14, r22
    141e:	c0 91 00 01 	lds	r28, 0x0100
    1422:	d0 91 01 01 	lds	r29, 0x0101
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    1432:	88 e6       	ldi	r24, 0x68	; 104
    1434:	fe 01       	movw	r30, r28
    1436:	09 95       	icall
    1438:	8a b5       	in	r24, 0x2a	; 42
    143a:	98 01       	movw	r18, r16
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DF_ContinuousReadEnable+0x34>
    143e:	36 95       	lsr	r19
    1440:	27 95       	ror	r18
    1442:	8a 95       	dec	r24
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DF_ContinuousReadEnable+0x30>
    1446:	c9 01       	movw	r24, r18
    1448:	fe 01       	movw	r30, r28
    144a:	09 95       	icall
    144c:	8b b5       	in	r24, 0x2b	; 43
    144e:	98 01       	movw	r18, r16
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DF_ContinuousReadEnable+0x48>
    1452:	22 0f       	add	r18, r18
    1454:	33 1f       	adc	r19, r19
    1456:	8a 95       	dec	r24
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DF_ContinuousReadEnable+0x44>
    145a:	8f 2d       	mov	r24, r15
    145c:	99 27       	eor	r25, r25
    145e:	82 0f       	add	r24, r18
    1460:	fe 01       	movw	r30, r28
    1462:	09 95       	icall
    1464:	8e 2d       	mov	r24, r14
    1466:	fe 01       	movw	r30, r28
    1468:	09 95       	icall
    146a:	03 e0       	ldi	r16, 0x03	; 3
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	fe 01       	movw	r30, r28
    1470:	09 95       	icall
    1472:	01 50       	subi	r16, 0x01	; 1
    1474:	07 ff       	sbrs	r16, 7
    1476:	fa cf       	rjmp	.-12     	; 0x146c <DF_ContinuousReadEnable+0x5e>
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	ff 90       	pop	r15
    1482:	ef 90       	pop	r14
    1484:	08 95       	ret

00001486 <DF_BufferWriteEnable>:
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	7c 01       	movw	r14, r24
    1490:	00 91 00 01 	lds	r16, 0x0100
    1494:	10 91 01 01 	lds	r17, 0x0101
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    14a4:	84 e8       	ldi	r24, 0x84	; 132
    14a6:	f8 01       	movw	r30, r16
    14a8:	09 95       	icall
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	f8 01       	movw	r30, r16
    14ae:	09 95       	icall
    14b0:	8f 2d       	mov	r24, r15
    14b2:	99 27       	eor	r25, r25
    14b4:	f8 01       	movw	r30, r16
    14b6:	09 95       	icall
    14b8:	8e 2d       	mov	r24, r14
    14ba:	f8 01       	movw	r30, r16
    14bc:	09 95       	icall
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	08 95       	ret

000014c8 <DF_WaitWhileBusy>:
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	c0 91 00 01 	lds	r28, 0x0100
    14d0:	d0 91 01 01 	lds	r29, 0x0101
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    14e0:	87 e5       	ldi	r24, 0x57	; 87
    14e2:	fe 01       	movw	r30, r28
    14e4:	09 95       	icall
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	fe 01       	movw	r30, r28
    14ea:	09 95       	icall
    14ec:	88 23       	and	r24, r24
    14ee:	dc f7       	brge	.-10     	; 0x14e6 <DF_WaitWhileBusy+0x1e>
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <DF_EraseBlock>:
    14f6:	ef 92       	push	r14
    14f8:	ff 92       	push	r15
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	7c 01       	movw	r14, r24
    1500:	00 91 00 01 	lds	r16, 0x0100
    1504:	10 91 01 01 	lds	r17, 0x0101
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    1514:	80 e5       	ldi	r24, 0x50	; 80
    1516:	f8 01       	movw	r30, r16
    1518:	09 95       	icall
    151a:	8f 2d       	mov	r24, r15
    151c:	99 27       	eor	r25, r25
    151e:	f8 01       	movw	r30, r16
    1520:	09 95       	icall
    1522:	8e 2d       	mov	r24, r14
    1524:	f8 01       	movw	r30, r16
    1526:	09 95       	icall
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	f8 01       	movw	r30, r16
    152c:	09 95       	icall
    152e:	0e 94 64 0a 	call	0x14c8 <DF_WaitWhileBusy>
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	ff 90       	pop	r15
    1538:	ef 90       	pop	r14
    153a:	08 95       	ret

0000153c <DF_CopyFlashPageToBuffer>:
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	7c 01       	movw	r14, r24
    1546:	00 91 00 01 	lds	r16, 0x0100
    154a:	10 91 01 01 	lds	r17, 0x0101
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    155a:	83 e5       	ldi	r24, 0x53	; 83
    155c:	f8 01       	movw	r30, r16
    155e:	09 95       	icall
    1560:	8a b5       	in	r24, 0x2a	; 42
    1562:	97 01       	movw	r18, r14
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DF_CopyFlashPageToBuffer+0x2e>
    1566:	36 95       	lsr	r19
    1568:	27 95       	ror	r18
    156a:	8a 95       	dec	r24
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <DF_CopyFlashPageToBuffer+0x2a>
    156e:	c9 01       	movw	r24, r18
    1570:	f8 01       	movw	r30, r16
    1572:	09 95       	icall
    1574:	8b b5       	in	r24, 0x2b	; 43
    1576:	02 c0       	rjmp	.+4      	; 0x157c <DF_CopyFlashPageToBuffer+0x40>
    1578:	ee 0c       	add	r14, r14
    157a:	ff 1c       	adc	r15, r15
    157c:	8a 95       	dec	r24
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <DF_CopyFlashPageToBuffer+0x3c>
    1580:	c7 01       	movw	r24, r14
    1582:	f8 01       	movw	r30, r16
    1584:	09 95       	icall
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	f8 01       	movw	r30, r16
    158a:	09 95       	icall
    158c:	0e 94 64 0a 	call	0x14c8 <DF_WaitWhileBusy>
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	08 95       	ret

0000159a <DF_CopyBufferToFlashPage>:
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	7c 01       	movw	r14, r24
    15a4:	00 91 00 01 	lds	r16, 0x0100
    15a8:	10 91 01 01 	lds	r17, 0x0101
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    15b8:	83 e8       	ldi	r24, 0x83	; 131
    15ba:	f8 01       	movw	r30, r16
    15bc:	09 95       	icall
    15be:	8a b5       	in	r24, 0x2a	; 42
    15c0:	97 01       	movw	r18, r14
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DF_CopyBufferToFlashPage+0x2e>
    15c4:	36 95       	lsr	r19
    15c6:	27 95       	ror	r18
    15c8:	8a 95       	dec	r24
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <DF_CopyBufferToFlashPage+0x2a>
    15cc:	c9 01       	movw	r24, r18
    15ce:	f8 01       	movw	r30, r16
    15d0:	09 95       	icall
    15d2:	8b b5       	in	r24, 0x2b	; 43
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DF_CopyBufferToFlashPage+0x40>
    15d6:	ee 0c       	add	r14, r14
    15d8:	ff 1c       	adc	r15, r15
    15da:	8a 95       	dec	r24
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <DF_CopyBufferToFlashPage+0x3c>
    15de:	c7 01       	movw	r24, r14
    15e0:	f8 01       	movw	r30, r16
    15e2:	09 95       	icall
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	f8 01       	movw	r30, r16
    15e8:	09 95       	icall
    15ea:	0e 94 64 0a 	call	0x14c8 <DF_WaitWhileBusy>
    15ee:	1f 91       	pop	r17
    15f0:	0f 91       	pop	r16
    15f2:	ff 90       	pop	r15
    15f4:	ef 90       	pop	r14
    15f6:	08 95       	ret

000015f8 <DF_GetChipCharacteristics>:
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	00 91 00 01 	lds	r16, 0x0100
    1600:	10 91 01 01 	lds	r17, 0x0101
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    1610:	87 e5       	ldi	r24, 0x57	; 87
    1612:	f8 01       	movw	r30, r16
    1614:	09 95       	icall
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	f8 01       	movw	r30, r16
    161a:	09 95       	icall
    161c:	99 27       	eor	r25, r25
    161e:	88 73       	andi	r24, 0x38	; 56
    1620:	90 70       	andi	r25, 0x00	; 0
    1622:	43 e0       	ldi	r20, 0x03	; 3
    1624:	95 95       	asr	r25
    1626:	87 95       	ror	r24
    1628:	4a 95       	dec	r20
    162a:	e1 f7       	brne	.-8      	; 0x1624 <DF_GetChipCharacteristics+0x2c>
    162c:	99 27       	eor	r25, r25
    162e:	fc 01       	movw	r30, r24
    1630:	ea 54       	subi	r30, 0x4A	; 74
    1632:	fc 4f       	sbci	r31, 0xFC	; 252
    1634:	44 91       	lpm	r20, Z
    1636:	40 93 68 02 	sts	0x0268, r20
    163a:	9c 01       	movw	r18, r24
    163c:	28 0f       	add	r18, r24
    163e:	39 1f       	adc	r19, r25
    1640:	f9 01       	movw	r30, r18
    1642:	ea 55       	subi	r30, 0x5A	; 90
    1644:	fc 4f       	sbci	r31, 0xFC	; 252
    1646:	85 91       	lpm	r24, Z+
    1648:	94 91       	lpm	r25, Z
    164a:	90 93 6a 02 	sts	0x026A, r25
    164e:	80 93 69 02 	sts	0x0269, r24
    1652:	f9 01       	movw	r30, r18
    1654:	ea 56       	subi	r30, 0x6A	; 106
    1656:	fc 4f       	sbci	r31, 0xFC	; 252
    1658:	85 91       	lpm	r24, Z+
    165a:	94 91       	lpm	r25, Z
    165c:	90 93 6c 02 	sts	0x026C, r25
    1660:	80 93 6b 02 	sts	0x026B, r24
    1664:	80 e1       	ldi	r24, 0x10	; 16
    1666:	84 1b       	sub	r24, r20
    1668:	8a bd       	out	0x2a, r24	; 42
    166a:	48 50       	subi	r20, 0x08	; 8
    166c:	4b bd       	out	0x2b, r20	; 43
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	08 95       	ret

00001674 <DF_CheckCorrectOnboardChip>:
    1674:	0e 94 fc 0a 	call	0x15f8 <DF_GetChipCharacteristics>
    1678:	80 91 6b 02 	lds	r24, 0x026B
    167c:	90 91 6c 02 	lds	r25, 0x026C
    1680:	80 50       	subi	r24, 0x00	; 0
    1682:	98 40       	sbci	r25, 0x08	; 8
    1684:	61 f0       	breq	.+24     	; 0x169e <DF_CheckCorrectOnboardChip+0x2a>
    1686:	80 91 64 00 	lds	r24, 0x0064
    168a:	84 60       	ori	r24, 0x04	; 4
    168c:	80 93 64 00 	sts	0x0064, r24
    1690:	86 e8       	ldi	r24, 0x86	; 134
    1692:	93 e0       	ldi	r25, 0x03	; 3
    1694:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	08 95       	ret
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	08 95       	ret

000016a4 <__vector_13>:

// ======================================================================================

ISR(USART0_RX_vect, ISR_BLOCK)
{
    16a4:	1f 92       	push	r1
    16a6:	0f 92       	push	r0
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
    16ae:	2f 93       	push	r18
    16b0:	3f 93       	push	r19
    16b2:	4f 93       	push	r20
    16b4:	5f 93       	push	r21
    16b6:	6f 93       	push	r22
    16b8:	7f 93       	push	r23
    16ba:	8f 93       	push	r24
    16bc:	9f 93       	push	r25
    16be:	af 93       	push	r26
    16c0:	bf 93       	push	r27
    16c2:	ef 93       	push	r30
    16c4:	ff 93       	push	r31
	if (BuffElements == BUFF_BUFFLEN)     // Buffer full
    16c6:	80 91 b3 02 	lds	r24, 0x02B3
    16ca:	80 34       	cpi	r24, 0x40	; 64
    16cc:	29 f4       	brne	.+10     	; 0x16d8 <__vector_13+0x34>
	{
		MAIN_ShowError(PSTR("BUFF OVERFLOW"));
    16ce:	8e eb       	ldi	r24, 0xBE	; 190
    16d0:	93 e0       	ldi	r25, 0x03	; 3
    16d2:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
		return;
    16d6:	20 c0       	rjmp	.+64     	; 0x1718 <__vector_13+0x74>
	}
		
	*StoreLoc = UDR;                      // Store the data
    16d8:	e0 91 af 02 	lds	r30, 0x02AF
    16dc:	f0 91 b0 02 	lds	r31, 0x02B0
    16e0:	80 91 c6 00 	lds	r24, 0x00C6
    16e4:	80 83       	st	Z, r24

	StoreLoc++;                           // Increment the IN pointer to the next element
    16e6:	40 91 af 02 	lds	r20, 0x02AF
    16ea:	50 91 b0 02 	lds	r21, 0x02B0
    16ee:	9a 01       	movw	r18, r20
    16f0:	2f 5f       	subi	r18, 0xFF	; 255
    16f2:	3f 4f       	sbci	r19, 0xFF	; 255
    16f4:	30 93 b0 02 	sts	0x02B0, r19
    16f8:	20 93 af 02 	sts	0x02AF, r18
	BuffElements++;                       // Increment the total elements variable
    16fc:	80 91 b3 02 	lds	r24, 0x02B3
    1700:	8f 5f       	subi	r24, 0xFF	; 255
    1702:	80 93 b3 02 	sts	0x02B3, r24

	if (StoreLoc == (BuffType*)&RingBuffer[BUFF_BUFFLEN])
    1706:	2f 5a       	subi	r18, 0xAF	; 175
    1708:	32 40       	sbci	r19, 0x02	; 2
    170a:	31 f4       	brne	.+12     	; 0x1718 <__vector_13+0x74>
		StoreLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    170c:	4f 53       	subi	r20, 0x3F	; 63
    170e:	50 40       	sbci	r21, 0x00	; 0
    1710:	50 93 b0 02 	sts	0x02B0, r21
    1714:	40 93 af 02 	sts	0x02AF, r20
    1718:	ff 91       	pop	r31
    171a:	ef 91       	pop	r30
    171c:	bf 91       	pop	r27
    171e:	af 91       	pop	r26
    1720:	9f 91       	pop	r25
    1722:	8f 91       	pop	r24
    1724:	7f 91       	pop	r23
    1726:	6f 91       	pop	r22
    1728:	5f 91       	pop	r21
    172a:	4f 91       	pop	r20
    172c:	3f 91       	pop	r19
    172e:	2f 91       	pop	r18
    1730:	0f 90       	pop	r0
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	0f 90       	pop	r0
    1736:	1f 90       	pop	r1
    1738:	18 95       	reti

0000173a <BUFF_InitialiseBuffer>:
}	

// ======================================================================================

void BUFF_InitialiseBuffer(void)
{
	StoreLoc    = (BuffType*)&RingBuffer[0]; // Set up the IN pointer to the start of the buffer
    173a:	8f e6       	ldi	r24, 0x6F	; 111
    173c:	92 e0       	ldi	r25, 0x02	; 2
    173e:	90 93 b0 02 	sts	0x02B0, r25
    1742:	80 93 af 02 	sts	0x02AF, r24
	RetrieveLoc = (BuffType*)&RingBuffer[0]; // Set up the OUT pointer to the start of the buffer
    1746:	90 93 b2 02 	sts	0x02B2, r25
    174a:	80 93 b1 02 	sts	0x02B1, r24

	BuffElements = 0;                     // Reset the buffer elements counter
    174e:	10 92 b3 02 	sts	0x02B3, r1
    1752:	08 95       	ret

00001754 <BUFF_GetBuffByte>:
}

BuffType BUFF_GetBuffByte(void)
{
	if (!(BuffElements))                  // No elements in the buffer
    1754:	80 91 b3 02 	lds	r24, 0x02B3
    1758:	88 23       	and	r24, r24
    175a:	19 f4       	brne	.+6      	; 0x1762 <BUFF_GetBuffByte+0xe>
		return 0;
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	08 95       	ret

	BuffType RetrievedData = *RetrieveLoc; // Grab the stored byte into a temp variable
    1762:	20 91 b1 02 	lds	r18, 0x02B1
    1766:	30 91 b2 02 	lds	r19, 0x02B2
    176a:	f9 01       	movw	r30, r18
    176c:	91 91       	ld	r25, Z+

	RetrieveLoc++;                         // Increment the OUT pointer to the next element if flag set
    176e:	f0 93 b2 02 	sts	0x02B2, r31
    1772:	e0 93 b1 02 	sts	0x02B1, r30
	BuffElements--;                        // Decrement the total elements variable
    1776:	80 91 b3 02 	lds	r24, 0x02B3
    177a:	81 50       	subi	r24, 0x01	; 1
    177c:	80 93 b3 02 	sts	0x02B3, r24
	
	if (RetrieveLoc == (BuffType*)&RingBuffer[BUFF_BUFFLEN])
    1780:	ef 5a       	subi	r30, 0xAF	; 175
    1782:	f2 40       	sbci	r31, 0x02	; 2
    1784:	31 f4       	brne	.+12     	; 0x1792 <BUFF_GetBuffByte+0x3e>
		RetrieveLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    1786:	2f 53       	subi	r18, 0x3F	; 63
    1788:	30 40       	sbci	r19, 0x00	; 0
    178a:	30 93 b2 02 	sts	0x02B2, r19
    178e:	20 93 b1 02 	sts	0x02B1, r18
		
	return RetrievedData;                 // Return the retrieved data
    1792:	89 2f       	mov	r24, r25
    1794:	99 27       	eor	r25, r25
}
    1796:	08 95       	ret

00001798 <__vector_4>:
// ======================================================================================

// Packet Timeout = ((F_CPU / 1024) / (240 * TIMEOUT_TICKSBEFORETIMEOUT)) per second
ISR(TIMER2_COMP_vect, ISR_NOBLOCK)
{
    1798:	78 94       	sei
    179a:	1f 92       	push	r1
    179c:	0f 92       	push	r0
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	0f 92       	push	r0
    17a2:	11 24       	eor	r1, r1
    17a4:	8f 93       	push	r24
	if (PacketTimeOutTicks++ == TIMEOUT_PACKET_TIMEOUTTICKS)
    17a6:	80 91 40 01 	lds	r24, 0x0140
    17aa:	8f 5f       	subi	r24, 0xFF	; 255
    17ac:	80 93 40 01 	sts	0x0140, r24
    17b0:	80 91 40 01 	lds	r24, 0x0140
    17b4:	87 39       	cpi	r24, 0x97	; 151
    17b6:	29 f4       	brne	.+10     	; 0x17c2 <__vector_4+0x2a>
	{
		PacketTimeOutTicks   = 0;
    17b8:	10 92 40 01 	sts	0x0140, r1
		PacketTimeOut        = TRUE;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	80 93 3f 01 	sts	0x013F, r24
    17c2:	8f 91       	pop	r24
    17c4:	0f 90       	pop	r0
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	0f 90       	pop	r0
    17ca:	1f 90       	pop	r1
    17cc:	18 95       	reti

000017ce <TOUT_SetupSleepTimer>:
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    17ce:	a7 e8       	ldi	r26, 0x87	; 135
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    17d2:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
    17d6:	80 2d       	mov	r24, r0
    17d8:	28 2f       	mov	r18, r24
	}
}

// Autosleep Timeout = (TIMEOUT_TICKSBEFORETIMEOUT / 10) secs between timeouts
ISR(TIMER1_OVF_vect, ISR_NOBLOCK)
{
	if (SleepTimeOutTicks++ == TicksBeforeAutoSleep)
	{
		TIMEOUT_SLEEP_TIMER_OFF();
		FUNCSleepMode();
		TOUT_SetupSleepTimer();
	}
}

// ======================================================================================

void TOUT_SetupSleepTimer(void)
{
	uint8_t NewTicksIndex = eeprom_read_byte(&EEPROMVars.AutoSleepValIndex);

	if (NewTicksIndex == 0xFF)
    17da:	8f 3f       	cpi	r24, 0xFF	; 255
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <TOUT_SetupSleepTimer+0x12>
	  NewTicksIndex = 4;
    17de:	24 e0       	ldi	r18, 0x04	; 4

	TIMSK1 = (1 << TOIE1);
    17e0:	31 e0       	ldi	r19, 0x01	; 1
    17e2:	30 93 6f 00 	sts	0x006F, r19
	TicksBeforeAutoSleep = (pgm_read_byte(&AutoSleepTOValues[NewTicksIndex]) * 10);
    17e6:	e2 2f       	mov	r30, r18
    17e8:	ff 27       	eor	r31, r31
    17ea:	e4 53       	subi	r30, 0x34	; 52
    17ec:	fc 4f       	sbci	r31, 0xFC	; 252
    17ee:	94 91       	lpm	r25, Z
    17f0:	8a e0       	ldi	r24, 0x0A	; 10
    17f2:	98 9f       	mul	r25, r24
    17f4:	c0 01       	movw	r24, r0
    17f6:	11 24       	eor	r1, r1
    17f8:	90 93 3c 01 	sts	0x013C, r25
    17fc:	80 93 3b 01 	sts	0x013B, r24

	TIMEOUT_SLEEP_TIMEOUT_RESET();
    1800:	10 92 3e 01 	sts	0x013E, r1
    1804:	10 92 3d 01 	sts	0x013D, r1
    1808:	10 92 85 00 	sts	0x0085, r1
    180c:	10 92 84 00 	sts	0x0084, r1
	
	if (NewTicksIndex)
    1810:	22 23       	and	r18, r18
    1812:	19 f0       	breq	.+6      	; 0x181a <TOUT_SetupSleepTimer+0x4c>
	  TIMEOUT_SLEEP_TIMER_ON();
    1814:	30 93 81 00 	sts	0x0081, r19
    1818:	08 95       	ret
	else
	  TIMEOUT_SLEEP_TIMER_OFF();
    181a:	20 93 81 00 	sts	0x0081, r18
    181e:	08 95       	ret

00001820 <__vector_9>:
    1820:	78 94       	sei
    1822:	1f 92       	push	r1
    1824:	0f 92       	push	r0
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	0f 92       	push	r0
    182a:	11 24       	eor	r1, r1
    182c:	2f 93       	push	r18
    182e:	3f 93       	push	r19
    1830:	4f 93       	push	r20
    1832:	5f 93       	push	r21
    1834:	6f 93       	push	r22
    1836:	7f 93       	push	r23
    1838:	8f 93       	push	r24
    183a:	9f 93       	push	r25
    183c:	af 93       	push	r26
    183e:	bf 93       	push	r27
    1840:	ef 93       	push	r30
    1842:	ff 93       	push	r31
    1844:	80 91 3d 01 	lds	r24, 0x013D
    1848:	90 91 3e 01 	lds	r25, 0x013E
    184c:	9c 01       	movw	r18, r24
    184e:	01 96       	adiw	r24, 0x01	; 1
    1850:	90 93 3e 01 	sts	0x013E, r25
    1854:	80 93 3d 01 	sts	0x013D, r24
    1858:	80 91 3b 01 	lds	r24, 0x013B
    185c:	90 91 3c 01 	lds	r25, 0x013C
    1860:	28 17       	cp	r18, r24
    1862:	39 07       	cpc	r19, r25
    1864:	31 f4       	brne	.+12     	; 0x1872 <__vector_9+0x52>
    1866:	10 92 81 00 	sts	0x0081, r1
    186a:	0e 94 0c 07 	call	0xe18 <FUNCSleepMode>
    186e:	0e 94 e7 0b 	call	0x17ce <TOUT_SetupSleepTimer>
    1872:	ff 91       	pop	r31
    1874:	ef 91       	pop	r30
    1876:	bf 91       	pop	r27
    1878:	af 91       	pop	r26
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	7f 91       	pop	r23
    1880:	6f 91       	pop	r22
    1882:	5f 91       	pop	r21
    1884:	4f 91       	pop	r20
    1886:	3f 91       	pop	r19
    1888:	2f 91       	pop	r18
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	0f 90       	pop	r0
    1890:	1f 90       	pop	r1
    1892:	18 95       	reti

00001894 <PD_SetupDFAddressCounters>:
}

void PD_SetupDFAddressCounters(void)
{
	uint32_t StartAddress = CurrAddress;
    1894:	20 91 42 01 	lds	r18, 0x0142
    1898:	30 91 43 01 	lds	r19, 0x0143
    189c:	40 91 44 01 	lds	r20, 0x0144
    18a0:	50 91 45 01 	lds	r21, 0x0145

	CurrPageAddress = 0;
    18a4:	10 92 6e 02 	sts	0x026E, r1
    18a8:	10 92 6d 02 	sts	0x026D, r1

	while (StartAddress > DataflashInfo.PageSize)      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DataflashInfo.PageSize;         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    18ac:	80 91 69 02 	lds	r24, 0x0269
    18b0:	90 91 6a 02 	lds	r25, 0x026A
    18b4:	aa 27       	eor	r26, r26
    18b6:	bb 27       	eor	r27, r27
    18b8:	82 17       	cp	r24, r18
    18ba:	93 07       	cpc	r25, r19
    18bc:	a4 07       	cpc	r26, r20
    18be:	b5 07       	cpc	r27, r21
    18c0:	88 f4       	brcc	.+34     	; 0x18e4 <PD_SetupDFAddressCounters+0x50>
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	28 1b       	sub	r18, r24
    18c8:	39 0b       	sbc	r19, r25
    18ca:	4a 0b       	sbc	r20, r26
    18cc:	5b 0b       	sbc	r21, r27
    18ce:	6f 5f       	subi	r22, 0xFF	; 255
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	82 17       	cp	r24, r18
    18d4:	93 07       	cpc	r25, r19
    18d6:	a4 07       	cpc	r26, r20
    18d8:	b5 07       	cpc	r27, r21
    18da:	a8 f3       	brcs	.-22     	; 0x18c6 <PD_SetupDFAddressCounters+0x32>
    18dc:	70 93 6e 02 	sts	0x026E, r23
    18e0:	60 93 6d 02 	sts	0x026D, r22
	}
	
	CurrBuffByte = (uint16_t)StartAddress;              // The buffer byte is the remainder
    18e4:	30 93 67 02 	sts	0x0267, r19
    18e8:	20 93 66 02 	sts	0x0266, r18
    18ec:	08 95       	ret

000018ee <PD_StoreDataflashByte>:
}

void PD_StoreDataflashByte(const uint8_t Data)
{
    18ee:	cf 93       	push	r28
    18f0:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DataflashInfo.PageSize)
    18f2:	20 91 66 02 	lds	r18, 0x0266
    18f6:	30 91 67 02 	lds	r19, 0x0267
    18fa:	80 91 69 02 	lds	r24, 0x0269
    18fe:	90 91 6a 02 	lds	r25, 0x026A
    1902:	28 17       	cp	r18, r24
    1904:	39 07       	cpc	r19, r25
    1906:	a9 f4       	brne	.+42     	; 0x1932 <PD_StoreDataflashByte+0x44>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    1908:	80 91 6d 02 	lds	r24, 0x026D
    190c:	90 91 6e 02 	lds	r25, 0x026E
    1910:	9c 01       	movw	r18, r24
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	90 93 6e 02 	sts	0x026E, r25
    1918:	80 93 6d 02 	sts	0x026D, r24
    191c:	c9 01       	movw	r24, r18
    191e:	0e 94 cd 0a 	call	0x159a <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 43 0a 	call	0x1486 <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    192a:	10 92 67 02 	sts	0x0267, r1
    192e:	10 92 66 02 	sts	0x0266, r1
	}
	
	USI_SPITransmit(Data);                                 // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    1932:	8c 2f       	mov	r24, r28
    1934:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
	CurrBuffByte++;
    1938:	80 91 66 02 	lds	r24, 0x0266
    193c:	90 91 67 02 	lds	r25, 0x0267
    1940:	01 96       	adiw	r24, 0x01	; 1
    1942:	90 93 67 02 	sts	0x0267, r25
    1946:	80 93 66 02 	sts	0x0266, r24
    194a:	cf 91       	pop	r28
    194c:	08 95       	ret

0000194e <PD_InterpretAVRISPPacket>:
    194e:	df 92       	push	r13
    1950:	ef 92       	push	r14
    1952:	ff 92       	push	r15
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	dd 24       	eor	r13, r13
    195e:	80 91 4b 01 	lds	r24, 0x014B
    1962:	99 27       	eor	r25, r25
    1964:	86 31       	cpi	r24, 0x16	; 22
    1966:	91 05       	cpc	r25, r1
    1968:	09 f4       	brne	.+2      	; 0x196c <PD_InterpretAVRISPPacket+0x1e>
    196a:	00 c1       	rjmp	.+512    	; 0x1b6c <PD_InterpretAVRISPPacket+0x21e>
    196c:	87 31       	cpi	r24, 0x17	; 23
    196e:	91 05       	cpc	r25, r1
    1970:	b4 f4       	brge	.+44     	; 0x199e <PD_InterpretAVRISPPacket+0x50>
    1972:	82 31       	cpi	r24, 0x12	; 18
    1974:	91 05       	cpc	r25, r1
    1976:	09 f4       	brne	.+2      	; 0x197a <PD_InterpretAVRISPPacket+0x2c>
    1978:	6f c0       	rjmp	.+222    	; 0x1a58 <PD_InterpretAVRISPPacket+0x10a>
    197a:	83 31       	cpi	r24, 0x13	; 19
    197c:	91 05       	cpc	r25, r1
    197e:	3c f4       	brge	.+14     	; 0x198e <PD_InterpretAVRISPPacket+0x40>
    1980:	80 31       	cpi	r24, 0x10	; 16
    1982:	91 05       	cpc	r25, r1
    1984:	31 f1       	breq	.+76     	; 0x19d2 <PD_InterpretAVRISPPacket+0x84>
    1986:	41 97       	sbiw	r24, 0x11	; 17
    1988:	09 f4       	brne	.+2      	; 0x198c <PD_InterpretAVRISPPacket+0x3e>
    198a:	46 c0       	rjmp	.+140    	; 0x1a18 <PD_InterpretAVRISPPacket+0xca>
    198c:	40 c1       	rjmp	.+640    	; 0x1c0e <PD_InterpretAVRISPPacket+0x2c0>
    198e:	84 31       	cpi	r24, 0x14	; 20
    1990:	91 05       	cpc	r25, r1
    1992:	09 f4       	brne	.+2      	; 0x1996 <PD_InterpretAVRISPPacket+0x48>
    1994:	8a c0       	rjmp	.+276    	; 0x1aaa <PD_InterpretAVRISPPacket+0x15c>
    1996:	45 97       	sbiw	r24, 0x15	; 21
    1998:	0c f0       	brlt	.+2      	; 0x199c <PD_InterpretAVRISPPacket+0x4e>
    199a:	af c0       	rjmp	.+350    	; 0x1afa <PD_InterpretAVRISPPacket+0x1ac>
    199c:	7f c0       	rjmp	.+254    	; 0x1a9c <PD_InterpretAVRISPPacket+0x14e>
    199e:	89 31       	cpi	r24, 0x19	; 25
    19a0:	91 05       	cpc	r25, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <PD_InterpretAVRISPPacket+0x58>
    19a4:	70 c0       	rjmp	.+224    	; 0x1a86 <PD_InterpretAVRISPPacket+0x138>
    19a6:	8a 31       	cpi	r24, 0x1A	; 26
    19a8:	91 05       	cpc	r25, r1
    19aa:	44 f4       	brge	.+16     	; 0x19bc <PD_InterpretAVRISPPacket+0x6e>
    19ac:	87 31       	cpi	r24, 0x17	; 23
    19ae:	91 05       	cpc	r25, r1
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <PD_InterpretAVRISPPacket+0x66>
    19b2:	69 c0       	rjmp	.+210    	; 0x1a86 <PD_InterpretAVRISPPacket+0x138>
    19b4:	48 97       	sbiw	r24, 0x18	; 24
    19b6:	09 f4       	brne	.+2      	; 0x19ba <PD_InterpretAVRISPPacket+0x6c>
    19b8:	58 c0       	rjmp	.+176    	; 0x1a6a <PD_InterpretAVRISPPacket+0x11c>
    19ba:	29 c1       	rjmp	.+594    	; 0x1c0e <PD_InterpretAVRISPPacket+0x2c0>
    19bc:	8b 31       	cpi	r24, 0x1B	; 27
    19be:	91 05       	cpc	r25, r1
    19c0:	e9 f1       	breq	.+122    	; 0x1a3c <PD_InterpretAVRISPPacket+0xee>
    19c2:	8b 31       	cpi	r24, 0x1B	; 27
    19c4:	91 05       	cpc	r25, r1
    19c6:	0c f4       	brge	.+2      	; 0x19ca <PD_InterpretAVRISPPacket+0x7c>
    19c8:	50 c0       	rjmp	.+160    	; 0x1a6a <PD_InterpretAVRISPPacket+0x11c>
    19ca:	4c 97       	sbiw	r24, 0x1c	; 28
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <PD_InterpretAVRISPPacket+0x82>
    19ce:	4d c0       	rjmp	.+154    	; 0x1a6a <PD_InterpretAVRISPPacket+0x11c>
    19d0:	1e c1       	rjmp	.+572    	; 0x1c0e <PD_InterpretAVRISPPacket+0x2c0>
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	90 93 48 01 	sts	0x0148, r25
    19da:	80 93 47 01 	sts	0x0147, r24
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    19e4:	0e 94 fc 0a 	call	0x15f8 <DF_GetChipCharacteristics>
    19e8:	80 91 68 02 	lds	r24, 0x0268
    19ec:	88 23       	and	r24, r24
    19ee:	59 f0       	breq	.+22     	; 0x1a06 <PD_InterpretAVRISPPacket+0xb8>
    19f0:	81 ed       	ldi	r24, 0xD1	; 209
    19f2:	93 e0       	ldi	r25, 0x03	; 3
    19f4:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	80 93 46 01 	sts	0x0146, r24
    19fe:	81 b3       	in	r24, 0x11	; 17
    1a00:	8f 7c       	andi	r24, 0xCF	; 207
    1a02:	80 62       	ori	r24, 0x20	; 32
    1a04:	17 c0       	rjmp	.+46     	; 0x1a34 <PD_InterpretAVRISPPacket+0xe6>
    1a06:	86 e8       	ldi	r24, 0x86	; 134
    1a08:	93 e0       	ldi	r25, 0x03	; 3
    1a0a:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
    1a0e:	8d 2d       	mov	r24, r13
    1a10:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    1a14:	80 ec       	ldi	r24, 0xC0	; 192
    1a16:	02 c1       	rjmp	.+516    	; 0x1c1c <PD_InterpretAVRISPPacket+0x2ce>
    1a18:	82 e0       	ldi	r24, 0x02	; 2
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	90 93 48 01 	sts	0x0148, r25
    1a20:	80 93 47 01 	sts	0x0147, r24
    1a24:	d0 92 46 01 	sts	0x0146, r13
    1a28:	8d 2d       	mov	r24, r13
    1a2a:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    1a2e:	81 b3       	in	r24, 0x11	; 17
    1a30:	8f 7c       	andi	r24, 0xCF	; 207
    1a32:	80 61       	ori	r24, 0x10	; 16
    1a34:	81 bb       	out	0x11, r24	; 17
    1a36:	d0 92 4c 01 	sts	0x014C, r13
    1a3a:	f2 c0       	rjmp	.+484    	; 0x1c20 <PD_InterpretAVRISPPacket+0x2d2>
    1a3c:	84 e0       	ldi	r24, 0x04	; 4
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	90 93 48 01 	sts	0x0148, r25
    1a44:	80 93 47 01 	sts	0x0147, r24
    1a48:	d0 92 4c 01 	sts	0x014C, r13
    1a4c:	82 e0       	ldi	r24, 0x02	; 2
    1a4e:	80 93 4d 01 	sts	0x014D, r24
    1a52:	d0 92 4e 01 	sts	0x014E, r13
    1a56:	e4 c0       	rjmp	.+456    	; 0x1c20 <PD_InterpretAVRISPPacket+0x2d2>
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	90 93 48 01 	sts	0x0148, r25
    1a60:	80 93 47 01 	sts	0x0147, r24
    1a64:	e1 e0       	ldi	r30, 0x01	; 1
    1a66:	de 2e       	mov	r13, r30
    1a68:	7e c0       	rjmp	.+252    	; 0x1b66 <PD_InterpretAVRISPPacket+0x218>
    1a6a:	84 e0       	ldi	r24, 0x04	; 4
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	90 93 48 01 	sts	0x0148, r25
    1a72:	80 93 47 01 	sts	0x0147, r24
    1a76:	10 92 4c 01 	sts	0x014C, r1
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	80 93 4d 01 	sts	0x014D, r24
    1a80:	10 92 4e 01 	sts	0x014E, r1
    1a84:	cd c0       	rjmp	.+410    	; 0x1c20 <PD_InterpretAVRISPPacket+0x2d2>
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	90 93 48 01 	sts	0x0148, r25
    1a8e:	80 93 47 01 	sts	0x0147, r24
    1a92:	10 92 4c 01 	sts	0x014C, r1
    1a96:	10 92 4d 01 	sts	0x014D, r1
    1a9a:	c2 c0       	rjmp	.+388    	; 0x1c20 <PD_InterpretAVRISPPacket+0x2d2>
    1a9c:	82 e0       	ldi	r24, 0x02	; 2
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	90 93 48 01 	sts	0x0148, r25
    1aa4:	80 93 47 01 	sts	0x0147, r24
    1aa8:	5e c0       	rjmp	.+188    	; 0x1b66 <PD_InterpretAVRISPPacket+0x218>
    1aaa:	80 91 4c 01 	lds	r24, 0x014C
    1aae:	99 27       	eor	r25, r25
    1ab0:	98 2f       	mov	r25, r24
    1ab2:	88 27       	eor	r24, r24
    1ab4:	20 91 4d 01 	lds	r18, 0x014D
    1ab8:	33 27       	eor	r19, r19
    1aba:	82 2b       	or	r24, r18
    1abc:	93 2b       	or	r25, r19
    1abe:	03 96       	adiw	r24, 0x03	; 3
    1ac0:	90 93 48 01 	sts	0x0148, r25
    1ac4:	80 93 47 01 	sts	0x0147, r24
    1ac8:	21 e0       	ldi	r18, 0x01	; 1
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	02 97       	sbiw	r24, 0x02	; 2
    1ace:	28 17       	cp	r18, r24
    1ad0:	39 07       	cpc	r19, r25
    1ad2:	48 f4       	brcc	.+18     	; 0x1ae6 <PD_InterpretAVRISPPacket+0x198>
    1ad4:	4f ef       	ldi	r20, 0xFF	; 255
    1ad6:	ec e4       	ldi	r30, 0x4C	; 76
    1ad8:	f1 e0       	ldi	r31, 0x01	; 1
    1ada:	41 93       	st	Z+, r20
    1adc:	2f 5f       	subi	r18, 0xFF	; 255
    1ade:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae0:	28 17       	cp	r18, r24
    1ae2:	39 07       	cpc	r19, r25
    1ae4:	d0 f3       	brcs	.-12     	; 0x1ada <PD_InterpretAVRISPPacket+0x18c>
    1ae6:	10 92 4c 01 	sts	0x014C, r1
    1aea:	e0 91 47 01 	lds	r30, 0x0147
    1aee:	f0 91 48 01 	lds	r31, 0x0148
    1af2:	e6 5b       	subi	r30, 0xB6	; 182
    1af4:	fe 4f       	sbci	r31, 0xFE	; 254
    1af6:	10 82       	st	Z, r1
    1af8:	93 c0       	rjmp	.+294    	; 0x1c20 <PD_InterpretAVRISPPacket+0x2d2>
    1afa:	0e 94 4a 0c 	call	0x1894 <PD_SetupDFAddressCounters>
    1afe:	80 91 6d 02 	lds	r24, 0x026D
    1b02:	90 91 6e 02 	lds	r25, 0x026E
    1b06:	0e 94 9e 0a 	call	0x153c <DF_CopyFlashPageToBuffer>
    1b0a:	80 91 66 02 	lds	r24, 0x0266
    1b0e:	90 91 67 02 	lds	r25, 0x0267
    1b12:	0e 94 43 0a 	call	0x1486 <DF_BufferWriteEnable>
    1b16:	80 91 4c 01 	lds	r24, 0x014C
    1b1a:	99 27       	eor	r25, r25
    1b1c:	d8 2f       	mov	r29, r24
    1b1e:	cc 27       	eor	r28, r28
    1b20:	80 91 4d 01 	lds	r24, 0x014D
    1b24:	99 27       	eor	r25, r25
    1b26:	c8 2b       	or	r28, r24
    1b28:	d9 2b       	or	r29, r25
    1b2a:	00 e0       	ldi	r16, 0x00	; 0
    1b2c:	10 e0       	ldi	r17, 0x00	; 0
    1b2e:	0c 17       	cp	r16, r28
    1b30:	1d 07       	cpc	r17, r29
    1b32:	c8 f4       	brcc	.+50     	; 0x1b66 <PD_InterpretAVRISPPacket+0x218>
    1b34:	55 e5       	ldi	r21, 0x55	; 85
    1b36:	e5 2e       	mov	r14, r21
    1b38:	51 e0       	ldi	r21, 0x01	; 1
    1b3a:	f5 2e       	mov	r15, r21
    1b3c:	f7 01       	movw	r30, r14
    1b3e:	81 91       	ld	r24, Z+
    1b40:	7f 01       	movw	r14, r30
    1b42:	0e 94 77 0c 	call	0x18ee <PD_StoreDataflashByte>
    1b46:	80 91 66 02 	lds	r24, 0x0266
    1b4a:	90 91 67 02 	lds	r25, 0x0267
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	90 93 67 02 	sts	0x0267, r25
    1b54:	80 93 66 02 	sts	0x0266, r24
    1b58:	0e 94 39 0f 	call	0x1e72 <V2P_IncrementCurrAddress>
    1b5c:	0f 5f       	subi	r16, 0xFF	; 255
    1b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b60:	0c 17       	cp	r16, r28
    1b62:	1d 07       	cpc	r17, r29
    1b64:	58 f3       	brcs	.-42     	; 0x1b3c <PD_InterpretAVRISPPacket+0x1ee>
    1b66:	10 92 4c 01 	sts	0x014C, r1
    1b6a:	5a c0       	rjmp	.+180    	; 0x1c20 <PD_InterpretAVRISPPacket+0x2d2>
    1b6c:	0e 94 4a 0c 	call	0x1894 <PD_SetupDFAddressCounters>
    1b70:	80 91 6d 02 	lds	r24, 0x026D
    1b74:	90 91 6e 02 	lds	r25, 0x026E
    1b78:	0e 94 9e 0a 	call	0x153c <DF_CopyFlashPageToBuffer>
    1b7c:	80 91 4c 01 	lds	r24, 0x014C
    1b80:	99 27       	eor	r25, r25
    1b82:	d8 2f       	mov	r29, r24
    1b84:	cc 27       	eor	r28, r28
    1b86:	80 91 4d 01 	lds	r24, 0x014D
    1b8a:	99 27       	eor	r25, r25
    1b8c:	c8 2b       	or	r28, r24
    1b8e:	d9 2b       	or	r29, r25
    1b90:	00 e0       	ldi	r16, 0x00	; 0
    1b92:	10 e0       	ldi	r17, 0x00	; 0
    1b94:	0c 17       	cp	r16, r28
    1b96:	1d 07       	cpc	r17, r29
    1b98:	70 f5       	brcc	.+92     	; 0x1bf6 <PD_InterpretAVRISPPacket+0x2a8>
    1b9a:	3d e4       	ldi	r19, 0x4D	; 77
    1b9c:	e3 2e       	mov	r14, r19
    1b9e:	31 e0       	ldi	r19, 0x01	; 1
    1ba0:	f3 2e       	mov	r15, r19
    1ba2:	20 91 66 02 	lds	r18, 0x0266
    1ba6:	30 91 67 02 	lds	r19, 0x0267
    1baa:	80 91 69 02 	lds	r24, 0x0269
    1bae:	90 91 6a 02 	lds	r25, 0x026A
    1bb2:	28 17       	cp	r18, r24
    1bb4:	39 07       	cpc	r19, r25
    1bb6:	41 f4       	brne	.+16     	; 0x1bc8 <PD_InterpretAVRISPPacket+0x27a>
    1bb8:	0e 94 4a 0c 	call	0x1894 <PD_SetupDFAddressCounters>
    1bbc:	80 91 6d 02 	lds	r24, 0x026D
    1bc0:	90 91 6e 02 	lds	r25, 0x026E
    1bc4:	0e 94 9e 0a 	call	0x153c <DF_CopyFlashPageToBuffer>
    1bc8:	80 91 66 02 	lds	r24, 0x0266
    1bcc:	90 91 67 02 	lds	r25, 0x0267
    1bd0:	9c 01       	movw	r18, r24
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	90 93 67 02 	sts	0x0267, r25
    1bd8:	80 93 66 02 	sts	0x0266, r24
    1bdc:	c9 01       	movw	r24, r18
    1bde:	0e 94 e2 09 	call	0x13c4 <DF_ReadBufferByte>
    1be2:	f7 01       	movw	r30, r14
    1be4:	81 93       	st	Z+, r24
    1be6:	7f 01       	movw	r14, r30
    1be8:	0e 94 39 0f 	call	0x1e72 <V2P_IncrementCurrAddress>
    1bec:	0f 5f       	subi	r16, 0xFF	; 255
    1bee:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf0:	0c 17       	cp	r16, r28
    1bf2:	1d 07       	cpc	r17, r29
    1bf4:	b0 f2       	brcs	.-84     	; 0x1ba2 <PD_InterpretAVRISPPacket+0x254>
    1bf6:	23 96       	adiw	r28, 0x03	; 3
    1bf8:	d0 93 48 01 	sts	0x0148, r29
    1bfc:	c0 93 47 01 	sts	0x0147, r28
    1c00:	23 97       	sbiw	r28, 0x03	; 3
    1c02:	10 92 4c 01 	sts	0x014C, r1
    1c06:	c5 5b       	subi	r28, 0xB5	; 181
    1c08:	de 4f       	sbci	r29, 0xFE	; 254
    1c0a:	1a 82       	std	Y+2, r1	; 0x02
    1c0c:	09 c0       	rjmp	.+18     	; 0x1c20 <PD_InterpretAVRISPPacket+0x2d2>
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	90 93 48 01 	sts	0x0148, r25
    1c16:	80 93 47 01 	sts	0x0147, r24
    1c1a:	89 ec       	ldi	r24, 0xC9	; 201
    1c1c:	80 93 4c 01 	sts	0x014C, r24
    1c20:	0e 94 58 0e 	call	0x1cb0 <V2P_SendPacket>
    1c24:	dd 20       	and	r13, r13
    1c26:	d9 f0       	breq	.+54     	; 0x1c5e <PD_InterpretAVRISPPacket+0x310>
    1c28:	80 e3       	ldi	r24, 0x30	; 48
    1c2a:	92 e0       	ldi	r25, 0x02	; 2
    1c2c:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
    1c30:	c0 e0       	ldi	r28, 0x00	; 0
    1c32:	d0 e0       	ldi	r29, 0x00	; 0
    1c34:	80 91 6b 02 	lds	r24, 0x026B
    1c38:	90 91 6c 02 	lds	r25, 0x026C
    1c3c:	23 e0       	ldi	r18, 0x03	; 3
    1c3e:	96 95       	lsr	r25
    1c40:	87 95       	ror	r24
    1c42:	2a 95       	dec	r18
    1c44:	e1 f7       	brne	.-8      	; 0x1c3e <PD_InterpretAVRISPPacket+0x2f0>
    1c46:	c8 17       	cp	r28, r24
    1c48:	d9 07       	cpc	r29, r25
    1c4a:	28 f4       	brcc	.+10     	; 0x1c56 <PD_InterpretAVRISPPacket+0x308>
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	0e 94 7b 0a 	call	0x14f6 <DF_EraseBlock>
    1c52:	21 96       	adiw	r28, 0x01	; 1
    1c54:	ef cf       	rjmp	.-34     	; 0x1c34 <PD_InterpretAVRISPPacket+0x2e6>
    1c56:	81 ed       	ldi	r24, 0xD1	; 209
    1c58:	93 e0       	ldi	r25, 0x03	; 3
    1c5a:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	ff 90       	pop	r15
    1c68:	ef 90       	pop	r14
    1c6a:	df 90       	pop	r13
    1c6c:	08 95       	ret

00001c6e <V2P_GetChecksum>:
	
	/* Checksum for the V2 protocol is comprised of an XOR of all the packet 
      bytes, including the start, sequence number, size and token bytes.    */
	
	CheckSumByte  = MESSAGE_START;
    1c6e:	6b e1       	ldi	r22, 0x1B	; 27
	CheckSumByte ^= SequenceNum;
    1c70:	80 91 49 01 	lds	r24, 0x0149
    1c74:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize >> 8);
    1c76:	20 91 47 01 	lds	r18, 0x0147
    1c7a:	30 91 48 01 	lds	r19, 0x0148
    1c7e:	83 2f       	mov	r24, r19
    1c80:	99 27       	eor	r25, r25
    1c82:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize);
    1c84:	80 91 47 01 	lds	r24, 0x0147
    1c88:	68 27       	eor	r22, r24
	CheckSumByte ^= TOKEN;
    1c8a:	8e e0       	ldi	r24, 0x0E	; 14
    1c8c:	68 27       	eor	r22, r24
	
	for (uint16_t CByteIndex = 0; CByteIndex < MessageSize; CByteIndex++)
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	50 e0       	ldi	r21, 0x00	; 0
    1c92:	42 17       	cp	r20, r18
    1c94:	53 07       	cpc	r21, r19
    1c96:	48 f4       	brcc	.+18     	; 0x1caa <V2P_GetChecksum+0x3c>
    1c98:	eb e4       	ldi	r30, 0x4B	; 75
    1c9a:	f1 e0       	ldi	r31, 0x01	; 1
	   CheckSumByte ^= PacketBytes[CByteIndex];
    1c9c:	81 91       	ld	r24, Z+
    1c9e:	68 27       	eor	r22, r24
    1ca0:	4f 5f       	subi	r20, 0xFF	; 255
    1ca2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca4:	42 17       	cp	r20, r18
    1ca6:	53 07       	cpc	r21, r19
    1ca8:	c8 f3       	brcs	.-14     	; 0x1c9c <V2P_GetChecksum+0x2e>

	return CheckSumByte;
}
    1caa:	86 2f       	mov	r24, r22
    1cac:	99 27       	eor	r25, r25
    1cae:	08 95       	ret

00001cb0 <V2P_SendPacket>:
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	8b e1       	ldi	r24, 0x1B	; 27
    1cba:	0e 94 18 09 	call	0x1230 <USART_Tx>
    1cbe:	80 91 49 01 	lds	r24, 0x0149
    1cc2:	0e 94 18 09 	call	0x1230 <USART_Tx>
    1cc6:	80 91 48 01 	lds	r24, 0x0148
    1cca:	0e 94 18 09 	call	0x1230 <USART_Tx>
    1cce:	80 91 47 01 	lds	r24, 0x0147
    1cd2:	0e 94 18 09 	call	0x1230 <USART_Tx>
    1cd6:	8e e0       	ldi	r24, 0x0E	; 14
    1cd8:	0e 94 18 09 	call	0x1230 <USART_Tx>
    1cdc:	c0 e0       	ldi	r28, 0x00	; 0
    1cde:	d0 e0       	ldi	r29, 0x00	; 0
    1ce0:	80 91 47 01 	lds	r24, 0x0147
    1ce4:	90 91 48 01 	lds	r25, 0x0148
    1ce8:	c8 17       	cp	r28, r24
    1cea:	d9 07       	cpc	r29, r25
    1cec:	78 f4       	brcc	.+30     	; 0x1d0c <V2P_SendPacket+0x5c>
    1cee:	0b e4       	ldi	r16, 0x4B	; 75
    1cf0:	11 e0       	ldi	r17, 0x01	; 1
    1cf2:	f8 01       	movw	r30, r16
    1cf4:	81 91       	ld	r24, Z+
    1cf6:	8f 01       	movw	r16, r30
    1cf8:	0e 94 18 09 	call	0x1230 <USART_Tx>
    1cfc:	21 96       	adiw	r28, 0x01	; 1
    1cfe:	80 91 47 01 	lds	r24, 0x0147
    1d02:	90 91 48 01 	lds	r25, 0x0148
    1d06:	c8 17       	cp	r28, r24
    1d08:	d9 07       	cpc	r29, r25
    1d0a:	98 f3       	brcs	.-26     	; 0x1cf2 <V2P_SendPacket+0x42>
    1d0c:	0e 94 37 0e 	call	0x1c6e <V2P_GetChecksum>
    1d10:	0e 94 18 09 	call	0x1230 <USART_Tx>
    1d14:	80 91 49 01 	lds	r24, 0x0149
    1d18:	90 91 4a 01 	lds	r25, 0x014A
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	90 93 4a 01 	sts	0x014A, r25
    1d22:	80 93 49 01 	sts	0x0149, r24
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	08 95       	ret

00001d30 <V2P_GetSetParamater>:

void V2P_GetSetParamater(void)
{
	uint8_t Param_Name = PacketBytes[1];    // Save the parameter number
    1d30:	20 91 4c 01 	lds	r18, 0x014C

	MessageSize = 3;                        // Set the default response message size to 3 bytes     
    1d34:	83 e0       	ldi	r24, 0x03	; 3
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	90 93 48 01 	sts	0x0148, r25
    1d3c:	80 93 47 01 	sts	0x0147, r24
	PacketBytes[1] = STATUS_CMD_OK;         // Set the default response to OK
    1d40:	10 92 4c 01 	sts	0x014C, r1

	switch (Param_Name)                    // Switch based on the recieved parameter byte
    1d44:	33 27       	eor	r19, r19
    1d46:	22 39       	cpi	r18, 0x92	; 146
    1d48:	31 05       	cpc	r19, r1
    1d4a:	51 f1       	breq	.+84     	; 0x1da0 <V2P_GetSetParamater+0x70>
    1d4c:	23 39       	cpi	r18, 0x93	; 147
    1d4e:	31 05       	cpc	r19, r1
    1d50:	8c f4       	brge	.+34     	; 0x1d74 <V2P_GetSetParamater+0x44>
    1d52:	21 38       	cpi	r18, 0x81	; 129
    1d54:	31 05       	cpc	r19, r1
    1d56:	01 f1       	breq	.+64     	; 0x1d98 <V2P_GetSetParamater+0x68>
    1d58:	22 38       	cpi	r18, 0x82	; 130
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	24 f4       	brge	.+8      	; 0x1d66 <V2P_GetSetParamater+0x36>
    1d5e:	20 38       	cpi	r18, 0x80	; 128
    1d60:	31 05       	cpc	r19, r1
    1d62:	41 f1       	breq	.+80     	; 0x1db4 <V2P_GetSetParamater+0x84>
    1d64:	7a c0       	rjmp	.+244    	; 0x1e5a <V2P_GetSetParamater+0x12a>
    1d66:	20 39       	cpi	r18, 0x90	; 144
    1d68:	31 05       	cpc	r19, r1
    1d6a:	c1 f0       	breq	.+48     	; 0x1d9c <V2P_GetSetParamater+0x6c>
    1d6c:	21 39       	cpi	r18, 0x91	; 145
    1d6e:	31 05       	cpc	r19, r1
    1d70:	a9 f0       	breq	.+42     	; 0x1d9c <V2P_GetSetParamater+0x6c>
    1d72:	73 c0       	rjmp	.+230    	; 0x1e5a <V2P_GetSetParamater+0x12a>
    1d74:	28 39       	cpi	r18, 0x98	; 152
    1d76:	31 05       	cpc	r19, r1
    1d78:	89 f1       	breq	.+98     	; 0x1ddc <V2P_GetSetParamater+0xac>
    1d7a:	29 39       	cpi	r18, 0x99	; 153
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	2c f4       	brge	.+10     	; 0x1d8a <V2P_GetSetParamater+0x5a>
    1d80:	26 39       	cpi	r18, 0x96	; 150
    1d82:	31 05       	cpc	r19, r1
    1d84:	0c f4       	brge	.+2      	; 0x1d88 <V2P_GetSetParamater+0x58>
    1d86:	69 c0       	rjmp	.+210    	; 0x1e5a <V2P_GetSetParamater+0x12a>
    1d88:	5a c0       	rjmp	.+180    	; 0x1e3e <V2P_GetSetParamater+0x10e>
    1d8a:	2e 39       	cpi	r18, 0x9E	; 158
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	e1 f1       	breq	.+120    	; 0x1e08 <V2P_GetSetParamater+0xd8>
    1d90:	2f 39       	cpi	r18, 0x9F	; 159
    1d92:	31 05       	cpc	r19, r1
    1d94:	89 f0       	breq	.+34     	; 0x1db8 <V2P_GetSetParamater+0x88>
    1d96:	61 c0       	rjmp	.+194    	; 0x1e5a <V2P_GetSetParamater+0x12a>
	{
		case PARAM_BUILD_NUMBER_LOW:
			PacketBytes[2] = VERSION_MINOR;

			break;
		case PARAM_BUILD_NUMBER_HIGH:
			PacketBytes[2] = VERSION_MAJOR;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <V2P_GetSetParamater+0xea>

			break;
		case PARAM_HARDWARE_VERSION:
			PacketBytes[2] = V2P_HW_VERSION;

			break;
		case PARAM_SW_MAJOR:
			PacketBytes[2] = V2P_SW_VERSION_MAJOR;
    1d9c:	82 e0       	ldi	r24, 0x02	; 2
    1d9e:	3d c0       	rjmp	.+122    	; 0x1e1a <V2P_GetSetParamater+0xea>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    1da0:	a6 e8       	ldi	r26, 0x86	; 134
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	9d 01       	movw	r18, r26
  uint8_t result;
  asm volatile
    1da6:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
    1daa:	80 2d       	mov	r24, r0
    1dac:	8f 3f       	cpi	r24, 0xFF	; 255
    1dae:	11 f0       	breq	.+4      	; 0x1db4 <V2P_GetSetParamater+0x84>
    1db0:	d9 01       	movw	r26, r18
    1db2:	30 c0       	rjmp	.+96     	; 0x1e14 <V2P_GetSetParamater+0xe4>
    1db4:	84 e0       	ldi	r24, 0x04	; 4
    1db6:	31 c0       	rjmp	.+98     	; 0x1e1a <V2P_GetSetParamater+0xea>

			break;
		case PARAM_SW_MINOR:
			PacketBytes[2] = ((eeprom_read_byte(&EEPROMVars.FirmVerMinor) == 0xFF)? V2P_SW_VERSION_MINOR_DEFAULT : eeprom_read_byte(&EEPROMVars.FirmVerMinor));

			break;
		case PARAM_CONTROLLER_INIT:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1db8:	80 91 4b 01 	lds	r24, 0x014B
    1dbc:	83 30       	cpi	r24, 0x03	; 3
    1dbe:	19 f4       	brne	.+6      	; 0x1dc6 <V2P_GetSetParamater+0x96>
			{
				PacketBytes[2] = Param_ControllerInit;
    1dc0:	80 91 41 01 	lds	r24, 0x0141
    1dc4:	2a c0       	rjmp	.+84     	; 0x1e1a <V2P_GetSetParamater+0xea>
			}
			else
			{
				MessageSize = 2;
    1dc6:	82 e0       	ldi	r24, 0x02	; 2
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	90 93 48 01 	sts	0x0148, r25
    1dce:	80 93 47 01 	sts	0x0147, r24
				Param_ControllerInit = PacketBytes[2];
    1dd2:	80 91 4d 01 	lds	r24, 0x014D
    1dd6:	80 93 41 01 	sts	0x0141, r24
			}
			
			break;
    1dda:	48 c0       	rjmp	.+144    	; 0x1e6c <V2P_GetSetParamater+0x13c>
		case PARAM_SCK_DURATION:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1ddc:	80 91 4b 01 	lds	r24, 0x014B
    1de0:	a1 e0       	ldi	r26, 0x01	; 1
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	83 30       	cpi	r24, 0x03	; 3
    1de6:	b1 f0       	breq	.+44     	; 0x1e14 <V2P_GetSetParamater+0xe4>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.SCKDuration);
			}
			else
			{
				MessageSize = 2;
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	90 93 48 01 	sts	0x0148, r25
    1df0:	80 93 47 01 	sts	0x0147, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1df4:	80 91 4d 01 	lds	r24, 0x014D
  asm volatile (
    1df8:	08 2e       	mov	r0, r24
    1dfa:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.SCKDuration, PacketBytes[2]);
				USI_SPISetSpeed(PacketBytes[2]); // Re-Initialise the USI system with the new frequency
    1dfe:	80 91 4d 01 	lds	r24, 0x014D
    1e02:	0e 94 66 09 	call	0x12cc <USI_SPISetSpeed>
			}
					
			break;
    1e06:	32 c0       	rjmp	.+100    	; 0x1e6c <V2P_GetSetParamater+0x13c>
		case PARAM_RESET_POLARITY:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1e08:	80 91 4b 01 	lds	r24, 0x014B
    1e0c:	a0 e0       	ldi	r26, 0x00	; 0
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	83 30       	cpi	r24, 0x03	; 3
    1e12:	31 f4       	brne	.+12     	; 0x1e20 <V2P_GetSetParamater+0xf0>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1e14:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
    1e18:	80 2d       	mov	r24, r0
    1e1a:	80 93 4d 01 	sts	0x014D, r24
    1e1e:	26 c0       	rjmp	.+76     	; 0x1e6c <V2P_GetSetParamater+0x13c>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.ResetPolarity);		
			}
			else
			{
				MessageSize = 2;
    1e20:	82 e0       	ldi	r24, 0x02	; 2
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	90 93 48 01 	sts	0x0148, r25
    1e28:	80 93 47 01 	sts	0x0147, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1e2c:	80 91 4d 01 	lds	r24, 0x014D
  asm volatile (
    1e30:	08 2e       	mov	r0, r24
    1e32:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.ResetPolarity, PacketBytes[2]);
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Change takes effect immediatly
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
			}
			
			break;
    1e3c:	17 c0       	rjmp	.+46     	; 0x1e6c <V2P_GetSetParamater+0x13c>
		case PARAM_OSC_PSCALE:
		case PARAM_OSC_CMATCH:
			/* Despite not supporting these parameters (STK500 only), the AVR Studio programmer
			   sends them along with the SCK duration. A OK must be returned or the sequence will fail
			   and the SCK duration byte will not be sent.                                             */
		
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1e3e:	80 91 4b 01 	lds	r24, 0x014B
    1e42:	83 30       	cpi	r24, 0x03	; 3
    1e44:	19 f4       	brne	.+6      	; 0x1e4c <V2P_GetSetParamater+0x11c>
			{
			   PacketBytes[2] = 0;            // If the command is a read, return a 0 for both parameters
    1e46:	10 92 4d 01 	sts	0x014D, r1
    1e4a:	10 c0       	rjmp	.+32     	; 0x1e6c <V2P_GetSetParamater+0x13c>
			}
			else
			{
				MessageSize = 2;              // Otherwise just send back an OK if the command is a set		
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	90 93 48 01 	sts	0x0148, r25
    1e54:	80 93 47 01 	sts	0x0147, r24
			}
			
			break;
    1e58:	09 c0       	rjmp	.+18     	; 0x1e6c <V2P_GetSetParamater+0x13c>
		default:                             // Unrecognised parameter
			MessageSize = 2;
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	90 93 48 01 	sts	0x0148, r25
    1e62:	80 93 47 01 	sts	0x0147, r24
			PacketBytes[1] = STATUS_CMD_FAILED;			
    1e66:	80 ec       	ldi	r24, 0xC0	; 192
    1e68:	80 93 4c 01 	sts	0x014C, r24
	}
	
	V2P_SendPacket();
    1e6c:	0e 94 58 0e 	call	0x1cb0 <V2P_SendPacket>
    1e70:	08 95       	ret

00001e72 <V2P_IncrementCurrAddress>:
}

void V2P_IncrementCurrAddress(void)
{
	// Incrementing a 32-bit unsigned variable takes a lot of code. Because much of the code is
	// not very time critical (much of it is waiting for the hardware), i've chosen to waste
	// a few extra cycles per increment and save a good 60 bytes or so of code space by putting
	// the incrmement inside a function.

	CurrAddress++;
    1e72:	80 91 42 01 	lds	r24, 0x0142
    1e76:	90 91 43 01 	lds	r25, 0x0143
    1e7a:	a0 91 44 01 	lds	r26, 0x0144
    1e7e:	b0 91 45 01 	lds	r27, 0x0145
    1e82:	01 96       	adiw	r24, 0x01	; 1
    1e84:	a1 1d       	adc	r26, r1
    1e86:	b1 1d       	adc	r27, r1
    1e88:	80 93 42 01 	sts	0x0142, r24
    1e8c:	90 93 43 01 	sts	0x0143, r25
    1e90:	a0 93 44 01 	sts	0x0144, r26
    1e94:	b0 93 45 01 	sts	0x0145, r27
    1e98:	08 95       	ret

00001e9a <V2P_CheckForExtendedAddress>:
}

void V2P_CheckForExtendedAddress(void)
{
	if (CurrAddress & (1UL << 31))                     // MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
    1e9a:	80 91 42 01 	lds	r24, 0x0142
    1e9e:	90 91 43 01 	lds	r25, 0x0143
    1ea2:	a0 91 44 01 	lds	r26, 0x0144
    1ea6:	b0 91 45 01 	lds	r27, 0x0145
    1eaa:	b7 ff       	sbrs	r27, 7
    1eac:	1e c0       	rjmp	.+60     	; 0x1eea <V2P_CheckForExtendedAddress+0x50>
	{
		USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);   // Load extended address command
    1eae:	8d e4       	ldi	r24, 0x4D	; 77
    1eb0:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
		USI_SPITransmit((CurrAddress & 0x00FF0000) >> 16); // The 3rd byte of the long holds the extended address
    1eba:	80 91 44 01 	lds	r24, 0x0144
    1ebe:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
		
		CurrAddress &= ~(1UL << 31);                   // Clear the flag
    1ec8:	80 91 42 01 	lds	r24, 0x0142
    1ecc:	90 91 43 01 	lds	r25, 0x0143
    1ed0:	a0 91 44 01 	lds	r26, 0x0144
    1ed4:	b0 91 45 01 	lds	r27, 0x0145
    1ed8:	bf 77       	andi	r27, 0x7F	; 127
    1eda:	80 93 42 01 	sts	0x0142, r24
    1ede:	90 93 43 01 	sts	0x0143, r25
    1ee2:	a0 93 44 01 	sts	0x0144, r26
    1ee6:	b0 93 45 01 	sts	0x0145, r27
    1eea:	08 95       	ret

00001eec <V2P_RunStateMachine>:
    1eec:	ef 92       	push	r14
    1eee:	ff 92       	push	r15
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	cf 93       	push	r28
    1ef6:	c0 e0       	ldi	r28, 0x00	; 0
    1ef8:	ee 24       	eor	r14, r14
    1efa:	ff 24       	eor	r15, r15
    1efc:	0e 94 9d 0b 	call	0x173a <BUFF_InitialiseBuffer>
    1f00:	c0 93 81 00 	sts	0x0081, r28
    1f04:	c0 93 46 01 	sts	0x0146, r28
    1f08:	10 92 42 01 	sts	0x0142, r1
    1f0c:	10 92 43 01 	sts	0x0143, r1
    1f10:	10 92 44 01 	sts	0x0144, r1
    1f14:	10 92 45 01 	sts	0x0145, r1
    1f18:	80 91 3f 01 	lds	r24, 0x013F
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	11 f4       	brne	.+4      	; 0x1f24 <V2P_RunStateMachine+0x38>
    1f20:	ca e0       	ldi	r28, 0x0A	; 10
    1f22:	11 c0       	rjmp	.+34     	; 0x1f46 <V2P_RunStateMachine+0x5a>
    1f24:	cc 23       	and	r28, r28
    1f26:	79 f0       	breq	.+30     	; 0x1f46 <V2P_RunStateMachine+0x5a>
    1f28:	10 92 3f 01 	sts	0x013F, r1
    1f2c:	10 92 40 01 	sts	0x0140, r1
    1f30:	10 92 b2 00 	sts	0x00B2, r1
    1f34:	80 ef       	ldi	r24, 0xF0	; 240
    1f36:	80 93 b3 00 	sts	0x00B3, r24
    1f3a:	82 e0       	ldi	r24, 0x02	; 2
    1f3c:	80 93 70 00 	sts	0x0070, r24
    1f40:	8f e0       	ldi	r24, 0x0F	; 15
    1f42:	80 93 b0 00 	sts	0x00B0, r24
    1f46:	8c 2f       	mov	r24, r28
    1f48:	99 27       	eor	r25, r25
    1f4a:	85 30       	cpi	r24, 0x05	; 5
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <V2P_RunStateMachine+0x66>
    1f50:	88 c0       	rjmp	.+272    	; 0x2062 <V2P_RunStateMachine+0x176>
    1f52:	86 30       	cpi	r24, 0x06	; 6
    1f54:	91 05       	cpc	r25, r1
    1f56:	ac f4       	brge	.+42     	; 0x1f82 <V2P_RunStateMachine+0x96>
    1f58:	82 30       	cpi	r24, 0x02	; 2
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <V2P_RunStateMachine+0x74>
    1f5e:	58 c0       	rjmp	.+176    	; 0x2010 <V2P_RunStateMachine+0x124>
    1f60:	83 30       	cpi	r24, 0x03	; 3
    1f62:	91 05       	cpc	r25, r1
    1f64:	34 f4       	brge	.+12     	; 0x1f72 <V2P_RunStateMachine+0x86>
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	99 f1       	breq	.+102    	; 0x1fd0 <V2P_RunStateMachine+0xe4>
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <V2P_RunStateMachine+0x84>
    1f6e:	4a c0       	rjmp	.+148    	; 0x2004 <V2P_RunStateMachine+0x118>
    1f70:	d3 cf       	rjmp	.-90     	; 0x1f18 <V2P_RunStateMachine+0x2c>
    1f72:	83 30       	cpi	r24, 0x03	; 3
    1f74:	91 05       	cpc	r25, r1
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <V2P_RunStateMachine+0x8e>
    1f78:	54 c0       	rjmp	.+168    	; 0x2022 <V2P_RunStateMachine+0x136>
    1f7a:	04 97       	sbiw	r24, 0x04	; 4
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <V2P_RunStateMachine+0x94>
    1f7e:	5c c0       	rjmp	.+184    	; 0x2038 <V2P_RunStateMachine+0x14c>
    1f80:	cb cf       	rjmp	.-106    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    1f82:	88 30       	cpi	r24, 0x08	; 8
    1f84:	91 05       	cpc	r25, r1
    1f86:	d1 f0       	breq	.+52     	; 0x1fbc <V2P_RunStateMachine+0xd0>
    1f88:	89 30       	cpi	r24, 0x09	; 9
    1f8a:	91 05       	cpc	r25, r1
    1f8c:	44 f4       	brge	.+16     	; 0x1f9e <V2P_RunStateMachine+0xb2>
    1f8e:	86 30       	cpi	r24, 0x06	; 6
    1f90:	91 05       	cpc	r25, r1
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <V2P_RunStateMachine+0xaa>
    1f94:	6e c0       	rjmp	.+220    	; 0x2072 <V2P_RunStateMachine+0x186>
    1f96:	07 97       	sbiw	r24, 0x07	; 7
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <V2P_RunStateMachine+0xb0>
    1f9a:	7f c0       	rjmp	.+254    	; 0x209a <V2P_RunStateMachine+0x1ae>
    1f9c:	bd cf       	rjmp	.-134    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    1f9e:	89 30       	cpi	r24, 0x09	; 9
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <V2P_RunStateMachine+0xba>
    1fa4:	ac c0       	rjmp	.+344    	; 0x20fe <V2P_RunStateMachine+0x212>
    1fa6:	0a 97       	sbiw	r24, 0x0a	; 10
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <V2P_RunStateMachine+0xc0>
    1faa:	b6 cf       	rjmp	.-148    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    1fac:	82 e0       	ldi	r24, 0x02	; 2
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	90 93 48 01 	sts	0x0148, r25
    1fb4:	80 93 47 01 	sts	0x0147, r24
    1fb8:	80 e8       	ldi	r24, 0x80	; 128
    1fba:	f7 c0       	rjmp	.+494    	; 0x21aa <V2P_RunStateMachine+0x2be>
    1fbc:	10 92 3f 01 	sts	0x013F, r1
    1fc0:	0e 94 9d 0b 	call	0x173a <BUFF_InitialiseBuffer>
    1fc4:	10 92 b0 00 	sts	0x00B0, r1
    1fc8:	10 92 70 00 	sts	0x0070, r1
    1fcc:	c0 e0       	ldi	r28, 0x00	; 0
    1fce:	a4 cf       	rjmp	.-184    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    1fd0:	80 91 b3 02 	lds	r24, 0x02B3
    1fd4:	81 11       	cpse	r24, r1
    1fd6:	c1 e0       	ldi	r28, 0x01	; 1
    1fd8:	f2 9b       	sbis	0x1e, 2	; 30
    1fda:	9e cf       	rjmp	.-196    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    1fdc:	80 91 46 01 	lds	r24, 0x0146
    1fe0:	88 23       	and	r24, r24
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <V2P_RunStateMachine+0xfa>
    1fe4:	99 cf       	rjmp	.-206    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    1fe6:	80 e8       	ldi	r24, 0x80	; 128
    1fe8:	80 93 61 00 	sts	0x0061, r24
    1fec:	83 e0       	ldi	r24, 0x03	; 3
    1fee:	80 93 61 00 	sts	0x0061, r24
    1ff2:	80 91 c1 00 	lds	r24, 0x00C1
    1ff6:	80 78       	andi	r24, 0x80	; 128
    1ff8:	80 93 c1 00 	sts	0x00C1, r24
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	80 93 81 00 	sts	0x0081, r24
    2002:	d9 c0       	rjmp	.+434    	; 0x21b6 <V2P_RunStateMachine+0x2ca>
    2004:	0e 94 20 09 	call	0x1240 <USART_Rx>
    2008:	8b 31       	cpi	r24, 0x1B	; 27
    200a:	89 f5       	brne	.+98     	; 0x206e <V2P_RunStateMachine+0x182>
    200c:	c2 e0       	ldi	r28, 0x02	; 2
    200e:	84 cf       	rjmp	.-248    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    2010:	0e 94 20 09 	call	0x1240 <USART_Rx>
    2014:	99 27       	eor	r25, r25
    2016:	90 93 4a 01 	sts	0x014A, r25
    201a:	80 93 49 01 	sts	0x0149, r24
    201e:	c3 e0       	ldi	r28, 0x03	; 3
    2020:	7b cf       	rjmp	.-266    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    2022:	0e 94 20 09 	call	0x1240 <USART_Rx>
    2026:	99 27       	eor	r25, r25
    2028:	98 2f       	mov	r25, r24
    202a:	88 27       	eor	r24, r24
    202c:	90 93 48 01 	sts	0x0148, r25
    2030:	80 93 47 01 	sts	0x0147, r24
    2034:	c4 e0       	ldi	r28, 0x04	; 4
    2036:	70 cf       	rjmp	.-288    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    2038:	0e 94 20 09 	call	0x1240 <USART_Rx>
    203c:	28 2f       	mov	r18, r24
    203e:	33 27       	eor	r19, r19
    2040:	80 91 47 01 	lds	r24, 0x0147
    2044:	90 91 48 01 	lds	r25, 0x0148
    2048:	82 2b       	or	r24, r18
    204a:	93 2b       	or	r25, r19
    204c:	90 93 48 01 	sts	0x0148, r25
    2050:	80 93 47 01 	sts	0x0147, r24
    2054:	83 51       	subi	r24, 0x13	; 19
    2056:	91 40       	sbci	r25, 0x01	; 1
    2058:	50 f4       	brcc	.+20     	; 0x206e <V2P_RunStateMachine+0x182>
    205a:	c5 e0       	ldi	r28, 0x05	; 5
    205c:	ee 24       	eor	r14, r14
    205e:	ff 24       	eor	r15, r15
    2060:	5b cf       	rjmp	.-330    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    2062:	0e 94 20 09 	call	0x1240 <USART_Rx>
    2066:	8e 30       	cpi	r24, 0x0E	; 14
    2068:	11 f4       	brne	.+4      	; 0x206e <V2P_RunStateMachine+0x182>
    206a:	c6 e0       	ldi	r28, 0x06	; 6
    206c:	55 cf       	rjmp	.-342    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    206e:	c9 e0       	ldi	r28, 0x09	; 9
    2070:	53 cf       	rjmp	.-346    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    2072:	80 91 47 01 	lds	r24, 0x0147
    2076:	90 91 48 01 	lds	r25, 0x0148
    207a:	e8 16       	cp	r14, r24
    207c:	f9 06       	cpc	r15, r25
    207e:	11 f4       	brne	.+4      	; 0x2084 <V2P_RunStateMachine+0x198>
    2080:	c7 e0       	ldi	r28, 0x07	; 7
    2082:	4a cf       	rjmp	.-364    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    2084:	87 01       	movw	r16, r14
    2086:	05 5b       	subi	r16, 0xB5	; 181
    2088:	1e 4f       	sbci	r17, 0xFE	; 254
    208a:	08 94       	sec
    208c:	e1 1c       	adc	r14, r1
    208e:	f1 1c       	adc	r15, r1
    2090:	0e 94 20 09 	call	0x1240 <USART_Rx>
    2094:	f8 01       	movw	r30, r16
    2096:	80 83       	st	Z, r24
    2098:	3f cf       	rjmp	.-386    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    209a:	0e 94 37 0e 	call	0x1c6e <V2P_GetChecksum>
    209e:	18 2f       	mov	r17, r24
    20a0:	0e 94 20 09 	call	0x1240 <USART_Rx>
    20a4:	18 17       	cp	r17, r24
    20a6:	09 f0       	breq	.+2      	; 0x20aa <V2P_RunStateMachine+0x1be>
    20a8:	79 c0       	rjmp	.+242    	; 0x219c <V2P_RunStateMachine+0x2b0>
    20aa:	c0 91 3f 01 	lds	r28, 0x013F
    20ae:	cc 23       	and	r28, r28
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <V2P_RunStateMachine+0x1c8>
    20b2:	74 c0       	rjmp	.+232    	; 0x219c <V2P_RunStateMachine+0x2b0>
    20b4:	80 91 4b 01 	lds	r24, 0x014B
    20b8:	99 27       	eor	r25, r25
    20ba:	84 30       	cpi	r24, 0x04	; 4
    20bc:	91 05       	cpc	r25, r1
    20be:	3c f4       	brge	.+14     	; 0x20ce <V2P_RunStateMachine+0x1e2>
    20c0:	82 30       	cpi	r24, 0x02	; 2
    20c2:	91 05       	cpc	r25, r1
    20c4:	0c f0       	brlt	.+2      	; 0x20c8 <V2P_RunStateMachine+0x1dc>
    20c6:	61 c0       	rjmp	.+194    	; 0x218a <V2P_RunStateMachine+0x29e>
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	39 f0       	breq	.+14     	; 0x20da <V2P_RunStateMachine+0x1ee>
    20cc:	61 c0       	rjmp	.+194    	; 0x2190 <V2P_RunStateMachine+0x2a4>
    20ce:	86 30       	cpi	r24, 0x06	; 6
    20d0:	91 05       	cpc	r25, r1
    20d2:	e9 f0       	breq	.+58     	; 0x210e <V2P_RunStateMachine+0x222>
    20d4:	07 97       	sbiw	r24, 0x07	; 7
    20d6:	99 f0       	breq	.+38     	; 0x20fe <V2P_RunStateMachine+0x212>
    20d8:	5b c0       	rjmp	.+182    	; 0x2190 <V2P_RunStateMachine+0x2a4>
    20da:	8b e0       	ldi	r24, 0x0B	; 11
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	90 93 48 01 	sts	0x0148, r25
    20e2:	80 93 47 01 	sts	0x0147, r24
    20e6:	ab e4       	ldi	r26, 0x4B	; 75
    20e8:	b1 e0       	ldi	r27, 0x01	; 1
    20ea:	e2 ee       	ldi	r30, 0xE2	; 226
    20ec:	f3 e0       	ldi	r31, 0x03	; 3
    20ee:	9a e0       	ldi	r25, 0x0A	; 10
    20f0:	84 91       	lpm	r24, Z
    20f2:	8d 93       	st	X+, r24
    20f4:	91 50       	subi	r25, 0x01	; 1
    20f6:	31 96       	adiw	r30, 0x01	; 1
    20f8:	97 ff       	sbrs	r25, 7
    20fa:	fa cf       	rjmp	.-12     	; 0x20f0 <V2P_RunStateMachine+0x204>
    20fc:	58 c0       	rjmp	.+176    	; 0x21ae <V2P_RunStateMachine+0x2c2>
    20fe:	82 e0       	ldi	r24, 0x02	; 2
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	90 93 48 01 	sts	0x0148, r25
    2106:	80 93 47 01 	sts	0x0147, r24
    210a:	80 ec       	ldi	r24, 0xC0	; 192
    210c:	4e c0       	rjmp	.+156    	; 0x21aa <V2P_RunStateMachine+0x2be>
    210e:	82 e0       	ldi	r24, 0x02	; 2
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	90 93 48 01 	sts	0x0148, r25
    2116:	80 93 47 01 	sts	0x0147, r24
    211a:	0e 94 4d 0f 	call	0x1e9a <V2P_CheckForExtendedAddress>
    211e:	80 91 4c 01 	lds	r24, 0x014C
    2122:	99 27       	eor	r25, r25
    2124:	aa 27       	eor	r26, r26
    2126:	bb 27       	eor	r27, r27
    2128:	b8 2f       	mov	r27, r24
    212a:	aa 27       	eor	r26, r26
    212c:	99 27       	eor	r25, r25
    212e:	88 27       	eor	r24, r24
    2130:	20 91 4d 01 	lds	r18, 0x014D
    2134:	33 27       	eor	r19, r19
    2136:	44 27       	eor	r20, r20
    2138:	55 27       	eor	r21, r21
    213a:	a9 01       	movw	r20, r18
    213c:	33 27       	eor	r19, r19
    213e:	22 27       	eor	r18, r18
    2140:	82 2b       	or	r24, r18
    2142:	93 2b       	or	r25, r19
    2144:	a4 2b       	or	r26, r20
    2146:	b5 2b       	or	r27, r21
    2148:	20 91 4e 01 	lds	r18, 0x014E
    214c:	33 27       	eor	r19, r19
    214e:	44 27       	eor	r20, r20
    2150:	55 27       	eor	r21, r21
    2152:	54 2f       	mov	r21, r20
    2154:	43 2f       	mov	r20, r19
    2156:	32 2f       	mov	r19, r18
    2158:	22 27       	eor	r18, r18
    215a:	82 2b       	or	r24, r18
    215c:	93 2b       	or	r25, r19
    215e:	a4 2b       	or	r26, r20
    2160:	b5 2b       	or	r27, r21
    2162:	20 91 4f 01 	lds	r18, 0x014F
    2166:	33 27       	eor	r19, r19
    2168:	44 27       	eor	r20, r20
    216a:	55 27       	eor	r21, r21
    216c:	82 2b       	or	r24, r18
    216e:	93 2b       	or	r25, r19
    2170:	a4 2b       	or	r26, r20
    2172:	b5 2b       	or	r27, r21
    2174:	80 93 42 01 	sts	0x0142, r24
    2178:	90 93 43 01 	sts	0x0143, r25
    217c:	a0 93 44 01 	sts	0x0144, r26
    2180:	b0 93 45 01 	sts	0x0145, r27
    2184:	c0 93 4c 01 	sts	0x014C, r28
    2188:	12 c0       	rjmp	.+36     	; 0x21ae <V2P_RunStateMachine+0x2c2>
    218a:	0e 94 98 0e 	call	0x1d30 <V2P_GetSetParamater>
    218e:	11 c0       	rjmp	.+34     	; 0x21b2 <V2P_RunStateMachine+0x2c6>
    2190:	e0 91 02 01 	lds	r30, 0x0102
    2194:	f0 91 03 01 	lds	r31, 0x0103
    2198:	09 95       	icall
    219a:	0b c0       	rjmp	.+22     	; 0x21b2 <V2P_RunStateMachine+0x2c6>
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	90 93 48 01 	sts	0x0148, r25
    21a4:	80 93 47 01 	sts	0x0147, r24
    21a8:	81 ec       	ldi	r24, 0xC1	; 193
    21aa:	80 93 4c 01 	sts	0x014C, r24
    21ae:	0e 94 58 0e 	call	0x1cb0 <V2P_SendPacket>
    21b2:	c8 e0       	ldi	r28, 0x08	; 8
    21b4:	b1 ce       	rjmp	.-670    	; 0x1f18 <V2P_RunStateMachine+0x2c>
    21b6:	cf 91       	pop	r28
    21b8:	1f 91       	pop	r17
    21ba:	0f 91       	pop	r16
    21bc:	ff 90       	pop	r15
    21be:	ef 90       	pop	r14
    21c0:	08 95       	ret

000021c2 <ISPCC_EnterChipProgrammingMode>:

// ======================================================================================

void ISPCC_EnterChipProgrammingMode(void)
{
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	cf 93       	push	r28
	uint8_t ByteDelay = PacketBytes[5];
    21c8:	10 91 50 01 	lds	r17, 0x0150
	uint8_t Attempts  = PacketBytes[4];
    21cc:	c0 91 4f 01 	lds	r28, 0x014F
	uint8_t Response;

	MAIN_Delay1MS(PacketBytes[2]);         // Wait before continuing, amount specified in the packet
    21d0:	80 91 4d 01 	lds	r24, 0x014D
    21d4:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>

	if ((!(Attempts)) || (Attempts > 100)) // if no attempts or too high a value is specified, a fixed number is chosen
    21d8:	8c 2f       	mov	r24, r28
    21da:	81 50       	subi	r24, 0x01	; 1
    21dc:	84 36       	cpi	r24, 0x64	; 100
    21de:	08 f0       	brcs	.+2      	; 0x21e2 <ISPCC_EnterChipProgrammingMode+0x20>
	   Attempts = 24;
    21e0:	c8 e1       	ldi	r28, 0x18	; 24
		
	while (Attempts--)
	{
		USI_SPITransmit(PacketBytes[8]);
		MAIN_Delay1MS(ByteDelay);
		USI_SPITransmit(PacketBytes[9]);
		MAIN_Delay1MS(ByteDelay);
			
		Response = USI_SPITransmit(PacketBytes[10]);
		MAIN_Delay1MS(ByteDelay);

		if (PacketBytes[7] == ISPCC_POLL_MODE_AVR)
		  USI_SPITransmit(PacketBytes[11]);
		else
		  Response = USI_SPITransmit(PacketBytes[11]);
				
		if (!(PacketBytes[7]) || (Response == PacketBytes[6])) // Polling disabled, or returned value matches expected poll value
		{
			MAIN_Delay1MS(ByteDelay);

			InProgrammingMode = TRUE;
			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;
			return;
		}
		
		MAIN_Delay1MS(ByteDelay);
		USI_SPIToggleClock();            // Out of sync, shift in one bit and try again
    21e2:	c1 50       	subi	r28, 0x01	; 1
    21e4:	cf 3f       	cpi	r28, 0xFF	; 255
    21e6:	09 f4       	brne	.+2      	; 0x21ea <ISPCC_EnterChipProgrammingMode+0x28>
    21e8:	3f c0       	rjmp	.+126    	; 0x2268 <ISPCC_EnterChipProgrammingMode+0xa6>
    21ea:	80 91 53 01 	lds	r24, 0x0153
    21ee:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    21f2:	81 2f       	mov	r24, r17
    21f4:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    21f8:	80 91 54 01 	lds	r24, 0x0154
    21fc:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    2200:	81 2f       	mov	r24, r17
    2202:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    2206:	80 91 55 01 	lds	r24, 0x0155
    220a:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    220e:	08 2f       	mov	r16, r24
    2210:	81 2f       	mov	r24, r17
    2212:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    2216:	80 91 52 01 	lds	r24, 0x0152
    221a:	83 30       	cpi	r24, 0x03	; 3
    221c:	29 f4       	brne	.+10     	; 0x2228 <ISPCC_EnterChipProgrammingMode+0x66>
    221e:	80 91 56 01 	lds	r24, 0x0156
    2222:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    2226:	05 c0       	rjmp	.+10     	; 0x2232 <ISPCC_EnterChipProgrammingMode+0x70>
    2228:	80 91 56 01 	lds	r24, 0x0156
    222c:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    2230:	08 2f       	mov	r16, r24
    2232:	80 91 52 01 	lds	r24, 0x0152
    2236:	88 23       	and	r24, r24
    2238:	21 f0       	breq	.+8      	; 0x2242 <ISPCC_EnterChipProgrammingMode+0x80>
    223a:	80 91 51 01 	lds	r24, 0x0151
    223e:	08 17       	cp	r16, r24
    2240:	69 f4       	brne	.+26     	; 0x225c <ISPCC_EnterChipProgrammingMode+0x9a>
    2242:	81 2f       	mov	r24, r17
    2244:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	80 93 46 01 	sts	0x0146, r24
    224e:	81 b3       	in	r24, 0x11	; 17
    2250:	8f 7c       	andi	r24, 0xCF	; 207
    2252:	80 62       	ori	r24, 0x20	; 32
    2254:	81 bb       	out	0x11, r24	; 17
    2256:	10 92 4c 01 	sts	0x014C, r1
    225a:	0d c0       	rjmp	.+26     	; 0x2276 <ISPCC_EnterChipProgrammingMode+0xb4>
    225c:	81 2f       	mov	r24, r17
    225e:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    2262:	0e 94 bc 09 	call	0x1378 <USI_SPIToggleClock>
    2266:	bd cf       	rjmp	.-134    	; 0x21e2 <ISPCC_EnterChipProgrammingMode+0x20>
	}

	// If function hasn't returned by now, all the attempts have failed. Show this by
	// resetting the status leds to green (ready) and send a fail message.

	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
    2268:	81 b3       	in	r24, 0x11	; 17
    226a:	8f 7c       	andi	r24, 0xCF	; 207
    226c:	80 61       	ori	r24, 0x10	; 16
    226e:	81 bb       	out	0x11, r24	; 17
	PacketBytes[1] = STATUS_CMD_FAILED;
    2270:	80 ec       	ldi	r24, 0xC0	; 192
    2272:	80 93 4c 01 	sts	0x014C, r24
    2276:	cf 91       	pop	r28
    2278:	1f 91       	pop	r17
    227a:	0f 91       	pop	r16
    227c:	08 95       	ret

0000227e <ISPCC_PollForProgComplete>:
}

void ISPCC_ProgramChip(void)
{
	uint16_t PollAddress  = 0;
	uint8_t  ProgMode     = PacketBytes[3];
	uint8_t  WriteCommand = PacketBytes[5];
	uint16_t StartAddress = (uint16_t)CurrAddress;
	uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
	                      | PacketBytes[2];
	uint8_t  PollType;
	uint8_t  ByteToWrite;
			
	if (ProgMode & ISPCC_PROG_MODE_PAGE)                 // Page writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++) // Transmit the page bytes
		{
			ByteToWrite = PacketBytes[10 + WriteByte];
		
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash write mode - word addresses so MSB/LSB masking 
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else                                         // EEPROM write mode - byte addresses so no masking 
			   USI_SPITransmit(WriteCommand);

			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Only the LSW of the address should be sent
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			if (!(PollAddress))
			{
				if ((PacketBytes[8] != ByteToWrite)       // Can do polling
				   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
				{
					PollAddress = (CurrAddress & 0xFFFF); // Save the current address
				
					if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
					   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
				}
			}

			// Flash addresses are in words; only increment address on odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();
		}

		PollType = ProgMode;

		if (ProgMode & ISPCC_PROG_MODE_PAGEDONE)         // If this packet is the end of a page, we need to send the program page command
		{
			USI_SPITransmit(PacketBytes[6]);             // Send the write program memory page command
			USI_SPITransmitWord(StartAddress);           // Send the page address word
			USI_SPITransmit(0x00);

			if (!(PollAddress))                          // No polling address
			   PollType = ((ProgMode & ~ISPCC_PAGE_POLLTYPE_MASK) | ISPCC_PAGE_POLLTYPE_WAIT);

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
	else                                                 // Flash Word writing mode or EEPROM byte writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++)
		{
			ByteToWrite = PacketBytes[10 + WriteByte];

			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else
			   USI_SPITransmit(WriteCommand);					
					
			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Transmit the current address to the slave AVR
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			PollType = ProgMode;

			if ((PacketBytes[8] != ByteToWrite)           // Can do polling
			   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
			{
				PollAddress = (CurrAddress & 0xFFFF);     // Save the current address;

				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
				   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
			}
			else
			{
				PollType = ((ProgMode & ~ISPCC_WORD_POLLTYPE_MASK) | ISPCC_WORD_POLLTYPE_WAIT);
			}					

			// Flash addresses are in words; only increment address on the odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
}

void ISPCC_PollForProgComplete(const uint8_t PollData, uint16_t PollAddr)
{
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	eb 01       	movw	r28, r22
	uint8_t PollType;
	uint8_t ProgCommand;

	if (PollData & ISPCC_PROG_MODE_PAGE)
    2286:	99 27       	eor	r25, r25
    2288:	80 ff       	sbrs	r24, 0
    228a:	08 c0       	rjmp	.+16     	; 0x229c <ISPCC_PollForProgComplete+0x1e>
	   PollType = ((PollData & ISPCC_PAGE_POLLTYPE_MASK) >> ISPCC_PAGE_POLLTYPE_MASKSHIFT);
    228c:	80 77       	andi	r24, 0x70	; 112
    228e:	90 70       	andi	r25, 0x00	; 0
    2290:	34 e0       	ldi	r19, 0x04	; 4
    2292:	95 95       	asr	r25
    2294:	87 95       	ror	r24
    2296:	3a 95       	dec	r19
    2298:	e1 f7       	brne	.-8      	; 0x2292 <ISPCC_PollForProgComplete+0x14>
    229a:	04 c0       	rjmp	.+8      	; 0x22a4 <ISPCC_PollForProgComplete+0x26>
	else
	   PollType = ((PollData & ISPCC_WORD_POLLTYPE_MASK) >> ISPCC_WORD_POLLTYPE_MASKSHIFT);	
    229c:	8e 70       	andi	r24, 0x0E	; 14
    229e:	90 70       	andi	r25, 0x00	; 0
    22a0:	95 95       	asr	r25
    22a2:	87 95       	ror	r24

	switch (PollType & ISPCC_POLLTYPE_MASK)
    22a4:	99 27       	eor	r25, r25
    22a6:	87 70       	andi	r24, 0x07	; 7
    22a8:	90 70       	andi	r25, 0x00	; 0
    22aa:	82 30       	cpi	r24, 0x02	; 2
    22ac:	91 05       	cpc	r25, r1
    22ae:	19 f0       	breq	.+6      	; 0x22b6 <ISPCC_PollForProgComplete+0x38>
    22b0:	04 97       	sbiw	r24, 0x04	; 4
    22b2:	e1 f0       	breq	.+56     	; 0x22ec <ISPCC_PollForProgComplete+0x6e>
    22b4:	26 c0       	rjmp	.+76     	; 0x2302 <ISPCC_PollForProgComplete+0x84>
	{
		case ISPCC_POLLTYPE_DATA:
			ProgCommand = PacketBytes[7];
    22b6:	10 91 52 01 	lds	r17, 0x0152
			
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash uses word addresses
    22ba:	80 91 4b 01 	lds	r24, 0x014B
    22be:	83 31       	cpi	r24, 0x13	; 19
    22c0:	39 f4       	brne	.+14     	; 0x22d0 <ISPCC_PollForProgComplete+0x52>
			{
				ProgCommand  |= ((PollAddr & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ);
    22c2:	81 2f       	mov	r24, r17
    22c4:	99 27       	eor	r25, r25
    22c6:	c0 fd       	sbrc	r28, 0
    22c8:	88 60       	ori	r24, 0x08	; 8
    22ca:	18 2f       	mov	r17, r24
				PollAddr    >>= 1;
    22cc:	d6 95       	lsr	r29
    22ce:	c7 95       	ror	r28
			}

			do
			{
				USI_SPITransmit(ProgCommand);
    22d0:	81 2f       	mov	r24, r17
    22d2:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
				USI_SPITransmitWord(PollAddr);
    22d6:	ce 01       	movw	r24, r28
    22d8:	0e 94 ae 09 	call	0x135c <USI_SPITransmitWord>
			}
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    22e2:	90 91 53 01 	lds	r25, 0x0153
    22e6:	89 17       	cp	r24, r25
    22e8:	99 f3       	breq	.-26     	; 0x22d0 <ISPCC_PollForProgComplete+0x52>
			while (USI_SPITransmit(0x00) == PacketBytes[8]);
						
			break;
    22ea:	0f c0       	rjmp	.+30     	; 0x230a <ISPCC_PollForProgComplete+0x8c>
		case ISPCC_POLLTYPE_READY:
			do
			   USI_SPITransmitWord(0xF000);
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 ef       	ldi	r25, 0xF0	; 240
    22f0:	0e 94 ae 09 	call	0x135c <USI_SPITransmitWord>
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	0e 94 ae 09 	call	0x135c <USI_SPITransmitWord>
    22fc:	80 fd       	sbrc	r24, 0
    22fe:	f6 cf       	rjmp	.-20     	; 0x22ec <ISPCC_PollForProgComplete+0x6e>
			while (USI_SPITransmitWord(0x0000) & ISPCC_POLL_BUSYFLAG);

			break;
    2300:	04 c0       	rjmp	.+8      	; 0x230a <ISPCC_PollForProgComplete+0x8c>
		default:                                      // Default is Wait polling
			MAIN_Delay1MS(PacketBytes[4]);	
    2302:	80 91 4f 01 	lds	r24, 0x014F
    2306:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	1f 91       	pop	r17
    2310:	08 95       	ret

00002312 <ISPCC_ProgramChip>:
    2312:	6f 92       	push	r6
    2314:	7f 92       	push	r7
    2316:	9f 92       	push	r9
    2318:	af 92       	push	r10
    231a:	bf 92       	push	r11
    231c:	cf 92       	push	r12
    231e:	df 92       	push	r13
    2320:	ef 92       	push	r14
    2322:	ff 92       	push	r15
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	00 e0       	ldi	r16, 0x00	; 0
    232e:	10 e0       	ldi	r17, 0x00	; 0
    2330:	90 90 4e 01 	lds	r9, 0x014E
    2334:	c0 90 50 01 	lds	r12, 0x0150
    2338:	60 90 42 01 	lds	r6, 0x0142
    233c:	70 90 43 01 	lds	r7, 0x0143
    2340:	80 91 4c 01 	lds	r24, 0x014C
    2344:	99 27       	eor	r25, r25
    2346:	b8 2e       	mov	r11, r24
    2348:	aa 24       	eor	r10, r10
    234a:	80 91 4d 01 	lds	r24, 0x014D
    234e:	99 27       	eor	r25, r25
    2350:	a8 2a       	or	r10, r24
    2352:	b9 2a       	or	r11, r25
    2354:	90 fe       	sbrs	r9, 0
    2356:	62 c0       	rjmp	.+196    	; 0x241c <ISPCC_ProgramChip+0x10a>
    2358:	78 01       	movw	r14, r16
    235a:	0a 15       	cp	r16, r10
    235c:	1b 05       	cpc	r17, r11
    235e:	08 f0       	brcs	.+2      	; 0x2362 <ISPCC_ProgramChip+0x50>
    2360:	46 c0       	rjmp	.+140    	; 0x23ee <ISPCC_ProgramChip+0xdc>
    2362:	c5 e5       	ldi	r28, 0x55	; 85
    2364:	d1 e0       	ldi	r29, 0x01	; 1
    2366:	d9 90       	ld	r13, Y+
    2368:	80 91 4b 01 	lds	r24, 0x014B
    236c:	83 31       	cpi	r24, 0x13	; 19
    236e:	31 f4       	brne	.+12     	; 0x237c <ISPCC_ProgramChip+0x6a>
    2370:	8c 2d       	mov	r24, r12
    2372:	99 27       	eor	r25, r25
    2374:	e0 fe       	sbrs	r14, 0
    2376:	03 c0       	rjmp	.+6      	; 0x237e <ISPCC_ProgramChip+0x6c>
    2378:	88 60       	ori	r24, 0x08	; 8
    237a:	01 c0       	rjmp	.+2      	; 0x237e <ISPCC_ProgramChip+0x6c>
    237c:	8c 2d       	mov	r24, r12
    237e:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    2382:	80 91 42 01 	lds	r24, 0x0142
    2386:	90 91 43 01 	lds	r25, 0x0143
    238a:	0e 94 ae 09 	call	0x135c <USI_SPITransmitWord>
    238e:	8d 2d       	mov	r24, r13
    2390:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    2394:	01 15       	cp	r16, r1
    2396:	11 05       	cpc	r17, r1
    2398:	d9 f4       	brne	.+54     	; 0x23d0 <ISPCC_ProgramChip+0xbe>
    239a:	80 91 53 01 	lds	r24, 0x0153
    239e:	8d 15       	cp	r24, r13
    23a0:	b9 f0       	breq	.+46     	; 0x23d0 <ISPCC_ProgramChip+0xbe>
    23a2:	90 91 4b 01 	lds	r25, 0x014B
    23a6:	93 31       	cpi	r25, 0x13	; 19
    23a8:	31 f0       	breq	.+12     	; 0x23b6 <ISPCC_ProgramChip+0xa4>
    23aa:	95 31       	cpi	r25, 0x15	; 21
    23ac:	89 f4       	brne	.+34     	; 0x23d0 <ISPCC_ProgramChip+0xbe>
    23ae:	80 91 54 01 	lds	r24, 0x0154
    23b2:	8d 15       	cp	r24, r13
    23b4:	69 f0       	breq	.+26     	; 0x23d0 <ISPCC_ProgramChip+0xbe>
    23b6:	00 91 42 01 	lds	r16, 0x0142
    23ba:	10 91 43 01 	lds	r17, 0x0143
    23be:	93 31       	cpi	r25, 0x13	; 19
    23c0:	39 f4       	brne	.+14     	; 0x23d0 <ISPCC_ProgramChip+0xbe>
    23c2:	00 0f       	add	r16, r16
    23c4:	11 1f       	adc	r17, r17
    23c6:	c7 01       	movw	r24, r14
    23c8:	81 70       	andi	r24, 0x01	; 1
    23ca:	90 70       	andi	r25, 0x00	; 0
    23cc:	08 0f       	add	r16, r24
    23ce:	19 1f       	adc	r17, r25
    23d0:	e0 fc       	sbrc	r14, 0
    23d2:	04 c0       	rjmp	.+8      	; 0x23dc <ISPCC_ProgramChip+0xca>
    23d4:	80 91 4b 01 	lds	r24, 0x014B
    23d8:	85 31       	cpi	r24, 0x15	; 21
    23da:	11 f4       	brne	.+4      	; 0x23e0 <ISPCC_ProgramChip+0xce>
    23dc:	0e 94 39 0f 	call	0x1e72 <V2P_IncrementCurrAddress>
    23e0:	08 94       	sec
    23e2:	e1 1c       	adc	r14, r1
    23e4:	f1 1c       	adc	r15, r1
    23e6:	ea 14       	cp	r14, r10
    23e8:	fb 04       	cpc	r15, r11
    23ea:	08 f4       	brcc	.+2      	; 0x23ee <ISPCC_ProgramChip+0xdc>
    23ec:	bc cf       	rjmp	.-136    	; 0x2366 <ISPCC_ProgramChip+0x54>
    23ee:	c9 2d       	mov	r28, r9
    23f0:	97 fe       	sbrs	r9, 7
    23f2:	69 c0       	rjmp	.+210    	; 0x24c6 <ISPCC_ProgramChip+0x1b4>
    23f4:	80 91 51 01 	lds	r24, 0x0151
    23f8:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    23fc:	c3 01       	movw	r24, r6
    23fe:	0e 94 ae 09 	call	0x135c <USI_SPITransmitWord>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    2408:	01 15       	cp	r16, r1
    240a:	11 05       	cpc	r17, r1
    240c:	11 f4       	brne	.+4      	; 0x2412 <ISPCC_ProgramChip+0x100>
    240e:	cf 78       	andi	r28, 0x8F	; 143
    2410:	c0 61       	ori	r28, 0x10	; 16
    2412:	b8 01       	movw	r22, r16
    2414:	8c 2f       	mov	r24, r28
    2416:	0e 94 3f 11 	call	0x227e <ISPCC_PollForProgComplete>
    241a:	55 c0       	rjmp	.+170    	; 0x24c6 <ISPCC_ProgramChip+0x1b4>
    241c:	78 01       	movw	r14, r16
    241e:	0a 15       	cp	r16, r10
    2420:	1b 05       	cpc	r17, r11
    2422:	08 f0       	brcs	.+2      	; 0x2426 <ISPCC_ProgramChip+0x114>
    2424:	50 c0       	rjmp	.+160    	; 0x24c6 <ISPCC_ProgramChip+0x1b4>
    2426:	55 e5       	ldi	r21, 0x55	; 85
    2428:	65 2e       	mov	r6, r21
    242a:	51 e0       	ldi	r21, 0x01	; 1
    242c:	75 2e       	mov	r7, r21
    242e:	f3 01       	movw	r30, r6
    2430:	d1 90       	ld	r13, Z+
    2432:	3f 01       	movw	r6, r30
    2434:	80 91 4b 01 	lds	r24, 0x014B
    2438:	83 31       	cpi	r24, 0x13	; 19
    243a:	31 f4       	brne	.+12     	; 0x2448 <ISPCC_ProgramChip+0x136>
    243c:	8c 2d       	mov	r24, r12
    243e:	99 27       	eor	r25, r25
    2440:	e0 fe       	sbrs	r14, 0
    2442:	03 c0       	rjmp	.+6      	; 0x244a <ISPCC_ProgramChip+0x138>
    2444:	88 60       	ori	r24, 0x08	; 8
    2446:	01 c0       	rjmp	.+2      	; 0x244a <ISPCC_ProgramChip+0x138>
    2448:	8c 2d       	mov	r24, r12
    244a:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    244e:	80 91 42 01 	lds	r24, 0x0142
    2452:	90 91 43 01 	lds	r25, 0x0143
    2456:	0e 94 ae 09 	call	0x135c <USI_SPITransmitWord>
    245a:	8d 2d       	mov	r24, r13
    245c:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    2460:	c9 2d       	mov	r28, r9
    2462:	80 91 53 01 	lds	r24, 0x0153
    2466:	8d 15       	cp	r24, r13
    2468:	c1 f0       	breq	.+48     	; 0x249a <ISPCC_ProgramChip+0x188>
    246a:	90 91 4b 01 	lds	r25, 0x014B
    246e:	93 31       	cpi	r25, 0x13	; 19
    2470:	31 f0       	breq	.+12     	; 0x247e <ISPCC_ProgramChip+0x16c>
    2472:	95 31       	cpi	r25, 0x15	; 21
    2474:	91 f4       	brne	.+36     	; 0x249a <ISPCC_ProgramChip+0x188>
    2476:	80 91 54 01 	lds	r24, 0x0154
    247a:	8d 15       	cp	r24, r13
    247c:	71 f0       	breq	.+28     	; 0x249a <ISPCC_ProgramChip+0x188>
    247e:	00 91 42 01 	lds	r16, 0x0142
    2482:	10 91 43 01 	lds	r17, 0x0143
    2486:	93 31       	cpi	r25, 0x13	; 19
    2488:	59 f4       	brne	.+22     	; 0x24a0 <ISPCC_ProgramChip+0x18e>
    248a:	00 0f       	add	r16, r16
    248c:	11 1f       	adc	r17, r17
    248e:	c7 01       	movw	r24, r14
    2490:	81 70       	andi	r24, 0x01	; 1
    2492:	90 70       	andi	r25, 0x00	; 0
    2494:	08 0f       	add	r16, r24
    2496:	19 1f       	adc	r17, r25
    2498:	03 c0       	rjmp	.+6      	; 0x24a0 <ISPCC_ProgramChip+0x18e>
    249a:	c9 2d       	mov	r28, r9
    249c:	c1 7f       	andi	r28, 0xF1	; 241
    249e:	c2 60       	ori	r28, 0x02	; 2
    24a0:	e0 fc       	sbrc	r14, 0
    24a2:	04 c0       	rjmp	.+8      	; 0x24ac <ISPCC_ProgramChip+0x19a>
    24a4:	80 91 4b 01 	lds	r24, 0x014B
    24a8:	85 31       	cpi	r24, 0x15	; 21
    24aa:	11 f4       	brne	.+4      	; 0x24b0 <ISPCC_ProgramChip+0x19e>
    24ac:	0e 94 39 0f 	call	0x1e72 <V2P_IncrementCurrAddress>
    24b0:	b8 01       	movw	r22, r16
    24b2:	8c 2f       	mov	r24, r28
    24b4:	0e 94 3f 11 	call	0x227e <ISPCC_PollForProgComplete>
    24b8:	08 94       	sec
    24ba:	e1 1c       	adc	r14, r1
    24bc:	f1 1c       	adc	r15, r1
    24be:	ea 14       	cp	r14, r10
    24c0:	fb 04       	cpc	r15, r11
    24c2:	08 f4       	brcc	.+2      	; 0x24c6 <ISPCC_ProgramChip+0x1b4>
    24c4:	b4 cf       	rjmp	.-152    	; 0x242e <ISPCC_ProgramChip+0x11c>
    24c6:	df 91       	pop	r29
    24c8:	cf 91       	pop	r28
    24ca:	1f 91       	pop	r17
    24cc:	0f 91       	pop	r16
    24ce:	ff 90       	pop	r15
    24d0:	ef 90       	pop	r14
    24d2:	df 90       	pop	r13
    24d4:	cf 90       	pop	r12
    24d6:	bf 90       	pop	r11
    24d8:	af 90       	pop	r10
    24da:	9f 90       	pop	r9
    24dc:	7f 90       	pop	r7
    24de:	6f 90       	pop	r6
    24e0:	08 95       	ret

000024e2 <AICI_InterpretPacket>:

// ======================================================================================

void AICI_InterpretPacket(void)
{
    24e2:	df 92       	push	r13
    24e4:	ef 92       	push	r14
    24e6:	ff 92       	push	r15
    24e8:	0f 93       	push	r16
    24ea:	1f 93       	push	r17
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
	switch (PacketBytes[0])
    24f0:	80 91 4b 01 	lds	r24, 0x014B
    24f4:	99 27       	eor	r25, r25
    24f6:	86 31       	cpi	r24, 0x16	; 22
    24f8:	91 05       	cpc	r25, r1
    24fa:	09 f4       	brne	.+2      	; 0x24fe <AICI_InterpretPacket+0x1c>
    24fc:	fb c0       	rjmp	.+502    	; 0x26f4 <AICI_InterpretPacket+0x212>
    24fe:	87 31       	cpi	r24, 0x17	; 23
    2500:	91 05       	cpc	r25, r1
    2502:	94 f4       	brge	.+36     	; 0x2528 <AICI_InterpretPacket+0x46>
    2504:	82 31       	cpi	r24, 0x12	; 18
    2506:	91 05       	cpc	r25, r1
    2508:	09 f4       	brne	.+2      	; 0x250c <AICI_InterpretPacket+0x2a>
    250a:	60 c0       	rjmp	.+192    	; 0x25cc <AICI_InterpretPacket+0xea>
    250c:	83 31       	cpi	r24, 0x13	; 19
    250e:	91 05       	cpc	r25, r1
    2510:	3c f4       	brge	.+14     	; 0x2520 <AICI_InterpretPacket+0x3e>
    2512:	80 31       	cpi	r24, 0x10	; 16
    2514:	91 05       	cpc	r25, r1
    2516:	f9 f0       	breq	.+62     	; 0x2556 <AICI_InterpretPacket+0x74>
    2518:	41 97       	sbiw	r24, 0x11	; 17
    251a:	09 f4       	brne	.+2      	; 0x251e <AICI_InterpretPacket+0x3c>
    251c:	3d c0       	rjmp	.+122    	; 0x2598 <AICI_InterpretPacket+0xb6>
    251e:	3e c1       	rjmp	.+636    	; 0x279c <AICI_InterpretPacket+0x2ba>
    2520:	44 97       	sbiw	r24, 0x14	; 20
    2522:	09 f4       	brne	.+2      	; 0x2526 <AICI_InterpretPacket+0x44>
    2524:	e7 c0       	rjmp	.+462    	; 0x26f4 <AICI_InterpretPacket+0x212>
    2526:	2f c1       	rjmp	.+606    	; 0x2786 <AICI_InterpretPacket+0x2a4>
    2528:	89 31       	cpi	r24, 0x19	; 25
    252a:	91 05       	cpc	r25, r1
    252c:	09 f4       	brne	.+2      	; 0x2530 <AICI_InterpretPacket+0x4e>
    252e:	cc c0       	rjmp	.+408    	; 0x26c8 <AICI_InterpretPacket+0x1e6>
    2530:	8a 31       	cpi	r24, 0x1A	; 26
    2532:	91 05       	cpc	r25, r1
    2534:	44 f4       	brge	.+16     	; 0x2546 <AICI_InterpretPacket+0x64>
    2536:	87 31       	cpi	r24, 0x17	; 23
    2538:	91 05       	cpc	r25, r1
    253a:	09 f4       	brne	.+2      	; 0x253e <AICI_InterpretPacket+0x5c>
    253c:	c5 c0       	rjmp	.+394    	; 0x26c8 <AICI_InterpretPacket+0x1e6>
    253e:	48 97       	sbiw	r24, 0x18	; 24
    2540:	09 f4       	brne	.+2      	; 0x2544 <AICI_InterpretPacket+0x62>
    2542:	a5 c0       	rjmp	.+330    	; 0x268e <AICI_InterpretPacket+0x1ac>
    2544:	2b c1       	rjmp	.+598    	; 0x279c <AICI_InterpretPacket+0x2ba>
    2546:	8d 31       	cpi	r24, 0x1D	; 29
    2548:	91 05       	cpc	r25, r1
    254a:	0c f4       	brge	.+2      	; 0x254e <AICI_InterpretPacket+0x6c>
    254c:	a0 c0       	rjmp	.+320    	; 0x268e <AICI_InterpretPacket+0x1ac>
    254e:	4d 97       	sbiw	r24, 0x1d	; 29
    2550:	09 f4       	brne	.+2      	; 0x2554 <AICI_InterpretPacket+0x72>
    2552:	61 c0       	rjmp	.+194    	; 0x2616 <AICI_InterpretPacket+0x134>
    2554:	23 c1       	rjmp	.+582    	; 0x279c <AICI_InterpretPacket+0x2ba>
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	90 93 48 01 	sts	0x0148, r25
    255e:	80 93 47 01 	sts	0x0147, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2562:	a1 e0       	ldi	r26, 0x01	; 1
    2564:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2566:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
    256a:	80 2d       	mov	r24, r0
    256c:	0e 94 81 09 	call	0x1302 <USI_SPIInitMaster>
			
			USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));

			MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);  // Pull the slave AVR's RESET line to active
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
			MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE); // Orange = Busy
    2576:	81 b3       	in	r24, 0x11	; 17
    2578:	80 63       	ori	r24, 0x30	; 48
    257a:	81 bb       	out	0x11, r24	; 17
			ISPCC_EnterChipProgrammingMode();       // Run the Enter Programming Mode routine
    257c:	0e 94 e1 10 	call	0x21c2 <ISPCC_EnterChipProgrammingMode>

			if (InProgrammingMode)
    2580:	80 91 46 01 	lds	r24, 0x0146
    2584:	88 23       	and	r24, r24
    2586:	19 f0       	breq	.+6      	; 0x258e <AICI_InterpretPacket+0xac>
			   LCD_puts_f(AVRISPModeMessage);
    2588:	88 ef       	ldi	r24, 0xF8	; 248
    258a:	93 e0       	ldi	r25, 0x03	; 3
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <AICI_InterpretPacket+0xb0>
			else
			   LCD_puts_f(SyncErrorMessage);
    258e:	8d ee       	ldi	r24, 0xED	; 237
    2590:	93 e0       	ldi	r25, 0x03	; 3
    2592:	0e 94 4d 08 	call	0x109a <LCD_puts_f>
			
			break;
    2596:	0b c1       	rjmp	.+534    	; 0x27ae <AICI_InterpretPacket+0x2cc>
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	90 93 48 01 	sts	0x0148, r25
    25a0:	80 93 47 01 	sts	0x0147, r24

			MAIN_Delay1MS(PacketBytes[1]);           // Wait for the "PreDelay" amount specified in the packet
    25a4:	80 91 4c 01 	lds	r24, 0x014C
    25a8:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Non programming mode = green status led
    25ac:	81 b3       	in	r24, 0x11	; 17
    25ae:	8f 7c       	andi	r24, 0xCF	; 207
    25b0:	80 61       	ori	r24, 0x10	; 16
    25b2:	81 bb       	out	0x11, r24	; 17
			InProgrammingMode = FALSE;
    25b4:	10 92 46 01 	sts	0x0146, r1
			MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	0e 94 19 03 	call	0x632 <MAIN_ResetCSLine>
			MAIN_Delay1MS(PacketBytes[2]);           // Wait for the "PostDelay" amount specified in the packet
    25be:	80 91 4d 01 	lds	r24, 0x014D
    25c2:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
			
			USI_SPIOff();
    25c6:	0e 94 91 09 	call	0x1322 <USI_SPIOff>
    25ca:	e5 c0       	rjmp	.+458    	; 0x2796 <AICI_InterpretPacket+0x2b4>

			PacketBytes[1] = STATUS_CMD_OK;      // Return OK

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;
    25cc:	82 e0       	ldi	r24, 0x02	; 2
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	90 93 48 01 	sts	0x0148, r25
    25d4:	80 93 47 01 	sts	0x0147, r24
			
			for (uint8_t PacketB = 3; PacketB <= 6; PacketB++) // Send the erase commands to the slave AVR
    25d8:	c3 e0       	ldi	r28, 0x03	; 3
    25da:	0e e4       	ldi	r16, 0x4E	; 78
    25dc:	11 e0       	ldi	r17, 0x01	; 1
				USI_SPITransmit(PacketBytes[PacketB]);
    25de:	f8 01       	movw	r30, r16
    25e0:	81 91       	ld	r24, Z+
    25e2:	8f 01       	movw	r16, r30
    25e4:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    25e8:	c1 50       	subi	r28, 0x01	; 1
    25ea:	c7 ff       	sbrs	r28, 7
    25ec:	f8 cf       	rjmp	.-16     	; 0x25de <AICI_InterpretPacket+0xfc>

			if (PacketBytes[2])                  // Poll mode, value of 1 indicates a busy flag wait
    25ee:	80 91 4d 01 	lds	r24, 0x014D
    25f2:	88 23       	and	r24, r24
    25f4:	59 f0       	breq	.+22     	; 0x260c <AICI_InterpretPacket+0x12a>
			{
				do
					USI_SPITransmitWord(0xF000);
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 ef       	ldi	r25, 0xF0	; 240
    25fa:	0e 94 ae 09 	call	0x135c <USI_SPITransmitWord>
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	0e 94 ae 09 	call	0x135c <USI_SPITransmitWord>
    2606:	80 fd       	sbrc	r24, 0
    2608:	f6 cf       	rjmp	.-20     	; 0x25f6 <AICI_InterpretPacket+0x114>
    260a:	c5 c0       	rjmp	.+394    	; 0x2796 <AICI_InterpretPacket+0x2b4>
				while (USI_SPITransmitWord(0x0000) & 0x01);
			}
			else                                // Poll mode flag of 0 indicates a predefined delay
			{
				MAIN_Delay1MS(PacketBytes[1]);   // Wait the specified interval to ensure erase complete
    260c:	80 91 4c 01 	lds	r24, 0x014C
    2610:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    2614:	c0 c0       	rjmp	.+384    	; 0x2796 <AICI_InterpretPacket+0x2b4>
			}
			
			PacketBytes[1] = STATUS_CMD_OK;      // Always return OK
			
			break;
		case CMD_SPI_MULTI:
				MessageSize = (3 + PacketBytes[2]);    // Number of recieved bytes, plus two OKs and the command byte
    2616:	e0 90 4d 01 	lds	r14, 0x014D
    261a:	8e 2d       	mov	r24, r14
    261c:	99 27       	eor	r25, r25
    261e:	03 96       	adiw	r24, 0x03	; 3
    2620:	90 93 48 01 	sts	0x0148, r25
    2624:	80 93 47 01 	sts	0x0147, r24
		
				uint8_t TxBytes      = PacketBytes[1]; // \. The packet data is overwritten during the transfer. Because
    2628:	00 91 4c 01 	lds	r16, 0x014C
				uint8_t RxStartByte  = PacketBytes[2]; // |  of this each data byte must be stored into temp variables
				uint8_t RxBytes      = PacketBytes[3]; // /  so that their contents are not lost.
    262c:	f0 90 4e 01 	lds	r15, 0x014E
				uint8_t RxByteNum    = 1;
    2630:	c1 e0       	ldi	r28, 0x01	; 1
				uint8_t TxByteNum    = 1;
				uint8_t RecievedByte = 0;

				while (TxByteNum++ < TxBytes)          // Still bytes to transfer
				{
					RecievedByte = USI_SPITransmit(PacketBytes[3 + TxByteNum]); // Transmit the byte, store the answer

					if ((TxByteNum >= RxStartByte) && (RxByteNum < RxBytes))
					   PacketBytes[2 + RxByteNum++] = RecievedByte;
    2632:	12 e0       	ldi	r17, 0x02	; 2
    2634:	c0 17       	cp	r28, r16
    2636:	a8 f4       	brcc	.+42     	; 0x2662 <AICI_InterpretPacket+0x180>
    2638:	e1 2f       	mov	r30, r17
    263a:	ff 27       	eor	r31, r31
    263c:	e5 5b       	subi	r30, 0xB5	; 181
    263e:	fe 4f       	sbci	r31, 0xFE	; 254
    2640:	83 81       	ldd	r24, Z+3	; 0x03
    2642:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    2646:	1e 15       	cp	r17, r14
    2648:	40 f0       	brcs	.+16     	; 0x265a <AICI_InterpretPacket+0x178>
    264a:	cf 15       	cp	r28, r15
    264c:	30 f4       	brcc	.+12     	; 0x265a <AICI_InterpretPacket+0x178>
    264e:	ec 2f       	mov	r30, r28
    2650:	ff 27       	eor	r31, r31
    2652:	e5 5b       	subi	r30, 0xB5	; 181
    2654:	fe 4f       	sbci	r31, 0xFE	; 254
    2656:	82 83       	std	Z+2, r24	; 0x02
    2658:	cf 5f       	subi	r28, 0xFF	; 255
    265a:	81 2f       	mov	r24, r17
    265c:	1f 5f       	subi	r17, 0xFF	; 255
    265e:	80 17       	cp	r24, r16
    2660:	58 f3       	brcs	.-42     	; 0x2638 <AICI_InterpretPacket+0x156>
				}

				while (RxByteNum++ < RxBytes)                         // Still more bytes to recieve
				   PacketBytes[2 + RxByteNum] = USI_SPITransmit(0x00); // its answer to be recorded (or more bytes than sent need responses), send dummy bytes to fetch the response(s)
    2662:	8c 2f       	mov	r24, r28
    2664:	cf 5f       	subi	r28, 0xFF	; 255
    2666:	8f 15       	cp	r24, r15
    2668:	50 f4       	brcc	.+20     	; 0x267e <AICI_InterpretPacket+0x19c>
    266a:	0c 2f       	mov	r16, r28
    266c:	11 27       	eor	r17, r17
    266e:	05 5b       	subi	r16, 0xB5	; 181
    2670:	1e 4f       	sbci	r17, 0xFE	; 254
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    2678:	f8 01       	movw	r30, r16
    267a:	82 83       	std	Z+2, r24	; 0x02
    267c:	f2 cf       	rjmp	.-28     	; 0x2662 <AICI_InterpretPacket+0x180>

				PacketBytes[1]             = STATUS_CMD_OK; // Data should be encompassed
    267e:	10 92 4c 01 	sts	0x014C, r1
				PacketBytes[3 + RxByteNum] = STATUS_CMD_OK; //  by STATS_CMD_OKs
    2682:	ec 2f       	mov	r30, r28
    2684:	ff 27       	eor	r31, r31
    2686:	e5 5b       	subi	r30, 0xB5	; 181
    2688:	fe 4f       	sbci	r31, 0xFE	; 254
    268a:	13 82       	std	Z+3, r1	; 0x03

				break;
    268c:	90 c0       	rjmp	.+288    	; 0x27ae <AICI_InterpretPacket+0x2cc>
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;
    268e:	84 e0       	ldi	r24, 0x04	; 4
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	90 93 48 01 	sts	0x0148, r25
    2696:	80 93 47 01 	sts	0x0147, r24
	
			for (uint8_t ByteNum = 1; ByteNum <= 4; ByteNum++)
    269a:	c1 e0       	ldi	r28, 0x01	; 1
    269c:	0d e4       	ldi	r16, 0x4D	; 77
    269e:	11 e0       	ldi	r17, 0x01	; 1
			{
				uint8_t Response = USI_SPITransmit(PacketBytes[1 + ByteNum]); // Transmit the four signature request bytes
    26a0:	f8 01       	movw	r30, r16
    26a2:	81 91       	ld	r24, Z+
    26a4:	8f 01       	movw	r16, r30
    26a6:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    26aa:	98 2f       	mov	r25, r24

				if (ByteNum == PacketBytes[1])         // If the current byte is the requested signature byte, save the reponse in the packet
    26ac:	80 91 4c 01 	lds	r24, 0x014C
    26b0:	c8 17       	cp	r28, r24
    26b2:	11 f4       	brne	.+4      	; 0x26b8 <AICI_InterpretPacket+0x1d6>
					PacketBytes[2] = Response;
    26b4:	90 93 4d 01 	sts	0x014D, r25
    26b8:	cf 5f       	subi	r28, 0xFF	; 255
    26ba:	c5 30       	cpi	r28, 0x05	; 5
    26bc:	88 f3       	brcs	.-30     	; 0x26a0 <AICI_InterpretPacket+0x1be>
			}

			PacketBytes[1] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    26be:	10 92 4c 01 	sts	0x014C, r1
			PacketBytes[3] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    26c2:	10 92 4e 01 	sts	0x014E, r1

			break;
    26c6:	73 c0       	rjmp	.+230    	; 0x27ae <AICI_InterpretPacket+0x2cc>
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	90 93 48 01 	sts	0x0148, r25
    26d0:	80 93 47 01 	sts	0x0147, r24
    26d4:	0c e4       	ldi	r16, 0x4C	; 76
    26d6:	11 e0       	ldi	r17, 0x01	; 1
    26d8:	c3 e0       	ldi	r28, 0x03	; 3
			
			for (uint8_t PacketB = 1; PacketB <= 4; PacketB++) // Send the lock-byte values to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    26da:	f8 01       	movw	r30, r16
    26dc:	81 91       	ld	r24, Z+
    26de:	8f 01       	movw	r16, r30
    26e0:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    26e4:	c1 50       	subi	r28, 0x01	; 1
    26e6:	c7 ff       	sbrs	r28, 7
    26e8:	f8 cf       	rjmp	.-16     	; 0x26da <AICI_InterpretPacket+0x1f8>

			PacketBytes[1] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    26ea:	10 92 4c 01 	sts	0x014C, r1
			PacketBytes[2] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    26ee:	10 92 4d 01 	sts	0x014D, r1

			break;
    26f2:	5d c0       	rjmp	.+186    	; 0x27ae <AICI_InterpretPacket+0x2cc>
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			MessageSize = 0;                           // Here to prevent compiler from complaining if a var dec appears straight after a case

			uint8_t  ReadCommand = PacketBytes[3];
    26f4:	d0 90 4e 01 	lds	r13, 0x014E
			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8) // Load in the number of bytes that is to
    26f8:	80 91 4c 01 	lds	r24, 0x014C
    26fc:	99 27       	eor	r25, r25
    26fe:	d8 2f       	mov	r29, r24
    2700:	cc 27       	eor	r28, r28
    2702:	80 91 4d 01 	lds	r24, 0x014D
    2706:	99 27       	eor	r25, r25
    2708:	c8 2b       	or	r28, r24
    270a:	d9 2b       	or	r29, r25
			                     | PacketBytes[2];                 // be read into a temp variable (MSB first)

			MessageSize = BytesToRead + 3;
    270c:	23 96       	adiw	r28, 0x03	; 3
    270e:	d0 93 48 01 	sts	0x0148, r29
    2712:	c0 93 47 01 	sts	0x0147, r28
    2716:	23 97       	sbiw	r28, 0x03	; 3

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
    2718:	00 e0       	ldi	r16, 0x00	; 0
    271a:	10 e0       	ldi	r17, 0x00	; 0
    271c:	0c 17       	cp	r16, r28
    271e:	1d 07       	cpc	r17, r29
    2720:	60 f5       	brcc	.+88     	; 0x277a <AICI_InterpretPacket+0x298>
    2722:	8d e4       	ldi	r24, 0x4D	; 77
    2724:	e8 2e       	mov	r14, r24
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	f8 2e       	mov	r15, r24
			{
				if (PacketBytes[0] == CMD_READ_FLASH_ISP)  // Flash read mode - word addresses so MSB/LSB masking nessesary
    272a:	80 91 4b 01 	lds	r24, 0x014B
    272e:	84 31       	cpi	r24, 0x14	; 20
    2730:	31 f4       	brne	.+12     	; 0x273e <AICI_InterpretPacket+0x25c>
				{
					USI_SPITransmit(ReadCommand | ((ReadByte & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ));
    2732:	8d 2d       	mov	r24, r13
    2734:	99 27       	eor	r25, r25
    2736:	00 ff       	sbrs	r16, 0
    2738:	03 c0       	rjmp	.+6      	; 0x2740 <AICI_InterpretPacket+0x25e>
    273a:	88 60       	ori	r24, 0x08	; 8
    273c:	01 c0       	rjmp	.+2      	; 0x2740 <AICI_InterpretPacket+0x25e>
				}
				else                                       // EEPROM read mode, address is in bytes and so no masking nessesary
				{
					USI_SPITransmit(ReadCommand);
    273e:	8d 2d       	mov	r24, r13
    2740:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
				}
				
				USI_SPITransmitWord(CurrAddress);          // Transmit the current address to the slave AVR
    2744:	80 91 42 01 	lds	r24, 0x0142
    2748:	90 91 43 01 	lds	r25, 0x0143
    274c:	0e 94 ae 09 	call	0x135c <USI_SPITransmitWord>

				PacketBytes[2 + ReadByte] = USI_SPITransmit(0x00); // Read in the byte stored at the requested location
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    2756:	f7 01       	movw	r30, r14
    2758:	80 83       	st	Z, r24

				if ((ReadByte & 0x01) || (PacketBytes[0] == CMD_READ_EEPROM_ISP)) // Flash addresses are given in words; only increment on the odd byte if reading the flash.
    275a:	00 fd       	sbrc	r16, 0
    275c:	04 c0       	rjmp	.+8      	; 0x2766 <AICI_InterpretPacket+0x284>
    275e:	80 91 4b 01 	lds	r24, 0x014B
    2762:	86 31       	cpi	r24, 0x16	; 22
    2764:	11 f4       	brne	.+4      	; 0x276a <AICI_InterpretPacket+0x288>
				{
					V2P_IncrementCurrAddress();             // Increment the address counter
    2766:	0e 94 39 0f 	call	0x1e72 <V2P_IncrementCurrAddress>
    276a:	0f 5f       	subi	r16, 0xFF	; 255
    276c:	1f 4f       	sbci	r17, 0xFF	; 255
    276e:	08 94       	sec
    2770:	e1 1c       	adc	r14, r1
    2772:	f1 1c       	adc	r15, r1
    2774:	0c 17       	cp	r16, r28
    2776:	1d 07       	cpc	r17, r29
    2778:	c0 f2       	brcs	.-80     	; 0x272a <AICI_InterpretPacket+0x248>
				}
				else
				{
					if ((CurrAddress & 0x00FF0000) & !(CurrAddress & 0x0000FFFF))
					{
						CurrAddress |= (1UL << 31);        // Set MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
						V2P_CheckForExtendedAddress();
					}
				}
			}
			
			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    277a:	10 92 4c 01 	sts	0x014C, r1
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    277e:	c5 5b       	subi	r28, 0xB5	; 181
    2780:	de 4f       	sbci	r29, 0xFE	; 254
    2782:	1a 82       	std	Y+2, r1	; 0x02

			break;
    2784:	14 c0       	rjmp	.+40     	; 0x27ae <AICI_InterpretPacket+0x2cc>
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPCC_ProgramChip();                          // Program the bytes into the chip
    2786:	0e 94 89 11 	call	0x2312 <ISPCC_ProgramChip>
			
			MessageSize = 2;
    278a:	82 e0       	ldi	r24, 0x02	; 2
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	90 93 48 01 	sts	0x0148, r25
    2792:	80 93 47 01 	sts	0x0147, r24

			PacketBytes[1] = STATUS_CMD_OK;
    2796:	10 92 4c 01 	sts	0x014C, r1
			
			break;
    279a:	09 c0       	rjmp	.+18     	; 0x27ae <AICI_InterpretPacket+0x2cc>
		default:                                        // Unknown command, return error
			MessageSize = 1;
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	90 93 48 01 	sts	0x0148, r25
    27a4:	80 93 47 01 	sts	0x0147, r24
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
    27a8:	89 ec       	ldi	r24, 0xC9	; 201
    27aa:	80 93 4c 01 	sts	0x014C, r24
	}

	V2P_SendPacket();                                   // Send the response packet
    27ae:	0e 94 58 0e 	call	0x1cb0 <V2P_SendPacket>
    27b2:	df 91       	pop	r29
    27b4:	cf 91       	pop	r28
    27b6:	1f 91       	pop	r17
    27b8:	0f 91       	pop	r16
    27ba:	ff 90       	pop	r15
    27bc:	ef 90       	pop	r14
    27be:	df 90       	pop	r13
    27c0:	08 95       	ret

000027c2 <PM_GetStoredDataSize>:

// ======================================================================================

uint32_t PM_GetStoredDataSize(const uint8_t Type)
{
    27c2:	cf 93       	push	r28
    27c4:	df 93       	push	r29
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	24 97       	sbiw	r28, 0x04	; 4
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	de bf       	out	0x3e, r29	; 62
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	cd bf       	out	0x3d, r28	; 61
	/* This take a **LOT** of code and is accessed several times throughout
	   the program, so I've put it into a seperate function to save on flash. */

	uint32_t ProgDataSize = 0;
    27d6:	19 82       	std	Y+1, r1	; 0x01
    27d8:	1a 82       	std	Y+2, r1	; 0x02
    27da:	1b 82       	std	Y+3, r1	; 0x03
    27dc:	1c 82       	std	Y+4, r1	; 0x04
void 
eeprom_read_block (void *pointer_ram,
                   const void *pointer_eeprom,
                   size_t n)
{
    27de:	fe 01       	movw	r30, r28
    27e0:	31 96       	adiw	r30, 0x01	; 1
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	19 f4       	brne	.+6      	; 0x27ec <PM_GetStoredDataSize+0x2a>
    27e6:	ab e1       	ldi	r26, 0x1B	; 27
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <PM_GetStoredDataSize+0x2e>
    27ec:	af e1       	ldi	r26, 0x1F	; 31
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
             XCALL " __eeprom_read_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "st z+,__tmp_reg__" CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                  XCALL " __eeprom_read_block_" _REG_LOCATION_SUFFIX 
                : "+x" (pointer_eeprom),
                  "=z" (pointer_ram)
                : "z"  (pointer_ram)
                : "memory");
            }
          else
            {
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 
    27f0:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    27f2:	18 2e       	mov	r1, r24
    27f4:	0e 94 5d 1a 	call	0x34ba <__eeprom_read_block_1F2021>

	eeprom_read_block((void*)&ProgDataSize, (const void*)((Type == TYPE_FLASH)? &EEPROMVars.DataSize : &EEPROMVars.EEPROMSize), sizeof(uint32_t));

	if (ProgDataSize == 0xFFFFFFFF)                                      // Blank EEPROM, return a size  of 0 bytes
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	9a 81       	ldd	r25, Y+2	; 0x02
    27fc:	ab 81       	ldd	r26, Y+3	; 0x03
    27fe:	bc 81       	ldd	r27, Y+4	; 0x04
    2800:	8f 5f       	subi	r24, 0xFF	; 255
    2802:	9f 4f       	sbci	r25, 0xFF	; 255
    2804:	af 4f       	sbci	r26, 0xFF	; 255
    2806:	bf 4f       	sbci	r27, 0xFF	; 255
    2808:	21 f4       	brne	.+8      	; 0x2812 <PM_GetStoredDataSize+0x50>
	  ProgDataSize = 0x00;
    280a:	19 82       	std	Y+1, r1	; 0x01
    280c:	1a 82       	std	Y+2, r1	; 0x02
    280e:	1b 82       	std	Y+3, r1	; 0x03
    2810:	1c 82       	std	Y+4, r1	; 0x04

	return ProgDataSize;
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	9a 81       	ldd	r25, Y+2	; 0x02
    2816:	ab 81       	ldd	r26, Y+3	; 0x03
    2818:	bc 81       	ldd	r27, Y+4	; 0x04
}
    281a:	bc 01       	movw	r22, r24
    281c:	cd 01       	movw	r24, r26
    281e:	24 96       	adiw	r28, 0x04	; 4
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	08 95       	ret

00002830 <PM_SetupDFAddressCounters>:

void PM_SetupDFAddressCounters(const uint8_t Type)
{
	uint32_t StartAddress;
	
	MemoryType  = Type;
    2830:	80 93 61 02 	sts	0x0261, r24
	GPageLength = 0;
    2834:	10 92 5f 02 	sts	0x025F, r1
    2838:	10 92 5e 02 	sts	0x025E, r1
    283c:	20 91 42 01 	lds	r18, 0x0142
    2840:	30 91 43 01 	lds	r19, 0x0143
    2844:	40 91 44 01 	lds	r20, 0x0144
    2848:	50 91 45 01 	lds	r21, 0x0145

	if (Type == TYPE_FLASH)                                              // Type 1 = Flash
    284c:	81 30       	cpi	r24, 0x01	; 1
    284e:	39 f4       	brne	.+14     	; 0x285e <PM_SetupDFAddressCounters+0x2e>
	  StartAddress = (CurrAddress << 1);                               // Convert flash word address to byte address
    2850:	da 01       	movw	r26, r20
    2852:	c9 01       	movw	r24, r18
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	aa 1f       	adc	r26, r26
    285a:	bb 1f       	adc	r27, r27
    285c:	06 c0       	rjmp	.+12     	; 0x286a <PM_SetupDFAddressCounters+0x3a>
	else
	  StartAddress = CurrAddress + PM_EEPROM_OFFSET;                   // EEPROM uses byte addresses, and starts at the 257th kilobyte in Dataflash
    285e:	da 01       	movw	r26, r20
    2860:	c9 01       	movw	r24, r18
    2862:	80 50       	subi	r24, 0x00	; 0
    2864:	9c 4f       	sbci	r25, 0xFC	; 252
    2866:	ab 4f       	sbci	r26, 0xFB	; 251
    2868:	bf 4f       	sbci	r27, 0xFF	; 255
	
	CurrPageAddress = 0;
    286a:	10 92 6e 02 	sts	0x026E, r1
    286e:	10 92 6d 02 	sts	0x026D, r1

	while (StartAddress >= DF_INTERNALDF_BUFFBYTES)                      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DF_INTERNALDF_BUFFBYTES;                         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    2872:	88 30       	cpi	r24, 0x08	; 8
    2874:	21 e0       	ldi	r18, 0x01	; 1
    2876:	92 07       	cpc	r25, r18
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	a2 07       	cpc	r26, r18
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	b2 07       	cpc	r27, r18
    2880:	a0 f0       	brcs	.+40     	; 0x28aa <PM_SetupDFAddressCounters+0x7a>
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	88 50       	subi	r24, 0x08	; 8
    2888:	91 40       	sbci	r25, 0x01	; 1
    288a:	a0 40       	sbci	r26, 0x00	; 0
    288c:	b0 40       	sbci	r27, 0x00	; 0
    288e:	2f 5f       	subi	r18, 0xFF	; 255
    2890:	3f 4f       	sbci	r19, 0xFF	; 255
    2892:	88 30       	cpi	r24, 0x08	; 8
    2894:	41 e0       	ldi	r20, 0x01	; 1
    2896:	94 07       	cpc	r25, r20
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	a4 07       	cpc	r26, r20
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	b4 07       	cpc	r27, r20
    28a0:	90 f7       	brcc	.-28     	; 0x2886 <PM_SetupDFAddressCounters+0x56>
    28a2:	30 93 6e 02 	sts	0x026E, r19
    28a6:	20 93 6d 02 	sts	0x026D, r18
	}
	
	CurrBuffByte = (uint16_t)StartAddress;                               // The buffer byte is the remainder
    28aa:	90 93 67 02 	sts	0x0267, r25
    28ae:	80 93 66 02 	sts	0x0266, r24
    28b2:	08 95       	ret

000028b4 <PM_StoreProgramByte>:
}

void PM_StoreProgramByte(const uint8_t Data)
{
    28b4:	cf 93       	push	r28
    28b6:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DF_INTERNALDF_BUFFBYTES)
    28b8:	80 91 66 02 	lds	r24, 0x0266
    28bc:	90 91 67 02 	lds	r25, 0x0267
    28c0:	88 50       	subi	r24, 0x08	; 8
    28c2:	91 40       	sbci	r25, 0x01	; 1
    28c4:	a9 f4       	brne	.+42     	; 0x28f0 <PM_StoreProgramByte+0x3c>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    28c6:	80 91 6d 02 	lds	r24, 0x026D
    28ca:	90 91 6e 02 	lds	r25, 0x026E
    28ce:	9c 01       	movw	r18, r24
    28d0:	01 96       	adiw	r24, 0x01	; 1
    28d2:	90 93 6e 02 	sts	0x026E, r25
    28d6:	80 93 6d 02 	sts	0x026D, r24
    28da:	c9 01       	movw	r24, r18
    28dc:	0e 94 cd 0a 	call	0x159a <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	0e 94 43 0a 	call	0x1486 <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    28e8:	10 92 67 02 	sts	0x0267, r1
    28ec:	10 92 66 02 	sts	0x0266, r1
	}
	
	SPI_SPITransmit(Data);                                               // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    28f0:	8c 2f       	mov	r24, r28
    28f2:	0e 94 36 09 	call	0x126c <SPI_SPITransmit>
	CurrBuffByte++;
    28f6:	80 91 66 02 	lds	r24, 0x0266
    28fa:	90 91 67 02 	lds	r25, 0x0267
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	90 93 67 02 	sts	0x0267, r25
    2904:	80 93 66 02 	sts	0x0266, r24
	GPageLength++;
    2908:	80 91 5e 02 	lds	r24, 0x025E
    290c:	90 91 5f 02 	lds	r25, 0x025F
    2910:	01 96       	adiw	r24, 0x01	; 1
    2912:	90 93 5f 02 	sts	0x025F, r25
    2916:	80 93 5e 02 	sts	0x025E, r24
    291a:	cf 91       	pop	r28
    291c:	08 95       	ret

0000291e <PM_CheckEndOfFuseLockData>:
}

void PM_InterpretAVRISPPacket(void)
{
	uint8_t* EEPROMAddress;

	switch (PacketBytes[0])
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
						
			for (uint8_t PacketB = 0; PacketB <= 11; PacketB++)          // Save the enter programming mode command bytes
			  eeprom_write_byte(&EEPROMVars.EnterProgMode[PacketB], PacketBytes[PacketB]);
			
			InProgrammingMode = TRUE;                                    // Set the flag, prevent the user from exiting the V2P state machine			
			CurrentMode = PM_NO_SETUP;                                   // Clear the current mode variable

			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;

			break;			
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;

			PM_CheckEndOfFuseLockData();                                 // Check for remaining bytes to be stored and general cleanup
			
			InProgrammingMode = FALSE;                                   // Clear the flag, allow the user to exit the V2P state machine

			DF_EnableDataflash(FALSE);

			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
			PacketBytes[1] = STATUS_CMD_OK;

			break;
		case CMD_READ_SIGNATURE_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x01;                                       // Signature bytes all return "01" in storage mode
			PacketBytes[3] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;

			for (uint8_t PacketB = 1; PacketB <= 6; PacketB++)          // Save the erase chip command bytes to EEPROM
			  eeprom_write_byte(&EEPROMVars.EraseChip[PacketB], PacketBytes[PacketB]);

			for (uint8_t Byte = 0; Byte < 8; Byte++)                    // Clear the program and EEPROM size counters
			{
				eeprom_write_byte(&EEPROMVars.DataSize[Byte], 0x00);
				eeprom_write_byte(&EEPROMVars.EEPROMSize[Byte], 0x00);
			}
						
			eeprom_write_byte(&EEPROMVars.EraseCmdStored, TRUE);
			
			PacketBytes[1] = STATUS_CMD_OK;
			
			break;
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x00;                                      // Return 0x00 for the OSCCAL byte
			PacketBytes[3] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs

			break;
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
			MessageSize = 4;
	
			if (CurrentMode != PM_LOCKFUSEBITS_READ)                    // First lock or fuse byte being read, set the EEPROM pointer
			{
				PM_CheckEndOfFuseLockData();                            // Check for remaining bytes to be stored and general cleanup
				
				CurrBuffByte = 0;
				CurrentMode  = PM_LOCKFUSEBITS_READ;
			}
			
			if (CurrBuffByte > eeprom_read_byte((PacketBytes[0] == CMD_READ_FUSE_ISP)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes))  // Trying to read more fuse/lock bytes than are stored in memory
			{
				PacketBytes[2] = 0xFF;                                 // Return 0xFF for the fuse/lock byte
			}
			else
			{
				PacketBytes[2] = eeprom_read_byte((uint8_t*)(((PacketBytes[0] == CMD_READ_FUSE_ISP)? &EEPROMVars.FuseBytes : &EEPROMVars.LockBytes) // Starting location
									                         + (CurrBuffByte << 2) + (PacketBytes[1] - 1)));                                        // The start position of the actual fuse/lock byte to read (4 bytes each));
			}

			PacketBytes[1] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs
			PacketBytes[3] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs

			CurrBuffByte++;

			break;
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;

			if (CurrentMode != PM_LOCKFUSEBITS_WRITE)                  // First lock or fuse byte being written, set the EEPROM pointer
			{
				CurrentMode   = PM_LOCKFUSEBITS_WRITE;
				CurrBuffByte  = 0;                                     // CurrBuffByte is used to store the total fuse/lock bytes written
			}

			if (PacketBytes[0] == CMD_PROGRAM_FUSE_ISP)
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.FuseBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_FUSE;
			}
			else
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.LockBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_LOCK;
			}				
			
			if (CurrBuffByte < PM_MAX_FUSELOCKBITS)
			{
				for (uint8_t FLByte = 1; FLByte <= 4; FLByte++)
				{
					eeprom_write_byte(EEPROMAddress, PacketBytes[FLByte]);
					EEPROMAddress++;
				}

				CurrBuffByte++;                                        // Increment the total fuse/lock bytes written counter
			}
			
			PacketBytes[1] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned
			PacketBytes[2] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned

			break;
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			MessageSize = 2;

			if (CurrentMode != PM_DATAFLASH_WRITE)                     // First programming packet
			{
				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)           // Flash programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram; // Set the eeprom address to the Program command bytes location
					PM_SetupDFAddressCounters(TYPE_FLASH);
				}
				else                                                   // EEPROM programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;  // Set the eeprom address to the EEPROM command bytes location
					PM_SetupDFAddressCounters(TYPE_EEPROM);
				}
				
				DF_BufferWriteEnable(CurrBuffByte);
				CurrentMode = PM_DATAFLASH_WRITE;
				
				for (uint8_t B = 1; B <= 9; B++)                       // Save the command bytes
				  eeprom_write_byte(EEPROMAddress, PacketBytes[B]);
			}

			uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
			                      | PacketBytes[2];

			for (uint16_t CurrByte = 0; CurrByte < BytesToWrite; CurrByte++)
				PM_StoreProgramByte(PacketBytes[10 + CurrByte]);

			if (!(GPageLength & PM_PAGELENGTH_FOUNDBIT) && (PacketBytes[3] & ISPCC_PROG_MODE_PAGEDONE) && GPageLength)
			{
				eeprom_write_word(((MemoryType == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength), GPageLength);
		
				GPageLength |= PM_PAGELENGTH_FOUNDBIT;                 // Bit 15 is used to indicate if the length has been found
			}

			PacketBytes[1] = STATUS_CMD_OK;
		
			break;
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:	
			if (CurrentMode != PM_DATAFLASH_READ)
			{
				PM_CheckEndOfFuseLockData();                           // Check for remaining bytes to be stored and general cleanup
				
				PM_SetupDFAddressCounters((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);
				DF_ContinuousReadEnable(CurrPageAddress, CurrBuffByte);
				
				CurrentMode = PM_DATAFLASH_READ;
				CurrAddress = 0;
			}

			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8)    // \. Load in the number of bytes that is to
			                     | PacketBytes[2];                    // /  be read into a temp variable (MSB first)
						
			uint16_t BytesInMem  = PM_GetStoredDataSize((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
			   PacketBytes[2 + ReadByte] = ((CurrAddress < BytesInMem)? SPI_SPITransmit(0x00) : 0xFF); // Read in the next dataflash byte if present
			   V2P_IncrementCurrAddress();
			}
			
			MessageSize = BytesToRead + 3;

			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
		
			break;
		default:
			MessageSize = 1;
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
	}

	V2P_SendPacket();                                   // Send the response packet
}

void PM_CheckEndOfFuseLockData(void)
{
    291e:	cf 93       	push	r28
    2920:	df 93       	push	r29
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    2926:	24 97       	sbiw	r28, 0x04	; 4
    2928:	0f b6       	in	r0, 0x3f	; 63
    292a:	f8 94       	cli
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	cd bf       	out	0x3d, r28	; 61
	if (CurrentMode == PM_DATAFLASH_WRITE)
    2932:	80 91 60 02 	lds	r24, 0x0260
    2936:	81 30       	cpi	r24, 0x01	; 1
    2938:	09 f0       	breq	.+2      	; 0x293c <PM_CheckEndOfFuseLockData+0x1e>
    293a:	3f c0       	rjmp	.+126    	; 0x29ba <PM_CheckEndOfFuseLockData+0x9c>
	{
		if (CurrBuffByte)                               // Data in the dataflash buffer, pending to be written
    293c:	80 91 66 02 	lds	r24, 0x0266
    2940:	90 91 67 02 	lds	r25, 0x0267
    2944:	89 2b       	or	r24, r25
    2946:	31 f0       	breq	.+12     	; 0x2954 <PM_CheckEndOfFuseLockData+0x36>
		  DF_CopyBufferToFlashPage(CurrPageAddress);    // Save the remaining buffer bytes
    2948:	80 91 6d 02 	lds	r24, 0x026D
    294c:	90 91 6e 02 	lds	r25, 0x026E
    2950:	0e 94 cd 0a 	call	0x159a <DF_CopyBufferToFlashPage>

		uint32_t DataSize = ((CurrPageAddress * DF_INTERNALDF_BUFFBYTES) + CurrBuffByte);
    2954:	20 91 6d 02 	lds	r18, 0x026D
    2958:	30 91 6e 02 	lds	r19, 0x026E
    295c:	88 e0       	ldi	r24, 0x08	; 8
    295e:	91 e0       	ldi	r25, 0x01	; 1
    2960:	28 9f       	mul	r18, r24
    2962:	a0 01       	movw	r20, r0
    2964:	29 9f       	mul	r18, r25
    2966:	50 0d       	add	r21, r0
    2968:	38 9f       	mul	r19, r24
    296a:	50 0d       	add	r21, r0
    296c:	11 24       	eor	r1, r1
    296e:	ca 01       	movw	r24, r20
    2970:	20 91 66 02 	lds	r18, 0x0266
    2974:	30 91 67 02 	lds	r19, 0x0267
    2978:	82 0f       	add	r24, r18
    297a:	93 1f       	adc	r25, r19
    297c:	9c 01       	movw	r18, r24
    297e:	44 27       	eor	r20, r20
    2980:	55 27       	eor	r21, r21
    2982:	29 83       	std	Y+1, r18	; 0x01
    2984:	3a 83       	std	Y+2, r19	; 0x02
    2986:	4b 83       	std	Y+3, r20	; 0x03
    2988:	5c 83       	std	Y+4, r21	; 0x04

		if (MemoryType == TYPE_FLASH)
    298a:	80 91 61 02 	lds	r24, 0x0261
    298e:	fe 01       	movw	r30, r28
    2990:	31 96       	adiw	r30, 0x01	; 1
    2992:	81 30       	cpi	r24, 0x01	; 1
    2994:	19 f4       	brne	.+6      	; 0x299c <PM_CheckEndOfFuseLockData+0x7e>
void 
eeprom_write_block (const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t n)
{
    2996:	ab e1       	ldi	r26, 0x1B	; 27
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	0a c0       	rjmp	.+20     	; 0x29b0 <PM_CheckEndOfFuseLockData+0x92>
		{
			eeprom_write_block((const void*)&DataSize, (void*)&EEPROMVars.DataSize, sizeof(uint32_t));
		}
		else
		{
			DataSize -= PM_EEPROM_OFFSET;                // Remove DataFlash EEPROM start offset
    299c:	20 50       	subi	r18, 0x00	; 0
    299e:	34 40       	sbci	r19, 0x04	; 4
    29a0:	44 40       	sbci	r20, 0x04	; 4
    29a2:	50 40       	sbci	r21, 0x00	; 0
    29a4:	29 83       	std	Y+1, r18	; 0x01
    29a6:	3a 83       	std	Y+2, r19	; 0x02
    29a8:	4b 83       	std	Y+3, r20	; 0x03
    29aa:	5c 83       	std	Y+4, r21	; 0x04
void 
eeprom_write_block (const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t n)
{
    29ac:	af e1       	ldi	r26, 0x1F	; 31
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
            "ld __tmp_reg__,z+" CR_TAB
             XCALL " __eeprom_write_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      /* Do nothing for compile time constant transfer size n == 0.  */
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                 XCALL " __eeprom_write_block_" _REG_LOCATION_SUFFIX
               : "+x" (pointer_eeprom),
                 "=z" (pointer_ram)
               : "z"  (pointer_ram)
               : "memory" );
            }
          else
            {
              uint8_t len;
              len = (uint8_t) n;
    29b0:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    29b2:	18 2e       	mov	r1, r24
    29b4:	0e 94 78 1a 	call	0x34f0 <__eeprom_write_block_1F2021>
    29b8:	10 c0       	rjmp	.+32     	; 0x29da <PM_CheckEndOfFuseLockData+0xbc>
			eeprom_write_block((const void*)&DataSize, (void*)&EEPROMVars.EEPROMSize, sizeof(uint32_t));
		}
	}
	else if (CurrentMode == PM_LOCKFUSEBITS_WRITE)
    29ba:	83 30       	cpi	r24, 0x03	; 3
    29bc:	71 f4       	brne	.+28     	; 0x29da <PM_CheckEndOfFuseLockData+0xbc>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    29be:	80 91 61 02 	lds	r24, 0x0261
    29c2:	82 30       	cpi	r24, 0x02	; 2
    29c4:	19 f4       	brne	.+6      	; 0x29cc <PM_CheckEndOfFuseLockData+0xae>
    29c6:	af e2       	ldi	r26, 0x2F	; 47
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <PM_CheckEndOfFuseLockData+0xb2>
    29cc:	a0 e3       	ldi	r26, 0x30	; 48
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	80 91 66 02 	lds	r24, 0x0266
  asm volatile (
    29d4:	08 2e       	mov	r0, r24
    29d6:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
    29da:	24 96       	adiw	r28, 0x04	; 4
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	08 95       	ret

000029ec <PM_InterpretAVRISPPacket>:
    29ec:	cf 92       	push	r12
    29ee:	df 92       	push	r13
    29f0:	ef 92       	push	r14
    29f2:	ff 92       	push	r15
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	40 91 4b 01 	lds	r20, 0x014B
    2a00:	84 2f       	mov	r24, r20
    2a02:	99 27       	eor	r25, r25
    2a04:	86 31       	cpi	r24, 0x16	; 22
    2a06:	91 05       	cpc	r25, r1
    2a08:	09 f4       	brne	.+2      	; 0x2a0c <PM_InterpretAVRISPPacket+0x20>
    2a0a:	bc c1       	rjmp	.+888    	; 0x2d84 <PM_InterpretAVRISPPacket+0x398>
    2a0c:	87 31       	cpi	r24, 0x17	; 23
    2a0e:	91 05       	cpc	r25, r1
    2a10:	94 f4       	brge	.+36     	; 0x2a36 <PM_InterpretAVRISPPacket+0x4a>
    2a12:	82 31       	cpi	r24, 0x12	; 18
    2a14:	91 05       	cpc	r25, r1
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <PM_InterpretAVRISPPacket+0x2e>
    2a18:	66 c0       	rjmp	.+204    	; 0x2ae6 <PM_InterpretAVRISPPacket+0xfa>
    2a1a:	83 31       	cpi	r24, 0x13	; 19
    2a1c:	91 05       	cpc	r25, r1
    2a1e:	3c f4       	brge	.+14     	; 0x2a2e <PM_InterpretAVRISPPacket+0x42>
    2a20:	80 31       	cpi	r24, 0x10	; 16
    2a22:	91 05       	cpc	r25, r1
    2a24:	11 f1       	breq	.+68     	; 0x2a6a <PM_InterpretAVRISPPacket+0x7e>
    2a26:	41 97       	sbiw	r24, 0x11	; 17
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <PM_InterpretAVRISPPacket+0x40>
    2a2a:	3f c0       	rjmp	.+126    	; 0x2aaa <PM_InterpretAVRISPPacket+0xbe>
    2a2c:	19 c2       	rjmp	.+1074   	; 0x2e60 <PM_InterpretAVRISPPacket+0x474>
    2a2e:	44 97       	sbiw	r24, 0x14	; 20
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <PM_InterpretAVRISPPacket+0x48>
    2a32:	a8 c1       	rjmp	.+848    	; 0x2d84 <PM_InterpretAVRISPPacket+0x398>
    2a34:	3c c1       	rjmp	.+632    	; 0x2cae <PM_InterpretAVRISPPacket+0x2c2>
    2a36:	89 31       	cpi	r24, 0x19	; 25
    2a38:	91 05       	cpc	r25, r1
    2a3a:	09 f4       	brne	.+2      	; 0x2a3e <PM_InterpretAVRISPPacket+0x52>
    2a3c:	e6 c0       	rjmp	.+460    	; 0x2c0a <PM_InterpretAVRISPPacket+0x21e>
    2a3e:	8a 31       	cpi	r24, 0x1A	; 26
    2a40:	91 05       	cpc	r25, r1
    2a42:	44 f4       	brge	.+16     	; 0x2a54 <PM_InterpretAVRISPPacket+0x68>
    2a44:	87 31       	cpi	r24, 0x17	; 23
    2a46:	91 05       	cpc	r25, r1
    2a48:	09 f4       	brne	.+2      	; 0x2a4c <PM_InterpretAVRISPPacket+0x60>
    2a4a:	df c0       	rjmp	.+446    	; 0x2c0a <PM_InterpretAVRISPPacket+0x21e>
    2a4c:	48 97       	sbiw	r24, 0x18	; 24
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <PM_InterpretAVRISPPacket+0x66>
    2a50:	89 c0       	rjmp	.+274    	; 0x2b64 <PM_InterpretAVRISPPacket+0x178>
    2a52:	06 c2       	rjmp	.+1036   	; 0x2e60 <PM_InterpretAVRISPPacket+0x474>
    2a54:	8b 31       	cpi	r24, 0x1B	; 27
    2a56:	91 05       	cpc	r25, r1
    2a58:	d1 f1       	breq	.+116    	; 0x2ace <PM_InterpretAVRISPPacket+0xe2>
    2a5a:	8b 31       	cpi	r24, 0x1B	; 27
    2a5c:	91 05       	cpc	r25, r1
    2a5e:	0c f4       	brge	.+2      	; 0x2a62 <PM_InterpretAVRISPPacket+0x76>
    2a60:	81 c0       	rjmp	.+258    	; 0x2b64 <PM_InterpretAVRISPPacket+0x178>
    2a62:	4c 97       	sbiw	r24, 0x1c	; 28
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <PM_InterpretAVRISPPacket+0x7c>
    2a66:	71 c0       	rjmp	.+226    	; 0x2b4a <PM_InterpretAVRISPPacket+0x15e>
    2a68:	fb c1       	rjmp	.+1014   	; 0x2e60 <PM_InterpretAVRISPPacket+0x474>
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	90 93 48 01 	sts	0x0148, r25
    2a72:	80 93 47 01 	sts	0x0147, r24
    2a76:	eb e4       	ldi	r30, 0x4B	; 75
    2a78:	f1 e0       	ldi	r31, 0x01	; 1
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	9b e0       	ldi	r25, 0x0B	; 11
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2a80:	d9 01       	movw	r26, r18
    2a82:	ad 5d       	subi	r26, 0xDD	; 221
    2a84:	bf 4f       	sbci	r27, 0xFF	; 255
    2a86:	81 91       	ld	r24, Z+
  asm volatile (
    2a88:	08 2e       	mov	r0, r24
    2a8a:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
    2a8e:	91 50       	subi	r25, 0x01	; 1
    2a90:	2f 5f       	subi	r18, 0xFF	; 255
    2a92:	3f 4f       	sbci	r19, 0xFF	; 255
    2a94:	97 ff       	sbrs	r25, 7
    2a96:	f4 cf       	rjmp	.-24     	; 0x2a80 <PM_InterpretAVRISPPacket+0x94>
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	80 93 46 01 	sts	0x0146, r24
    2a9e:	10 92 60 02 	sts	0x0260, r1
    2aa2:	81 b3       	in	r24, 0x11	; 17
    2aa4:	8f 7c       	andi	r24, 0xCF	; 207
    2aa6:	80 62       	ori	r24, 0x20	; 32
    2aa8:	10 c0       	rjmp	.+32     	; 0x2aca <PM_InterpretAVRISPPacket+0xde>
    2aaa:	82 e0       	ldi	r24, 0x02	; 2
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	90 93 48 01 	sts	0x0148, r25
    2ab2:	80 93 47 01 	sts	0x0147, r24
    2ab6:	0e 94 8f 14 	call	0x291e <PM_CheckEndOfFuseLockData>
    2aba:	10 92 46 01 	sts	0x0146, r1
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    2ac4:	81 b3       	in	r24, 0x11	; 17
    2ac6:	8f 7c       	andi	r24, 0xCF	; 207
    2ac8:	80 61       	ori	r24, 0x10	; 16
    2aca:	81 bb       	out	0x11, r24	; 17
    2acc:	58 c1       	rjmp	.+688    	; 0x2d7e <PM_InterpretAVRISPPacket+0x392>
    2ace:	84 e0       	ldi	r24, 0x04	; 4
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	90 93 48 01 	sts	0x0148, r25
    2ad6:	80 93 47 01 	sts	0x0147, r24
    2ada:	10 92 4c 01 	sts	0x014C, r1
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	80 93 4d 01 	sts	0x014D, r24
    2ae4:	3c c0       	rjmp	.+120    	; 0x2b5e <PM_InterpretAVRISPPacket+0x172>
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	90 93 48 01 	sts	0x0148, r25
    2aee:	80 93 47 01 	sts	0x0147, r24
    2af2:	ec e4       	ldi	r30, 0x4C	; 76
    2af4:	f1 e0       	ldi	r31, 0x01	; 1
    2af6:	21 e0       	ldi	r18, 0x01	; 1
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	95 e0       	ldi	r25, 0x05	; 5
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2afc:	d9 01       	movw	r26, r18
    2afe:	ab 5e       	subi	r26, 0xEB	; 235
    2b00:	bf 4f       	sbci	r27, 0xFF	; 255
    2b02:	81 91       	ld	r24, Z+
  asm volatile (
    2b04:	08 2e       	mov	r0, r24
    2b06:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
    2b0a:	91 50       	subi	r25, 0x01	; 1
    2b0c:	2f 5f       	subi	r18, 0xFF	; 255
    2b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b10:	97 ff       	sbrs	r25, 7
    2b12:	f4 cf       	rjmp	.-24     	; 0x2afc <PM_InterpretAVRISPPacket+0x110>
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	37 e0       	ldi	r19, 0x07	; 7
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	a5 5e       	subi	r26, 0xE5	; 229
    2b20:	bf 4f       	sbci	r27, 0xFF	; 255
  asm volatile (
    2b22:	02 2e       	mov	r0, r18
    2b24:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	a1 5e       	subi	r26, 0xE1	; 225
    2b2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2e:	02 2e       	mov	r0, r18
    2b30:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
    2b34:	31 50       	subi	r19, 0x01	; 1
    2b36:	01 96       	adiw	r24, 0x01	; 1
    2b38:	37 ff       	sbrs	r19, 7
    2b3a:	f0 cf       	rjmp	.-32     	; 0x2b1c <PM_InterpretAVRISPPacket+0x130>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b3c:	a4 e1       	ldi	r26, 0x14	; 20
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	81 e0       	ldi	r24, 0x01	; 1
  asm volatile (
    2b42:	08 2e       	mov	r0, r24
    2b44:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
    2b48:	1a c1       	rjmp	.+564    	; 0x2d7e <PM_InterpretAVRISPPacket+0x392>
    2b4a:	84 e0       	ldi	r24, 0x04	; 4
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	90 93 48 01 	sts	0x0148, r25
    2b52:	80 93 47 01 	sts	0x0147, r24
    2b56:	10 92 4c 01 	sts	0x014C, r1
    2b5a:	10 92 4d 01 	sts	0x014D, r1
    2b5e:	10 92 4e 01 	sts	0x014E, r1
    2b62:	87 c1       	rjmp	.+782    	; 0x2e72 <PM_InterpretAVRISPPacket+0x486>
    2b64:	84 e0       	ldi	r24, 0x04	; 4
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	90 93 48 01 	sts	0x0148, r25
    2b6c:	80 93 47 01 	sts	0x0147, r24
    2b70:	80 91 60 02 	lds	r24, 0x0260
    2b74:	84 30       	cpi	r24, 0x04	; 4
    2b76:	49 f0       	breq	.+18     	; 0x2b8a <PM_InterpretAVRISPPacket+0x19e>
    2b78:	0e 94 8f 14 	call	0x291e <PM_CheckEndOfFuseLockData>
    2b7c:	10 92 67 02 	sts	0x0267, r1
    2b80:	10 92 66 02 	sts	0x0266, r1
    2b84:	84 e0       	ldi	r24, 0x04	; 4
    2b86:	80 93 60 02 	sts	0x0260, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2b8a:	60 91 4b 01 	lds	r22, 0x014B
    2b8e:	68 31       	cpi	r22, 0x18	; 24
    2b90:	19 f4       	brne	.+6      	; 0x2b98 <PM_InterpretAVRISPPacket+0x1ac>
    2b92:	af e2       	ldi	r26, 0x2F	; 47
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <PM_InterpretAVRISPPacket+0x1b0>
    2b98:	a0 e3       	ldi	r26, 0x30	; 48
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2b9c:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
    2ba0:	80 2d       	mov	r24, r0
    2ba2:	99 27       	eor	r25, r25
    2ba4:	40 91 66 02 	lds	r20, 0x0266
    2ba8:	50 91 67 02 	lds	r21, 0x0267
    2bac:	84 17       	cp	r24, r20
    2bae:	95 07       	cpc	r25, r21
    2bb0:	10 f4       	brcc	.+4      	; 0x2bb6 <PM_InterpretAVRISPPacket+0x1ca>
    2bb2:	8f ef       	ldi	r24, 0xFF	; 255
    2bb4:	1d c0       	rjmp	.+58     	; 0x2bf0 <PM_InterpretAVRISPPacket+0x204>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2bb6:	80 ea       	ldi	r24, 0xA0	; 160
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	48 9f       	mul	r20, r24
    2bbc:	90 01       	movw	r18, r0
    2bbe:	49 9f       	mul	r20, r25
    2bc0:	30 0d       	add	r19, r0
    2bc2:	58 9f       	mul	r21, r24
    2bc4:	30 0d       	add	r19, r0
    2bc6:	11 24       	eor	r1, r1
    2bc8:	90 91 4c 01 	lds	r25, 0x014C
    2bcc:	88 e2       	ldi	r24, 0x28	; 40
    2bce:	98 9f       	mul	r25, r24
    2bd0:	c0 01       	movw	r24, r0
    2bd2:	11 24       	eor	r1, r1
    2bd4:	28 0f       	add	r18, r24
    2bd6:	39 1f       	adc	r19, r25
    2bd8:	68 31       	cpi	r22, 0x18	; 24
    2bda:	21 f4       	brne	.+8      	; 0x2be4 <PM_InterpretAVRISPPacket+0x1f8>
    2bdc:	d9 01       	movw	r26, r18
    2bde:	a7 5f       	subi	r26, 0xF7	; 247
    2be0:	bf 4f       	sbci	r27, 0xFF	; 255
    2be2:	03 c0       	rjmp	.+6      	; 0x2bea <PM_InterpretAVRISPPacket+0x1fe>
    2be4:	d9 01       	movw	r26, r18
    2be6:	af 5c       	subi	r26, 0xCF	; 207
    2be8:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2bea:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
    2bee:	80 2d       	mov	r24, r0
    2bf0:	80 93 4d 01 	sts	0x014D, r24
    2bf4:	10 92 4c 01 	sts	0x014C, r1
    2bf8:	10 92 4e 01 	sts	0x014E, r1
    2bfc:	4f 5f       	subi	r20, 0xFF	; 255
    2bfe:	5f 4f       	sbci	r21, 0xFF	; 255
    2c00:	50 93 67 02 	sts	0x0267, r21
    2c04:	40 93 66 02 	sts	0x0266, r20
    2c08:	34 c1       	rjmp	.+616    	; 0x2e72 <PM_InterpretAVRISPPacket+0x486>
    2c0a:	83 e0       	ldi	r24, 0x03	; 3
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	90 93 48 01 	sts	0x0148, r25
    2c12:	80 93 47 01 	sts	0x0147, r24
    2c16:	80 91 60 02 	lds	r24, 0x0260
    2c1a:	83 30       	cpi	r24, 0x03	; 3
    2c1c:	39 f0       	breq	.+14     	; 0x2c2c <PM_InterpretAVRISPPacket+0x240>
    2c1e:	83 e0       	ldi	r24, 0x03	; 3
    2c20:	80 93 60 02 	sts	0x0260, r24
    2c24:	10 92 67 02 	sts	0x0267, r1
    2c28:	10 92 66 02 	sts	0x0266, r1
    2c2c:	20 91 66 02 	lds	r18, 0x0266
    2c30:	30 91 67 02 	lds	r19, 0x0267
    2c34:	47 31       	cpi	r20, 0x17	; 23
    2c36:	69 f4       	brne	.+26     	; 0x2c52 <PM_InterpretAVRISPPacket+0x266>
    2c38:	80 ea       	ldi	r24, 0xA0	; 160
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	28 9f       	mul	r18, r24
    2c3e:	e0 01       	movw	r28, r0
    2c40:	29 9f       	mul	r18, r25
    2c42:	d0 0d       	add	r29, r0
    2c44:	38 9f       	mul	r19, r24
    2c46:	d0 0d       	add	r29, r0
    2c48:	11 24       	eor	r1, r1
    2c4a:	cf 5c       	subi	r28, 0xCF	; 207
    2c4c:	df 4f       	sbci	r29, 0xFF	; 255
    2c4e:	82 e0       	ldi	r24, 0x02	; 2
    2c50:	0c c0       	rjmp	.+24     	; 0x2c6a <PM_InterpretAVRISPPacket+0x27e>
    2c52:	80 ea       	ldi	r24, 0xA0	; 160
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	28 9f       	mul	r18, r24
    2c58:	e0 01       	movw	r28, r0
    2c5a:	29 9f       	mul	r18, r25
    2c5c:	d0 0d       	add	r29, r0
    2c5e:	38 9f       	mul	r19, r24
    2c60:	d0 0d       	add	r29, r0
    2c62:	11 24       	eor	r1, r1
    2c64:	c7 5a       	subi	r28, 0xA7	; 167
    2c66:	df 4f       	sbci	r29, 0xFF	; 255
    2c68:	83 e0       	ldi	r24, 0x03	; 3
    2c6a:	80 93 61 02 	sts	0x0261, r24
    2c6e:	80 91 66 02 	lds	r24, 0x0266
    2c72:	90 91 67 02 	lds	r25, 0x0267
    2c76:	0a 97       	sbiw	r24, 0x0a	; 10
    2c78:	a8 f4       	brcc	.+42     	; 0x2ca4 <PM_InterpretAVRISPPacket+0x2b8>
    2c7a:	ec e4       	ldi	r30, 0x4C	; 76
    2c7c:	f1 e0       	ldi	r31, 0x01	; 1
    2c7e:	93 e0       	ldi	r25, 0x03	; 3
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2c80:	81 91       	ld	r24, Z+
  asm volatile (
    2c82:	de 01       	movw	r26, r28
    2c84:	08 2e       	mov	r0, r24
    2c86:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
    2c8a:	21 96       	adiw	r28, 0x01	; 1
    2c8c:	91 50       	subi	r25, 0x01	; 1
    2c8e:	97 ff       	sbrs	r25, 7
    2c90:	f7 cf       	rjmp	.-18     	; 0x2c80 <PM_InterpretAVRISPPacket+0x294>
    2c92:	80 91 66 02 	lds	r24, 0x0266
    2c96:	90 91 67 02 	lds	r25, 0x0267
    2c9a:	01 96       	adiw	r24, 0x01	; 1
    2c9c:	90 93 67 02 	sts	0x0267, r25
    2ca0:	80 93 66 02 	sts	0x0266, r24
    2ca4:	10 92 4c 01 	sts	0x014C, r1
    2ca8:	10 92 4d 01 	sts	0x014D, r1
    2cac:	e2 c0       	rjmp	.+452    	; 0x2e72 <PM_InterpretAVRISPPacket+0x486>
    2cae:	82 e0       	ldi	r24, 0x02	; 2
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	90 93 48 01 	sts	0x0148, r25
    2cb6:	80 93 47 01 	sts	0x0147, r24
    2cba:	80 91 60 02 	lds	r24, 0x0260
    2cbe:	81 30       	cpi	r24, 0x01	; 1
    2cc0:	f9 f0       	breq	.+62     	; 0x2d00 <PM_InterpretAVRISPPacket+0x314>
    2cc2:	43 31       	cpi	r20, 0x13	; 19
    2cc4:	21 f4       	brne	.+8      	; 0x2cce <PM_InterpretAVRISPPacket+0x2e2>
    2cc6:	c2 e0       	ldi	r28, 0x02	; 2
    2cc8:	d0 e0       	ldi	r29, 0x00	; 0
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	03 c0       	rjmp	.+6      	; 0x2cd4 <PM_InterpretAVRISPPacket+0x2e8>
    2cce:	cb e0       	ldi	r28, 0x0B	; 11
    2cd0:	d0 e0       	ldi	r29, 0x00	; 0
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	0e 94 18 14 	call	0x2830 <PM_SetupDFAddressCounters>
    2cd8:	80 91 66 02 	lds	r24, 0x0266
    2cdc:	90 91 67 02 	lds	r25, 0x0267
    2ce0:	0e 94 43 0a 	call	0x1486 <DF_BufferWriteEnable>
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	80 93 60 02 	sts	0x0260, r24
    2cea:	ec e4       	ldi	r30, 0x4C	; 76
    2cec:	f1 e0       	ldi	r31, 0x01	; 1
    2cee:	98 e0       	ldi	r25, 0x08	; 8
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2cf0:	81 91       	ld	r24, Z+
  asm volatile (
    2cf2:	de 01       	movw	r26, r28
    2cf4:	08 2e       	mov	r0, r24
    2cf6:	0e 94 67 1a 	call	0x34ce <__eeprom_write_byte_1F2021>
    2cfa:	91 50       	subi	r25, 0x01	; 1
    2cfc:	97 ff       	sbrs	r25, 7
    2cfe:	f8 cf       	rjmp	.-16     	; 0x2cf0 <PM_InterpretAVRISPPacket+0x304>
    2d00:	80 91 4c 01 	lds	r24, 0x014C
    2d04:	99 27       	eor	r25, r25
    2d06:	d8 2f       	mov	r29, r24
    2d08:	cc 27       	eor	r28, r28
    2d0a:	80 91 4d 01 	lds	r24, 0x014D
    2d0e:	99 27       	eor	r25, r25
    2d10:	c8 2b       	or	r28, r24
    2d12:	d9 2b       	or	r29, r25
    2d14:	00 e0       	ldi	r16, 0x00	; 0
    2d16:	10 e0       	ldi	r17, 0x00	; 0
    2d18:	0c 17       	cp	r16, r28
    2d1a:	1d 07       	cpc	r17, r29
    2d1c:	70 f4       	brcc	.+28     	; 0x2d3a <PM_InterpretAVRISPPacket+0x34e>
    2d1e:	55 e5       	ldi	r21, 0x55	; 85
    2d20:	e5 2e       	mov	r14, r21
    2d22:	51 e0       	ldi	r21, 0x01	; 1
    2d24:	f5 2e       	mov	r15, r21
    2d26:	f7 01       	movw	r30, r14
    2d28:	81 91       	ld	r24, Z+
    2d2a:	7f 01       	movw	r14, r30
    2d2c:	0e 94 5a 14 	call	0x28b4 <PM_StoreProgramByte>
    2d30:	0f 5f       	subi	r16, 0xFF	; 255
    2d32:	1f 4f       	sbci	r17, 0xFF	; 255
    2d34:	0c 17       	cp	r16, r28
    2d36:	1d 07       	cpc	r17, r29
    2d38:	b0 f3       	brcs	.-20     	; 0x2d26 <PM_InterpretAVRISPPacket+0x33a>
    2d3a:	20 91 5e 02 	lds	r18, 0x025E
    2d3e:	30 91 5f 02 	lds	r19, 0x025F
    2d42:	37 fd       	sbrc	r19, 7
    2d44:	1c c0       	rjmp	.+56     	; 0x2d7e <PM_InterpretAVRISPPacket+0x392>
    2d46:	80 91 4e 01 	lds	r24, 0x014E
    2d4a:	87 ff       	sbrs	r24, 7
    2d4c:	18 c0       	rjmp	.+48     	; 0x2d7e <PM_InterpretAVRISPPacket+0x392>
    2d4e:	21 15       	cp	r18, r1
    2d50:	31 05       	cpc	r19, r1
    2d52:	a9 f0       	breq	.+42     	; 0x2d7e <PM_InterpretAVRISPPacket+0x392>
    Write a word \c value to EEPROM address \c addr. */

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
    2d54:	80 91 61 02 	lds	r24, 0x0261
    2d58:	81 30       	cpi	r24, 0x01	; 1
    2d5a:	19 f4       	brne	.+6      	; 0x2d62 <PM_InterpretAVRISPPacket+0x376>
    2d5c:	a1 e8       	ldi	r26, 0x81	; 129
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	02 c0       	rjmp	.+4      	; 0x2d66 <PM_InterpretAVRISPPacket+0x37a>
    2d62:	a3 e8       	ldi	r26, 0x83	; 131
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
  asm volatile (
    2d66:	09 01       	movw	r0, r18
    2d68:	0e 94 73 1a 	call	0x34e6 <__eeprom_write_word_1F2021>
    2d6c:	80 91 5e 02 	lds	r24, 0x025E
    2d70:	90 91 5f 02 	lds	r25, 0x025F
    2d74:	90 68       	ori	r25, 0x80	; 128
    2d76:	90 93 5f 02 	sts	0x025F, r25
    2d7a:	80 93 5e 02 	sts	0x025E, r24
    2d7e:	10 92 4c 01 	sts	0x014C, r1
    2d82:	77 c0       	rjmp	.+238    	; 0x2e72 <PM_InterpretAVRISPPacket+0x486>
    2d84:	80 91 60 02 	lds	r24, 0x0260
    2d88:	82 30       	cpi	r24, 0x02	; 2
    2d8a:	01 f1       	breq	.+64     	; 0x2dcc <PM_InterpretAVRISPPacket+0x3e0>
    2d8c:	0e 94 8f 14 	call	0x291e <PM_CheckEndOfFuseLockData>
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	80 91 4b 01 	lds	r24, 0x014B
    2d96:	84 31       	cpi	r24, 0x14	; 20
    2d98:	09 f4       	brne	.+2      	; 0x2d9c <PM_InterpretAVRISPPacket+0x3b0>
    2d9a:	91 e0       	ldi	r25, 0x01	; 1
    2d9c:	89 2f       	mov	r24, r25
    2d9e:	0e 94 18 14 	call	0x2830 <PM_SetupDFAddressCounters>
    2da2:	60 91 66 02 	lds	r22, 0x0266
    2da6:	70 91 67 02 	lds	r23, 0x0267
    2daa:	80 91 6d 02 	lds	r24, 0x026D
    2dae:	90 91 6e 02 	lds	r25, 0x026E
    2db2:	0e 94 07 0a 	call	0x140e <DF_ContinuousReadEnable>
    2db6:	82 e0       	ldi	r24, 0x02	; 2
    2db8:	80 93 60 02 	sts	0x0260, r24
    2dbc:	10 92 42 01 	sts	0x0142, r1
    2dc0:	10 92 43 01 	sts	0x0143, r1
    2dc4:	10 92 44 01 	sts	0x0144, r1
    2dc8:	10 92 45 01 	sts	0x0145, r1
    2dcc:	80 91 4c 01 	lds	r24, 0x014C
    2dd0:	99 27       	eor	r25, r25
    2dd2:	d8 2f       	mov	r29, r24
    2dd4:	cc 27       	eor	r28, r28
    2dd6:	80 91 4d 01 	lds	r24, 0x014D
    2dda:	99 27       	eor	r25, r25
    2ddc:	c8 2b       	or	r28, r24
    2dde:	d9 2b       	or	r29, r25
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	80 91 4b 01 	lds	r24, 0x014B
    2de6:	84 31       	cpi	r24, 0x14	; 20
    2de8:	09 f4       	brne	.+2      	; 0x2dec <PM_InterpretAVRISPPacket+0x400>
    2dea:	91 e0       	ldi	r25, 0x01	; 1
    2dec:	89 2f       	mov	r24, r25
    2dee:	0e 94 e1 13 	call	0x27c2 <PM_GetStoredDataSize>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	7c 01       	movw	r14, r24
    2df8:	00 e0       	ldi	r16, 0x00	; 0
    2dfa:	10 e0       	ldi	r17, 0x00	; 0
    2dfc:	0c 17       	cp	r16, r28
    2dfe:	1d 07       	cpc	r17, r29
    2e00:	18 f5       	brcc	.+70     	; 0x2e48 <PM_InterpretAVRISPPacket+0x45c>
    2e02:	3d e4       	ldi	r19, 0x4D	; 77
    2e04:	c3 2e       	mov	r12, r19
    2e06:	31 e0       	ldi	r19, 0x01	; 1
    2e08:	d3 2e       	mov	r13, r19
    2e0a:	97 01       	movw	r18, r14
    2e0c:	44 27       	eor	r20, r20
    2e0e:	55 27       	eor	r21, r21
    2e10:	80 91 42 01 	lds	r24, 0x0142
    2e14:	90 91 43 01 	lds	r25, 0x0143
    2e18:	a0 91 44 01 	lds	r26, 0x0144
    2e1c:	b0 91 45 01 	lds	r27, 0x0145
    2e20:	82 17       	cp	r24, r18
    2e22:	93 07       	cpc	r25, r19
    2e24:	a4 07       	cpc	r26, r20
    2e26:	b5 07       	cpc	r27, r21
    2e28:	20 f4       	brcc	.+8      	; 0x2e32 <PM_InterpretAVRISPPacket+0x446>
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	0e 94 36 09 	call	0x126c <SPI_SPITransmit>
    2e30:	01 c0       	rjmp	.+2      	; 0x2e34 <PM_InterpretAVRISPPacket+0x448>
    2e32:	8f ef       	ldi	r24, 0xFF	; 255
    2e34:	f6 01       	movw	r30, r12
    2e36:	81 93       	st	Z+, r24
    2e38:	6f 01       	movw	r12, r30
    2e3a:	0e 94 39 0f 	call	0x1e72 <V2P_IncrementCurrAddress>
    2e3e:	0f 5f       	subi	r16, 0xFF	; 255
    2e40:	1f 4f       	sbci	r17, 0xFF	; 255
    2e42:	0c 17       	cp	r16, r28
    2e44:	1d 07       	cpc	r17, r29
    2e46:	08 f3       	brcs	.-62     	; 0x2e0a <PM_InterpretAVRISPPacket+0x41e>
    2e48:	23 96       	adiw	r28, 0x03	; 3
    2e4a:	d0 93 48 01 	sts	0x0148, r29
    2e4e:	c0 93 47 01 	sts	0x0147, r28
    2e52:	23 97       	sbiw	r28, 0x03	; 3
    2e54:	10 92 4c 01 	sts	0x014C, r1
    2e58:	c5 5b       	subi	r28, 0xB5	; 181
    2e5a:	de 4f       	sbci	r29, 0xFE	; 254
    2e5c:	1a 82       	std	Y+2, r1	; 0x02
    2e5e:	09 c0       	rjmp	.+18     	; 0x2e72 <PM_InterpretAVRISPPacket+0x486>
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	90 93 48 01 	sts	0x0148, r25
    2e68:	80 93 47 01 	sts	0x0147, r24
    2e6c:	89 ec       	ldi	r24, 0xC9	; 201
    2e6e:	80 93 4c 01 	sts	0x014C, r24
    2e72:	0e 94 58 0e 	call	0x1cb0 <V2P_SendPacket>
    2e76:	df 91       	pop	r29
    2e78:	cf 91       	pop	r28
    2e7a:	1f 91       	pop	r17
    2e7c:	0f 91       	pop	r16
    2e7e:	ff 90       	pop	r15
    2e80:	ef 90       	pop	r14
    2e82:	df 90       	pop	r13
    2e84:	cf 90       	pop	r12
    2e86:	08 95       	ret

00002e88 <PM_SendFuseLockBytes>:
	{
		// CurrBuffByte stores the total number of fuse/lock bytes written in this case:
		eeprom_write_byte(((MemoryType == TYPE_FUSE)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes), CurrBuffByte);
	}
}

void PM_SendFuseLockBytes(const uint8_t Type)
{
    2e88:	0f 93       	push	r16
    2e8a:	1f 93       	push	r17
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
	uint8_t* EEPROMAddress;
	uint8_t  TotalBytes;

	if (Type == TYPE_FUSE)
    2e90:	82 30       	cpi	r24, 0x02	; 2
    2e92:	49 f4       	brne	.+18     	; 0x2ea6 <PM_SendFuseLockBytes+0x1e>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2e94:	af e2       	ldi	r26, 0x2F	; 47
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2e98:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
    2e9c:	80 2d       	mov	r24, r0
    2e9e:	18 2f       	mov	r17, r24
	{
		TotalBytes    = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
		EEPROMAddress = EEPROMVars.FuseBytes;
    2ea0:	c1 e3       	ldi	r28, 0x31	; 49
    2ea2:	d0 e0       	ldi	r29, 0x00	; 0
    2ea4:	08 c0       	rjmp	.+16     	; 0x2eb6 <PM_SendFuseLockBytes+0x2e>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2ea6:	a0 e3       	ldi	r26, 0x30	; 48
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2eaa:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
    2eae:	80 2d       	mov	r24, r0
    2eb0:	18 2f       	mov	r17, r24
	}
	else
	{
		TotalBytes    = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
		EEPROMAddress = EEPROMVars.LockBytes;	
    2eb2:	c9 e5       	ldi	r28, 0x59	; 89
    2eb4:	d0 e0       	ldi	r29, 0x00	; 0
	}

	while (TotalBytes--)                              // Write each of the fuse/lock bytes stored in memory to the slave AVR
	{
		for (uint8_t CommandByte = 0; CommandByte < 4; CommandByte++)      // Write each individual command byte
		{
			USI_SPITransmit(eeprom_read_byte(EEPROMAddress));
			EEPROMAddress++;
		}
		
		// Add some delay before programming next byte, if there is one:
		if (TotalBytes)
		  MAIN_Delay10MS(5);
    2eb6:	11 50       	subi	r17, 0x01	; 1
    2eb8:	1f 3f       	cpi	r17, 0xFF	; 255
    2eba:	91 f0       	breq	.+36     	; 0x2ee0 <PM_SendFuseLockBytes+0x58>
    2ebc:	03 e0       	ldi	r16, 0x03	; 3
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2ebe:	de 01       	movw	r26, r28
    2ec0:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
    2ec4:	80 2d       	mov	r24, r0
    2ec6:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    2eca:	21 96       	adiw	r28, 0x01	; 1
    2ecc:	01 50       	subi	r16, 0x01	; 1
    2ece:	07 ff       	sbrs	r16, 7
    2ed0:	f6 cf       	rjmp	.-20     	; 0x2ebe <PM_SendFuseLockBytes+0x36>
    2ed2:	11 23       	and	r17, r17
    2ed4:	19 f0       	breq	.+6      	; 0x2edc <PM_SendFuseLockBytes+0x54>
    2ed6:	85 e0       	ldi	r24, 0x05	; 5
    2ed8:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
    2edc:	11 50       	subi	r17, 0x01	; 1
    2ede:	70 f7       	brcc	.-36     	; 0x2ebc <PM_SendFuseLockBytes+0x34>
    2ee0:	df 91       	pop	r29
    2ee2:	cf 91       	pop	r28
    2ee4:	1f 91       	pop	r17
    2ee6:	0f 91       	pop	r16
    2ee8:	08 95       	ret

00002eea <PM_SendEraseCommand>:
	}
}

void PM_SendEraseCommand(void)
{			
    2eea:	1f 93       	push	r17
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
    2ef0:	c2 e0       	ldi	r28, 0x02	; 2
    2ef2:	d0 e0       	ldi	r29, 0x00	; 0
    2ef4:	13 e0       	ldi	r17, 0x03	; 3
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2ef6:	de 01       	movw	r26, r28
    2ef8:	ab 5e       	subi	r26, 0xEB	; 235
    2efa:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2efc:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
    2f00:	80 2d       	mov	r24, r0
    2f02:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
	for (uint8_t B = 2; B < 6 ; B++)                  // Read out the erase chip command bytes
    2f06:	11 50       	subi	r17, 0x01	; 1
    2f08:	21 96       	adiw	r28, 0x01	; 1
    2f0a:	17 ff       	sbrs	r17, 7
    2f0c:	f4 cf       	rjmp	.-24     	; 0x2ef6 <PM_SendEraseCommand+0xc>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2f0e:	a6 e1       	ldi	r26, 0x16	; 22
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2f12:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
    2f16:	80 2d       	mov	r24, r0
    2f18:	88 23       	and	r24, r24
    2f1a:	59 f0       	breq	.+22     	; 0x2f32 <PM_SendEraseCommand+0x48>
	  USI_SPITransmit(eeprom_read_byte(&EEPROMVars.EraseChip[B])); // Send the erase chip commands
			
	if (eeprom_read_byte(&EEPROMVars.EraseChip[1]))   // Value of 1 indicates a busy flag test
	{
		do
			USI_SPITransmitWord(0xF000);
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	90 ef       	ldi	r25, 0xF0	; 240
    2f20:	0e 94 ae 09 	call	0x135c <USI_SPITransmitWord>
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	0e 94 ae 09 	call	0x135c <USI_SPITransmitWord>
    2f2c:	80 fd       	sbrc	r24, 0
    2f2e:	f6 cf       	rjmp	.-20     	; 0x2f1c <PM_SendEraseCommand+0x32>
    2f30:	07 c0       	rjmp	.+14     	; 0x2f40 <PM_SendEraseCommand+0x56>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2f32:	a5 e1       	ldi	r26, 0x15	; 21
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2f36:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
    2f3a:	80 2d       	mov	r24, r0
    2f3c:	0e 94 07 03 	call	0x60e <MAIN_Delay1MS>
    2f40:	df 91       	pop	r29
    2f42:	cf 91       	pop	r28
    2f44:	1f 91       	pop	r17
    2f46:	08 95       	ret

00002f48 <PM_CreateProgrammingPackets>:
		while (USI_SPITransmitWord(0x0000) & 0x01);
	}
	else                                              // Cleared flag means use a predefined delay
	{		
		MAIN_Delay1MS(eeprom_read_byte(&EEPROMVars.EraseChip[0])); // Wait the erase delay
	}
}

void PM_CreateProgrammingPackets(const uint8_t Type)
{			
    2f48:	3f 92       	push	r3
    2f4a:	4f 92       	push	r4
    2f4c:	5f 92       	push	r5
    2f4e:	6f 92       	push	r6
    2f50:	7f 92       	push	r7
    2f52:	8f 92       	push	r8
    2f54:	9f 92       	push	r9
    2f56:	af 92       	push	r10
    2f58:	bf 92       	push	r11
    2f5a:	cf 92       	push	r12
    2f5c:	df 92       	push	r13
    2f5e:	ef 92       	push	r14
    2f60:	ff 92       	push	r15
    2f62:	0f 93       	push	r16
    2f64:	1f 93       	push	r17
    2f66:	cf 93       	push	r28
    2f68:	df 93       	push	r29
    2f6a:	c8 2f       	mov	r28, r24
	uint32_t BytesRead       = 0;
    2f6c:	aa 24       	eor	r10, r10
    2f6e:	bb 24       	eor	r11, r11
    2f70:	65 01       	movw	r12, r10
	uint32_t BytesToRead     = PM_GetStoredDataSize(Type);      // Get the byte size of the stored program
    2f72:	0e 94 e1 13 	call	0x27c2 <PM_GetStoredDataSize>
    2f76:	2b 01       	movw	r4, r22
    2f78:	3c 01       	movw	r6, r24
	uint16_t BytesPerProgram;
	uint16_t PageLength;
	uint8_t* EEPROMAddress;
	uint8_t  ContinuedPage   = FALSE;
    2f7a:	33 24       	eor	r3, r3
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \c addr. */
uint16_t
eeprom_read_word (const uint16_t *addr)
{
    2f7c:	c1 30       	cpi	r28, 0x01	; 1
    2f7e:	19 f4       	brne	.+6      	; 0x2f86 <PM_CreateProgrammingPackets+0x3e>
    2f80:	a1 e8       	ldi	r26, 0x81	; 129
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <PM_CreateProgrammingPackets+0x42>
    2f86:	a3 e8       	ldi	r26, 0x83	; 131
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
  uint16_t result;

  asm ( 
    2f8a:	0e 94 62 1a 	call	0x34c4 <__eeprom_read_word_1F2021>
    2f8e:	4f 01       	movw	r8, r30

	PageLength  = eeprom_read_word((Type == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength);
	CurrAddress = 0;
    2f90:	10 92 42 01 	sts	0x0142, r1
    2f94:	10 92 43 01 	sts	0x0143, r1
    2f98:	10 92 44 01 	sts	0x0144, r1
    2f9c:	10 92 45 01 	sts	0x0145, r1

	if (Type == TYPE_FLASH)
    2fa0:	c1 30       	cpi	r28, 0x01	; 1
    2fa2:	49 f4       	brne	.+18     	; 0x2fb6 <PM_CreateProgrammingPackets+0x6e>
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram;       // Set the EEPROM pointer to the write flash command bytes location
    2fa4:	c2 e0       	ldi	r28, 0x02	; 2
    2fa6:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(0, 0);
    2fa8:	60 e0       	ldi	r22, 0x00	; 0
    2faa:	70 e0       	ldi	r23, 0x00	; 0
    2fac:	cb 01       	movw	r24, r22
    2fae:	0e 94 07 0a 	call	0x140e <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_FLASH_ISP;
    2fb2:	83 e1       	ldi	r24, 0x13	; 19
    2fb4:	09 c0       	rjmp	.+18     	; 0x2fc8 <PM_CreateProgrammingPackets+0x80>
	}
	else
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;        // Set the EEPROM pointer to the write EEPROM command bytes location
    2fb6:	cb e0       	ldi	r28, 0x0B	; 11
    2fb8:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(PM_EEPROM_OFFSET / DF_INTERNALDF_BUFFBYTES, PM_EEPROM_OFFSET % DF_INTERNALDF_BUFFBYTES); // Start read from the EEPROM offset location
    2fba:	60 ee       	ldi	r22, 0xE0	; 224
    2fbc:	70 e0       	ldi	r23, 0x00	; 0
    2fbe:	84 ee       	ldi	r24, 0xE4	; 228
    2fc0:	93 e0       	ldi	r25, 0x03	; 3
    2fc2:	0e 94 07 0a 	call	0x140e <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_EEPROM_ISP;
    2fc6:	85 e1       	ldi	r24, 0x15	; 21
    2fc8:	80 93 4b 01 	sts	0x014B, r24
    2fcc:	ec e4       	ldi	r30, 0x4C	; 76
    2fce:	f1 e0       	ldi	r31, 0x01	; 1
    2fd0:	98 e0       	ldi	r25, 0x08	; 8
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2fd2:	de 01       	movw	r26, r28
    2fd4:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
    2fd8:	80 2d       	mov	r24, r0
    2fda:	81 93       	st	Z+, r24
	}

	for (uint8_t B = 1; B <= 9 ; B++)                 // Load in the write data command bytes
	{
		PacketBytes[B] = eeprom_read_byte(EEPROMAddress); // Synthesise a write packet header
		EEPROMAddress++;                               // Increment the EEPROM location counter
    2fdc:	21 96       	adiw	r28, 0x01	; 1
    2fde:	91 50       	subi	r25, 0x01	; 1
    2fe0:	97 ff       	sbrs	r25, 7
    2fe2:	f7 cf       	rjmp	.-18     	; 0x2fd2 <PM_CreateProgrammingPackets+0x8a>
	}
	
	BytesPerProgram = ((uint16_t)PacketBytes[1] << 8)
    2fe4:	80 91 4c 01 	lds	r24, 0x014C
    2fe8:	99 27       	eor	r25, r25
    2fea:	d8 2f       	mov	r29, r24
    2fec:	cc 27       	eor	r28, r28
    2fee:	80 91 4d 01 	lds	r24, 0x014D
    2ff2:	99 27       	eor	r25, r25
    2ff4:	c8 2b       	or	r28, r24
    2ff6:	d9 2b       	or	r29, r25
	                | PacketBytes[2];

	while (BytesRead < BytesToRead)
	{
		if (PacketBytes[3] & ISPCC_PROG_MODE_PAGE)
		{
			if (PageLength > 160) // Max 160 bytes at a time
			{
				if (!(ContinuedPage))                      // Start of a new page, program in the first 150 bytes
				{
					BytesPerProgram = 160;
					PacketBytes[3] &= ~ISPCC_PROG_MODE_PAGEDONE;		
					ContinuedPage = TRUE;
				}
				else                                       // Middle of a page, program in the remainder
				{
					BytesPerProgram = PageLength - 160;
					PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
					ContinuedPage = FALSE;
				}
				
				for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page				

				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);
				PacketBytes[2] = (uint8_t)(BytesPerProgram);

				BytesRead += BytesPerProgram;                         // Increment the counter
			}
			else
			{
				for (uint16_t LoadB = 0; LoadB < PageLength; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page
			
				PacketBytes[1]  = (uint8_t)(PageLength >> 8);
				PacketBytes[2]  = (uint8_t)(PageLength);
				PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;

				BytesRead += PageLength;                            // Increment the counter
			}
		}
		else
		{
			if ((BytesRead + BytesPerProgram) > BytesToRead)        // Less than a whole BytesPerProgram left of data to write
			{
				BytesPerProgram = BytesToRead - BytesRead;          // Next lot of bytes will be the remaining data length
				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);   // \. Save the new length
				PacketBytes[2] = (uint8_t)(BytesPerProgram);        // /  into the data packet
			}

			for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
				PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);    // Load in the page
			
			BytesRead += BytesPerProgram;                           // Increment the counter
		}
	
		if (!(BytesRead & 0xFFFF) && (BytesRead & 0x00FF0000))      // Extended address required
		{
			USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);            // Load extended address command
			USI_SPITransmit(0x00);
			USI_SPITransmit((BytesRead & 0x00FF0000) >> 16);        // The 3rd byte of the long holds the extended address
			USI_SPITransmit(0x00);
		}

		ISPCC_ProgramChip();                                        // Start the program cycle
    2ff8:	a4 14       	cp	r10, r4
    2ffa:	b5 04       	cpc	r11, r5
    2ffc:	c6 04       	cpc	r12, r6
    2ffe:	d7 04       	cpc	r13, r7
    3000:	08 f0       	brcs	.+2      	; 0x3004 <PM_CreateProgrammingPackets+0xbc>
    3002:	b2 c0       	rjmp	.+356    	; 0x3168 <PM_CreateProgrammingPackets+0x220>
    3004:	20 91 4e 01 	lds	r18, 0x014E
    3008:	82 2f       	mov	r24, r18
    300a:	99 27       	eor	r25, r25
    300c:	ac 01       	movw	r20, r24
    300e:	41 70       	andi	r20, 0x01	; 1
    3010:	50 70       	andi	r21, 0x00	; 0
    3012:	80 ff       	sbrs	r24, 0
    3014:	53 c0       	rjmp	.+166    	; 0x30bc <PM_CreateProgrammingPackets+0x174>
    3016:	f1 ea       	ldi	r31, 0xA1	; 161
    3018:	8f 16       	cp	r8, r31
    301a:	91 04       	cpc	r9, r1
    301c:	60 f1       	brcs	.+88     	; 0x3076 <PM_CreateProgrammingPackets+0x12e>
    301e:	33 20       	and	r3, r3
    3020:	41 f4       	brne	.+16     	; 0x3032 <PM_CreateProgrammingPackets+0xea>
    3022:	c0 ea       	ldi	r28, 0xA0	; 160
    3024:	d0 e0       	ldi	r29, 0x00	; 0
    3026:	2f 77       	andi	r18, 0x7F	; 127
    3028:	20 93 4e 01 	sts	0x014E, r18
    302c:	31 e0       	ldi	r19, 0x01	; 1
    302e:	33 2e       	mov	r3, r19
    3030:	07 c0       	rjmp	.+14     	; 0x3040 <PM_CreateProgrammingPackets+0xf8>
    3032:	e4 01       	movw	r28, r8
    3034:	c0 5a       	subi	r28, 0xA0	; 160
    3036:	d0 40       	sbci	r29, 0x00	; 0
    3038:	20 68       	ori	r18, 0x80	; 128
    303a:	20 93 4e 01 	sts	0x014E, r18
    303e:	33 24       	eor	r3, r3
    3040:	00 e0       	ldi	r16, 0x00	; 0
    3042:	10 e0       	ldi	r17, 0x00	; 0
    3044:	0c 17       	cp	r16, r28
    3046:	1d 07       	cpc	r17, r29
    3048:	78 f4       	brcc	.+30     	; 0x3068 <PM_CreateProgrammingPackets+0x120>
    304a:	25 e5       	ldi	r18, 0x55	; 85
    304c:	e2 2e       	mov	r14, r18
    304e:	21 e0       	ldi	r18, 0x01	; 1
    3050:	f2 2e       	mov	r15, r18
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	0e 94 36 09 	call	0x126c <SPI_SPITransmit>
    3058:	f7 01       	movw	r30, r14
    305a:	81 93       	st	Z+, r24
    305c:	7f 01       	movw	r14, r30
    305e:	0f 5f       	subi	r16, 0xFF	; 255
    3060:	1f 4f       	sbci	r17, 0xFF	; 255
    3062:	0c 17       	cp	r16, r28
    3064:	1d 07       	cpc	r17, r29
    3066:	a8 f3       	brcs	.-22     	; 0x3052 <PM_CreateProgrammingPackets+0x10a>
    3068:	8d 2f       	mov	r24, r29
    306a:	99 27       	eor	r25, r25
    306c:	80 93 4c 01 	sts	0x014C, r24
    3070:	c0 93 4d 01 	sts	0x014D, r28
    3074:	4b c0       	rjmp	.+150    	; 0x310c <PM_CreateProgrammingPackets+0x1c4>
    3076:	00 e0       	ldi	r16, 0x00	; 0
    3078:	10 e0       	ldi	r17, 0x00	; 0
    307a:	08 15       	cp	r16, r8
    307c:	19 05       	cpc	r17, r9
    307e:	78 f4       	brcc	.+30     	; 0x309e <PM_CreateProgrammingPackets+0x156>
    3080:	85 e5       	ldi	r24, 0x55	; 85
    3082:	e8 2e       	mov	r14, r24
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	f8 2e       	mov	r15, r24
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	0e 94 36 09 	call	0x126c <SPI_SPITransmit>
    308e:	f7 01       	movw	r30, r14
    3090:	81 93       	st	Z+, r24
    3092:	7f 01       	movw	r14, r30
    3094:	0f 5f       	subi	r16, 0xFF	; 255
    3096:	1f 4f       	sbci	r17, 0xFF	; 255
    3098:	08 15       	cp	r16, r8
    309a:	19 05       	cpc	r17, r9
    309c:	a8 f3       	brcs	.-22     	; 0x3088 <PM_CreateProgrammingPackets+0x140>
    309e:	89 2d       	mov	r24, r9
    30a0:	99 27       	eor	r25, r25
    30a2:	80 93 4c 01 	sts	0x014C, r24
    30a6:	80 92 4d 01 	sts	0x014D, r8
    30aa:	80 91 4e 01 	lds	r24, 0x014E
    30ae:	80 68       	ori	r24, 0x80	; 128
    30b0:	80 93 4e 01 	sts	0x014E, r24
    30b4:	c4 01       	movw	r24, r8
    30b6:	aa 27       	eor	r26, r26
    30b8:	bb 27       	eor	r27, r27
    30ba:	2b c0       	rjmp	.+86     	; 0x3112 <PM_CreateProgrammingPackets+0x1ca>
    30bc:	ce 01       	movw	r24, r28
    30be:	aa 27       	eor	r26, r26
    30c0:	bb 27       	eor	r27, r27
    30c2:	8a 0d       	add	r24, r10
    30c4:	9b 1d       	adc	r25, r11
    30c6:	ac 1d       	adc	r26, r12
    30c8:	bd 1d       	adc	r27, r13
    30ca:	48 16       	cp	r4, r24
    30cc:	59 06       	cpc	r5, r25
    30ce:	6a 06       	cpc	r6, r26
    30d0:	7b 06       	cpc	r7, r27
    30d2:	48 f4       	brcc	.+18     	; 0x30e6 <PM_CreateProgrammingPackets+0x19e>
    30d4:	e2 01       	movw	r28, r4
    30d6:	ca 19       	sub	r28, r10
    30d8:	db 09       	sbc	r29, r11
    30da:	8d 2f       	mov	r24, r29
    30dc:	99 27       	eor	r25, r25
    30de:	80 93 4c 01 	sts	0x014C, r24
    30e2:	c0 93 4d 01 	sts	0x014D, r28
    30e6:	8a 01       	movw	r16, r20
    30e8:	4c 17       	cp	r20, r28
    30ea:	5d 07       	cpc	r21, r29
    30ec:	78 f4       	brcc	.+30     	; 0x310c <PM_CreateProgrammingPackets+0x1c4>
    30ee:	f5 e5       	ldi	r31, 0x55	; 85
    30f0:	ef 2e       	mov	r14, r31
    30f2:	f1 e0       	ldi	r31, 0x01	; 1
    30f4:	ff 2e       	mov	r15, r31
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	0e 94 36 09 	call	0x126c <SPI_SPITransmit>
    30fc:	f7 01       	movw	r30, r14
    30fe:	81 93       	st	Z+, r24
    3100:	7f 01       	movw	r14, r30
    3102:	0f 5f       	subi	r16, 0xFF	; 255
    3104:	1f 4f       	sbci	r17, 0xFF	; 255
    3106:	0c 17       	cp	r16, r28
    3108:	1d 07       	cpc	r17, r29
    310a:	a8 f3       	brcs	.-22     	; 0x30f6 <PM_CreateProgrammingPackets+0x1ae>
    310c:	ce 01       	movw	r24, r28
    310e:	aa 27       	eor	r26, r26
    3110:	bb 27       	eor	r27, r27
    3112:	a8 0e       	add	r10, r24
    3114:	b9 1e       	adc	r11, r25
    3116:	ca 1e       	adc	r12, r26
    3118:	db 1e       	adc	r13, r27
    311a:	a1 14       	cp	r10, r1
    311c:	b1 04       	cpc	r11, r1
    311e:	e1 f4       	brne	.+56     	; 0x3158 <PM_CreateProgrammingPackets+0x210>
    3120:	e1 2c       	mov	r14, r1
    3122:	f1 2c       	mov	r15, r1
    3124:	ef ef       	ldi	r30, 0xFF	; 255
    3126:	0e 2f       	mov	r16, r30
    3128:	11 2d       	mov	r17, r1
    312a:	ea 20       	and	r14, r10
    312c:	fb 20       	and	r15, r11
    312e:	0c 21       	and	r16, r12
    3130:	1d 21       	and	r17, r13
    3132:	e1 14       	cp	r14, r1
    3134:	f1 04       	cpc	r15, r1
    3136:	01 05       	cpc	r16, r1
    3138:	11 05       	cpc	r17, r1
    313a:	71 f0       	breq	.+28     	; 0x3158 <PM_CreateProgrammingPackets+0x210>
    313c:	8d e4       	ldi	r24, 0x4D	; 77
    313e:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    3148:	c8 01       	movw	r24, r16
    314a:	aa 27       	eor	r26, r26
    314c:	bb 27       	eor	r27, r27
    314e:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	0e 94 9b 09 	call	0x1336 <USI_SPITransmit>
    3158:	0e 94 89 11 	call	0x2312 <ISPCC_ProgramChip>
    315c:	a4 14       	cp	r10, r4
    315e:	b5 04       	cpc	r11, r5
    3160:	c6 04       	cpc	r12, r6
    3162:	d7 04       	cpc	r13, r7
    3164:	08 f4       	brcc	.+2      	; 0x3168 <PM_CreateProgrammingPackets+0x220>
    3166:	4e cf       	rjmp	.-356    	; 0x3004 <PM_CreateProgrammingPackets+0xbc>
    3168:	df 91       	pop	r29
    316a:	cf 91       	pop	r28
    316c:	1f 91       	pop	r17
    316e:	0f 91       	pop	r16
    3170:	ff 90       	pop	r15
    3172:	ef 90       	pop	r14
    3174:	df 90       	pop	r13
    3176:	cf 90       	pop	r12
    3178:	bf 90       	pop	r11
    317a:	af 90       	pop	r10
    317c:	9f 90       	pop	r9
    317e:	8f 90       	pop	r8
    3180:	7f 90       	pop	r7
    3182:	6f 90       	pop	r6
    3184:	5f 90       	pop	r5
    3186:	4f 90       	pop	r4
    3188:	3f 90       	pop	r3
    318a:	08 95       	ret

0000318c <PM_ShowStoredItemSizes>:
	}
}

void PM_ShowStoredItemSizes(void)
{
    318c:	1f 93       	push	r17
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
    3196:	2e 97       	sbiw	r28, 0x0e	; 14
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	f8 94       	cli
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[14];
	uint8_t ItemInfoIndex = 0;
    31a2:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t TempB;
	
	JoyStatus = 1;
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)                           // Joystick is in the non-center position
    31a8:	8e b3       	in	r24, 0x1e	; 30
    31aa:	88 23       	and	r24, r24
    31ac:	e9 f3       	breq	.-6      	; 0x31a8 <PM_ShowStoredItemSizes+0x1c>
		{
			if (JoyStatus & JOY_UP)              // Previous item
    31ae:	f6 9b       	sbis	0x1e, 6	; 30
    31b0:	06 c0       	rjmp	.+12     	; 0x31be <PM_ShowStoredItemSizes+0x32>
				(ItemInfoIndex == 0)? ItemInfoIndex = 3 : ItemInfoIndex--;
    31b2:	11 23       	and	r17, r17
    31b4:	11 f4       	brne	.+4      	; 0x31ba <PM_ShowStoredItemSizes+0x2e>
    31b6:	13 e0       	ldi	r17, 0x03	; 3
    31b8:	0c c0       	rjmp	.+24     	; 0x31d2 <PM_ShowStoredItemSizes+0x46>
    31ba:	11 50       	subi	r17, 0x01	; 1
    31bc:	0a c0       	rjmp	.+20     	; 0x31d2 <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_DOWN)      // Next item
    31be:	f7 9b       	sbis	0x1e, 7	; 30
    31c0:	06 c0       	rjmp	.+12     	; 0x31ce <PM_ShowStoredItemSizes+0x42>
				(ItemInfoIndex == 3)? ItemInfoIndex = 0 : ItemInfoIndex++;
    31c2:	13 30       	cpi	r17, 0x03	; 3
    31c4:	11 f4       	brne	.+4      	; 0x31ca <PM_ShowStoredItemSizes+0x3e>
    31c6:	10 e0       	ldi	r17, 0x00	; 0
    31c8:	04 c0       	rjmp	.+8      	; 0x31d2 <PM_ShowStoredItemSizes+0x46>
    31ca:	1f 5f       	subi	r17, 0xFF	; 255
    31cc:	02 c0       	rjmp	.+4      	; 0x31d2 <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_LEFT)
    31ce:	f2 99       	sbic	0x1e, 2	; 30
    31d0:	54 c0       	rjmp	.+168    	; 0x327a <PM_ShowStoredItemSizes+0xee>
				return;
		
			switch (ItemInfoIndex)
    31d2:	81 2f       	mov	r24, r17
    31d4:	99 27       	eor	r25, r25
    31d6:	81 30       	cpi	r24, 0x01	; 1
    31d8:	91 05       	cpc	r25, r1
    31da:	a1 f0       	breq	.+40     	; 0x3204 <PM_ShowStoredItemSizes+0x78>
    31dc:	82 30       	cpi	r24, 0x02	; 2
    31de:	91 05       	cpc	r25, r1
    31e0:	1c f4       	brge	.+6      	; 0x31e8 <PM_ShowStoredItemSizes+0x5c>
    31e2:	89 2b       	or	r24, r25
    31e4:	39 f0       	breq	.+14     	; 0x31f4 <PM_ShowStoredItemSizes+0x68>
    31e6:	42 c0       	rjmp	.+132    	; 0x326c <PM_ShowStoredItemSizes+0xe0>
    31e8:	82 30       	cpi	r24, 0x02	; 2
    31ea:	91 05       	cpc	r25, r1
    31ec:	01 f1       	breq	.+64     	; 0x322e <PM_ShowStoredItemSizes+0xa2>
    31ee:	03 97       	sbiw	r24, 0x03	; 3
    31f0:	39 f1       	breq	.+78     	; 0x3240 <PM_ShowStoredItemSizes+0xb4>
    31f2:	3c c0       	rjmp	.+120    	; 0x326c <PM_ShowStoredItemSizes+0xe0>
			{
				case 0:
					strcpy_P(Buffer, PSTR("DATA-"));
    31f4:	68 e0       	ldi	r22, 0x08	; 8
    31f6:	74 e0       	ldi	r23, 0x04	; 4
    31f8:	ce 01       	movw	r24, r28
    31fa:	01 96       	adiw	r24, 0x01	; 1
    31fc:	0e 94 19 1a 	call	0x3432 <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_FLASH), &Buffer[5], 10);
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	07 c0       	rjmp	.+14     	; 0x3212 <PM_ShowStoredItemSizes+0x86>
					break;
				case 1:
					strcpy_P(Buffer, PSTR("EPRM-"));
    3204:	6e e0       	ldi	r22, 0x0E	; 14
    3206:	74 e0       	ldi	r23, 0x04	; 4
    3208:	ce 01       	movw	r24, r28
    320a:	01 96       	adiw	r24, 0x01	; 1
    320c:	0e 94 19 1a 	call	0x3432 <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_EEPROM), &Buffer[5], 10);
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	0e 94 e1 13 	call	0x27c2 <PM_GetStoredDataSize>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	2a e0       	ldi	r18, 0x0A	; 10
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	ae 01       	movw	r20, r28
    3220:	4a 5f       	subi	r20, 0xFA	; 250
    3222:	5f 4f       	sbci	r21, 0xFF	; 255
    3224:	bc 01       	movw	r22, r24
    3226:	cd 01       	movw	r24, r26
    3228:	0e 94 20 1a 	call	0x3440 <ultoa>
					break;
    322c:	1f c0       	rjmp	.+62     	; 0x326c <PM_ShowStoredItemSizes+0xe0>
				case 2:
					strcpy_P(Buffer, PSTR("FUSE-"));
    322e:	64 e1       	ldi	r22, 0x14	; 20
    3230:	74 e0       	ldi	r23, 0x04	; 4
    3232:	ce 01       	movw	r24, r28
    3234:	01 96       	adiw	r24, 0x01	; 1
    3236:	0e 94 19 1a 	call	0x3432 <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    323a:	af e2       	ldi	r26, 0x2F	; 47
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	08 c0       	rjmp	.+16     	; 0x3250 <PM_ShowStoredItemSizes+0xc4>
					TempB = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);
					break;
				case 3:
					strcpy_P(Buffer, PSTR("LOCK-"));
    3240:	6a e1       	ldi	r22, 0x1A	; 26
    3242:	74 e0       	ldi	r23, 0x04	; 4
    3244:	ce 01       	movw	r24, r28
    3246:	01 96       	adiw	r24, 0x01	; 1
    3248:	0e 94 19 1a 	call	0x3432 <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    324c:	a0 e3       	ldi	r26, 0x30	; 48
    324e:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    3250:	0e 94 55 1a 	call	0x34aa <__eeprom_read_byte_1F2021>
    3254:	80 2d       	mov	r24, r0
					TempB = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);		
    3256:	8f 3f       	cpi	r24, 0xFF	; 255
    3258:	11 f0       	breq	.+4      	; 0x325e <PM_ShowStoredItemSizes+0xd2>
    325a:	99 27       	eor	r25, r25
    325c:	02 c0       	rjmp	.+4      	; 0x3262 <PM_ShowStoredItemSizes+0xd6>
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	be 01       	movw	r22, r28
    3264:	6a 5f       	subi	r22, 0xFA	; 250
    3266:	7f 4f       	sbci	r23, 0xFF	; 255
    3268:	0e 94 35 03 	call	0x66a <MAIN_IntToStr>
			}
	
			LCD_puts(Buffer);
    326c:	ce 01       	movw	r24, r28
    326e:	01 96       	adiw	r24, 0x01	; 1
    3270:	0e 94 17 08 	call	0x102e <LCD_puts>

			MAIN_WaitForJoyRelease();
    3274:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
    3278:	97 cf       	rjmp	.-210    	; 0x31a8 <PM_ShowStoredItemSizes+0x1c>
    327a:	2e 96       	adiw	r28, 0x0e	; 14
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	de bf       	out	0x3e, r29	; 62
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	cd bf       	out	0x3d, r28	; 61
    3286:	df 91       	pop	r29
    3288:	cf 91       	pop	r28
    328a:	1f 91       	pop	r17
    328c:	08 95       	ret

0000328e <TM_FindNextTag>:
	DF_EnableDataflash(FALSE);
}

void TM_FindNextTag(void)
{
    328e:	af 92       	push	r10
    3290:	bf 92       	push	r11
    3292:	df 92       	push	r13
    3294:	ef 92       	push	r14
    3296:	ff 92       	push	r15
    3298:	0f 93       	push	r16
    329a:	1f 93       	push	r17
    329c:	cf 93       	push	r28
    329e:	df 93       	push	r29
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	69 97       	sbiw	r28, 0x19	; 25
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Buffer[21];
	uint8_t  HeadBuff[4]      = BT_TAGHEADER;
    32b0:	80 e4       	ldi	r24, 0x40	; 64
    32b2:	8e 8b       	std	Y+22, r24	; 0x16
    32b4:	86 e1       	ldi	r24, 0x16	; 22
    32b6:	a8 2e       	mov	r10, r24
    32b8:	b1 2c       	mov	r11, r1
    32ba:	ac 0e       	add	r10, r28
    32bc:	bd 1e       	adc	r11, r29
    32be:	88 e2       	ldi	r24, 0x28	; 40
    32c0:	8f 8b       	std	Y+23, r24	; 0x17
    32c2:	83 e2       	ldi	r24, 0x23	; 35
    32c4:	88 8f       	std	Y+24, r24	; 0x18
    32c6:	89 e2       	ldi	r24, 0x29	; 41
    32c8:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t ProgDataSize     = PM_GetStoredDataSize(TYPE_FLASH);
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	0e 94 e1 13 	call	0x27c2 <PM_GetStoredDataSize>
    32d0:	7b 01       	movw	r14, r22
    32d2:	8c 01       	movw	r16, r24
	uint8_t  TotalOkHeadBytes = 0;
    32d4:	dd 24       	eor	r13, r13
	uint8_t  TagByte;
	uint8_t  BytesRead;
	
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);    // Orange = busy
    32d6:	81 b3       	in	r24, 0x11	; 17
    32d8:	80 63       	ori	r24, 0x30	; 48
    32da:	81 bb       	out	0x11, r24	; 17

	while (DFPos < ProgDataSize)
	{
		BytesRead = 1;
		
		if (SPI_SPITransmit(0x00) == HeadBuff[TotalOkHeadBytes++])
		{
			if (TotalOkHeadBytes == 4)
			{
				uint8_t HB;
			
				for (HB = 0; HB < 20; HB++)
				{
					TagByte = SPI_SPITransmit(0x00);
					Buffer[HB] = TagByte;
					
					if (TagByte == 0x00)
					  break;
				}
				
				Buffer[20] = '\0';             // Make sure string is null-terminated

				TagExists = TRUE;
				BytesRead = (HB + 2);

				LCD_puts(Buffer);
				MAIN_SETSTATUSLED(MAIN_STATLED_GREEN); // Green = ready
				return;
			}
		}
		else
		{
			TotalOkHeadBytes = 0;
		}

		DFPos += BytesRead;
    32dc:	80 91 b4 02 	lds	r24, 0x02B4
    32e0:	90 91 b5 02 	lds	r25, 0x02B5
    32e4:	a0 91 b6 02 	lds	r26, 0x02B6
    32e8:	b0 91 b7 02 	lds	r27, 0x02B7
    32ec:	8e 15       	cp	r24, r14
    32ee:	9f 05       	cpc	r25, r15
    32f0:	a0 07       	cpc	r26, r16
    32f2:	b1 07       	cpc	r27, r17
    32f4:	08 f0       	brcs	.+2      	; 0x32f8 <TM_FindNextTag+0x6a>
    32f6:	43 c0       	rjmp	.+134    	; 0x337e <TM_FindNextTag+0xf0>
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	0e 94 36 09 	call	0x126c <SPI_SPITransmit>
    32fe:	f5 01       	movw	r30, r10
    3300:	ed 0d       	add	r30, r13
    3302:	f1 1d       	adc	r31, r1
    3304:	d3 94       	inc	r13
    3306:	90 81       	ld	r25, Z
    3308:	89 17       	cp	r24, r25
    330a:	21 f5       	brne	.+72     	; 0x3354 <TM_FindNextTag+0xc6>
    330c:	84 e0       	ldi	r24, 0x04	; 4
    330e:	d8 16       	cp	r13, r24
    3310:	11 f5       	brne	.+68     	; 0x3356 <TM_FindNextTag+0xc8>
    3312:	ff 24       	eor	r15, r15
    3314:	00 e0       	ldi	r16, 0x00	; 0
    3316:	10 e0       	ldi	r17, 0x00	; 0
    3318:	80 e0       	ldi	r24, 0x00	; 0
    331a:	0e 94 36 09 	call	0x126c <SPI_SPITransmit>
    331e:	9e 01       	movw	r18, r28
    3320:	2f 5f       	subi	r18, 0xFF	; 255
    3322:	3f 4f       	sbci	r19, 0xFF	; 255
    3324:	f8 01       	movw	r30, r16
    3326:	e2 0f       	add	r30, r18
    3328:	f3 1f       	adc	r31, r19
    332a:	80 83       	st	Z, r24
    332c:	88 23       	and	r24, r24
    332e:	31 f0       	breq	.+12     	; 0x333c <TM_FindNextTag+0xae>
    3330:	f3 94       	inc	r15
    3332:	0f 5f       	subi	r16, 0xFF	; 255
    3334:	1f 4f       	sbci	r17, 0xFF	; 255
    3336:	83 e1       	ldi	r24, 0x13	; 19
    3338:	8f 15       	cp	r24, r15
    333a:	70 f7       	brcc	.-36     	; 0x3318 <TM_FindNextTag+0x8a>
    333c:	1d 8a       	std	Y+21, r1	; 0x15
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	80 93 62 02 	sts	0x0262, r24
    3344:	c9 01       	movw	r24, r18
    3346:	0e 94 17 08 	call	0x102e <LCD_puts>
    334a:	81 b3       	in	r24, 0x11	; 17
    334c:	8f 7c       	andi	r24, 0xCF	; 207
    334e:	80 61       	ori	r24, 0x10	; 16
    3350:	81 bb       	out	0x11, r24	; 17
    3352:	31 c0       	rjmp	.+98     	; 0x33b6 <TM_FindNextTag+0x128>
    3354:	dd 24       	eor	r13, r13
    3356:	80 91 b4 02 	lds	r24, 0x02B4
    335a:	90 91 b5 02 	lds	r25, 0x02B5
    335e:	a0 91 b6 02 	lds	r26, 0x02B6
    3362:	b0 91 b7 02 	lds	r27, 0x02B7
    3366:	01 96       	adiw	r24, 0x01	; 1
    3368:	a1 1d       	adc	r26, r1
    336a:	b1 1d       	adc	r27, r1
    336c:	80 93 b4 02 	sts	0x02B4, r24
    3370:	90 93 b5 02 	sts	0x02B5, r25
    3374:	a0 93 b6 02 	sts	0x02B6, r26
    3378:	b0 93 b7 02 	sts	0x02B7, r27
    337c:	b7 cf       	rjmp	.-146    	; 0x32ec <TM_FindNextTag+0x5e>
	}
	
	DF_ContinuousReadEnable(0, 0);
    337e:	60 e0       	ldi	r22, 0x00	; 0
    3380:	70 e0       	ldi	r23, 0x00	; 0
    3382:	cb 01       	movw	r24, r22
    3384:	0e 94 07 0a 	call	0x140e <DF_ContinuousReadEnable>
	DFPos = 0;
    3388:	10 92 b4 02 	sts	0x02B4, r1
    338c:	10 92 b5 02 	sts	0x02B5, r1
    3390:	10 92 b6 02 	sts	0x02B6, r1
    3394:	10 92 b7 02 	sts	0x02B7, r1
	
	if (TagExists == FALSE)
    3398:	80 91 62 02 	lds	r24, 0x0262
    339c:	88 23       	and	r24, r24
    339e:	49 f4       	brne	.+18     	; 0x33b2 <TM_FindNextTag+0x124>
	{
		MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);  // Green = ready
    33a0:	81 b3       	in	r24, 0x11	; 17
    33a2:	8f 7c       	andi	r24, 0xCF	; 207
    33a4:	80 61       	ori	r24, 0x10	; 16
    33a6:	81 bb       	out	0x11, r24	; 17
		MAIN_ShowError(PSTR("NO TAGS"));
    33a8:	80 e2       	ldi	r24, 0x20	; 32
    33aa:	94 e0       	ldi	r25, 0x04	; 4
    33ac:	0e 94 6e 03 	call	0x6dc <MAIN_ShowError>
    33b0:	02 c0       	rjmp	.+4      	; 0x33b6 <TM_FindNextTag+0x128>
	}
	else
	{
		/* The following line _is_ recursion, but the function will only ever call itself
		   a maximum of one time. The function will call itself upon skipping from the last
		   tag stored in the program data to the first; to guard against infinite recursion
		   if no tags are present, the system will error out if the TagExists flag is empty
		   after a full data read. Once a tag has been read and displayed onto the LCD, the
           function returns to the main tag handling routine.                               */
		TM_FindNextTag();
    33b2:	0e 94 47 19 	call	0x328e <TM_FindNextTag>
    33b6:	69 96       	adiw	r28, 0x19	; 25
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	f8 94       	cli
    33bc:	de bf       	out	0x3e, r29	; 62
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	cd bf       	out	0x3d, r28	; 61
    33c2:	df 91       	pop	r29
    33c4:	cf 91       	pop	r28
    33c6:	1f 91       	pop	r17
    33c8:	0f 91       	pop	r16
    33ca:	ff 90       	pop	r15
    33cc:	ef 90       	pop	r14
    33ce:	df 90       	pop	r13
    33d0:	bf 90       	pop	r11
    33d2:	af 90       	pop	r10
    33d4:	08 95       	ret

000033d6 <TM_ShowTags>:
    33d6:	60 e0       	ldi	r22, 0x00	; 0
    33d8:	70 e0       	ldi	r23, 0x00	; 0
    33da:	cb 01       	movw	r24, r22
    33dc:	0e 94 07 0a 	call	0x140e <DF_ContinuousReadEnable>
    33e0:	10 92 62 02 	sts	0x0262, r1
    33e4:	10 92 b4 02 	sts	0x02B4, r1
    33e8:	10 92 b5 02 	sts	0x02B5, r1
    33ec:	10 92 b6 02 	sts	0x02B6, r1
    33f0:	10 92 b7 02 	sts	0x02B7, r1
    33f4:	0e 94 47 19 	call	0x328e <TM_FindNextTag>
    33f8:	80 91 62 02 	lds	r24, 0x0262
    33fc:	88 23       	and	r24, r24
    33fe:	71 f0       	breq	.+28     	; 0x341c <TM_ShowTags+0x46>
    3400:	8e b3       	in	r24, 0x1e	; 30
    3402:	88 23       	and	r24, r24
    3404:	e9 f3       	breq	.-6      	; 0x3400 <TM_ShowTags+0x2a>
    3406:	f7 9b       	sbis	0x1e, 7	; 30
    3408:	03 c0       	rjmp	.+6      	; 0x3410 <TM_ShowTags+0x3a>
    340a:	0e 94 47 19 	call	0x328e <TM_FindNextTag>
    340e:	02 c0       	rjmp	.+4      	; 0x3414 <TM_ShowTags+0x3e>
    3410:	f2 99       	sbic	0x1e, 2	; 30
    3412:	03 c0       	rjmp	.+6      	; 0x341a <TM_ShowTags+0x44>
    3414:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
    3418:	f3 cf       	rjmp	.-26     	; 0x3400 <TM_ShowTags+0x2a>
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	0e 94 d0 09 	call	0x13a0 <DF_EnableDataflash>
    3420:	08 95       	ret

00003422 <__vector_2>:
.global PCINT0_vect             ; Pin change 0 (joystick)
.global PCINT1_vect             ; Pin change 1 (joystick)

PCINT0_vect:
  jmp PCINT1_vect
    3422:	0c 94 94 03 	jmp	0x728 <__vector_3>

00003426 <__vector_10>:

.global TIMER0_COMP_vect             ; Timer 0 compare

TIMER0_COMP_vect:
  push r24
    3426:	8f 93       	push	r24
  ldi r24, (USI_CONTROL_REG_FLAGS | (1<<USITC))
    3428:	8b e5       	ldi	r24, 0x5B	; 91
  sts _SFR_MEM_ADDR(USICR), r24
    342a:	80 93 b8 00 	sts	0x00B8, r24
  pop r24
    342e:	8f 91       	pop	r24
  reti
    3430:	18 95       	reti

00003432 <strcpy_P>:
    3432:	fb 01       	movw	r30, r22
    3434:	dc 01       	movw	r26, r24
    3436:	05 90       	lpm	r0, Z+
    3438:	0d 92       	st	X+, r0
    343a:	00 20       	and	r0, r0
    343c:	e1 f7       	brne	.-8      	; 0x3436 <strcpy_P+0x4>
    343e:	08 95       	ret

00003440 <ultoa>:
    3440:	fa 01       	movw	r30, r20
    3442:	cf 93       	push	r28
    3444:	ff 93       	push	r31
    3446:	ef 93       	push	r30
    3448:	22 30       	cpi	r18, 0x02	; 2
    344a:	cc f0       	brlt	.+50     	; 0x347e <ultoa+0x3e>
    344c:	25 32       	cpi	r18, 0x25	; 37
    344e:	bc f4       	brge	.+46     	; 0x347e <ultoa+0x3e>
    3450:	c2 2f       	mov	r28, r18
    3452:	2c 2f       	mov	r18, r28
    3454:	33 27       	eor	r19, r19
    3456:	44 27       	eor	r20, r20
    3458:	55 27       	eor	r21, r21
    345a:	ff 93       	push	r31
    345c:	ef 93       	push	r30
    345e:	0e 94 7d 1a 	call	0x34fa <__udivmodsi4>
    3462:	ef 91       	pop	r30
    3464:	ff 91       	pop	r31
    3466:	60 5d       	subi	r22, 0xD0	; 208
    3468:	6a 33       	cpi	r22, 0x3A	; 58
    346a:	0c f0       	brlt	.+2      	; 0x346e <ultoa+0x2e>
    346c:	69 5d       	subi	r22, 0xD9	; 217
    346e:	61 93       	st	Z+, r22
    3470:	b9 01       	movw	r22, r18
    3472:	ca 01       	movw	r24, r20
    3474:	60 50       	subi	r22, 0x00	; 0
    3476:	70 40       	sbci	r23, 0x00	; 0
    3478:	80 40       	sbci	r24, 0x00	; 0
    347a:	90 40       	sbci	r25, 0x00	; 0
    347c:	51 f7       	brne	.-44     	; 0x3452 <ultoa+0x12>
    347e:	10 82       	st	Z, r1
    3480:	8f 91       	pop	r24
    3482:	9f 91       	pop	r25
    3484:	cf 91       	pop	r28
    3486:	0c 94 45 1a 	jmp	0x348a <strrev>

0000348a <strrev>:
    348a:	dc 01       	movw	r26, r24
    348c:	fc 01       	movw	r30, r24
    348e:	01 90       	ld	r0, Z+
    3490:	00 20       	and	r0, r0
    3492:	e9 f7       	brne	.-6      	; 0x348e <strrev+0x4>
    3494:	32 97       	sbiw	r30, 0x02	; 2
    3496:	ae 17       	cp	r26, r30
    3498:	bf 07       	cpc	r27, r31
    349a:	30 f4       	brcc	.+12     	; 0x34a8 <strrev+0x1e>
    349c:	7c 91       	ld	r23, X
    349e:	60 81       	ld	r22, Z
    34a0:	70 83       	st	Z, r23
    34a2:	31 97       	sbiw	r30, 0x01	; 1
    34a4:	6d 93       	st	X+, r22
    34a6:	f7 cf       	rjmp	.-18     	; 0x3496 <strrev+0xc>
    34a8:	08 95       	ret

000034aa <__eeprom_read_byte_1F2021>:
    34aa:	f9 99       	sbic	0x1f, 1	; 31
    34ac:	fe cf       	rjmp	.-4      	; 0x34aa <__eeprom_read_byte_1F2021>
    34ae:	b2 bd       	out	0x22, r27	; 34
    34b0:	a1 bd       	out	0x21, r26	; 33
    34b2:	f8 9a       	sbi	0x1f, 0	; 31
    34b4:	11 96       	adiw	r26, 0x01	; 1
    34b6:	00 b4       	in	r0, 0x20	; 32
    34b8:	08 95       	ret

000034ba <__eeprom_read_block_1F2021>:
    34ba:	f7 df       	rcall	.-18     	; 0x34aa <__eeprom_read_byte_1F2021>
    34bc:	01 92       	st	Z+, r0
    34be:	1a 94       	dec	r1
    34c0:	e1 f7       	brne	.-8      	; 0x34ba <__eeprom_read_block_1F2021>
    34c2:	08 95       	ret

000034c4 <__eeprom_read_word_1F2021>:
    34c4:	f2 df       	rcall	.-28     	; 0x34aa <__eeprom_read_byte_1F2021>
    34c6:	e0 2d       	mov	r30, r0
    34c8:	f0 df       	rcall	.-32     	; 0x34aa <__eeprom_read_byte_1F2021>
    34ca:	f0 2d       	mov	r31, r0
    34cc:	08 95       	ret

000034ce <__eeprom_write_byte_1F2021>:
    34ce:	f9 99       	sbic	0x1f, 1	; 31
    34d0:	fe cf       	rjmp	.-4      	; 0x34ce <__eeprom_write_byte_1F2021>
    34d2:	b2 bd       	out	0x22, r27	; 34
    34d4:	a1 bd       	out	0x21, r26	; 33
    34d6:	00 bc       	out	0x20, r0	; 32
    34d8:	11 96       	adiw	r26, 0x01	; 1
    34da:	0f b6       	in	r0, 0x3f	; 63
    34dc:	f8 94       	cli
    34de:	fa 9a       	sbi	0x1f, 2	; 31
    34e0:	f9 9a       	sbi	0x1f, 1	; 31
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	08 95       	ret

000034e6 <__eeprom_write_word_1F2021>:
    34e6:	f3 df       	rcall	.-26     	; 0x34ce <__eeprom_write_byte_1F2021>
    34e8:	01 2c       	mov	r0, r1
    34ea:	f1 df       	rcall	.-30     	; 0x34ce <__eeprom_write_byte_1F2021>
    34ec:	11 24       	eor	r1, r1
    34ee:	08 95       	ret

000034f0 <__eeprom_write_block_1F2021>:
    34f0:	01 90       	ld	r0, Z+
    34f2:	ed df       	rcall	.-38     	; 0x34ce <__eeprom_write_byte_1F2021>
    34f4:	1a 94       	dec	r1
    34f6:	e1 f7       	brne	.-8      	; 0x34f0 <__eeprom_write_block_1F2021>
    34f8:	08 95       	ret

000034fa <__udivmodsi4>:
    34fa:	a1 e2       	ldi	r26, 0x21	; 33
    34fc:	1a 2e       	mov	r1, r26
    34fe:	aa 1b       	sub	r26, r26
    3500:	bb 1b       	sub	r27, r27
    3502:	fd 01       	movw	r30, r26
    3504:	0d c0       	rjmp	.+26     	; 0x3520 <__udivmodsi4_ep>

00003506 <__udivmodsi4_loop>:
    3506:	aa 1f       	adc	r26, r26
    3508:	bb 1f       	adc	r27, r27
    350a:	ee 1f       	adc	r30, r30
    350c:	ff 1f       	adc	r31, r31
    350e:	a2 17       	cp	r26, r18
    3510:	b3 07       	cpc	r27, r19
    3512:	e4 07       	cpc	r30, r20
    3514:	f5 07       	cpc	r31, r21
    3516:	20 f0       	brcs	.+8      	; 0x3520 <__udivmodsi4_ep>
    3518:	a2 1b       	sub	r26, r18
    351a:	b3 0b       	sbc	r27, r19
    351c:	e4 0b       	sbc	r30, r20
    351e:	f5 0b       	sbc	r31, r21

00003520 <__udivmodsi4_ep>:
    3520:	66 1f       	adc	r22, r22
    3522:	77 1f       	adc	r23, r23
    3524:	88 1f       	adc	r24, r24
    3526:	99 1f       	adc	r25, r25
    3528:	1a 94       	dec	r1
    352a:	69 f7       	brne	.-38     	; 0x3506 <__udivmodsi4_loop>
    352c:	60 95       	com	r22
    352e:	70 95       	com	r23
    3530:	80 95       	com	r24
    3532:	90 95       	com	r25
    3534:	9b 01       	movw	r18, r22
    3536:	ac 01       	movw	r20, r24
    3538:	bd 01       	movw	r22, r26
    353a:	cf 01       	movw	r24, r30
    353c:	08 95       	ret
