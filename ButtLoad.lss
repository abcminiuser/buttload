
ButtLoad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00003428  000034dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003428  00000000  00000000  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b0  00800104  00800104  000034e0  2**0
                  ALLOC
  3 .noinit       00000000  008002b4  008002b4  00003568  2**0
                  CONTENTS
  4 .eeprom       00000088  00810000  00810000  000034e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .stab         00000084  00000000  00000000  00003568  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000078  00000000  00000000  000035ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 0000012c  00000000  00000000  00003664  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d93  00000000  00000000  00003790  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003eba  00000000  00000000  00004523  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f60  00000000  00000000  000083dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000324d  00000000  00000000  0000933d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000010d3  00000000  00000000  0000c58a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 06 02 	jmp	0x40c <__init>
       4:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
       8:	0c 94 67 19 	jmp	0x32ce <__vector_2>
       c:	0c 94 87 03 	jmp	0x70e <__vector_3>
      10:	0c 94 89 0b 	jmp	0x1712 <__vector_4>
      14:	0c 94 79 07 	jmp	0xef2 <__vector_5>
      18:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      1c:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      20:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      24:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      28:	0c 94 69 19 	jmp	0x32d2 <__vector_10>
      2c:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      30:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      34:	0c 94 0f 0b 	jmp	0x161e <__vector_13>
      38:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      3c:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      40:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      44:	0c 94 fa 08 	jmp	0x11f4 <__vector_17>
      48:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      4c:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      50:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      54:	0c 94 21 02 	jmp	0x442 <__bad_interrupt>
      58:	0c 94 36 08 	jmp	0x106c <__vector_22>

0000005c <SIFOOptionPtrs>:
      5c:	6f 00 60 00                                         o.`.

00000060 <SIFO_Tags>:
      60:	56 49 45 57 20 44 41 54 41 20 54 41 47 53 00        VIEW DATA TAGS.

0000006f <SIFO_Size>:
      6f:	53 54 4f 52 41 47 45 20 53 49 5a 45 53 00           STORAGE SIZES.

0000007d <USIPSNamePtrs>:
      7d:	a3 00 99 00 8f 00 85 00                             ........

00000085 <USI_Speed3>:
      85:	32 31 30 36 35 31 20 48 5a 00                       210651 HZ.

0000008f <USI_Speed2>:
      8f:	31 31 33 34 32 37 20 48 5a 00                       113427 HZ.

00000099 <USI_Speed1>:
      99:	20 38 36 37 33 38 20 48 5a 00                        86738 HZ.

000000a3 <USI_Speed0>:
      a3:	20 35 37 31 35 33 20 48 5a 00                        57153 HZ.

000000ad <ProgOptions>:
      ad:	16 01 0a 01 fa 00 ea 00 da 00 c6 00 bb 00           ..............

000000bb <PRG_C>:
      bb:	45 52 41 53 45 20 4f 4e 4c 59 00                    ERASE ONLY.

000000c6 <PRG_FL>:
      c6:	46 55 53 45 20 41 4e 44 20 4c 4f 43 4b 20 42 59     FUSE AND LOCK BY
      d6:	54 45 53 00                                         TES.

000000da <PRG_L>:
      da:	4c 4f 43 4b 20 42 59 54 45 53 20 4f 4e 4c 59 00     LOCK BYTES ONLY.

000000ea <PRG_F>:
      ea:	46 55 53 45 20 42 59 54 45 53 20 4f 4e 4c 59 00     FUSE BYTES ONLY.

000000fa <PRG_DE>:
      fa:	44 41 54 41 20 41 4e 44 20 45 45 50 52 4f 4d 00     DATA AND EEPROM.

0000010a <PRG_E>:
     10a:	45 45 50 52 4f 4d 20 4f 4e 4c 59 00                 EEPROM ONLY.

00000116 <PRG_D>:
     116:	44 41 54 41 20 4f 4e 4c 59 00                       DATA ONLY.

00000120 <SettingFunctionPtrs>:
     120:	bd 05 10 06 4a 06 89 05 06 07                       ....J.....

0000012a <SettingFunctionNames>:
     12a:	73 01 65 01 54 01 47 01 34 01                       s.e.T.G.4.

00000134 <SFunc_GOBOOTLOADER>:
     134:	4a 55 4d 50 20 54 4f 20 42 4f 4f 54 4c 4f 41 44     JUMP TO BOOTLOAD
     144:	45 52 00                                            ER.

00000147 <SFunc_CLEARMEM>:
     147:	43 4c 45 41 52 20 4d 45 4d 4f 52 59 00              CLEAR MEMORY.

00000154 <SFunc_SETFIRMMINOR>:
     154:	53 45 54 20 46 49 52 4d 20 56 45 52 53 49 4f 4e     SET FIRM VERSION
	...

00000165 <SFunc_SETSPISPEED>:
     165:	53 45 54 20 53 50 49 20 53 50 45 45 44 00           SET SPI SPEED.

00000173 <SFunc_SETCONTRAST>:
     173:	53 45 54 20 43 4f 4e 54 52 41 53 54 00              SET CONTRAST.

00000180 <MainFunctionPtrs>:
     180:	d8 03 57 05 22 04 f1 03 ae 06 a3 03 9a 06           ..W.".........

0000018e <MainFunctionNames>:
     18e:	e5 01 da 01 ce 01 bf 01 b0 01 a7 01 9c 01           ..............

0000019c <Func_SLEEP>:
     19c:	53 4c 45 45 50 20 4d 4f 44 45 00                    SLEEP MODE.

000001a7 <Func_SETTINGS>:
     1a7:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

000001b0 <Func_PRGMSTOREINFO>:
     1b0:	44 41 54 41 53 54 4f 52 45 20 49 4e 46 4f 00        DATASTORE INFO.

000001bf <Func_PRGMDATAFLASH>:
     1bf:	44 41 54 41 46 4c 41 53 48 20 50 52 47 4d 00        DATAFLASH PRGM.

000001ce <Func_PRGMAVR>:
     1ce:	50 52 4f 47 52 41 4d 20 41 56 52 00                 PROGRAM AVR.

000001da <Func_STOREPRGM>:
     1da:	53 54 4f 52 45 20 50 52 47 4d 00                    STORE PRGM.

000001e5 <Func_ISPPRGM>:
     1e5:	41 56 52 49 53 50 20 4d 4f 44 45 00                 AVRISP MODE.

000001f1 <AboutTextPtrs>:
     1f1:	1c 02 17 02 08 02 f9 01                             ........

000001f9 <CopyRight>:
     1f9:	3c 43 3e 20 32 30 30 36 20 2d 20 47 50 4c 00        <C> 2006 - GPL.

00000208 <AuthorName>:
     208:	42 59 20 44 45 41 4e 20 43 41 4d 45 52 41 00        BY DEAN CAMERA.

00000217 <VersionInfo>:
     217:	56 31 2d 33 00                                      V1-3.

0000021c <ProgrammerName>:
     21c:	42 55 54 54 4c 4f 41 44 00                          BUTTLOAD.

00000225 <WaitText>:
     225:	2a 57 41 49 54 2a 00                                *WAIT*.

0000022c <BUTTTAG_Author>:
     22c:	40 28 23 29 42 59 20 44 45 41 4e 20 43 41 4d 45     @(#)BY DEAN CAME
     23c:	52 41 00                                            RA.

0000023f <BUTTTAG_Name>:
     23f:	40 28 23 29 42 55 54 54 4c 4f 41 44 20 41 56 52     @(#)BUTTLOAD AVR
     24f:	49 53 50 00                                         ISP.

00000253 <__c.15>:
     253:	50 52 47 3e 20 00                                   PRG> .

00000259 <__c.14>:
     259:	42 41 44 49 53 52 00                                BADISR.

00000260 <__c.7>:
     260:	4e 4f 20 45 52 41 53 45 20 43 4d 44 00              NO ERASE CMD.

0000026d <__c.8>:
     26d:	4e 4f 20 44 41 54 41 00                             NO DATA.

00000275 <__c.9>:
     275:	4e 4f 20 45 45 50 52 4f 4d 00                       NO EEPROM.

0000027f <__c.10>:
     27f:	4e 4f 20 46 55 53 45 20 42 59 54 45 53 00           NO FUSE BYTES.

0000028d <__c.11>:
     28d:	4e 4f 20 4c 4f 43 4b 20 42 59 54 45 53 00           NO LOCK BYTES.

0000029b <__c.12>:
     29b:	50 52 4f 47 52 41 4d 4d 49 4e 47 20 44 4f 4e 45     PROGRAMMING DONE
	...

000002ac <__c.13>:
     2ac:	46 41 49 4c 45 44 00                                FAILED.

000002b3 <__c.6>:
     2b3:	2a 53 54 4f 52 41 47 45 20 4d 4f 44 45 2a 00        *STORAGE MODE*.

000002c2 <__c.3>:
     2c2:	43 4f 4e 46 49 52 4d 00                             CONFIRM.

000002ca <__c.4>:
     2ca:	3c 4e 20 59 3e 00                                   <N Y>.

000002d0 <__c.5>:
     2d0:	4d 45 4d 20 43 4c 45 41 52 45 44 00                 MEM CLEARED.

000002dc <__c.2>:
     2dc:	56 32 2d 20 00                                      V2- .

000002e1 <__c.1>:
     2e1:	4e 4f 20 53 54 4f 52 45 44 20 50 52 47 4d 00        NO STORED PRGM.

000002f0 <__c.0>:
     2f0:	2a 4a 54 41 47 20 4f 4e 2a 00                       *JTAG ON*.

000002fa <LCD_SegTable>:
     2fa:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
     30a:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
     31a:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
     32a:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
     33a:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
     34a:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
     35a:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

00000366 <USIPSValues>:
     366:	03 80 02 54 01 40 00 22                             ...T.@."

0000036e <DataFlashError>:
     36e:	44 41 54 41 46 4c 41 53 48 20 45 52 52 4f 52 00     DATAFLASH ERROR.

0000037e <DF_Pages>:
     37e:	00 01 00 02 00 04 00 08 00 10 00 10 00 20 00 20     ............. . 

0000038e <DF_PageSize>:
     38e:	08 01 08 01 08 01 08 01 08 01 10 02 10 02 20 04     .............. .

0000039e <DF_PageBits>:
     39e:	09 09 09 09 09 0a 0a 0b                             ........

000003a6 <__c.0>:
     3a6:	42 55 46 46 20 4f 56 45 52 46 4c 4f 57 00           BUFF OVERFLOW.

000003b4 <DataFlashProgMode>:
     3b4:	2a 44 41 54 41 46 4c 41 53 48 20 4d 4f 44 45 2a     *DATAFLASH MODE*
	...

000003c5 <SignonResponse>:
     3c5:	01 00 08 41 56 52 49 53 50 5f 32                    ...AVRISP_2

000003d0 <SyncErrorMessage>:
     3d0:	53 59 4e 43 20 45 52 52 4f 52 00                    SYNC ERROR.

000003db <AVRISPModeMessage>:
     3db:	2a 41 54 41 56 52 49 53 50 20 4d 4f 44 45 2a 00     *ATAVRISP MODE*.

000003eb <__c.0>:
     3eb:	44 41 54 41 2d 00                                   DATA-.

000003f1 <__c.1>:
     3f1:	45 50 52 4d 2d 00                                   EPRM-.

000003f7 <__c.2>:
     3f7:	46 55 53 45 2d 00                                   FUSE-.

000003fd <__c.3>:
     3fd:	4c 4f 43 4b 2d 00                                   LOCK-.

00000403 <__c.0>:
     403:	4e 4f 20 54 41 47 53 00 00                          NO TAGS..

0000040c <__init>:
     40c:	11 24       	eor	r1, r1
     40e:	1f be       	out	0x3f, r1	; 63
     410:	cf ef       	ldi	r28, 0xFF	; 255
     412:	d4 e0       	ldi	r29, 0x04	; 4
     414:	de bf       	out	0x3e, r29	; 62
     416:	cd bf       	out	0x3d, r28	; 61

00000418 <__do_copy_data>:
     418:	11 e0       	ldi	r17, 0x01	; 1
     41a:	a0 e0       	ldi	r26, 0x00	; 0
     41c:	b1 e0       	ldi	r27, 0x01	; 1
     41e:	e8 e2       	ldi	r30, 0x28	; 40
     420:	f4 e3       	ldi	r31, 0x34	; 52
     422:	02 c0       	rjmp	.+4      	; 0x428 <.do_copy_data_start>

00000424 <.do_copy_data_loop>:
     424:	05 90       	lpm	r0, Z+
     426:	0d 92       	st	X+, r0

00000428 <.do_copy_data_start>:
     428:	a4 30       	cpi	r26, 0x04	; 4
     42a:	b1 07       	cpc	r27, r17
     42c:	d9 f7       	brne	.-10     	; 0x424 <.do_copy_data_loop>

0000042e <__do_clear_bss>:
     42e:	12 e0       	ldi	r17, 0x02	; 2
     430:	a4 e0       	ldi	r26, 0x04	; 4
     432:	b1 e0       	ldi	r27, 0x01	; 1
     434:	01 c0       	rjmp	.+2      	; 0x438 <.do_clear_bss_start>

00000436 <.do_clear_bss_loop>:
     436:	1d 92       	st	X+, r1

00000438 <.do_clear_bss_start>:
     438:	a4 3b       	cpi	r26, 0xB4	; 180
     43a:	b1 07       	cpc	r27, r17
     43c:	e1 f7       	brne	.-8      	; 0x436 <.do_clear_bss_loop>
     43e:	0c 94 67 02 	jmp	0x4ce <main>

00000442 <__bad_interrupt>:
     442:	0c 94 9e 03 	jmp	0x73c <__vector_default>

00000446 <MAIN_Delay10MS>:

// ======================================================================================

void MAIN_Delay10MS(uint8_t loops)
{
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     44a:	28 2f       	mov	r18, r24
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	2f 3f       	cpi	r18, 0xFF	; 255
     450:	49 f0       	breq	.+18     	; 0x464 <MAIN_Delay10MS+0x1e>
     452:	a0 e0       	ldi	r26, 0x00	; 0
     454:	b8 e4       	ldi	r27, 0x48	; 72
     456:	c0 e0       	ldi	r28, 0x00	; 0
     458:	d0 e0       	ldi	r29, 0x00	; 0
     45a:	cd 01       	movw	r24, r26
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <MAIN_Delay10MS+0x16>
     460:	21 50       	subi	r18, 0x01	; 1
     462:	d8 f7       	brcc	.-10     	; 0x45a <MAIN_Delay10MS+0x14>
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <MAIN_WaitForJoyRelease>:
  /* Prevents the use of floating point libraries. Delaying in groups of
     10ms increases accuracy by reducing the time overhead for each loop
     interation of the while.                                            */

	while (loops--)
	  _delay_ms(10);
}

void MAIN_Delay1MS(uint8_t loops)
{
  /* Prevents the use of floating point libraries. Less accurate than the
     Delay10MS routine, but nessesary for many commands. The overhead required
     to call the routine is substantially less than the overhead required to
     calculate the float at compile time, so this actually saves execution time. */

	while (loops--)
	  _delay_ms(1);
}

void MAIN_ResetCSLine(const uint8_t ActiveInactive)
{
	/* ActiveInactive controls the /Reset line to an AVR device or external dataflash
	/CS line. If the reset polarity parameter is a 0 then interfacing with AT89
	devices which has an active high reset. Pins are tristated when inactive.         */
	
	switch (ActiveInactive)
	{
		case MAIN_RESETCS_ACTIVE:   // The target RESET line may be either active high or low.
			DDRF |= (1 << 6);
		
			if (!(eeprom_read_byte(&EEPROMVars.ResetPolarity))) // Translate to correct logic level for target device type
			  PORTF |=  (1 << 6);
			else
			  PORTF &= ~(1 << 6);
		
			break;
		case MAIN_RESETCS_EXTDFACTIVE: // Dataflashes are always active low.
			DDRF  |=  (1 << 6);
			PORTF &= ~(1 << 6);
			
			break;
		case MAIN_RESETCS_INACTIVE: // Both modes tristate the pins when inactive.
			DDRF  &= ~(1 << 6);
			PORTF &= ~(1 << 6);
	}
}

void MAIN_WaitForJoyRelease(void)
{
	while (1)
	{
		while (JoyStatus) {};                   // Wait until joystick released
     46a:	8e b3       	in	r24, 0x1e	; 30
     46c:	88 23       	and	r24, r24
     46e:	e9 f7       	brne	.-6      	; 0x46a <MAIN_WaitForJoyRelease>

		MAIN_Delay10MS(1);
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	0e 94 23 02 	call	0x446 <MAIN_Delay10MS>

		if (!(JoyStatus))                       // Joystick still released (not bouncing), return
     476:	8e b3       	in	r24, 0x1e	; 30
     478:	88 23       	and	r24, r24
     47a:	b9 f7       	brne	.-18     	; 0x46a <MAIN_WaitForJoyRelease>
     47c:	08 95       	ret

0000047e <FUNCShowAbout>:
		  return;
	}
}

void MAIN_IntToStr(uint16_t IntV, uint8_t* Buff)
{
	// Shows leading zeros, unlike itoa.

	uint8_t Temp = 0;
	
	while (IntV >= 100)
	{
		Temp++;
		IntV -= 100;
	}

	*(Buff++) = '0' + Temp;
	
	Temp = 0;
	
	while (IntV >= 10)
	{
		Temp++;
		IntV -= 10;
	}
		
	*(Buff++) = '0' + Temp;
	*(Buff++) = '0' + IntV;
	*(Buff)   = '\0';
}

void MAIN_ShowProgType(const uint8_t Letter)
{
	uint8_t ProgTypeBuffer[7];

	strcpy_P(ProgTypeBuffer, PSTR("PRG> "));
	ProgTypeBuffer[5] = Letter;
	ProgTypeBuffer[6] = '\0';
	
	LCD_puts(ProgTypeBuffer);
}

void MAIN_ShowError(const uint8_t *pFlashStr)
{
	uint8_t ErrorBuff[LCD_TEXTBUFFER_SIZE];       // New buffer, LCD text buffer size
	
	ErrorBuff[0] = 'E';
	ErrorBuff[1] = '>';

	strcpy_P(&ErrorBuff[2], pFlashStr);       // WARNING: If error text is larger than (TEXTBUFFER_SIZE - 2),
	                                          // this will overflow the buffer and probably crash the micro!
	LCD_puts(ErrorBuff);
	
	MAIN_WaitForJoyRelease();
	while (!(JoyStatus & JOY_PRESS)) {};
	MAIN_WaitForJoyRelease();
}

// ======================================================================================

ISR(PCINT1_vect, ISR_NOBLOCK)                 // Joystick routine; PCINT0_vect is bound to this also via JoystickInterrupt.S
{
	JoyStatus = (~PINB & JOY_BMASK)
	          | (~PINE & JOY_EMASK);
}

ISR(BADISR_vect, ISR_NAKED)                   // Bad ISR routine; should never be called, here for safety
{
	MAIN_ShowError(PSTR("BADISR"));
	while (1) {};
}

// ======================================================================================

void FUNCChangeSettings(void)
{
	uint8_t CurrSFunc = 0;
	
	JoyStatus = 1;

	while (1)
	{
		if (JoyStatus)                         // Joystick is in the non-center position
		{
			if (JoyStatus & JOY_UP)            // Previous function
			  (CurrSFunc == 0)? CurrSFunc = 3 : CurrSFunc--;
			else if (JoyStatus & JOY_DOWN)     // Next function
			  (CurrSFunc == 3)? CurrSFunc = 0 : CurrSFunc++;
			else if (JoyStatus & JOY_PRESS)    // Select current function
			  ((FuncPtr)pgm_read_word(&SettingFunctionPtrs[CurrSFunc]))(); // Run associated function
			else if (JoyStatus & JOY_LEFT)
			  return;
		
			// Show current function onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&SettingFunctionNames[CurrSFunc]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCShowAbout(void)
{
     47e:	cf 93       	push	r28
	uint8_t InfoNum = 0;
     480:	c0 e0       	ldi	r28, 0x00	; 0
	
	JoyStatus = 1;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	8e bb       	out	0x1e, r24	; 30
			
	while (1)
	{
		if (JoyStatus)
     486:	8e b3       	in	r24, 0x1e	; 30
     488:	88 23       	and	r24, r24
     48a:	e9 f3       	breq	.-6      	; 0x486 <FUNCShowAbout+0x8>
		{
			if (JoyStatus & JOY_UP)
     48c:	f6 9b       	sbis	0x1e, 6	; 30
     48e:	06 c0       	rjmp	.+12     	; 0x49c <FUNCShowAbout+0x1e>
			  (InfoNum == 0)? InfoNum = 3 : InfoNum--;
     490:	cc 23       	and	r28, r28
     492:	11 f4       	brne	.+4      	; 0x498 <FUNCShowAbout+0x1a>
     494:	c3 e0       	ldi	r28, 0x03	; 3
     496:	0c c0       	rjmp	.+24     	; 0x4b0 <FUNCShowAbout+0x32>
     498:	c1 50       	subi	r28, 0x01	; 1
     49a:	0a c0       	rjmp	.+20     	; 0x4b0 <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_DOWN)
     49c:	f7 9b       	sbis	0x1e, 7	; 30
     49e:	06 c0       	rjmp	.+12     	; 0x4ac <FUNCShowAbout+0x2e>
			  (InfoNum == 3)? InfoNum = 0 : InfoNum++;
     4a0:	c3 30       	cpi	r28, 0x03	; 3
     4a2:	11 f4       	brne	.+4      	; 0x4a8 <FUNCShowAbout+0x2a>
     4a4:	c0 e0       	ldi	r28, 0x00	; 0
     4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <FUNCShowAbout+0x32>
     4a8:	cf 5f       	subi	r28, 0xFF	; 255
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_LEFT)
     4ac:	f2 99       	sbic	0x1e, 2	; 30
     4ae:	0d c0       	rjmp	.+26     	; 0x4ca <FUNCShowAbout+0x4c>
			  return;

			LCD_puts_f((uint8_t*)pgm_read_word(&AboutTextPtrs[InfoNum]));
     4b0:	ec 2f       	mov	r30, r28
     4b2:	ff 27       	eor	r31, r31
     4b4:	ee 0f       	add	r30, r30
     4b6:	ff 1f       	adc	r31, r31
     4b8:	ef 50       	subi	r30, 0x0F	; 15
     4ba:	fe 4f       	sbci	r31, 0xFE	; 254
     4bc:	85 91       	lpm	r24, Z+
     4be:	94 91       	lpm	r25, Z
     4c0:	0e 94 ed 07 	call	0xfda <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     4c4:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     4c8:	de cf       	rjmp	.-68     	; 0x486 <FUNCShowAbout+0x8>
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <main>:
     4ce:	cf ef       	ldi	r28, 0xFF	; 255
     4d0:	d4 e0       	ldi	r29, 0x04	; 4
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	cd bf       	out	0x3d, r28	; 61
     4d6:	c0 e0       	ldi	r28, 0x00	; 0
     4d8:	80 e8       	ldi	r24, 0x80	; 128
     4da:	85 bf       	out	0x35, r24	; 53
     4dc:	85 bf       	out	0x35, r24	; 53
     4de:	80 bf       	out	0x30, r24	; 48
     4e0:	85 e0       	ldi	r24, 0x05	; 5
     4e2:	80 93 64 00 	sts	0x0064, r24
     4e6:	80 e3       	ldi	r24, 0x30	; 48
     4e8:	80 bb       	out	0x10, r24	; 16
     4ea:	87 e2       	ldi	r24, 0x27	; 39
     4ec:	84 b9       	out	0x04, r24	; 4
     4ee:	8f ed       	ldi	r24, 0xDF	; 223
     4f0:	85 b9       	out	0x05, r24	; 5
     4f2:	8c e0       	ldi	r24, 0x0C	; 12
     4f4:	8e b9       	out	0x0e, r24	; 14
     4f6:	80 93 6b 00 	sts	0x006B, r24
     4fa:	80 ed       	ldi	r24, 0xD0	; 208
     4fc:	80 93 6c 00 	sts	0x006C, r24
     500:	80 ec       	ldi	r24, 0xC0	; 192
     502:	8d bb       	out	0x1d, r24	; 29
     504:	8c bb       	out	0x1c, r24	; 28
     506:	81 b3       	in	r24, 0x11	; 17
     508:	8f 7c       	andi	r24, 0xCF	; 207
     50a:	80 62       	ori	r24, 0x20	; 32
     50c:	81 bb       	out	0x11, r24	; 17
     50e:	0e 94 9a 07 	call	0xf34 <LCD_Init>
     512:	8f e0       	ldi	r24, 0x0F	; 15
     514:	80 93 e7 00 	sts	0x00E7, r24
     518:	85 e2       	ldi	r24, 0x25	; 37
     51a:	92 e0       	ldi	r25, 0x02	; 2
     51c:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
     520:	78 94       	sei
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     522:	27 e8       	ldi	r18, 0x87	; 135
     524:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t result;
  asm volatile
     526:	d9 01       	movw	r26, r18
     528:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
     52c:	80 2d       	mov	r24, r0
     52e:	8a 37       	cpi	r24, 0x7A	; 122
     530:	89 f0       	breq	.+34     	; 0x554 <__stack+0x55>
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	4f ef       	ldi	r20, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     538:	dc 01       	movw	r26, r24
     53a:	04 2e       	mov	r0, r20
     53c:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	52 e0       	ldi	r21, 0x02	; 2
     544:	80 30       	cpi	r24, 0x00	; 0
     546:	95 07       	cpc	r25, r21
     548:	b8 f3       	brcs	.-18     	; 0x538 <__stack+0x39>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
     54a:	8a e7       	ldi	r24, 0x7A	; 122
  asm volatile (
     54c:	d9 01       	movw	r26, r18
     54e:	08 2e       	mov	r0, r24
     550:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
     554:	a5 e8       	ldi	r26, 0x85	; 133
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
     55c:	80 2d       	mov	r24, r0
     55e:	8f 70       	andi	r24, 0x0F	; 15
     560:	80 93 e7 00 	sts	0x00E7, r24
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
     56a:	81 b3       	in	r24, 0x11	; 17
     56c:	80 63       	ori	r24, 0x30	; 48
     56e:	81 bb       	out	0x11, r24	; 17
     570:	0e 94 a7 08 	call	0x114e <USART_Init>
     574:	0e 94 14 07 	call	0xe28 <OSCCAL_Calibrate>
     578:	81 b3       	in	r24, 0x11	; 17
     57a:	8f 7c       	andi	r24, 0xCF	; 207
     57c:	80 61       	ori	r24, 0x10	; 16
     57e:	81 bb       	out	0x11, r24	; 17
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	8e bb       	out	0x1e, r24	; 30
     584:	80 e8       	ldi	r24, 0x80	; 128
     586:	80 93 61 00 	sts	0x0061, r24
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	80 93 61 00 	sts	0x0061, r24
     590:	8e b3       	in	r24, 0x1e	; 30
     592:	88 23       	and	r24, r24
     594:	e9 f3       	breq	.-6      	; 0x590 <__stack+0x91>
     596:	f6 9b       	sbis	0x1e, 6	; 30
     598:	06 c0       	rjmp	.+12     	; 0x5a6 <__stack+0xa7>
     59a:	cc 23       	and	r28, r28
     59c:	11 f4       	brne	.+4      	; 0x5a2 <__stack+0xa3>
     59e:	c6 e0       	ldi	r28, 0x06	; 6
     5a0:	1b c0       	rjmp	.+54     	; 0x5d8 <__stack+0xd9>
     5a2:	c1 50       	subi	r28, 0x01	; 1
     5a4:	19 c0       	rjmp	.+50     	; 0x5d8 <__stack+0xd9>
     5a6:	f7 9b       	sbis	0x1e, 7	; 30
     5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <__stack+0xb7>
     5aa:	c6 30       	cpi	r28, 0x06	; 6
     5ac:	11 f4       	brne	.+4      	; 0x5b2 <__stack+0xb3>
     5ae:	c0 e0       	ldi	r28, 0x00	; 0
     5b0:	13 c0       	rjmp	.+38     	; 0x5d8 <__stack+0xd9>
     5b2:	cf 5f       	subi	r28, 0xFF	; 255
     5b4:	11 c0       	rjmp	.+34     	; 0x5d8 <__stack+0xd9>
     5b6:	f4 9b       	sbis	0x1e, 4	; 30
     5b8:	0b c0       	rjmp	.+22     	; 0x5d0 <__stack+0xd1>
     5ba:	ec 2f       	mov	r30, r28
     5bc:	ff 27       	eor	r31, r31
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	e0 58       	subi	r30, 0x80	; 128
     5c4:	fe 4f       	sbci	r31, 0xFE	; 254
     5c6:	85 91       	lpm	r24, Z+
     5c8:	94 91       	lpm	r25, Z
     5ca:	fc 01       	movw	r30, r24
     5cc:	09 95       	icall
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__stack+0xd9>
     5d0:	f3 9b       	sbis	0x1e, 3	; 30
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <__stack+0xd9>
     5d4:	0e 94 3f 02 	call	0x47e <FUNCShowAbout>
     5d8:	ec 2f       	mov	r30, r28
     5da:	ff 27       	eor	r31, r31
     5dc:	ee 0f       	add	r30, r30
     5de:	ff 1f       	adc	r31, r31
     5e0:	e2 57       	subi	r30, 0x72	; 114
     5e2:	fe 4f       	sbci	r31, 0xFE	; 254
     5e4:	85 91       	lpm	r24, Z+
     5e6:	94 91       	lpm	r25, Z
     5e8:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
     5ec:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     5f0:	cf cf       	rjmp	.-98     	; 0x590 <__stack+0x91>

000005f2 <MAIN_Delay1MS>:
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5f6:	28 2f       	mov	r18, r24
     5f8:	21 50       	subi	r18, 0x01	; 1
     5fa:	2f 3f       	cpi	r18, 0xFF	; 255
     5fc:	49 f0       	breq	.+18     	; 0x610 <MAIN_Delay1MS+0x1e>
     5fe:	a3 e3       	ldi	r26, 0x33	; 51
     600:	b7 e0       	ldi	r27, 0x07	; 7
     602:	c0 e0       	ldi	r28, 0x00	; 0
     604:	d0 e0       	ldi	r29, 0x00	; 0
     606:	cd 01       	movw	r24, r26
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <MAIN_Delay1MS+0x16>
     60c:	21 50       	subi	r18, 0x01	; 1
     60e:	d8 f7       	brcc	.-10     	; 0x606 <MAIN_Delay1MS+0x14>
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	08 95       	ret

00000616 <MAIN_ResetCSLine>:
     616:	99 27       	eor	r25, r25
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	91 05       	cpc	r25, r1
     61c:	b1 f0       	breq	.+44     	; 0x64a <MAIN_ResetCSLine+0x34>
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	91 05       	cpc	r25, r1
     622:	1c f4       	brge	.+6      	; 0x62a <MAIN_ResetCSLine+0x14>
     624:	89 2b       	or	r24, r25
     626:	21 f0       	breq	.+8      	; 0x630 <MAIN_ResetCSLine+0x1a>
     628:	08 95       	ret
     62a:	02 97       	sbiw	r24, 0x02	; 2
     62c:	59 f0       	breq	.+22     	; 0x644 <MAIN_ResetCSLine+0x2e>
     62e:	08 95       	ret
     630:	86 9a       	sbi	0x10, 6	; 16
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     632:	a0 e0       	ldi	r26, 0x00	; 0
     634:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     636:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
     63a:	80 2d       	mov	r24, r0
     63c:	88 23       	and	r24, r24
     63e:	19 f4       	brne	.+6      	; 0x646 <MAIN_ResetCSLine+0x30>
     640:	8e 9a       	sbi	0x11, 6	; 17
     642:	08 95       	ret
     644:	86 9a       	sbi	0x10, 6	; 16
     646:	8e 98       	cbi	0x11, 6	; 17
     648:	08 95       	ret
     64a:	86 98       	cbi	0x10, 6	; 16
     64c:	fc cf       	rjmp	.-8      	; 0x646 <MAIN_ResetCSLine+0x30>

0000064e <MAIN_IntToStr>:
     64e:	fb 01       	movw	r30, r22
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	84 36       	cpi	r24, 0x64	; 100
     654:	91 05       	cpc	r25, r1
     656:	20 f0       	brcs	.+8      	; 0x660 <MAIN_IntToStr+0x12>
     658:	2f 5f       	subi	r18, 0xFF	; 255
     65a:	84 56       	subi	r24, 0x64	; 100
     65c:	90 40       	sbci	r25, 0x00	; 0
     65e:	f9 cf       	rjmp	.-14     	; 0x652 <MAIN_IntToStr+0x4>
     660:	20 5d       	subi	r18, 0xD0	; 208
     662:	21 93       	st	Z+, r18
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	8a 30       	cpi	r24, 0x0A	; 10
     668:	91 05       	cpc	r25, r1
     66a:	18 f0       	brcs	.+6      	; 0x672 <MAIN_IntToStr+0x24>
     66c:	2f 5f       	subi	r18, 0xFF	; 255
     66e:	0a 97       	sbiw	r24, 0x0a	; 10
     670:	fa cf       	rjmp	.-12     	; 0x666 <MAIN_IntToStr+0x18>
     672:	20 5d       	subi	r18, 0xD0	; 208
     674:	21 93       	st	Z+, r18
     676:	80 5d       	subi	r24, 0xD0	; 208
     678:	81 93       	st	Z+, r24
     67a:	10 82       	st	Z, r1
     67c:	08 95       	ret

0000067e <MAIN_ShowProgType>:
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	27 97       	sbiw	r28, 0x07	; 7
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
     694:	18 2f       	mov	r17, r24
     696:	63 e5       	ldi	r22, 0x53	; 83
     698:	72 e0       	ldi	r23, 0x02	; 2
     69a:	ce 01       	movw	r24, r28
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	0e 94 6f 19 	call	0x32de <strcpy_P>
     6a2:	1e 83       	std	Y+6, r17	; 0x06
     6a4:	1f 82       	std	Y+7, r1	; 0x07
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	0e 94 ac 07 	call	0xf58 <LCD_puts>
     6ae:	27 96       	adiw	r28, 0x07	; 7
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	08 95       	ret

000006c2 <MAIN_ShowError>:
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
     6ca:	64 97       	sbiw	r28, 0x14	; 20
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	25 e4       	ldi	r18, 0x45	; 69
     6d8:	29 83       	std	Y+1, r18	; 0x01
     6da:	2e e3       	ldi	r18, 0x3E	; 62
     6dc:	2a 83       	std	Y+2, r18	; 0x02
     6de:	bc 01       	movw	r22, r24
     6e0:	ce 01       	movw	r24, r28
     6e2:	03 96       	adiw	r24, 0x03	; 3
     6e4:	0e 94 6f 19 	call	0x32de <strcpy_P>
     6e8:	ce 01       	movw	r24, r28
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	0e 94 ac 07 	call	0xf58 <LCD_puts>
     6f0:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     6f4:	f4 9b       	sbis	0x1e, 4	; 30
     6f6:	fe cf       	rjmp	.-4      	; 0x6f4 <MAIN_ShowError+0x32>
     6f8:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     6fc:	64 96       	adiw	r28, 0x14	; 20
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <__vector_3>:
     70e:	78 94       	sei
     710:	1f 92       	push	r1
     712:	0f 92       	push	r0
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	0f 92       	push	r0
     718:	11 24       	eor	r1, r1
     71a:	8f 93       	push	r24
     71c:	9f 93       	push	r25
     71e:	93 b1       	in	r25, 0x03	; 3
     720:	90 95       	com	r25
     722:	90 7d       	andi	r25, 0xD0	; 208
     724:	8c b1       	in	r24, 0x0c	; 12
     726:	80 95       	com	r24
     728:	8c 70       	andi	r24, 0x0C	; 12
     72a:	98 2b       	or	r25, r24
     72c:	9e bb       	out	0x1e, r25	; 30
     72e:	9f 91       	pop	r25
     730:	8f 91       	pop	r24
     732:	0f 90       	pop	r0
     734:	0f be       	out	0x3f, r0	; 63
     736:	0f 90       	pop	r0
     738:	1f 90       	pop	r1
     73a:	18 95       	reti

0000073c <__vector_default>:
     73c:	89 e5       	ldi	r24, 0x59	; 89
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
     744:	ff cf       	rjmp	.-2      	; 0x744 <__vector_default+0x8>

00000746 <FUNCChangeSettings>:
     746:	cf 93       	push	r28
     748:	c0 e0       	ldi	r28, 0x00	; 0
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	8e bb       	out	0x1e, r24	; 30
     74e:	8e b3       	in	r24, 0x1e	; 30
     750:	88 23       	and	r24, r24
     752:	e9 f3       	breq	.-6      	; 0x74e <FUNCChangeSettings+0x8>
     754:	f6 9b       	sbis	0x1e, 6	; 30
     756:	06 c0       	rjmp	.+12     	; 0x764 <FUNCChangeSettings+0x1e>
     758:	cc 23       	and	r28, r28
     75a:	11 f4       	brne	.+4      	; 0x760 <FUNCChangeSettings+0x1a>
     75c:	c3 e0       	ldi	r28, 0x03	; 3
     75e:	19 c0       	rjmp	.+50     	; 0x792 <FUNCChangeSettings+0x4c>
     760:	c1 50       	subi	r28, 0x01	; 1
     762:	17 c0       	rjmp	.+46     	; 0x792 <FUNCChangeSettings+0x4c>
     764:	f7 9b       	sbis	0x1e, 7	; 30
     766:	06 c0       	rjmp	.+12     	; 0x774 <FUNCChangeSettings+0x2e>
     768:	c3 30       	cpi	r28, 0x03	; 3
     76a:	11 f4       	brne	.+4      	; 0x770 <FUNCChangeSettings+0x2a>
     76c:	c0 e0       	ldi	r28, 0x00	; 0
     76e:	11 c0       	rjmp	.+34     	; 0x792 <FUNCChangeSettings+0x4c>
     770:	cf 5f       	subi	r28, 0xFF	; 255
     772:	0f c0       	rjmp	.+30     	; 0x792 <FUNCChangeSettings+0x4c>
     774:	f4 9b       	sbis	0x1e, 4	; 30
     776:	0b c0       	rjmp	.+22     	; 0x78e <FUNCChangeSettings+0x48>
     778:	ec 2f       	mov	r30, r28
     77a:	ff 27       	eor	r31, r31
     77c:	ee 0f       	add	r30, r30
     77e:	ff 1f       	adc	r31, r31
     780:	e0 5e       	subi	r30, 0xE0	; 224
     782:	fe 4f       	sbci	r31, 0xFE	; 254
     784:	85 91       	lpm	r24, Z+
     786:	94 91       	lpm	r25, Z
     788:	fc 01       	movw	r30, r24
     78a:	09 95       	icall
     78c:	02 c0       	rjmp	.+4      	; 0x792 <FUNCChangeSettings+0x4c>
     78e:	f2 99       	sbic	0x1e, 2	; 30
     790:	0d c0       	rjmp	.+26     	; 0x7ac <FUNCChangeSettings+0x66>
     792:	ec 2f       	mov	r30, r28
     794:	ff 27       	eor	r31, r31
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	e6 5d       	subi	r30, 0xD6	; 214
     79c:	fe 4f       	sbci	r31, 0xFE	; 254
     79e:	85 91       	lpm	r24, Z+
     7a0:	94 91       	lpm	r25, Z
     7a2:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
     7a6:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     7aa:	d1 cf       	rjmp	.-94     	; 0x74e <FUNCChangeSettings+0x8>
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <FUNCAVRISPMode>:
		}
	}
}

void FUNCAVRISPMode(void)
{
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     7b0:	85 e2       	ldi	r24, 0x25	; 37
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
     7b8:	0e 94 14 07 	call	0xe28 <OSCCAL_Calibrate>
     7bc:	80 91 c1 00 	lds	r24, 0x00C1
     7c0:	80 78       	andi	r24, 0x80	; 128
     7c2:	88 61       	ori	r24, 0x18	; 24
     7c4:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(AVRISPModeMessage);
     7c8:	8b ed       	ldi	r24, 0xDB	; 219
     7ca:	93 e0       	ldi	r25, 0x03	; 3
     7cc:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
	
	InterpretPacketRoutine = (FuncPtr)AICI_InterpretPacket;
     7d0:	84 ec       	ldi	r24, 0xC4	; 196
     7d2:	91 e1       	ldi	r25, 0x11	; 17
     7d4:	90 93 03 01 	sts	0x0103, r25
     7d8:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     7dc:	0e 94 d3 0e 	call	0x1da6 <V2P_RunStateMachine>
     7e0:	08 95       	ret

000007e2 <FUNCProgramDataflash>:
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     7e2:	a1 e0       	ldi	r26, 0x01	; 1
     7e4:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     7e6:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
     7ea:	80 2d       	mov	r24, r0
     7ec:	0e 94 30 09 	call	0x1260 <USI_SPIInitMaster>
}

void FUNCProgramDataflash(void)
{
	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	UseExernalDF = TRUE;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 61 02 	sts	0x0261, r24
	DFSPIRoutinePointer = USI_SPITransmit;
     7f6:	8a e4       	ldi	r24, 0x4A	; 74
     7f8:	99 e0       	ldi	r25, 0x09	; 9
     7fa:	90 93 01 01 	sts	0x0101, r25
     7fe:	80 93 00 01 	sts	0x0100, r24
	
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     802:	85 e2       	ldi	r24, 0x25	; 37
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
     80a:	0e 94 14 07 	call	0xe28 <OSCCAL_Calibrate>
     80e:	80 91 c1 00 	lds	r24, 0x00C1
     812:	80 78       	andi	r24, 0x80	; 128
     814:	88 61       	ori	r24, 0x18	; 24
     816:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(DataFlashProgMode);
     81a:	84 eb       	ldi	r24, 0xB4	; 180
     81c:	93 e0       	ldi	r25, 0x03	; 3
     81e:	0e 94 ed 07 	call	0xfda <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PD_InterpretAVRISPPacket;
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	9c e0       	ldi	r25, 0x0C	; 12
     826:	90 93 03 01 	sts	0x0103, r25
     82a:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     82e:	0e 94 d3 0e 	call	0x1da6 <V2P_RunStateMachine>
	   
	DF_EnableDataflash(FALSE);
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
	SPI_SPIOFF();
     838:	80 91 64 00 	lds	r24, 0x0064
     83c:	84 60       	ori	r24, 0x04	; 4
     83e:	80 93 64 00 	sts	0x0064, r24
     842:	08 95       	ret

00000844 <FUNCProgramAVR>:
}

void FUNCProgramAVR(void)
{
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	63 97       	sbiw	r28, 0x13	; 19
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  DoneFailMessageBuff[19];
	uint8_t  Fault = ISPCC_NO_FAULT;
     85c:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t  ProgMode = 0;
     85e:	10 2f       	mov	r17, r16

	SPI_SPIInit();
     860:	0e 94 db 08 	call	0x11b6 <SPI_SPIInit>
	UseExernalDF = FALSE;
     864:	00 93 61 02 	sts	0x0261, r16
	DFSPIRoutinePointer = SPI_SPITransmit;
     868:	85 ee       	ldi	r24, 0xE5	; 229
     86a:	98 e0       	ldi	r25, 0x08	; 8
     86c:	90 93 01 01 	sts	0x0101, r25
     870:	80 93 00 01 	sts	0x0100, r24
	
	if (!(DF_CheckCorrectOnboardChip()))
     874:	0e 94 f7 0a 	call	0x15ee <DF_CheckCorrectOnboardChip>
     878:	88 23       	and	r24, r24
     87a:	09 f4       	brne	.+2      	; 0x87e <FUNCProgramAVR+0x3a>
     87c:	0d c1       	rjmp	.+538    	; 0xa98 <FUNCProgramAVR+0x254>
	  return;

	MAIN_WaitForJoyRelease();
     87e:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
	
	JoyStatus = 1;                            // Use an invalid joystick value to force the program to write the
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	8e bb       	out	0x1e, r24	; 30
	                                          // name of the default command onto the LCD
	while (1)
	{
		if (JoyStatus)
     886:	8e b3       	in	r24, 0x1e	; 30
     888:	88 23       	and	r24, r24
     88a:	e9 f3       	breq	.-6      	; 0x886 <FUNCProgramAVR+0x42>
		{
			if (JoyStatus & JOY_LEFT)
     88c:	f2 99       	sbic	0x1e, 2	; 30
     88e:	04 c1       	rjmp	.+520    	; 0xa98 <FUNCProgramAVR+0x254>
			  return;
			else if (JoyStatus & JOY_PRESS)
     890:	f4 99       	sbic	0x1e, 4	; 30
     892:	1c c0       	rjmp	.+56     	; 0x8cc <FUNCProgramAVR+0x88>
			  break;
			else if (JoyStatus & JOY_UP)
     894:	f6 9b       	sbis	0x1e, 6	; 30
     896:	06 c0       	rjmp	.+12     	; 0x8a4 <FUNCProgramAVR+0x60>
			  (ProgMode == 0)? ProgMode = 6 : ProgMode--;
     898:	11 23       	and	r17, r17
     89a:	11 f4       	brne	.+4      	; 0x8a0 <FUNCProgramAVR+0x5c>
     89c:	16 e0       	ldi	r17, 0x06	; 6
     89e:	09 c0       	rjmp	.+18     	; 0x8b2 <FUNCProgramAVR+0x6e>
     8a0:	11 50       	subi	r17, 0x01	; 1
     8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <FUNCProgramAVR+0x6e>
			else if (JoyStatus & JOY_DOWN)
     8a4:	f7 9b       	sbis	0x1e, 7	; 30
     8a6:	05 c0       	rjmp	.+10     	; 0x8b2 <FUNCProgramAVR+0x6e>
			  (ProgMode == 6)? ProgMode = 0 : ProgMode++;
     8a8:	16 30       	cpi	r17, 0x06	; 6
     8aa:	11 f4       	brne	.+4      	; 0x8b0 <FUNCProgramAVR+0x6c>
     8ac:	10 e0       	ldi	r17, 0x00	; 0
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <FUNCProgramAVR+0x6e>
     8b0:	1f 5f       	subi	r17, 0xFF	; 255

			LCD_puts_f((uint8_t*)pgm_read_word(&ProgOptions[ProgMode])); // Show current function onto the LCD
     8b2:	e1 2f       	mov	r30, r17
     8b4:	ff 27       	eor	r31, r31
     8b6:	ee 0f       	add	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	e3 55       	subi	r30, 0x53	; 83
     8bc:	ff 4f       	sbci	r31, 0xFF	; 255
     8be:	85 91       	lpm	r24, Z+
     8c0:	94 91       	lpm	r25, Z
     8c2:	0e 94 ed 07 	call	0xfda <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     8c6:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     8ca:	dd cf       	rjmp	.-70     	; 0x886 <FUNCProgramAVR+0x42>
		}
	}

	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);                // Orange = busy
     8cc:	81 b3       	in	r24, 0x11	; 17
     8ce:	80 63       	ori	r24, 0x30	; 48
     8d0:	81 bb       	out	0x11, r24	; 17
	LCD_puts_f(WaitText);
     8d2:	85 e2       	ldi	r24, 0x25	; 37
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     8da:	a1 e0       	ldi	r26, 0x01	; 1
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     8de:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
     8e2:	80 2d       	mov	r24, r0
     8e4:	0e 94 30 09 	call	0x1260 <USI_SPIInitMaster>

	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
     8ee:	e2 e1       	ldi	r30, 0x12	; 18
     8f0:	f1 e0       	ldi	r31, 0x01	; 1
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	9b e0       	ldi	r25, 0x0B	; 11
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     8f8:	d9 01       	movw	r26, r18
     8fa:	ad 5d       	subi	r26, 0xDD	; 221
     8fc:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
     8fe:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
     902:	80 2d       	mov	r24, r0
     904:	81 93       	st	Z+, r24
			
	for (uint8_t PacketB = 0; PacketB <= 11; PacketB++) // Read the enter programming mode command bytes
     906:	91 50       	subi	r25, 0x01	; 1
     908:	2f 5f       	subi	r18, 0xFF	; 255
     90a:	3f 4f       	sbci	r19, 0xFF	; 255
     90c:	97 ff       	sbrs	r25, 7
     90e:	f4 cf       	rjmp	.-24     	; 0x8f8 <FUNCProgramAVR+0xb4>
	  PacketBytes[PacketB] = eeprom_read_byte(&EEPROMVars.EnterProgMode[PacketB]);
	
	ISPCC_EnterChipProgrammingMode();    // Try to sync with the slave AVR
     910:	0e 94 34 10 	call	0x2068 <ISPCC_EnterChipProgrammingMode>

	CurrAddress = 0;
     914:	10 92 09 01 	sts	0x0109, r1
     918:	10 92 0a 01 	sts	0x010A, r1
     91c:	10 92 0b 01 	sts	0x010B, r1
     920:	10 92 0c 01 	sts	0x010C, r1

	if (PacketBytes[1] == STATUS_CMD_OK) // ISPCC_EnterChipProgrammingMode alters the PacketBytes buffer rather than returning a value
     924:	80 91 13 01 	lds	r24, 0x0113
     928:	88 23       	and	r24, r24
     92a:	09 f0       	breq	.+2      	; 0x92e <FUNCProgramAVR+0xea>
     92c:	a0 c0       	rjmp	.+320    	; 0xa6e <FUNCProgramAVR+0x22a>
	{						
		if ((ProgMode == 6) || (ProgMode == 0) || (ProgMode == 2)) // Erase chip, or program flash mode
     92e:	16 30       	cpi	r17, 0x06	; 6
     930:	21 f0       	breq	.+8      	; 0x93a <FUNCProgramAVR+0xf6>
     932:	11 23       	and	r17, r17
     934:	11 f0       	breq	.+4      	; 0x93a <FUNCProgramAVR+0xf6>
     936:	12 30       	cpi	r17, 0x02	; 2
     938:	91 f4       	brne	.+36     	; 0x95e <FUNCProgramAVR+0x11a>
		{
			MAIN_ShowProgType('C');
     93a:	83 e4       	ldi	r24, 0x43	; 67
     93c:	0e 94 3f 03 	call	0x67e <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     940:	a4 e1       	ldi	r26, 0x14	; 20
     942:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     944:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
     948:	80 2d       	mov	r24, r0
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	31 f0       	breq	.+12     	; 0x95a <FUNCProgramAVR+0x116>
			
			if (!(eeprom_read_byte(&EEPROMVars.EraseCmdStored) == TRUE))
			{
				Fault = ISPCC_FAULT_NOERASE;
     94e:	02 e0       	ldi	r16, 0x02	; 2
				MAIN_ShowError(PSTR("NO ERASE CMD"));
     950:	80 e6       	ldi	r24, 0x60	; 96
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
     958:	02 c0       	rjmp	.+4      	; 0x95e <FUNCProgramAVR+0x11a>
			}
			else
			{
				PM_SendEraseCommand();
     95a:	0e 94 cb 16 	call	0x2d96 <PM_SendEraseCommand>
			}
		}

		if (((ProgMode == 0) || (ProgMode == 2)) && (Fault == ISPCC_NO_FAULT)) // Program flash
     95e:	11 23       	and	r17, r17
     960:	11 f0       	breq	.+4      	; 0x966 <FUNCProgramAVR+0x122>
     962:	12 30       	cpi	r17, 0x02	; 2
     964:	b9 f4       	brne	.+46     	; 0x994 <FUNCProgramAVR+0x150>
     966:	00 23       	and	r16, r16
     968:	a9 f4       	brne	.+42     	; 0x994 <FUNCProgramAVR+0x150>
		{
			MAIN_ShowProgType('D');
     96a:	84 e4       	ldi	r24, 0x44	; 68
     96c:	0e 94 3f 03 	call	0x67e <MAIN_ShowProgType>

			if (!(PM_GetStoredDataSize(TYPE_FLASH))) // Check to make sure a program is present in memory
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	0e 94 34 13 	call	0x2668 <PM_GetStoredDataSize>
     976:	dc 01       	movw	r26, r24
     978:	cb 01       	movw	r24, r22
     97a:	00 97       	sbiw	r24, 0x00	; 0
     97c:	a1 05       	cpc	r26, r1
     97e:	b1 05       	cpc	r27, r1
     980:	31 f4       	brne	.+12     	; 0x98e <FUNCProgramAVR+0x14a>
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     982:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO DATA"));
     984:	8d e6       	ldi	r24, 0x6D	; 109
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
     98c:	03 c0       	rjmp	.+6      	; 0x994 <FUNCProgramAVR+0x150>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_FLASH);
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	0e 94 fa 16 	call	0x2df4 <PM_CreateProgrammingPackets>
			}
		}
	
		if ((ProgMode == 1) || (ProgMode == 2)) // Program EEPROM
     994:	81 2f       	mov	r24, r17
     996:	81 50       	subi	r24, 0x01	; 1
     998:	82 30       	cpi	r24, 0x02	; 2
     99a:	a8 f4       	brcc	.+42     	; 0x9c6 <FUNCProgramAVR+0x182>
		{
			MAIN_ShowProgType('E');
     99c:	85 e4       	ldi	r24, 0x45	; 69
     99e:	0e 94 3f 03 	call	0x67e <MAIN_ShowProgType>
				
			if (!(PM_GetStoredDataSize(TYPE_EEPROM))) // Check to make sure EEPROM data is present in memory
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	0e 94 34 13 	call	0x2668 <PM_GetStoredDataSize>
     9a8:	dc 01       	movw	r26, r24
     9aa:	cb 01       	movw	r24, r22
     9ac:	00 97       	sbiw	r24, 0x00	; 0
     9ae:	a1 05       	cpc	r26, r1
     9b0:	b1 05       	cpc	r27, r1
     9b2:	31 f4       	brne	.+12     	; 0x9c0 <FUNCProgramAVR+0x17c>
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     9b4:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO EEPROM"));
     9b6:	85 e7       	ldi	r24, 0x75	; 117
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
     9be:	03 c0       	rjmp	.+6      	; 0x9c6 <FUNCProgramAVR+0x182>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_EEPROM);
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 fa 16 	call	0x2df4 <PM_CreateProgrammingPackets>
			}
		}

		if ((ProgMode == 3) || (ProgMode == 5)) // Program Fuse bytes
     9c6:	13 30       	cpi	r17, 0x03	; 3
     9c8:	11 f0       	breq	.+4      	; 0x9ce <FUNCProgramAVR+0x18a>
     9ca:	15 30       	cpi	r17, 0x05	; 5
     9cc:	99 f4       	brne	.+38     	; 0x9f4 <FUNCProgramAVR+0x1b0>
		{
			MAIN_ShowProgType('F');
     9ce:	86 e4       	ldi	r24, 0x46	; 70
     9d0:	0e 94 3f 03 	call	0x67e <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     9d4:	af e2       	ldi	r26, 0x2F	; 47
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     9d8:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
     9dc:	80 2d       	mov	r24, r0
     9de:	88 23       	and	r24, r24
     9e0:	31 f4       	brne	.+12     	; 0x9ee <FUNCProgramAVR+0x1aa>
			
			if (!(eeprom_read_byte(&EEPROMVars.TotalFuseBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     9e2:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO FUSE BYTES"));
     9e4:	8f e7       	ldi	r24, 0x7F	; 127
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
     9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <FUNCProgramAVR+0x1b0>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_FUSE);
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	0e 94 9a 16 	call	0x2d34 <PM_SendFuseLockBytes>
			}
		}

		if ((ProgMode == 4) || (ProgMode == 5)) // Program Lock bytes
     9f4:	81 2f       	mov	r24, r17
     9f6:	84 50       	subi	r24, 0x04	; 4
     9f8:	82 30       	cpi	r24, 0x02	; 2
     9fa:	00 f5       	brcc	.+64     	; 0xa3c <FUNCProgramAVR+0x1f8>
		{
			if (ProgMode == 5)                    // If fusebytes have already been written, we need to reenter programming mode to latch them
     9fc:	15 30       	cpi	r17, 0x05	; 5
     9fe:	59 f4       	brne	.+22     	; 0xa16 <FUNCProgramAVR+0x1d2>
			{
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line of the slave AVR
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
				MAIN_Delay10MS(1);
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	0e 94 23 02 	call	0x446 <MAIN_Delay10MS>
				MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
				ISPCC_EnterChipProgrammingMode(); // Try to sync with the slave AVR
     a12:	0e 94 34 10 	call	0x2068 <ISPCC_EnterChipProgrammingMode>
			}

			MAIN_ShowProgType('L');
     a16:	8c e4       	ldi	r24, 0x4C	; 76
     a18:	0e 94 3f 03 	call	0x67e <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     a1c:	a0 e3       	ldi	r26, 0x30	; 48
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     a20:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
     a24:	80 2d       	mov	r24, r0
     a26:	88 23       	and	r24, r24
     a28:	31 f4       	brne	.+12     	; 0xa36 <FUNCProgramAVR+0x1f2>
		
			if (!(eeprom_read_byte(&EEPROMVars.TotalLockBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     a2a:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO LOCK BYTES"));
     a2c:	8d e8       	ldi	r24, 0x8D	; 141
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
     a34:	03 c0       	rjmp	.+6      	; 0xa3c <FUNCProgramAVR+0x1f8>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_LOCK);
     a36:	83 e0       	ldi	r24, 0x03	; 3
     a38:	0e 94 9a 16 	call	0x2d34 <PM_SendFuseLockBytes>
			}
		}

		strcpy_P(DoneFailMessageBuff, PSTR("PROGRAMMING DONE"));
     a3c:	6b e9       	ldi	r22, 0x9B	; 155
     a3e:	72 e0       	ldi	r23, 0x02	; 2
     a40:	ce 01       	movw	r24, r28
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	0e 94 6f 19 	call	0x32de <strcpy_P>

		if (Fault != ISPCC_NO_FAULT)         // Takes less code to just overwrite part of the string on fail
     a48:	00 23       	and	r16, r16
     a4a:	31 f0       	breq	.+12     	; 0xa58 <FUNCProgramAVR+0x214>
		  strcpy_P(&DoneFailMessageBuff[12], PSTR("FAILED"));
     a4c:	6c ea       	ldi	r22, 0xAC	; 172
     a4e:	72 e0       	ldi	r23, 0x02	; 2
     a50:	ce 01       	movw	r24, r28
     a52:	0d 96       	adiw	r24, 0x0d	; 13
     a54:	0e 94 6f 19 	call	0x32de <strcpy_P>

		LCD_puts(DoneFailMessageBuff);
     a58:	ce 01       	movw	r24, r28
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	0e 94 ac 07 	call	0xf58 <LCD_puts>

		MAIN_Delay10MS(255);
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	0e 94 23 02 	call	0x446 <MAIN_Delay10MS>
		MAIN_Delay10MS(100);
     a66:	84 e6       	ldi	r24, 0x64	; 100
     a68:	0e 94 23 02 	call	0x446 <MAIN_Delay10MS>
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <FUNCProgramAVR+0x232>
	}
	else
	{
		MAIN_ShowError(SyncErrorMessage);
     a6e:	80 ed       	ldi	r24, 0xD0	; 208
     a70:	93 e0       	ldi	r25, 0x03	; 3
     a72:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
	}
	
	MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run	
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
	USI_SPIOff();
     a7c:	0e 94 40 09 	call	0x1280 <USI_SPIOff>
	DF_EnableDataflash(FALSE);
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
	SPI_SPIOFF();
     a86:	80 91 64 00 	lds	r24, 0x0064
     a8a:	84 60       	ori	r24, 0x04	; 4
     a8c:	80 93 64 00 	sts	0x0064, r24
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Green = ready
     a90:	81 b3       	in	r24, 0x11	; 17
     a92:	8f 7c       	andi	r24, 0xCF	; 207
     a94:	80 61       	ori	r24, 0x10	; 16
     a96:	81 bb       	out	0x11, r24	; 17
     a98:	63 96       	adiw	r28, 0x13	; 19
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	08 95       	ret

00000aae <FUNCStoreProgram>:
}

void FUNCStoreProgram(void)
{
	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     aae:	85 ee       	ldi	r24, 0xE5	; 229
     ab0:	98 e0       	ldi	r25, 0x08	; 8
     ab2:	90 93 01 01 	sts	0x0101, r25
     ab6:	80 93 00 01 	sts	0x0100, r24
	SPI_SPIInit();
     aba:	0e 94 db 08 	call	0x11b6 <SPI_SPIInit>
	UseExernalDF = FALSE;
     abe:	10 92 61 02 	sts	0x0261, r1
	DF_EnableDataflash(TRUE);
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>

	if (!(DF_CheckCorrectOnboardChip()))
     ac8:	0e 94 f7 0a 	call	0x15ee <DF_CheckCorrectOnboardChip>
     acc:	88 23       	and	r24, r24
     ace:	01 f1       	breq	.+64     	; 0xb10 <FUNCStoreProgram+0x62>
	  return;
			
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     ad0:	85 e2       	ldi	r24, 0x25	; 37
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
     ad8:	0e 94 14 07 	call	0xe28 <OSCCAL_Calibrate>
     adc:	80 91 c1 00 	lds	r24, 0x00C1
     ae0:	80 78       	andi	r24, 0x80	; 128
     ae2:	88 61       	ori	r24, 0x18	; 24
     ae4:	80 93 c1 00 	sts	0x00C1, r24

	LCD_puts_f(PSTR("*STORAGE MODE*"));
     ae8:	83 eb       	ldi	r24, 0xB3	; 179
     aea:	92 e0       	ldi	r25, 0x02	; 2
     aec:	0e 94 ed 07 	call	0xfda <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PM_InterpretAVRISPPacket;
     af0:	8e e4       	ldi	r24, 0x4E	; 78
     af2:	94 e1       	ldi	r25, 0x14	; 20
     af4:	90 93 03 01 	sts	0x0103, r25
     af8:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     afc:	0e 94 d3 0e 	call	0x1da6 <V2P_RunStateMachine>
	DF_EnableDataflash(FALSE);
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
	SPI_SPIOFF();
     b06:	80 91 64 00 	lds	r24, 0x0064
     b0a:	84 60       	ori	r24, 0x04	; 4
     b0c:	80 93 64 00 	sts	0x0064, r24
     b10:	08 95       	ret

00000b12 <FUNCClearMem>:
}

void FUNCClearMem(void)
{
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
	LCD_puts_f(PSTR("CONFIRM"));
     b16:	82 ec       	ldi	r24, 0xC2	; 194
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
	MAIN_Delay10MS(180);
     b1e:	84 eb       	ldi	r24, 0xB4	; 180
     b20:	0e 94 23 02 	call	0x446 <MAIN_Delay10MS>

	LCD_puts_f(PSTR("<N Y>"));
     b24:	8a ec       	ldi	r24, 0xCA	; 202
     b26:	92 e0       	ldi	r25, 0x02	; 2
     b28:	0e 94 ed 07 	call	0xfda <LCD_puts_f>

	while (1)
	{
		if (JoyStatus)
     b2c:	8e b3       	in	r24, 0x1e	; 30
     b2e:	88 23       	and	r24, r24
     b30:	e9 f3       	breq	.-6      	; 0xb2c <FUNCClearMem+0x1a>
		{
			if (JoyStatus & JOY_LEFT)
     b32:	8e b3       	in	r24, 0x1e	; 30
     b34:	99 27       	eor	r25, r25
     b36:	ec 01       	movw	r28, r24
     b38:	c4 70       	andi	r28, 0x04	; 4
     b3a:	d0 70       	andi	r29, 0x00	; 0
     b3c:	82 fd       	sbrc	r24, 2
     b3e:	1a c0       	rjmp	.+52     	; 0xb74 <FUNCClearMem+0x62>
			  return;
			else if (JoyStatus & JOY_RIGHT)
     b40:	f3 9b       	sbis	0x1e, 3	; 30
     b42:	f4 cf       	rjmp	.-24     	; 0xb2c <FUNCClearMem+0x1a>
			  break;
		}
	}

	MAIN_WaitForJoyRelease();
     b44:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>

	LCD_puts_f(WaitText);
     b48:	85 e2       	ldi	r24, 0x25	; 37
     b4a:	92 e0       	ldi	r25, 0x02	; 2
     b4c:	0e 94 ed 07 	call	0xfda <LCD_puts_f>

	for (uint16_t EAddr = 0; EAddr < 512; EAddr++)
     b50:	ce 01       	movw	r24, r28
     b52:	2f ef       	ldi	r18, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     b54:	dc 01       	movw	r26, r24
     b56:	02 2e       	mov	r0, r18
     b58:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	32 e0       	ldi	r19, 0x02	; 2
     b60:	80 30       	cpi	r24, 0x00	; 0
     b62:	93 07       	cpc	r25, r19
     b64:	b8 f3       	brcs	.-18     	; 0xb54 <FUNCClearMem+0x42>
	  eeprom_write_byte((uint8_t*)EAddr, 0xFF);

	LCD_puts_f(PSTR("MEM CLEARED"));
     b66:	80 ed       	ldi	r24, 0xD0	; 208
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
	MAIN_Delay10MS(255);
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	0e 94 23 02 	call	0x446 <MAIN_Delay10MS>
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <FUNCSetContrast>:
}

void FUNCSetContrast(void)
{
     b7a:	ef 92       	push	r14
     b7c:	ff 92       	push	r15
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	26 97       	sbiw	r28, 0x06	; 6
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	de bf       	out	0x3e, r29	; 62
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     b94:	85 e8       	ldi	r24, 0x85	; 133
     b96:	e8 2e       	mov	r14, r24
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	f8 2e       	mov	r15, r24
  uint8_t result;
  asm volatile
     b9c:	d7 01       	movw	r26, r14
     b9e:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
     ba2:	80 2d       	mov	r24, r0
     ba4:	18 2f       	mov	r17, r24
     ba6:	1f 70       	andi	r17, 0x0F	; 15
	uint8_t Buffer[6];
	uint8_t Contrast = (eeprom_read_byte(&EEPROMVars.LCDContrast) & 0x0F); // Ranges from 0-15 so mask retuns 15 on blank EEPROM (0xFF)
	
	JoyStatus = 1;                          // Invalid value to force the LCD to update
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)
     bac:	8e b3       	in	r24, 0x1e	; 30
     bae:	88 23       	and	r24, r24
     bb0:	e9 f3       	breq	.-6      	; 0xbac <FUNCSetContrast+0x32>
		{
			if (JoyStatus & JOY_UP)
     bb2:	f6 9b       	sbis	0x1e, 6	; 30
     bb4:	04 c0       	rjmp	.+8      	; 0xbbe <FUNCSetContrast+0x44>
			{
				if (Contrast < 15)
     bb6:	1f 30       	cpi	r17, 0x0F	; 15
     bb8:	78 f4       	brcc	.+30     	; 0xbd8 <FUNCSetContrast+0x5e>
				  Contrast++;
     bba:	1f 5f       	subi	r17, 0xFF	; 255
     bbc:	0d c0       	rjmp	.+26     	; 0xbd8 <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_DOWN)
     bbe:	f7 9b       	sbis	0x1e, 7	; 30
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <FUNCSetContrast+0x50>
			{
				if (Contrast > 1)          // Zero is non-visible, so 1 is the minimum
     bc2:	12 30       	cpi	r17, 0x02	; 2
     bc4:	48 f0       	brcs	.+18     	; 0xbd8 <FUNCSetContrast+0x5e>
				  Contrast--;
     bc6:	11 50       	subi	r17, 0x01	; 1
     bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_LEFT)
     bca:	f2 9b       	sbis	0x1e, 2	; 30
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <FUNCSetContrast+0x5e>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     bce:	d7 01       	movw	r26, r14
     bd0:	01 2e       	mov	r0, r17
     bd2:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.LCDContrast, Contrast);
				return;
     bd6:	18 c0       	rjmp	.+48     	; 0xc08 <FUNCSetContrast+0x8e>
			}
					
			Buffer[0] = 'C';
     bd8:	83 e4       	ldi	r24, 0x43	; 67
     bda:	89 83       	std	Y+1, r24	; 0x01
			Buffer[1] = 'T';
     bdc:	84 e5       	ldi	r24, 0x54	; 84
     bde:	8a 83       	std	Y+2, r24	; 0x02
			Buffer[2] = ' ';
     be0:	80 e2       	ldi	r24, 0x20	; 32
     be2:	8b 83       	std	Y+3, r24	; 0x03

			MAIN_IntToStr((uint16_t)Contrast, &Buffer[3]);
     be4:	be 01       	movw	r22, r28
     be6:	6c 5f       	subi	r22, 0xFC	; 252
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	81 2f       	mov	r24, r17
     bec:	99 27       	eor	r25, r25
     bee:	0e 94 27 03 	call	0x64e <MAIN_IntToStr>
			LCD_puts(Buffer);
     bf2:	ce 01       	movw	r24, r28
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	0e 94 ac 07 	call	0xf58 <LCD_puts>

			LCD_CONTRAST_LEVEL(Contrast);
     bfa:	81 2f       	mov	r24, r17
     bfc:	8f 70       	andi	r24, 0x0F	; 15
     bfe:	80 93 e7 00 	sts	0x00E7, r24

			MAIN_WaitForJoyRelease();
     c02:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     c06:	d2 cf       	rjmp	.-92     	; 0xbac <FUNCSetContrast+0x32>
     c08:	26 96       	adiw	r28, 0x06	; 6
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	08 95       	ret

00000c20 <FUNCSetISPSpeed>:
		}
	}
}

void FUNCSetISPSpeed(void)
{
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     c26:	01 e0       	ldi	r16, 0x01	; 1
     c28:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t result;
  asm volatile
     c2a:	d8 01       	movw	r26, r16
     c2c:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
     c30:	80 2d       	mov	r24, r0
     c32:	c8 2f       	mov	r28, r24
	uint8_t CurrSpeed = eeprom_read_byte(&EEPROMVars.SCKDuration);

	if (CurrSpeed > (USI_PRESET_SPEEDS - 1)) CurrSpeed = 0; // Protection against blank EEPROM
     c34:	84 30       	cpi	r24, 0x04	; 4
     c36:	08 f0       	brcs	.+2      	; 0xc3a <FUNCSetISPSpeed+0x1a>
     c38:	c0 e0       	ldi	r28, 0x00	; 0

	JoyStatus = 1;                         // Invalid value to force the LCD to update
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     c3e:	8e b3       	in	r24, 0x1e	; 30
     c40:	88 23       	and	r24, r24
     c42:	e9 f3       	breq	.-6      	; 0xc3e <FUNCSetISPSpeed+0x1e>
		{
			if (JoyStatus & JOY_UP)
     c44:	f6 9b       	sbis	0x1e, 6	; 30
     c46:	06 c0       	rjmp	.+12     	; 0xc54 <FUNCSetISPSpeed+0x34>
			{
				(CurrSpeed == 0)? CurrSpeed = (USI_PRESET_SPEEDS - 1) : CurrSpeed--;
     c48:	cc 23       	and	r28, r28
     c4a:	11 f4       	brne	.+4      	; 0xc50 <FUNCSetISPSpeed+0x30>
     c4c:	c3 e0       	ldi	r28, 0x03	; 3
     c4e:	11 c0       	rjmp	.+34     	; 0xc72 <FUNCSetISPSpeed+0x52>
     c50:	c1 50       	subi	r28, 0x01	; 1
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_DOWN)
     c54:	f7 9b       	sbis	0x1e, 7	; 30
     c56:	06 c0       	rjmp	.+12     	; 0xc64 <FUNCSetISPSpeed+0x44>
			{
				(CurrSpeed == (USI_PRESET_SPEEDS - 1))? CurrSpeed = 0 : CurrSpeed++;
     c58:	c3 30       	cpi	r28, 0x03	; 3
     c5a:	11 f4       	brne	.+4      	; 0xc60 <FUNCSetISPSpeed+0x40>
     c5c:	c0 e0       	ldi	r28, 0x00	; 0
     c5e:	09 c0       	rjmp	.+18     	; 0xc72 <FUNCSetISPSpeed+0x52>
     c60:	cf 5f       	subi	r28, 0xFF	; 255
     c62:	07 c0       	rjmp	.+14     	; 0xc72 <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_LEFT)
     c64:	f2 9b       	sbis	0x1e, 2	; 30
     c66:	05 c0       	rjmp	.+10     	; 0xc72 <FUNCSetISPSpeed+0x52>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     c68:	d8 01       	movw	r26, r16
     c6a:	0c 2e       	mov	r0, r28
     c6c:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.SCKDuration, CurrSpeed);
				return;
     c70:	0d c0       	rjmp	.+26     	; 0xc8c <FUNCSetISPSpeed+0x6c>
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&USIPSNamePtrs[CurrSpeed]));
     c72:	ec 2f       	mov	r30, r28
     c74:	ff 27       	eor	r31, r31
     c76:	ee 0f       	add	r30, r30
     c78:	ff 1f       	adc	r31, r31
     c7a:	e3 58       	subi	r30, 0x83	; 131
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	85 91       	lpm	r24, Z+
     c80:	94 91       	lpm	r25, Z
     c82:	0e 94 ed 07 	call	0xfda <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     c86:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     c8a:	d9 cf       	rjmp	.-78     	; 0xc3e <FUNCSetISPSpeed+0x1e>
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	08 95       	ret

00000c94 <FUNCSetFirmMinorVer>:
		}
	}
}

void FUNCSetFirmMinorVer(void)
{
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	25 97       	sbiw	r28, 0x05	; 5
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     cae:	96 e8       	ldi	r25, 0x86	; 134
     cb0:	e9 2e       	mov	r14, r25
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	f9 2e       	mov	r15, r25
  uint8_t result;
  asm volatile
     cb6:	d7 01       	movw	r26, r14
     cb8:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
     cbc:	80 2d       	mov	r24, r0
     cbe:	18 2f       	mov	r17, r24
	uint8_t VerBuffer[5];
	uint8_t VerMinor = eeprom_read_byte(&EEPROMVars.FirmVerMinor);

	if (VerMinor > 0x09)
     cc0:	8a 30       	cpi	r24, 0x0A	; 10
     cc2:	08 f0       	brcs	.+2      	; 0xcc6 <FUNCSetFirmMinorVer+0x32>
	  VerMinor = V2P_SW_VERSION_MINOR_DEFAULT;
     cc4:	14 e0       	ldi	r17, 0x04	; 4
	
	strcpy_P(VerBuffer, PSTR("V2- "));
     cc6:	6c ed       	ldi	r22, 0xDC	; 220
     cc8:	72 e0       	ldi	r23, 0x02	; 2
     cca:	ce 01       	movw	r24, r28
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	0e 94 6f 19 	call	0x32de <strcpy_P>

	JoyStatus = 1;                        // Invalid value to force the LCD to update
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     cd6:	8e b3       	in	r24, 0x1e	; 30
     cd8:	88 23       	and	r24, r24
     cda:	e9 f3       	breq	.-6      	; 0xcd6 <FUNCSetFirmMinorVer+0x42>
		{
			if (JoyStatus & JOY_UP)
     cdc:	f6 9b       	sbis	0x1e, 6	; 30
     cde:	05 c0       	rjmp	.+10     	; 0xcea <FUNCSetFirmMinorVer+0x56>
			{
				(VerMinor == 9)? VerMinor = 0 : VerMinor++;
     ce0:	19 30       	cpi	r17, 0x09	; 9
     ce2:	11 f4       	brne	.+4      	; 0xce8 <FUNCSetFirmMinorVer+0x54>
     ce4:	10 e0       	ldi	r17, 0x00	; 0
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <FUNCSetFirmMinorVer+0x56>
     ce8:	1f 5f       	subi	r17, 0xFF	; 255
			}
			if (JoyStatus & JOY_DOWN)
     cea:	f7 9b       	sbis	0x1e, 7	; 30
     cec:	06 c0       	rjmp	.+12     	; 0xcfa <FUNCSetFirmMinorVer+0x66>
			{
				(VerMinor == 0)? VerMinor = 9 : VerMinor--;
     cee:	11 23       	and	r17, r17
     cf0:	11 f4       	brne	.+4      	; 0xcf6 <FUNCSetFirmMinorVer+0x62>
     cf2:	19 e0       	ldi	r17, 0x09	; 9
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <FUNCSetFirmMinorVer+0x74>
     cf6:	11 50       	subi	r17, 0x01	; 1
     cf8:	07 c0       	rjmp	.+14     	; 0xd08 <FUNCSetFirmMinorVer+0x74>
			}
			else if (JoyStatus & JOY_LEFT)
     cfa:	f2 9b       	sbis	0x1e, 2	; 30
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <FUNCSetFirmMinorVer+0x74>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     cfe:	d7 01       	movw	r26, r14
     d00:	01 2e       	mov	r0, r17
     d02:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.FirmVerMinor, VerMinor);
				return;
     d06:	0a c0       	rjmp	.+20     	; 0xd1c <FUNCSetFirmMinorVer+0x88>
			}
			
			VerBuffer[3] = ('0' + VerMinor);
     d08:	10 5d       	subi	r17, 0xD0	; 208
     d0a:	1c 83       	std	Y+4, r17	; 0x04
     d0c:	10 53       	subi	r17, 0x30	; 48
			LCD_puts(VerBuffer);
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	0e 94 ac 07 	call	0xf58 <LCD_puts>

			MAIN_WaitForJoyRelease();
     d16:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     d1a:	dd cf       	rjmp	.-70     	; 0xcd6 <FUNCSetFirmMinorVer+0x42>
     d1c:	25 96       	adiw	r28, 0x05	; 5
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	08 95       	ret

00000d34 <FUNCSleepMode>:
		}
	}	
}

void FUNCSleepMode(void)
{
	SMCR    = ((1 << SM1) | (1 << SE));    // Power down sleep mode
     d34:	85 e0       	ldi	r24, 0x05	; 5
     d36:	83 bf       	out	0x33, r24	; 51
	LCDCRA &= ~(1 << LCDEN); 
     d38:	80 91 e4 00 	lds	r24, 0x00E4
     d3c:	8f 77       	andi	r24, 0x7F	; 127
     d3e:	80 93 e4 00 	sts	0x00E4, r24
	
	while (!(JoyStatus & JOY_UP))         // Joystick interrupt wakes the micro
	  SLEEP();
     d42:	f6 99       	sbic	0x1e, 6	; 30
     d44:	03 c0       	rjmp	.+6      	; 0xd4c <FUNCSleepMode+0x18>
     d46:	88 95       	sleep
     d48:	f6 9b       	sbis	0x1e, 6	; 30
     d4a:	fd cf       	rjmp	.-6      	; 0xd46 <FUNCSleepMode+0x12>
	   
	LCDCRA |= (1 << LCDEN);
     d4c:	80 91 e4 00 	lds	r24, 0x00E4
     d50:	80 68       	ori	r24, 0x80	; 128
     d52:	80 93 e4 00 	sts	0x00E4, r24
	
	MAIN_WaitForJoyRelease();
     d56:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     d5a:	08 95       	ret

00000d5c <FUNCStorageInfo>:
}

void FUNCStorageInfo(void)
{
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
	uint8_t SelectedItem = 0;
     d60:	10 e0       	ldi	r17, 0x00	; 0

	MAIN_WaitForJoyRelease();
     d62:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>

	JoyStatus = 1;                        // Invalid value to force the LCD to update
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     d6a:	8e b3       	in	r24, 0x1e	; 30
     d6c:	88 23       	and	r24, r24
     d6e:	e9 f3       	breq	.-6      	; 0xd6a <FUNCStorageInfo+0xe>
		{
			if (JoyStatus & (JOY_UP | JOY_DOWN))
     d70:	ce b3       	in	r28, 0x1e	; 30
     d72:	c0 7c       	andi	r28, 0xC0	; 192
     d74:	19 f0       	breq	.+6      	; 0xd7c <FUNCStorageInfo+0x20>
			{
				SelectedItem ^= 1;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	18 27       	eor	r17, r24
     d7a:	38 c0       	rjmp	.+112    	; 0xdec <FUNCStorageInfo+0x90>
			}
			else if (JoyStatus & JOY_LEFT)
     d7c:	f2 99       	sbic	0x1e, 2	; 30
     d7e:	43 c0       	rjmp	.+134    	; 0xe06 <FUNCStorageInfo+0xaa>
			{
				return;
			}
			else if (JoyStatus & JOY_PRESS)
     d80:	f4 9b       	sbis	0x1e, 4	; 30
     d82:	34 c0       	rjmp	.+104    	; 0xdec <FUNCStorageInfo+0x90>
			{
				if (SelectedItem == 1)    // View storage tags
     d84:	11 30       	cpi	r17, 0x01	; 1
     d86:	81 f5       	brne	.+96     	; 0xde8 <FUNCStorageInfo+0x8c>
				{
					DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     d88:	85 ee       	ldi	r24, 0xE5	; 229
     d8a:	98 e0       	ldi	r25, 0x08	; 8
     d8c:	90 93 01 01 	sts	0x0101, r25
     d90:	80 93 00 01 	sts	0x0100, r24
					SPI_SPIInit();
     d94:	0e 94 db 08 	call	0x11b6 <SPI_SPIInit>
					UseExernalDF = FALSE;
     d98:	c0 93 61 02 	sts	0x0261, r28
					DF_EnableDataflash(TRUE);
     d9c:	81 2f       	mov	r24, r17
     d9e:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>

					if (DF_CheckCorrectOnboardChip())
     da2:	0e 94 f7 0a 	call	0x15ee <DF_CheckCorrectOnboardChip>
     da6:	c8 2f       	mov	r28, r24
     da8:	88 23       	and	r24, r24
     daa:	41 f0       	breq	.+16     	; 0xdbc <FUNCStorageInfo+0x60>
					{
						TM_ShowTags();
     dac:	0e 94 41 19 	call	0x3282 <TM_ShowTags>
						SPI_SPIOFF();
     db0:	80 91 64 00 	lds	r24, 0x0064
     db4:	84 60       	ori	r24, 0x04	; 4
     db6:	80 93 64 00 	sts	0x0064, r24
     dba:	18 c0       	rjmp	.+48     	; 0xdec <FUNCStorageInfo+0x90>
					}
					else if (!(PM_GetStoredDataSize(TYPE_FLASH)))
     dbc:	81 2f       	mov	r24, r17
     dbe:	0e 94 34 13 	call	0x2668 <PM_GetStoredDataSize>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	a1 05       	cpc	r26, r1
     dca:	b1 05       	cpc	r27, r1
     dcc:	79 f4       	brne	.+30     	; 0xdec <FUNCStorageInfo+0x90>
					{
						DF_EnableDataflash(FALSE);
     dce:	8c 2f       	mov	r24, r28
     dd0:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
						SPI_SPIOFF();
     dd4:	80 91 64 00 	lds	r24, 0x0064
     dd8:	84 60       	ori	r24, 0x04	; 4
     dda:	80 93 64 00 	sts	0x0064, r24

						MAIN_ShowError(PSTR("NO STORED PRGM"));
     dde:	81 ee       	ldi	r24, 0xE1	; 225
     de0:	92 e0       	ldi	r25, 0x02	; 2
     de2:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
     de6:	02 c0       	rjmp	.+4      	; 0xdec <FUNCStorageInfo+0x90>
					}	
				}
				else                      // View stored data sizes
				{
					PM_ShowStoredItemSizes();
     de8:	0e 94 1c 18 	call	0x3038 <PM_ShowStoredItemSizes>
				}
			}
			
			LCD_puts_f((uint8_t*)pgm_read_word(&SIFOOptionPtrs[SelectedItem]));
     dec:	e1 2f       	mov	r30, r17
     dee:	ff 27       	eor	r31, r31
     df0:	ee 0f       	add	r30, r30
     df2:	ff 1f       	adc	r31, r31
     df4:	e4 5a       	subi	r30, 0xA4	; 164
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	85 91       	lpm	r24, Z+
     dfa:	94 91       	lpm	r25, Z
     dfc:	0e 94 ed 07 	call	0xfda <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     e00:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
     e04:	b2 cf       	rjmp	.-156    	; 0xd6a <FUNCStorageInfo+0xe>
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	08 95       	ret

00000e0c <FUNCGoBootloader>:
		}
	}
}

void FUNCGoBootloader(void)
{
	uint8_t MD = (MCUCR & ~(1 << JTD));   // Forces compiler to use IN, AND plus two OUTs rather than two lots of IN/AND/OUTs
     e0c:	85 b7       	in	r24, 0x35	; 53
     e0e:	8f 77       	andi	r24, 0x7F	; 127
	MCUCR = MD;                           // Turn on JTAG via code
     e10:	85 bf       	out	0x35, r24	; 53
	MCUCR = MD;                           // Set bit twice as specified in datasheet        
     e12:	85 bf       	out	0x35, r24	; 53
	
	LCD_puts_f(PSTR("*JTAG ON*"));
     e14:	80 ef       	ldi	r24, 0xF0	; 240
     e16:	92 e0       	ldi	r25, 0x02	; 2
     e18:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
	
	MAIN_WaitForJoyRelease();
     e1c:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
	
	WDTCR = ((1<<WDCE) | (1<<WDE));       // Enable Watchdog Timer to give reset after minimum timeout
     e20:	88 e1       	ldi	r24, 0x18	; 24
     e22:	80 93 60 00 	sts	0x0060, r24
	while (1) {};                        // Eternal loop - when watchdog resets the AVR it will enter the bootloader
     e26:	ff cf       	rjmp	.-2      	; 0xe26 <FUNCGoBootloader+0x1a>

00000e28 <OSCCAL_Calibrate>:

static volatile uint16_t ActualCount;

void OSCCAL_Calibrate(void)
{
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
	uint8_t SREG_Backup;
	uint8_t LoopCount = (0x7F / 2); // Maximum range is 128, and starts from the middle, so 64 is the max number of iterations required
     e2c:	4f e3       	ldi	r20, 0x3F	; 63
	uint8_t PrevOSCALValues[2];
   
	// Reset ActualCount
	ActualCount = 0;
     e2e:	10 92 05 01 	sts	0x0105, r1
     e32:	10 92 04 01 	sts	0x0104, r1
   
	// Make sure all clock division is turned off (8Mhz RC clock)
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_8MHZ);
     e36:	80 e8       	ldi	r24, 0x80	; 128
     e38:	80 93 61 00 	sts	0x0061, r24
     e3c:	10 92 61 00 	sts	0x0061, r1

	// Inital OSCCAL of half its maximum for speed
	OSCCAL = (0x7F / 2);
     e40:	40 93 66 00 	sts	0x0066, r20

	// Save the SREG
	SREG_Backup = SREG;
     e44:	5f b7       	in	r21, 0x3f	; 63
    
	// Disable all timer 1 interrupts
	TIMSK1 = 0;
     e46:	10 92 6f 00 	sts	0x006F, r1
        
	// Set timer 2 to asyncronous mode (32.768KHz crystal)
	ASSR   = (1 << AS2);
     e4a:	88 e0       	ldi	r24, 0x08	; 8
     e4c:	80 93 b6 00 	sts	0x00B6, r24
        
	// Timer 2 overflow interrupt enable
	TIMSK2 = (1 << TOIE2);
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	80 93 70 00 	sts	0x0070, r24

	// Enable interrupts
	sei();
     e56:	78 94       	sei

	// Start both counters with no prescaling
	TCCR1B = (1 << CS10);
     e58:	80 93 81 00 	sts	0x0081, r24
	TCCR2A = (1 << CS20);
     e5c:	80 93 b0 00 	sts	0x00B0, r24
	 	 
	// Previous OSCCAL value of 0
	PrevOSCALValues[0] = 0;
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0

	// Wait until timer 2's external 32.768KHz crystal is stable
	while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB) | (1 << OCR2UB)));
     e64:	80 91 b6 00 	lds	r24, 0x00B6
     e68:	99 27       	eor	r25, r25
     e6a:	87 70       	andi	r24, 0x07	; 7
     e6c:	90 70       	andi	r25, 0x00	; 0
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	c9 f7       	brne	.-14     	; 0xe64 <OSCCAL_Calibrate+0x3c>
    
	// Clear the timer values
	TCNT1  = 0;
     e72:	90 93 85 00 	sts	0x0085, r25
     e76:	80 93 84 00 	sts	0x0084, r24
	TCNT2  = 0;
     e7a:	10 92 b2 00 	sts	0x00B2, r1
    
	while (LoopCount--)
	{
		// Let it take a few readings (14ms, approx 2 readings)
		_delay_ms(14);

		PrevOSCALValues[1] = PrevOSCALValues[0];
		PrevOSCALValues[0] = OSCCAL;
        
		if (ActualCount > OSCCAL_UPPERCOUNTBOUND)       // Clock is running too fast
			OSCCAL--;
		else if (ActualCount < OSCCAL_LOWERCOUNTBOUND) // Clock is running too slow
			OSCCAL++;
		else		                                     // Clock is just right
			break;
		
		// If the routine cannot find a value withing the count tollerance,
		// it will cause the OSCCAL to hover around the closest two values.
		// If the current value is the same as the 2*n previous, exit the
		// routine as the best value has been found.
		if (OSCCAL == PrevOSCALValues[1])
		  break;
     e7e:	4e e3       	ldi	r20, 0x3E	; 62
     e80:	ac ec       	ldi	r26, 0xCC	; 204
     e82:	b4 e6       	ldi	r27, 0x64	; 100
     e84:	c0 e0       	ldi	r28, 0x00	; 0
     e86:	d0 e0       	ldi	r29, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e88:	cd 01       	movw	r24, r26
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <OSCCAL_Calibrate+0x62>
     e8e:	32 2f       	mov	r19, r18
     e90:	80 91 66 00 	lds	r24, 0x0066
     e94:	28 2f       	mov	r18, r24
     e96:	80 91 04 01 	lds	r24, 0x0104
     e9a:	90 91 05 01 	lds	r25, 0x0105
     e9e:	81 50       	subi	r24, 0x01	; 1
     ea0:	91 4e       	sbci	r25, 0xE1	; 225
     ea2:	20 f0       	brcs	.+8      	; 0xeac <OSCCAL_Calibrate+0x84>
     ea4:	80 91 66 00 	lds	r24, 0x0066
     ea8:	81 50       	subi	r24, 0x01	; 1
     eaa:	0a c0       	rjmp	.+20     	; 0xec0 <OSCCAL_Calibrate+0x98>
     eac:	80 91 04 01 	lds	r24, 0x0104
     eb0:	90 91 05 01 	lds	r25, 0x0105
     eb4:	86 5f       	subi	r24, 0xF6	; 246
     eb6:	90 4e       	sbci	r25, 0xE0	; 224
     eb8:	58 f4       	brcc	.+22     	; 0xed0 <OSCCAL_Calibrate+0xa8>
     eba:	80 91 66 00 	lds	r24, 0x0066
     ebe:	8f 5f       	subi	r24, 0xFF	; 255
     ec0:	80 93 66 00 	sts	0x0066, r24
     ec4:	80 91 66 00 	lds	r24, 0x0066
     ec8:	83 17       	cp	r24, r19
     eca:	11 f0       	breq	.+4      	; 0xed0 <OSCCAL_Calibrate+0xa8>
     ecc:	41 50       	subi	r20, 0x01	; 1
     ece:	e0 f6       	brcc	.-72     	; 0xe88 <OSCCAL_Calibrate+0x60>
	}

	// Disable all timer interrupts
	TIMSK1 = 0;
     ed0:	10 92 6f 00 	sts	0x006F, r1
	TIMSK2 = 0;
     ed4:	10 92 70 00 	sts	0x0070, r1
    
	// Stop the timers
	TCCR1B = 0x00;
     ed8:	10 92 81 00 	sts	0x0081, r1
	TCCR2A = 0x00;
     edc:	10 92 b0 00 	sts	0x00B0, r1

	// Turn off timer 2 asynchronous mode
	ASSR  &= ~(1 << AS2);
     ee0:	80 91 b6 00 	lds	r24, 0x00B6
     ee4:	87 7f       	andi	r24, 0xF7	; 247
     ee6:	80 93 b6 00 	sts	0x00B6, r24

	// Restore SREG
	SREG = SREG_Backup;
     eea:	5f bf       	out	0x3f, r21	; 63
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	08 95       	ret

00000ef2 <__vector_5>:
        
	return;
}

ISR(TIMER2_OVF_vect, ISR_BLOCK) // Occurs 32768/256 timers per second, or 128Hz
{
     ef2:	1f 92       	push	r1
     ef4:	0f 92       	push	r0
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	0f 92       	push	r0
     efa:	11 24       	eor	r1, r1
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
	// Stop timer 1 so it can be read
	TCCR1B = 0x00;
     f00:	10 92 81 00 	sts	0x0081, r1
    
	// Record timer 1's value
	ActualCount = TCNT1;
     f04:	80 91 84 00 	lds	r24, 0x0084
     f08:	90 91 85 00 	lds	r25, 0x0085
     f0c:	90 93 05 01 	sts	0x0105, r25
     f10:	80 93 04 01 	sts	0x0104, r24
	     
	// Reset counters and restart timer 1
	TCNT1  = 0;
     f14:	10 92 85 00 	sts	0x0085, r1
     f18:	10 92 84 00 	sts	0x0084, r1
	TCNT2  = 0;
     f1c:	10 92 b2 00 	sts	0x00B2, r1
	TCCR1B = (1 << CS10);
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	80 93 81 00 	sts	0x0081, r24
     f26:	9f 91       	pop	r25
     f28:	8f 91       	pop	r24
     f2a:	0f 90       	pop	r0
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	0f 90       	pop	r0
     f30:	1f 90       	pop	r1
     f32:	18 95       	reti

00000f34 <LCD_Init>:
// ======================================================================================

void LCD_Init(void)
{
	LCDCCR = 0x0F;
     f34:	8f e0       	ldi	r24, 0x0F	; 15
     f36:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all segment pins.
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
     f3a:	87 eb       	ldi	r24, 0xB7	; 183
     f3c:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32,0 Hz
    LCDFRR  = (0<<LCDPS0) | (7<<LCDCD0);    
     f40:	87 e0       	ldi	r24, 0x07	; 7
     f42:	80 93 e6 00 	sts	0x00E6, r24

	// Enable LCD and set low power waveform
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB); 
     f46:	80 ec       	ldi	r24, 0xC0	; 192
     f48:	80 93 e4 00 	sts	0x00E4, r24

    //Enable LCD start of frame interrupt
    LCDCRA |= (1<<LCDIE);
     f4c:	80 91 e4 00 	lds	r24, 0x00E4
     f50:	88 60       	ori	r24, 0x08	; 8
     f52:	80 93 e4 00 	sts	0x00E4, r24
     f56:	08 95       	ret

00000f58 <LCD_puts>:
}

void LCD_puts_f(const uint8_t *FlashData)
{
	uint8_t StrBuff[LCD_TEXTBUFFER_SIZE];

	strcpy_P(StrBuff, FlashData);
	LCD_puts(StrBuff);
}

void LCD_puts(const uint8_t *Data)
{
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	ec 01       	movw	r28, r24
	uint8_t LoadB;
	
	for (LoadB = 0; LoadB < 20; LoadB++)
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	3f ef       	ldi	r19, 0xFF	; 255
     f62:	ed e2       	ldi	r30, 0x2D	; 45
     f64:	f2 e0       	ldi	r31, 0x02	; 2
     f66:	df 01       	movw	r26, r30
	{
		uint8_t CByte = *(Data++);
     f68:	89 91       	ld	r24, Y+
	
		if ((CByte >= '*') && (CByte <= 'z'))
     f6a:	98 2f       	mov	r25, r24
     f6c:	9a 52       	subi	r25, 0x2A	; 42
     f6e:	91 35       	cpi	r25, 0x51	; 81
     f70:	38 f4       	brcc	.+14     	; 0xf80 <LCD_puts+0x28>
		  TextBuffer[LoadB] = ((CByte == ' ')? 0xFF : (CByte - '*'));
     f72:	80 32       	cpi	r24, 0x20	; 32
     f74:	11 f0       	breq	.+4      	; 0xf7a <LCD_puts+0x22>
     f76:	89 2f       	mov	r24, r25
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <LCD_puts+0x24>
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	8c 93       	st	X, r24
     f7e:	03 c0       	rjmp	.+6      	; 0xf86 <LCD_puts+0x2e>
		else if (CByte == 0x00)
     f80:	88 23       	and	r24, r24
     f82:	31 f0       	breq	.+12     	; 0xf90 <LCD_puts+0x38>
		  break;
		else
		  TextBuffer[LoadB] = 0xFF;		
     f84:	30 83       	st	Z, r19
     f86:	2f 5f       	subi	r18, 0xFF	; 255
     f88:	11 96       	adiw	r26, 0x01	; 1
     f8a:	31 96       	adiw	r30, 0x01	; 1
     f8c:	24 31       	cpi	r18, 0x14	; 20
     f8e:	60 f3       	brcs	.-40     	; 0xf68 <LCD_puts+0x10>
	}

	ScrollMode  = ((LoadB > 6)? TRUE : FALSE);
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	27 30       	cpi	r18, 0x07	; 7
     f94:	08 f0       	brcs	.+2      	; 0xf98 <LCD_puts+0x40>
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	80 93 5d 02 	sts	0x025D, r24
	ScrollCount = 0;
     f9c:	10 92 2b 02 	sts	0x022B, r1
     fa0:	9f ef       	ldi	r25, 0xFF	; 255
     fa2:	86 e0       	ldi	r24, 0x06	; 6

	for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
		TextBuffer[LoadB++] = 0xFF;
     fa4:	e2 2f       	mov	r30, r18
     fa6:	ff 27       	eor	r31, r31
     fa8:	e3 5d       	subi	r30, 0xD3	; 211
     faa:	fd 4f       	sbci	r31, 0xFD	; 253
     fac:	90 83       	st	Z, r25
     fae:	2f 5f       	subi	r18, 0xFF	; 255
     fb0:	81 50       	subi	r24, 0x01	; 1
     fb2:	87 ff       	sbrs	r24, 7
     fb4:	f7 cf       	rjmp	.-18     	; 0xfa4 <LCD_puts+0x4c>
	
	TextBuffer[LoadB] = 0x00;
     fb6:	e2 2f       	mov	r30, r18
     fb8:	ff 27       	eor	r31, r31
     fba:	e3 5d       	subi	r30, 0xD3	; 211
     fbc:	fd 4f       	sbci	r31, 0xFD	; 253
     fbe:	10 82       	st	Z, r1
	StrStart   = 0;
     fc0:	10 92 2c 02 	sts	0x022C, r1
	StrEnd     = LoadB;	
     fc4:	20 93 2a 02 	sts	0x022A, r18
	DelayCount = LCD_DELAYCOUNT_DEFAULT;
     fc8:	8a e0       	ldi	r24, 0x0A	; 10
     fca:	80 93 5e 02 	sts	0x025E, r24

	UpdateLCD  = TRUE;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	80 93 48 02 	sts	0x0248, r24
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <LCD_puts_f>:
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	64 97       	sbiw	r28, 0x14	; 20
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	bc 01       	movw	r22, r24
     ff0:	ce 01       	movw	r24, r28
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	0e 94 6f 19 	call	0x32de <strcpy_P>
     ff8:	ce 01       	movw	r24, r28
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	0e 94 ac 07 	call	0xf58 <LCD_puts>
    1000:	64 96       	adiw	r28, 0x14	; 20
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	08 95       	ret

00001012 <LCD_WriteChar>:
}

void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit)
{
    1012:	e8 2f       	mov	r30, r24
	uint16_t SegData  = 0x00;
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1));
    1018:	86 2f       	mov	r24, r22
    101a:	86 95       	lsr	r24
    101c:	a8 2f       	mov	r26, r24
    101e:	bb 27       	eor	r27, r27
    1020:	a7 5b       	subi	r26, 0xB7	; 183
    1022:	bd 4f       	sbci	r27, 0xFD	; 253

	if (Byte != 0xFF)
    1024:	ef 3f       	cpi	r30, 0xFF	; 255
    1026:	39 f0       	breq	.+14     	; 0x1036 <LCD_WriteChar+0x24>
	  SegData = pgm_read_word(&LCD_SegTable[Byte]);	
    1028:	ff 27       	eor	r31, r31
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	e6 50       	subi	r30, 0x06	; 6
    1030:	fd 4f       	sbci	r31, 0xFD	; 253
    1032:	25 91       	lpm	r18, Z+
    1034:	34 91       	lpm	r19, Z
    1036:	77 27       	eor	r23, r23
    1038:	61 70       	andi	r22, 0x01	; 1
    103a:	70 70       	andi	r23, 0x00	; 0
    103c:	43 e0       	ldi	r20, 0x03	; 3

	for (uint8_t BNib = 0; BNib < 4; BNib++)
	{
		uint8_t Mask          = 0xF0;
    103e:	50 ef       	ldi	r21, 0xF0	; 240
		uint8_t MaskedSegData = (SegData & 0x0000F);
    1040:	92 2f       	mov	r25, r18
    1042:	9f 70       	andi	r25, 0x0F	; 15
	
		if (Digit & 0x01)
    1044:	61 15       	cp	r22, r1
    1046:	71 05       	cpc	r23, r1
    1048:	19 f0       	breq	.+6      	; 0x1050 <LCD_WriteChar+0x3e>
		{
			Mask = 0x0F;
    104a:	5f e0       	ldi	r21, 0x0F	; 15
			MaskedSegData <<= 4;
    104c:	92 95       	swap	r25
    104e:	90 7f       	andi	r25, 0xF0	; 240
		}
		
		*BuffPtr = ((*BuffPtr & Mask) | MaskedSegData);
    1050:	8c 91       	ld	r24, X
    1052:	85 23       	and	r24, r21
    1054:	89 2b       	or	r24, r25
    1056:	8c 93       	st	X, r24

		SegData >>= 4;
    1058:	84 e0       	ldi	r24, 0x04	; 4
    105a:	36 95       	lsr	r19
    105c:	27 95       	ror	r18
    105e:	8a 95       	dec	r24
    1060:	e1 f7       	brne	.-8      	; 0x105a <LCD_WriteChar+0x48>
		BuffPtr  += 5;
    1062:	15 96       	adiw	r26, 0x05	; 5
    1064:	41 50       	subi	r20, 0x01	; 1
    1066:	47 ff       	sbrs	r20, 7
    1068:	ea cf       	rjmp	.-44     	; 0x103e <LCD_WriteChar+0x2c>
    106a:	08 95       	ret

0000106c <__vector_22>:
	}
}

ISR(LCD_vect, ISR_NOBLOCK)
{
    106c:	78 94       	sei
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	2f 93       	push	r18
    107a:	3f 93       	push	r19
    107c:	4f 93       	push	r20
    107e:	5f 93       	push	r21
    1080:	6f 93       	push	r22
    1082:	7f 93       	push	r23
    1084:	8f 93       	push	r24
    1086:	9f 93       	push	r25
    1088:	af 93       	push	r26
    108a:	bf 93       	push	r27
    108c:	cf 93       	push	r28
    108e:	ef 93       	push	r30
    1090:	ff 93       	push	r31
	if (ScrollMode)
    1092:	80 91 5d 02 	lds	r24, 0x025D
    1096:	88 23       	and	r24, r24
    1098:	99 f0       	breq	.+38     	; 0x10c0 <__vector_22+0x54>
	{
		if (DelayCount)
    109a:	80 91 5e 02 	lds	r24, 0x025E
    109e:	88 23       	and	r24, r24
    10a0:	21 f0       	breq	.+8      	; 0x10aa <__vector_22+0x3e>
		{
			DelayCount--;
    10a2:	81 50       	subi	r24, 0x01	; 1
    10a4:	80 93 5e 02 	sts	0x025E, r24
    10a8:	0b c0       	rjmp	.+22     	; 0x10c0 <__vector_22+0x54>
		}
		else
		{
			if (!(ScrollCount))
    10aa:	80 91 2b 02 	lds	r24, 0x022B
    10ae:	88 23       	and	r24, r24
    10b0:	21 f4       	brne	.+8      	; 0x10ba <__vector_22+0x4e>
			  UpdateLCD = TRUE;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	80 93 48 02 	sts	0x0248, r24
    10b8:	03 c0       	rjmp	.+6      	; 0x10c0 <__vector_22+0x54>
			else
			  ScrollCount--;
    10ba:	81 50       	subi	r24, 0x01	; 1
    10bc:	80 93 2b 02 	sts	0x022B, r24
		}
	}

	if (UpdateLCD)
    10c0:	80 91 48 02 	lds	r24, 0x0248
    10c4:	88 23       	and	r24, r24
    10c6:	39 f1       	breq	.+78     	; 0x1116 <__vector_22+0xaa>
	{
		for (uint8_t Character = 0; Character < 6; Character++)
    10c8:	c0 e0       	ldi	r28, 0x00	; 0
		{
			uint8_t Byte = (StrStart + Character);
    10ca:	80 91 2c 02 	lds	r24, 0x022C
    10ce:	8c 0f       	add	r24, r28

			if (Byte >= StrEnd)
    10d0:	90 91 2a 02 	lds	r25, 0x022A
    10d4:	e8 2f       	mov	r30, r24
    10d6:	ff 27       	eor	r31, r31
    10d8:	89 17       	cp	r24, r25
    10da:	10 f0       	brcs	.+4      	; 0x10e0 <__vector_22+0x74>
			  Byte = TextBuffer[Byte - StrEnd];
    10dc:	e9 1b       	sub	r30, r25
    10de:	f1 09       	sbc	r31, r1
			else
			  Byte = TextBuffer[Byte];
    10e0:	e3 5d       	subi	r30, 0xD3	; 211
    10e2:	fd 4f       	sbci	r31, 0xFD	; 253
    10e4:	80 81       	ld	r24, Z
			
			LCD_WriteChar(Byte, Character);
    10e6:	6c 2f       	mov	r22, r28
    10e8:	0e 94 09 08 	call	0x1012 <LCD_WriteChar>
    10ec:	cf 5f       	subi	r28, 0xFF	; 255
    10ee:	c6 30       	cpi	r28, 0x06	; 6
    10f0:	60 f3       	brcs	.-40     	; 0x10ca <__vector_22+0x5e>
		}
		
		if (StrStart++ == StrEnd)
    10f2:	80 91 2c 02 	lds	r24, 0x022C
    10f6:	98 2f       	mov	r25, r24
    10f8:	8f 5f       	subi	r24, 0xFF	; 255
    10fa:	80 93 2c 02 	sts	0x022C, r24
    10fe:	80 91 2a 02 	lds	r24, 0x022A
    1102:	98 17       	cp	r25, r24
    1104:	19 f4       	brne	.+6      	; 0x110c <__vector_22+0xa0>
		  StrStart = 1;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	80 93 2c 02 	sts	0x022C, r24
		
		ScrollCount = LCD_SCROLLCOUNT_DEFAULT;
    110c:	83 e0       	ldi	r24, 0x03	; 3
    110e:	80 93 2b 02 	sts	0x022B, r24
		UpdateLCD = FALSE;
    1112:	10 92 48 02 	sts	0x0248, r1
    1116:	ac ee       	ldi	r26, 0xEC	; 236
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e9 e4       	ldi	r30, 0x49	; 73
    111c:	f2 e0       	ldi	r31, 0x02	; 2
    111e:	93 e1       	ldi	r25, 0x13	; 19
	}

	for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++)
	  *(pLCDREG + LCDChar) = SegBuffer[LCDChar];
    1120:	81 91       	ld	r24, Z+
    1122:	8d 93       	st	X+, r24
    1124:	91 50       	subi	r25, 0x01	; 1
    1126:	97 ff       	sbrs	r25, 7
    1128:	fb cf       	rjmp	.-10     	; 0x1120 <__vector_22+0xb4>
    112a:	ff 91       	pop	r31
    112c:	ef 91       	pop	r30
    112e:	cf 91       	pop	r28
    1130:	bf 91       	pop	r27
    1132:	af 91       	pop	r26
    1134:	9f 91       	pop	r25
    1136:	8f 91       	pop	r24
    1138:	7f 91       	pop	r23
    113a:	6f 91       	pop	r22
    113c:	5f 91       	pop	r21
    113e:	4f 91       	pop	r20
    1140:	3f 91       	pop	r19
    1142:	2f 91       	pop	r18
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <USART_Init>:
*****************************************************************************/
void USART_Init(void)
{
    // Set baud rate
    UBRRH = (uint8_t)(USART_BAUDVALUE >> 8);
    114e:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = (uint8_t)(USART_BAUDVALUE);
    1152:	87 e0       	ldi	r24, 0x07	; 7
    1154:	80 93 c4 00 	sts	0x00C4, r24

    // Double speed
	UCSRA = (USART_DOUBLESPEED << U2X);
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	80 93 c0 00 	sts	0x00C0, r24

    // Enable recieve complete interrupt
	UCSRB = (1 << RXCIE);
    115e:	80 e8       	ldi	r24, 0x80	; 128
    1160:	80 93 c1 00 	sts	0x00C1, r24
	 
    // Async. mode, 8N1
    UCSRC = (3 << UCSZ0);
    1164:	86 e0       	ldi	r24, 0x06	; 6
    1166:	80 93 c2 00 	sts	0x00C2, r24
	 
	 // Initalise ringbuffer
	BUFF_InitialiseBuffer();
    116a:	0e 94 5a 0b 	call	0x16b4 <BUFF_InitialiseBuffer>
    116e:	08 95       	ret

00001170 <USART_Tx>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_Tx(const char data)
{
    1170:	98 2f       	mov	r25, r24
    while (!(UCSRA & (1 << UDRE)));
    1172:	80 91 c0 00 	lds	r24, 0x00C0
    1176:	85 ff       	sbrs	r24, 5
    1178:	fc cf       	rjmp	.-8      	; 0x1172 <USART_Tx+0x2>
    UDR = data;
    117a:	90 93 c6 00 	sts	0x00C6, r25
    117e:	08 95       	ret

00001180 <USART_TxString>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_TxString(const char *data)
{
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	ec 01       	movw	r28, r24
	while (*data != '\0')
	  USART_Tx(*data++);
    1186:	88 81       	ld	r24, Y
    1188:	88 23       	and	r24, r24
    118a:	31 f0       	breq	.+12     	; 0x1198 <USART_TxString+0x18>
    118c:	89 91       	ld	r24, Y+
    118e:	0e 94 b8 08 	call	0x1170 <USART_Tx>
    1192:	88 81       	ld	r24, Y
    1194:	88 23       	and	r24, r24
    1196:	d1 f7       	brne	.-12     	; 0x118c <USART_TxString+0xc>
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <USART_Rx>:
}

/*****************************************************************************
*
*   Function name : Usart_Rx
*
*   Returns :       char: byte received
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART
*
*****************************************************************************/
char USART_Rx(void)
{
    while (!(BuffElements) && !(TimeOut)) {};
    119e:	80 91 af 02 	lds	r24, 0x02AF
    11a2:	88 23       	and	r24, r24
    11a4:	21 f4       	brne	.+8      	; 0x11ae <USART_Rx+0x10>
    11a6:	80 91 06 01 	lds	r24, 0x0106
    11aa:	88 23       	and	r24, r24
    11ac:	c1 f3       	breq	.-16     	; 0x119e <USART_Rx>
    return BUFF_GetBuffByte();
    11ae:	0e 94 67 0b 	call	0x16ce <BUFF_GetBuffByte>
}
    11b2:	99 27       	eor	r25, r25
    11b4:	08 95       	ret

000011b6 <SPI_SPIInit>:
// ======================================================================================

void SPI_SPIInit(void)
{
	PRR &= ~(1 << PRSPI);              // Enable the SPI system by clearing the power save register SPI disable bit
    11b6:	80 91 64 00 	lds	r24, 0x0064
    11ba:	8b 7f       	andi	r24, 0xFB	; 251
    11bc:	80 93 64 00 	sts	0x0064, r24

	// Master, Sample falling edge (setup rising), Fosc/2 speed (8Mhz/2 = 4MHz)
	SPSR = (1 << SPI2X);
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	8d bd       	out	0x2d, r24	; 45
	SPCR = ((1 << SPE) | (1 << MSTR) | (1 << CPHA) | (1 << CPOL));
    11c4:	8c e5       	ldi	r24, 0x5C	; 92
    11c6:	8c bd       	out	0x2c, r24	; 44
    11c8:	08 95       	ret

000011ca <SPI_SPITransmit>:
}

uint8_t SPI_SPITransmit(const uint8_t Data)
{
	SPDR = Data;                       // Loading a byte into the register starts the transmission
    11ca:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));    // Wait until transmission completed
    11cc:	0d b4       	in	r0, 0x2d	; 45
    11ce:	07 fe       	sbrs	r0, 7
    11d0:	fd cf       	rjmp	.-6      	; 0x11cc <SPI_SPITransmit+0x2>
	return SPDR;
    11d2:	8e b5       	in	r24, 0x2e	; 46
}
    11d4:	99 27       	eor	r25, r25
    11d6:	08 95       	ret

000011d8 <SPI_SPITransmitWord>:

uint8_t SPI_SPITransmitWord(const uint16_t Data)
{
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	8c 01       	movw	r16, r24
	SPI_SPITransmit((uint8_t)(Data >> 8));
    11de:	81 2f       	mov	r24, r17
    11e0:	99 27       	eor	r25, r25
    11e2:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
	return SPI_SPITransmit((uint8_t)Data);
    11e6:	80 2f       	mov	r24, r16
    11e8:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
}
    11ec:	99 27       	eor	r25, r25
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	08 95       	ret

000011f4 <__vector_17>:
 *  have to stop the timer tick.
 *  For all modes the USIDR contents are stored and flags are updated.
 */
ISR(USI_OVERFLOW_vect, ISR_BLOCK)
{
    11f4:	1f 92       	push	r1
    11f6:	0f 92       	push	r0
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	0f 92       	push	r0
    11fc:	11 24       	eor	r1, r1
    11fe:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	TIMSK0 &= ~(1<<OCIE0A);
    1200:	80 91 6e 00 	lds	r24, 0x006E
    1204:	8d 7f       	andi	r24, 0xFD	; 253
    1206:	80 93 6e 00 	sts	0x006E, r24
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
    120a:	80 e4       	ldi	r24, 0x40	; 64
    120c:	80 93 b9 00 	sts	0x00B9, r24
	TransferComplete = 1;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	80 93 5f 02 	sts	0x025F, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
    1216:	80 91 ba 00 	lds	r24, 0x00BA
    121a:	80 93 60 02 	sts	0x0260, r24
    121e:	8f 91       	pop	r24
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

0000122a <USI_SPISetSpeed>:
}



/*! \brief  Initialize USI as SPI master.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from slave to master mode.
 *  Note that the stored USIDR value is cleared.
 *
 */
void USI_SPIInitMaster(const uint8_t Freq)
{
	// Configure port directions.
 	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN);  // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                       // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                        // Pull-ups.
	USI_OUT_REG &= ~(1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Pull-ups.
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = USI_CONTROL_REG_FLAGS;

	// Set the compare and prescaler for the requested frequency:
	USI_SPISetSpeed(Freq);
	
	// Init driver status register.
	TransferComplete = 0;
	
	storedUSIDR = 0;
}

void USI_SPIOff(void)
{
	USI_DIR_REG &= ~((1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN));                        // Inputs.
	USI_OUT_REG &= ~((1<<USI_DATAIN_PIN)  | (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN)); // Pull-ups.
	DDRF  &= ~(1 << 6);
	PORTF &= ~(1 << 6);
	
	USI_STOPUSITIMER();
}

/*! \brief  Put one byte on bus.
 *
 *  Use this function like you would write to the SPDR register in the native SPI module.
 *  Calling this function in master mode starts a transfer, while in slave mode, a
 *  byte will be prepared for the next transfer initiated by the master device.
 *  If a transfer is in progress, this function will set the write collision flag
 *  and return without altering the data registers.
 *
 *  \returns  0 if a write collision occurred, 1 otherwise.
 */
uint8_t USI_SPITransmit(uint8_t val)
{
	// Reinit flags.
	TransferComplete = 0;

	// Put data in USI data register.
	USIDR = val;
	
	TIFR0  |= (1<<OCF0A);  // Clear compare match flag.
	TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.

	// Clear the timer 0 value
	TCNT0 = 0;

	while (!(TransferComplete));

	return storedUSIDR;
}

uint8_t USI_SPITransmitWord(const uint16_t val )
{
	USI_SPITransmit((uint8_t)(val >> 8));
	return USI_SPITransmit((uint8_t)val);
}

void USI_SPIToggleClock(void)
{
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);	
}

void USI_SPISetSpeed(const uint8_t Freq)
{
    122a:	48 2f       	mov	r20, r24
	for (uint8_t MatchIndex = 0; MatchIndex < USI_PRESET_SPEEDS; MatchIndex++)
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	67 e6       	ldi	r22, 0x67	; 103
    1230:	73 e0       	ldi	r23, 0x03	; 3
    1232:	9b 01       	movw	r18, r22
    1234:	21 50       	subi	r18, 0x01	; 1
    1236:	30 40       	sbci	r19, 0x00	; 0
	{
		if ((pgm_read_byte(&USIPSValues[MatchIndex][0]) == Freq) || (MatchIndex == (USI_PRESET_SPEEDS - 1)))
    1238:	f9 01       	movw	r30, r18
    123a:	84 91       	lpm	r24, Z
    123c:	84 17       	cp	r24, r20
    123e:	11 f0       	breq	.+4      	; 0x1244 <USI_SPISetSpeed+0x1a>
    1240:	93 30       	cpi	r25, 0x03	; 3
    1242:	31 f4       	brne	.+12     	; 0x1250 <USI_SPISetSpeed+0x26>
		{
			// Init Output Compare Register.
			OCR0A = pgm_read_byte(&USIPSValues[MatchIndex][1]);
    1244:	fb 01       	movw	r30, r22
    1246:	84 91       	lpm	r24, Z
    1248:	87 bd       	out	0x27, r24	; 39

			// Enable 'Clear Timer on Compare match' and set prescaler, which starts the timer
			TCCR0A = ((1<<WGM01) | TC0_PS_1);
    124a:	89 e0       	ldi	r24, 0x09	; 9
    124c:	84 bd       	out	0x24, r24	; 36
				
			return;
    124e:	08 95       	ret
    1250:	9f 5f       	subi	r25, 0xFF	; 255
    1252:	2e 5f       	subi	r18, 0xFE	; 254
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	6e 5f       	subi	r22, 0xFE	; 254
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	94 30       	cpi	r25, 0x04	; 4
    125c:	68 f3       	brcs	.-38     	; 0x1238 <USI_SPISetSpeed+0xe>
    125e:	08 95       	ret

00001260 <USI_SPIInitMaster>:
    1260:	9d b1       	in	r25, 0x0d	; 13
    1262:	90 65       	ori	r25, 0x50	; 80
    1264:	9d b9       	out	0x0d, r25	; 13
    1266:	6d 98       	cbi	0x0d, 5	; 13
    1268:	75 9a       	sbi	0x0e, 5	; 14
    126a:	76 98       	cbi	0x0e, 6	; 14
    126c:	9a e5       	ldi	r25, 0x5A	; 90
    126e:	90 93 b8 00 	sts	0x00B8, r25
    1272:	0e 94 15 09 	call	0x122a <USI_SPISetSpeed>
    1276:	10 92 5f 02 	sts	0x025F, r1
    127a:	10 92 60 02 	sts	0x0260, r1
    127e:	08 95       	ret

00001280 <USI_SPIOff>:
    1280:	8d b1       	in	r24, 0x0d	; 13
    1282:	8f 7a       	andi	r24, 0xAF	; 175
    1284:	8d b9       	out	0x0d, r24	; 13
    1286:	8e b1       	in	r24, 0x0e	; 14
    1288:	8f 78       	andi	r24, 0x8F	; 143
    128a:	8e b9       	out	0x0e, r24	; 14
    128c:	86 98       	cbi	0x10, 6	; 16
    128e:	8e 98       	cbi	0x11, 6	; 17
    1290:	14 bc       	out	0x24, r1	; 36
    1292:	08 95       	ret

00001294 <USI_SPITransmit>:
    1294:	10 92 5f 02 	sts	0x025F, r1
    1298:	80 93 ba 00 	sts	0x00BA, r24
    129c:	a9 9a       	sbi	0x15, 1	; 21
    129e:	80 91 6e 00 	lds	r24, 0x006E
    12a2:	82 60       	ori	r24, 0x02	; 2
    12a4:	80 93 6e 00 	sts	0x006E, r24
    12a8:	16 bc       	out	0x26, r1	; 38
    12aa:	80 91 5f 02 	lds	r24, 0x025F
    12ae:	88 23       	and	r24, r24
    12b0:	e1 f3       	breq	.-8      	; 0x12aa <USI_SPITransmit+0x16>
    12b2:	80 91 60 02 	lds	r24, 0x0260
    12b6:	99 27       	eor	r25, r25
    12b8:	08 95       	ret

000012ba <USI_SPITransmitWord>:
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	8c 01       	movw	r16, r24
    12c0:	81 2f       	mov	r24, r17
    12c2:	99 27       	eor	r25, r25
    12c4:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    12c8:	80 2f       	mov	r24, r16
    12ca:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    12ce:	99 27       	eor	r25, r25
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	08 95       	ret

000012d6 <USI_SPIToggleClock>:
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    12dc:	80 91 b8 00 	lds	r24, 0x00B8
    12e0:	81 60       	ori	r24, 0x01	; 1
    12e2:	80 93 b8 00 	sts	0x00B8, r24
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    12ec:	80 91 b8 00 	lds	r24, 0x00B8
    12f0:	81 60       	ori	r24, 0x01	; 1
    12f2:	80 93 b8 00 	sts	0x00B8, r24
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    12fc:	08 95       	ret

000012fe <DF_EnableDataflash>:
	while (DF_BUSY());
}

void DF_EnableDataflash(const uint8_t Enabled)
{
    12fe:	90 91 61 02 	lds	r25, 0x0261
	if (Enabled == TRUE)
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	31 f4       	brne	.+12     	; 0x1312 <DF_EnableDataflash+0x14>
	{
		if (UseExernalDF == TRUE)
    1306:	91 30       	cpi	r25, 0x01	; 1
    1308:	11 f4       	brne	.+4      	; 0x130e <DF_EnableDataflash+0x10>
		  MAIN_ResetCSLine(MAIN_RESETCS_EXTDFACTIVE);
    130a:	82 e0       	ldi	r24, 0x02	; 2
    130c:	05 c0       	rjmp	.+10     	; 0x1318 <DF_EnableDataflash+0x1a>
		else
		  PORTB &= ~(1 << 0);
    130e:	28 98       	cbi	0x05, 0	; 5
    1310:	08 95       	ret
	}
	else
	{
		if (UseExernalDF == TRUE)
    1312:	91 30       	cpi	r25, 0x01	; 1
    1314:	21 f4       	brne	.+8      	; 0x131e <DF_EnableDataflash+0x20>
		  MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE);
    1316:	89 2f       	mov	r24, r25
    1318:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
    131c:	08 95       	ret
		else
		  PORTB |= (1 << 0);
    131e:	28 9a       	sbi	0x05, 0	; 5
    1320:	08 95       	ret

00001322 <DF_ReadBufferByte>:
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	8c 01       	movw	r16, r24
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1334:	e0 91 00 01 	lds	r30, 0x0100
    1338:	f0 91 01 01 	lds	r31, 0x0101
    133c:	84 e5       	ldi	r24, 0x54	; 84
    133e:	09 95       	icall
    1340:	81 2f       	mov	r24, r17
    1342:	99 27       	eor	r25, r25
    1344:	e0 91 00 01 	lds	r30, 0x0100
    1348:	f0 91 01 01 	lds	r31, 0x0101
    134c:	09 95       	icall
    134e:	e0 91 00 01 	lds	r30, 0x0100
    1352:	f0 91 01 01 	lds	r31, 0x0101
    1356:	80 2f       	mov	r24, r16
    1358:	09 95       	icall
    135a:	e0 91 00 01 	lds	r30, 0x0100
    135e:	f0 91 01 01 	lds	r31, 0x0101
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	09 95       	icall
    1366:	e0 91 00 01 	lds	r30, 0x0100
    136a:	f0 91 01 01 	lds	r31, 0x0101
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	09 95       	icall
    1372:	99 27       	eor	r25, r25
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	08 95       	ret

0000137a <DF_ContinuousReadEnable>:
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	8c 01       	movw	r16, r24
    1384:	7b 01       	movw	r14, r22
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1392:	e0 91 00 01 	lds	r30, 0x0100
    1396:	f0 91 01 01 	lds	r31, 0x0101
    139a:	88 e6       	ldi	r24, 0x68	; 104
    139c:	09 95       	icall
    139e:	8a b5       	in	r24, 0x2a	; 42
    13a0:	98 01       	movw	r18, r16
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DF_ContinuousReadEnable+0x2e>
    13a4:	36 95       	lsr	r19
    13a6:	27 95       	ror	r18
    13a8:	8a 95       	dec	r24
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DF_ContinuousReadEnable+0x2a>
    13ac:	c9 01       	movw	r24, r18
    13ae:	e0 91 00 01 	lds	r30, 0x0100
    13b2:	f0 91 01 01 	lds	r31, 0x0101
    13b6:	09 95       	icall
    13b8:	8b b5       	in	r24, 0x2b	; 43
    13ba:	98 01       	movw	r18, r16
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DF_ContinuousReadEnable+0x48>
    13be:	22 0f       	add	r18, r18
    13c0:	33 1f       	adc	r19, r19
    13c2:	8a 95       	dec	r24
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DF_ContinuousReadEnable+0x44>
    13c6:	8f 2d       	mov	r24, r15
    13c8:	99 27       	eor	r25, r25
    13ca:	e0 91 00 01 	lds	r30, 0x0100
    13ce:	f0 91 01 01 	lds	r31, 0x0101
    13d2:	82 0f       	add	r24, r18
    13d4:	09 95       	icall
    13d6:	e0 91 00 01 	lds	r30, 0x0100
    13da:	f0 91 01 01 	lds	r31, 0x0101
    13de:	8e 2d       	mov	r24, r14
    13e0:	09 95       	icall
    13e2:	03 e0       	ldi	r16, 0x03	; 3
    13e4:	e0 91 00 01 	lds	r30, 0x0100
    13e8:	f0 91 01 01 	lds	r31, 0x0101
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	09 95       	icall
    13f0:	01 50       	subi	r16, 0x01	; 1
    13f2:	07 ff       	sbrs	r16, 7
    13f4:	f7 cf       	rjmp	.-18     	; 0x13e4 <DF_ContinuousReadEnable+0x6a>
    13f6:	1f 91       	pop	r17
    13f8:	0f 91       	pop	r16
    13fa:	ff 90       	pop	r15
    13fc:	ef 90       	pop	r14
    13fe:	08 95       	ret

00001400 <DF_BufferWriteEnable>:
    1400:	0f 93       	push	r16
    1402:	1f 93       	push	r17
    1404:	8c 01       	movw	r16, r24
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1412:	e0 91 00 01 	lds	r30, 0x0100
    1416:	f0 91 01 01 	lds	r31, 0x0101
    141a:	84 e8       	ldi	r24, 0x84	; 132
    141c:	09 95       	icall
    141e:	e0 91 00 01 	lds	r30, 0x0100
    1422:	f0 91 01 01 	lds	r31, 0x0101
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	09 95       	icall
    142a:	81 2f       	mov	r24, r17
    142c:	99 27       	eor	r25, r25
    142e:	e0 91 00 01 	lds	r30, 0x0100
    1432:	f0 91 01 01 	lds	r31, 0x0101
    1436:	09 95       	icall
    1438:	e0 91 00 01 	lds	r30, 0x0100
    143c:	f0 91 01 01 	lds	r31, 0x0101
    1440:	80 2f       	mov	r24, r16
    1442:	09 95       	icall
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	08 95       	ret

0000144a <DF_GetChipCharacteristics>:
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1456:	e0 91 00 01 	lds	r30, 0x0100
    145a:	f0 91 01 01 	lds	r31, 0x0101
    145e:	87 e5       	ldi	r24, 0x57	; 87
    1460:	09 95       	icall
    1462:	e0 91 00 01 	lds	r30, 0x0100
    1466:	f0 91 01 01 	lds	r31, 0x0101
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	09 95       	icall
    146e:	68 2f       	mov	r22, r24
    1470:	77 27       	eor	r23, r23
    1472:	cb 01       	movw	r24, r22
    1474:	88 73       	andi	r24, 0x38	; 56
    1476:	90 70       	andi	r25, 0x00	; 0
    1478:	33 e0       	ldi	r19, 0x03	; 3
    147a:	95 95       	asr	r25
    147c:	87 95       	ror	r24
    147e:	3a 95       	dec	r19
    1480:	e1 f7       	brne	.-8      	; 0x147a <DF_GetChipCharacteristics+0x30>
    1482:	99 27       	eor	r25, r25
    1484:	fc 01       	movw	r30, r24
    1486:	e2 56       	subi	r30, 0x62	; 98
    1488:	fc 4f       	sbci	r31, 0xFC	; 252
    148a:	44 91       	lpm	r20, Z
    148c:	40 93 64 02 	sts	0x0264, r20
    1490:	9c 01       	movw	r18, r24
    1492:	28 0f       	add	r18, r24
    1494:	39 1f       	adc	r19, r25
    1496:	f9 01       	movw	r30, r18
    1498:	e2 57       	subi	r30, 0x72	; 114
    149a:	fc 4f       	sbci	r31, 0xFC	; 252
    149c:	85 91       	lpm	r24, Z+
    149e:	94 91       	lpm	r25, Z
    14a0:	90 93 66 02 	sts	0x0266, r25
    14a4:	80 93 65 02 	sts	0x0265, r24
    14a8:	f9 01       	movw	r30, r18
    14aa:	e2 58       	subi	r30, 0x82	; 130
    14ac:	fc 4f       	sbci	r31, 0xFC	; 252
    14ae:	85 91       	lpm	r24, Z+
    14b0:	94 91       	lpm	r25, Z
    14b2:	90 93 68 02 	sts	0x0268, r25
    14b6:	80 93 67 02 	sts	0x0267, r24
    14ba:	80 e1       	ldi	r24, 0x10	; 16
    14bc:	84 1b       	sub	r24, r20
    14be:	8a bd       	out	0x2a, r24	; 42
    14c0:	48 50       	subi	r20, 0x08	; 8
    14c2:	4b bd       	out	0x2b, r20	; 43
    14c4:	cb 01       	movw	r24, r22
    14c6:	08 95       	ret

000014c8 <DF_EraseBlock>:
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	8c 01       	movw	r16, r24
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    14da:	e0 91 00 01 	lds	r30, 0x0100
    14de:	f0 91 01 01 	lds	r31, 0x0101
    14e2:	80 e5       	ldi	r24, 0x50	; 80
    14e4:	09 95       	icall
    14e6:	81 2f       	mov	r24, r17
    14e8:	99 27       	eor	r25, r25
    14ea:	e0 91 00 01 	lds	r30, 0x0100
    14ee:	f0 91 01 01 	lds	r31, 0x0101
    14f2:	09 95       	icall
    14f4:	e0 91 00 01 	lds	r30, 0x0100
    14f8:	f0 91 01 01 	lds	r31, 0x0101
    14fc:	80 2f       	mov	r24, r16
    14fe:	09 95       	icall
    1500:	e0 91 00 01 	lds	r30, 0x0100
    1504:	f0 91 01 01 	lds	r31, 0x0101
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	09 95       	icall
    150c:	0e 94 25 0a 	call	0x144a <DF_GetChipCharacteristics>
    1510:	88 23       	and	r24, r24
    1512:	e4 f7       	brge	.-8      	; 0x150c <DF_EraseBlock+0x44>
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	08 95       	ret

0000151a <DF_CopyFlashPageToBuffer>:
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	8c 01       	movw	r16, r24
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    152c:	e0 91 00 01 	lds	r30, 0x0100
    1530:	f0 91 01 01 	lds	r31, 0x0101
    1534:	83 e5       	ldi	r24, 0x53	; 83
    1536:	09 95       	icall
    1538:	8a b5       	in	r24, 0x2a	; 42
    153a:	98 01       	movw	r18, r16
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <DF_CopyFlashPageToBuffer+0x28>
    153e:	36 95       	lsr	r19
    1540:	27 95       	ror	r18
    1542:	8a 95       	dec	r24
    1544:	e2 f7       	brpl	.-8      	; 0x153e <DF_CopyFlashPageToBuffer+0x24>
    1546:	c9 01       	movw	r24, r18
    1548:	e0 91 00 01 	lds	r30, 0x0100
    154c:	f0 91 01 01 	lds	r31, 0x0101
    1550:	09 95       	icall
    1552:	8b b5       	in	r24, 0x2b	; 43
    1554:	02 c0       	rjmp	.+4      	; 0x155a <DF_CopyFlashPageToBuffer+0x40>
    1556:	00 0f       	add	r16, r16
    1558:	11 1f       	adc	r17, r17
    155a:	8a 95       	dec	r24
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <DF_CopyFlashPageToBuffer+0x3c>
    155e:	c8 01       	movw	r24, r16
    1560:	e0 91 00 01 	lds	r30, 0x0100
    1564:	f0 91 01 01 	lds	r31, 0x0101
    1568:	09 95       	icall
    156a:	e0 91 00 01 	lds	r30, 0x0100
    156e:	f0 91 01 01 	lds	r31, 0x0101
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	09 95       	icall
    1576:	0e 94 25 0a 	call	0x144a <DF_GetChipCharacteristics>
    157a:	88 23       	and	r24, r24
    157c:	e4 f7       	brge	.-8      	; 0x1576 <DF_CopyFlashPageToBuffer+0x5c>
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	08 95       	ret

00001584 <DF_CopyBufferToFlashPage>:
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	8c 01       	movw	r16, r24
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1596:	e0 91 00 01 	lds	r30, 0x0100
    159a:	f0 91 01 01 	lds	r31, 0x0101
    159e:	83 e8       	ldi	r24, 0x83	; 131
    15a0:	09 95       	icall
    15a2:	8a b5       	in	r24, 0x2a	; 42
    15a4:	98 01       	movw	r18, r16
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DF_CopyBufferToFlashPage+0x28>
    15a8:	36 95       	lsr	r19
    15aa:	27 95       	ror	r18
    15ac:	8a 95       	dec	r24
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DF_CopyBufferToFlashPage+0x24>
    15b0:	c9 01       	movw	r24, r18
    15b2:	e0 91 00 01 	lds	r30, 0x0100
    15b6:	f0 91 01 01 	lds	r31, 0x0101
    15ba:	09 95       	icall
    15bc:	8b b5       	in	r24, 0x2b	; 43
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <DF_CopyBufferToFlashPage+0x40>
    15c0:	00 0f       	add	r16, r16
    15c2:	11 1f       	adc	r17, r17
    15c4:	8a 95       	dec	r24
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <DF_CopyBufferToFlashPage+0x3c>
    15c8:	c8 01       	movw	r24, r16
    15ca:	e0 91 00 01 	lds	r30, 0x0100
    15ce:	f0 91 01 01 	lds	r31, 0x0101
    15d2:	09 95       	icall
    15d4:	e0 91 00 01 	lds	r30, 0x0100
    15d8:	f0 91 01 01 	lds	r31, 0x0101
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	09 95       	icall
    15e0:	0e 94 25 0a 	call	0x144a <DF_GetChipCharacteristics>
    15e4:	88 23       	and	r24, r24
    15e6:	e4 f7       	brge	.-8      	; 0x15e0 <DF_CopyBufferToFlashPage+0x5c>
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	08 95       	ret

000015ee <DF_CheckCorrectOnboardChip>:
    15ee:	0e 94 25 0a 	call	0x144a <DF_GetChipCharacteristics>
    15f2:	80 91 67 02 	lds	r24, 0x0267
    15f6:	90 91 68 02 	lds	r25, 0x0268
    15fa:	80 50       	subi	r24, 0x00	; 0
    15fc:	98 40       	sbci	r25, 0x08	; 8
    15fe:	61 f0       	breq	.+24     	; 0x1618 <DF_CheckCorrectOnboardChip+0x2a>
    1600:	80 91 64 00 	lds	r24, 0x0064
    1604:	84 60       	ori	r24, 0x04	; 4
    1606:	80 93 64 00 	sts	0x0064, r24
    160a:	8e e6       	ldi	r24, 0x6E	; 110
    160c:	93 e0       	ldi	r25, 0x03	; 3
    160e:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	08 95       	ret
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	08 95       	ret

0000161e <__vector_13>:

// ======================================================================================

ISR(USART0_RX_vect, ISR_BLOCK)
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
	if (BuffElements == BuffLen)          // Buffer full
    1640:	80 91 af 02 	lds	r24, 0x02AF
    1644:	80 34       	cpi	r24, 0x40	; 64
    1646:	29 f4       	brne	.+10     	; 0x1652 <__vector_13+0x34>
	{
		MAIN_ShowError(PSTR("BUFF OVERFLOW"));
    1648:	86 ea       	ldi	r24, 0xA6	; 166
    164a:	93 e0       	ldi	r25, 0x03	; 3
    164c:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
		return;
    1650:	20 c0       	rjmp	.+64     	; 0x1692 <__vector_13+0x74>
	}
		
	*StoreLoc = UDR;                      // Store the data
    1652:	e0 91 ab 02 	lds	r30, 0x02AB
    1656:	f0 91 ac 02 	lds	r31, 0x02AC
    165a:	80 91 c6 00 	lds	r24, 0x00C6
    165e:	80 83       	st	Z, r24

	StoreLoc++;                           // Increment the IN pointer to the next element
    1660:	40 91 ab 02 	lds	r20, 0x02AB
    1664:	50 91 ac 02 	lds	r21, 0x02AC
    1668:	9a 01       	movw	r18, r20
    166a:	2f 5f       	subi	r18, 0xFF	; 255
    166c:	3f 4f       	sbci	r19, 0xFF	; 255
    166e:	30 93 ac 02 	sts	0x02AC, r19
    1672:	20 93 ab 02 	sts	0x02AB, r18
	BuffElements++;                       // Increment the total elements variable
    1676:	80 91 af 02 	lds	r24, 0x02AF
    167a:	8f 5f       	subi	r24, 0xFF	; 255
    167c:	80 93 af 02 	sts	0x02AF, r24

	if (StoreLoc == (BuffType*)&RingBuffer[BuffLen])
    1680:	2b 5a       	subi	r18, 0xAB	; 171
    1682:	32 40       	sbci	r19, 0x02	; 2
    1684:	31 f4       	brne	.+12     	; 0x1692 <__vector_13+0x74>
		StoreLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    1686:	4f 53       	subi	r20, 0x3F	; 63
    1688:	50 40       	sbci	r21, 0x00	; 0
    168a:	50 93 ac 02 	sts	0x02AC, r21
    168e:	40 93 ab 02 	sts	0x02AB, r20
    1692:	ff 91       	pop	r31
    1694:	ef 91       	pop	r30
    1696:	bf 91       	pop	r27
    1698:	af 91       	pop	r26
    169a:	9f 91       	pop	r25
    169c:	8f 91       	pop	r24
    169e:	7f 91       	pop	r23
    16a0:	6f 91       	pop	r22
    16a2:	5f 91       	pop	r21
    16a4:	4f 91       	pop	r20
    16a6:	3f 91       	pop	r19
    16a8:	2f 91       	pop	r18
    16aa:	0f 90       	pop	r0
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	0f 90       	pop	r0
    16b0:	1f 90       	pop	r1
    16b2:	18 95       	reti

000016b4 <BUFF_InitialiseBuffer>:
}	

// ======================================================================================

void BUFF_InitialiseBuffer(void)
{
	StoreLoc    = (BuffType*)&RingBuffer[0]; // Set up the IN pointer to the start of the buffer
    16b4:	8b e6       	ldi	r24, 0x6B	; 107
    16b6:	92 e0       	ldi	r25, 0x02	; 2
    16b8:	90 93 ac 02 	sts	0x02AC, r25
    16bc:	80 93 ab 02 	sts	0x02AB, r24
	RetrieveLoc = (BuffType*)&RingBuffer[0]; // Set up the OUT pointer to the start of the buffer
    16c0:	90 93 ae 02 	sts	0x02AE, r25
    16c4:	80 93 ad 02 	sts	0x02AD, r24

	BuffElements = 0;                     // Reset the buffer elements counter
    16c8:	10 92 af 02 	sts	0x02AF, r1
    16cc:	08 95       	ret

000016ce <BUFF_GetBuffByte>:
}

BuffType BUFF_GetBuffByte(void)
{
	if (!(BuffElements))                  // No elements in the buffer
    16ce:	80 91 af 02 	lds	r24, 0x02AF
    16d2:	88 23       	and	r24, r24
    16d4:	19 f4       	brne	.+6      	; 0x16dc <BUFF_GetBuffByte+0xe>
		return 0;
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	08 95       	ret

	BuffType RetrievedData = *RetrieveLoc; // Grab the stored byte into a temp variable
    16dc:	20 91 ad 02 	lds	r18, 0x02AD
    16e0:	30 91 ae 02 	lds	r19, 0x02AE
    16e4:	f9 01       	movw	r30, r18
    16e6:	91 91       	ld	r25, Z+

	RetrieveLoc++;                         // Increment the OUT pointer to the next element if flag set
    16e8:	f0 93 ae 02 	sts	0x02AE, r31
    16ec:	e0 93 ad 02 	sts	0x02AD, r30
	BuffElements--;                        // Decrement the total elements variable
    16f0:	80 91 af 02 	lds	r24, 0x02AF
    16f4:	81 50       	subi	r24, 0x01	; 1
    16f6:	80 93 af 02 	sts	0x02AF, r24
	
	if (RetrieveLoc == (BuffType*)&RingBuffer[BuffLen])
    16fa:	eb 5a       	subi	r30, 0xAB	; 171
    16fc:	f2 40       	sbci	r31, 0x02	; 2
    16fe:	31 f4       	brne	.+12     	; 0x170c <BUFF_GetBuffByte+0x3e>
		RetrieveLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    1700:	2f 53       	subi	r18, 0x3F	; 63
    1702:	30 40       	sbci	r19, 0x00	; 0
    1704:	30 93 ae 02 	sts	0x02AE, r19
    1708:	20 93 ad 02 	sts	0x02AD, r18
		
	return RetrievedData;                 // Return the retrieved data
    170c:	89 2f       	mov	r24, r25
    170e:	99 27       	eor	r25, r25
}
    1710:	08 95       	ret

00001712 <__vector_4>:
// ======================================================================================

// Timeout = ((F_CPU / 1024) / (240 * TIMEOUT_TICKSBEFORETIMEOUT)) per second
ISR(TIMER2_COMP_vect, ISR_NOBLOCK)
{
    1712:	78 94       	sei
    1714:	1f 92       	push	r1
    1716:	0f 92       	push	r0
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	0f 92       	push	r0
    171c:	11 24       	eor	r1, r1
    171e:	8f 93       	push	r24
	if (Ticks++ == TIMEOUT_TICKSBEFORETIMEOUT)
    1720:	80 91 07 01 	lds	r24, 0x0107
    1724:	8f 5f       	subi	r24, 0xFF	; 255
    1726:	80 93 07 01 	sts	0x0107, r24
    172a:	80 91 07 01 	lds	r24, 0x0107
    172e:	87 39       	cpi	r24, 0x97	; 151
    1730:	29 f4       	brne	.+10     	; 0x173c <__vector_4+0x2a>
	{
	   Ticks   = 0;
    1732:	10 92 07 01 	sts	0x0107, r1
	   TimeOut = TRUE;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	80 93 06 01 	sts	0x0106, r24
    173c:	8f 91       	pop	r24
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <PD_SetupDFAddressCounters>:
}

void PD_SetupDFAddressCounters(void)
{
	uint32_t StartAddress = CurrAddress;
    1748:	20 91 09 01 	lds	r18, 0x0109
    174c:	30 91 0a 01 	lds	r19, 0x010A
    1750:	40 91 0b 01 	lds	r20, 0x010B
    1754:	50 91 0c 01 	lds	r21, 0x010C

	CurrPageAddress = 0;
    1758:	10 92 6a 02 	sts	0x026A, r1
    175c:	10 92 69 02 	sts	0x0269, r1

	while (StartAddress > DataflashInfo.PageSize)      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DataflashInfo.PageSize;         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    1760:	80 91 65 02 	lds	r24, 0x0265
    1764:	90 91 66 02 	lds	r25, 0x0266
    1768:	aa 27       	eor	r26, r26
    176a:	bb 27       	eor	r27, r27
    176c:	82 17       	cp	r24, r18
    176e:	93 07       	cpc	r25, r19
    1770:	a4 07       	cpc	r26, r20
    1772:	b5 07       	cpc	r27, r21
    1774:	88 f4       	brcc	.+34     	; 0x1798 <PD_SetupDFAddressCounters+0x50>
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	28 1b       	sub	r18, r24
    177c:	39 0b       	sbc	r19, r25
    177e:	4a 0b       	sbc	r20, r26
    1780:	5b 0b       	sbc	r21, r27
    1782:	6f 5f       	subi	r22, 0xFF	; 255
    1784:	7f 4f       	sbci	r23, 0xFF	; 255
    1786:	82 17       	cp	r24, r18
    1788:	93 07       	cpc	r25, r19
    178a:	a4 07       	cpc	r26, r20
    178c:	b5 07       	cpc	r27, r21
    178e:	a8 f3       	brcs	.-22     	; 0x177a <PD_SetupDFAddressCounters+0x32>
    1790:	70 93 6a 02 	sts	0x026A, r23
    1794:	60 93 69 02 	sts	0x0269, r22
	}
	
	CurrBuffByte = (uint16_t)StartAddress;              // The buffer byte is the remainder
    1798:	30 93 63 02 	sts	0x0263, r19
    179c:	20 93 62 02 	sts	0x0262, r18
    17a0:	08 95       	ret

000017a2 <PD_StoreDataflashByte>:
}

void PD_StoreDataflashByte(const uint8_t Data)
{
    17a2:	cf 93       	push	r28
    17a4:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DataflashInfo.PageSize)
    17a6:	20 91 62 02 	lds	r18, 0x0262
    17aa:	30 91 63 02 	lds	r19, 0x0263
    17ae:	80 91 65 02 	lds	r24, 0x0265
    17b2:	90 91 66 02 	lds	r25, 0x0266
    17b6:	28 17       	cp	r18, r24
    17b8:	39 07       	cpc	r19, r25
    17ba:	a9 f4       	brne	.+42     	; 0x17e6 <PD_StoreDataflashByte+0x44>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    17bc:	80 91 69 02 	lds	r24, 0x0269
    17c0:	90 91 6a 02 	lds	r25, 0x026A
    17c4:	9c 01       	movw	r18, r24
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	90 93 6a 02 	sts	0x026A, r25
    17cc:	80 93 69 02 	sts	0x0269, r24
    17d0:	c9 01       	movw	r24, r18
    17d2:	0e 94 c2 0a 	call	0x1584 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 00 0a 	call	0x1400 <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    17de:	10 92 63 02 	sts	0x0263, r1
    17e2:	10 92 62 02 	sts	0x0262, r1
	}
	
	USI_SPITransmit(Data);                                 // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    17e6:	8c 2f       	mov	r24, r28
    17e8:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
	CurrBuffByte++;
    17ec:	80 91 62 02 	lds	r24, 0x0262
    17f0:	90 91 63 02 	lds	r25, 0x0263
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	90 93 63 02 	sts	0x0263, r25
    17fa:	80 93 62 02 	sts	0x0262, r24
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <PD_InterpretAVRISPPacket>:
    1802:	df 92       	push	r13
    1804:	ef 92       	push	r14
    1806:	ff 92       	push	r15
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	dd 24       	eor	r13, r13
    1812:	80 91 12 01 	lds	r24, 0x0112
    1816:	99 27       	eor	r25, r25
    1818:	86 31       	cpi	r24, 0x16	; 22
    181a:	91 05       	cpc	r25, r1
    181c:	09 f4       	brne	.+2      	; 0x1820 <PD_InterpretAVRISPPacket+0x1e>
    181e:	00 c1       	rjmp	.+512    	; 0x1a20 <PD_InterpretAVRISPPacket+0x21e>
    1820:	87 31       	cpi	r24, 0x17	; 23
    1822:	91 05       	cpc	r25, r1
    1824:	b4 f4       	brge	.+44     	; 0x1852 <PD_InterpretAVRISPPacket+0x50>
    1826:	82 31       	cpi	r24, 0x12	; 18
    1828:	91 05       	cpc	r25, r1
    182a:	09 f4       	brne	.+2      	; 0x182e <PD_InterpretAVRISPPacket+0x2c>
    182c:	6f c0       	rjmp	.+222    	; 0x190c <PD_InterpretAVRISPPacket+0x10a>
    182e:	83 31       	cpi	r24, 0x13	; 19
    1830:	91 05       	cpc	r25, r1
    1832:	3c f4       	brge	.+14     	; 0x1842 <PD_InterpretAVRISPPacket+0x40>
    1834:	80 31       	cpi	r24, 0x10	; 16
    1836:	91 05       	cpc	r25, r1
    1838:	31 f1       	breq	.+76     	; 0x1886 <PD_InterpretAVRISPPacket+0x84>
    183a:	41 97       	sbiw	r24, 0x11	; 17
    183c:	09 f4       	brne	.+2      	; 0x1840 <PD_InterpretAVRISPPacket+0x3e>
    183e:	46 c0       	rjmp	.+140    	; 0x18cc <PD_InterpretAVRISPPacket+0xca>
    1840:	40 c1       	rjmp	.+640    	; 0x1ac2 <PD_InterpretAVRISPPacket+0x2c0>
    1842:	84 31       	cpi	r24, 0x14	; 20
    1844:	91 05       	cpc	r25, r1
    1846:	09 f4       	brne	.+2      	; 0x184a <PD_InterpretAVRISPPacket+0x48>
    1848:	8a c0       	rjmp	.+276    	; 0x195e <PD_InterpretAVRISPPacket+0x15c>
    184a:	45 97       	sbiw	r24, 0x15	; 21
    184c:	0c f0       	brlt	.+2      	; 0x1850 <PD_InterpretAVRISPPacket+0x4e>
    184e:	af c0       	rjmp	.+350    	; 0x19ae <PD_InterpretAVRISPPacket+0x1ac>
    1850:	7f c0       	rjmp	.+254    	; 0x1950 <PD_InterpretAVRISPPacket+0x14e>
    1852:	89 31       	cpi	r24, 0x19	; 25
    1854:	91 05       	cpc	r25, r1
    1856:	09 f4       	brne	.+2      	; 0x185a <PD_InterpretAVRISPPacket+0x58>
    1858:	70 c0       	rjmp	.+224    	; 0x193a <PD_InterpretAVRISPPacket+0x138>
    185a:	8a 31       	cpi	r24, 0x1A	; 26
    185c:	91 05       	cpc	r25, r1
    185e:	44 f4       	brge	.+16     	; 0x1870 <PD_InterpretAVRISPPacket+0x6e>
    1860:	87 31       	cpi	r24, 0x17	; 23
    1862:	91 05       	cpc	r25, r1
    1864:	09 f4       	brne	.+2      	; 0x1868 <PD_InterpretAVRISPPacket+0x66>
    1866:	69 c0       	rjmp	.+210    	; 0x193a <PD_InterpretAVRISPPacket+0x138>
    1868:	48 97       	sbiw	r24, 0x18	; 24
    186a:	09 f4       	brne	.+2      	; 0x186e <PD_InterpretAVRISPPacket+0x6c>
    186c:	58 c0       	rjmp	.+176    	; 0x191e <PD_InterpretAVRISPPacket+0x11c>
    186e:	29 c1       	rjmp	.+594    	; 0x1ac2 <PD_InterpretAVRISPPacket+0x2c0>
    1870:	8b 31       	cpi	r24, 0x1B	; 27
    1872:	91 05       	cpc	r25, r1
    1874:	e9 f1       	breq	.+122    	; 0x18f0 <PD_InterpretAVRISPPacket+0xee>
    1876:	8b 31       	cpi	r24, 0x1B	; 27
    1878:	91 05       	cpc	r25, r1
    187a:	0c f4       	brge	.+2      	; 0x187e <PD_InterpretAVRISPPacket+0x7c>
    187c:	50 c0       	rjmp	.+160    	; 0x191e <PD_InterpretAVRISPPacket+0x11c>
    187e:	4c 97       	sbiw	r24, 0x1c	; 28
    1880:	09 f4       	brne	.+2      	; 0x1884 <PD_InterpretAVRISPPacket+0x82>
    1882:	4d c0       	rjmp	.+154    	; 0x191e <PD_InterpretAVRISPPacket+0x11c>
    1884:	1e c1       	rjmp	.+572    	; 0x1ac2 <PD_InterpretAVRISPPacket+0x2c0>
    1886:	82 e0       	ldi	r24, 0x02	; 2
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	90 93 0f 01 	sts	0x010F, r25
    188e:	80 93 0e 01 	sts	0x010E, r24
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    1898:	0e 94 25 0a 	call	0x144a <DF_GetChipCharacteristics>
    189c:	80 91 64 02 	lds	r24, 0x0264
    18a0:	88 23       	and	r24, r24
    18a2:	59 f0       	breq	.+22     	; 0x18ba <PD_InterpretAVRISPPacket+0xb8>
    18a4:	84 eb       	ldi	r24, 0xB4	; 180
    18a6:	93 e0       	ldi	r25, 0x03	; 3
    18a8:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	80 93 0d 01 	sts	0x010D, r24
    18b2:	81 b3       	in	r24, 0x11	; 17
    18b4:	8f 7c       	andi	r24, 0xCF	; 207
    18b6:	80 62       	ori	r24, 0x20	; 32
    18b8:	17 c0       	rjmp	.+46     	; 0x18e8 <PD_InterpretAVRISPPacket+0xe6>
    18ba:	8e e6       	ldi	r24, 0x6E	; 110
    18bc:	93 e0       	ldi	r25, 0x03	; 3
    18be:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
    18c2:	8d 2d       	mov	r24, r13
    18c4:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    18c8:	80 ec       	ldi	r24, 0xC0	; 192
    18ca:	02 c1       	rjmp	.+516    	; 0x1ad0 <PD_InterpretAVRISPPacket+0x2ce>
    18cc:	82 e0       	ldi	r24, 0x02	; 2
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	90 93 0f 01 	sts	0x010F, r25
    18d4:	80 93 0e 01 	sts	0x010E, r24
    18d8:	d0 92 0d 01 	sts	0x010D, r13
    18dc:	8d 2d       	mov	r24, r13
    18de:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    18e2:	81 b3       	in	r24, 0x11	; 17
    18e4:	8f 7c       	andi	r24, 0xCF	; 207
    18e6:	80 61       	ori	r24, 0x10	; 16
    18e8:	81 bb       	out	0x11, r24	; 17
    18ea:	d0 92 13 01 	sts	0x0113, r13
    18ee:	f2 c0       	rjmp	.+484    	; 0x1ad4 <PD_InterpretAVRISPPacket+0x2d2>
    18f0:	84 e0       	ldi	r24, 0x04	; 4
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	90 93 0f 01 	sts	0x010F, r25
    18f8:	80 93 0e 01 	sts	0x010E, r24
    18fc:	d0 92 13 01 	sts	0x0113, r13
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	80 93 14 01 	sts	0x0114, r24
    1906:	d0 92 15 01 	sts	0x0115, r13
    190a:	e4 c0       	rjmp	.+456    	; 0x1ad4 <PD_InterpretAVRISPPacket+0x2d2>
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	90 93 0f 01 	sts	0x010F, r25
    1914:	80 93 0e 01 	sts	0x010E, r24
    1918:	e1 e0       	ldi	r30, 0x01	; 1
    191a:	de 2e       	mov	r13, r30
    191c:	7e c0       	rjmp	.+252    	; 0x1a1a <PD_InterpretAVRISPPacket+0x218>
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	90 93 0f 01 	sts	0x010F, r25
    1926:	80 93 0e 01 	sts	0x010E, r24
    192a:	10 92 13 01 	sts	0x0113, r1
    192e:	8f ef       	ldi	r24, 0xFF	; 255
    1930:	80 93 14 01 	sts	0x0114, r24
    1934:	10 92 15 01 	sts	0x0115, r1
    1938:	cd c0       	rjmp	.+410    	; 0x1ad4 <PD_InterpretAVRISPPacket+0x2d2>
    193a:	83 e0       	ldi	r24, 0x03	; 3
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	90 93 0f 01 	sts	0x010F, r25
    1942:	80 93 0e 01 	sts	0x010E, r24
    1946:	10 92 13 01 	sts	0x0113, r1
    194a:	10 92 14 01 	sts	0x0114, r1
    194e:	c2 c0       	rjmp	.+388    	; 0x1ad4 <PD_InterpretAVRISPPacket+0x2d2>
    1950:	82 e0       	ldi	r24, 0x02	; 2
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	90 93 0f 01 	sts	0x010F, r25
    1958:	80 93 0e 01 	sts	0x010E, r24
    195c:	5e c0       	rjmp	.+188    	; 0x1a1a <PD_InterpretAVRISPPacket+0x218>
    195e:	80 91 13 01 	lds	r24, 0x0113
    1962:	99 27       	eor	r25, r25
    1964:	98 2f       	mov	r25, r24
    1966:	88 27       	eor	r24, r24
    1968:	20 91 14 01 	lds	r18, 0x0114
    196c:	33 27       	eor	r19, r19
    196e:	82 2b       	or	r24, r18
    1970:	93 2b       	or	r25, r19
    1972:	03 96       	adiw	r24, 0x03	; 3
    1974:	90 93 0f 01 	sts	0x010F, r25
    1978:	80 93 0e 01 	sts	0x010E, r24
    197c:	21 e0       	ldi	r18, 0x01	; 1
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	02 97       	sbiw	r24, 0x02	; 2
    1982:	28 17       	cp	r18, r24
    1984:	39 07       	cpc	r19, r25
    1986:	48 f4       	brcc	.+18     	; 0x199a <PD_InterpretAVRISPPacket+0x198>
    1988:	4f ef       	ldi	r20, 0xFF	; 255
    198a:	e3 e1       	ldi	r30, 0x13	; 19
    198c:	f1 e0       	ldi	r31, 0x01	; 1
    198e:	41 93       	st	Z+, r20
    1990:	2f 5f       	subi	r18, 0xFF	; 255
    1992:	3f 4f       	sbci	r19, 0xFF	; 255
    1994:	28 17       	cp	r18, r24
    1996:	39 07       	cpc	r19, r25
    1998:	d0 f3       	brcs	.-12     	; 0x198e <PD_InterpretAVRISPPacket+0x18c>
    199a:	10 92 13 01 	sts	0x0113, r1
    199e:	e0 91 0e 01 	lds	r30, 0x010E
    19a2:	f0 91 0f 01 	lds	r31, 0x010F
    19a6:	ef 5e       	subi	r30, 0xEF	; 239
    19a8:	fe 4f       	sbci	r31, 0xFE	; 254
    19aa:	10 82       	st	Z, r1
    19ac:	93 c0       	rjmp	.+294    	; 0x1ad4 <PD_InterpretAVRISPPacket+0x2d2>
    19ae:	0e 94 a4 0b 	call	0x1748 <PD_SetupDFAddressCounters>
    19b2:	80 91 69 02 	lds	r24, 0x0269
    19b6:	90 91 6a 02 	lds	r25, 0x026A
    19ba:	0e 94 8d 0a 	call	0x151a <DF_CopyFlashPageToBuffer>
    19be:	80 91 62 02 	lds	r24, 0x0262
    19c2:	90 91 63 02 	lds	r25, 0x0263
    19c6:	0e 94 00 0a 	call	0x1400 <DF_BufferWriteEnable>
    19ca:	80 91 13 01 	lds	r24, 0x0113
    19ce:	99 27       	eor	r25, r25
    19d0:	d8 2f       	mov	r29, r24
    19d2:	cc 27       	eor	r28, r28
    19d4:	80 91 14 01 	lds	r24, 0x0114
    19d8:	99 27       	eor	r25, r25
    19da:	c8 2b       	or	r28, r24
    19dc:	d9 2b       	or	r29, r25
    19de:	00 e0       	ldi	r16, 0x00	; 0
    19e0:	10 e0       	ldi	r17, 0x00	; 0
    19e2:	0c 17       	cp	r16, r28
    19e4:	1d 07       	cpc	r17, r29
    19e6:	c8 f4       	brcc	.+50     	; 0x1a1a <PD_InterpretAVRISPPacket+0x218>
    19e8:	5c e1       	ldi	r21, 0x1C	; 28
    19ea:	e5 2e       	mov	r14, r21
    19ec:	51 e0       	ldi	r21, 0x01	; 1
    19ee:	f5 2e       	mov	r15, r21
    19f0:	f7 01       	movw	r30, r14
    19f2:	81 91       	ld	r24, Z+
    19f4:	7f 01       	movw	r14, r30
    19f6:	0e 94 d1 0b 	call	0x17a2 <PD_StoreDataflashByte>
    19fa:	80 91 62 02 	lds	r24, 0x0262
    19fe:	90 91 63 02 	lds	r25, 0x0263
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	90 93 63 02 	sts	0x0263, r25
    1a08:	80 93 62 02 	sts	0x0262, r24
    1a0c:	0e 94 96 0e 	call	0x1d2c <V2P_IncrementCurrAddress>
    1a10:	0f 5f       	subi	r16, 0xFF	; 255
    1a12:	1f 4f       	sbci	r17, 0xFF	; 255
    1a14:	0c 17       	cp	r16, r28
    1a16:	1d 07       	cpc	r17, r29
    1a18:	58 f3       	brcs	.-42     	; 0x19f0 <PD_InterpretAVRISPPacket+0x1ee>
    1a1a:	10 92 13 01 	sts	0x0113, r1
    1a1e:	5a c0       	rjmp	.+180    	; 0x1ad4 <PD_InterpretAVRISPPacket+0x2d2>
    1a20:	0e 94 a4 0b 	call	0x1748 <PD_SetupDFAddressCounters>
    1a24:	80 91 69 02 	lds	r24, 0x0269
    1a28:	90 91 6a 02 	lds	r25, 0x026A
    1a2c:	0e 94 8d 0a 	call	0x151a <DF_CopyFlashPageToBuffer>
    1a30:	80 91 13 01 	lds	r24, 0x0113
    1a34:	99 27       	eor	r25, r25
    1a36:	d8 2f       	mov	r29, r24
    1a38:	cc 27       	eor	r28, r28
    1a3a:	80 91 14 01 	lds	r24, 0x0114
    1a3e:	99 27       	eor	r25, r25
    1a40:	c8 2b       	or	r28, r24
    1a42:	d9 2b       	or	r29, r25
    1a44:	00 e0       	ldi	r16, 0x00	; 0
    1a46:	10 e0       	ldi	r17, 0x00	; 0
    1a48:	0c 17       	cp	r16, r28
    1a4a:	1d 07       	cpc	r17, r29
    1a4c:	70 f5       	brcc	.+92     	; 0x1aaa <PD_InterpretAVRISPPacket+0x2a8>
    1a4e:	34 e1       	ldi	r19, 0x14	; 20
    1a50:	e3 2e       	mov	r14, r19
    1a52:	31 e0       	ldi	r19, 0x01	; 1
    1a54:	f3 2e       	mov	r15, r19
    1a56:	20 91 62 02 	lds	r18, 0x0262
    1a5a:	30 91 63 02 	lds	r19, 0x0263
    1a5e:	80 91 65 02 	lds	r24, 0x0265
    1a62:	90 91 66 02 	lds	r25, 0x0266
    1a66:	28 17       	cp	r18, r24
    1a68:	39 07       	cpc	r19, r25
    1a6a:	41 f4       	brne	.+16     	; 0x1a7c <PD_InterpretAVRISPPacket+0x27a>
    1a6c:	0e 94 a4 0b 	call	0x1748 <PD_SetupDFAddressCounters>
    1a70:	80 91 69 02 	lds	r24, 0x0269
    1a74:	90 91 6a 02 	lds	r25, 0x026A
    1a78:	0e 94 8d 0a 	call	0x151a <DF_CopyFlashPageToBuffer>
    1a7c:	80 91 62 02 	lds	r24, 0x0262
    1a80:	90 91 63 02 	lds	r25, 0x0263
    1a84:	9c 01       	movw	r18, r24
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	90 93 63 02 	sts	0x0263, r25
    1a8c:	80 93 62 02 	sts	0x0262, r24
    1a90:	c9 01       	movw	r24, r18
    1a92:	0e 94 91 09 	call	0x1322 <DF_ReadBufferByte>
    1a96:	f7 01       	movw	r30, r14
    1a98:	81 93       	st	Z+, r24
    1a9a:	7f 01       	movw	r14, r30
    1a9c:	0e 94 96 0e 	call	0x1d2c <V2P_IncrementCurrAddress>
    1aa0:	0f 5f       	subi	r16, 0xFF	; 255
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	0c 17       	cp	r16, r28
    1aa6:	1d 07       	cpc	r17, r29
    1aa8:	b0 f2       	brcs	.-84     	; 0x1a56 <PD_InterpretAVRISPPacket+0x254>
    1aaa:	23 96       	adiw	r28, 0x03	; 3
    1aac:	d0 93 0f 01 	sts	0x010F, r29
    1ab0:	c0 93 0e 01 	sts	0x010E, r28
    1ab4:	23 97       	sbiw	r28, 0x03	; 3
    1ab6:	10 92 13 01 	sts	0x0113, r1
    1aba:	ce 5e       	subi	r28, 0xEE	; 238
    1abc:	de 4f       	sbci	r29, 0xFE	; 254
    1abe:	1a 82       	std	Y+2, r1	; 0x02
    1ac0:	09 c0       	rjmp	.+18     	; 0x1ad4 <PD_InterpretAVRISPPacket+0x2d2>
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	90 93 0f 01 	sts	0x010F, r25
    1aca:	80 93 0e 01 	sts	0x010E, r24
    1ace:	89 ec       	ldi	r24, 0xC9	; 201
    1ad0:	80 93 13 01 	sts	0x0113, r24
    1ad4:	0e 94 b2 0d 	call	0x1b64 <V2P_SendPacket>
    1ad8:	dd 20       	and	r13, r13
    1ada:	d9 f0       	breq	.+54     	; 0x1b12 <PD_InterpretAVRISPPacket+0x310>
    1adc:	85 e2       	ldi	r24, 0x25	; 37
    1ade:	92 e0       	ldi	r25, 0x02	; 2
    1ae0:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
    1ae4:	c0 e0       	ldi	r28, 0x00	; 0
    1ae6:	d0 e0       	ldi	r29, 0x00	; 0
    1ae8:	80 91 67 02 	lds	r24, 0x0267
    1aec:	90 91 68 02 	lds	r25, 0x0268
    1af0:	23 e0       	ldi	r18, 0x03	; 3
    1af2:	96 95       	lsr	r25
    1af4:	87 95       	ror	r24
    1af6:	2a 95       	dec	r18
    1af8:	e1 f7       	brne	.-8      	; 0x1af2 <PD_InterpretAVRISPPacket+0x2f0>
    1afa:	c8 17       	cp	r28, r24
    1afc:	d9 07       	cpc	r29, r25
    1afe:	28 f4       	brcc	.+10     	; 0x1b0a <PD_InterpretAVRISPPacket+0x308>
    1b00:	ce 01       	movw	r24, r28
    1b02:	0e 94 64 0a 	call	0x14c8 <DF_EraseBlock>
    1b06:	21 96       	adiw	r28, 0x01	; 1
    1b08:	ef cf       	rjmp	.-34     	; 0x1ae8 <PD_InterpretAVRISPPacket+0x2e6>
    1b0a:	84 eb       	ldi	r24, 0xB4	; 180
    1b0c:	93 e0       	ldi	r25, 0x03	; 3
    1b0e:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	ff 90       	pop	r15
    1b1c:	ef 90       	pop	r14
    1b1e:	df 90       	pop	r13
    1b20:	08 95       	ret

00001b22 <V2P_GetChecksum>:
	
	/* Checksum for the V2 protocol is comprised of an XOR of all the packet 
      bytes, including the start, sequence number, size and token bytes.    */
	
	CheckSumByte  = MESSAGE_START;
    1b22:	6b e1       	ldi	r22, 0x1B	; 27
	CheckSumByte ^= SequenceNum;
    1b24:	80 91 10 01 	lds	r24, 0x0110
    1b28:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize >> 8);
    1b2a:	20 91 0e 01 	lds	r18, 0x010E
    1b2e:	30 91 0f 01 	lds	r19, 0x010F
    1b32:	83 2f       	mov	r24, r19
    1b34:	99 27       	eor	r25, r25
    1b36:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize);
    1b38:	80 91 0e 01 	lds	r24, 0x010E
    1b3c:	68 27       	eor	r22, r24
	CheckSumByte ^= TOKEN;
    1b3e:	8e e0       	ldi	r24, 0x0E	; 14
    1b40:	68 27       	eor	r22, r24
	
	for (uint16_t CByteIndex = 0; CByteIndex < MessageSize; CByteIndex++)
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	42 17       	cp	r20, r18
    1b48:	53 07       	cpc	r21, r19
    1b4a:	48 f4       	brcc	.+18     	; 0x1b5e <V2P_GetChecksum+0x3c>
    1b4c:	e2 e1       	ldi	r30, 0x12	; 18
    1b4e:	f1 e0       	ldi	r31, 0x01	; 1
	   CheckSumByte ^= PacketBytes[CByteIndex];
    1b50:	81 91       	ld	r24, Z+
    1b52:	68 27       	eor	r22, r24
    1b54:	4f 5f       	subi	r20, 0xFF	; 255
    1b56:	5f 4f       	sbci	r21, 0xFF	; 255
    1b58:	42 17       	cp	r20, r18
    1b5a:	53 07       	cpc	r21, r19
    1b5c:	c8 f3       	brcs	.-14     	; 0x1b50 <V2P_GetChecksum+0x2e>

	return CheckSumByte;
}
    1b5e:	86 2f       	mov	r24, r22
    1b60:	99 27       	eor	r25, r25
    1b62:	08 95       	ret

00001b64 <V2P_SendPacket>:
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	8b e1       	ldi	r24, 0x1B	; 27
    1b6e:	0e 94 b8 08 	call	0x1170 <USART_Tx>
    1b72:	80 91 10 01 	lds	r24, 0x0110
    1b76:	0e 94 b8 08 	call	0x1170 <USART_Tx>
    1b7a:	80 91 0f 01 	lds	r24, 0x010F
    1b7e:	0e 94 b8 08 	call	0x1170 <USART_Tx>
    1b82:	80 91 0e 01 	lds	r24, 0x010E
    1b86:	0e 94 b8 08 	call	0x1170 <USART_Tx>
    1b8a:	8e e0       	ldi	r24, 0x0E	; 14
    1b8c:	0e 94 b8 08 	call	0x1170 <USART_Tx>
    1b90:	c0 e0       	ldi	r28, 0x00	; 0
    1b92:	d0 e0       	ldi	r29, 0x00	; 0
    1b94:	80 91 0e 01 	lds	r24, 0x010E
    1b98:	90 91 0f 01 	lds	r25, 0x010F
    1b9c:	c8 17       	cp	r28, r24
    1b9e:	d9 07       	cpc	r29, r25
    1ba0:	78 f4       	brcc	.+30     	; 0x1bc0 <V2P_SendPacket+0x5c>
    1ba2:	02 e1       	ldi	r16, 0x12	; 18
    1ba4:	11 e0       	ldi	r17, 0x01	; 1
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	81 91       	ld	r24, Z+
    1baa:	8f 01       	movw	r16, r30
    1bac:	0e 94 b8 08 	call	0x1170 <USART_Tx>
    1bb0:	21 96       	adiw	r28, 0x01	; 1
    1bb2:	80 91 0e 01 	lds	r24, 0x010E
    1bb6:	90 91 0f 01 	lds	r25, 0x010F
    1bba:	c8 17       	cp	r28, r24
    1bbc:	d9 07       	cpc	r29, r25
    1bbe:	98 f3       	brcs	.-26     	; 0x1ba6 <V2P_SendPacket+0x42>
    1bc0:	0e 94 91 0d 	call	0x1b22 <V2P_GetChecksum>
    1bc4:	0e 94 b8 08 	call	0x1170 <USART_Tx>
    1bc8:	80 91 10 01 	lds	r24, 0x0110
    1bcc:	90 91 11 01 	lds	r25, 0x0111
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	90 93 11 01 	sts	0x0111, r25
    1bd6:	80 93 10 01 	sts	0x0110, r24
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	08 95       	ret

00001be4 <V2P_GetSetParamater>:

void V2P_GetSetParamater(void)
{
	uint8_t Param_Name = PacketBytes[1];    // Save the parameter number
    1be4:	20 91 13 01 	lds	r18, 0x0113

	MessageSize = 3;                        // Set the default response message size to 3 bytes     
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	90 93 0f 01 	sts	0x010F, r25
    1bf0:	80 93 0e 01 	sts	0x010E, r24
	PacketBytes[1] = STATUS_CMD_OK;         // Set the default response to OK
    1bf4:	10 92 13 01 	sts	0x0113, r1

	switch (Param_Name)                    // Switch based on the recieved parameter byte
    1bf8:	33 27       	eor	r19, r19
    1bfa:	22 39       	cpi	r18, 0x92	; 146
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	69 f1       	breq	.+90     	; 0x1c5a <V2P_GetSetParamater+0x76>
    1c00:	23 39       	cpi	r18, 0x93	; 147
    1c02:	31 05       	cpc	r19, r1
    1c04:	8c f4       	brge	.+34     	; 0x1c28 <V2P_GetSetParamater+0x44>
    1c06:	21 38       	cpi	r18, 0x81	; 129
    1c08:	31 05       	cpc	r19, r1
    1c0a:	19 f1       	breq	.+70     	; 0x1c52 <V2P_GetSetParamater+0x6e>
    1c0c:	22 38       	cpi	r18, 0x82	; 130
    1c0e:	31 05       	cpc	r19, r1
    1c10:	24 f4       	brge	.+8      	; 0x1c1a <V2P_GetSetParamater+0x36>
    1c12:	20 38       	cpi	r18, 0x80	; 128
    1c14:	31 05       	cpc	r19, r1
    1c16:	d9 f0       	breq	.+54     	; 0x1c4e <V2P_GetSetParamater+0x6a>
    1c18:	7d c0       	rjmp	.+250    	; 0x1d14 <V2P_GetSetParamater+0x130>
    1c1a:	20 39       	cpi	r18, 0x90	; 144
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	d9 f0       	breq	.+54     	; 0x1c56 <V2P_GetSetParamater+0x72>
    1c20:	21 39       	cpi	r18, 0x91	; 145
    1c22:	31 05       	cpc	r19, r1
    1c24:	c1 f0       	breq	.+48     	; 0x1c56 <V2P_GetSetParamater+0x72>
    1c26:	76 c0       	rjmp	.+236    	; 0x1d14 <V2P_GetSetParamater+0x130>
    1c28:	28 39       	cpi	r18, 0x98	; 152
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	a1 f1       	breq	.+104    	; 0x1c96 <V2P_GetSetParamater+0xb2>
    1c2e:	29 39       	cpi	r18, 0x99	; 153
    1c30:	31 05       	cpc	r19, r1
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <V2P_GetSetParamater+0x5a>
    1c34:	26 39       	cpi	r18, 0x96	; 150
    1c36:	31 05       	cpc	r19, r1
    1c38:	0c f4       	brge	.+2      	; 0x1c3c <V2P_GetSetParamater+0x58>
    1c3a:	6c c0       	rjmp	.+216    	; 0x1d14 <V2P_GetSetParamater+0x130>
    1c3c:	5d c0       	rjmp	.+186    	; 0x1cf8 <V2P_GetSetParamater+0x114>
    1c3e:	2e 39       	cpi	r18, 0x9E	; 158
    1c40:	31 05       	cpc	r19, r1
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <V2P_GetSetParamater+0x62>
    1c44:	3e c0       	rjmp	.+124    	; 0x1cc2 <V2P_GetSetParamater+0xde>
    1c46:	2f 39       	cpi	r18, 0x9F	; 159
    1c48:	31 05       	cpc	r19, r1
    1c4a:	99 f0       	breq	.+38     	; 0x1c72 <V2P_GetSetParamater+0x8e>
    1c4c:	63 c0       	rjmp	.+198    	; 0x1d14 <V2P_GetSetParamater+0x130>
	{
		case PARAM_BUILD_NUMBER_LOW:
			PacketBytes[2] = VERSION_MINOR;
    1c4e:	83 e0       	ldi	r24, 0x03	; 3
    1c50:	41 c0       	rjmp	.+130    	; 0x1cd4 <V2P_GetSetParamater+0xf0>

			break;
		case PARAM_BUILD_NUMBER_HIGH:
			PacketBytes[2] = VERSION_MAJOR;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	3f c0       	rjmp	.+126    	; 0x1cd4 <V2P_GetSetParamater+0xf0>

			break;
		case PARAM_HARDWARE_VERSION:
			PacketBytes[2] = V2P_HW_VERSION;

			break;
		case PARAM_SW_MAJOR:
			PacketBytes[2] = V2P_SW_VERSION_MAJOR;
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	3d c0       	rjmp	.+122    	; 0x1cd4 <V2P_GetSetParamater+0xf0>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    1c5a:	a6 e8       	ldi	r26, 0x86	; 134
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	9d 01       	movw	r18, r26
  uint8_t result;
  asm volatile
    1c60:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
    1c64:	80 2d       	mov	r24, r0
    1c66:	8f 3f       	cpi	r24, 0xFF	; 255
    1c68:	11 f0       	breq	.+4      	; 0x1c6e <V2P_GetSetParamater+0x8a>
    1c6a:	d9 01       	movw	r26, r18
    1c6c:	30 c0       	rjmp	.+96     	; 0x1cce <V2P_GetSetParamater+0xea>
    1c6e:	84 e0       	ldi	r24, 0x04	; 4
    1c70:	31 c0       	rjmp	.+98     	; 0x1cd4 <V2P_GetSetParamater+0xf0>

			break;
		case PARAM_SW_MINOR:
			PacketBytes[2] = ((eeprom_read_byte(&EEPROMVars.FirmVerMinor) == 0xFF)? V2P_SW_VERSION_MINOR_DEFAULT : eeprom_read_byte(&EEPROMVars.FirmVerMinor));

			break;
		case PARAM_CONTROLLER_INIT:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1c72:	80 91 12 01 	lds	r24, 0x0112
    1c76:	83 30       	cpi	r24, 0x03	; 3
    1c78:	19 f4       	brne	.+6      	; 0x1c80 <V2P_GetSetParamater+0x9c>
			{
				PacketBytes[2] = Param_ControllerInit;
    1c7a:	80 91 08 01 	lds	r24, 0x0108
    1c7e:	2a c0       	rjmp	.+84     	; 0x1cd4 <V2P_GetSetParamater+0xf0>
			}
			else
			{
				MessageSize = 2;
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	90 93 0f 01 	sts	0x010F, r25
    1c88:	80 93 0e 01 	sts	0x010E, r24
				Param_ControllerInit = PacketBytes[2];
    1c8c:	80 91 14 01 	lds	r24, 0x0114
    1c90:	80 93 08 01 	sts	0x0108, r24
			}
			
			break;
    1c94:	48 c0       	rjmp	.+144    	; 0x1d26 <V2P_GetSetParamater+0x142>
		case PARAM_SCK_DURATION:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1c96:	80 91 12 01 	lds	r24, 0x0112
    1c9a:	a1 e0       	ldi	r26, 0x01	; 1
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	83 30       	cpi	r24, 0x03	; 3
    1ca0:	b1 f0       	breq	.+44     	; 0x1cce <V2P_GetSetParamater+0xea>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.SCKDuration);
			}
			else
			{
				MessageSize = 2;
    1ca2:	82 e0       	ldi	r24, 0x02	; 2
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	90 93 0f 01 	sts	0x010F, r25
    1caa:	80 93 0e 01 	sts	0x010E, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1cae:	80 91 14 01 	lds	r24, 0x0114
  asm volatile (
    1cb2:	08 2e       	mov	r0, r24
    1cb4:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.SCKDuration, PacketBytes[2]);
				USI_SPISetSpeed(PacketBytes[2]); // Re-Initialise the USI system with the new frequency
    1cb8:	80 91 14 01 	lds	r24, 0x0114
    1cbc:	0e 94 15 09 	call	0x122a <USI_SPISetSpeed>
			}
					
			break;
    1cc0:	32 c0       	rjmp	.+100    	; 0x1d26 <V2P_GetSetParamater+0x142>
		case PARAM_RESET_POLARITY:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1cc2:	80 91 12 01 	lds	r24, 0x0112
    1cc6:	a0 e0       	ldi	r26, 0x00	; 0
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	83 30       	cpi	r24, 0x03	; 3
    1ccc:	31 f4       	brne	.+12     	; 0x1cda <V2P_GetSetParamater+0xf6>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1cce:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
    1cd2:	80 2d       	mov	r24, r0
    1cd4:	80 93 14 01 	sts	0x0114, r24
    1cd8:	26 c0       	rjmp	.+76     	; 0x1d26 <V2P_GetSetParamater+0x142>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.ResetPolarity);		
			}
			else
			{
				MessageSize = 2;
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	90 93 0f 01 	sts	0x010F, r25
    1ce2:	80 93 0e 01 	sts	0x010E, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1ce6:	80 91 14 01 	lds	r24, 0x0114
  asm volatile (
    1cea:	08 2e       	mov	r0, r24
    1cec:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.ResetPolarity, PacketBytes[2]);
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Change takes effect immediatly
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
			}
			
			break;
    1cf6:	17 c0       	rjmp	.+46     	; 0x1d26 <V2P_GetSetParamater+0x142>
		case PARAM_OSC_PSCALE:
		case PARAM_OSC_CMATCH:
			/* Despite not supporting these parameters (STK500 only), the AVR Studio programmer
			   sends them along with the SCK duration. A OK must be returned or the sequence will fail
			   and the SCK duration byte will not be sent.                                             */
		
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1cf8:	80 91 12 01 	lds	r24, 0x0112
    1cfc:	83 30       	cpi	r24, 0x03	; 3
    1cfe:	19 f4       	brne	.+6      	; 0x1d06 <V2P_GetSetParamater+0x122>
			{
			   PacketBytes[2] = 0;            // If the command is a read, return a 0 for both parameters
    1d00:	10 92 14 01 	sts	0x0114, r1
    1d04:	10 c0       	rjmp	.+32     	; 0x1d26 <V2P_GetSetParamater+0x142>
			}
			else
			{
				MessageSize = 2;              // Otherwise just send back an OK if the command is a set		
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	90 93 0f 01 	sts	0x010F, r25
    1d0e:	80 93 0e 01 	sts	0x010E, r24
			}
			
			break;
    1d12:	09 c0       	rjmp	.+18     	; 0x1d26 <V2P_GetSetParamater+0x142>
		default:                             // Unrecognised parameter
			MessageSize = 2;
    1d14:	82 e0       	ldi	r24, 0x02	; 2
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	90 93 0f 01 	sts	0x010F, r25
    1d1c:	80 93 0e 01 	sts	0x010E, r24
			PacketBytes[1] = STATUS_CMD_FAILED;			
    1d20:	80 ec       	ldi	r24, 0xC0	; 192
    1d22:	80 93 13 01 	sts	0x0113, r24
	}
	
	V2P_SendPacket();
    1d26:	0e 94 b2 0d 	call	0x1b64 <V2P_SendPacket>
    1d2a:	08 95       	ret

00001d2c <V2P_IncrementCurrAddress>:
}

void V2P_IncrementCurrAddress(void)
{
	// Incrementing a 32-bit unsigned variable takes a lot of code. Because much of the code is
	// not very time critical (much of it is waiting for the hardware), i've chosen to waste
	// a few extra cycles per increment and save a good 60 bytes or so of code space by putting
	// the incrmement inside a function.

	CurrAddress++;
    1d2c:	80 91 09 01 	lds	r24, 0x0109
    1d30:	90 91 0a 01 	lds	r25, 0x010A
    1d34:	a0 91 0b 01 	lds	r26, 0x010B
    1d38:	b0 91 0c 01 	lds	r27, 0x010C
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	a1 1d       	adc	r26, r1
    1d40:	b1 1d       	adc	r27, r1
    1d42:	80 93 09 01 	sts	0x0109, r24
    1d46:	90 93 0a 01 	sts	0x010A, r25
    1d4a:	a0 93 0b 01 	sts	0x010B, r26
    1d4e:	b0 93 0c 01 	sts	0x010C, r27
    1d52:	08 95       	ret

00001d54 <V2P_CheckForExtendedAddress>:
}

void V2P_CheckForExtendedAddress(void)
{
	if (CurrAddress & (1UL << 31))                     // MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
    1d54:	80 91 09 01 	lds	r24, 0x0109
    1d58:	90 91 0a 01 	lds	r25, 0x010A
    1d5c:	a0 91 0b 01 	lds	r26, 0x010B
    1d60:	b0 91 0c 01 	lds	r27, 0x010C
    1d64:	b7 ff       	sbrs	r27, 7
    1d66:	1e c0       	rjmp	.+60     	; 0x1da4 <V2P_CheckForExtendedAddress+0x50>
	{
		USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);   // Load extended address command
    1d68:	8d e4       	ldi	r24, 0x4D	; 77
    1d6a:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
		USI_SPITransmit((CurrAddress & 0x00FF0000) >> 16); // The 3rd byte of the long holds the extended address
    1d74:	80 91 0b 01 	lds	r24, 0x010B
    1d78:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
		
		CurrAddress &= ~(1UL << 31);                   // Clear the flag
    1d82:	80 91 09 01 	lds	r24, 0x0109
    1d86:	90 91 0a 01 	lds	r25, 0x010A
    1d8a:	a0 91 0b 01 	lds	r26, 0x010B
    1d8e:	b0 91 0c 01 	lds	r27, 0x010C
    1d92:	bf 77       	andi	r27, 0x7F	; 127
    1d94:	80 93 09 01 	sts	0x0109, r24
    1d98:	90 93 0a 01 	sts	0x010A, r25
    1d9c:	a0 93 0b 01 	sts	0x010B, r26
    1da0:	b0 93 0c 01 	sts	0x010C, r27
    1da4:	08 95       	ret

00001da6 <V2P_RunStateMachine>:
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	c0 e0       	ldi	r28, 0x00	; 0
    1db2:	ee 24       	eor	r14, r14
    1db4:	ff 24       	eor	r15, r15
    1db6:	0e 94 5a 0b 	call	0x16b4 <BUFF_InitialiseBuffer>
    1dba:	c0 93 0d 01 	sts	0x010D, r28
    1dbe:	10 92 09 01 	sts	0x0109, r1
    1dc2:	10 92 0a 01 	sts	0x010A, r1
    1dc6:	10 92 0b 01 	sts	0x010B, r1
    1dca:	10 92 0c 01 	sts	0x010C, r1
    1dce:	80 91 06 01 	lds	r24, 0x0106
    1dd2:	81 30       	cpi	r24, 0x01	; 1
    1dd4:	11 f4       	brne	.+4      	; 0x1dda <V2P_RunStateMachine+0x34>
    1dd6:	c9 e0       	ldi	r28, 0x09	; 9
    1dd8:	11 c0       	rjmp	.+34     	; 0x1dfc <V2P_RunStateMachine+0x56>
    1dda:	cc 23       	and	r28, r28
    1ddc:	79 f0       	breq	.+30     	; 0x1dfc <V2P_RunStateMachine+0x56>
    1dde:	10 92 06 01 	sts	0x0106, r1
    1de2:	10 92 07 01 	sts	0x0107, r1
    1de6:	10 92 b2 00 	sts	0x00B2, r1
    1dea:	80 ef       	ldi	r24, 0xF0	; 240
    1dec:	80 93 b3 00 	sts	0x00B3, r24
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	80 93 70 00 	sts	0x0070, r24
    1df6:	8f e0       	ldi	r24, 0x0F	; 15
    1df8:	80 93 b0 00 	sts	0x00B0, r24
    1dfc:	8c 2f       	mov	r24, r28
    1dfe:	99 27       	eor	r25, r25
    1e00:	84 30       	cpi	r24, 0x04	; 4
    1e02:	91 05       	cpc	r25, r1
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <V2P_RunStateMachine+0x62>
    1e06:	70 c0       	rjmp	.+224    	; 0x1ee8 <V2P_RunStateMachine+0x142>
    1e08:	85 30       	cpi	r24, 0x05	; 5
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	94 f4       	brge	.+36     	; 0x1e32 <V2P_RunStateMachine+0x8c>
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	91 05       	cpc	r25, r1
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <V2P_RunStateMachine+0x70>
    1e14:	4f c0       	rjmp	.+158    	; 0x1eb4 <V2P_RunStateMachine+0x10e>
    1e16:	82 30       	cpi	r24, 0x02	; 2
    1e18:	91 05       	cpc	r25, r1
    1e1a:	1c f4       	brge	.+6      	; 0x1e22 <V2P_RunStateMachine+0x7c>
    1e1c:	89 2b       	or	r24, r25
    1e1e:	99 f1       	breq	.+102    	; 0x1e86 <V2P_RunStateMachine+0xe0>
    1e20:	d6 cf       	rjmp	.-84     	; 0x1dce <V2P_RunStateMachine+0x28>
    1e22:	82 30       	cpi	r24, 0x02	; 2
    1e24:	91 05       	cpc	r25, r1
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <V2P_RunStateMachine+0x84>
    1e28:	4b c0       	rjmp	.+150    	; 0x1ec0 <V2P_RunStateMachine+0x11a>
    1e2a:	03 97       	sbiw	r24, 0x03	; 3
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <V2P_RunStateMachine+0x8a>
    1e2e:	51 c0       	rjmp	.+162    	; 0x1ed2 <V2P_RunStateMachine+0x12c>
    1e30:	ce cf       	rjmp	.-100    	; 0x1dce <V2P_RunStateMachine+0x28>
    1e32:	87 30       	cpi	r24, 0x07	; 7
    1e34:	91 05       	cpc	r25, r1
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <V2P_RunStateMachine+0x94>
    1e38:	88 c0       	rjmp	.+272    	; 0x1f4a <V2P_RunStateMachine+0x1a4>
    1e3a:	88 30       	cpi	r24, 0x08	; 8
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	44 f4       	brge	.+16     	; 0x1e50 <V2P_RunStateMachine+0xaa>
    1e40:	85 30       	cpi	r24, 0x05	; 5
    1e42:	91 05       	cpc	r25, r1
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <V2P_RunStateMachine+0xa2>
    1e46:	65 c0       	rjmp	.+202    	; 0x1f12 <V2P_RunStateMachine+0x16c>
    1e48:	06 97       	sbiw	r24, 0x06	; 6
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <V2P_RunStateMachine+0xa8>
    1e4c:	6a c0       	rjmp	.+212    	; 0x1f22 <V2P_RunStateMachine+0x17c>
    1e4e:	bf cf       	rjmp	.-130    	; 0x1dce <V2P_RunStateMachine+0x28>
    1e50:	88 30       	cpi	r24, 0x08	; 8
    1e52:	91 05       	cpc	r25, r1
    1e54:	81 f0       	breq	.+32     	; 0x1e76 <V2P_RunStateMachine+0xd0>
    1e56:	09 97       	sbiw	r24, 0x09	; 9
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <V2P_RunStateMachine+0xb6>
    1e5a:	b9 cf       	rjmp	.-142    	; 0x1dce <V2P_RunStateMachine+0x28>
    1e5c:	82 e0       	ldi	r24, 0x02	; 2
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	90 93 0f 01 	sts	0x010F, r25
    1e64:	80 93 0e 01 	sts	0x010E, r24
    1e68:	80 ec       	ldi	r24, 0xC0	; 192
    1e6a:	80 93 13 01 	sts	0x0113, r24
    1e6e:	10 92 06 01 	sts	0x0106, r1
    1e72:	0e 94 b2 0d 	call	0x1b64 <V2P_SendPacket>
    1e76:	0e 94 5a 0b 	call	0x16b4 <BUFF_InitialiseBuffer>
    1e7a:	10 92 b0 00 	sts	0x00B0, r1
    1e7e:	10 92 70 00 	sts	0x0070, r1
    1e82:	c0 e0       	ldi	r28, 0x00	; 0
    1e84:	a4 cf       	rjmp	.-184    	; 0x1dce <V2P_RunStateMachine+0x28>
    1e86:	80 91 af 02 	lds	r24, 0x02AF
    1e8a:	81 11       	cpse	r24, r1
    1e8c:	c1 e0       	ldi	r28, 0x01	; 1
    1e8e:	f2 9b       	sbis	0x1e, 2	; 30
    1e90:	9e cf       	rjmp	.-196    	; 0x1dce <V2P_RunStateMachine+0x28>
    1e92:	80 91 0d 01 	lds	r24, 0x010D
    1e96:	88 23       	and	r24, r24
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <V2P_RunStateMachine+0xf6>
    1e9a:	99 cf       	rjmp	.-206    	; 0x1dce <V2P_RunStateMachine+0x28>
    1e9c:	80 e8       	ldi	r24, 0x80	; 128
    1e9e:	80 93 61 00 	sts	0x0061, r24
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    1ea4:	80 93 61 00 	sts	0x0061, r24
    1ea8:	80 91 c1 00 	lds	r24, 0x00C1
    1eac:	80 78       	andi	r24, 0x80	; 128
    1eae:	80 93 c1 00 	sts	0x00C1, r24
    1eb2:	d4 c0       	rjmp	.+424    	; 0x205c <V2P_RunStateMachine+0x2b6>
    1eb4:	0e 94 cf 08 	call	0x119e <USART_Rx>
    1eb8:	8b 31       	cpi	r24, 0x1B	; 27
    1eba:	89 f5       	brne	.+98     	; 0x1f1e <V2P_RunStateMachine+0x178>
    1ebc:	c2 e0       	ldi	r28, 0x02	; 2
    1ebe:	87 cf       	rjmp	.-242    	; 0x1dce <V2P_RunStateMachine+0x28>
    1ec0:	0e 94 cf 08 	call	0x119e <USART_Rx>
    1ec4:	99 27       	eor	r25, r25
    1ec6:	90 93 11 01 	sts	0x0111, r25
    1eca:	80 93 10 01 	sts	0x0110, r24
    1ece:	c3 e0       	ldi	r28, 0x03	; 3
    1ed0:	7e cf       	rjmp	.-260    	; 0x1dce <V2P_RunStateMachine+0x28>
    1ed2:	0e 94 cf 08 	call	0x119e <USART_Rx>
    1ed6:	99 27       	eor	r25, r25
    1ed8:	98 2f       	mov	r25, r24
    1eda:	88 27       	eor	r24, r24
    1edc:	90 93 0f 01 	sts	0x010F, r25
    1ee0:	80 93 0e 01 	sts	0x010E, r24
    1ee4:	c4 e0       	ldi	r28, 0x04	; 4
    1ee6:	73 cf       	rjmp	.-282    	; 0x1dce <V2P_RunStateMachine+0x28>
    1ee8:	0e 94 cf 08 	call	0x119e <USART_Rx>
    1eec:	28 2f       	mov	r18, r24
    1eee:	33 27       	eor	r19, r19
    1ef0:	80 91 0e 01 	lds	r24, 0x010E
    1ef4:	90 91 0f 01 	lds	r25, 0x010F
    1ef8:	82 2b       	or	r24, r18
    1efa:	93 2b       	or	r25, r19
    1efc:	90 93 0f 01 	sts	0x010F, r25
    1f00:	80 93 0e 01 	sts	0x010E, r24
    1f04:	83 51       	subi	r24, 0x13	; 19
    1f06:	91 40       	sbci	r25, 0x01	; 1
    1f08:	50 f4       	brcc	.+20     	; 0x1f1e <V2P_RunStateMachine+0x178>
    1f0a:	c5 e0       	ldi	r28, 0x05	; 5
    1f0c:	ee 24       	eor	r14, r14
    1f0e:	ff 24       	eor	r15, r15
    1f10:	5e cf       	rjmp	.-324    	; 0x1dce <V2P_RunStateMachine+0x28>
    1f12:	0e 94 cf 08 	call	0x119e <USART_Rx>
    1f16:	8e 30       	cpi	r24, 0x0E	; 14
    1f18:	11 f4       	brne	.+4      	; 0x1f1e <V2P_RunStateMachine+0x178>
    1f1a:	c6 e0       	ldi	r28, 0x06	; 6
    1f1c:	58 cf       	rjmp	.-336    	; 0x1dce <V2P_RunStateMachine+0x28>
    1f1e:	c9 e0       	ldi	r28, 0x09	; 9
    1f20:	56 cf       	rjmp	.-340    	; 0x1dce <V2P_RunStateMachine+0x28>
    1f22:	80 91 0e 01 	lds	r24, 0x010E
    1f26:	90 91 0f 01 	lds	r25, 0x010F
    1f2a:	e8 16       	cp	r14, r24
    1f2c:	f9 06       	cpc	r15, r25
    1f2e:	11 f4       	brne	.+4      	; 0x1f34 <V2P_RunStateMachine+0x18e>
    1f30:	c7 e0       	ldi	r28, 0x07	; 7
    1f32:	4d cf       	rjmp	.-358    	; 0x1dce <V2P_RunStateMachine+0x28>
    1f34:	87 01       	movw	r16, r14
    1f36:	0e 5e       	subi	r16, 0xEE	; 238
    1f38:	1e 4f       	sbci	r17, 0xFE	; 254
    1f3a:	08 94       	sec
    1f3c:	e1 1c       	adc	r14, r1
    1f3e:	f1 1c       	adc	r15, r1
    1f40:	0e 94 cf 08 	call	0x119e <USART_Rx>
    1f44:	f8 01       	movw	r30, r16
    1f46:	80 83       	st	Z, r24
    1f48:	42 cf       	rjmp	.-380    	; 0x1dce <V2P_RunStateMachine+0x28>
    1f4a:	0e 94 91 0d 	call	0x1b22 <V2P_GetChecksum>
    1f4e:	18 2f       	mov	r17, r24
    1f50:	0e 94 cf 08 	call	0x119e <USART_Rx>
    1f54:	18 17       	cp	r17, r24
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <V2P_RunStateMachine+0x1b4>
    1f58:	74 c0       	rjmp	.+232    	; 0x2042 <V2P_RunStateMachine+0x29c>
    1f5a:	80 91 12 01 	lds	r24, 0x0112
    1f5e:	99 27       	eor	r25, r25
    1f60:	84 30       	cpi	r24, 0x04	; 4
    1f62:	91 05       	cpc	r25, r1
    1f64:	3c f4       	brge	.+14     	; 0x1f74 <V2P_RunStateMachine+0x1ce>
    1f66:	82 30       	cpi	r24, 0x02	; 2
    1f68:	91 05       	cpc	r25, r1
    1f6a:	0c f0       	brlt	.+2      	; 0x1f6e <V2P_RunStateMachine+0x1c8>
    1f6c:	61 c0       	rjmp	.+194    	; 0x2030 <V2P_RunStateMachine+0x28a>
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	39 f0       	breq	.+14     	; 0x1f80 <V2P_RunStateMachine+0x1da>
    1f72:	61 c0       	rjmp	.+194    	; 0x2036 <V2P_RunStateMachine+0x290>
    1f74:	86 30       	cpi	r24, 0x06	; 6
    1f76:	91 05       	cpc	r25, r1
    1f78:	e9 f0       	breq	.+58     	; 0x1fb4 <V2P_RunStateMachine+0x20e>
    1f7a:	07 97       	sbiw	r24, 0x07	; 7
    1f7c:	99 f0       	breq	.+38     	; 0x1fa4 <V2P_RunStateMachine+0x1fe>
    1f7e:	5b c0       	rjmp	.+182    	; 0x2036 <V2P_RunStateMachine+0x290>
    1f80:	8b e0       	ldi	r24, 0x0B	; 11
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	90 93 0f 01 	sts	0x010F, r25
    1f88:	80 93 0e 01 	sts	0x010E, r24
    1f8c:	a2 e1       	ldi	r26, 0x12	; 18
    1f8e:	b1 e0       	ldi	r27, 0x01	; 1
    1f90:	e5 ec       	ldi	r30, 0xC5	; 197
    1f92:	f3 e0       	ldi	r31, 0x03	; 3
    1f94:	9a e0       	ldi	r25, 0x0A	; 10
    1f96:	84 91       	lpm	r24, Z
    1f98:	8d 93       	st	X+, r24
    1f9a:	91 50       	subi	r25, 0x01	; 1
    1f9c:	31 96       	adiw	r30, 0x01	; 1
    1f9e:	97 ff       	sbrs	r25, 7
    1fa0:	fa cf       	rjmp	.-12     	; 0x1f96 <V2P_RunStateMachine+0x1f0>
    1fa2:	58 c0       	rjmp	.+176    	; 0x2054 <V2P_RunStateMachine+0x2ae>
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	90 93 0f 01 	sts	0x010F, r25
    1fac:	80 93 0e 01 	sts	0x010E, r24
    1fb0:	80 ec       	ldi	r24, 0xC0	; 192
    1fb2:	4e c0       	rjmp	.+156    	; 0x2050 <V2P_RunStateMachine+0x2aa>
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	90 93 0f 01 	sts	0x010F, r25
    1fbc:	80 93 0e 01 	sts	0x010E, r24
    1fc0:	0e 94 aa 0e 	call	0x1d54 <V2P_CheckForExtendedAddress>
    1fc4:	80 91 13 01 	lds	r24, 0x0113
    1fc8:	99 27       	eor	r25, r25
    1fca:	aa 27       	eor	r26, r26
    1fcc:	bb 27       	eor	r27, r27
    1fce:	b8 2f       	mov	r27, r24
    1fd0:	aa 27       	eor	r26, r26
    1fd2:	99 27       	eor	r25, r25
    1fd4:	88 27       	eor	r24, r24
    1fd6:	20 91 14 01 	lds	r18, 0x0114
    1fda:	33 27       	eor	r19, r19
    1fdc:	44 27       	eor	r20, r20
    1fde:	55 27       	eor	r21, r21
    1fe0:	a9 01       	movw	r20, r18
    1fe2:	33 27       	eor	r19, r19
    1fe4:	22 27       	eor	r18, r18
    1fe6:	82 2b       	or	r24, r18
    1fe8:	93 2b       	or	r25, r19
    1fea:	a4 2b       	or	r26, r20
    1fec:	b5 2b       	or	r27, r21
    1fee:	20 91 15 01 	lds	r18, 0x0115
    1ff2:	33 27       	eor	r19, r19
    1ff4:	44 27       	eor	r20, r20
    1ff6:	55 27       	eor	r21, r21
    1ff8:	54 2f       	mov	r21, r20
    1ffa:	43 2f       	mov	r20, r19
    1ffc:	32 2f       	mov	r19, r18
    1ffe:	22 27       	eor	r18, r18
    2000:	82 2b       	or	r24, r18
    2002:	93 2b       	or	r25, r19
    2004:	a4 2b       	or	r26, r20
    2006:	b5 2b       	or	r27, r21
    2008:	20 91 16 01 	lds	r18, 0x0116
    200c:	33 27       	eor	r19, r19
    200e:	44 27       	eor	r20, r20
    2010:	55 27       	eor	r21, r21
    2012:	82 2b       	or	r24, r18
    2014:	93 2b       	or	r25, r19
    2016:	a4 2b       	or	r26, r20
    2018:	b5 2b       	or	r27, r21
    201a:	80 93 09 01 	sts	0x0109, r24
    201e:	90 93 0a 01 	sts	0x010A, r25
    2022:	a0 93 0b 01 	sts	0x010B, r26
    2026:	b0 93 0c 01 	sts	0x010C, r27
    202a:	10 92 13 01 	sts	0x0113, r1
    202e:	12 c0       	rjmp	.+36     	; 0x2054 <V2P_RunStateMachine+0x2ae>
    2030:	0e 94 f2 0d 	call	0x1be4 <V2P_GetSetParamater>
    2034:	11 c0       	rjmp	.+34     	; 0x2058 <V2P_RunStateMachine+0x2b2>
    2036:	e0 91 02 01 	lds	r30, 0x0102
    203a:	f0 91 03 01 	lds	r31, 0x0103
    203e:	09 95       	icall
    2040:	0b c0       	rjmp	.+22     	; 0x2058 <V2P_RunStateMachine+0x2b2>
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	90 93 0f 01 	sts	0x010F, r25
    204a:	80 93 0e 01 	sts	0x010E, r24
    204e:	81 ec       	ldi	r24, 0xC1	; 193
    2050:	80 93 13 01 	sts	0x0113, r24
    2054:	0e 94 b2 0d 	call	0x1b64 <V2P_SendPacket>
    2058:	c8 e0       	ldi	r28, 0x08	; 8
    205a:	b9 ce       	rjmp	.-654    	; 0x1dce <V2P_RunStateMachine+0x28>
    205c:	cf 91       	pop	r28
    205e:	1f 91       	pop	r17
    2060:	0f 91       	pop	r16
    2062:	ff 90       	pop	r15
    2064:	ef 90       	pop	r14
    2066:	08 95       	ret

00002068 <ISPCC_EnterChipProgrammingMode>:

// ======================================================================================

void ISPCC_EnterChipProgrammingMode(void)
{
    2068:	0f 93       	push	r16
    206a:	1f 93       	push	r17
    206c:	cf 93       	push	r28
	uint8_t ByteDelay = PacketBytes[5];
    206e:	10 91 17 01 	lds	r17, 0x0117
	uint8_t Attempts  = PacketBytes[4];
    2072:	c0 91 16 01 	lds	r28, 0x0116
	uint8_t Response;

	MAIN_Delay1MS(PacketBytes[2]);         // Wait before continuing, amount specified in the packet
    2076:	80 91 14 01 	lds	r24, 0x0114
    207a:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>

	if ((!(Attempts)) || (Attempts > 100)) // if no attempts or too high a value is specified, a fixed number is chosen
    207e:	8c 2f       	mov	r24, r28
    2080:	81 50       	subi	r24, 0x01	; 1
    2082:	84 36       	cpi	r24, 0x64	; 100
    2084:	08 f0       	brcs	.+2      	; 0x2088 <ISPCC_EnterChipProgrammingMode+0x20>
	   Attempts = 24;
    2086:	c8 e1       	ldi	r28, 0x18	; 24
		
	while (Attempts--)
	{
		USI_SPITransmit(PacketBytes[8]);
		MAIN_Delay1MS(ByteDelay);
		USI_SPITransmit(PacketBytes[9]);
		MAIN_Delay1MS(ByteDelay);
			
		Response = USI_SPITransmit(PacketBytes[10]);
		MAIN_Delay1MS(ByteDelay);

		if (PacketBytes[7] == ISPCC_POLL_MODE_AVR)
		  USI_SPITransmit(PacketBytes[11]);
		else
		  Response = USI_SPITransmit(PacketBytes[11]);
				
		if (!(PacketBytes[7]) || (Response == PacketBytes[6])) // Polling disabled, or returned value matches expected poll value
		{
			MAIN_Delay1MS(ByteDelay);

			InProgrammingMode = TRUE;
			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;
			return;
		}
		
		MAIN_Delay1MS(ByteDelay);
		USI_SPIToggleClock();            // Out of sync, shift in one bit and try again
    2088:	c1 50       	subi	r28, 0x01	; 1
    208a:	cf 3f       	cpi	r28, 0xFF	; 255
    208c:	09 f4       	brne	.+2      	; 0x2090 <ISPCC_EnterChipProgrammingMode+0x28>
    208e:	3f c0       	rjmp	.+126    	; 0x210e <ISPCC_EnterChipProgrammingMode+0xa6>
    2090:	80 91 1a 01 	lds	r24, 0x011A
    2094:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2098:	81 2f       	mov	r24, r17
    209a:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    209e:	80 91 1b 01 	lds	r24, 0x011B
    20a2:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    20a6:	81 2f       	mov	r24, r17
    20a8:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    20ac:	80 91 1c 01 	lds	r24, 0x011C
    20b0:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    20b4:	08 2f       	mov	r16, r24
    20b6:	81 2f       	mov	r24, r17
    20b8:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    20bc:	80 91 19 01 	lds	r24, 0x0119
    20c0:	83 30       	cpi	r24, 0x03	; 3
    20c2:	29 f4       	brne	.+10     	; 0x20ce <ISPCC_EnterChipProgrammingMode+0x66>
    20c4:	80 91 1d 01 	lds	r24, 0x011D
    20c8:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    20cc:	05 c0       	rjmp	.+10     	; 0x20d8 <ISPCC_EnterChipProgrammingMode+0x70>
    20ce:	80 91 1d 01 	lds	r24, 0x011D
    20d2:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    20d6:	08 2f       	mov	r16, r24
    20d8:	80 91 19 01 	lds	r24, 0x0119
    20dc:	88 23       	and	r24, r24
    20de:	21 f0       	breq	.+8      	; 0x20e8 <ISPCC_EnterChipProgrammingMode+0x80>
    20e0:	80 91 18 01 	lds	r24, 0x0118
    20e4:	08 17       	cp	r16, r24
    20e6:	69 f4       	brne	.+26     	; 0x2102 <ISPCC_EnterChipProgrammingMode+0x9a>
    20e8:	81 2f       	mov	r24, r17
    20ea:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	80 93 0d 01 	sts	0x010D, r24
    20f4:	81 b3       	in	r24, 0x11	; 17
    20f6:	8f 7c       	andi	r24, 0xCF	; 207
    20f8:	80 62       	ori	r24, 0x20	; 32
    20fa:	81 bb       	out	0x11, r24	; 17
    20fc:	10 92 13 01 	sts	0x0113, r1
    2100:	0d c0       	rjmp	.+26     	; 0x211c <ISPCC_EnterChipProgrammingMode+0xb4>
    2102:	81 2f       	mov	r24, r17
    2104:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    2108:	0e 94 6b 09 	call	0x12d6 <USI_SPIToggleClock>
    210c:	bd cf       	rjmp	.-134    	; 0x2088 <ISPCC_EnterChipProgrammingMode+0x20>
	}

	// If function hasn't returned by now, all the attempts have failed. Show this by
	// resetting the status leds to green (ready) and send a fail message.

	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
    210e:	81 b3       	in	r24, 0x11	; 17
    2110:	8f 7c       	andi	r24, 0xCF	; 207
    2112:	80 61       	ori	r24, 0x10	; 16
    2114:	81 bb       	out	0x11, r24	; 17
	PacketBytes[1] = STATUS_CMD_FAILED;
    2116:	80 ec       	ldi	r24, 0xC0	; 192
    2118:	80 93 13 01 	sts	0x0113, r24
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	08 95       	ret

00002124 <ISPCC_PollForProgComplete>:
}

void ISPCC_ProgramChip(void)
{
	uint16_t PollAddress  = 0;
	uint8_t  ProgMode     = PacketBytes[3];
	uint8_t  WriteCommand = PacketBytes[5];
	uint16_t StartAddress = (uint16_t)CurrAddress;
	uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
	                      | PacketBytes[2];
	uint8_t  PollType;
	uint8_t  ByteToWrite;
			
	if (ProgMode & ISPCC_PROG_MODE_PAGE)                 // Page writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++) // Transmit the page bytes
		{
			ByteToWrite = PacketBytes[10 + WriteByte];
		
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash write mode - word addresses so MSB/LSB masking 
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else                                         // EEPROM write mode - byte addresses so no masking 
			   USI_SPITransmit(WriteCommand);

			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Only the LSW of the address should be sent
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			if (!(PollAddress))
			{
				if ((PacketBytes[8] != ByteToWrite)       // Can do polling
				   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
				{
					PollAddress = (CurrAddress & 0xFFFF); // Save the current address
				
					if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
					   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
				}
			}

			// Flash addresses are in words; only increment address on odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();
		}

		PollType = ProgMode;

		if (ProgMode & ISPCC_PROG_MODE_PAGEDONE)         // If this packet is the end of a page, we need to send the program page command
		{
			USI_SPITransmit(PacketBytes[6]);             // Send the write program memory page command
			USI_SPITransmitWord(StartAddress);           // Send the page address word
			USI_SPITransmit(0x00);

			if (!(PollAddress))                          // No polling address
			   PollType = ((ProgMode & ~ISPCC_PAGE_POLLTYPE_MASK) | ISPCC_PAGE_POLLTYPE_WAIT);

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
	else                                                 // Flash Word writing mode or EEPROM byte writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++)
		{
			ByteToWrite = PacketBytes[10 + WriteByte];

			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else
			   USI_SPITransmit(WriteCommand);					
					
			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Transmit the current address to the slave AVR
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			PollType = ProgMode;

			if ((PacketBytes[8] != ByteToWrite)           // Can do polling
			   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
			{
				PollAddress = (CurrAddress & 0xFFFF);     // Save the current address;

				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
				   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
			}
			else
			{
				PollType = ((ProgMode & ~ISPCC_WORD_POLLTYPE_MASK) | ISPCC_WORD_POLLTYPE_WAIT);
			}					

			// Flash addresses are in words; only increment address on the odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
}

void ISPCC_PollForProgComplete(const uint8_t PollData, uint16_t PollAddr)
{
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	eb 01       	movw	r28, r22
	uint8_t PollType;
	uint8_t ProgCommand;

	if (PollData & ISPCC_PROG_MODE_PAGE)
    212c:	99 27       	eor	r25, r25
    212e:	80 ff       	sbrs	r24, 0
    2130:	08 c0       	rjmp	.+16     	; 0x2142 <ISPCC_PollForProgComplete+0x1e>
	   PollType = ((PollData & ISPCC_PAGE_POLLTYPE_MASK) >> ISPCC_PAGE_POLLTYPE_MASKSHIFT);
    2132:	80 77       	andi	r24, 0x70	; 112
    2134:	90 70       	andi	r25, 0x00	; 0
    2136:	34 e0       	ldi	r19, 0x04	; 4
    2138:	95 95       	asr	r25
    213a:	87 95       	ror	r24
    213c:	3a 95       	dec	r19
    213e:	e1 f7       	brne	.-8      	; 0x2138 <ISPCC_PollForProgComplete+0x14>
    2140:	04 c0       	rjmp	.+8      	; 0x214a <ISPCC_PollForProgComplete+0x26>
	else
	   PollType = ((PollData & ISPCC_WORD_POLLTYPE_MASK) >> ISPCC_WORD_POLLTYPE_MASKSHIFT);	
    2142:	8e 70       	andi	r24, 0x0E	; 14
    2144:	90 70       	andi	r25, 0x00	; 0
    2146:	95 95       	asr	r25
    2148:	87 95       	ror	r24

	switch (PollType & ISPCC_POLLTYPE_MASK)
    214a:	99 27       	eor	r25, r25
    214c:	87 70       	andi	r24, 0x07	; 7
    214e:	90 70       	andi	r25, 0x00	; 0
    2150:	82 30       	cpi	r24, 0x02	; 2
    2152:	91 05       	cpc	r25, r1
    2154:	19 f0       	breq	.+6      	; 0x215c <ISPCC_PollForProgComplete+0x38>
    2156:	04 97       	sbiw	r24, 0x04	; 4
    2158:	e1 f0       	breq	.+56     	; 0x2192 <ISPCC_PollForProgComplete+0x6e>
    215a:	26 c0       	rjmp	.+76     	; 0x21a8 <ISPCC_PollForProgComplete+0x84>
	{
		case ISPCC_POLLTYPE_DATA:
			ProgCommand = PacketBytes[7];
    215c:	10 91 19 01 	lds	r17, 0x0119
			
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash uses word addresses
    2160:	80 91 12 01 	lds	r24, 0x0112
    2164:	83 31       	cpi	r24, 0x13	; 19
    2166:	39 f4       	brne	.+14     	; 0x2176 <ISPCC_PollForProgComplete+0x52>
			{
				ProgCommand  |= ((PollAddr & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ);
    2168:	81 2f       	mov	r24, r17
    216a:	99 27       	eor	r25, r25
    216c:	c0 fd       	sbrc	r28, 0
    216e:	88 60       	ori	r24, 0x08	; 8
    2170:	18 2f       	mov	r17, r24
				PollAddr    >>= 1;
    2172:	d6 95       	lsr	r29
    2174:	c7 95       	ror	r28
			}

			do
			{
				USI_SPITransmit(ProgCommand);
    2176:	81 2f       	mov	r24, r17
    2178:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
				USI_SPITransmitWord(PollAddr);
    217c:	ce 01       	movw	r24, r28
    217e:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
			}
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2188:	90 91 1a 01 	lds	r25, 0x011A
    218c:	89 17       	cp	r24, r25
    218e:	99 f3       	breq	.-26     	; 0x2176 <ISPCC_PollForProgComplete+0x52>
			while (USI_SPITransmit(0x00) == PacketBytes[8]);
						
			break;
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <ISPCC_PollForProgComplete+0x8c>
		case ISPCC_POLLTYPE_READY:
			do
			   USI_SPITransmitWord(0xF000);
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	90 ef       	ldi	r25, 0xF0	; 240
    2196:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    21a2:	80 fd       	sbrc	r24, 0
    21a4:	f6 cf       	rjmp	.-20     	; 0x2192 <ISPCC_PollForProgComplete+0x6e>
			while (USI_SPITransmitWord(0x0000) & ISPCC_POLL_BUSYFLAG);

			break;
    21a6:	04 c0       	rjmp	.+8      	; 0x21b0 <ISPCC_PollForProgComplete+0x8c>
		default:                                      // Default is Wait polling
			MAIN_Delay1MS(PacketBytes[4]);	
    21a8:	80 91 16 01 	lds	r24, 0x0116
    21ac:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	1f 91       	pop	r17
    21b6:	08 95       	ret

000021b8 <ISPCC_ProgramChip>:
    21b8:	6f 92       	push	r6
    21ba:	7f 92       	push	r7
    21bc:	9f 92       	push	r9
    21be:	af 92       	push	r10
    21c0:	bf 92       	push	r11
    21c2:	cf 92       	push	r12
    21c4:	df 92       	push	r13
    21c6:	ef 92       	push	r14
    21c8:	ff 92       	push	r15
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	00 e0       	ldi	r16, 0x00	; 0
    21d4:	10 e0       	ldi	r17, 0x00	; 0
    21d6:	90 90 15 01 	lds	r9, 0x0115
    21da:	c0 90 17 01 	lds	r12, 0x0117
    21de:	60 90 09 01 	lds	r6, 0x0109
    21e2:	70 90 0a 01 	lds	r7, 0x010A
    21e6:	80 91 13 01 	lds	r24, 0x0113
    21ea:	99 27       	eor	r25, r25
    21ec:	b8 2e       	mov	r11, r24
    21ee:	aa 24       	eor	r10, r10
    21f0:	80 91 14 01 	lds	r24, 0x0114
    21f4:	99 27       	eor	r25, r25
    21f6:	a8 2a       	or	r10, r24
    21f8:	b9 2a       	or	r11, r25
    21fa:	90 fe       	sbrs	r9, 0
    21fc:	62 c0       	rjmp	.+196    	; 0x22c2 <ISPCC_ProgramChip+0x10a>
    21fe:	78 01       	movw	r14, r16
    2200:	0a 15       	cp	r16, r10
    2202:	1b 05       	cpc	r17, r11
    2204:	08 f0       	brcs	.+2      	; 0x2208 <ISPCC_ProgramChip+0x50>
    2206:	46 c0       	rjmp	.+140    	; 0x2294 <ISPCC_ProgramChip+0xdc>
    2208:	cc e1       	ldi	r28, 0x1C	; 28
    220a:	d1 e0       	ldi	r29, 0x01	; 1
    220c:	d9 90       	ld	r13, Y+
    220e:	80 91 12 01 	lds	r24, 0x0112
    2212:	83 31       	cpi	r24, 0x13	; 19
    2214:	31 f4       	brne	.+12     	; 0x2222 <ISPCC_ProgramChip+0x6a>
    2216:	8c 2d       	mov	r24, r12
    2218:	99 27       	eor	r25, r25
    221a:	e0 fe       	sbrs	r14, 0
    221c:	03 c0       	rjmp	.+6      	; 0x2224 <ISPCC_ProgramChip+0x6c>
    221e:	88 60       	ori	r24, 0x08	; 8
    2220:	01 c0       	rjmp	.+2      	; 0x2224 <ISPCC_ProgramChip+0x6c>
    2222:	8c 2d       	mov	r24, r12
    2224:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2228:	80 91 09 01 	lds	r24, 0x0109
    222c:	90 91 0a 01 	lds	r25, 0x010A
    2230:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    2234:	8d 2d       	mov	r24, r13
    2236:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    223a:	01 15       	cp	r16, r1
    223c:	11 05       	cpc	r17, r1
    223e:	d9 f4       	brne	.+54     	; 0x2276 <ISPCC_ProgramChip+0xbe>
    2240:	80 91 1a 01 	lds	r24, 0x011A
    2244:	8d 15       	cp	r24, r13
    2246:	b9 f0       	breq	.+46     	; 0x2276 <ISPCC_ProgramChip+0xbe>
    2248:	90 91 12 01 	lds	r25, 0x0112
    224c:	93 31       	cpi	r25, 0x13	; 19
    224e:	31 f0       	breq	.+12     	; 0x225c <ISPCC_ProgramChip+0xa4>
    2250:	95 31       	cpi	r25, 0x15	; 21
    2252:	89 f4       	brne	.+34     	; 0x2276 <ISPCC_ProgramChip+0xbe>
    2254:	80 91 1b 01 	lds	r24, 0x011B
    2258:	8d 15       	cp	r24, r13
    225a:	69 f0       	breq	.+26     	; 0x2276 <ISPCC_ProgramChip+0xbe>
    225c:	00 91 09 01 	lds	r16, 0x0109
    2260:	10 91 0a 01 	lds	r17, 0x010A
    2264:	93 31       	cpi	r25, 0x13	; 19
    2266:	39 f4       	brne	.+14     	; 0x2276 <ISPCC_ProgramChip+0xbe>
    2268:	00 0f       	add	r16, r16
    226a:	11 1f       	adc	r17, r17
    226c:	c7 01       	movw	r24, r14
    226e:	81 70       	andi	r24, 0x01	; 1
    2270:	90 70       	andi	r25, 0x00	; 0
    2272:	08 0f       	add	r16, r24
    2274:	19 1f       	adc	r17, r25
    2276:	e0 fc       	sbrc	r14, 0
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <ISPCC_ProgramChip+0xca>
    227a:	80 91 12 01 	lds	r24, 0x0112
    227e:	85 31       	cpi	r24, 0x15	; 21
    2280:	11 f4       	brne	.+4      	; 0x2286 <ISPCC_ProgramChip+0xce>
    2282:	0e 94 96 0e 	call	0x1d2c <V2P_IncrementCurrAddress>
    2286:	08 94       	sec
    2288:	e1 1c       	adc	r14, r1
    228a:	f1 1c       	adc	r15, r1
    228c:	ea 14       	cp	r14, r10
    228e:	fb 04       	cpc	r15, r11
    2290:	08 f4       	brcc	.+2      	; 0x2294 <ISPCC_ProgramChip+0xdc>
    2292:	bc cf       	rjmp	.-136    	; 0x220c <ISPCC_ProgramChip+0x54>
    2294:	c9 2d       	mov	r28, r9
    2296:	97 fe       	sbrs	r9, 7
    2298:	69 c0       	rjmp	.+210    	; 0x236c <ISPCC_ProgramChip+0x1b4>
    229a:	80 91 18 01 	lds	r24, 0x0118
    229e:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    22a2:	c3 01       	movw	r24, r6
    22a4:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    22ae:	01 15       	cp	r16, r1
    22b0:	11 05       	cpc	r17, r1
    22b2:	11 f4       	brne	.+4      	; 0x22b8 <ISPCC_ProgramChip+0x100>
    22b4:	cf 78       	andi	r28, 0x8F	; 143
    22b6:	c0 61       	ori	r28, 0x10	; 16
    22b8:	b8 01       	movw	r22, r16
    22ba:	8c 2f       	mov	r24, r28
    22bc:	0e 94 92 10 	call	0x2124 <ISPCC_PollForProgComplete>
    22c0:	55 c0       	rjmp	.+170    	; 0x236c <ISPCC_ProgramChip+0x1b4>
    22c2:	78 01       	movw	r14, r16
    22c4:	0a 15       	cp	r16, r10
    22c6:	1b 05       	cpc	r17, r11
    22c8:	08 f0       	brcs	.+2      	; 0x22cc <ISPCC_ProgramChip+0x114>
    22ca:	50 c0       	rjmp	.+160    	; 0x236c <ISPCC_ProgramChip+0x1b4>
    22cc:	5c e1       	ldi	r21, 0x1C	; 28
    22ce:	65 2e       	mov	r6, r21
    22d0:	51 e0       	ldi	r21, 0x01	; 1
    22d2:	75 2e       	mov	r7, r21
    22d4:	f3 01       	movw	r30, r6
    22d6:	d1 90       	ld	r13, Z+
    22d8:	3f 01       	movw	r6, r30
    22da:	80 91 12 01 	lds	r24, 0x0112
    22de:	83 31       	cpi	r24, 0x13	; 19
    22e0:	31 f4       	brne	.+12     	; 0x22ee <ISPCC_ProgramChip+0x136>
    22e2:	8c 2d       	mov	r24, r12
    22e4:	99 27       	eor	r25, r25
    22e6:	e0 fe       	sbrs	r14, 0
    22e8:	03 c0       	rjmp	.+6      	; 0x22f0 <ISPCC_ProgramChip+0x138>
    22ea:	88 60       	ori	r24, 0x08	; 8
    22ec:	01 c0       	rjmp	.+2      	; 0x22f0 <ISPCC_ProgramChip+0x138>
    22ee:	8c 2d       	mov	r24, r12
    22f0:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    22f4:	80 91 09 01 	lds	r24, 0x0109
    22f8:	90 91 0a 01 	lds	r25, 0x010A
    22fc:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    2300:	8d 2d       	mov	r24, r13
    2302:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2306:	c9 2d       	mov	r28, r9
    2308:	80 91 1a 01 	lds	r24, 0x011A
    230c:	8d 15       	cp	r24, r13
    230e:	c1 f0       	breq	.+48     	; 0x2340 <ISPCC_ProgramChip+0x188>
    2310:	90 91 12 01 	lds	r25, 0x0112
    2314:	93 31       	cpi	r25, 0x13	; 19
    2316:	31 f0       	breq	.+12     	; 0x2324 <ISPCC_ProgramChip+0x16c>
    2318:	95 31       	cpi	r25, 0x15	; 21
    231a:	91 f4       	brne	.+36     	; 0x2340 <ISPCC_ProgramChip+0x188>
    231c:	80 91 1b 01 	lds	r24, 0x011B
    2320:	8d 15       	cp	r24, r13
    2322:	71 f0       	breq	.+28     	; 0x2340 <ISPCC_ProgramChip+0x188>
    2324:	00 91 09 01 	lds	r16, 0x0109
    2328:	10 91 0a 01 	lds	r17, 0x010A
    232c:	93 31       	cpi	r25, 0x13	; 19
    232e:	59 f4       	brne	.+22     	; 0x2346 <ISPCC_ProgramChip+0x18e>
    2330:	00 0f       	add	r16, r16
    2332:	11 1f       	adc	r17, r17
    2334:	c7 01       	movw	r24, r14
    2336:	81 70       	andi	r24, 0x01	; 1
    2338:	90 70       	andi	r25, 0x00	; 0
    233a:	08 0f       	add	r16, r24
    233c:	19 1f       	adc	r17, r25
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <ISPCC_ProgramChip+0x18e>
    2340:	c9 2d       	mov	r28, r9
    2342:	c1 7f       	andi	r28, 0xF1	; 241
    2344:	c2 60       	ori	r28, 0x02	; 2
    2346:	e0 fc       	sbrc	r14, 0
    2348:	04 c0       	rjmp	.+8      	; 0x2352 <ISPCC_ProgramChip+0x19a>
    234a:	80 91 12 01 	lds	r24, 0x0112
    234e:	85 31       	cpi	r24, 0x15	; 21
    2350:	11 f4       	brne	.+4      	; 0x2356 <ISPCC_ProgramChip+0x19e>
    2352:	0e 94 96 0e 	call	0x1d2c <V2P_IncrementCurrAddress>
    2356:	b8 01       	movw	r22, r16
    2358:	8c 2f       	mov	r24, r28
    235a:	0e 94 92 10 	call	0x2124 <ISPCC_PollForProgComplete>
    235e:	08 94       	sec
    2360:	e1 1c       	adc	r14, r1
    2362:	f1 1c       	adc	r15, r1
    2364:	ea 14       	cp	r14, r10
    2366:	fb 04       	cpc	r15, r11
    2368:	08 f4       	brcc	.+2      	; 0x236c <ISPCC_ProgramChip+0x1b4>
    236a:	b4 cf       	rjmp	.-152    	; 0x22d4 <ISPCC_ProgramChip+0x11c>
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	1f 91       	pop	r17
    2372:	0f 91       	pop	r16
    2374:	ff 90       	pop	r15
    2376:	ef 90       	pop	r14
    2378:	df 90       	pop	r13
    237a:	cf 90       	pop	r12
    237c:	bf 90       	pop	r11
    237e:	af 90       	pop	r10
    2380:	9f 90       	pop	r9
    2382:	7f 90       	pop	r7
    2384:	6f 90       	pop	r6
    2386:	08 95       	ret

00002388 <AICI_InterpretPacket>:

// ======================================================================================

void AICI_InterpretPacket(void)
{
    2388:	df 92       	push	r13
    238a:	ef 92       	push	r14
    238c:	ff 92       	push	r15
    238e:	0f 93       	push	r16
    2390:	1f 93       	push	r17
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
	switch (PacketBytes[0])
    2396:	80 91 12 01 	lds	r24, 0x0112
    239a:	99 27       	eor	r25, r25
    239c:	86 31       	cpi	r24, 0x16	; 22
    239e:	91 05       	cpc	r25, r1
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <AICI_InterpretPacket+0x1c>
    23a2:	fb c0       	rjmp	.+502    	; 0x259a <AICI_InterpretPacket+0x212>
    23a4:	87 31       	cpi	r24, 0x17	; 23
    23a6:	91 05       	cpc	r25, r1
    23a8:	94 f4       	brge	.+36     	; 0x23ce <AICI_InterpretPacket+0x46>
    23aa:	82 31       	cpi	r24, 0x12	; 18
    23ac:	91 05       	cpc	r25, r1
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <AICI_InterpretPacket+0x2a>
    23b0:	60 c0       	rjmp	.+192    	; 0x2472 <AICI_InterpretPacket+0xea>
    23b2:	83 31       	cpi	r24, 0x13	; 19
    23b4:	91 05       	cpc	r25, r1
    23b6:	3c f4       	brge	.+14     	; 0x23c6 <AICI_InterpretPacket+0x3e>
    23b8:	80 31       	cpi	r24, 0x10	; 16
    23ba:	91 05       	cpc	r25, r1
    23bc:	f9 f0       	breq	.+62     	; 0x23fc <AICI_InterpretPacket+0x74>
    23be:	41 97       	sbiw	r24, 0x11	; 17
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <AICI_InterpretPacket+0x3c>
    23c2:	3d c0       	rjmp	.+122    	; 0x243e <AICI_InterpretPacket+0xb6>
    23c4:	3e c1       	rjmp	.+636    	; 0x2642 <AICI_InterpretPacket+0x2ba>
    23c6:	44 97       	sbiw	r24, 0x14	; 20
    23c8:	09 f4       	brne	.+2      	; 0x23cc <AICI_InterpretPacket+0x44>
    23ca:	e7 c0       	rjmp	.+462    	; 0x259a <AICI_InterpretPacket+0x212>
    23cc:	2f c1       	rjmp	.+606    	; 0x262c <AICI_InterpretPacket+0x2a4>
    23ce:	89 31       	cpi	r24, 0x19	; 25
    23d0:	91 05       	cpc	r25, r1
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <AICI_InterpretPacket+0x4e>
    23d4:	cc c0       	rjmp	.+408    	; 0x256e <AICI_InterpretPacket+0x1e6>
    23d6:	8a 31       	cpi	r24, 0x1A	; 26
    23d8:	91 05       	cpc	r25, r1
    23da:	44 f4       	brge	.+16     	; 0x23ec <AICI_InterpretPacket+0x64>
    23dc:	87 31       	cpi	r24, 0x17	; 23
    23de:	91 05       	cpc	r25, r1
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <AICI_InterpretPacket+0x5c>
    23e2:	c5 c0       	rjmp	.+394    	; 0x256e <AICI_InterpretPacket+0x1e6>
    23e4:	48 97       	sbiw	r24, 0x18	; 24
    23e6:	09 f4       	brne	.+2      	; 0x23ea <AICI_InterpretPacket+0x62>
    23e8:	a5 c0       	rjmp	.+330    	; 0x2534 <AICI_InterpretPacket+0x1ac>
    23ea:	2b c1       	rjmp	.+598    	; 0x2642 <AICI_InterpretPacket+0x2ba>
    23ec:	8d 31       	cpi	r24, 0x1D	; 29
    23ee:	91 05       	cpc	r25, r1
    23f0:	0c f4       	brge	.+2      	; 0x23f4 <AICI_InterpretPacket+0x6c>
    23f2:	a0 c0       	rjmp	.+320    	; 0x2534 <AICI_InterpretPacket+0x1ac>
    23f4:	4d 97       	sbiw	r24, 0x1d	; 29
    23f6:	09 f4       	brne	.+2      	; 0x23fa <AICI_InterpretPacket+0x72>
    23f8:	61 c0       	rjmp	.+194    	; 0x24bc <AICI_InterpretPacket+0x134>
    23fa:	23 c1       	rjmp	.+582    	; 0x2642 <AICI_InterpretPacket+0x2ba>
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
    23fc:	82 e0       	ldi	r24, 0x02	; 2
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	90 93 0f 01 	sts	0x010F, r25
    2404:	80 93 0e 01 	sts	0x010E, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2408:	a1 e0       	ldi	r26, 0x01	; 1
    240a:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    240c:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
    2410:	80 2d       	mov	r24, r0
    2412:	0e 94 30 09 	call	0x1260 <USI_SPIInitMaster>
			
			USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));

			MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);  // Pull the slave AVR's RESET line to active
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
			MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE); // Orange = Busy
    241c:	81 b3       	in	r24, 0x11	; 17
    241e:	80 63       	ori	r24, 0x30	; 48
    2420:	81 bb       	out	0x11, r24	; 17
			ISPCC_EnterChipProgrammingMode();       // Run the Enter Programming Mode routine
    2422:	0e 94 34 10 	call	0x2068 <ISPCC_EnterChipProgrammingMode>

			if (InProgrammingMode)
    2426:	80 91 0d 01 	lds	r24, 0x010D
    242a:	88 23       	and	r24, r24
    242c:	19 f0       	breq	.+6      	; 0x2434 <AICI_InterpretPacket+0xac>
			   LCD_puts_f(AVRISPModeMessage);
    242e:	8b ed       	ldi	r24, 0xDB	; 219
    2430:	93 e0       	ldi	r25, 0x03	; 3
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <AICI_InterpretPacket+0xb0>
			else
			   LCD_puts_f(SyncErrorMessage);
    2434:	80 ed       	ldi	r24, 0xD0	; 208
    2436:	93 e0       	ldi	r25, 0x03	; 3
    2438:	0e 94 ed 07 	call	0xfda <LCD_puts_f>
			
			break;
    243c:	0b c1       	rjmp	.+534    	; 0x2654 <AICI_InterpretPacket+0x2cc>
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	90 93 0f 01 	sts	0x010F, r25
    2446:	80 93 0e 01 	sts	0x010E, r24

			MAIN_Delay1MS(PacketBytes[1]);           // Wait for the "PreDelay" amount specified in the packet
    244a:	80 91 13 01 	lds	r24, 0x0113
    244e:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Non programming mode = green status led
    2452:	81 b3       	in	r24, 0x11	; 17
    2454:	8f 7c       	andi	r24, 0xCF	; 207
    2456:	80 61       	ori	r24, 0x10	; 16
    2458:	81 bb       	out	0x11, r24	; 17
			InProgrammingMode = FALSE;
    245a:	10 92 0d 01 	sts	0x010D, r1
			MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	0e 94 0b 03 	call	0x616 <MAIN_ResetCSLine>
			MAIN_Delay1MS(PacketBytes[2]);           // Wait for the "PostDelay" amount specified in the packet
    2464:	80 91 14 01 	lds	r24, 0x0114
    2468:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
			
			USI_SPIOff();
    246c:	0e 94 40 09 	call	0x1280 <USI_SPIOff>
    2470:	e5 c0       	rjmp	.+458    	; 0x263c <AICI_InterpretPacket+0x2b4>

			PacketBytes[1] = STATUS_CMD_OK;      // Return OK

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;
    2472:	82 e0       	ldi	r24, 0x02	; 2
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	90 93 0f 01 	sts	0x010F, r25
    247a:	80 93 0e 01 	sts	0x010E, r24
			
			for (uint8_t PacketB = 3; PacketB <= 6; PacketB++) // Send the erase commands to the slave AVR
    247e:	c3 e0       	ldi	r28, 0x03	; 3
    2480:	05 e1       	ldi	r16, 0x15	; 21
    2482:	11 e0       	ldi	r17, 0x01	; 1
				USI_SPITransmit(PacketBytes[PacketB]);
    2484:	f8 01       	movw	r30, r16
    2486:	81 91       	ld	r24, Z+
    2488:	8f 01       	movw	r16, r30
    248a:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    248e:	c1 50       	subi	r28, 0x01	; 1
    2490:	c7 ff       	sbrs	r28, 7
    2492:	f8 cf       	rjmp	.-16     	; 0x2484 <AICI_InterpretPacket+0xfc>

			if (PacketBytes[2])                  // Poll mode, value of 1 indicates a busy flag wait
    2494:	80 91 14 01 	lds	r24, 0x0114
    2498:	88 23       	and	r24, r24
    249a:	59 f0       	breq	.+22     	; 0x24b2 <AICI_InterpretPacket+0x12a>
			{
				do
					USI_SPITransmitWord(0xF000);
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 ef       	ldi	r25, 0xF0	; 240
    24a0:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    24ac:	80 fd       	sbrc	r24, 0
    24ae:	f6 cf       	rjmp	.-20     	; 0x249c <AICI_InterpretPacket+0x114>
    24b0:	c5 c0       	rjmp	.+394    	; 0x263c <AICI_InterpretPacket+0x2b4>
				while (USI_SPITransmitWord(0x0000) & 0x01);
			}
			else                                // Poll mode flag of 0 indicates a predefined delay
			{
				MAIN_Delay1MS(PacketBytes[1]);   // Wait the specified interval to ensure erase complete
    24b2:	80 91 13 01 	lds	r24, 0x0113
    24b6:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    24ba:	c0 c0       	rjmp	.+384    	; 0x263c <AICI_InterpretPacket+0x2b4>
			}
			
			PacketBytes[1] = STATUS_CMD_OK;      // Always return OK
			
			break;
		case CMD_SPI_MULTI:
				MessageSize = (3 + PacketBytes[2]);    // Number of recieved bytes, plus two OKs and the command byte
    24bc:	e0 90 14 01 	lds	r14, 0x0114
    24c0:	8e 2d       	mov	r24, r14
    24c2:	99 27       	eor	r25, r25
    24c4:	03 96       	adiw	r24, 0x03	; 3
    24c6:	90 93 0f 01 	sts	0x010F, r25
    24ca:	80 93 0e 01 	sts	0x010E, r24
		
				uint8_t TxBytes      = PacketBytes[1]; // \. The packet data is overwritten during the transfer. Because
    24ce:	00 91 13 01 	lds	r16, 0x0113
				uint8_t RxStartByte  = PacketBytes[2]; // |  of this each data byte must be stored into temp variables
				uint8_t RxBytes      = PacketBytes[3]; // /  so that their contents are not lost.
    24d2:	f0 90 15 01 	lds	r15, 0x0115
				uint8_t RxByteNum    = 1;
    24d6:	c1 e0       	ldi	r28, 0x01	; 1
				uint8_t TxByteNum    = 1;
				uint8_t RecievedByte = 0;

				while (TxByteNum++ < TxBytes)          // Still bytes to transfer
				{
					RecievedByte = USI_SPITransmit(PacketBytes[3 + TxByteNum]); // Transmit the byte, store the answer

					if ((TxByteNum >= RxStartByte) && (RxByteNum < RxBytes))
					   PacketBytes[2 + RxByteNum++] = RecievedByte;
    24d8:	12 e0       	ldi	r17, 0x02	; 2
    24da:	c0 17       	cp	r28, r16
    24dc:	a8 f4       	brcc	.+42     	; 0x2508 <AICI_InterpretPacket+0x180>
    24de:	e1 2f       	mov	r30, r17
    24e0:	ff 27       	eor	r31, r31
    24e2:	ee 5e       	subi	r30, 0xEE	; 238
    24e4:	fe 4f       	sbci	r31, 0xFE	; 254
    24e6:	83 81       	ldd	r24, Z+3	; 0x03
    24e8:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    24ec:	1e 15       	cp	r17, r14
    24ee:	40 f0       	brcs	.+16     	; 0x2500 <AICI_InterpretPacket+0x178>
    24f0:	cf 15       	cp	r28, r15
    24f2:	30 f4       	brcc	.+12     	; 0x2500 <AICI_InterpretPacket+0x178>
    24f4:	ec 2f       	mov	r30, r28
    24f6:	ff 27       	eor	r31, r31
    24f8:	ee 5e       	subi	r30, 0xEE	; 238
    24fa:	fe 4f       	sbci	r31, 0xFE	; 254
    24fc:	82 83       	std	Z+2, r24	; 0x02
    24fe:	cf 5f       	subi	r28, 0xFF	; 255
    2500:	81 2f       	mov	r24, r17
    2502:	1f 5f       	subi	r17, 0xFF	; 255
    2504:	80 17       	cp	r24, r16
    2506:	58 f3       	brcs	.-42     	; 0x24de <AICI_InterpretPacket+0x156>
				}

				while (RxByteNum++ < RxBytes)                         // Still more bytes to recieve
				   PacketBytes[2 + RxByteNum] = USI_SPITransmit(0x00); // its answer to be recorded (or more bytes than sent need responses), send dummy bytes to fetch the response(s)
    2508:	8c 2f       	mov	r24, r28
    250a:	cf 5f       	subi	r28, 0xFF	; 255
    250c:	8f 15       	cp	r24, r15
    250e:	50 f4       	brcc	.+20     	; 0x2524 <AICI_InterpretPacket+0x19c>
    2510:	0c 2f       	mov	r16, r28
    2512:	11 27       	eor	r17, r17
    2514:	0e 5e       	subi	r16, 0xEE	; 238
    2516:	1e 4f       	sbci	r17, 0xFE	; 254
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    251e:	f8 01       	movw	r30, r16
    2520:	82 83       	std	Z+2, r24	; 0x02
    2522:	f2 cf       	rjmp	.-28     	; 0x2508 <AICI_InterpretPacket+0x180>

				PacketBytes[1]             = STATUS_CMD_OK; // Data should be encompassed
    2524:	10 92 13 01 	sts	0x0113, r1
				PacketBytes[3 + RxByteNum] = STATUS_CMD_OK; //  by STATS_CMD_OKs
    2528:	ec 2f       	mov	r30, r28
    252a:	ff 27       	eor	r31, r31
    252c:	ee 5e       	subi	r30, 0xEE	; 238
    252e:	fe 4f       	sbci	r31, 0xFE	; 254
    2530:	13 82       	std	Z+3, r1	; 0x03

				break;
    2532:	90 c0       	rjmp	.+288    	; 0x2654 <AICI_InterpretPacket+0x2cc>
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;
    2534:	84 e0       	ldi	r24, 0x04	; 4
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	90 93 0f 01 	sts	0x010F, r25
    253c:	80 93 0e 01 	sts	0x010E, r24
	
			for (uint8_t ByteNum = 1; ByteNum <= 4; ByteNum++)
    2540:	c1 e0       	ldi	r28, 0x01	; 1
    2542:	04 e1       	ldi	r16, 0x14	; 20
    2544:	11 e0       	ldi	r17, 0x01	; 1
			{
				uint8_t Response = USI_SPITransmit(PacketBytes[1 + ByteNum]); // Transmit the four signature request bytes
    2546:	f8 01       	movw	r30, r16
    2548:	81 91       	ld	r24, Z+
    254a:	8f 01       	movw	r16, r30
    254c:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2550:	98 2f       	mov	r25, r24

				if (ByteNum == PacketBytes[1])         // If the current byte is the requested signature byte, save the reponse in the packet
    2552:	80 91 13 01 	lds	r24, 0x0113
    2556:	c8 17       	cp	r28, r24
    2558:	11 f4       	brne	.+4      	; 0x255e <AICI_InterpretPacket+0x1d6>
					PacketBytes[2] = Response;
    255a:	90 93 14 01 	sts	0x0114, r25
    255e:	cf 5f       	subi	r28, 0xFF	; 255
    2560:	c5 30       	cpi	r28, 0x05	; 5
    2562:	88 f3       	brcs	.-30     	; 0x2546 <AICI_InterpretPacket+0x1be>
			}

			PacketBytes[1] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    2564:	10 92 13 01 	sts	0x0113, r1
			PacketBytes[3] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    2568:	10 92 15 01 	sts	0x0115, r1

			break;
    256c:	73 c0       	rjmp	.+230    	; 0x2654 <AICI_InterpretPacket+0x2cc>
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;
    256e:	83 e0       	ldi	r24, 0x03	; 3
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	90 93 0f 01 	sts	0x010F, r25
    2576:	80 93 0e 01 	sts	0x010E, r24
    257a:	03 e1       	ldi	r16, 0x13	; 19
    257c:	11 e0       	ldi	r17, 0x01	; 1
    257e:	c3 e0       	ldi	r28, 0x03	; 3
			
			for (uint8_t PacketB = 1; PacketB <= 4; PacketB++) // Send the lock-byte values to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    2580:	f8 01       	movw	r30, r16
    2582:	81 91       	ld	r24, Z+
    2584:	8f 01       	movw	r16, r30
    2586:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    258a:	c1 50       	subi	r28, 0x01	; 1
    258c:	c7 ff       	sbrs	r28, 7
    258e:	f8 cf       	rjmp	.-16     	; 0x2580 <AICI_InterpretPacket+0x1f8>

			PacketBytes[1] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    2590:	10 92 13 01 	sts	0x0113, r1
			PacketBytes[2] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    2594:	10 92 14 01 	sts	0x0114, r1

			break;
    2598:	5d c0       	rjmp	.+186    	; 0x2654 <AICI_InterpretPacket+0x2cc>
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			MessageSize = 0;                           // Here to prevent compiler from complaining if a var dec appears straight after a case

			uint8_t  ReadCommand = PacketBytes[3];
    259a:	d0 90 15 01 	lds	r13, 0x0115
			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8) // Load in the number of bytes that is to
    259e:	80 91 13 01 	lds	r24, 0x0113
    25a2:	99 27       	eor	r25, r25
    25a4:	d8 2f       	mov	r29, r24
    25a6:	cc 27       	eor	r28, r28
    25a8:	80 91 14 01 	lds	r24, 0x0114
    25ac:	99 27       	eor	r25, r25
    25ae:	c8 2b       	or	r28, r24
    25b0:	d9 2b       	or	r29, r25
			                     | PacketBytes[2];                 // be read into a temp variable (MSB first)

			MessageSize = BytesToRead + 3;
    25b2:	23 96       	adiw	r28, 0x03	; 3
    25b4:	d0 93 0f 01 	sts	0x010F, r29
    25b8:	c0 93 0e 01 	sts	0x010E, r28
    25bc:	23 97       	sbiw	r28, 0x03	; 3

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
    25be:	00 e0       	ldi	r16, 0x00	; 0
    25c0:	10 e0       	ldi	r17, 0x00	; 0
    25c2:	0c 17       	cp	r16, r28
    25c4:	1d 07       	cpc	r17, r29
    25c6:	60 f5       	brcc	.+88     	; 0x2620 <AICI_InterpretPacket+0x298>
    25c8:	84 e1       	ldi	r24, 0x14	; 20
    25ca:	e8 2e       	mov	r14, r24
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	f8 2e       	mov	r15, r24
			{
				if (PacketBytes[0] == CMD_READ_FLASH_ISP)  // Flash read mode - word addresses so MSB/LSB masking nessesary
    25d0:	80 91 12 01 	lds	r24, 0x0112
    25d4:	84 31       	cpi	r24, 0x14	; 20
    25d6:	31 f4       	brne	.+12     	; 0x25e4 <AICI_InterpretPacket+0x25c>
				{
					USI_SPITransmit(ReadCommand | ((ReadByte & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ));
    25d8:	8d 2d       	mov	r24, r13
    25da:	99 27       	eor	r25, r25
    25dc:	00 ff       	sbrs	r16, 0
    25de:	03 c0       	rjmp	.+6      	; 0x25e6 <AICI_InterpretPacket+0x25e>
    25e0:	88 60       	ori	r24, 0x08	; 8
    25e2:	01 c0       	rjmp	.+2      	; 0x25e6 <AICI_InterpretPacket+0x25e>
				}
				else                                       // EEPROM read mode, address is in bytes and so no masking nessesary
				{
					USI_SPITransmit(ReadCommand);
    25e4:	8d 2d       	mov	r24, r13
    25e6:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
				}
				
				USI_SPITransmitWord(CurrAddress);          // Transmit the current address to the slave AVR
    25ea:	80 91 09 01 	lds	r24, 0x0109
    25ee:	90 91 0a 01 	lds	r25, 0x010A
    25f2:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>

				PacketBytes[2 + ReadByte] = USI_SPITransmit(0x00); // Read in the byte stored at the requested location
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    25fc:	f7 01       	movw	r30, r14
    25fe:	80 83       	st	Z, r24

				if ((ReadByte & 0x01) || (PacketBytes[0] == CMD_READ_EEPROM_ISP)) // Flash addresses are given in words; only increment on the odd byte if reading the flash.
    2600:	00 fd       	sbrc	r16, 0
    2602:	04 c0       	rjmp	.+8      	; 0x260c <AICI_InterpretPacket+0x284>
    2604:	80 91 12 01 	lds	r24, 0x0112
    2608:	86 31       	cpi	r24, 0x16	; 22
    260a:	11 f4       	brne	.+4      	; 0x2610 <AICI_InterpretPacket+0x288>
				{
					V2P_IncrementCurrAddress();             // Increment the address counter
    260c:	0e 94 96 0e 	call	0x1d2c <V2P_IncrementCurrAddress>
    2610:	0f 5f       	subi	r16, 0xFF	; 255
    2612:	1f 4f       	sbci	r17, 0xFF	; 255
    2614:	08 94       	sec
    2616:	e1 1c       	adc	r14, r1
    2618:	f1 1c       	adc	r15, r1
    261a:	0c 17       	cp	r16, r28
    261c:	1d 07       	cpc	r17, r29
    261e:	c0 f2       	brcs	.-80     	; 0x25d0 <AICI_InterpretPacket+0x248>
				}
				else
				{
					if ((CurrAddress & 0x00FF0000) & !(CurrAddress & 0x0000FFFF))
					{
						CurrAddress |= (1UL << 31);        // Set MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
						V2P_CheckForExtendedAddress();
					}
				}
			}
			
			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    2620:	10 92 13 01 	sts	0x0113, r1
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    2624:	ce 5e       	subi	r28, 0xEE	; 238
    2626:	de 4f       	sbci	r29, 0xFE	; 254
    2628:	1a 82       	std	Y+2, r1	; 0x02

			break;
    262a:	14 c0       	rjmp	.+40     	; 0x2654 <AICI_InterpretPacket+0x2cc>
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPCC_ProgramChip();                          // Program the bytes into the chip
    262c:	0e 94 dc 10 	call	0x21b8 <ISPCC_ProgramChip>
			
			MessageSize = 2;
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	90 93 0f 01 	sts	0x010F, r25
    2638:	80 93 0e 01 	sts	0x010E, r24

			PacketBytes[1] = STATUS_CMD_OK;
    263c:	10 92 13 01 	sts	0x0113, r1
			
			break;
    2640:	09 c0       	rjmp	.+18     	; 0x2654 <AICI_InterpretPacket+0x2cc>
		default:                                        // Unknown command, return error
			MessageSize = 1;
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	90 93 0f 01 	sts	0x010F, r25
    264a:	80 93 0e 01 	sts	0x010E, r24
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
    264e:	89 ec       	ldi	r24, 0xC9	; 201
    2650:	80 93 13 01 	sts	0x0113, r24
	}

	V2P_SendPacket();                                   // Send the response packet
    2654:	0e 94 b2 0d 	call	0x1b64 <V2P_SendPacket>
    2658:	df 91       	pop	r29
    265a:	cf 91       	pop	r28
    265c:	1f 91       	pop	r17
    265e:	0f 91       	pop	r16
    2660:	ff 90       	pop	r15
    2662:	ef 90       	pop	r14
    2664:	df 90       	pop	r13
    2666:	08 95       	ret

00002668 <PM_GetStoredDataSize>:

// ======================================================================================

uint32_t PM_GetStoredDataSize(const uint8_t Type)
{
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	24 97       	sbiw	r28, 0x04	; 4
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
	/* This take a **LOT** of code (202 bytes), and is accessed several times throughout
	   the program, so I've put it into a seperate function to save on flash.            */

	uint32_t ProgDataSize = 0;
    267c:	19 82       	std	Y+1, r1	; 0x01
    267e:	1a 82       	std	Y+2, r1	; 0x02
    2680:	1b 82       	std	Y+3, r1	; 0x03
    2682:	1c 82       	std	Y+4, r1	; 0x04
void 
eeprom_read_block (void *pointer_ram,
                   const void *pointer_eeprom,
                   size_t n)
{
    2684:	fe 01       	movw	r30, r28
    2686:	31 96       	adiw	r30, 0x01	; 1
    2688:	81 30       	cpi	r24, 0x01	; 1
    268a:	19 f4       	brne	.+6      	; 0x2692 <PM_GetStoredDataSize+0x2a>
    268c:	ab e1       	ldi	r26, 0x1B	; 27
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <PM_GetStoredDataSize+0x2e>
    2692:	af e1       	ldi	r26, 0x1F	; 31
    2694:	b0 e0       	ldi	r27, 0x00	; 0
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
             XCALL " __eeprom_read_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "st z+,__tmp_reg__" CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                  XCALL " __eeprom_read_block_" _REG_LOCATION_SUFFIX 
                : "+x" (pointer_eeprom),
                  "=z" (pointer_ram)
                : "z"  (pointer_ram)
                : "memory");
            }
          else
            {
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 
    2696:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    2698:	18 2e       	mov	r1, r24
    269a:	0e 94 d2 19 	call	0x33a4 <__eeprom_read_block_1F2021>

	eeprom_read_block((void*)&ProgDataSize, (const void*)((Type == TYPE_FLASH)? &EEPROMVars.DataSize : &EEPROMVars.EEPROMSize), 4);

	if (ProgDataSize == 0xFFFFFFFF)                                      // Blank EEPROM, return a size  of 0 bytes
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	9a 81       	ldd	r25, Y+2	; 0x02
    26a2:	ab 81       	ldd	r26, Y+3	; 0x03
    26a4:	bc 81       	ldd	r27, Y+4	; 0x04
    26a6:	8f 5f       	subi	r24, 0xFF	; 255
    26a8:	9f 4f       	sbci	r25, 0xFF	; 255
    26aa:	af 4f       	sbci	r26, 0xFF	; 255
    26ac:	bf 4f       	sbci	r27, 0xFF	; 255
    26ae:	21 f4       	brne	.+8      	; 0x26b8 <PM_GetStoredDataSize+0x50>
	   ProgDataSize = 0x00;
    26b0:	19 82       	std	Y+1, r1	; 0x01
    26b2:	1a 82       	std	Y+2, r1	; 0x02
    26b4:	1b 82       	std	Y+3, r1	; 0x03
    26b6:	1c 82       	std	Y+4, r1	; 0x04

	return ProgDataSize;
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	9a 81       	ldd	r25, Y+2	; 0x02
    26bc:	ab 81       	ldd	r26, Y+3	; 0x03
    26be:	bc 81       	ldd	r27, Y+4	; 0x04
}
    26c0:	bc 01       	movw	r22, r24
    26c2:	cd 01       	movw	r24, r26
    26c4:	24 96       	adiw	r28, 0x04	; 4
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	df 91       	pop	r29
    26d2:	cf 91       	pop	r28
    26d4:	08 95       	ret

000026d6 <PM_SetupDFAddressCounters>:

void PM_SetupDFAddressCounters(const uint8_t Type)
{
	uint32_t StartAddress;
	
	MemoryType  = Type;
    26d6:	80 93 28 02 	sts	0x0228, r24
	GPageLength = 0;
    26da:	10 92 26 02 	sts	0x0226, r1
    26de:	10 92 25 02 	sts	0x0225, r1
    26e2:	20 91 09 01 	lds	r18, 0x0109
    26e6:	30 91 0a 01 	lds	r19, 0x010A
    26ea:	40 91 0b 01 	lds	r20, 0x010B
    26ee:	50 91 0c 01 	lds	r21, 0x010C

	if (Type == TYPE_FLASH)                                              // Type 1 = Flash
    26f2:	81 30       	cpi	r24, 0x01	; 1
    26f4:	39 f4       	brne	.+14     	; 0x2704 <PM_SetupDFAddressCounters+0x2e>
		StartAddress = (CurrAddress << 1);                               // Convert flash word address to byte address
    26f6:	da 01       	movw	r26, r20
    26f8:	c9 01       	movw	r24, r18
    26fa:	88 0f       	add	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	aa 1f       	adc	r26, r26
    2700:	bb 1f       	adc	r27, r27
    2702:	06 c0       	rjmp	.+12     	; 0x2710 <PM_SetupDFAddressCounters+0x3a>
	else
		StartAddress = CurrAddress + PM_EEPROM_OFFSET;                   // EEPROM uses byte addresses, and starts at the 257th kilobyte in Dataflash
    2704:	da 01       	movw	r26, r20
    2706:	c9 01       	movw	r24, r18
    2708:	80 50       	subi	r24, 0x00	; 0
    270a:	9c 4f       	sbci	r25, 0xFC	; 252
    270c:	ab 4f       	sbci	r26, 0xFB	; 251
    270e:	bf 4f       	sbci	r27, 0xFF	; 255
	
	CurrPageAddress = 0;
    2710:	10 92 6a 02 	sts	0x026A, r1
    2714:	10 92 69 02 	sts	0x0269, r1

	while (StartAddress >= DF_INTERNALDF_BUFFBYTES)                      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DF_INTERNALDF_BUFFBYTES;                         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    2718:	88 30       	cpi	r24, 0x08	; 8
    271a:	21 e0       	ldi	r18, 0x01	; 1
    271c:	92 07       	cpc	r25, r18
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	a2 07       	cpc	r26, r18
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	b2 07       	cpc	r27, r18
    2726:	a0 f0       	brcs	.+40     	; 0x2750 <PM_SetupDFAddressCounters+0x7a>
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	88 50       	subi	r24, 0x08	; 8
    272e:	91 40       	sbci	r25, 0x01	; 1
    2730:	a0 40       	sbci	r26, 0x00	; 0
    2732:	b0 40       	sbci	r27, 0x00	; 0
    2734:	2f 5f       	subi	r18, 0xFF	; 255
    2736:	3f 4f       	sbci	r19, 0xFF	; 255
    2738:	88 30       	cpi	r24, 0x08	; 8
    273a:	41 e0       	ldi	r20, 0x01	; 1
    273c:	94 07       	cpc	r25, r20
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	a4 07       	cpc	r26, r20
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	b4 07       	cpc	r27, r20
    2746:	90 f7       	brcc	.-28     	; 0x272c <PM_SetupDFAddressCounters+0x56>
    2748:	30 93 6a 02 	sts	0x026A, r19
    274c:	20 93 69 02 	sts	0x0269, r18
	}
	
	CurrBuffByte = (uint16_t)StartAddress;                               // The buffer byte is the remainder
    2750:	90 93 63 02 	sts	0x0263, r25
    2754:	80 93 62 02 	sts	0x0262, r24
    2758:	08 95       	ret

0000275a <PM_StoreProgramByte>:
}

void PM_StoreProgramByte(const uint8_t Data)
{
    275a:	cf 93       	push	r28
    275c:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DF_INTERNALDF_BUFFBYTES)
    275e:	80 91 62 02 	lds	r24, 0x0262
    2762:	90 91 63 02 	lds	r25, 0x0263
    2766:	88 50       	subi	r24, 0x08	; 8
    2768:	91 40       	sbci	r25, 0x01	; 1
    276a:	a9 f4       	brne	.+42     	; 0x2796 <PM_StoreProgramByte+0x3c>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    276c:	80 91 69 02 	lds	r24, 0x0269
    2770:	90 91 6a 02 	lds	r25, 0x026A
    2774:	9c 01       	movw	r18, r24
    2776:	01 96       	adiw	r24, 0x01	; 1
    2778:	90 93 6a 02 	sts	0x026A, r25
    277c:	80 93 69 02 	sts	0x0269, r24
    2780:	c9 01       	movw	r24, r18
    2782:	0e 94 c2 0a 	call	0x1584 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	0e 94 00 0a 	call	0x1400 <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    278e:	10 92 63 02 	sts	0x0263, r1
    2792:	10 92 62 02 	sts	0x0262, r1
	}
	
	SPI_SPITransmit(Data);                                               // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    2796:	8c 2f       	mov	r24, r28
    2798:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
	CurrBuffByte++;
    279c:	80 91 62 02 	lds	r24, 0x0262
    27a0:	90 91 63 02 	lds	r25, 0x0263
    27a4:	01 96       	adiw	r24, 0x01	; 1
    27a6:	90 93 63 02 	sts	0x0263, r25
    27aa:	80 93 62 02 	sts	0x0262, r24
	GPageLength++;
    27ae:	80 91 25 02 	lds	r24, 0x0225
    27b2:	90 91 26 02 	lds	r25, 0x0226
    27b6:	01 96       	adiw	r24, 0x01	; 1
    27b8:	90 93 26 02 	sts	0x0226, r25
    27bc:	80 93 25 02 	sts	0x0225, r24
    27c0:	cf 91       	pop	r28
    27c2:	08 95       	ret

000027c4 <PM_CheckEndOfProgramming>:
}

void PM_InterpretAVRISPPacket(void)
{
	uint8_t* EEPROMAddress;

	switch (PacketBytes[0])
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
						
			for (uint8_t PacketB = 0; PacketB <= 11; PacketB++)          // Save the enter programming mode command bytes
			  eeprom_write_byte(&EEPROMVars.EnterProgMode[PacketB], PacketBytes[PacketB]);
			
			InProgrammingMode = TRUE;                                    // Set the flag, prevent the user from exiting the V2P state machine			
			CurrentMode = PM_NO_SETUP;                                   // Clear the current mode variable

			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;

			break;			
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;

			PM_CheckEndOfProgramming();                                  // Check if the last command was a program - if so store the program length
			PM_CheckEndOfFuseLockStore();                                // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
			
			InProgrammingMode = FALSE;                                   // Clear the flag, allow the user to exit the V2P state machine

			DF_EnableDataflash(FALSE);

			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
			PacketBytes[1] = STATUS_CMD_OK;

			break;
		case CMD_READ_SIGNATURE_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x01;                                       // Signature bytes all return "01" in storage mode
			PacketBytes[3] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;

			for (uint8_t PacketB = 1; PacketB <= 6; PacketB++)          // Save the erase chip command bytes to EEPROM
			  eeprom_write_byte(&EEPROMVars.EraseChip[PacketB], PacketBytes[PacketB]);

			for (uint8_t Byte = 0; Byte < 8; Byte++)                    // Clear the program and EEPROM size counters
			{
				eeprom_write_byte(&EEPROMVars.DataSize[Byte], 0x00);
				eeprom_write_byte(&EEPROMVars.EEPROMSize[Byte], 0x00);
			}
						
			eeprom_write_byte(&EEPROMVars.EraseCmdStored, TRUE);
			
			PacketBytes[1] = STATUS_CMD_OK;
			
			break;
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x00;                                      // Return 0x00 for the OSCCAL byte
			PacketBytes[3] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs

			break;
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
			MessageSize = 4;
	
			if (CurrentMode != PM_LOCKFUSEBITS_READ)                    // First lock or fuse byte being read, set the EEPROM pointer
			{
				PM_CheckEndOfProgramming();                             // Check if the last command was a program - if so store the program length
				PM_CheckEndOfFuseLockStore();                           // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
				
				CurrBuffByte = 0;
				CurrentMode  = PM_LOCKFUSEBITS_READ;
			}
			
			if (CurrBuffByte > eeprom_read_byte((uint8_t*)((PacketBytes[0] == CMD_READ_FUSE_ISP)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes)))    // Trying to read more fuse/lock bytes than are stored in memory
			{
				PacketBytes[2] = 0xFF;                                  // Return 0xFF for the fuse/lock byte
			}
			else
			{
				PacketBytes[2] = eeprom_read_byte((uint8_t*)((PacketBytes[0] == CMD_READ_FUSE_ISP)? &EEPROMVars.FuseBytes : &EEPROMVars.LockBytes) // Starting location
									                         + (CurrBuffByte << 2) + (PacketBytes[1] - 1));                                        // The start position of the actual fuse/lock byte to read (4 bytes each));
			}

			PacketBytes[1] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs
			PacketBytes[3] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs

			CurrBuffByte++;

			break;
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;

			if (CurrentMode != PM_LOCKFUSEBITS_WRITE)                  // First lock or fuse byte being written, set the EEPROM pointer
			{
				CurrentMode   = PM_LOCKFUSEBITS_WRITE;
				CurrBuffByte  = 0;                                     // CurrBuffByte is used to store the total fuse/lock bytes written
			}

			if (PacketBytes[0] == CMD_PROGRAM_FUSE_ISP)
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.FuseBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_FUSE;
			}
			else
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.LockBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_LOCK;
			}				
			
			if (CurrBuffByte < PM_MAX_FUSELOCKBITS)
			{
				for (uint8_t FLByte = 1; FLByte <= 4; FLByte++)
				{
					eeprom_write_byte(EEPROMAddress, PacketBytes[FLByte]);
					EEPROMAddress++;
				}

				CurrBuffByte++;                                        // Increment the total fuse/lock bytes written counter
			}
			
			PacketBytes[1] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned
			PacketBytes[2] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned

			break;
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			MessageSize = 2;

			if (CurrentMode != PM_DATAFLASH_WRITE)                     // First programming packet
			{
				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)           // Flash programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram; // Set the eeprom address to the Program command bytes location
					PM_SetupDFAddressCounters(TYPE_FLASH);
				}
				else                                                   // EEPROM programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;  // Set the eeprom address to the EEPROM command bytes location
					PM_SetupDFAddressCounters(TYPE_EEPROM);
				}
				
				DF_BufferWriteEnable(CurrBuffByte);
				CurrentMode = PM_DATAFLASH_WRITE;
				
				for (uint8_t B = 1; B <= 9; B++)                       // Save the command bytes
				  eeprom_write_byte(EEPROMAddress, PacketBytes[B]);
			}

			uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
			                      | PacketBytes[2];

			for (uint16_t CurrByte = 0; CurrByte < BytesToWrite; CurrByte++)
				PM_StoreProgramByte(PacketBytes[10 + CurrByte]);

			if (!(GPageLength & PM_PAGELENGTH_FOUNDBIT) && (PacketBytes[3] & ISPCC_PROG_MODE_PAGEDONE) && GPageLength)
			{
				eeprom_write_word(((MemoryType == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength), GPageLength);
		
				GPageLength |= PM_PAGELENGTH_FOUNDBIT;                 // Bit 15 is used to indicate if the length has been found
			}

			PacketBytes[1] = STATUS_CMD_OK;
		
			break;
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:	
			if (CurrentMode != PM_DATAFLASH_READ)
			{
				PM_CheckEndOfProgramming();                           // Check if the last command was a program - if so store the program length
				PM_CheckEndOfFuseLockStore();                         // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
				
				PM_SetupDFAddressCounters((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);
				DF_ContinuousReadEnable(CurrPageAddress, CurrBuffByte);
				
				CurrentMode = PM_DATAFLASH_READ;
				CurrAddress = 0;
			}

			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8)    // \. Load in the number of bytes that is to
			                     | PacketBytes[2];                    // /  be read into a temp variable (MSB first)
						
			uint16_t BytesInMem  = PM_GetStoredDataSize((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
			   PacketBytes[2 + ReadByte] = ((CurrAddress < BytesInMem)? SPI_SPITransmit(0x00) : 0xFF); // Read in the next dataflash byte if present
			   V2P_IncrementCurrAddress();
			}
			
			MessageSize = BytesToRead + 3;

			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
		
			break;
		default:
			MessageSize = 1;
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
	}

	V2P_SendPacket();                                   // Send the response packet
}

void PM_CheckEndOfProgramming(void)
{
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	24 97       	sbiw	r28, 0x04	; 4
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
	uint8_t* EEPROMAddress;

	if (CurrentMode == PM_DATAFLASH_WRITE)
    27d8:	80 91 27 02 	lds	r24, 0x0227
    27dc:	81 30       	cpi	r24, 0x01	; 1
    27de:	09 f0       	breq	.+2      	; 0x27e2 <PM_CheckEndOfProgramming+0x1e>
    27e0:	41 c0       	rjmp	.+130    	; 0x2864 <PM_CheckEndOfProgramming+0xa0>
	{
		if (CurrBuffByte)                               // Data in the dataflash buffer, pending to be written
    27e2:	80 91 62 02 	lds	r24, 0x0262
    27e6:	90 91 63 02 	lds	r25, 0x0263
    27ea:	89 2b       	or	r24, r25
    27ec:	31 f0       	breq	.+12     	; 0x27fa <PM_CheckEndOfProgramming+0x36>
		  DF_CopyBufferToFlashPage(CurrPageAddress);   // Save the buffer
    27ee:	80 91 69 02 	lds	r24, 0x0269
    27f2:	90 91 6a 02 	lds	r25, 0x026A
    27f6:	0e 94 c2 0a 	call	0x1584 <DF_CopyBufferToFlashPage>

		uint32_t DataSize = ((uint32_t)CurrPageAddress * DF_INTERNALDF_BUFFBYTES) + CurrBuffByte;
    27fa:	80 91 69 02 	lds	r24, 0x0269
    27fe:	90 91 6a 02 	lds	r25, 0x026A
    2802:	aa 27       	eor	r26, r26
    2804:	bb 27       	eor	r27, r27
    2806:	bc 01       	movw	r22, r24
    2808:	cd 01       	movw	r24, r26
    280a:	28 e0       	ldi	r18, 0x08	; 8
    280c:	31 e0       	ldi	r19, 0x01	; 1
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	50 e0       	ldi	r21, 0x00	; 0
    2812:	0e 94 ab 19 	call	0x3356 <__mulsi3>
    2816:	9b 01       	movw	r18, r22
    2818:	ac 01       	movw	r20, r24
    281a:	80 91 62 02 	lds	r24, 0x0262
    281e:	90 91 63 02 	lds	r25, 0x0263
    2822:	aa 27       	eor	r26, r26
    2824:	bb 27       	eor	r27, r27
    2826:	28 0f       	add	r18, r24
    2828:	39 1f       	adc	r19, r25
    282a:	4a 1f       	adc	r20, r26
    282c:	5b 1f       	adc	r21, r27
    282e:	29 83       	std	Y+1, r18	; 0x01
    2830:	3a 83       	std	Y+2, r19	; 0x02
    2832:	4b 83       	std	Y+3, r20	; 0x03
    2834:	5c 83       	std	Y+4, r21	; 0x04

		if (MemoryType == TYPE_FLASH)
    2836:	80 91 28 02 	lds	r24, 0x0228
    283a:	81 30       	cpi	r24, 0x01	; 1
    283c:	19 f4       	brne	.+6      	; 0x2844 <PM_CheckEndOfProgramming+0x80>
		{
			EEPROMAddress = (uint8_t*)&EEPROMVars.DataSize;       
    283e:	ab e1       	ldi	r26, 0x1B	; 27
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	0a c0       	rjmp	.+20     	; 0x2858 <PM_CheckEndOfProgramming+0x94>
		}
		else
		{
			EEPROMAddress = (uint8_t*)&EEPROMVars.EEPROMSize;
    2844:	af e1       	ldi	r26, 0x1F	; 31
    2846:	b0 e0       	ldi	r27, 0x00	; 0
			DataSize -= PM_EEPROM_OFFSET;                // Remove DataFlash starting offset
    2848:	20 50       	subi	r18, 0x00	; 0
    284a:	34 40       	sbci	r19, 0x04	; 4
    284c:	44 40       	sbci	r20, 0x04	; 4
    284e:	50 40       	sbci	r21, 0x00	; 0
    2850:	29 83       	std	Y+1, r18	; 0x01
    2852:	3a 83       	std	Y+2, r19	; 0x02
    2854:	4b 83       	std	Y+3, r20	; 0x03
    2856:	5c 83       	std	Y+4, r21	; 0x04
void 
eeprom_write_block (const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t n)
{
    2858:	fe 01       	movw	r30, r28
    285a:	31 96       	adiw	r30, 0x01	; 1
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
            "ld __tmp_reg__,z+" CR_TAB
             XCALL " __eeprom_write_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      /* Do nothing for compile time constant transfer size n == 0.  */
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                 XCALL " __eeprom_write_block_" _REG_LOCATION_SUFFIX
               : "+x" (pointer_eeprom),
                 "=z" (pointer_ram)
               : "z"  (pointer_ram)
               : "memory" );
            }
          else
            {
              uint8_t len;
              len = (uint8_t) n;
    285c:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    285e:	18 2e       	mov	r1, r24
    2860:	0e 94 ed 19 	call	0x33da <__eeprom_write_block_1F2021>
    2864:	24 96       	adiw	r28, 0x04	; 4
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	f8 94       	cli
    286a:	de bf       	out	0x3e, r29	; 62
    286c:	0f be       	out	0x3f, r0	; 63
    286e:	cd bf       	out	0x3d, r28	; 61
    2870:	df 91       	pop	r29
    2872:	cf 91       	pop	r28
    2874:	08 95       	ret

00002876 <PM_CheckEndOfFuseLockStore>:
		}

		eeprom_write_block((const void*)&DataSize, (void*)EEPROMAddress, 4);
	}
}

void PM_CheckEndOfFuseLockStore(void)
{
	if (CurrentMode == PM_LOCKFUSEBITS_WRITE)
    2876:	80 91 27 02 	lds	r24, 0x0227
    287a:	83 30       	cpi	r24, 0x03	; 3
    287c:	71 f4       	brne	.+28     	; 0x289a <PM_CheckEndOfFuseLockStore+0x24>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    287e:	80 91 28 02 	lds	r24, 0x0228
    2882:	82 30       	cpi	r24, 0x02	; 2
    2884:	19 f4       	brne	.+6      	; 0x288c <PM_CheckEndOfFuseLockStore+0x16>
    2886:	af e2       	ldi	r26, 0x2F	; 47
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <PM_CheckEndOfFuseLockStore+0x1a>
    288c:	a0 e3       	ldi	r26, 0x30	; 48
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	80 91 62 02 	lds	r24, 0x0262
  asm volatile (
    2894:	08 2e       	mov	r0, r24
    2896:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
    289a:	08 95       	ret

0000289c <PM_InterpretAVRISPPacket>:
    289c:	cf 92       	push	r12
    289e:	df 92       	push	r13
    28a0:	ef 92       	push	r14
    28a2:	ff 92       	push	r15
    28a4:	0f 93       	push	r16
    28a6:	1f 93       	push	r17
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	40 91 12 01 	lds	r20, 0x0112
    28b0:	84 2f       	mov	r24, r20
    28b2:	99 27       	eor	r25, r25
    28b4:	86 31       	cpi	r24, 0x16	; 22
    28b6:	91 05       	cpc	r25, r1
    28b8:	09 f4       	brne	.+2      	; 0x28bc <PM_InterpretAVRISPPacket+0x20>
    28ba:	b8 c1       	rjmp	.+880    	; 0x2c2c <PM_InterpretAVRISPPacket+0x390>
    28bc:	87 31       	cpi	r24, 0x17	; 23
    28be:	91 05       	cpc	r25, r1
    28c0:	94 f4       	brge	.+36     	; 0x28e6 <PM_InterpretAVRISPPacket+0x4a>
    28c2:	82 31       	cpi	r24, 0x12	; 18
    28c4:	91 05       	cpc	r25, r1
    28c6:	09 f4       	brne	.+2      	; 0x28ca <PM_InterpretAVRISPPacket+0x2e>
    28c8:	68 c0       	rjmp	.+208    	; 0x299a <PM_InterpretAVRISPPacket+0xfe>
    28ca:	83 31       	cpi	r24, 0x13	; 19
    28cc:	91 05       	cpc	r25, r1
    28ce:	3c f4       	brge	.+14     	; 0x28de <PM_InterpretAVRISPPacket+0x42>
    28d0:	80 31       	cpi	r24, 0x10	; 16
    28d2:	91 05       	cpc	r25, r1
    28d4:	11 f1       	breq	.+68     	; 0x291a <PM_InterpretAVRISPPacket+0x7e>
    28d6:	41 97       	sbiw	r24, 0x11	; 17
    28d8:	09 f4       	brne	.+2      	; 0x28dc <PM_InterpretAVRISPPacket+0x40>
    28da:	3f c0       	rjmp	.+126    	; 0x295a <PM_InterpretAVRISPPacket+0xbe>
    28dc:	17 c2       	rjmp	.+1070   	; 0x2d0c <PM_InterpretAVRISPPacket+0x470>
    28de:	44 97       	sbiw	r24, 0x14	; 20
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <PM_InterpretAVRISPPacket+0x48>
    28e2:	a4 c1       	rjmp	.+840    	; 0x2c2c <PM_InterpretAVRISPPacket+0x390>
    28e4:	38 c1       	rjmp	.+624    	; 0x2b56 <PM_InterpretAVRISPPacket+0x2ba>
    28e6:	89 31       	cpi	r24, 0x19	; 25
    28e8:	91 05       	cpc	r25, r1
    28ea:	09 f4       	brne	.+2      	; 0x28ee <PM_InterpretAVRISPPacket+0x52>
    28ec:	e2 c0       	rjmp	.+452    	; 0x2ab2 <PM_InterpretAVRISPPacket+0x216>
    28ee:	8a 31       	cpi	r24, 0x1A	; 26
    28f0:	91 05       	cpc	r25, r1
    28f2:	44 f4       	brge	.+16     	; 0x2904 <PM_InterpretAVRISPPacket+0x68>
    28f4:	87 31       	cpi	r24, 0x17	; 23
    28f6:	91 05       	cpc	r25, r1
    28f8:	09 f4       	brne	.+2      	; 0x28fc <PM_InterpretAVRISPPacket+0x60>
    28fa:	db c0       	rjmp	.+438    	; 0x2ab2 <PM_InterpretAVRISPPacket+0x216>
    28fc:	48 97       	sbiw	r24, 0x18	; 24
    28fe:	09 f4       	brne	.+2      	; 0x2902 <PM_InterpretAVRISPPacket+0x66>
    2900:	8b c0       	rjmp	.+278    	; 0x2a18 <PM_InterpretAVRISPPacket+0x17c>
    2902:	04 c2       	rjmp	.+1032   	; 0x2d0c <PM_InterpretAVRISPPacket+0x470>
    2904:	8b 31       	cpi	r24, 0x1B	; 27
    2906:	91 05       	cpc	r25, r1
    2908:	e1 f1       	breq	.+120    	; 0x2982 <PM_InterpretAVRISPPacket+0xe6>
    290a:	8b 31       	cpi	r24, 0x1B	; 27
    290c:	91 05       	cpc	r25, r1
    290e:	0c f4       	brge	.+2      	; 0x2912 <PM_InterpretAVRISPPacket+0x76>
    2910:	83 c0       	rjmp	.+262    	; 0x2a18 <PM_InterpretAVRISPPacket+0x17c>
    2912:	4c 97       	sbiw	r24, 0x1c	; 28
    2914:	09 f4       	brne	.+2      	; 0x2918 <PM_InterpretAVRISPPacket+0x7c>
    2916:	73 c0       	rjmp	.+230    	; 0x29fe <PM_InterpretAVRISPPacket+0x162>
    2918:	f9 c1       	rjmp	.+1010   	; 0x2d0c <PM_InterpretAVRISPPacket+0x470>
    291a:	82 e0       	ldi	r24, 0x02	; 2
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	90 93 0f 01 	sts	0x010F, r25
    2922:	80 93 0e 01 	sts	0x010E, r24
    2926:	e2 e1       	ldi	r30, 0x12	; 18
    2928:	f1 e0       	ldi	r31, 0x01	; 1
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	9b e0       	ldi	r25, 0x0B	; 11
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2930:	d9 01       	movw	r26, r18
    2932:	ad 5d       	subi	r26, 0xDD	; 221
    2934:	bf 4f       	sbci	r27, 0xFF	; 255
    2936:	81 91       	ld	r24, Z+
  asm volatile (
    2938:	08 2e       	mov	r0, r24
    293a:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
    293e:	91 50       	subi	r25, 0x01	; 1
    2940:	2f 5f       	subi	r18, 0xFF	; 255
    2942:	3f 4f       	sbci	r19, 0xFF	; 255
    2944:	97 ff       	sbrs	r25, 7
    2946:	f4 cf       	rjmp	.-24     	; 0x2930 <PM_InterpretAVRISPPacket+0x94>
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	80 93 0d 01 	sts	0x010D, r24
    294e:	10 92 27 02 	sts	0x0227, r1
    2952:	81 b3       	in	r24, 0x11	; 17
    2954:	8f 7c       	andi	r24, 0xCF	; 207
    2956:	80 62       	ori	r24, 0x20	; 32
    2958:	12 c0       	rjmp	.+36     	; 0x297e <PM_InterpretAVRISPPacket+0xe2>
    295a:	82 e0       	ldi	r24, 0x02	; 2
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	90 93 0f 01 	sts	0x010F, r25
    2962:	80 93 0e 01 	sts	0x010E, r24
    2966:	0e 94 e2 13 	call	0x27c4 <PM_CheckEndOfProgramming>
    296a:	0e 94 3b 14 	call	0x2876 <PM_CheckEndOfFuseLockStore>
    296e:	10 92 0d 01 	sts	0x010D, r1
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    2978:	81 b3       	in	r24, 0x11	; 17
    297a:	8f 7c       	andi	r24, 0xCF	; 207
    297c:	80 61       	ori	r24, 0x10	; 16
    297e:	81 bb       	out	0x11, r24	; 17
    2980:	52 c1       	rjmp	.+676    	; 0x2c26 <PM_InterpretAVRISPPacket+0x38a>
    2982:	84 e0       	ldi	r24, 0x04	; 4
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	90 93 0f 01 	sts	0x010F, r25
    298a:	80 93 0e 01 	sts	0x010E, r24
    298e:	10 92 13 01 	sts	0x0113, r1
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	80 93 14 01 	sts	0x0114, r24
    2998:	3c c0       	rjmp	.+120    	; 0x2a12 <PM_InterpretAVRISPPacket+0x176>
    299a:	82 e0       	ldi	r24, 0x02	; 2
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	90 93 0f 01 	sts	0x010F, r25
    29a2:	80 93 0e 01 	sts	0x010E, r24
    29a6:	e3 e1       	ldi	r30, 0x13	; 19
    29a8:	f1 e0       	ldi	r31, 0x01	; 1
    29aa:	21 e0       	ldi	r18, 0x01	; 1
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	95 e0       	ldi	r25, 0x05	; 5
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    29b0:	d9 01       	movw	r26, r18
    29b2:	ab 5e       	subi	r26, 0xEB	; 235
    29b4:	bf 4f       	sbci	r27, 0xFF	; 255
    29b6:	81 91       	ld	r24, Z+
  asm volatile (
    29b8:	08 2e       	mov	r0, r24
    29ba:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
    29be:	91 50       	subi	r25, 0x01	; 1
    29c0:	2f 5f       	subi	r18, 0xFF	; 255
    29c2:	3f 4f       	sbci	r19, 0xFF	; 255
    29c4:	97 ff       	sbrs	r25, 7
    29c6:	f4 cf       	rjmp	.-24     	; 0x29b0 <PM_InterpretAVRISPPacket+0x114>
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	37 e0       	ldi	r19, 0x07	; 7
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    29d0:	dc 01       	movw	r26, r24
    29d2:	a5 5e       	subi	r26, 0xE5	; 229
    29d4:	bf 4f       	sbci	r27, 0xFF	; 255
  asm volatile (
    29d6:	02 2e       	mov	r0, r18
    29d8:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
    29dc:	dc 01       	movw	r26, r24
    29de:	a1 5e       	subi	r26, 0xE1	; 225
    29e0:	bf 4f       	sbci	r27, 0xFF	; 255
    29e2:	02 2e       	mov	r0, r18
    29e4:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
    29e8:	31 50       	subi	r19, 0x01	; 1
    29ea:	01 96       	adiw	r24, 0x01	; 1
    29ec:	37 ff       	sbrs	r19, 7
    29ee:	f0 cf       	rjmp	.-32     	; 0x29d0 <PM_InterpretAVRISPPacket+0x134>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    29f0:	a4 e1       	ldi	r26, 0x14	; 20
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	81 e0       	ldi	r24, 0x01	; 1
  asm volatile (
    29f6:	08 2e       	mov	r0, r24
    29f8:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
    29fc:	14 c1       	rjmp	.+552    	; 0x2c26 <PM_InterpretAVRISPPacket+0x38a>
    29fe:	84 e0       	ldi	r24, 0x04	; 4
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	90 93 0f 01 	sts	0x010F, r25
    2a06:	80 93 0e 01 	sts	0x010E, r24
    2a0a:	10 92 13 01 	sts	0x0113, r1
    2a0e:	10 92 14 01 	sts	0x0114, r1
    2a12:	10 92 15 01 	sts	0x0115, r1
    2a16:	83 c1       	rjmp	.+774    	; 0x2d1e <PM_InterpretAVRISPPacket+0x482>
    2a18:	84 e0       	ldi	r24, 0x04	; 4
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	90 93 0f 01 	sts	0x010F, r25
    2a20:	80 93 0e 01 	sts	0x010E, r24
    2a24:	80 91 27 02 	lds	r24, 0x0227
    2a28:	84 30       	cpi	r24, 0x04	; 4
    2a2a:	59 f0       	breq	.+22     	; 0x2a42 <PM_InterpretAVRISPPacket+0x1a6>
    2a2c:	0e 94 e2 13 	call	0x27c4 <PM_CheckEndOfProgramming>
    2a30:	0e 94 3b 14 	call	0x2876 <PM_CheckEndOfFuseLockStore>
    2a34:	10 92 63 02 	sts	0x0263, r1
    2a38:	10 92 62 02 	sts	0x0262, r1
    2a3c:	84 e0       	ldi	r24, 0x04	; 4
    2a3e:	80 93 27 02 	sts	0x0227, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2a42:	60 91 12 01 	lds	r22, 0x0112
    2a46:	68 31       	cpi	r22, 0x18	; 24
    2a48:	19 f4       	brne	.+6      	; 0x2a50 <PM_InterpretAVRISPPacket+0x1b4>
    2a4a:	af e2       	ldi	r26, 0x2F	; 47
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	02 c0       	rjmp	.+4      	; 0x2a54 <PM_InterpretAVRISPPacket+0x1b8>
    2a50:	a0 e3       	ldi	r26, 0x30	; 48
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2a54:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
    2a58:	80 2d       	mov	r24, r0
    2a5a:	99 27       	eor	r25, r25
    2a5c:	40 91 62 02 	lds	r20, 0x0262
    2a60:	50 91 63 02 	lds	r21, 0x0263
    2a64:	84 17       	cp	r24, r20
    2a66:	95 07       	cpc	r25, r21
    2a68:	10 f4       	brcc	.+4      	; 0x2a6e <PM_InterpretAVRISPPacket+0x1d2>
    2a6a:	8f ef       	ldi	r24, 0xFF	; 255
    2a6c:	15 c0       	rjmp	.+42     	; 0x2a98 <PM_InterpretAVRISPPacket+0x1fc>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2a6e:	9a 01       	movw	r18, r20
    2a70:	22 0f       	add	r18, r18
    2a72:	33 1f       	adc	r19, r19
    2a74:	22 0f       	add	r18, r18
    2a76:	33 1f       	adc	r19, r19
    2a78:	80 91 13 01 	lds	r24, 0x0113
    2a7c:	28 0f       	add	r18, r24
    2a7e:	31 1d       	adc	r19, r1
    2a80:	68 31       	cpi	r22, 0x18	; 24
    2a82:	21 f4       	brne	.+8      	; 0x2a8c <PM_InterpretAVRISPPacket+0x1f0>
    2a84:	d9 01       	movw	r26, r18
    2a86:	a0 5d       	subi	r26, 0xD0	; 208
    2a88:	bf 4f       	sbci	r27, 0xFF	; 255
    2a8a:	03 c0       	rjmp	.+6      	; 0x2a92 <PM_InterpretAVRISPPacket+0x1f6>
    2a8c:	d9 01       	movw	r26, r18
    2a8e:	a8 5a       	subi	r26, 0xA8	; 168
    2a90:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2a92:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
    2a96:	80 2d       	mov	r24, r0
    2a98:	80 93 14 01 	sts	0x0114, r24
    2a9c:	10 92 13 01 	sts	0x0113, r1
    2aa0:	10 92 15 01 	sts	0x0115, r1
    2aa4:	4f 5f       	subi	r20, 0xFF	; 255
    2aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa8:	50 93 63 02 	sts	0x0263, r21
    2aac:	40 93 62 02 	sts	0x0262, r20
    2ab0:	36 c1       	rjmp	.+620    	; 0x2d1e <PM_InterpretAVRISPPacket+0x482>
    2ab2:	83 e0       	ldi	r24, 0x03	; 3
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	90 93 0f 01 	sts	0x010F, r25
    2aba:	80 93 0e 01 	sts	0x010E, r24
    2abe:	80 91 27 02 	lds	r24, 0x0227
    2ac2:	83 30       	cpi	r24, 0x03	; 3
    2ac4:	39 f0       	breq	.+14     	; 0x2ad4 <PM_InterpretAVRISPPacket+0x238>
    2ac6:	83 e0       	ldi	r24, 0x03	; 3
    2ac8:	80 93 27 02 	sts	0x0227, r24
    2acc:	10 92 63 02 	sts	0x0263, r1
    2ad0:	10 92 62 02 	sts	0x0262, r1
    2ad4:	20 91 62 02 	lds	r18, 0x0262
    2ad8:	30 91 63 02 	lds	r19, 0x0263
    2adc:	47 31       	cpi	r20, 0x17	; 23
    2ade:	69 f4       	brne	.+26     	; 0x2afa <PM_InterpretAVRISPPacket+0x25e>
    2ae0:	80 ea       	ldi	r24, 0xA0	; 160
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	28 9f       	mul	r18, r24
    2ae6:	e0 01       	movw	r28, r0
    2ae8:	29 9f       	mul	r18, r25
    2aea:	d0 0d       	add	r29, r0
    2aec:	38 9f       	mul	r19, r24
    2aee:	d0 0d       	add	r29, r0
    2af0:	11 24       	eor	r1, r1
    2af2:	cf 5c       	subi	r28, 0xCF	; 207
    2af4:	df 4f       	sbci	r29, 0xFF	; 255
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	0c c0       	rjmp	.+24     	; 0x2b12 <PM_InterpretAVRISPPacket+0x276>
    2afa:	80 ea       	ldi	r24, 0xA0	; 160
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	28 9f       	mul	r18, r24
    2b00:	e0 01       	movw	r28, r0
    2b02:	29 9f       	mul	r18, r25
    2b04:	d0 0d       	add	r29, r0
    2b06:	38 9f       	mul	r19, r24
    2b08:	d0 0d       	add	r29, r0
    2b0a:	11 24       	eor	r1, r1
    2b0c:	c7 5a       	subi	r28, 0xA7	; 167
    2b0e:	df 4f       	sbci	r29, 0xFF	; 255
    2b10:	83 e0       	ldi	r24, 0x03	; 3
    2b12:	80 93 28 02 	sts	0x0228, r24
    2b16:	80 91 62 02 	lds	r24, 0x0262
    2b1a:	90 91 63 02 	lds	r25, 0x0263
    2b1e:	0a 97       	sbiw	r24, 0x0a	; 10
    2b20:	a8 f4       	brcc	.+42     	; 0x2b4c <PM_InterpretAVRISPPacket+0x2b0>
    2b22:	e3 e1       	ldi	r30, 0x13	; 19
    2b24:	f1 e0       	ldi	r31, 0x01	; 1
    2b26:	93 e0       	ldi	r25, 0x03	; 3
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b28:	81 91       	ld	r24, Z+
  asm volatile (
    2b2a:	de 01       	movw	r26, r28
    2b2c:	08 2e       	mov	r0, r24
    2b2e:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
    2b32:	21 96       	adiw	r28, 0x01	; 1
    2b34:	91 50       	subi	r25, 0x01	; 1
    2b36:	97 ff       	sbrs	r25, 7
    2b38:	f7 cf       	rjmp	.-18     	; 0x2b28 <PM_InterpretAVRISPPacket+0x28c>
    2b3a:	80 91 62 02 	lds	r24, 0x0262
    2b3e:	90 91 63 02 	lds	r25, 0x0263
    2b42:	01 96       	adiw	r24, 0x01	; 1
    2b44:	90 93 63 02 	sts	0x0263, r25
    2b48:	80 93 62 02 	sts	0x0262, r24
    2b4c:	10 92 13 01 	sts	0x0113, r1
    2b50:	10 92 14 01 	sts	0x0114, r1
    2b54:	e4 c0       	rjmp	.+456    	; 0x2d1e <PM_InterpretAVRISPPacket+0x482>
    2b56:	82 e0       	ldi	r24, 0x02	; 2
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	90 93 0f 01 	sts	0x010F, r25
    2b5e:	80 93 0e 01 	sts	0x010E, r24
    2b62:	80 91 27 02 	lds	r24, 0x0227
    2b66:	81 30       	cpi	r24, 0x01	; 1
    2b68:	f9 f0       	breq	.+62     	; 0x2ba8 <PM_InterpretAVRISPPacket+0x30c>
    2b6a:	43 31       	cpi	r20, 0x13	; 19
    2b6c:	21 f4       	brne	.+8      	; 0x2b76 <PM_InterpretAVRISPPacket+0x2da>
    2b6e:	c2 e0       	ldi	r28, 0x02	; 2
    2b70:	d0 e0       	ldi	r29, 0x00	; 0
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	03 c0       	rjmp	.+6      	; 0x2b7c <PM_InterpretAVRISPPacket+0x2e0>
    2b76:	cb e0       	ldi	r28, 0x0B	; 11
    2b78:	d0 e0       	ldi	r29, 0x00	; 0
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	0e 94 6b 13 	call	0x26d6 <PM_SetupDFAddressCounters>
    2b80:	80 91 62 02 	lds	r24, 0x0262
    2b84:	90 91 63 02 	lds	r25, 0x0263
    2b88:	0e 94 00 0a 	call	0x1400 <DF_BufferWriteEnable>
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	80 93 27 02 	sts	0x0227, r24
    2b92:	e3 e1       	ldi	r30, 0x13	; 19
    2b94:	f1 e0       	ldi	r31, 0x01	; 1
    2b96:	98 e0       	ldi	r25, 0x08	; 8
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b98:	81 91       	ld	r24, Z+
  asm volatile (
    2b9a:	de 01       	movw	r26, r28
    2b9c:	08 2e       	mov	r0, r24
    2b9e:	0e 94 dc 19 	call	0x33b8 <__eeprom_write_byte_1F2021>
    2ba2:	91 50       	subi	r25, 0x01	; 1
    2ba4:	97 ff       	sbrs	r25, 7
    2ba6:	f8 cf       	rjmp	.-16     	; 0x2b98 <PM_InterpretAVRISPPacket+0x2fc>
    2ba8:	80 91 13 01 	lds	r24, 0x0113
    2bac:	99 27       	eor	r25, r25
    2bae:	d8 2f       	mov	r29, r24
    2bb0:	cc 27       	eor	r28, r28
    2bb2:	80 91 14 01 	lds	r24, 0x0114
    2bb6:	99 27       	eor	r25, r25
    2bb8:	c8 2b       	or	r28, r24
    2bba:	d9 2b       	or	r29, r25
    2bbc:	00 e0       	ldi	r16, 0x00	; 0
    2bbe:	10 e0       	ldi	r17, 0x00	; 0
    2bc0:	0c 17       	cp	r16, r28
    2bc2:	1d 07       	cpc	r17, r29
    2bc4:	70 f4       	brcc	.+28     	; 0x2be2 <PM_InterpretAVRISPPacket+0x346>
    2bc6:	5c e1       	ldi	r21, 0x1C	; 28
    2bc8:	e5 2e       	mov	r14, r21
    2bca:	51 e0       	ldi	r21, 0x01	; 1
    2bcc:	f5 2e       	mov	r15, r21
    2bce:	f7 01       	movw	r30, r14
    2bd0:	81 91       	ld	r24, Z+
    2bd2:	7f 01       	movw	r14, r30
    2bd4:	0e 94 ad 13 	call	0x275a <PM_StoreProgramByte>
    2bd8:	0f 5f       	subi	r16, 0xFF	; 255
    2bda:	1f 4f       	sbci	r17, 0xFF	; 255
    2bdc:	0c 17       	cp	r16, r28
    2bde:	1d 07       	cpc	r17, r29
    2be0:	b0 f3       	brcs	.-20     	; 0x2bce <PM_InterpretAVRISPPacket+0x332>
    2be2:	20 91 25 02 	lds	r18, 0x0225
    2be6:	30 91 26 02 	lds	r19, 0x0226
    2bea:	37 fd       	sbrc	r19, 7
    2bec:	1c c0       	rjmp	.+56     	; 0x2c26 <PM_InterpretAVRISPPacket+0x38a>
    2bee:	80 91 15 01 	lds	r24, 0x0115
    2bf2:	87 ff       	sbrs	r24, 7
    2bf4:	18 c0       	rjmp	.+48     	; 0x2c26 <PM_InterpretAVRISPPacket+0x38a>
    2bf6:	21 15       	cp	r18, r1
    2bf8:	31 05       	cpc	r19, r1
    2bfa:	a9 f0       	breq	.+42     	; 0x2c26 <PM_InterpretAVRISPPacket+0x38a>
    Write a word \c value to EEPROM address \c addr. */

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
    2bfc:	80 91 28 02 	lds	r24, 0x0228
    2c00:	81 30       	cpi	r24, 0x01	; 1
    2c02:	19 f4       	brne	.+6      	; 0x2c0a <PM_InterpretAVRISPPacket+0x36e>
    2c04:	a1 e8       	ldi	r26, 0x81	; 129
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	02 c0       	rjmp	.+4      	; 0x2c0e <PM_InterpretAVRISPPacket+0x372>
    2c0a:	a3 e8       	ldi	r26, 0x83	; 131
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
  asm volatile (
    2c0e:	09 01       	movw	r0, r18
    2c10:	0e 94 e8 19 	call	0x33d0 <__eeprom_write_word_1F2021>
    2c14:	80 91 25 02 	lds	r24, 0x0225
    2c18:	90 91 26 02 	lds	r25, 0x0226
    2c1c:	90 68       	ori	r25, 0x80	; 128
    2c1e:	90 93 26 02 	sts	0x0226, r25
    2c22:	80 93 25 02 	sts	0x0225, r24
    2c26:	10 92 13 01 	sts	0x0113, r1
    2c2a:	79 c0       	rjmp	.+242    	; 0x2d1e <PM_InterpretAVRISPPacket+0x482>
    2c2c:	80 91 27 02 	lds	r24, 0x0227
    2c30:	82 30       	cpi	r24, 0x02	; 2
    2c32:	11 f1       	breq	.+68     	; 0x2c78 <PM_InterpretAVRISPPacket+0x3dc>
    2c34:	0e 94 e2 13 	call	0x27c4 <PM_CheckEndOfProgramming>
    2c38:	0e 94 3b 14 	call	0x2876 <PM_CheckEndOfFuseLockStore>
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	80 91 12 01 	lds	r24, 0x0112
    2c42:	84 31       	cpi	r24, 0x14	; 20
    2c44:	09 f4       	brne	.+2      	; 0x2c48 <PM_InterpretAVRISPPacket+0x3ac>
    2c46:	91 e0       	ldi	r25, 0x01	; 1
    2c48:	89 2f       	mov	r24, r25
    2c4a:	0e 94 6b 13 	call	0x26d6 <PM_SetupDFAddressCounters>
    2c4e:	60 91 62 02 	lds	r22, 0x0262
    2c52:	70 91 63 02 	lds	r23, 0x0263
    2c56:	80 91 69 02 	lds	r24, 0x0269
    2c5a:	90 91 6a 02 	lds	r25, 0x026A
    2c5e:	0e 94 bd 09 	call	0x137a <DF_ContinuousReadEnable>
    2c62:	82 e0       	ldi	r24, 0x02	; 2
    2c64:	80 93 27 02 	sts	0x0227, r24
    2c68:	10 92 09 01 	sts	0x0109, r1
    2c6c:	10 92 0a 01 	sts	0x010A, r1
    2c70:	10 92 0b 01 	sts	0x010B, r1
    2c74:	10 92 0c 01 	sts	0x010C, r1
    2c78:	80 91 13 01 	lds	r24, 0x0113
    2c7c:	99 27       	eor	r25, r25
    2c7e:	d8 2f       	mov	r29, r24
    2c80:	cc 27       	eor	r28, r28
    2c82:	80 91 14 01 	lds	r24, 0x0114
    2c86:	99 27       	eor	r25, r25
    2c88:	c8 2b       	or	r28, r24
    2c8a:	d9 2b       	or	r29, r25
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	80 91 12 01 	lds	r24, 0x0112
    2c92:	84 31       	cpi	r24, 0x14	; 20
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <PM_InterpretAVRISPPacket+0x3fc>
    2c96:	91 e0       	ldi	r25, 0x01	; 1
    2c98:	89 2f       	mov	r24, r25
    2c9a:	0e 94 34 13 	call	0x2668 <PM_GetStoredDataSize>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	7c 01       	movw	r14, r24
    2ca4:	00 e0       	ldi	r16, 0x00	; 0
    2ca6:	10 e0       	ldi	r17, 0x00	; 0
    2ca8:	0c 17       	cp	r16, r28
    2caa:	1d 07       	cpc	r17, r29
    2cac:	18 f5       	brcc	.+70     	; 0x2cf4 <PM_InterpretAVRISPPacket+0x458>
    2cae:	34 e1       	ldi	r19, 0x14	; 20
    2cb0:	c3 2e       	mov	r12, r19
    2cb2:	31 e0       	ldi	r19, 0x01	; 1
    2cb4:	d3 2e       	mov	r13, r19
    2cb6:	97 01       	movw	r18, r14
    2cb8:	44 27       	eor	r20, r20
    2cba:	55 27       	eor	r21, r21
    2cbc:	80 91 09 01 	lds	r24, 0x0109
    2cc0:	90 91 0a 01 	lds	r25, 0x010A
    2cc4:	a0 91 0b 01 	lds	r26, 0x010B
    2cc8:	b0 91 0c 01 	lds	r27, 0x010C
    2ccc:	82 17       	cp	r24, r18
    2cce:	93 07       	cpc	r25, r19
    2cd0:	a4 07       	cpc	r26, r20
    2cd2:	b5 07       	cpc	r27, r21
    2cd4:	20 f4       	brcc	.+8      	; 0x2cde <PM_InterpretAVRISPPacket+0x442>
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
    2cdc:	01 c0       	rjmp	.+2      	; 0x2ce0 <PM_InterpretAVRISPPacket+0x444>
    2cde:	8f ef       	ldi	r24, 0xFF	; 255
    2ce0:	f6 01       	movw	r30, r12
    2ce2:	81 93       	st	Z+, r24
    2ce4:	6f 01       	movw	r12, r30
    2ce6:	0e 94 96 0e 	call	0x1d2c <V2P_IncrementCurrAddress>
    2cea:	0f 5f       	subi	r16, 0xFF	; 255
    2cec:	1f 4f       	sbci	r17, 0xFF	; 255
    2cee:	0c 17       	cp	r16, r28
    2cf0:	1d 07       	cpc	r17, r29
    2cf2:	08 f3       	brcs	.-62     	; 0x2cb6 <PM_InterpretAVRISPPacket+0x41a>
    2cf4:	23 96       	adiw	r28, 0x03	; 3
    2cf6:	d0 93 0f 01 	sts	0x010F, r29
    2cfa:	c0 93 0e 01 	sts	0x010E, r28
    2cfe:	23 97       	sbiw	r28, 0x03	; 3
    2d00:	10 92 13 01 	sts	0x0113, r1
    2d04:	ce 5e       	subi	r28, 0xEE	; 238
    2d06:	de 4f       	sbci	r29, 0xFE	; 254
    2d08:	1a 82       	std	Y+2, r1	; 0x02
    2d0a:	09 c0       	rjmp	.+18     	; 0x2d1e <PM_InterpretAVRISPPacket+0x482>
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	90 93 0f 01 	sts	0x010F, r25
    2d14:	80 93 0e 01 	sts	0x010E, r24
    2d18:	89 ec       	ldi	r24, 0xC9	; 201
    2d1a:	80 93 13 01 	sts	0x0113, r24
    2d1e:	0e 94 b2 0d 	call	0x1b64 <V2P_SendPacket>
    2d22:	df 91       	pop	r29
    2d24:	cf 91       	pop	r28
    2d26:	1f 91       	pop	r17
    2d28:	0f 91       	pop	r16
    2d2a:	ff 90       	pop	r15
    2d2c:	ef 90       	pop	r14
    2d2e:	df 90       	pop	r13
    2d30:	cf 90       	pop	r12
    2d32:	08 95       	ret

00002d34 <PM_SendFuseLockBytes>:
	  eeprom_write_byte(((MemoryType == TYPE_FUSE)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes), CurrBuffByte); // CurrBuffByte stores the total number of fuse/lock bytes written in this case
}

void PM_SendFuseLockBytes(const uint8_t Type)
{
    2d34:	0f 93       	push	r16
    2d36:	1f 93       	push	r17
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	98 2f       	mov	r25, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2d3e:	82 30       	cpi	r24, 0x02	; 2
    2d40:	19 f4       	brne	.+6      	; 0x2d48 <PM_SendFuseLockBytes+0x14>
    2d42:	af e2       	ldi	r26, 0x2F	; 47
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <PM_SendFuseLockBytes+0x18>
    2d48:	a0 e3       	ldi	r26, 0x30	; 48
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2d4c:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
    2d50:	80 2d       	mov	r24, r0
    2d52:	18 2f       	mov	r17, r24
	uint8_t* EEPROMAddress;
	uint8_t  TotalBytes;
	
	TotalBytes = eeprom_read_byte((Type == TYPE_FUSE)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes);

	EEPROMAddress = (uint8_t*)((Type == TYPE_FUSE)? &EEPROMVars.FuseBytes : &EEPROMVars.LockBytes); // Set the EEPROM pointer to the fuse/lock bytes start (each fuse or lock byte takes four bytes in EEPROM)
    2d54:	92 30       	cpi	r25, 0x02	; 2
    2d56:	19 f4       	brne	.+6      	; 0x2d5e <PM_SendFuseLockBytes+0x2a>
    2d58:	c1 e3       	ldi	r28, 0x31	; 49
    2d5a:	d0 e0       	ldi	r29, 0x00	; 0
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <PM_SendFuseLockBytes+0x2e>
    2d5e:	c9 e5       	ldi	r28, 0x59	; 89
    2d60:	d0 e0       	ldi	r29, 0x00	; 0

	while (TotalBytes--)                              // Write each of the fuse/lock bytes stored in memory to the slave AVR
	{
		for (uint8_t CommandByte = 0; CommandByte < 4; CommandByte++)      // Write each individual command byte
		{
			USI_SPITransmit(eeprom_read_byte(EEPROMAddress));
			EEPROMAddress++;
		}
		
		// Add some delay before programming next byte, if there is one:
		if (TotalBytes)
		   MAIN_Delay10MS(5);
    2d62:	11 50       	subi	r17, 0x01	; 1
    2d64:	1f 3f       	cpi	r17, 0xFF	; 255
    2d66:	91 f0       	breq	.+36     	; 0x2d8c <PM_SendFuseLockBytes+0x58>
    2d68:	03 e0       	ldi	r16, 0x03	; 3
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2d6a:	de 01       	movw	r26, r28
    2d6c:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
    2d70:	80 2d       	mov	r24, r0
    2d72:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2d76:	21 96       	adiw	r28, 0x01	; 1
    2d78:	01 50       	subi	r16, 0x01	; 1
    2d7a:	07 ff       	sbrs	r16, 7
    2d7c:	f6 cf       	rjmp	.-20     	; 0x2d6a <PM_SendFuseLockBytes+0x36>
    2d7e:	11 23       	and	r17, r17
    2d80:	19 f0       	breq	.+6      	; 0x2d88 <PM_SendFuseLockBytes+0x54>
    2d82:	85 e0       	ldi	r24, 0x05	; 5
    2d84:	0e 94 23 02 	call	0x446 <MAIN_Delay10MS>
    2d88:	11 50       	subi	r17, 0x01	; 1
    2d8a:	70 f7       	brcc	.-36     	; 0x2d68 <PM_SendFuseLockBytes+0x34>
    2d8c:	df 91       	pop	r29
    2d8e:	cf 91       	pop	r28
    2d90:	1f 91       	pop	r17
    2d92:	0f 91       	pop	r16
    2d94:	08 95       	ret

00002d96 <PM_SendEraseCommand>:
	}
}

void PM_SendEraseCommand(void)
{			
    2d96:	1f 93       	push	r17
    2d98:	cf 93       	push	r28
    2d9a:	df 93       	push	r29
    2d9c:	c2 e0       	ldi	r28, 0x02	; 2
    2d9e:	d0 e0       	ldi	r29, 0x00	; 0
    2da0:	13 e0       	ldi	r17, 0x03	; 3
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2da2:	de 01       	movw	r26, r28
    2da4:	ab 5e       	subi	r26, 0xEB	; 235
    2da6:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2da8:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
    2dac:	80 2d       	mov	r24, r0
    2dae:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
	for (uint8_t B = 2; B < 6 ; B++)                  // Read out the erase chip command bytes
    2db2:	11 50       	subi	r17, 0x01	; 1
    2db4:	21 96       	adiw	r28, 0x01	; 1
    2db6:	17 ff       	sbrs	r17, 7
    2db8:	f4 cf       	rjmp	.-24     	; 0x2da2 <PM_SendEraseCommand+0xc>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2dba:	a6 e1       	ldi	r26, 0x16	; 22
    2dbc:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2dbe:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
    2dc2:	80 2d       	mov	r24, r0
    2dc4:	88 23       	and	r24, r24
    2dc6:	59 f0       	breq	.+22     	; 0x2dde <PM_SendEraseCommand+0x48>
	  USI_SPITransmit(eeprom_read_byte(&EEPROMVars.EraseChip[B])); // Send the erase chip commands
			
	if (eeprom_read_byte(&EEPROMVars.EraseChip[1]))   // Value of 1 indicates a busy flag test
	{
		do
			USI_SPITransmitWord(0xF000);
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 ef       	ldi	r25, 0xF0	; 240
    2dcc:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	0e 94 5d 09 	call	0x12ba <USI_SPITransmitWord>
    2dd8:	80 fd       	sbrc	r24, 0
    2dda:	f6 cf       	rjmp	.-20     	; 0x2dc8 <PM_SendEraseCommand+0x32>
    2ddc:	07 c0       	rjmp	.+14     	; 0x2dec <PM_SendEraseCommand+0x56>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2dde:	a5 e1       	ldi	r26, 0x15	; 21
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2de2:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
    2de6:	80 2d       	mov	r24, r0
    2de8:	0e 94 f9 02 	call	0x5f2 <MAIN_Delay1MS>
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	1f 91       	pop	r17
    2df2:	08 95       	ret

00002df4 <PM_CreateProgrammingPackets>:
		while (USI_SPITransmitWord(0x0000) & 0x01);
	}
	else                                              // Cleared flag means use a predefined delay
	{		
		MAIN_Delay1MS(eeprom_read_byte((uint8_t*)&EEPROMVars.EraseChip)); // Wait the erase delay
	}
}

void PM_CreateProgrammingPackets(const uint8_t Type)
{			
    2df4:	3f 92       	push	r3
    2df6:	4f 92       	push	r4
    2df8:	5f 92       	push	r5
    2dfa:	6f 92       	push	r6
    2dfc:	7f 92       	push	r7
    2dfe:	8f 92       	push	r8
    2e00:	9f 92       	push	r9
    2e02:	af 92       	push	r10
    2e04:	bf 92       	push	r11
    2e06:	cf 92       	push	r12
    2e08:	df 92       	push	r13
    2e0a:	ef 92       	push	r14
    2e0c:	ff 92       	push	r15
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	c8 2f       	mov	r28, r24
	uint32_t BytesRead       = 0;
    2e18:	aa 24       	eor	r10, r10
    2e1a:	bb 24       	eor	r11, r11
    2e1c:	65 01       	movw	r12, r10
	uint32_t BytesToRead     = PM_GetStoredDataSize(Type);      // Get the byte size of the stored program
    2e1e:	0e 94 34 13 	call	0x2668 <PM_GetStoredDataSize>
    2e22:	2b 01       	movw	r4, r22
    2e24:	3c 01       	movw	r6, r24
	uint16_t BytesPerProgram;
	uint16_t PageLength;
	uint8_t* EEPROMAddress;
	uint8_t  ContinuedPage   = FALSE;
    2e26:	33 24       	eor	r3, r3
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \c addr. */
uint16_t
eeprom_read_word (const uint16_t *addr)
{
    2e28:	c1 30       	cpi	r28, 0x01	; 1
    2e2a:	19 f4       	brne	.+6      	; 0x2e32 <PM_CreateProgrammingPackets+0x3e>
    2e2c:	a1 e8       	ldi	r26, 0x81	; 129
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	02 c0       	rjmp	.+4      	; 0x2e36 <PM_CreateProgrammingPackets+0x42>
    2e32:	a3 e8       	ldi	r26, 0x83	; 131
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
  uint16_t result;

  asm ( 
    2e36:	0e 94 d7 19 	call	0x33ae <__eeprom_read_word_1F2021>
    2e3a:	4f 01       	movw	r8, r30

	PageLength  = eeprom_read_word((uint16_t*)(Type == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength);
	CurrAddress = 0;
    2e3c:	10 92 09 01 	sts	0x0109, r1
    2e40:	10 92 0a 01 	sts	0x010A, r1
    2e44:	10 92 0b 01 	sts	0x010B, r1
    2e48:	10 92 0c 01 	sts	0x010C, r1

	if (Type == TYPE_FLASH)
    2e4c:	c1 30       	cpi	r28, 0x01	; 1
    2e4e:	49 f4       	brne	.+18     	; 0x2e62 <PM_CreateProgrammingPackets+0x6e>
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram;       // Set the EEPROM pointer to the write flash command bytes location
    2e50:	c2 e0       	ldi	r28, 0x02	; 2
    2e52:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(0, 0);
    2e54:	60 e0       	ldi	r22, 0x00	; 0
    2e56:	70 e0       	ldi	r23, 0x00	; 0
    2e58:	cb 01       	movw	r24, r22
    2e5a:	0e 94 bd 09 	call	0x137a <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_FLASH_ISP;
    2e5e:	83 e1       	ldi	r24, 0x13	; 19
    2e60:	09 c0       	rjmp	.+18     	; 0x2e74 <PM_CreateProgrammingPackets+0x80>
	}
	else
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;        // Set the EEPROM pointer to the write EEPROM command bytes location
    2e62:	cb e0       	ldi	r28, 0x0B	; 11
    2e64:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(PM_EEPROM_OFFSET / DF_INTERNALDF_BUFFBYTES, PM_EEPROM_OFFSET % DF_INTERNALDF_BUFFBYTES); // Start read from the EEPROM offset location
    2e66:	60 ee       	ldi	r22, 0xE0	; 224
    2e68:	70 e0       	ldi	r23, 0x00	; 0
    2e6a:	84 ee       	ldi	r24, 0xE4	; 228
    2e6c:	93 e0       	ldi	r25, 0x03	; 3
    2e6e:	0e 94 bd 09 	call	0x137a <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_EEPROM_ISP;
    2e72:	85 e1       	ldi	r24, 0x15	; 21
    2e74:	80 93 12 01 	sts	0x0112, r24
    2e78:	e3 e1       	ldi	r30, 0x13	; 19
    2e7a:	f1 e0       	ldi	r31, 0x01	; 1
    2e7c:	98 e0       	ldi	r25, 0x08	; 8
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2e7e:	de 01       	movw	r26, r28
    2e80:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
    2e84:	80 2d       	mov	r24, r0
    2e86:	81 93       	st	Z+, r24
	}

	for (uint8_t B = 1; B <= 9 ; B++)                 // Load in the write data command bytes
	{
		PacketBytes[B] = eeprom_read_byte(EEPROMAddress); // Synthesise a write packet header
		EEPROMAddress++;                               // Increment the EEPROM location counter
    2e88:	21 96       	adiw	r28, 0x01	; 1
    2e8a:	91 50       	subi	r25, 0x01	; 1
    2e8c:	97 ff       	sbrs	r25, 7
    2e8e:	f7 cf       	rjmp	.-18     	; 0x2e7e <PM_CreateProgrammingPackets+0x8a>
	}
	
	BytesPerProgram = ((uint16_t)PacketBytes[1] << 8)
    2e90:	80 91 13 01 	lds	r24, 0x0113
    2e94:	99 27       	eor	r25, r25
    2e96:	d8 2f       	mov	r29, r24
    2e98:	cc 27       	eor	r28, r28
    2e9a:	80 91 14 01 	lds	r24, 0x0114
    2e9e:	99 27       	eor	r25, r25
    2ea0:	c8 2b       	or	r28, r24
    2ea2:	d9 2b       	or	r29, r25
	                | PacketBytes[2];

	while (BytesRead < BytesToRead)
	{
		if (PacketBytes[3] & ISPCC_PROG_MODE_PAGE)
		{
			if (PageLength > 160) // Max 160 bytes at a time
			{
				if (!(ContinuedPage))                      // Start of a new page, program in the first 150 bytes
				{
					BytesPerProgram = 160;
					PacketBytes[3] &= ~ISPCC_PROG_MODE_PAGEDONE;		
					ContinuedPage = TRUE;
				}
				else                                       // Middle of a page, program in the remainder
				{
					BytesPerProgram = PageLength - 160;
					PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
					ContinuedPage = FALSE;
				}
				
				for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page				

				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);
				PacketBytes[2] = (uint8_t)(BytesPerProgram);

				BytesRead += BytesPerProgram;                         // Increment the counter
			}
			else
			{
				for (uint16_t LoadB = 0; LoadB < PageLength; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page
			
				PacketBytes[1]  = (uint8_t)(PageLength >> 8);
				PacketBytes[2]  = (uint8_t)(PageLength);
				PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;

				BytesRead += PageLength;                            // Increment the counter
			}
		}
		else
		{
			if ((BytesRead + BytesPerProgram) > BytesToRead)        // Less than a whole BytesPerProgram left of data to write
			{
				BytesPerProgram = BytesToRead - BytesRead;          // Next lot of bytes will be the remaining data length
				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);   // \. Save the new length
				PacketBytes[2] = (uint8_t)(BytesPerProgram);        // /  into the data packet
			}

			for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
				PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);    // Load in the page
			
			BytesRead += BytesPerProgram;                           // Increment the counter
		}
	
		if (!(BytesRead & 0xFFFF) && (BytesRead & 0x00FF0000))      // Extended address required
		{
			USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);            // Load extended address command
			USI_SPITransmit(0x00);
			USI_SPITransmit((BytesRead & 0x00FF0000) >> 16);        // The 3rd byte of the long holds the extended address
			USI_SPITransmit(0x00);
		}

		ISPCC_ProgramChip();                                        // Start the program cycle
    2ea4:	a4 14       	cp	r10, r4
    2ea6:	b5 04       	cpc	r11, r5
    2ea8:	c6 04       	cpc	r12, r6
    2eaa:	d7 04       	cpc	r13, r7
    2eac:	08 f0       	brcs	.+2      	; 0x2eb0 <PM_CreateProgrammingPackets+0xbc>
    2eae:	b2 c0       	rjmp	.+356    	; 0x3014 <PM_CreateProgrammingPackets+0x220>
    2eb0:	20 91 15 01 	lds	r18, 0x0115
    2eb4:	82 2f       	mov	r24, r18
    2eb6:	99 27       	eor	r25, r25
    2eb8:	ac 01       	movw	r20, r24
    2eba:	41 70       	andi	r20, 0x01	; 1
    2ebc:	50 70       	andi	r21, 0x00	; 0
    2ebe:	80 ff       	sbrs	r24, 0
    2ec0:	53 c0       	rjmp	.+166    	; 0x2f68 <PM_CreateProgrammingPackets+0x174>
    2ec2:	f1 ea       	ldi	r31, 0xA1	; 161
    2ec4:	8f 16       	cp	r8, r31
    2ec6:	91 04       	cpc	r9, r1
    2ec8:	60 f1       	brcs	.+88     	; 0x2f22 <PM_CreateProgrammingPackets+0x12e>
    2eca:	33 20       	and	r3, r3
    2ecc:	41 f4       	brne	.+16     	; 0x2ede <PM_CreateProgrammingPackets+0xea>
    2ece:	c0 ea       	ldi	r28, 0xA0	; 160
    2ed0:	d0 e0       	ldi	r29, 0x00	; 0
    2ed2:	2f 77       	andi	r18, 0x7F	; 127
    2ed4:	20 93 15 01 	sts	0x0115, r18
    2ed8:	31 e0       	ldi	r19, 0x01	; 1
    2eda:	33 2e       	mov	r3, r19
    2edc:	07 c0       	rjmp	.+14     	; 0x2eec <PM_CreateProgrammingPackets+0xf8>
    2ede:	e4 01       	movw	r28, r8
    2ee0:	c0 5a       	subi	r28, 0xA0	; 160
    2ee2:	d0 40       	sbci	r29, 0x00	; 0
    2ee4:	20 68       	ori	r18, 0x80	; 128
    2ee6:	20 93 15 01 	sts	0x0115, r18
    2eea:	33 24       	eor	r3, r3
    2eec:	00 e0       	ldi	r16, 0x00	; 0
    2eee:	10 e0       	ldi	r17, 0x00	; 0
    2ef0:	0c 17       	cp	r16, r28
    2ef2:	1d 07       	cpc	r17, r29
    2ef4:	78 f4       	brcc	.+30     	; 0x2f14 <PM_CreateProgrammingPackets+0x120>
    2ef6:	2c e1       	ldi	r18, 0x1C	; 28
    2ef8:	e2 2e       	mov	r14, r18
    2efa:	21 e0       	ldi	r18, 0x01	; 1
    2efc:	f2 2e       	mov	r15, r18
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
    2f04:	f7 01       	movw	r30, r14
    2f06:	81 93       	st	Z+, r24
    2f08:	7f 01       	movw	r14, r30
    2f0a:	0f 5f       	subi	r16, 0xFF	; 255
    2f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0e:	0c 17       	cp	r16, r28
    2f10:	1d 07       	cpc	r17, r29
    2f12:	a8 f3       	brcs	.-22     	; 0x2efe <PM_CreateProgrammingPackets+0x10a>
    2f14:	8d 2f       	mov	r24, r29
    2f16:	99 27       	eor	r25, r25
    2f18:	80 93 13 01 	sts	0x0113, r24
    2f1c:	c0 93 14 01 	sts	0x0114, r28
    2f20:	4b c0       	rjmp	.+150    	; 0x2fb8 <PM_CreateProgrammingPackets+0x1c4>
    2f22:	00 e0       	ldi	r16, 0x00	; 0
    2f24:	10 e0       	ldi	r17, 0x00	; 0
    2f26:	08 15       	cp	r16, r8
    2f28:	19 05       	cpc	r17, r9
    2f2a:	78 f4       	brcc	.+30     	; 0x2f4a <PM_CreateProgrammingPackets+0x156>
    2f2c:	8c e1       	ldi	r24, 0x1C	; 28
    2f2e:	e8 2e       	mov	r14, r24
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	f8 2e       	mov	r15, r24
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
    2f3a:	f7 01       	movw	r30, r14
    2f3c:	81 93       	st	Z+, r24
    2f3e:	7f 01       	movw	r14, r30
    2f40:	0f 5f       	subi	r16, 0xFF	; 255
    2f42:	1f 4f       	sbci	r17, 0xFF	; 255
    2f44:	08 15       	cp	r16, r8
    2f46:	19 05       	cpc	r17, r9
    2f48:	a8 f3       	brcs	.-22     	; 0x2f34 <PM_CreateProgrammingPackets+0x140>
    2f4a:	89 2d       	mov	r24, r9
    2f4c:	99 27       	eor	r25, r25
    2f4e:	80 93 13 01 	sts	0x0113, r24
    2f52:	80 92 14 01 	sts	0x0114, r8
    2f56:	80 91 15 01 	lds	r24, 0x0115
    2f5a:	80 68       	ori	r24, 0x80	; 128
    2f5c:	80 93 15 01 	sts	0x0115, r24
    2f60:	c4 01       	movw	r24, r8
    2f62:	aa 27       	eor	r26, r26
    2f64:	bb 27       	eor	r27, r27
    2f66:	2b c0       	rjmp	.+86     	; 0x2fbe <PM_CreateProgrammingPackets+0x1ca>
    2f68:	ce 01       	movw	r24, r28
    2f6a:	aa 27       	eor	r26, r26
    2f6c:	bb 27       	eor	r27, r27
    2f6e:	8a 0d       	add	r24, r10
    2f70:	9b 1d       	adc	r25, r11
    2f72:	ac 1d       	adc	r26, r12
    2f74:	bd 1d       	adc	r27, r13
    2f76:	48 16       	cp	r4, r24
    2f78:	59 06       	cpc	r5, r25
    2f7a:	6a 06       	cpc	r6, r26
    2f7c:	7b 06       	cpc	r7, r27
    2f7e:	48 f4       	brcc	.+18     	; 0x2f92 <PM_CreateProgrammingPackets+0x19e>
    2f80:	e2 01       	movw	r28, r4
    2f82:	ca 19       	sub	r28, r10
    2f84:	db 09       	sbc	r29, r11
    2f86:	8d 2f       	mov	r24, r29
    2f88:	99 27       	eor	r25, r25
    2f8a:	80 93 13 01 	sts	0x0113, r24
    2f8e:	c0 93 14 01 	sts	0x0114, r28
    2f92:	8a 01       	movw	r16, r20
    2f94:	4c 17       	cp	r20, r28
    2f96:	5d 07       	cpc	r21, r29
    2f98:	78 f4       	brcc	.+30     	; 0x2fb8 <PM_CreateProgrammingPackets+0x1c4>
    2f9a:	ac e1       	ldi	r26, 0x1C	; 28
    2f9c:	ea 2e       	mov	r14, r26
    2f9e:	a1 e0       	ldi	r26, 0x01	; 1
    2fa0:	fa 2e       	mov	r15, r26
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
    2fa8:	f7 01       	movw	r30, r14
    2faa:	81 93       	st	Z+, r24
    2fac:	7f 01       	movw	r14, r30
    2fae:	0f 5f       	subi	r16, 0xFF	; 255
    2fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb2:	0c 17       	cp	r16, r28
    2fb4:	1d 07       	cpc	r17, r29
    2fb6:	a8 f3       	brcs	.-22     	; 0x2fa2 <PM_CreateProgrammingPackets+0x1ae>
    2fb8:	ce 01       	movw	r24, r28
    2fba:	aa 27       	eor	r26, r26
    2fbc:	bb 27       	eor	r27, r27
    2fbe:	a8 0e       	add	r10, r24
    2fc0:	b9 1e       	adc	r11, r25
    2fc2:	ca 1e       	adc	r12, r26
    2fc4:	db 1e       	adc	r13, r27
    2fc6:	a1 14       	cp	r10, r1
    2fc8:	b1 04       	cpc	r11, r1
    2fca:	e1 f4       	brne	.+56     	; 0x3004 <PM_CreateProgrammingPackets+0x210>
    2fcc:	e1 2c       	mov	r14, r1
    2fce:	f1 2c       	mov	r15, r1
    2fd0:	ff ef       	ldi	r31, 0xFF	; 255
    2fd2:	0f 2f       	mov	r16, r31
    2fd4:	11 2d       	mov	r17, r1
    2fd6:	ea 20       	and	r14, r10
    2fd8:	fb 20       	and	r15, r11
    2fda:	0c 21       	and	r16, r12
    2fdc:	1d 21       	and	r17, r13
    2fde:	e1 14       	cp	r14, r1
    2fe0:	f1 04       	cpc	r15, r1
    2fe2:	01 05       	cpc	r16, r1
    2fe4:	11 05       	cpc	r17, r1
    2fe6:	71 f0       	breq	.+28     	; 0x3004 <PM_CreateProgrammingPackets+0x210>
    2fe8:	8d e4       	ldi	r24, 0x4D	; 77
    2fea:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2ff4:	c8 01       	movw	r24, r16
    2ff6:	aa 27       	eor	r26, r26
    2ff8:	bb 27       	eor	r27, r27
    2ffa:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	0e 94 4a 09 	call	0x1294 <USI_SPITransmit>
    3004:	0e 94 dc 10 	call	0x21b8 <ISPCC_ProgramChip>
    3008:	a4 14       	cp	r10, r4
    300a:	b5 04       	cpc	r11, r5
    300c:	c6 04       	cpc	r12, r6
    300e:	d7 04       	cpc	r13, r7
    3010:	08 f4       	brcc	.+2      	; 0x3014 <PM_CreateProgrammingPackets+0x220>
    3012:	4e cf       	rjmp	.-356    	; 0x2eb0 <PM_CreateProgrammingPackets+0xbc>
    3014:	df 91       	pop	r29
    3016:	cf 91       	pop	r28
    3018:	1f 91       	pop	r17
    301a:	0f 91       	pop	r16
    301c:	ff 90       	pop	r15
    301e:	ef 90       	pop	r14
    3020:	df 90       	pop	r13
    3022:	cf 90       	pop	r12
    3024:	bf 90       	pop	r11
    3026:	af 90       	pop	r10
    3028:	9f 90       	pop	r9
    302a:	8f 90       	pop	r8
    302c:	7f 90       	pop	r7
    302e:	6f 90       	pop	r6
    3030:	5f 90       	pop	r5
    3032:	4f 90       	pop	r4
    3034:	3f 90       	pop	r3
    3036:	08 95       	ret

00003038 <PM_ShowStoredItemSizes>:
	}
}

void PM_ShowStoredItemSizes(void)
{
    3038:	1f 93       	push	r17
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	2e 97       	sbiw	r28, 0x0e	; 14
    3044:	0f b6       	in	r0, 0x3f	; 63
    3046:	f8 94       	cli
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[14];
	uint8_t ItemInfoIndex = 0;
    304e:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t TempB;
	
	JoyStatus = 1;
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)                           // Joystick is in the non-center position
    3054:	8e b3       	in	r24, 0x1e	; 30
    3056:	88 23       	and	r24, r24
    3058:	e9 f3       	breq	.-6      	; 0x3054 <PM_ShowStoredItemSizes+0x1c>
		{
			if (JoyStatus & JOY_UP)              // Previous item
    305a:	f6 9b       	sbis	0x1e, 6	; 30
    305c:	06 c0       	rjmp	.+12     	; 0x306a <PM_ShowStoredItemSizes+0x32>
				(ItemInfoIndex == 0)? ItemInfoIndex = 3 : ItemInfoIndex--;
    305e:	11 23       	and	r17, r17
    3060:	11 f4       	brne	.+4      	; 0x3066 <PM_ShowStoredItemSizes+0x2e>
    3062:	13 e0       	ldi	r17, 0x03	; 3
    3064:	0c c0       	rjmp	.+24     	; 0x307e <PM_ShowStoredItemSizes+0x46>
    3066:	11 50       	subi	r17, 0x01	; 1
    3068:	0a c0       	rjmp	.+20     	; 0x307e <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_DOWN)      // Next item
    306a:	f7 9b       	sbis	0x1e, 7	; 30
    306c:	06 c0       	rjmp	.+12     	; 0x307a <PM_ShowStoredItemSizes+0x42>
				(ItemInfoIndex == 3)? ItemInfoIndex = 0 : ItemInfoIndex++;
    306e:	13 30       	cpi	r17, 0x03	; 3
    3070:	11 f4       	brne	.+4      	; 0x3076 <PM_ShowStoredItemSizes+0x3e>
    3072:	10 e0       	ldi	r17, 0x00	; 0
    3074:	04 c0       	rjmp	.+8      	; 0x307e <PM_ShowStoredItemSizes+0x46>
    3076:	1f 5f       	subi	r17, 0xFF	; 255
    3078:	02 c0       	rjmp	.+4      	; 0x307e <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_LEFT)
    307a:	f2 99       	sbic	0x1e, 2	; 30
    307c:	54 c0       	rjmp	.+168    	; 0x3126 <PM_ShowStoredItemSizes+0xee>
				return;
		
			switch (ItemInfoIndex)
    307e:	81 2f       	mov	r24, r17
    3080:	99 27       	eor	r25, r25
    3082:	81 30       	cpi	r24, 0x01	; 1
    3084:	91 05       	cpc	r25, r1
    3086:	a1 f0       	breq	.+40     	; 0x30b0 <PM_ShowStoredItemSizes+0x78>
    3088:	82 30       	cpi	r24, 0x02	; 2
    308a:	91 05       	cpc	r25, r1
    308c:	1c f4       	brge	.+6      	; 0x3094 <PM_ShowStoredItemSizes+0x5c>
    308e:	89 2b       	or	r24, r25
    3090:	39 f0       	breq	.+14     	; 0x30a0 <PM_ShowStoredItemSizes+0x68>
    3092:	42 c0       	rjmp	.+132    	; 0x3118 <PM_ShowStoredItemSizes+0xe0>
    3094:	82 30       	cpi	r24, 0x02	; 2
    3096:	91 05       	cpc	r25, r1
    3098:	01 f1       	breq	.+64     	; 0x30da <PM_ShowStoredItemSizes+0xa2>
    309a:	03 97       	sbiw	r24, 0x03	; 3
    309c:	39 f1       	breq	.+78     	; 0x30ec <PM_ShowStoredItemSizes+0xb4>
    309e:	3c c0       	rjmp	.+120    	; 0x3118 <PM_ShowStoredItemSizes+0xe0>
			{
				case 0:
					strcpy_P(Buffer, PSTR("DATA-"));
    30a0:	6b ee       	ldi	r22, 0xEB	; 235
    30a2:	73 e0       	ldi	r23, 0x03	; 3
    30a4:	ce 01       	movw	r24, r28
    30a6:	01 96       	adiw	r24, 0x01	; 1
    30a8:	0e 94 6f 19 	call	0x32de <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_FLASH), &Buffer[5], 10);
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	07 c0       	rjmp	.+14     	; 0x30be <PM_ShowStoredItemSizes+0x86>
					break;
				case 1:
					strcpy_P(Buffer, PSTR("EPRM-"));
    30b0:	61 ef       	ldi	r22, 0xF1	; 241
    30b2:	73 e0       	ldi	r23, 0x03	; 3
    30b4:	ce 01       	movw	r24, r28
    30b6:	01 96       	adiw	r24, 0x01	; 1
    30b8:	0e 94 6f 19 	call	0x32de <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_EEPROM), &Buffer[5], 10);
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	0e 94 34 13 	call	0x2668 <PM_GetStoredDataSize>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	2a e0       	ldi	r18, 0x0A	; 10
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	ae 01       	movw	r20, r28
    30cc:	4a 5f       	subi	r20, 0xFA	; 250
    30ce:	5f 4f       	sbci	r21, 0xFF	; 255
    30d0:	bc 01       	movw	r22, r24
    30d2:	cd 01       	movw	r24, r26
    30d4:	0e 94 76 19 	call	0x32ec <ultoa>
					break;
    30d8:	1f c0       	rjmp	.+62     	; 0x3118 <PM_ShowStoredItemSizes+0xe0>
				case 2:
					strcpy_P(Buffer, PSTR("FUSE-"));
    30da:	67 ef       	ldi	r22, 0xF7	; 247
    30dc:	73 e0       	ldi	r23, 0x03	; 3
    30de:	ce 01       	movw	r24, r28
    30e0:	01 96       	adiw	r24, 0x01	; 1
    30e2:	0e 94 6f 19 	call	0x32de <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    30e6:	af e2       	ldi	r26, 0x2F	; 47
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	08 c0       	rjmp	.+16     	; 0x30fc <PM_ShowStoredItemSizes+0xc4>
					TempB = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);
					break;
				case 3:
					strcpy_P(Buffer, PSTR("LOCK-"));
    30ec:	6d ef       	ldi	r22, 0xFD	; 253
    30ee:	73 e0       	ldi	r23, 0x03	; 3
    30f0:	ce 01       	movw	r24, r28
    30f2:	01 96       	adiw	r24, 0x01	; 1
    30f4:	0e 94 6f 19 	call	0x32de <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    30f8:	a0 e3       	ldi	r26, 0x30	; 48
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    30fc:	0e 94 ca 19 	call	0x3394 <__eeprom_read_byte_1F2021>
    3100:	80 2d       	mov	r24, r0
					TempB = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);		
    3102:	8f 3f       	cpi	r24, 0xFF	; 255
    3104:	11 f0       	breq	.+4      	; 0x310a <PM_ShowStoredItemSizes+0xd2>
    3106:	99 27       	eor	r25, r25
    3108:	02 c0       	rjmp	.+4      	; 0x310e <PM_ShowStoredItemSizes+0xd6>
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	be 01       	movw	r22, r28
    3110:	6a 5f       	subi	r22, 0xFA	; 250
    3112:	7f 4f       	sbci	r23, 0xFF	; 255
    3114:	0e 94 27 03 	call	0x64e <MAIN_IntToStr>
			}
	
			LCD_puts(Buffer);
    3118:	ce 01       	movw	r24, r28
    311a:	01 96       	adiw	r24, 0x01	; 1
    311c:	0e 94 ac 07 	call	0xf58 <LCD_puts>

			MAIN_WaitForJoyRelease();
    3120:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
    3124:	97 cf       	rjmp	.-210    	; 0x3054 <PM_ShowStoredItemSizes+0x1c>
    3126:	2e 96       	adiw	r28, 0x0e	; 14
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	de bf       	out	0x3e, r29	; 62
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	cd bf       	out	0x3d, r28	; 61
    3132:	df 91       	pop	r29
    3134:	cf 91       	pop	r28
    3136:	1f 91       	pop	r17
    3138:	08 95       	ret

0000313a <TM_FindNextTag>:
	DF_EnableDataflash(FALSE);
}

void TM_FindNextTag(void)
{
    313a:	af 92       	push	r10
    313c:	bf 92       	push	r11
    313e:	df 92       	push	r13
    3140:	ef 92       	push	r14
    3142:	ff 92       	push	r15
    3144:	0f 93       	push	r16
    3146:	1f 93       	push	r17
    3148:	cf 93       	push	r28
    314a:	df 93       	push	r29
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    3150:	69 97       	sbiw	r28, 0x19	; 25
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Buffer[21];
	uint8_t  HeadBuff[4]      = BT_TAGHEADER;
    315c:	80 e4       	ldi	r24, 0x40	; 64
    315e:	8e 8b       	std	Y+22, r24	; 0x16
    3160:	86 e1       	ldi	r24, 0x16	; 22
    3162:	a8 2e       	mov	r10, r24
    3164:	b1 2c       	mov	r11, r1
    3166:	ac 0e       	add	r10, r28
    3168:	bd 1e       	adc	r11, r29
    316a:	88 e2       	ldi	r24, 0x28	; 40
    316c:	8f 8b       	std	Y+23, r24	; 0x17
    316e:	83 e2       	ldi	r24, 0x23	; 35
    3170:	88 8f       	std	Y+24, r24	; 0x18
    3172:	89 e2       	ldi	r24, 0x29	; 41
    3174:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t ProgDataSize     = PM_GetStoredDataSize(TYPE_FLASH);
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	0e 94 34 13 	call	0x2668 <PM_GetStoredDataSize>
    317c:	7b 01       	movw	r14, r22
    317e:	8c 01       	movw	r16, r24
	uint8_t  TotalOkHeadBytes = 0;
    3180:	dd 24       	eor	r13, r13
	uint8_t  TagByte;
	uint8_t  BytesRead;
	
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);    // Orange = busy
    3182:	81 b3       	in	r24, 0x11	; 17
    3184:	80 63       	ori	r24, 0x30	; 48
    3186:	81 bb       	out	0x11, r24	; 17

	while (DFPos < ProgDataSize)
	{
		BytesRead = 1;
		
		if (SPI_SPITransmit(0x00) == HeadBuff[TotalOkHeadBytes++])
		{
			if (TotalOkHeadBytes == 4)
			{
				uint8_t HB;
			
				for (HB = 0; HB < 20; HB++)
				{
					TagByte = SPI_SPITransmit(0x00);
					Buffer[HB] = TagByte;
					
					if (TagByte == 0x00)
					  break;
				}
				
				Buffer[20] = '\0';             // Make sure string is null-terminated

				TagExists = TRUE;
				BytesRead = (HB + 2);

				LCD_puts(Buffer);
				MAIN_SETSTATUSLED(MAIN_STATLED_GREEN); // Green = ready
				return;
			}
		}
		else
		{
			TotalOkHeadBytes = 0;
		}

		DFPos += BytesRead;
    3188:	80 91 b0 02 	lds	r24, 0x02B0
    318c:	90 91 b1 02 	lds	r25, 0x02B1
    3190:	a0 91 b2 02 	lds	r26, 0x02B2
    3194:	b0 91 b3 02 	lds	r27, 0x02B3
    3198:	8e 15       	cp	r24, r14
    319a:	9f 05       	cpc	r25, r15
    319c:	a0 07       	cpc	r26, r16
    319e:	b1 07       	cpc	r27, r17
    31a0:	08 f0       	brcs	.+2      	; 0x31a4 <TM_FindNextTag+0x6a>
    31a2:	43 c0       	rjmp	.+134    	; 0x322a <TM_FindNextTag+0xf0>
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
    31aa:	f5 01       	movw	r30, r10
    31ac:	ed 0d       	add	r30, r13
    31ae:	f1 1d       	adc	r31, r1
    31b0:	d3 94       	inc	r13
    31b2:	90 81       	ld	r25, Z
    31b4:	89 17       	cp	r24, r25
    31b6:	21 f5       	brne	.+72     	; 0x3200 <TM_FindNextTag+0xc6>
    31b8:	84 e0       	ldi	r24, 0x04	; 4
    31ba:	d8 16       	cp	r13, r24
    31bc:	11 f5       	brne	.+68     	; 0x3202 <TM_FindNextTag+0xc8>
    31be:	ff 24       	eor	r15, r15
    31c0:	00 e0       	ldi	r16, 0x00	; 0
    31c2:	10 e0       	ldi	r17, 0x00	; 0
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	0e 94 e5 08 	call	0x11ca <SPI_SPITransmit>
    31ca:	9e 01       	movw	r18, r28
    31cc:	2f 5f       	subi	r18, 0xFF	; 255
    31ce:	3f 4f       	sbci	r19, 0xFF	; 255
    31d0:	f8 01       	movw	r30, r16
    31d2:	e2 0f       	add	r30, r18
    31d4:	f3 1f       	adc	r31, r19
    31d6:	80 83       	st	Z, r24
    31d8:	88 23       	and	r24, r24
    31da:	31 f0       	breq	.+12     	; 0x31e8 <TM_FindNextTag+0xae>
    31dc:	f3 94       	inc	r15
    31de:	0f 5f       	subi	r16, 0xFF	; 255
    31e0:	1f 4f       	sbci	r17, 0xFF	; 255
    31e2:	83 e1       	ldi	r24, 0x13	; 19
    31e4:	8f 15       	cp	r24, r15
    31e6:	70 f7       	brcc	.-36     	; 0x31c4 <TM_FindNextTag+0x8a>
    31e8:	1d 8a       	std	Y+21, r1	; 0x15
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	80 93 29 02 	sts	0x0229, r24
    31f0:	c9 01       	movw	r24, r18
    31f2:	0e 94 ac 07 	call	0xf58 <LCD_puts>
    31f6:	81 b3       	in	r24, 0x11	; 17
    31f8:	8f 7c       	andi	r24, 0xCF	; 207
    31fa:	80 61       	ori	r24, 0x10	; 16
    31fc:	81 bb       	out	0x11, r24	; 17
    31fe:	31 c0       	rjmp	.+98     	; 0x3262 <TM_FindNextTag+0x128>
    3200:	dd 24       	eor	r13, r13
    3202:	80 91 b0 02 	lds	r24, 0x02B0
    3206:	90 91 b1 02 	lds	r25, 0x02B1
    320a:	a0 91 b2 02 	lds	r26, 0x02B2
    320e:	b0 91 b3 02 	lds	r27, 0x02B3
    3212:	01 96       	adiw	r24, 0x01	; 1
    3214:	a1 1d       	adc	r26, r1
    3216:	b1 1d       	adc	r27, r1
    3218:	80 93 b0 02 	sts	0x02B0, r24
    321c:	90 93 b1 02 	sts	0x02B1, r25
    3220:	a0 93 b2 02 	sts	0x02B2, r26
    3224:	b0 93 b3 02 	sts	0x02B3, r27
    3228:	b7 cf       	rjmp	.-146    	; 0x3198 <TM_FindNextTag+0x5e>
	}
	
	DF_ContinuousReadEnable(0, 0);
    322a:	60 e0       	ldi	r22, 0x00	; 0
    322c:	70 e0       	ldi	r23, 0x00	; 0
    322e:	cb 01       	movw	r24, r22
    3230:	0e 94 bd 09 	call	0x137a <DF_ContinuousReadEnable>
	DFPos = 0;
    3234:	10 92 b0 02 	sts	0x02B0, r1
    3238:	10 92 b1 02 	sts	0x02B1, r1
    323c:	10 92 b2 02 	sts	0x02B2, r1
    3240:	10 92 b3 02 	sts	0x02B3, r1
	
	if (TagExists == FALSE)
    3244:	80 91 29 02 	lds	r24, 0x0229
    3248:	88 23       	and	r24, r24
    324a:	49 f4       	brne	.+18     	; 0x325e <TM_FindNextTag+0x124>
	{
		MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);  // Green = ready
    324c:	81 b3       	in	r24, 0x11	; 17
    324e:	8f 7c       	andi	r24, 0xCF	; 207
    3250:	80 61       	ori	r24, 0x10	; 16
    3252:	81 bb       	out	0x11, r24	; 17
		MAIN_ShowError(PSTR("NO TAGS"));
    3254:	83 e0       	ldi	r24, 0x03	; 3
    3256:	94 e0       	ldi	r25, 0x04	; 4
    3258:	0e 94 61 03 	call	0x6c2 <MAIN_ShowError>
    325c:	02 c0       	rjmp	.+4      	; 0x3262 <TM_FindNextTag+0x128>
	}
	else
	{
		/* The following line _is_ recursion, but the function will only ever call itself
		   a maximum of one time. The function will call itself upon skipping from the last
		   tag stored in the program data to the first; to guard against infinite recursion
		   if no tags are present, the system will error out if the TagExists flag is empty
		   after a full data read. Once a tag has been read and displayed onto the LCD, the
           function returns to the main tag handling routine.                               */
		TM_FindNextTag();
    325e:	0e 94 9d 18 	call	0x313a <TM_FindNextTag>
    3262:	69 96       	adiw	r28, 0x19	; 25
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61
    326e:	df 91       	pop	r29
    3270:	cf 91       	pop	r28
    3272:	1f 91       	pop	r17
    3274:	0f 91       	pop	r16
    3276:	ff 90       	pop	r15
    3278:	ef 90       	pop	r14
    327a:	df 90       	pop	r13
    327c:	bf 90       	pop	r11
    327e:	af 90       	pop	r10
    3280:	08 95       	ret

00003282 <TM_ShowTags>:
    3282:	60 e0       	ldi	r22, 0x00	; 0
    3284:	70 e0       	ldi	r23, 0x00	; 0
    3286:	cb 01       	movw	r24, r22
    3288:	0e 94 bd 09 	call	0x137a <DF_ContinuousReadEnable>
    328c:	10 92 29 02 	sts	0x0229, r1
    3290:	10 92 b0 02 	sts	0x02B0, r1
    3294:	10 92 b1 02 	sts	0x02B1, r1
    3298:	10 92 b2 02 	sts	0x02B2, r1
    329c:	10 92 b3 02 	sts	0x02B3, r1
    32a0:	0e 94 9d 18 	call	0x313a <TM_FindNextTag>
    32a4:	80 91 29 02 	lds	r24, 0x0229
    32a8:	88 23       	and	r24, r24
    32aa:	71 f0       	breq	.+28     	; 0x32c8 <TM_ShowTags+0x46>
    32ac:	8e b3       	in	r24, 0x1e	; 30
    32ae:	88 23       	and	r24, r24
    32b0:	e9 f3       	breq	.-6      	; 0x32ac <TM_ShowTags+0x2a>
    32b2:	f7 9b       	sbis	0x1e, 7	; 30
    32b4:	03 c0       	rjmp	.+6      	; 0x32bc <TM_ShowTags+0x3a>
    32b6:	0e 94 9d 18 	call	0x313a <TM_FindNextTag>
    32ba:	02 c0       	rjmp	.+4      	; 0x32c0 <TM_ShowTags+0x3e>
    32bc:	f2 99       	sbic	0x1e, 2	; 30
    32be:	03 c0       	rjmp	.+6      	; 0x32c6 <TM_ShowTags+0x44>
    32c0:	0e 94 35 02 	call	0x46a <MAIN_WaitForJoyRelease>
    32c4:	f3 cf       	rjmp	.-26     	; 0x32ac <TM_ShowTags+0x2a>
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	0e 94 7f 09 	call	0x12fe <DF_EnableDataflash>
    32cc:	08 95       	ret

000032ce <__vector_2>:
.global PCINT0_vect             ; Pin change 0 (joystick)
.global PCINT1_vect             ; Pin change 1 (joystick)

PCINT0_vect:
  jmp PCINT1_vect
    32ce:	0c 94 87 03 	jmp	0x70e <__vector_3>

000032d2 <__vector_10>:

.global TIMER0_COMP_vect             ; Timer 0 compare

TIMER0_COMP_vect:
  push r24
    32d2:	8f 93       	push	r24
  ldi r24, (USI_CONTROL_REG_FLAGS | (1<<USITC))
    32d4:	8b e5       	ldi	r24, 0x5B	; 91
  sts _SFR_MEM_ADDR(USICR), r24
    32d6:	80 93 b8 00 	sts	0x00B8, r24
  pop r24
    32da:	8f 91       	pop	r24
  reti
    32dc:	18 95       	reti

000032de <strcpy_P>:
    32de:	fb 01       	movw	r30, r22
    32e0:	dc 01       	movw	r26, r24
    32e2:	05 90       	lpm	r0, Z+
    32e4:	0d 92       	st	X+, r0
    32e6:	00 20       	and	r0, r0
    32e8:	e1 f7       	brne	.-8      	; 0x32e2 <strcpy_P+0x4>
    32ea:	08 95       	ret

000032ec <ultoa>:
    32ec:	fa 01       	movw	r30, r20
    32ee:	cf 93       	push	r28
    32f0:	ff 93       	push	r31
    32f2:	ef 93       	push	r30
    32f4:	22 30       	cpi	r18, 0x02	; 2
    32f6:	cc f0       	brlt	.+50     	; 0x332a <ultoa+0x3e>
    32f8:	25 32       	cpi	r18, 0x25	; 37
    32fa:	bc f4       	brge	.+46     	; 0x332a <ultoa+0x3e>
    32fc:	c2 2f       	mov	r28, r18
    32fe:	2c 2f       	mov	r18, r28
    3300:	33 27       	eor	r19, r19
    3302:	44 27       	eor	r20, r20
    3304:	55 27       	eor	r21, r21
    3306:	ff 93       	push	r31
    3308:	ef 93       	push	r30
    330a:	0e 94 f2 19 	call	0x33e4 <__udivmodsi4>
    330e:	ef 91       	pop	r30
    3310:	ff 91       	pop	r31
    3312:	60 5d       	subi	r22, 0xD0	; 208
    3314:	6a 33       	cpi	r22, 0x3A	; 58
    3316:	0c f0       	brlt	.+2      	; 0x331a <ultoa+0x2e>
    3318:	69 5d       	subi	r22, 0xD9	; 217
    331a:	61 93       	st	Z+, r22
    331c:	b9 01       	movw	r22, r18
    331e:	ca 01       	movw	r24, r20
    3320:	60 50       	subi	r22, 0x00	; 0
    3322:	70 40       	sbci	r23, 0x00	; 0
    3324:	80 40       	sbci	r24, 0x00	; 0
    3326:	90 40       	sbci	r25, 0x00	; 0
    3328:	51 f7       	brne	.-44     	; 0x32fe <ultoa+0x12>
    332a:	10 82       	st	Z, r1
    332c:	8f 91       	pop	r24
    332e:	9f 91       	pop	r25
    3330:	cf 91       	pop	r28
    3332:	0c 94 9b 19 	jmp	0x3336 <strrev>

00003336 <strrev>:
    3336:	dc 01       	movw	r26, r24
    3338:	fc 01       	movw	r30, r24
    333a:	01 90       	ld	r0, Z+
    333c:	00 20       	and	r0, r0
    333e:	e9 f7       	brne	.-6      	; 0x333a <strrev+0x4>
    3340:	32 97       	sbiw	r30, 0x02	; 2
    3342:	ae 17       	cp	r26, r30
    3344:	bf 07       	cpc	r27, r31
    3346:	30 f4       	brcc	.+12     	; 0x3354 <strrev+0x1e>
    3348:	7c 91       	ld	r23, X
    334a:	60 81       	ld	r22, Z
    334c:	70 83       	st	Z, r23
    334e:	31 97       	sbiw	r30, 0x01	; 1
    3350:	6d 93       	st	X+, r22
    3352:	f7 cf       	rjmp	.-18     	; 0x3342 <strrev+0xc>
    3354:	08 95       	ret

00003356 <__mulsi3>:
    3356:	62 9f       	mul	r22, r18
    3358:	d0 01       	movw	r26, r0
    335a:	73 9f       	mul	r23, r19
    335c:	f0 01       	movw	r30, r0
    335e:	82 9f       	mul	r24, r18
    3360:	e0 0d       	add	r30, r0
    3362:	f1 1d       	adc	r31, r1
    3364:	64 9f       	mul	r22, r20
    3366:	e0 0d       	add	r30, r0
    3368:	f1 1d       	adc	r31, r1
    336a:	92 9f       	mul	r25, r18
    336c:	f0 0d       	add	r31, r0
    336e:	83 9f       	mul	r24, r19
    3370:	f0 0d       	add	r31, r0
    3372:	74 9f       	mul	r23, r20
    3374:	f0 0d       	add	r31, r0
    3376:	65 9f       	mul	r22, r21
    3378:	f0 0d       	add	r31, r0
    337a:	99 27       	eor	r25, r25
    337c:	72 9f       	mul	r23, r18
    337e:	b0 0d       	add	r27, r0
    3380:	e1 1d       	adc	r30, r1
    3382:	f9 1f       	adc	r31, r25
    3384:	63 9f       	mul	r22, r19
    3386:	b0 0d       	add	r27, r0
    3388:	e1 1d       	adc	r30, r1
    338a:	f9 1f       	adc	r31, r25
    338c:	bd 01       	movw	r22, r26
    338e:	cf 01       	movw	r24, r30
    3390:	11 24       	eor	r1, r1
    3392:	08 95       	ret

00003394 <__eeprom_read_byte_1F2021>:
    3394:	f9 99       	sbic	0x1f, 1	; 31
    3396:	fe cf       	rjmp	.-4      	; 0x3394 <__eeprom_read_byte_1F2021>
    3398:	b2 bd       	out	0x22, r27	; 34
    339a:	a1 bd       	out	0x21, r26	; 33
    339c:	f8 9a       	sbi	0x1f, 0	; 31
    339e:	11 96       	adiw	r26, 0x01	; 1
    33a0:	00 b4       	in	r0, 0x20	; 32
    33a2:	08 95       	ret

000033a4 <__eeprom_read_block_1F2021>:
    33a4:	f7 df       	rcall	.-18     	; 0x3394 <__eeprom_read_byte_1F2021>
    33a6:	01 92       	st	Z+, r0
    33a8:	1a 94       	dec	r1
    33aa:	e1 f7       	brne	.-8      	; 0x33a4 <__eeprom_read_block_1F2021>
    33ac:	08 95       	ret

000033ae <__eeprom_read_word_1F2021>:
    33ae:	f2 df       	rcall	.-28     	; 0x3394 <__eeprom_read_byte_1F2021>
    33b0:	e0 2d       	mov	r30, r0
    33b2:	f0 df       	rcall	.-32     	; 0x3394 <__eeprom_read_byte_1F2021>
    33b4:	f0 2d       	mov	r31, r0
    33b6:	08 95       	ret

000033b8 <__eeprom_write_byte_1F2021>:
    33b8:	f9 99       	sbic	0x1f, 1	; 31
    33ba:	fe cf       	rjmp	.-4      	; 0x33b8 <__eeprom_write_byte_1F2021>
    33bc:	b2 bd       	out	0x22, r27	; 34
    33be:	a1 bd       	out	0x21, r26	; 33
    33c0:	00 bc       	out	0x20, r0	; 32
    33c2:	11 96       	adiw	r26, 0x01	; 1
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	f8 94       	cli
    33c8:	fa 9a       	sbi	0x1f, 2	; 31
    33ca:	f9 9a       	sbi	0x1f, 1	; 31
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	08 95       	ret

000033d0 <__eeprom_write_word_1F2021>:
    33d0:	f3 df       	rcall	.-26     	; 0x33b8 <__eeprom_write_byte_1F2021>
    33d2:	01 2c       	mov	r0, r1
    33d4:	f1 df       	rcall	.-30     	; 0x33b8 <__eeprom_write_byte_1F2021>
    33d6:	11 24       	eor	r1, r1
    33d8:	08 95       	ret

000033da <__eeprom_write_block_1F2021>:
    33da:	01 90       	ld	r0, Z+
    33dc:	ed df       	rcall	.-38     	; 0x33b8 <__eeprom_write_byte_1F2021>
    33de:	1a 94       	dec	r1
    33e0:	e1 f7       	brne	.-8      	; 0x33da <__eeprom_write_block_1F2021>
    33e2:	08 95       	ret

000033e4 <__udivmodsi4>:
    33e4:	a1 e2       	ldi	r26, 0x21	; 33
    33e6:	1a 2e       	mov	r1, r26
    33e8:	aa 1b       	sub	r26, r26
    33ea:	bb 1b       	sub	r27, r27
    33ec:	fd 01       	movw	r30, r26
    33ee:	0d c0       	rjmp	.+26     	; 0x340a <__udivmodsi4_ep>

000033f0 <__udivmodsi4_loop>:
    33f0:	aa 1f       	adc	r26, r26
    33f2:	bb 1f       	adc	r27, r27
    33f4:	ee 1f       	adc	r30, r30
    33f6:	ff 1f       	adc	r31, r31
    33f8:	a2 17       	cp	r26, r18
    33fa:	b3 07       	cpc	r27, r19
    33fc:	e4 07       	cpc	r30, r20
    33fe:	f5 07       	cpc	r31, r21
    3400:	20 f0       	brcs	.+8      	; 0x340a <__udivmodsi4_ep>
    3402:	a2 1b       	sub	r26, r18
    3404:	b3 0b       	sbc	r27, r19
    3406:	e4 0b       	sbc	r30, r20
    3408:	f5 0b       	sbc	r31, r21

0000340a <__udivmodsi4_ep>:
    340a:	66 1f       	adc	r22, r22
    340c:	77 1f       	adc	r23, r23
    340e:	88 1f       	adc	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	1a 94       	dec	r1
    3414:	69 f7       	brne	.-38     	; 0x33f0 <__udivmodsi4_loop>
    3416:	60 95       	com	r22
    3418:	70 95       	com	r23
    341a:	80 95       	com	r24
    341c:	90 95       	com	r25
    341e:	9b 01       	movw	r18, r22
    3420:	ac 01       	movw	r20, r24
    3422:	bd 01       	movw	r22, r26
    3424:	cf 01       	movw	r24, r30
    3426:	08 95       	ret
