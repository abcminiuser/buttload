
ButtLoad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000356a  0000361e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000356a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b3  00800102  00800102  00003620  2**0
                  ALLOC
  3 .eeprom       0000008b  00810000  00810000  00003620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000084  00000000  00000000  000036ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000078  00000000  00000000  00003730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 0000012c  00000000  00000000  000037a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000d5a  00000000  00000000  000038d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000044f4  00000000  00000000  0000462e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001290  00000000  00000000  00008b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003338  00000000  00000000  00009db2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000004f8  00000000  00000000  0000d0ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000011ad  00000000  00000000  0000d5e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000011d7  00000000  00000000  0000e78f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  0000f966  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 02 	jmp	0x454	; 0x454 <__ctors_end>
       4:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
       8:	0c 94 26 1a 	jmp	0x344c	; 0x344c <__vector_2>
       c:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__vector_3>
      10:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__vector_4>
      14:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__vector_5>
      18:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      1c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      20:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      24:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__vector_9>
      28:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__vector_10>
      2c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      30:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      34:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__vector_13>
      38:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      3c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      40:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      44:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__vector_17>
      48:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      4c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      50:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      54:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      58:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_22>

0000005c <BUTTTAG_Title>:
      5c:	40 28 23 29 42 55 54 54 4c 4f 41 44 20 41 56 52     @(#)BUTTLOAD AVR
      6c:	49 53 50 00                                         ISP.

00000070 <BUTTTAG_Version>:
      70:	40 28 23 29 56 31 2d 34 00                          @(#)V1-4.

00000079 <BUTTTAG_Author>:
      79:	40 28 23 29 42 59 20 44 45 41 4e 20 43 41 4d 45     @(#)BY DEAN CAME
      89:	52 41 00                                            RA.

0000008c <BUTTTAG_Copyright>:
      8c:	40 28 23 29 3c 43 3e 20 32 30 30 36 20 2d 20 47     @(#)<C> 2006 - G
      9c:	50 4c 00                                            PL.

0000009f <AboutTextPtrs>:
      9f:	60 00 74 00 7d 00 90 00                             `.t.}...

000000a7 <WaitText>:
      a7:	2a 57 41 49 54 2a 00                                *WAIT*.

000000ae <Func_ISPPRGM>:
      ae:	41 56 52 49 53 50 20 4d 4f 44 45 00                 AVRISP MODE.

000000ba <Func_STOREPRGM>:
      ba:	53 54 4f 52 45 20 50 52 47 4d 00                    STORE PRGM.

000000c5 <Func_PRGMAVR>:
      c5:	50 52 4f 47 52 41 4d 20 41 56 52 00                 PROGRAM AVR.

000000d1 <Func_PRGMDATAFLASH>:
      d1:	44 41 54 41 46 4c 41 53 48 20 50 52 47 4d 00        DATAFLASH PRGM.

000000e0 <Func_PRGMSTOREINFO>:
      e0:	44 41 54 41 53 54 4f 52 45 20 49 4e 46 4f 00        DATASTORE INFO.

000000ef <Func_SETTINGS>:
      ef:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

000000f8 <Func_SLEEP>:
      f8:	53 4c 45 45 50 20 4d 4f 44 45 00                    SLEEP MODE.

00000103 <MainFunctionNames>:
     103:	ae 00 ba 00 c5 00 d1 00 e0 00 ef 00 f8 00           ..............

00000111 <MainFunctionPtrs>:
     111:	81 04 53 04 d7 04 aa 04 db 03 1e 03 cc 02           ..S...........

0000011f <SFunc_SETCONTRAST>:
     11f:	53 45 54 20 43 4f 4e 54 52 41 53 54 00              SET CONTRAST.

0000012c <SFunc_SETSPISPEED>:
     12c:	53 45 54 20 53 50 49 20 53 50 45 45 44 00           SET SPI SPEED.

0000013a <SFunc_SETRESETMODE>:
     13a:	53 45 54 20 52 45 53 45 54 20 4d 4f 44 45 00        SET RESET MODE.

00000149 <SFunc_SETFIRMMINOR>:
     149:	53 45 54 20 46 49 52 4d 20 56 45 52 53 49 4f 4e     SET FIRM VERSION
	...

0000015a <SFunc_SETAUTOSLEEPTO>:
     15a:	53 45 54 20 53 4c 45 45 50 20 54 49 4d 45 4f 55     SET SLEEP TIMEOU
     16a:	54 00                                               T.

0000016c <SFunc_CLEARMEM>:
     16c:	43 4c 45 41 52 20 4d 45 4d 4f 52 59 00              CLEAR MEMORY.

00000179 <SFunc_GOBOOTLOADER>:
     179:	4a 55 4d 50 20 54 4f 20 42 4f 4f 54 4c 4f 41 44     JUMP TO BOOTLOAD
     189:	45 52 00                                            ER.

0000018c <SettingFunctionNames>:
     18c:	1f 01 2c 01 3a 01 49 01 5a 01 6c 01 79 01           ..,.:.I.Z.l.y.

0000019a <SettingFunctionPtrs>:
     19a:	ef 06 3b 07 6e 07 96 07 53 03 bc 06 e6 02           ..;.n...S.....

000001a8 <PRG_A>:
     1a8:	50 52 47 4d 20 41 4c 4c 00                          PRGM ALL.

000001b1 <PRG_D>:
     1b1:	44 41 54 41 20 4f 4e 4c 59 00                       DATA ONLY.

000001bb <PRG_E>:
     1bb:	45 45 50 52 4f 4d 20 4f 4e 4c 59 00                 EEPROM ONLY.

000001c7 <PRG_DE>:
     1c7:	44 41 54 41 20 41 4e 44 20 45 45 50 52 4f 4d 00     DATA AND EEPROM.

000001d7 <PRG_F>:
     1d7:	46 55 53 45 20 42 59 54 45 53 20 4f 4e 4c 59 00     FUSE BYTES ONLY.

000001e7 <PRG_L>:
     1e7:	4c 4f 43 4b 20 42 59 54 45 53 20 4f 4e 4c 59 00     LOCK BYTES ONLY.

000001f7 <PRG_FL>:
     1f7:	46 55 53 45 20 41 4e 44 20 4c 4f 43 4b 20 42 59     FUSE AND LOCK BY
     207:	54 45 53 00                                         TES.

0000020b <PRG_C>:
     20b:	45 52 41 53 45 20 4f 4e 4c 59 00                    ERASE ONLY.

00000216 <ProgOptions>:
     216:	a8 01 b1 01 bb 01 c7 01 d7 01 e7 01 f7 01 0b 02     ................

00000226 <USISpeeds>:
     226:	20 35 37 31 35 33 20 48 5a 00 20 38 36 37 33 38      57153 HZ. 86738
     236:	20 48 5a 00 31 31 33 34 32 37 20 48 5a 00 32 31      HZ.113427 HZ.21
     246:	30 36 35 31 20 48 5a 00                             0651 HZ.

0000024e <SPIResetModes>:
     24e:	4c 4f 47 49 43 00 46 4c 4f 41 54 00                 LOGIC.FLOAT.

0000025a <SIFONames>:
     25a:	53 54 4f 52 41 47 45 20 53 49 5a 45 53 00 00 56     STORAGE SIZES..V
     26a:	49 45 57 20 44 41 54 41 20 54 41 47 53 00           IEW DATA TAGS.

00000278 <__c.2500>:
     278:	2a 4a 54 41 47 20 4f 4e 2a 00                       *JTAG ON*.

00000282 <__c.2469>:
     282:	4e 4f 20 53 54 4f 52 45 44 20 50 52 47 4d 00        NO STORED PRGM.

00000291 <__c.2415>:
     291:	4f 46 46 00                                         OFF.

00000295 <__c.2413>:
     295:	20 20 20 20 53 45 43 00                                 SEC.

0000029d <__c.2392>:
     29d:	56 32 2d 20 00                                      V2- .

000002a2 <__c.2294>:
     2a2:	4d 45 4d 20 43 4c 45 41 52 45 44 00                 MEM CLEARED.

000002ae <__c.2286>:
     2ae:	3c 4e 20 59 3e 00                                   <N Y>.

000002b4 <__c.2284>:
     2b4:	43 4f 4e 46 49 52 4d 00                             CONFIRM.

000002bc <__c.2267>:
     2bc:	2a 53 54 4f 52 41 47 45 20 4d 4f 44 45 2a 00        *STORAGE MODE*.

000002cb <__c.2200>:
     2cb:	46 41 49 4c 45 44 00                                FAILED.

000002d2 <__c.2198>:
     2d2:	50 52 4f 47 52 41 4d 4d 49 4e 47 20 44 4f 4e 45     PROGRAMMING DONE
	...

000002e3 <__c.2196>:
     2e3:	4e 4f 20 4c 4f 43 4b 20 42 59 54 45 53 00           NO LOCK BYTES.

000002f1 <__c.2194>:
     2f1:	4e 4f 20 46 55 53 45 20 42 59 54 45 53 00           NO FUSE BYTES.

000002ff <__c.2192>:
     2ff:	4e 4f 20 45 45 50 52 4f 4d 00                       NO EEPROM.

00000309 <__c.2190>:
     309:	4e 4f 20 44 41 54 41 00                             NO DATA.

00000311 <__c.2188>:
     311:	4e 4f 20 45 52 41 53 45 20 43 4d 44 00              NO ERASE CMD.

0000031e <__c.2084>:
     31e:	42 41 44 49 53 52 00                                BADISR.

00000325 <__c.2034>:
     325:	50 52 47 3e 20 20 00                                PRG>  .

0000032c <LCD_SegTable>:
     32c:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
     33c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
     34c:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
     35c:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
     36c:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
     37c:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
     38c:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

00000398 <USIPSValues>:
     398:	03 80 02 54 01 40 00 22                             ...T.@."

000003a0 <DF_PageBits>:
     3a0:	09 09 09 09 09 0a 0a 0b                             ........

000003a8 <DF_PageSize>:
     3a8:	08 01 08 01 08 01 08 01 08 01 10 02 10 02 20 04     .............. .

000003b8 <DF_Pages>:
     3b8:	00 01 00 02 00 04 00 08 00 10 00 10 00 20 00 20     ............. . 

000003c8 <DataFlashError>:
     3c8:	44 41 54 41 46 4c 41 53 48 20 45 52 52 4f 52 00     DATAFLASH ERROR.

000003d8 <__c.1865>:
     3d8:	42 55 46 46 20 4f 56 46 00                          BUFF OVF.

000003e1 <AutoSleepTOValues>:
     3e1:	00 0f 1e 3c 78                                      ...<x

000003e6 <DataFlashProgMode>:
     3e6:	2a 44 41 54 41 46 4c 41 53 48 20 4d 4f 44 45 2a     *DATAFLASH MODE*
	...

000003f7 <SignonResponse>:
     3f7:	01 00 08 41 56 52 49 53 50 5f 32 00                 ...AVRISP_2.

00000403 <ButtLoadData>:
     403:	40 28 23 29 2a 53 43 52 45 57 20 52 45 54 52 4f     @(#)*SCREW RETRO
     413:	44 41 4e 00 2a                                      DAN.*

00000418 <SyncErrorMessage>:
     418:	53 59 4e 43 20 45 52 52 4f 52 00                    SYNC ERROR.

00000423 <AVRISPModeMessage>:
     423:	2a 41 54 41 56 52 49 53 50 20 4d 4f 44 45 2a 00     *ATAVRISP MODE*.

00000433 <__c.2142>:
     433:	4c 4f 43 4b 2d 00                                   LOCK-.

00000439 <__c.2139>:
     439:	46 55 53 45 2d 00                                   FUSE-.

0000043f <__c.2136>:
     43f:	45 50 52 4d 2d 00                                   EPRM-.

00000445 <__c.2132>:
     445:	44 41 54 41 2d 00                                   DATA-.

0000044b <__c.1887>:
     44b:	4e 4f 20 54 41 47 53 00 00                          NO TAGS..

00000454 <__ctors_end>:
     454:	11 24       	eor	r1, r1
     456:	1f be       	out	0x3f, r1	; 63
     458:	cf ef       	ldi	r28, 0xFF	; 255
     45a:	d4 e0       	ldi	r29, 0x04	; 4
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	cd bf       	out	0x3d, r28	; 61

00000460 <__do_copy_data>:
     460:	11 e0       	ldi	r17, 0x01	; 1
     462:	a0 e0       	ldi	r26, 0x00	; 0
     464:	b1 e0       	ldi	r27, 0x01	; 1
     466:	ea e6       	ldi	r30, 0x6A	; 106
     468:	f5 e3       	ldi	r31, 0x35	; 53
     46a:	02 c0       	rjmp	.+4      	; 0x470 <.do_copy_data_start>

0000046c <.do_copy_data_loop>:
     46c:	05 90       	lpm	r0, Z+
     46e:	0d 92       	st	X+, r0

00000470 <.do_copy_data_start>:
     470:	a2 30       	cpi	r26, 0x02	; 2
     472:	b1 07       	cpc	r27, r17
     474:	d9 f7       	brne	.-10     	; 0x46c <.do_copy_data_loop>

00000476 <__do_clear_bss>:
     476:	12 e0       	ldi	r17, 0x02	; 2
     478:	a2 e0       	ldi	r26, 0x02	; 2
     47a:	b1 e0       	ldi	r27, 0x01	; 1
     47c:	01 c0       	rjmp	.+2      	; 0x480 <.do_clear_bss_start>

0000047e <.do_clear_bss_loop>:
     47e:	1d 92       	st	X+, r1

00000480 <.do_clear_bss_start>:
     480:	a5 3b       	cpi	r26, 0xB5	; 181
     482:	b1 07       	cpc	r27, r17
     484:	e1 f7       	brne	.-8      	; 0x47e <.do_clear_bss_loop>
     486:	0e 94 2c 06 	call	0xc58	; 0xc58 <main>
     48a:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <_exit>

0000048e <__bad_interrupt>:
     48e:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__vector_default>

00000492 <MAIN_Delay10MS>:

// ======================================================================================

void MAIN_Delay10MS(uint8_t loops)
{
     492:	28 2f       	mov	r18, r24
     494:	e0 e0       	ldi	r30, 0x00	; 0
     496:	f8 e4       	ldi	r31, 0x48	; 72
     498:	03 c0       	rjmp	.+6      	; 0x4a0 <MAIN_Delay10MS+0xe>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     49a:	cf 01       	movw	r24, r30
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <MAIN_Delay10MS+0xa>
  /* Prevents the use of floating point libraries. Delaying in groups of
     10ms increases accuracy by reducing the time overhead for each loop
     interation of the while.                                            */

	while (loops--)
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	d8 f7       	brcc	.-10     	; 0x49a <MAIN_Delay10MS+0x8>
     4a4:	08 95       	ret

000004a6 <MAIN_Delay1MS>:
	  _delay_ms(10);
}

void MAIN_Delay1MS(uint8_t loops)
{
     4a6:	28 2f       	mov	r18, r24
     4a8:	e3 e3       	ldi	r30, 0x33	; 51
     4aa:	f7 e0       	ldi	r31, 0x07	; 7
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <MAIN_Delay1MS+0xe>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4ae:	cf 01       	movw	r24, r30
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <MAIN_Delay1MS+0xa>
  /* Prevents the use of floating point libraries. Less accurate than the
     Delay10MS routine, but nessesary for many commands. The overhead required
     to call the routine is substantially less than the overhead required to
     calculate the float at compile time, so this actually saves execution time. */

	while (loops--)
     4b4:	21 50       	subi	r18, 0x01	; 1
     4b6:	d8 f7       	brcc	.-10     	; 0x4ae <MAIN_Delay1MS+0x8>
     4b8:	08 95       	ret

000004ba <MAIN_ResetCSLine>:
	  _delay_ms(1);
}

void MAIN_ResetCSLine(const uint8_t ActiveInactive)
{
     4ba:	81 30       	cpi	r24, 0x01	; 1
     4bc:	81 f0       	breq	.+32     	; 0x4de <MAIN_ResetCSLine+0x24>
	/* ActiveInactive controls the /Reset line to an AVR device or external dataflash
	/CS line. If the reset polarity parameter is a 0 then interfacing with AT89
	devices which has an active high reset. Pins are tristated when inactive.         */
	
	switch (ActiveInactive)
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	18 f0       	brcs	.+6      	; 0x4c8 <MAIN_ResetCSLine+0xe>
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	01 f5       	brne	.+64     	; 0x506 <__stack+0x7>
     4c6:	09 c0       	rjmp	.+18     	; 0x4da <MAIN_ResetCSLine+0x20>
	{
		case MAIN_RESETCS_ACTIVE:      // The target RESET line may be either active high or low.
			DDRF |= (1 << 6);
     4c8:	86 9a       	sbi	0x10, 6	; 16
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     4ca:	a1 e0       	ldi	r26, 0x01	; 1
     4cc:	b0 e0       	ldi	r27, 0x00	; 0
     4ce:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     4d2:	80 2d       	mov	r24, r0
		
			if (eeprom_read_byte(&EEPROMVars.ResetPolarity)) // Translate to correct active logic level for target device type
     4d4:	88 23       	and	r24, r24
     4d6:	59 f4       	brne	.+22     	; 0x4ee <MAIN_ResetCSLine+0x34>
     4d8:	13 c0       	rjmp	.+38     	; 0x500 <__stack+0x1>
			  PORTF &= ~(1 << 6);
			else
			  PORTF |= (1 << 6);
		
			break;
		case MAIN_RESETCS_EXTDFACTIVE: // Dataflashes are always active low.
			DDRF  |=  (1 << 6);
     4da:	86 9a       	sbi	0x10, 6	; 16
     4dc:	08 c0       	rjmp	.+16     	; 0x4ee <MAIN_ResetCSLine+0x34>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     4de:	a9 e8       	ldi	r26, 0x89	; 137
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     4e6:	80 2d       	mov	r24, r0
			PORTF &= ~(1 << 6);
			
			break;
		case MAIN_RESETCS_INACTIVE:    // Must determine what to do for inactive RESET.
			if (eeprom_read_byte(&EEPROMVars.SPIResetMode)) // FLOAT mode SPI
     4e8:	88 23       	and	r24, r24
     4ea:	19 f0       	breq	.+6      	; 0x4f2 <MAIN_ResetCSLine+0x38>
			{
				DDRF  &= ~(1 << 6);
     4ec:	86 98       	cbi	0x10, 6	; 16
				PORTF &= ~(1 << 6);
     4ee:	8e 98       	cbi	0x11, 6	; 17
     4f0:	08 95       	ret
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     4f2:	a1 e0       	ldi	r26, 0x01	; 1
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     4fa:	80 2d       	mov	r24, r0
			}
			else                                       // ACTIVE type SPI
			{
				if (eeprom_read_byte(&EEPROMVars.ResetPolarity)) // Translate to correct inactive logic level for target device type
     4fc:	88 23       	and	r24, r24
     4fe:	11 f0       	breq	.+4      	; 0x504 <__stack+0x5>
				  PORTF |= (1 << 6);
     500:	8e 9a       	sbi	0x11, 6	; 17
     502:	08 95       	ret
				else
				  PORTF &= ~(1 << 6);			
     504:	8e 98       	cbi	0x11, 6	; 17
     506:	08 95       	ret

00000508 <MAIN_WaitForJoyRelease>:
			}
	}
}

void MAIN_WaitForJoyRelease(void)
{
     508:	8e b3       	in	r24, 0x1e	; 30
     50a:	88 23       	and	r24, r24
     50c:	e9 f7       	brne	.-6      	; 0x508 <MAIN_WaitForJoyRelease>
	while (1)
	{
		while (JoyStatus) {};                   // Wait until joystick released

		MAIN_Delay10MS(2);
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	0e 94 49 02 	call	0x492	; 0x492 <MAIN_Delay10MS>

		if (!(JoyStatus))                       // Joystick still released (not bouncing), return
     514:	8e b3       	in	r24, 0x1e	; 30
     516:	88 23       	and	r24, r24
     518:	b9 f7       	brne	.-18     	; 0x508 <MAIN_WaitForJoyRelease>
     51a:	08 95       	ret

0000051c <MAIN_IntToStr>:
		  return;
	}
}

void MAIN_IntToStr(uint16_t IntV, uint8_t* Buff)
{
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	fb 01       	movw	r30, r22
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	03 c0       	rjmp	.+6      	; 0x52c <MAIN_IntToStr+0x10>
	// Shows leading zeros, unlike itoa.

	uint8_t Temp = 0;
	
	while (IntV >= 100)
	{
		Temp++;
     526:	2f 5f       	subi	r18, 0xFF	; 255
		IntV -= 100;
     528:	84 56       	subi	r24, 0x64	; 100
     52a:	90 40       	sbci	r25, 0x00	; 0
     52c:	84 36       	cpi	r24, 0x64	; 100
     52e:	91 05       	cpc	r25, r1
     530:	d0 f7       	brcc	.-12     	; 0x526 <MAIN_IntToStr+0xa>
	}

	*(Buff++) = '0' + Temp;
     532:	20 5d       	subi	r18, 0xD0	; 208
     534:	21 93       	st	Z+, r18
     536:	df 01       	movw	r26, r30
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	02 c0       	rjmp	.+4      	; 0x540 <MAIN_IntToStr+0x24>
	
	Temp = 0;
	
	while (IntV >= 10)
	{
		Temp++;
     53c:	2f 5f       	subi	r18, 0xFF	; 255
		IntV -= 10;
     53e:	0a 97       	sbiw	r24, 0x0a	; 10
     540:	8a 30       	cpi	r24, 0x0A	; 10
     542:	91 05       	cpc	r25, r1
     544:	d8 f7       	brcc	.-10     	; 0x53c <MAIN_IntToStr+0x20>
	}
		
	*(Buff++) = '0' + Temp;
     546:	20 5d       	subi	r18, 0xD0	; 208
     548:	fd 01       	movw	r30, r26
     54a:	21 93       	st	Z+, r18
	*(Buff++) = '0' + IntV;
     54c:	80 5d       	subi	r24, 0xD0	; 208
     54e:	ed 01       	movw	r28, r26
     550:	89 83       	std	Y+1, r24	; 0x01
	*(Buff)   = '\0';
     552:	11 82       	std	Z+1, r1	; 0x01
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <__vector_3>:
}

void MAIN_ShowProgType(const uint8_t Letter)
{
	uint8_t ProgTypeBuffer[7];

	strcpy_P(ProgTypeBuffer, PSTR("PRG>  "));
	ProgTypeBuffer[5] = Letter;
	
	LCD_puts(ProgTypeBuffer);
}

void MAIN_ShowError(const uint8_t *pFlashStr)
{
	uint8_t ErrorBuff[LCD_TEXTBUFFER_SIZE];   // New buffer, LCD text buffer size
	
	ErrorBuff[0] = 'E';
	ErrorBuff[1] = '>';

	strcpy_P(&ErrorBuff[2], pFlashStr);       // WARNING: If error text is larger than (TEXTBUFFER_SIZE - 2),
	                                          // this will overflow the buffer and probably crash the micro!
	LCD_puts(ErrorBuff);
	
	MAIN_WaitForJoyRelease();
	while (!(JoyStatus & JOY_PRESS)) {};
	MAIN_WaitForJoyRelease();
}

void MAIN_CrashProgram(uint8_t *ErrTxtPtr)
{
	LCD_puts(ErrTxtPtr);
	
	SPI_SPIOFF();
	USI_SPIOff();
	TIMEOUT_PACKET_TIMER_OFF();
	TIMEOUT_SLEEP_TIMER_OFF();
	
	abort();                                  // Infinite loop (part of LibC)
}

// ======================================================================================

ISR(PCINT1_vect, ISR_NOBLOCK)                 // Joystick routine; PCINT0_vect is bound to this also via JoystickInterrupt.S
{
     55a:	78 94       	sei
     55c:	1f 92       	push	r1
     55e:	0f 92       	push	r0
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	0f 92       	push	r0
     564:	11 24       	eor	r1, r1
     566:	8f 93       	push	r24
     568:	9f 93       	push	r25
	JoyStatus = (~PINB & JOY_BMASK)
     56a:	83 b1       	in	r24, 0x03	; 3
     56c:	9c b1       	in	r25, 0x0c	; 12
     56e:	80 95       	com	r24
     570:	80 7d       	andi	r24, 0xD0	; 208
     572:	90 95       	com	r25
     574:	9c 70       	andi	r25, 0x0C	; 12
     576:	89 2b       	or	r24, r25
     578:	8e bb       	out	0x1e, r24	; 30
	          | (~PINE & JOY_EMASK);
			  
	TIMEOUT_SLEEP_TIMEOUT_RESET();
     57a:	10 92 47 01 	sts	0x0147, r1
     57e:	10 92 46 01 	sts	0x0146, r1
     582:	10 92 85 00 	sts	0x0085, r1
     586:	10 92 84 00 	sts	0x0084, r1
     58a:	9f 91       	pop	r25
     58c:	8f 91       	pop	r24
     58e:	0f 90       	pop	r0
     590:	0f be       	out	0x3f, r0	; 63
     592:	0f 90       	pop	r0
     594:	1f 90       	pop	r1
     596:	18 95       	reti

00000598 <FUNCSleepMode>:
}

ISR(BADISR_vect, ISR_NAKED)                   // Bad ISR routine; should never be called, here for safety
{
	MAIN_CrashProgram(PSTR("BADISR"));
}

// ======================================================================================

void FUNCChangeSettings(void)
{
	uint8_t CurrSFunc = 0;
	
	JoyStatus = 1;

	while (1)
	{
		if (JoyStatus)                         // Joystick is in the non-center position
		{
			if (JoyStatus & JOY_UP)            // Previous function
			  (CurrSFunc == 0)? CurrSFunc = ARRAY_UPPERBOUND(SettingFunctionPtrs) : CurrSFunc--;
			else if (JoyStatus & JOY_DOWN)     // Next function
			  (CurrSFunc == ARRAY_UPPERBOUND(SettingFunctionPtrs))? CurrSFunc = 0 : CurrSFunc++;
			else if (JoyStatus & JOY_PRESS)    // Select current function
			  ((FuncPtr)pgm_read_word(&SettingFunctionPtrs[CurrSFunc]))(); // Run associated function
			else if (JoyStatus & JOY_LEFT)
			  return;
		
			// Show current function onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&SettingFunctionNames[CurrSFunc]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCShowAbout(void)
{
	uint8_t InfoNum = 0;
	
	JoyStatus = 1;
			
	while (1)
	{
		if (JoyStatus)
		{
			if (JoyStatus & JOY_UP)
			  (InfoNum == 0)? InfoNum = ARRAY_UPPERBOUND(AboutTextPtrs) : InfoNum--;
			else if (JoyStatus & JOY_DOWN)
			  (InfoNum == ARRAY_UPPERBOUND(AboutTextPtrs))? InfoNum = 0 : InfoNum++;
			else if (JoyStatus & JOY_LEFT)
			  return;

			LCD_puts_f((uint8_t*)pgm_read_word(&AboutTextPtrs[InfoNum]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCAVRISPMode(void)
{
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
	LCD_puts_f(AVRISPModeMessage);
	
	V2P_RunStateMachine(AICI_InterpretPacket);
}

void FUNCProgramDataflash(void)
{
	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	DataflashInfo.UseExernalDF = TRUE;
	DFSPIRoutinePointer = USI_SPITransmit;
	
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
	LCD_puts_f(DataFlashProgMode);

	V2P_RunStateMachine(PD_InterpretAVRISPPacket);
	   
	DF_EnableDataflash(FALSE);
	SPI_SPIOFF();
}

void FUNCProgramAVR(void)
{
	uint8_t  DoneFailMessageBuff[19];
	uint8_t  Fault    = ISPCC_NO_FAULT;
	uint8_t  ProgMode = 0;

	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
	SPI_SPIInit();
	DataflashInfo.UseExernalDF = FALSE;
	
	if (!(DF_CheckCorrectOnboardChip()))
	  return;

	MAIN_WaitForJoyRelease();
	
	JoyStatus = 1;                              // Use an invalid joystick value to force the program to write the
	                                            // name of the default command onto the LCD
	while (1)
	{
		if (JoyStatus)
		{
			if (JoyStatus & JOY_LEFT)
			  return;
			else if (JoyStatus & JOY_PRESS)
			  break;
			else if (JoyStatus & JOY_UP)
			  (ProgMode == 0)? ProgMode = ARRAY_UPPERBOUND(ProgOptions) : ProgMode--;
			else if (JoyStatus & JOY_DOWN)
			  (ProgMode == ARRAY_UPPERBOUND(ProgOptions))? ProgMode = 0 : ProgMode++;

			LCD_puts_f((uint8_t*)pgm_read_word(&ProgOptions[ProgMode])); // Show current function onto the LCD

			MAIN_WaitForJoyRelease();
		}
	}

	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_8MHZ);
	LCD_puts_f(WaitText);

	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
			
	for (uint8_t PacketB = 0; PacketB < 12; PacketB++) // Read the enter programming mode command bytes
	  PacketBytes[PacketB] = eeprom_read_byte(&EEPROMVars.EnterProgMode[PacketB]);
	
	ISPCC_EnterChipProgrammingMode();      // Try to sync with the slave AVR

	CurrAddress = 0;

	if (PacketBytes[1] == AICB_STATUS_CMD_OK) // ISPCC_EnterChipProgrammingMode alters the PacketBytes buffer rather than returning a value
	{						
		if (!(ProgMode) || (ProgMode == 7) || (ProgMode == 1) || (ProgMode == 3)) // All, erase chip, flash and eeprom, or program flash mode
		{
			MAIN_ShowProgType('C');
			
			if (!(eeprom_read_byte(&EEPROMVars.EraseCmdStored) == TRUE))
			{
				Fault = ISPCC_FAULT_NOERASE;
				MAIN_ShowError(PSTR("NO ERASE CMD"));
			}
			else
			{
				PM_SendEraseCommand();
			}
		}

		if ((!(ProgMode) || (ProgMode == 1) || (ProgMode == 3)) && (Fault == ISPCC_NO_FAULT)) // All, flash and EEPROM, or program flash mode
		{
			MAIN_ShowProgType('D');

			if (!(PM_GetStoredDataSize(TYPE_FLASH))) // Check to make sure a program is present in memory
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
				MAIN_ShowError(PSTR("NO DATA"));
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_FLASH);
			}
		}
	
		if (!(ProgMode) || (ProgMode == 2) || (ProgMode == 3)) // All, flash and EEPROM, or program EEPROM mode
		{
			MAIN_ShowProgType('E');
				
			if (!(PM_GetStoredDataSize(TYPE_EEPROM))) // Check to make sure EEPROM data is present in memory
			{
				Fault = ISPCC_FAULT_NODATATYPE;
				MAIN_ShowError(PSTR("NO EEPROM"));
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_EEPROM);
			}
		}

		if (!(ProgMode) || (ProgMode == 4) || (ProgMode == 6)) // All, fuse and lock bytes, or program fuse bytes mode
		{
			MAIN_ShowProgType('F');
			
			if (!(eeprom_read_byte(&EEPROMVars.TotalFuseBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
				MAIN_ShowError(PSTR("NO FUSE BYTES"));
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_FUSE);
			}
		}

		if (!(ProgMode) || (ProgMode == 5) || (ProgMode == 6)) // All, fuse and lock bytes, or program lock bytes mode
		{
			if (ProgMode == 6)                    // If fusebytes have already been written, we need to reenter programming mode to latch them
			{
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line of the slave AVR
				MAIN_Delay10MS(1);
				MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);   // Capture the RESET line of the slave AVR
				ISPCC_EnterChipProgrammingMode(); // Try to sync with the slave AVR
			}

			MAIN_ShowProgType('L');
		
			if (!(eeprom_read_byte(&EEPROMVars.TotalLockBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;
				MAIN_ShowError(PSTR("NO LOCK BYTES"));
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_LOCK);
			}
		}

		strcpy_P(DoneFailMessageBuff, PSTR("PROGRAMMING DONE"));

		if (Fault != ISPCC_NO_FAULT)         // Takes less code to just overwrite part of the string on fail
		  strcpy_P(&DoneFailMessageBuff[12], PSTR("FAILED"));

		LCD_puts(DoneFailMessageBuff);

		MAIN_Delay10MS(255);
		MAIN_Delay10MS(100);
	}
	else
	{
		MAIN_ShowError(SyncErrorMessage);
	}
	
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_1MHZ);
	MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run	
	USI_SPIOff();
	DF_EnableDataflash(FALSE);
	SPI_SPIOFF();
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Set status LEDs to green (ready)
}

void FUNCStoreProgram(void)
{
	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
	SPI_SPIInit();
	DataflashInfo.UseExernalDF = FALSE;
	DF_EnableDataflash(TRUE);

	if (!(DF_CheckCorrectOnboardChip()))
	  return;
			
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
	LCD_puts_f(PSTR("*STORAGE MODE*"));

	V2P_RunStateMachine(PM_InterpretAVRISPPacket);
	
	DF_EnableDataflash(FALSE);
	SPI_SPIOFF();
}

void FUNCClearMem(void)
{
	LCD_puts_f(PSTR("CONFIRM"));
	MAIN_Delay10MS(180);

	LCD_puts_f(PSTR("<N Y>"));

	while (1)
	{
		if (JoyStatus)
		{
			if (JoyStatus & JOY_LEFT)
			  return;
			else if (JoyStatus & JOY_RIGHT)
			  break;
		}
	}

	MAIN_WaitForJoyRelease();

	LCD_puts_f(WaitText);
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);      // Set status LEDs to orange (busy)

	for (uint16_t EAddr = 0; EAddr < sizeof(EEPROMVars); EAddr++)
	  eeprom_write_byte((uint8_t*)EAddr, 0xFF);

	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);       // Set status LEDs to green (ready)
	LCD_puts_f(PSTR("MEM CLEARED"));
	MAIN_Delay10MS(255);
}

void FUNCSetContrast(void)
{
	uint8_t Buffer[6];
	uint8_t Contrast = (eeprom_read_byte(&EEPROMVars.LCDContrast) & 0x0F); // Ranges from 0-15 so mask retuns 15 on blank EEPROM (0xFF)
	
	JoyStatus = 1;                          // Invalid value to force the LCD to update
	
	while (1)
	{
		if (JoyStatus)
		{
			if (JoyStatus & JOY_UP)
			{
				if (Contrast < 15)
				  Contrast++;
			}
			else if (JoyStatus & JOY_DOWN)
			{
				if (Contrast > 1)          // Zero is non-visible, so 1 is the minimum
				  Contrast--;
			}
			else if (JoyStatus & JOY_LEFT)
			{
				eeprom_write_byte(&EEPROMVars.LCDContrast, Contrast);
				return;
			}
					
			Buffer[0] = 'C';
			Buffer[1] = 'T';
			Buffer[2] = ' ';

			MAIN_IntToStr((uint16_t)Contrast, &Buffer[3]);
			LCD_puts(Buffer);

			LCD_CONTRAST_LEVEL(Contrast);

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCSetISPSpeed(void)
{
	uint8_t CurrSpeed = eeprom_read_byte(&EEPROMVars.SCKDuration);

	if (CurrSpeed > ARRAY_UPPERBOUND(USISpeeds))
	  CurrSpeed = ARRAY_UPPERBOUND(USISpeeds); // Protection against blank EEPROM

	JoyStatus = 1;                        // Invalid value to force the LCD to update

	while (1)
	{
		if (JoyStatus)
		{
			if (JoyStatus & JOY_UP)
			{
				(CurrSpeed == 0)? CurrSpeed = ARRAY_UPPERBOUND(USISpeeds) : CurrSpeed--;
			}
			else if (JoyStatus & JOY_DOWN)
			{
				(CurrSpeed == ARRAY_UPPERBOUND(USISpeeds))? CurrSpeed = 0 : CurrSpeed++;
			}
			else if (JoyStatus & JOY_LEFT)
			{
				eeprom_write_byte(&EEPROMVars.SCKDuration, CurrSpeed);
				return;
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f(USISpeeds[CurrSpeed]);

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCSetResetMode(void)
{
	uint8_t CurrMode = (eeprom_read_byte(&EEPROMVars.SPIResetMode) & 0x01);

	JoyStatus = 1;                        // Invalid value to force the LCD to update

	while (1)
	{
		if (JoyStatus)
		{
			if ((JoyStatus & JOY_UP) || (JoyStatus & JOY_DOWN))
			{
				CurrMode ^= 1;
			}
			else if (JoyStatus & JOY_LEFT)
			{
				eeprom_write_byte(&EEPROMVars.SPIResetMode, CurrMode);
				return;
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f(SPIResetModes[CurrMode]);

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCSetFirmMinorVer(void)
{
	uint8_t VerBuffer[5];
	uint8_t VerMinor = eeprom_read_byte(&EEPROMVars.FirmVerMinor);

	if (VerMinor > 9)
	  VerMinor = V2P_SW_VERSION_MINOR_DEFAULT;
	
	strcpy_P(VerBuffer, PSTR("V2- "));

	JoyStatus = 1;                        // Invalid value to force the LCD to update

	while (1)
	{
		if (JoyStatus)
		{
			if (JoyStatus & JOY_UP)
			{
				if (VerMinor < 9)
				  VerMinor++;
			}
			if (JoyStatus & JOY_DOWN)
			{
				if (VerMinor)
				  VerMinor--;
			}
			else if (JoyStatus & JOY_LEFT)
			{
				eeprom_write_byte(&EEPROMVars.FirmVerMinor, VerMinor);
				return;
			}
			
			VerBuffer[3] = ('0' + VerMinor);
			LCD_puts(VerBuffer);

			MAIN_WaitForJoyRelease();
		}
	}	
}

void FUNCSetAutoSleepTimeOut(void)
{
	uint8_t SleepTxtBuffer[8];
	uint8_t SleepVal = eeprom_read_byte(&EEPROMVars.AutoSleepValIndex);

	if (SleepVal > 4)
	  SleepVal = 4;

	strcpy_P(SleepTxtBuffer, PSTR("    SEC"));
	
	JoyStatus = 1;                        // Invalid value to force the LCD to update

	while (1)
	{
		if (JoyStatus)
		{
			if (JoyStatus & JOY_UP)
			{
				(SleepVal == 0)? SleepVal = ARRAY_UPPERBOUND(AutoSleepTOValues) : SleepVal--;
			}
			if (JoyStatus & JOY_DOWN)
			{
				(SleepVal == ARRAY_UPPERBOUND(AutoSleepTOValues))? SleepVal = 0 : SleepVal++;
			}
			else if (JoyStatus & JOY_LEFT)
			{
				eeprom_write_byte(&EEPROMVars.AutoSleepValIndex, SleepVal);
				TOUT_SetupSleepTimer();
				return;
			}

			if (!(SleepVal))
			{
				LCD_puts_f(PSTR("OFF"));
			}
			else
			{
				MAIN_IntToStr(pgm_read_byte(&AutoSleepTOValues[SleepVal]), &SleepTxtBuffer[0]);
				SleepTxtBuffer[3] = ' '; // Remove the auto-string termination from the buffer
				LCD_puts(SleepTxtBuffer);
			}

			MAIN_WaitForJoyRelease();
		}
	}	
}

void FUNCSleepMode(void)
{
     598:	85 e0       	ldi	r24, 0x05	; 5
     59a:	83 bf       	out	0x33, r24	; 51
	SMCR    = ((1 << SM1) | (1 << SE));    // Power down sleep mode
	LCDCRA &= ~(1 << LCDEN); 
     59c:	80 91 e4 00 	lds	r24, 0x00E4
     5a0:	8f 77       	andi	r24, 0x7F	; 127
     5a2:	80 93 e4 00 	sts	0x00E4, r24
	
	MAIN_SETSTATUSLED(MAIN_STATLED_OFF);   // Save battery power - turn off status LED
     5a6:	81 b3       	in	r24, 0x11	; 17
     5a8:	8f 7c       	andi	r24, 0xCF	; 207
     5aa:	81 bb       	out	0x11, r24	; 17
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <FUNCSleepMode+0x18>

	while (!(JoyStatus & JOY_UP))         // Joystick interrupt wakes the micro
	  SLEEP();
     5ae:	88 95       	sleep
     5b0:	f6 9b       	sbis	0x1e, 6	; 30
     5b2:	fd cf       	rjmp	.-6      	; 0x5ae <FUNCSleepMode+0x16>
	   
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN); // Turn status LED back on
     5b4:	81 b3       	in	r24, 0x11	; 17
     5b6:	8f 7c       	andi	r24, 0xCF	; 207
     5b8:	80 61       	ori	r24, 0x10	; 16
     5ba:	81 bb       	out	0x11, r24	; 17

	LCDCRA |= (1 << LCDEN);
     5bc:	80 91 e4 00 	lds	r24, 0x00E4
     5c0:	80 68       	ori	r24, 0x80	; 128
     5c2:	80 93 e4 00 	sts	0x00E4, r24
	
	MAIN_WaitForJoyRelease();
     5c6:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     5ca:	08 95       	ret

000005cc <FUNCGoBootloader>:
}

void FUNCStorageInfo(void)
{
	uint8_t SelectedItem = 0;

	MAIN_WaitForJoyRelease();

	JoyStatus = 1;                        // Invalid value to force the LCD to update

	while (1)
	{
		if (JoyStatus)
		{
			if (JoyStatus & (JOY_UP | JOY_DOWN))
			{
				SelectedItem ^= 1;
			}
			else if (JoyStatus & JOY_LEFT)
			{
				return;
			}
			else if (JoyStatus & JOY_PRESS)
			{
				if (SelectedItem == 1)    // View storage tags
				{
					DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
					SPI_SPIInit();
					DataflashInfo.UseExernalDF = FALSE;
					DF_EnableDataflash(TRUE);

					if (DF_CheckCorrectOnboardChip())
					{
						TM_ShowTags();
						SPI_SPIOFF();
					}
					else if (!(PM_GetStoredDataSize(TYPE_FLASH)))
					{
						DF_EnableDataflash(FALSE);
						SPI_SPIOFF();

						MAIN_ShowError(PSTR("NO STORED PRGM"));
					}	
				}
				else                      // View stored data sizes
				{
					PM_ShowStoredItemSizes();
				}
			}
			
			LCD_puts_f(SIFONames[SelectedItem]);

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCGoBootloader(void)
{
     5cc:	85 b7       	in	r24, 0x35	; 53
     5ce:	8f 77       	andi	r24, 0x7F	; 127
	uint8_t MD = (MCUCR & ~(1 << JTD));   // Forces compiler to use IN, AND plus two OUTs rather than two lots of IN/AND/OUTs
	MCUCR = MD;                           // Turn on JTAG via code
     5d0:	85 bf       	out	0x35, r24	; 53
	MCUCR = MD;                           // Set bit twice as specified in datasheet        
     5d2:	85 bf       	out	0x35, r24	; 53

	TIMEOUT_SLEEP_TIMER_OFF();
     5d4:	10 92 81 00 	sts	0x0081, r1
	
	LCD_puts_f(PSTR("*JTAG ON*"));
     5d8:	88 e7       	ldi	r24, 0x78	; 120
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
	
	MAIN_WaitForJoyRelease();
     5e0:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
	
	WDTCR = ((1<<WDCE) | (1<<WDE));       // Enable Watchdog Timer to give reset after minimum timeout
     5e4:	88 e1       	ldi	r24, 0x18	; 24
     5e6:	80 93 60 00 	sts	0x0060, r24
     5ea:	ff cf       	rjmp	.-2      	; 0x5ea <FUNCGoBootloader+0x1e>

000005ec <FUNCShowAbout>:
     5ec:	1f 93       	push	r17
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	8e bb       	out	0x1e, r24	; 30
     5f2:	10 e0       	ldi	r17, 0x00	; 0
     5f4:	8e b3       	in	r24, 0x1e	; 30
     5f6:	88 23       	and	r24, r24
     5f8:	e9 f3       	breq	.-6      	; 0x5f4 <FUNCShowAbout+0x8>
     5fa:	f6 9b       	sbis	0x1e, 6	; 30
     5fc:	06 c0       	rjmp	.+12     	; 0x60a <FUNCShowAbout+0x1e>
     5fe:	11 23       	and	r17, r17
     600:	11 f4       	brne	.+4      	; 0x606 <FUNCShowAbout+0x1a>
     602:	13 e0       	ldi	r17, 0x03	; 3
     604:	0c c0       	rjmp	.+24     	; 0x61e <FUNCShowAbout+0x32>
     606:	11 50       	subi	r17, 0x01	; 1
     608:	0a c0       	rjmp	.+20     	; 0x61e <FUNCShowAbout+0x32>
     60a:	f7 9b       	sbis	0x1e, 7	; 30
     60c:	06 c0       	rjmp	.+12     	; 0x61a <FUNCShowAbout+0x2e>
     60e:	13 30       	cpi	r17, 0x03	; 3
     610:	11 f4       	brne	.+4      	; 0x616 <FUNCShowAbout+0x2a>
     612:	10 e0       	ldi	r17, 0x00	; 0
     614:	04 c0       	rjmp	.+8      	; 0x61e <FUNCShowAbout+0x32>
     616:	1f 5f       	subi	r17, 0xFF	; 255
     618:	02 c0       	rjmp	.+4      	; 0x61e <FUNCShowAbout+0x32>
     61a:	f2 99       	sbic	0x1e, 2	; 30
     61c:	0d c0       	rjmp	.+26     	; 0x638 <FUNCShowAbout+0x4c>
     61e:	e1 2f       	mov	r30, r17
     620:	ff 27       	eor	r31, r31
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	e1 56       	subi	r30, 0x61	; 97
     628:	ff 4f       	sbci	r31, 0xFF	; 255
     62a:	85 91       	lpm	r24, Z+
     62c:	94 91       	lpm	r25, Z
     62e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     632:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     636:	de cf       	rjmp	.-68     	; 0x5f4 <FUNCShowAbout+0x8>
     638:	1f 91       	pop	r17
     63a:	08 95       	ret

0000063c <FUNCChangeSettings>:
     63c:	1f 93       	push	r17
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	8e bb       	out	0x1e, r24	; 30
     642:	10 e0       	ldi	r17, 0x00	; 0
     644:	8e b3       	in	r24, 0x1e	; 30
     646:	88 23       	and	r24, r24
     648:	e9 f3       	breq	.-6      	; 0x644 <FUNCChangeSettings+0x8>
     64a:	f6 9b       	sbis	0x1e, 6	; 30
     64c:	06 c0       	rjmp	.+12     	; 0x65a <FUNCChangeSettings+0x1e>
     64e:	11 23       	and	r17, r17
     650:	11 f4       	brne	.+4      	; 0x656 <FUNCChangeSettings+0x1a>
     652:	16 e0       	ldi	r17, 0x06	; 6
     654:	19 c0       	rjmp	.+50     	; 0x688 <FUNCChangeSettings+0x4c>
     656:	11 50       	subi	r17, 0x01	; 1
     658:	17 c0       	rjmp	.+46     	; 0x688 <FUNCChangeSettings+0x4c>
     65a:	f7 9b       	sbis	0x1e, 7	; 30
     65c:	06 c0       	rjmp	.+12     	; 0x66a <FUNCChangeSettings+0x2e>
     65e:	16 30       	cpi	r17, 0x06	; 6
     660:	11 f4       	brne	.+4      	; 0x666 <FUNCChangeSettings+0x2a>
     662:	10 e0       	ldi	r17, 0x00	; 0
     664:	11 c0       	rjmp	.+34     	; 0x688 <FUNCChangeSettings+0x4c>
     666:	1f 5f       	subi	r17, 0xFF	; 255
     668:	0f c0       	rjmp	.+30     	; 0x688 <FUNCChangeSettings+0x4c>
     66a:	f4 9b       	sbis	0x1e, 4	; 30
     66c:	0b c0       	rjmp	.+22     	; 0x684 <FUNCChangeSettings+0x48>
     66e:	e1 2f       	mov	r30, r17
     670:	ff 27       	eor	r31, r31
     672:	ee 0f       	add	r30, r30
     674:	ff 1f       	adc	r31, r31
     676:	e6 56       	subi	r30, 0x66	; 102
     678:	fe 4f       	sbci	r31, 0xFE	; 254
     67a:	85 91       	lpm	r24, Z+
     67c:	94 91       	lpm	r25, Z
     67e:	fc 01       	movw	r30, r24
     680:	09 95       	icall
     682:	02 c0       	rjmp	.+4      	; 0x688 <FUNCChangeSettings+0x4c>
     684:	f2 99       	sbic	0x1e, 2	; 30
     686:	0d c0       	rjmp	.+26     	; 0x6a2 <FUNCChangeSettings+0x66>
     688:	e1 2f       	mov	r30, r17
     68a:	ff 27       	eor	r31, r31
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	e4 57       	subi	r30, 0x74	; 116
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	85 91       	lpm	r24, Z+
     696:	94 91       	lpm	r25, Z
     698:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     69c:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     6a0:	d1 cf       	rjmp	.-94     	; 0x644 <FUNCChangeSettings+0x8>
     6a2:	1f 91       	pop	r17
     6a4:	08 95       	ret

000006a6 <FUNCSetAutoSleepTimeOut>:
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	28 97       	sbiw	r28, 0x08	; 8
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     6c0:	a8 e8       	ldi	r26, 0x88	; 136
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     6c8:	80 2d       	mov	r24, r0
     6ca:	08 2f       	mov	r16, r24
     6cc:	85 30       	cpi	r24, 0x05	; 5
     6ce:	08 f0       	brcs	.+2      	; 0x6d2 <FUNCSetAutoSleepTimeOut+0x2c>
     6d0:	04 e0       	ldi	r16, 0x04	; 4
     6d2:	65 e9       	ldi	r22, 0x95	; 149
     6d4:	72 e0       	ldi	r23, 0x02	; 2
     6d6:	ce 01       	movw	r24, r28
     6d8:	01 96       	adiw	r24, 0x01	; 1
     6da:	0e 94 2e 1a 	call	0x345c	; 0x345c <strcpy_P>
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	8e bb       	out	0x1e, r24	; 30
     6e2:	8e b3       	in	r24, 0x1e	; 30
     6e4:	88 23       	and	r24, r24
     6e6:	e9 f3       	breq	.-6      	; 0x6e2 <FUNCSetAutoSleepTimeOut+0x3c>
     6e8:	f6 9b       	sbis	0x1e, 6	; 30
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <FUNCSetAutoSleepTimeOut+0x50>
     6ec:	00 23       	and	r16, r16
     6ee:	11 f4       	brne	.+4      	; 0x6f4 <FUNCSetAutoSleepTimeOut+0x4e>
     6f0:	04 e0       	ldi	r16, 0x04	; 4
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <FUNCSetAutoSleepTimeOut+0x50>
     6f4:	01 50       	subi	r16, 0x01	; 1
     6f6:	f7 9b       	sbis	0x1e, 7	; 30
     6f8:	06 c0       	rjmp	.+12     	; 0x706 <FUNCSetAutoSleepTimeOut+0x60>
     6fa:	04 30       	cpi	r16, 0x04	; 4
     6fc:	11 f4       	brne	.+4      	; 0x702 <FUNCSetAutoSleepTimeOut+0x5c>
     6fe:	00 e0       	ldi	r16, 0x00	; 0
     700:	06 c0       	rjmp	.+12     	; 0x70e <FUNCSetAutoSleepTimeOut+0x68>
     702:	0f 5f       	subi	r16, 0xFF	; 255
     704:	02 c0       	rjmp	.+4      	; 0x70a <FUNCSetAutoSleepTimeOut+0x64>
     706:	f2 99       	sbic	0x1e, 2	; 30
     708:	1d c0       	rjmp	.+58     	; 0x744 <FUNCSetAutoSleepTimeOut+0x9e>
     70a:	00 23       	and	r16, r16
     70c:	29 f4       	brne	.+10     	; 0x718 <FUNCSetAutoSleepTimeOut+0x72>
     70e:	81 e9       	ldi	r24, 0x91	; 145
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     716:	13 c0       	rjmp	.+38     	; 0x73e <FUNCSetAutoSleepTimeOut+0x98>
     718:	e0 2f       	mov	r30, r16
     71a:	ff 27       	eor	r31, r31
     71c:	ef 51       	subi	r30, 0x1F	; 31
     71e:	fc 4f       	sbci	r31, 0xFC	; 252
     720:	e4 91       	lpm	r30, Z
     722:	7e 01       	movw	r14, r28
     724:	08 94       	sec
     726:	e1 1c       	adc	r14, r1
     728:	f1 1c       	adc	r15, r1
     72a:	b7 01       	movw	r22, r14
     72c:	8e 2f       	mov	r24, r30
     72e:	99 27       	eor	r25, r25
     730:	0e 94 8e 02 	call	0x51c	; 0x51c <MAIN_IntToStr>
     734:	80 e2       	ldi	r24, 0x20	; 32
     736:	8c 83       	std	Y+4, r24	; 0x04
     738:	c7 01       	movw	r24, r14
     73a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <LCD_puts>
     73e:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     742:	cf cf       	rjmp	.-98     	; 0x6e2 <FUNCSetAutoSleepTimeOut+0x3c>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     744:	a8 e8       	ldi	r26, 0x88	; 136
     746:	b0 e0       	ldi	r27, 0x00	; 0
     748:	00 2e       	mov	r0, r16
     74a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
     74e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TOUT_SetupSleepTimer>
     752:	28 96       	adiw	r28, 0x08	; 8
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	08 95       	ret

0000076a <MAIN_ShowError>:
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	64 97       	sbiw	r28, 0x14	; 20
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	25 e4       	ldi	r18, 0x45	; 69
     780:	29 83       	std	Y+1, r18	; 0x01
     782:	2e e3       	ldi	r18, 0x3E	; 62
     784:	2a 83       	std	Y+2, r18	; 0x02
     786:	bc 01       	movw	r22, r24
     788:	ce 01       	movw	r24, r28
     78a:	03 96       	adiw	r24, 0x03	; 3
     78c:	0e 94 2e 1a 	call	0x345c	; 0x345c <strcpy_P>
     790:	ce 01       	movw	r24, r28
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	0e 94 6e 08 	call	0x10dc	; 0x10dc <LCD_puts>
     798:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     79c:	f4 9b       	sbis	0x1e, 4	; 30
     79e:	fe cf       	rjmp	.-4      	; 0x79c <MAIN_ShowError+0x32>
     7a0:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     7a4:	64 96       	adiw	r28, 0x14	; 20
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <FUNCStorageInfo>:
     7b6:	1f 93       	push	r17
     7b8:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	8e bb       	out	0x1e, r24	; 30
     7c0:	10 e0       	ldi	r17, 0x00	; 0
     7c2:	8e b3       	in	r24, 0x1e	; 30
     7c4:	88 23       	and	r24, r24
     7c6:	e9 f3       	breq	.-6      	; 0x7c2 <FUNCStorageInfo+0xc>
     7c8:	8e b3       	in	r24, 0x1e	; 30
     7ca:	80 7c       	andi	r24, 0xC0	; 192
     7cc:	19 f0       	breq	.+6      	; 0x7d4 <FUNCStorageInfo+0x1e>
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	18 27       	eor	r17, r24
     7d2:	36 c0       	rjmp	.+108    	; 0x840 <FUNCStorageInfo+0x8a>
     7d4:	f2 99       	sbic	0x1e, 2	; 30
     7d6:	3f c0       	rjmp	.+126    	; 0x856 <FUNCStorageInfo+0xa0>
     7d8:	f4 9b       	sbis	0x1e, 4	; 30
     7da:	32 c0       	rjmp	.+100    	; 0x840 <FUNCStorageInfo+0x8a>
     7dc:	11 30       	cpi	r17, 0x01	; 1
     7de:	71 f5       	brne	.+92     	; 0x83c <FUNCStorageInfo+0x86>
     7e0:	8b ea       	ldi	r24, 0xAB	; 171
     7e2:	99 e0       	ldi	r25, 0x09	; 9
     7e4:	90 93 01 01 	sts	0x0101, r25
     7e8:	80 93 00 01 	sts	0x0100, r24
     7ec:	0e 94 a1 09 	call	0x1342	; 0x1342 <SPI_SPIInit>
     7f0:	10 92 43 01 	sts	0x0143, r1
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
     7fa:	0e 94 b8 0b 	call	0x1770	; 0x1770 <DF_CheckCorrectOnboardChip>
     7fe:	88 23       	and	r24, r24
     800:	41 f0       	breq	.+16     	; 0x812 <FUNCStorageInfo+0x5c>
     802:	0e 94 ff 19 	call	0x33fe	; 0x33fe <TM_ShowTags>
     806:	80 91 64 00 	lds	r24, 0x0064
     80a:	84 60       	ori	r24, 0x04	; 4
     80c:	80 93 64 00 	sts	0x0064, r24
     810:	17 c0       	rjmp	.+46     	; 0x840 <FUNCStorageInfo+0x8a>
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <PM_GetStoredDataSize>
     818:	61 15       	cp	r22, r1
     81a:	71 05       	cpc	r23, r1
     81c:	81 05       	cpc	r24, r1
     81e:	91 05       	cpc	r25, r1
     820:	79 f4       	brne	.+30     	; 0x840 <FUNCStorageInfo+0x8a>
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
     828:	80 91 64 00 	lds	r24, 0x0064
     82c:	84 60       	ori	r24, 0x04	; 4
     82e:	80 93 64 00 	sts	0x0064, r24
     832:	82 e8       	ldi	r24, 0x82	; 130
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	0e 94 b5 03 	call	0x76a	; 0x76a <MAIN_ShowError>
     83a:	02 c0       	rjmp	.+4      	; 0x840 <FUNCStorageInfo+0x8a>
     83c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <PM_ShowStoredItemSizes>
     840:	8f e0       	ldi	r24, 0x0F	; 15
     842:	18 9f       	mul	r17, r24
     844:	c0 01       	movw	r24, r0
     846:	11 24       	eor	r1, r1
     848:	86 5a       	subi	r24, 0xA6	; 166
     84a:	9d 4f       	sbci	r25, 0xFD	; 253
     84c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     850:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     854:	b6 cf       	rjmp	.-148    	; 0x7c2 <FUNCStorageInfo+0xc>
     856:	1f 91       	pop	r17
     858:	08 95       	ret

0000085a <MAIN_ShowProgType>:
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	27 97       	sbiw	r28, 0x07	; 7
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	f8 2e       	mov	r15, r24
     876:	8e 01       	movw	r16, r28
     878:	0f 5f       	subi	r16, 0xFF	; 255
     87a:	1f 4f       	sbci	r17, 0xFF	; 255
     87c:	65 e2       	ldi	r22, 0x25	; 37
     87e:	73 e0       	ldi	r23, 0x03	; 3
     880:	c8 01       	movw	r24, r16
     882:	0e 94 2e 1a 	call	0x345c	; 0x345c <strcpy_P>
     886:	fe 82       	std	Y+6, r15	; 0x06
     888:	c8 01       	movw	r24, r16
     88a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <LCD_puts>
     88e:	27 96       	adiw	r28, 0x07	; 7
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	de bf       	out	0x3e, r29	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	08 95       	ret

000008a6 <FUNCStoreProgram>:
     8a6:	8b ea       	ldi	r24, 0xAB	; 171
     8a8:	99 e0       	ldi	r25, 0x09	; 9
     8aa:	90 93 01 01 	sts	0x0101, r25
     8ae:	80 93 00 01 	sts	0x0100, r24
     8b2:	0e 94 a1 09 	call	0x1342	; 0x1342 <SPI_SPIInit>
     8b6:	10 92 43 01 	sts	0x0143, r1
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
     8c0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <DF_CheckCorrectOnboardChip>
     8c4:	88 23       	and	r24, r24
     8c6:	e1 f0       	breq	.+56     	; 0x900 <FUNCStoreProgram+0x5a>
     8c8:	87 ea       	ldi	r24, 0xA7	; 167
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     8d0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <OSCCAL_Calibrate>
     8d4:	80 91 c1 00 	lds	r24, 0x00C1
     8d8:	80 78       	andi	r24, 0x80	; 128
     8da:	88 61       	ori	r24, 0x18	; 24
     8dc:	80 93 c1 00 	sts	0x00C1, r24
     8e0:	8c eb       	ldi	r24, 0xBC	; 188
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     8e8:	8f e2       	ldi	r24, 0x2F	; 47
     8ea:	97 e1       	ldi	r25, 0x17	; 23
     8ec:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <V2P_RunStateMachine>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
     8f6:	80 91 64 00 	lds	r24, 0x0064
     8fa:	84 60       	ori	r24, 0x04	; 4
     8fc:	80 93 64 00 	sts	0x0064, r24
     900:	08 95       	ret

00000902 <FUNCAVRISPMode>:
     902:	87 ea       	ldi	r24, 0xA7	; 167
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     90a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <OSCCAL_Calibrate>
     90e:	e1 ec       	ldi	r30, 0xC1	; 193
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	80 81       	ld	r24, Z
     914:	80 78       	andi	r24, 0x80	; 128
     916:	88 61       	ori	r24, 0x18	; 24
     918:	80 83       	st	Z, r24
     91a:	83 e2       	ldi	r24, 0x23	; 35
     91c:	94 e0       	ldi	r25, 0x04	; 4
     91e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     922:	81 ed       	ldi	r24, 0xD1	; 209
     924:	92 e1       	ldi	r25, 0x12	; 18
     926:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <V2P_RunStateMachine>
     92a:	08 95       	ret

0000092c <MAIN_CrashProgram>:
     92c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <LCD_puts>
     930:	80 91 64 00 	lds	r24, 0x0064
     934:	84 60       	ori	r24, 0x04	; 4
     936:	80 93 64 00 	sts	0x0064, r24
     93a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <USI_SPIOff>
     93e:	10 92 b0 00 	sts	0x00B0, r1
     942:	10 92 70 00 	sts	0x0070, r1
     946:	10 92 81 00 	sts	0x0081, r1
     94a:	ff cf       	rjmp	.-2      	; 0x94a <MAIN_CrashProgram+0x1e>

0000094c <__vector_default>:
     94c:	8e e1       	ldi	r24, 0x1E	; 30
     94e:	93 e0       	ldi	r25, 0x03	; 3
     950:	0e 94 96 04 	call	0x92c	; 0x92c <MAIN_CrashProgram>

00000954 <FUNCProgramDataflash>:
     954:	a2 e0       	ldi	r26, 0x02	; 2
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     95c:	80 2d       	mov	r24, r0
     95e:	0e 94 25 0a 	call	0x144a	; 0x144a <USI_SPIInitMaster>
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	80 93 43 01 	sts	0x0143, r24
     968:	8a ee       	ldi	r24, 0xEA	; 234
     96a:	99 e0       	ldi	r25, 0x09	; 9
     96c:	90 93 01 01 	sts	0x0101, r25
     970:	80 93 00 01 	sts	0x0100, r24
     974:	87 ea       	ldi	r24, 0xA7	; 167
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     97c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <OSCCAL_Calibrate>
     980:	e1 ec       	ldi	r30, 0xC1	; 193
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	80 78       	andi	r24, 0x80	; 128
     988:	88 61       	ori	r24, 0x18	; 24
     98a:	80 83       	st	Z, r24
     98c:	86 ee       	ldi	r24, 0xE6	; 230
     98e:	93 e0       	ldi	r25, 0x03	; 3
     990:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     994:	84 e3       	ldi	r24, 0x34	; 52
     996:	9d e0       	ldi	r25, 0x0D	; 13
     998:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <V2P_RunStateMachine>
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
     9a2:	e4 e6       	ldi	r30, 0x64	; 100
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	84 60       	ori	r24, 0x04	; 4
     9aa:	80 83       	st	Z, r24
     9ac:	08 95       	ret

000009ae <FUNCProgramAVR>:
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	63 97       	sbiw	r28, 0x13	; 19
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	8b ea       	ldi	r24, 0xAB	; 171
     9ca:	99 e0       	ldi	r25, 0x09	; 9
     9cc:	90 93 01 01 	sts	0x0101, r25
     9d0:	80 93 00 01 	sts	0x0100, r24
     9d4:	0e 94 a1 09 	call	0x1342	; 0x1342 <SPI_SPIInit>
     9d8:	10 92 43 01 	sts	0x0143, r1
     9dc:	0e 94 b8 0b 	call	0x1770	; 0x1770 <DF_CheckCorrectOnboardChip>
     9e0:	88 23       	and	r24, r24
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <FUNCProgramAVR+0x38>
     9e4:	2d c1       	rjmp	.+602    	; 0xc40 <FUNCProgramAVR+0x292>
     9e6:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	8e bb       	out	0x1e, r24	; 30
     9ee:	ff 24       	eor	r15, r15
     9f0:	8e b3       	in	r24, 0x1e	; 30
     9f2:	88 23       	and	r24, r24
     9f4:	e9 f3       	breq	.-6      	; 0x9f0 <FUNCProgramAVR+0x42>
     9f6:	f2 99       	sbic	0x1e, 2	; 30
     9f8:	23 c1       	rjmp	.+582    	; 0xc40 <FUNCProgramAVR+0x292>
     9fa:	f4 99       	sbic	0x1e, 4	; 30
     9fc:	1e c0       	rjmp	.+60     	; 0xa3a <FUNCProgramAVR+0x8c>
     9fe:	f6 9b       	sbis	0x1e, 6	; 30
     a00:	07 c0       	rjmp	.+14     	; 0xa10 <FUNCProgramAVR+0x62>
     a02:	ff 20       	and	r15, r15
     a04:	19 f4       	brne	.+6      	; 0xa0c <FUNCProgramAVR+0x5e>
     a06:	47 e0       	ldi	r20, 0x07	; 7
     a08:	f4 2e       	mov	r15, r20
     a0a:	0a c0       	rjmp	.+20     	; 0xa20 <FUNCProgramAVR+0x72>
     a0c:	fa 94       	dec	r15
     a0e:	08 c0       	rjmp	.+16     	; 0xa20 <FUNCProgramAVR+0x72>
     a10:	f7 9b       	sbis	0x1e, 7	; 30
     a12:	06 c0       	rjmp	.+12     	; 0xa20 <FUNCProgramAVR+0x72>
     a14:	87 e0       	ldi	r24, 0x07	; 7
     a16:	f8 16       	cp	r15, r24
     a18:	11 f4       	brne	.+4      	; 0xa1e <FUNCProgramAVR+0x70>
     a1a:	ff 24       	eor	r15, r15
     a1c:	01 c0       	rjmp	.+2      	; 0xa20 <FUNCProgramAVR+0x72>
     a1e:	f3 94       	inc	r15
     a20:	ef 2d       	mov	r30, r15
     a22:	ff 27       	eor	r31, r31
     a24:	ee 0f       	add	r30, r30
     a26:	ff 1f       	adc	r31, r31
     a28:	ea 5e       	subi	r30, 0xEA	; 234
     a2a:	fd 4f       	sbci	r31, 0xFD	; 253
     a2c:	85 91       	lpm	r24, Z+
     a2e:	94 91       	lpm	r25, Z
     a30:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     a34:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     a38:	db cf       	rjmp	.-74     	; 0x9f0 <FUNCProgramAVR+0x42>
     a3a:	80 e8       	ldi	r24, 0x80	; 128
     a3c:	80 93 61 00 	sts	0x0061, r24
     a40:	10 92 61 00 	sts	0x0061, r1
     a44:	87 ea       	ldi	r24, 0xA7	; 167
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     a4c:	02 e0       	ldi	r16, 0x02	; 2
     a4e:	10 e0       	ldi	r17, 0x00	; 0
     a50:	d8 01       	movw	r26, r16
     a52:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     a56:	80 2d       	mov	r24, r0
     a58:	0e 94 25 0a 	call	0x144a	; 0x144a <USI_SPIInitMaster>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <MAIN_ResetCSLine>
     a62:	98 01       	movw	r18, r16
     a64:	2e 5d       	subi	r18, 0xDE	; 222
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	ea e4       	ldi	r30, 0x4A	; 74
     a6a:	f1 e0       	ldi	r31, 0x01	; 1
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     a6c:	d9 01       	movw	r26, r18
     a6e:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     a72:	80 2d       	mov	r24, r0
     a74:	81 93       	st	Z+, r24
     a76:	2f 5f       	subi	r18, 0xFF	; 255
     a78:	3f 4f       	sbci	r19, 0xFF	; 255
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	20 33       	cpi	r18, 0x30	; 48
     a7e:	38 07       	cpc	r19, r24
     a80:	a9 f7       	brne	.-22     	; 0xa6c <FUNCProgramAVR+0xbe>
     a82:	0e 94 70 12 	call	0x24e0	; 0x24e0 <ISPCC_EnterChipProgrammingMode>
     a86:	10 92 62 02 	sts	0x0262, r1
     a8a:	10 92 63 02 	sts	0x0263, r1
     a8e:	10 92 64 02 	sts	0x0264, r1
     a92:	10 92 65 02 	sts	0x0265, r1
     a96:	80 91 4b 01 	lds	r24, 0x014B
     a9a:	88 23       	and	r24, r24
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <FUNCProgramAVR+0xf2>
     a9e:	b5 c0       	rjmp	.+362    	; 0xc0a <FUNCProgramAVR+0x25c>
     aa0:	ff 20       	and	r15, r15
     aa2:	49 f0       	breq	.+18     	; 0xab6 <FUNCProgramAVR+0x108>
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	f8 16       	cp	r15, r24
     aa8:	31 f0       	breq	.+12     	; 0xab6 <FUNCProgramAVR+0x108>
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	f8 16       	cp	r15, r24
     aae:	19 f0       	breq	.+6      	; 0xab6 <FUNCProgramAVR+0x108>
     ab0:	83 e0       	ldi	r24, 0x03	; 3
     ab2:	f8 16       	cp	r15, r24
     ab4:	91 f4       	brne	.+36     	; 0xada <FUNCProgramAVR+0x12c>
     ab6:	83 e4       	ldi	r24, 0x43	; 67
     ab8:	0e 94 2d 04 	call	0x85a	; 0x85a <MAIN_ShowProgType>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     abc:	a5 e1       	ldi	r26, 0x15	; 21
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     ac4:	80 2d       	mov	r24, r0
     ac6:	81 30       	cpi	r24, 0x01	; 1
     ac8:	31 f0       	breq	.+12     	; 0xad6 <FUNCProgramAVR+0x128>
     aca:	81 e1       	ldi	r24, 0x11	; 17
     acc:	93 e0       	ldi	r25, 0x03	; 3
     ace:	0e 94 b5 03 	call	0x76a	; 0x76a <MAIN_ShowError>
     ad2:	02 e0       	ldi	r16, 0x02	; 2
     ad4:	03 c0       	rjmp	.+6      	; 0xadc <FUNCProgramAVR+0x12e>
     ad6:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <PM_SendEraseCommand>
     ada:	00 e0       	ldi	r16, 0x00	; 0
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	8f 15       	cp	r24, r15
     ae0:	18 f4       	brcc	.+6      	; 0xae8 <FUNCProgramAVR+0x13a>
     ae2:	83 e0       	ldi	r24, 0x03	; 3
     ae4:	f8 16       	cp	r15, r24
     ae6:	c1 f4       	brne	.+48     	; 0xb18 <FUNCProgramAVR+0x16a>
     ae8:	00 23       	and	r16, r16
     aea:	a1 f4       	brne	.+40     	; 0xb14 <FUNCProgramAVR+0x166>
     aec:	84 e4       	ldi	r24, 0x44	; 68
     aee:	0e 94 2d 04 	call	0x85a	; 0x85a <MAIN_ShowProgType>
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <PM_GetStoredDataSize>
     af8:	61 15       	cp	r22, r1
     afa:	71 05       	cpc	r23, r1
     afc:	81 05       	cpc	r24, r1
     afe:	91 05       	cpc	r25, r1
     b00:	31 f4       	brne	.+12     	; 0xb0e <FUNCProgramAVR+0x160>
     b02:	89 e0       	ldi	r24, 0x09	; 9
     b04:	93 e0       	ldi	r25, 0x03	; 3
     b06:	0e 94 b5 03 	call	0x76a	; 0x76a <MAIN_ShowError>
     b0a:	03 e0       	ldi	r16, 0x03	; 3
     b0c:	03 c0       	rjmp	.+6      	; 0xb14 <FUNCProgramAVR+0x166>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <PM_CreateProgrammingPackets>
     b14:	ff 20       	and	r15, r15
     b16:	31 f0       	breq	.+12     	; 0xb24 <FUNCProgramAVR+0x176>
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	f8 16       	cp	r15, r24
     b1c:	19 f0       	breq	.+6      	; 0xb24 <FUNCProgramAVR+0x176>
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	f8 16       	cp	r15, r24
     b22:	b1 f4       	brne	.+44     	; 0xb50 <FUNCProgramAVR+0x1a2>
     b24:	85 e4       	ldi	r24, 0x45	; 69
     b26:	0e 94 2d 04 	call	0x85a	; 0x85a <MAIN_ShowProgType>
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <PM_GetStoredDataSize>
     b30:	61 15       	cp	r22, r1
     b32:	71 05       	cpc	r23, r1
     b34:	81 05       	cpc	r24, r1
     b36:	91 05       	cpc	r25, r1
     b38:	31 f4       	brne	.+12     	; 0xb46 <FUNCProgramAVR+0x198>
     b3a:	8f ef       	ldi	r24, 0xFF	; 255
     b3c:	92 e0       	ldi	r25, 0x02	; 2
     b3e:	0e 94 b5 03 	call	0x76a	; 0x76a <MAIN_ShowError>
     b42:	03 e0       	ldi	r16, 0x03	; 3
     b44:	03 c0       	rjmp	.+6      	; 0xb4c <FUNCProgramAVR+0x19e>
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <PM_CreateProgrammingPackets>
     b4c:	ff 20       	and	r15, r15
     b4e:	31 f0       	breq	.+12     	; 0xb5c <FUNCProgramAVR+0x1ae>
     b50:	84 e0       	ldi	r24, 0x04	; 4
     b52:	f8 16       	cp	r15, r24
     b54:	19 f0       	breq	.+6      	; 0xb5c <FUNCProgramAVR+0x1ae>
     b56:	86 e0       	ldi	r24, 0x06	; 6
     b58:	f8 16       	cp	r15, r24
     b5a:	a9 f4       	brne	.+42     	; 0xb86 <FUNCProgramAVR+0x1d8>
     b5c:	86 e4       	ldi	r24, 0x46	; 70
     b5e:	0e 94 2d 04 	call	0x85a	; 0x85a <MAIN_ShowProgType>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     b62:	a0 e3       	ldi	r26, 0x30	; 48
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     b6a:	80 2d       	mov	r24, r0
     b6c:	88 23       	and	r24, r24
     b6e:	31 f4       	brne	.+12     	; 0xb7c <FUNCProgramAVR+0x1ce>
     b70:	81 ef       	ldi	r24, 0xF1	; 241
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	0e 94 b5 03 	call	0x76a	; 0x76a <MAIN_ShowError>
     b78:	03 e0       	ldi	r16, 0x03	; 3
     b7a:	03 c0       	rjmp	.+6      	; 0xb82 <FUNCProgramAVR+0x1d4>
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <PM_SendFuseLockBytes>
     b82:	ff 20       	and	r15, r15
     b84:	89 f0       	breq	.+34     	; 0xba8 <FUNCProgramAVR+0x1fa>
     b86:	85 e0       	ldi	r24, 0x05	; 5
     b88:	f8 16       	cp	r15, r24
     b8a:	71 f0       	breq	.+28     	; 0xba8 <FUNCProgramAVR+0x1fa>
     b8c:	86 e0       	ldi	r24, 0x06	; 6
     b8e:	f8 16       	cp	r15, r24
     b90:	19 f5       	brne	.+70     	; 0xbd8 <FUNCProgramAVR+0x22a>
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	0e 94 5d 02 	call	0x4ba	; 0x4ba <MAIN_ResetCSLine>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	0e 94 49 02 	call	0x492	; 0x492 <MAIN_Delay10MS>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <MAIN_ResetCSLine>
     ba4:	0e 94 70 12 	call	0x24e0	; 0x24e0 <ISPCC_EnterChipProgrammingMode>
     ba8:	8c e4       	ldi	r24, 0x4C	; 76
     baa:	0e 94 2d 04 	call	0x85a	; 0x85a <MAIN_ShowProgType>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     bae:	a1 e3       	ldi	r26, 0x31	; 49
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     bb6:	80 2d       	mov	r24, r0
     bb8:	88 23       	and	r24, r24
     bba:	59 f4       	brne	.+22     	; 0xbd2 <FUNCProgramAVR+0x224>
     bbc:	83 ee       	ldi	r24, 0xE3	; 227
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 b5 03 	call	0x76a	; 0x76a <MAIN_ShowError>
     bc4:	62 ed       	ldi	r22, 0xD2	; 210
     bc6:	72 e0       	ldi	r23, 0x02	; 2
     bc8:	ce 01       	movw	r24, r28
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	0e 94 2e 1a 	call	0x345c	; 0x345c <strcpy_P>
     bd0:	0b c0       	rjmp	.+22     	; 0xbe8 <FUNCProgramAVR+0x23a>
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <PM_SendFuseLockBytes>
     bd8:	62 ed       	ldi	r22, 0xD2	; 210
     bda:	72 e0       	ldi	r23, 0x02	; 2
     bdc:	ce 01       	movw	r24, r28
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	0e 94 2e 1a 	call	0x345c	; 0x345c <strcpy_P>
     be4:	00 23       	and	r16, r16
     be6:	31 f0       	breq	.+12     	; 0xbf4 <FUNCProgramAVR+0x246>
     be8:	6b ec       	ldi	r22, 0xCB	; 203
     bea:	72 e0       	ldi	r23, 0x02	; 2
     bec:	ce 01       	movw	r24, r28
     bee:	0d 96       	adiw	r24, 0x0d	; 13
     bf0:	0e 94 2e 1a 	call	0x345c	; 0x345c <strcpy_P>
     bf4:	ce 01       	movw	r24, r28
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <LCD_puts>
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	0e 94 49 02 	call	0x492	; 0x492 <MAIN_Delay10MS>
     c02:	84 e6       	ldi	r24, 0x64	; 100
     c04:	0e 94 49 02 	call	0x492	; 0x492 <MAIN_Delay10MS>
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <FUNCProgramAVR+0x264>
     c0a:	88 e1       	ldi	r24, 0x18	; 24
     c0c:	94 e0       	ldi	r25, 0x04	; 4
     c0e:	0e 94 b5 03 	call	0x76a	; 0x76a <MAIN_ShowError>
     c12:	80 e8       	ldi	r24, 0x80	; 128
     c14:	80 93 61 00 	sts	0x0061, r24
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	80 93 61 00 	sts	0x0061, r24
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	0e 94 5d 02 	call	0x4ba	; 0x4ba <MAIN_ResetCSLine>
     c24:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <USI_SPIOff>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
     c2e:	80 91 64 00 	lds	r24, 0x0064
     c32:	84 60       	ori	r24, 0x04	; 4
     c34:	80 93 64 00 	sts	0x0064, r24
     c38:	81 b3       	in	r24, 0x11	; 17
     c3a:	8f 7c       	andi	r24, 0xCF	; 207
     c3c:	80 61       	ori	r24, 0x10	; 16
     c3e:	81 bb       	out	0x11, r24	; 17
     c40:	63 96       	adiw	r28, 0x13	; 19
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	08 95       	ret

00000c58 <main>:
     c58:	1f 93       	push	r17
     c5a:	80 e8       	ldi	r24, 0x80	; 128
     c5c:	85 bf       	out	0x35, r24	; 53
     c5e:	85 bf       	out	0x35, r24	; 53
     c60:	80 bf       	out	0x30, r24	; 48
     c62:	85 e0       	ldi	r24, 0x05	; 5
     c64:	80 93 64 00 	sts	0x0064, r24
     c68:	80 e3       	ldi	r24, 0x30	; 48
     c6a:	80 bb       	out	0x10, r24	; 16
     c6c:	87 e2       	ldi	r24, 0x27	; 39
     c6e:	84 b9       	out	0x04, r24	; 4
     c70:	8f ed       	ldi	r24, 0xDF	; 223
     c72:	85 b9       	out	0x05, r24	; 5
     c74:	8c e0       	ldi	r24, 0x0C	; 12
     c76:	8e b9       	out	0x0e, r24	; 14
     c78:	80 93 6b 00 	sts	0x006B, r24
     c7c:	80 ed       	ldi	r24, 0xD0	; 208
     c7e:	80 93 6c 00 	sts	0x006C, r24
     c82:	80 ec       	ldi	r24, 0xC0	; 192
     c84:	8d bb       	out	0x1d, r24	; 29
     c86:	8c bb       	out	0x1c, r24	; 28
     c88:	81 b3       	in	r24, 0x11	; 17
     c8a:	8f 7c       	andi	r24, 0xCF	; 207
     c8c:	80 63       	ori	r24, 0x30	; 48
     c8e:	81 bb       	out	0x11, r24	; 17
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	0e 94 5d 02 	call	0x4ba	; 0x4ba <MAIN_ResetCSLine>
     c96:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_Init>
     c9a:	8f e0       	ldi	r24, 0x0F	; 15
     c9c:	80 93 e7 00 	sts	0x00E7, r24
     ca0:	87 ea       	ldi	r24, 0xA7	; 167
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     ca8:	78 94       	sei
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     caa:	aa e8       	ldi	r26, 0x8A	; 138
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     cb2:	80 2d       	mov	r24, r0
     cb4:	8a 37       	cpi	r24, 0x7A	; 122
     cb6:	89 f0       	breq	.+34     	; 0xcda <main+0x82>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	2f ef       	ldi	r18, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     cbe:	dc 01       	movw	r26, r24
     cc0:	02 2e       	mov	r0, r18
     cc2:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	8b 38       	cpi	r24, 0x8B	; 139
     cca:	91 05       	cpc	r25, r1
     ccc:	c1 f7       	brne	.-16     	; 0xcbe <main+0x66>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     cce:	8a e7       	ldi	r24, 0x7A	; 122
     cd0:	aa e8       	ldi	r26, 0x8A	; 138
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	08 2e       	mov	r0, r24
     cd6:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
     cda:	a6 e8       	ldi	r26, 0x86	; 134
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     ce2:	80 2d       	mov	r24, r0
     ce4:	8f 70       	andi	r24, 0x0F	; 15
     ce6:	80 93 e7 00 	sts	0x00E7, r24
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
     cf0:	0e 94 90 09 	call	0x1320	; 0x1320 <USART_Init>
     cf4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <OSCCAL_Calibrate>
     cf8:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TOUT_SetupSleepTimer>
     cfc:	81 b3       	in	r24, 0x11	; 17
     cfe:	8f 7c       	andi	r24, 0xCF	; 207
     d00:	80 61       	ori	r24, 0x10	; 16
     d02:	81 bb       	out	0x11, r24	; 17
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	8e bb       	out	0x1e, r24	; 30
     d08:	80 e8       	ldi	r24, 0x80	; 128
     d0a:	80 93 61 00 	sts	0x0061, r24
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	80 93 61 00 	sts	0x0061, r24
     d14:	10 e0       	ldi	r17, 0x00	; 0
     d16:	8e b3       	in	r24, 0x1e	; 30
     d18:	88 23       	and	r24, r24
     d1a:	e9 f3       	breq	.-6      	; 0xd16 <main+0xbe>
     d1c:	f6 9b       	sbis	0x1e, 6	; 30
     d1e:	06 c0       	rjmp	.+12     	; 0xd2c <main+0xd4>
     d20:	11 23       	and	r17, r17
     d22:	11 f4       	brne	.+4      	; 0xd28 <main+0xd0>
     d24:	16 e0       	ldi	r17, 0x06	; 6
     d26:	1b c0       	rjmp	.+54     	; 0xd5e <main+0x106>
     d28:	11 50       	subi	r17, 0x01	; 1
     d2a:	19 c0       	rjmp	.+50     	; 0xd5e <main+0x106>
     d2c:	f7 9b       	sbis	0x1e, 7	; 30
     d2e:	06 c0       	rjmp	.+12     	; 0xd3c <main+0xe4>
     d30:	16 30       	cpi	r17, 0x06	; 6
     d32:	11 f4       	brne	.+4      	; 0xd38 <main+0xe0>
     d34:	10 e0       	ldi	r17, 0x00	; 0
     d36:	13 c0       	rjmp	.+38     	; 0xd5e <main+0x106>
     d38:	1f 5f       	subi	r17, 0xFF	; 255
     d3a:	11 c0       	rjmp	.+34     	; 0xd5e <main+0x106>
     d3c:	f4 9b       	sbis	0x1e, 4	; 30
     d3e:	0b c0       	rjmp	.+22     	; 0xd56 <main+0xfe>
     d40:	e1 2f       	mov	r30, r17
     d42:	ff 27       	eor	r31, r31
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	ef 5e       	subi	r30, 0xEF	; 239
     d4a:	fe 4f       	sbci	r31, 0xFE	; 254
     d4c:	85 91       	lpm	r24, Z+
     d4e:	94 91       	lpm	r25, Z
     d50:	fc 01       	movw	r30, r24
     d52:	09 95       	icall
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <main+0x106>
     d56:	f3 9b       	sbis	0x1e, 3	; 30
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <main+0x106>
     d5a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <FUNCShowAbout>
     d5e:	e1 2f       	mov	r30, r17
     d60:	ff 27       	eor	r31, r31
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	ed 5f       	subi	r30, 0xFD	; 253
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	85 91       	lpm	r24, Z+
     d6c:	94 91       	lpm	r25, Z
     d6e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     d72:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     d76:	cf cf       	rjmp	.-98     	; 0xd16 <main+0xbe>

00000d78 <FUNCClearMem>:
     d78:	84 eb       	ldi	r24, 0xB4	; 180
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     d80:	84 eb       	ldi	r24, 0xB4	; 180
     d82:	0e 94 49 02 	call	0x492	; 0x492 <MAIN_Delay10MS>
     d86:	8e ea       	ldi	r24, 0xAE	; 174
     d88:	92 e0       	ldi	r25, 0x02	; 2
     d8a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     d8e:	8e b3       	in	r24, 0x1e	; 30
     d90:	88 23       	and	r24, r24
     d92:	e9 f3       	breq	.-6      	; 0xd8e <FUNCClearMem+0x16>
     d94:	f2 99       	sbic	0x1e, 2	; 30
     d96:	22 c0       	rjmp	.+68     	; 0xddc <FUNCClearMem+0x64>
     d98:	f3 9b       	sbis	0x1e, 3	; 30
     d9a:	f9 cf       	rjmp	.-14     	; 0xd8e <FUNCClearMem+0x16>
     d9c:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     da0:	87 ea       	ldi	r24, 0xA7	; 167
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     da8:	81 b3       	in	r24, 0x11	; 17
     daa:	8f 7c       	andi	r24, 0xCF	; 207
     dac:	80 63       	ori	r24, 0x30	; 48
     dae:	81 bb       	out	0x11, r24	; 17
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	2f ef       	ldi	r18, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     db6:	dc 01       	movw	r26, r24
     db8:	02 2e       	mov	r0, r18
     dba:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	8b 38       	cpi	r24, 0x8B	; 139
     dc2:	91 05       	cpc	r25, r1
     dc4:	c1 f7       	brne	.-16     	; 0xdb6 <FUNCClearMem+0x3e>
     dc6:	81 b3       	in	r24, 0x11	; 17
     dc8:	8f 7c       	andi	r24, 0xCF	; 207
     dca:	80 61       	ori	r24, 0x10	; 16
     dcc:	81 bb       	out	0x11, r24	; 17
     dce:	82 ea       	ldi	r24, 0xA2	; 162
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
     dd8:	0e 94 49 02 	call	0x492	; 0x492 <MAIN_Delay10MS>
     ddc:	08 95       	ret

00000dde <FUNCSetContrast>:
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	26 97       	sbiw	r28, 0x06	; 6
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     df4:	a6 e8       	ldi	r26, 0x86	; 134
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     dfc:	80 2d       	mov	r24, r0
     dfe:	18 2f       	mov	r17, r24
     e00:	1f 70       	andi	r17, 0x0F	; 15
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	8e bb       	out	0x1e, r24	; 30
     e06:	8e b3       	in	r24, 0x1e	; 30
     e08:	88 23       	and	r24, r24
     e0a:	e9 f3       	breq	.-6      	; 0xe06 <FUNCSetContrast+0x28>
     e0c:	f6 9b       	sbis	0x1e, 6	; 30
     e0e:	04 c0       	rjmp	.+8      	; 0xe18 <FUNCSetContrast+0x3a>
     e10:	1f 30       	cpi	r17, 0x0F	; 15
     e12:	50 f4       	brcc	.+20     	; 0xe28 <FUNCSetContrast+0x4a>
     e14:	1f 5f       	subi	r17, 0xFF	; 255
     e16:	08 c0       	rjmp	.+16     	; 0xe28 <FUNCSetContrast+0x4a>
     e18:	f7 9b       	sbis	0x1e, 7	; 30
     e1a:	04 c0       	rjmp	.+8      	; 0xe24 <FUNCSetContrast+0x46>
     e1c:	12 30       	cpi	r17, 0x02	; 2
     e1e:	20 f0       	brcs	.+8      	; 0xe28 <FUNCSetContrast+0x4a>
     e20:	11 50       	subi	r17, 0x01	; 1
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <FUNCSetContrast+0x4a>
     e24:	f2 99       	sbic	0x1e, 2	; 30
     e26:	18 c0       	rjmp	.+48     	; 0xe58 <FUNCSetContrast+0x7a>
     e28:	83 e4       	ldi	r24, 0x43	; 67
     e2a:	89 83       	std	Y+1, r24	; 0x01
     e2c:	84 e5       	ldi	r24, 0x54	; 84
     e2e:	8a 83       	std	Y+2, r24	; 0x02
     e30:	80 e2       	ldi	r24, 0x20	; 32
     e32:	8b 83       	std	Y+3, r24	; 0x03
     e34:	be 01       	movw	r22, r28
     e36:	6c 5f       	subi	r22, 0xFC	; 252
     e38:	7f 4f       	sbci	r23, 0xFF	; 255
     e3a:	81 2f       	mov	r24, r17
     e3c:	99 27       	eor	r25, r25
     e3e:	0e 94 8e 02 	call	0x51c	; 0x51c <MAIN_IntToStr>
     e42:	ce 01       	movw	r24, r28
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	0e 94 6e 08 	call	0x10dc	; 0x10dc <LCD_puts>
     e4a:	81 2f       	mov	r24, r17
     e4c:	8f 70       	andi	r24, 0x0F	; 15
     e4e:	80 93 e7 00 	sts	0x00E7, r24
     e52:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     e56:	d7 cf       	rjmp	.-82     	; 0xe06 <FUNCSetContrast+0x28>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     e58:	a6 e8       	ldi	r26, 0x86	; 134
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	01 2e       	mov	r0, r17
     e5e:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
     e62:	26 96       	adiw	r28, 0x06	; 6
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	08 95       	ret

00000e76 <FUNCSetISPSpeed>:
     e76:	1f 93       	push	r17
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     e78:	a2 e0       	ldi	r26, 0x02	; 2
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     e80:	80 2d       	mov	r24, r0
     e82:	18 2f       	mov	r17, r24
     e84:	84 30       	cpi	r24, 0x04	; 4
     e86:	08 f0       	brcs	.+2      	; 0xe8a <FUNCSetISPSpeed+0x14>
     e88:	13 e0       	ldi	r17, 0x03	; 3
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	8e bb       	out	0x1e, r24	; 30
     e8e:	8e b3       	in	r24, 0x1e	; 30
     e90:	88 23       	and	r24, r24
     e92:	e9 f3       	breq	.-6      	; 0xe8e <FUNCSetISPSpeed+0x18>
     e94:	f6 9b       	sbis	0x1e, 6	; 30
     e96:	06 c0       	rjmp	.+12     	; 0xea4 <FUNCSetISPSpeed+0x2e>
     e98:	11 23       	and	r17, r17
     e9a:	11 f4       	brne	.+4      	; 0xea0 <FUNCSetISPSpeed+0x2a>
     e9c:	13 e0       	ldi	r17, 0x03	; 3
     e9e:	0c c0       	rjmp	.+24     	; 0xeb8 <FUNCSetISPSpeed+0x42>
     ea0:	11 50       	subi	r17, 0x01	; 1
     ea2:	0a c0       	rjmp	.+20     	; 0xeb8 <FUNCSetISPSpeed+0x42>
     ea4:	f7 9b       	sbis	0x1e, 7	; 30
     ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <FUNCSetISPSpeed+0x3a>
     ea8:	13 30       	cpi	r17, 0x03	; 3
     eaa:	29 f0       	breq	.+10     	; 0xeb6 <FUNCSetISPSpeed+0x40>
     eac:	1f 5f       	subi	r17, 0xFF	; 255
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <FUNCSetISPSpeed+0x42>
     eb0:	f2 9b       	sbis	0x1e, 2	; 30
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <FUNCSetISPSpeed+0x42>
     eb4:	0c c0       	rjmp	.+24     	; 0xece <FUNCSetISPSpeed+0x58>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     eb6:	10 e0       	ldi	r17, 0x00	; 0
     eb8:	8a e0       	ldi	r24, 0x0A	; 10
     eba:	18 9f       	mul	r17, r24
     ebc:	c0 01       	movw	r24, r0
     ebe:	11 24       	eor	r1, r1
     ec0:	8a 5d       	subi	r24, 0xDA	; 218
     ec2:	9d 4f       	sbci	r25, 0xFD	; 253
     ec4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     ec8:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     ecc:	e0 cf       	rjmp	.-64     	; 0xe8e <FUNCSetISPSpeed+0x18>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     ece:	a2 e0       	ldi	r26, 0x02	; 2
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	01 2e       	mov	r0, r17
     ed4:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
     ed8:	1f 91       	pop	r17
     eda:	08 95       	ret

00000edc <FUNCSetResetMode>:
     edc:	1f 93       	push	r17
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     ede:	a9 e8       	ldi	r26, 0x89	; 137
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     ee6:	80 2d       	mov	r24, r0
     ee8:	18 2f       	mov	r17, r24
     eea:	11 70       	andi	r17, 0x01	; 1
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	8e bb       	out	0x1e, r24	; 30
     ef0:	8e b3       	in	r24, 0x1e	; 30
     ef2:	88 23       	and	r24, r24
     ef4:	e9 f3       	breq	.-6      	; 0xef0 <FUNCSetResetMode+0x14>
     ef6:	f6 99       	sbic	0x1e, 6	; 30
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <FUNCSetResetMode+0x22>
     efa:	f7 9b       	sbis	0x1e, 7	; 30
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <FUNCSetResetMode+0x28>
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	18 27       	eor	r17, r24
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <FUNCSetResetMode+0x2c>
     f04:	f2 99       	sbic	0x1e, 2	; 30
     f06:	0b c0       	rjmp	.+22     	; 0xf1e <FUNCSetResetMode+0x42>
     f08:	86 e0       	ldi	r24, 0x06	; 6
     f0a:	18 9f       	mul	r17, r24
     f0c:	c0 01       	movw	r24, r0
     f0e:	11 24       	eor	r1, r1
     f10:	82 5b       	subi	r24, 0xB2	; 178
     f12:	9d 4f       	sbci	r25, 0xFD	; 253
     f14:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
     f18:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     f1c:	e9 cf       	rjmp	.-46     	; 0xef0 <FUNCSetResetMode+0x14>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     f1e:	a9 e8       	ldi	r26, 0x89	; 137
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	01 2e       	mov	r0, r17
     f24:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
     f28:	1f 91       	pop	r17
     f2a:	08 95       	ret

00000f2c <FUNCSetFirmMinorVer>:
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	25 97       	sbiw	r28, 0x05	; 5
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     f42:	a7 e8       	ldi	r26, 0x87	; 135
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
     f4a:	80 2d       	mov	r24, r0
     f4c:	18 2f       	mov	r17, r24
     f4e:	8a 30       	cpi	r24, 0x0A	; 10
     f50:	08 f0       	brcs	.+2      	; 0xf54 <FUNCSetFirmMinorVer+0x28>
     f52:	14 e0       	ldi	r17, 0x04	; 4
     f54:	6d e9       	ldi	r22, 0x9D	; 157
     f56:	72 e0       	ldi	r23, 0x02	; 2
     f58:	ce 01       	movw	r24, r28
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	0e 94 2e 1a 	call	0x345c	; 0x345c <strcpy_P>
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	8e bb       	out	0x1e, r24	; 30
     f64:	8e b3       	in	r24, 0x1e	; 30
     f66:	88 23       	and	r24, r24
     f68:	e9 f3       	breq	.-6      	; 0xf64 <FUNCSetFirmMinorVer+0x38>
     f6a:	f6 9b       	sbis	0x1e, 6	; 30
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <FUNCSetFirmMinorVer+0x48>
     f6e:	19 30       	cpi	r17, 0x09	; 9
     f70:	08 f4       	brcc	.+2      	; 0xf74 <FUNCSetFirmMinorVer+0x48>
     f72:	1f 5f       	subi	r17, 0xFF	; 255
     f74:	f7 9b       	sbis	0x1e, 7	; 30
     f76:	04 c0       	rjmp	.+8      	; 0xf80 <FUNCSetFirmMinorVer+0x54>
     f78:	11 23       	and	r17, r17
     f7a:	21 f0       	breq	.+8      	; 0xf84 <FUNCSetFirmMinorVer+0x58>
     f7c:	11 50       	subi	r17, 0x01	; 1
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <FUNCSetFirmMinorVer+0x58>
     f80:	f2 99       	sbic	0x1e, 2	; 30
     f82:	0a c0       	rjmp	.+20     	; 0xf98 <FUNCSetFirmMinorVer+0x6c>
     f84:	10 5d       	subi	r17, 0xD0	; 208
     f86:	1c 83       	std	Y+4, r17	; 0x04
     f88:	10 53       	subi	r17, 0x30	; 48
     f8a:	ce 01       	movw	r24, r28
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <LCD_puts>
     f92:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
     f96:	e6 cf       	rjmp	.-52     	; 0xf64 <FUNCSetFirmMinorVer+0x38>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     f98:	a7 e8       	ldi	r26, 0x87	; 135
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	01 2e       	mov	r0, r17
     f9e:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
     fa2:	25 96       	adiw	r28, 0x05	; 5
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	08 95       	ret

00000fb6 <OSCCAL_Calibrate>:

volatile uint16_t ActualCount = 0;

void OSCCAL_Calibrate(void)
{
     fb6:	10 92 03 01 	sts	0x0103, r1
     fba:	10 92 02 01 	sts	0x0102, r1
	uint8_t SREG_Backup;
	uint8_t LoopCount = (0x7F / 2); // Maximum range is 128, and starts from the middle, so 64 is the max number of iterations required
	uint8_t PrevOSCALValues[2];
   
	// Reset ActualCount
	ActualCount = 0;
   
	// Make sure all clock division is turned off (8Mhz RC clock)
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_8MHZ);
     fbe:	80 e8       	ldi	r24, 0x80	; 128
     fc0:	80 93 61 00 	sts	0x0061, r24
     fc4:	10 92 61 00 	sts	0x0061, r1

	// Inital OSCCAL of half its maximum
	OSCCAL = (0x7F / 2);
     fc8:	8f e3       	ldi	r24, 0x3F	; 63
     fca:	80 93 66 00 	sts	0x0066, r24

	// Save the SREG
	SREG_Backup = SREG;
     fce:	5f b7       	in	r21, 0x3f	; 63
    
	// Disable all timer 1 interrupts
	TIMSK1 = 0;
     fd0:	10 92 6f 00 	sts	0x006F, r1
        
	// Set timer 2 to asyncronous mode (32.768KHz crystal)
	ASSR   = (1 << AS2);
     fd4:	88 e0       	ldi	r24, 0x08	; 8
     fd6:	80 93 b6 00 	sts	0x00B6, r24
        
	// Timer 2 overflow interrupt enable
	TIMSK2 = (1 << TOIE2);
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 70 00 	sts	0x0070, r24

	// Enable interrupts
	sei();
     fe0:	78 94       	sei

	// Start both counters with no prescaling
	TCCR1B = (1 << CS10);
     fe2:	80 93 81 00 	sts	0x0081, r24
	TCCR2A = (1 << CS20);
     fe6:	80 93 b0 00 	sts	0x00B0, r24
	 	 
	// Previous OSCCAL value of 0
	PrevOSCALValues[0] = 0;

	// Wait until timer 2's external 32.768KHz crystal is stable
	while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB) | (1 << OCR2UB)));
     fea:	80 91 b6 00 	lds	r24, 0x00B6
     fee:	99 27       	eor	r25, r25
     ff0:	87 70       	andi	r24, 0x07	; 7
     ff2:	90 70       	andi	r25, 0x00	; 0
     ff4:	89 2b       	or	r24, r25
     ff6:	c9 f7       	brne	.-14     	; 0xfea <OSCCAL_Calibrate+0x34>
    
	// Clear the timer values
	TCNT1  = 0;
     ff8:	10 92 85 00 	sts	0x0085, r1
     ffc:	10 92 84 00 	sts	0x0084, r1
	TCNT2  = 0;
    1000:	10 92 b2 00 	sts	0x00B2, r1
    1004:	2e e3       	ldi	r18, 0x3E	; 62
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	ec ec       	ldi	r30, 0xCC	; 204
    100a:	f4 e6       	ldi	r31, 0x64	; 100
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    100c:	cf 01       	movw	r24, r30
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <OSCCAL_Calibrate+0x58>
    
	while (LoopCount--)
	{
		// Let it take a few readings (14ms, approx 2 readings)
		_delay_ms(14);

		PrevOSCALValues[1] = PrevOSCALValues[0];
		PrevOSCALValues[0] = OSCCAL;
    1012:	30 91 66 00 	lds	r19, 0x0066
        
		if (ActualCount > OSCCAL_TARGETCOUNT)       // Clock is running too fast
    1016:	80 91 02 01 	lds	r24, 0x0102
    101a:	90 91 03 01 	lds	r25, 0x0103
    101e:	81 50       	subi	r24, 0x01	; 1
    1020:	91 4e       	sbci	r25, 0xE1	; 225
    1022:	20 f0       	brcs	.+8      	; 0x102c <OSCCAL_Calibrate+0x76>
			OSCCAL--;
    1024:	80 91 66 00 	lds	r24, 0x0066
    1028:	81 50       	subi	r24, 0x01	; 1
    102a:	0a c0       	rjmp	.+20     	; 0x1040 <OSCCAL_Calibrate+0x8a>
		else if (ActualCount < OSCCAL_TARGETCOUNT) // Clock is running too slow
    102c:	80 91 02 01 	lds	r24, 0x0102
    1030:	90 91 03 01 	lds	r25, 0x0103
    1034:	80 50       	subi	r24, 0x00	; 0
    1036:	91 4e       	sbci	r25, 0xE1	; 225
    1038:	28 f4       	brcc	.+10     	; 0x1044 <OSCCAL_Calibrate+0x8e>
			OSCCAL++;
    103a:	80 91 66 00 	lds	r24, 0x0066
    103e:	8f 5f       	subi	r24, 0xFF	; 255
    1040:	80 93 66 00 	sts	0x0066, r24
		
		// When the routine finds the closest value for the given target count,
		// it will cause the OSCCAL to hover around the closest two values.
		// If the current value is the same as two loops previous, exit the
		// routine as the best value has been found.
		if (OSCCAL == PrevOSCALValues[1])
    1044:	80 91 66 00 	lds	r24, 0x0066
    1048:	84 17       	cp	r24, r20
    104a:	29 f0       	breq	.+10     	; 0x1056 <OSCCAL_Calibrate+0xa0>
    104c:	21 50       	subi	r18, 0x01	; 1
    104e:	2f 3f       	cpi	r18, 0xFF	; 255
    1050:	11 f0       	breq	.+4      	; 0x1056 <OSCCAL_Calibrate+0xa0>
    1052:	43 2f       	mov	r20, r19
    1054:	db cf       	rjmp	.-74     	; 0x100c <OSCCAL_Calibrate+0x56>
		  break;
	}

	// Disable all timer interrupts
	TIMSK1 = 0;
    1056:	10 92 6f 00 	sts	0x006F, r1
	TIMSK2 = 0;
    105a:	10 92 70 00 	sts	0x0070, r1
    
	// Stop the timers
	TCCR1B = 0x00;
    105e:	10 92 81 00 	sts	0x0081, r1
	TCCR2A = 0x00;
    1062:	10 92 b0 00 	sts	0x00B0, r1

	// Turn off timer 2 asynchronous mode
	ASSR  &= ~(1 << AS2);
    1066:	80 91 b6 00 	lds	r24, 0x00B6
    106a:	87 7f       	andi	r24, 0xF7	; 247
    106c:	80 93 b6 00 	sts	0x00B6, r24

	// Restore SREG
	SREG = SREG_Backup;
    1070:	5f bf       	out	0x3f, r21	; 63
    1072:	08 95       	ret

00001074 <__vector_5>:
        
	return;
}

ISR(TIMER2_OVF_vect, ISR_BLOCK) // Occurs 32768/256 timers per second, or 128Hz
{
    1074:	1f 92       	push	r1
    1076:	0f 92       	push	r0
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	0f 92       	push	r0
    107c:	11 24       	eor	r1, r1
    107e:	8f 93       	push	r24
    1080:	9f 93       	push	r25
    1082:	af 93       	push	r26
    1084:	bf 93       	push	r27
    1086:	ef 93       	push	r30
    1088:	ff 93       	push	r31
	// Stop timer 1 so it can be read
	TCCR1B = 0x00;
    108a:	a1 e8       	ldi	r26, 0x81	; 129
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	1c 92       	st	X, r1
    
	// Record timer 1's value
	ActualCount = TCNT1;
    1090:	e4 e8       	ldi	r30, 0x84	; 132
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	91 81       	ldd	r25, Z+1	; 0x01
    1098:	90 93 03 01 	sts	0x0103, r25
    109c:	80 93 02 01 	sts	0x0102, r24
	     
	// Reset counters and restart timer 1
	TCNT1  = 0;
    10a0:	11 82       	std	Z+1, r1	; 0x01
    10a2:	10 82       	st	Z, r1
	TCNT2  = 0;
    10a4:	10 92 b2 00 	sts	0x00B2, r1
	TCCR1B = (1 << CS10);
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	8c 93       	st	X, r24
    10ac:	ff 91       	pop	r31
    10ae:	ef 91       	pop	r30
    10b0:	bf 91       	pop	r27
    10b2:	af 91       	pop	r26
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	0f 90       	pop	r0
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	0f 90       	pop	r0
    10be:	1f 90       	pop	r1
    10c0:	18 95       	reti

000010c2 <LCD_Init>:

// ======================================================================================

void LCD_Init(void)
{
    10c2:	8f e0       	ldi	r24, 0x0F	; 15
    10c4:	80 93 e7 00 	sts	0x00E7, r24
	// Set the initial contrast level to maximum:
	LCDCCR = 0x0F;

    // Select asynchronous clock source, enable all COM pins and enable all segment pins:
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
    10c8:	87 eb       	ldi	r24, 0xB7	; 183
    10ca:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32Hz:
    LCDFRR  = (7<<LCDCD0);    
    10ce:	87 e0       	ldi	r24, 0x07	; 7
    10d0:	80 93 e6 00 	sts	0x00E6, r24

	// Enable LCD and set low power waveform, enable start of frame interrupt:
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB) | (1<<LCDIE);
    10d4:	88 ec       	ldi	r24, 0xC8	; 200
    10d6:	80 93 e4 00 	sts	0x00E4, r24
    10da:	08 95       	ret

000010dc <LCD_puts>:
}

void LCD_puts_f(const uint8_t *FlashData)
{
	uint8_t StrBuff[LCD_TEXTBUFFER_SIZE];

	strcpy_P(StrBuff, FlashData);
	LCD_puts(StrBuff);
}

void LCD_puts(const uint8_t *Data)
{
    10dc:	fc 01       	movw	r30, r24
    10de:	aa e0       	ldi	r26, 0x0A	; 10
    10e0:	b1 e0       	ldi	r27, 0x01	; 1
    10e2:	38 2f       	mov	r19, r24
    10e4:	4f ef       	ldi	r20, 0xFF	; 255
    10e6:	2e 2f       	mov	r18, r30
    10e8:	23 1b       	sub	r18, r19
	uint8_t LoadB;
	
	for (LoadB = 0; LoadB < 20; LoadB++)
	{
		uint8_t CByte = *(Data++);
    10ea:	91 91       	ld	r25, Z+
	
		if ((CByte >= '*') && (CByte <= 'z') && (CByte != ' '))
    10ec:	89 2f       	mov	r24, r25
    10ee:	8a 52       	subi	r24, 0x2A	; 42
    10f0:	81 35       	cpi	r24, 0x51	; 81
    10f2:	10 f4       	brcc	.+4      	; 0x10f8 <LCD_puts+0x1c>
		  TextBuffer[LoadB] = (CByte - '*');
    10f4:	8c 93       	st	X, r24
    10f6:	03 c0       	rjmp	.+6      	; 0x10fe <LCD_puts+0x22>
		else if (CByte == 0x00)
    10f8:	99 23       	and	r25, r25
    10fa:	41 f0       	breq	.+16     	; 0x110c <LCD_puts+0x30>
		  break;
		else
		  TextBuffer[LoadB] = 0xFF;		
    10fc:	4c 93       	st	X, r20
    10fe:	2e 2f       	mov	r18, r30
    1100:	23 1b       	sub	r18, r19
    1102:	11 96       	adiw	r26, 0x01	; 1
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	ae 31       	cpi	r26, 0x1E	; 30
    1108:	b8 07       	cpc	r27, r24
    110a:	69 f7       	brne	.-38     	; 0x10e6 <LCD_puts+0xa>
	}

	ScrollMode  = ((LoadB > 6)? TRUE : FALSE);
    110c:	10 92 04 01 	sts	0x0104, r1
    1110:	27 30       	cpi	r18, 0x07	; 7
    1112:	18 f0       	brcs	.+6      	; 0x111a <LCD_puts+0x3e>
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 04 01 	sts	0x0104, r24
	ScrollCount = 0;
    111a:	10 92 06 01 	sts	0x0106, r1
    111e:	82 2f       	mov	r24, r18
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255

	for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
		TextBuffer[LoadB++] = 0xFF;
    1124:	e8 2f       	mov	r30, r24
    1126:	ff 27       	eor	r31, r31
    1128:	e6 5f       	subi	r30, 0xF6	; 246
    112a:	fe 4f       	sbci	r31, 0xFE	; 254
    112c:	30 83       	st	Z, r19
    112e:	8f 5f       	subi	r24, 0xFF	; 255
    1130:	9f 5f       	subi	r25, 0xFF	; 255
    1132:	97 30       	cpi	r25, 0x07	; 7
    1134:	b9 f7       	brne	.-18     	; 0x1124 <LCD_puts+0x48>
    1136:	82 2f       	mov	r24, r18
    1138:	89 5f       	subi	r24, 0xF9	; 249
	
	TextBuffer[LoadB] = 0x00;
    113a:	e8 2f       	mov	r30, r24
    113c:	ff 27       	eor	r31, r31
    113e:	e6 5f       	subi	r30, 0xF6	; 246
    1140:	fe 4f       	sbci	r31, 0xFE	; 254
    1142:	10 82       	st	Z, r1
	StrStart   = 0;
    1144:	10 92 08 01 	sts	0x0108, r1
	StrEnd     = LoadB;	
    1148:	80 93 09 01 	sts	0x0109, r24
	DelayCount = LCD_DELAYCOUNT_DEFAULT;
    114c:	8a e0       	ldi	r24, 0x0A	; 10
    114e:	80 93 05 01 	sts	0x0105, r24

	UpdateLCD  = TRUE;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 93 07 01 	sts	0x0107, r24
    1158:	08 95       	ret

0000115a <LCD_WriteChar>:
}

void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit)
{
    115a:	8f 3f       	cpi	r24, 0xFF	; 255
    115c:	19 f4       	brne	.+6      	; 0x1164 <LCD_WriteChar+0xa>
	uint16_t SegData  = 0x00;
	uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1));

	if (Byte != 0xFF)
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	08 c0       	rjmp	.+16     	; 0x1174 <LCD_WriteChar+0x1a>
	  SegData = pgm_read_word(&LCD_SegTable[Byte]);	
    1164:	e8 2f       	mov	r30, r24
    1166:	ff 27       	eor	r31, r31
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	e4 5d       	subi	r30, 0xD4	; 212
    116e:	fc 4f       	sbci	r31, 0xFC	; 252
    1170:	45 91       	lpm	r20, Z+
    1172:	54 91       	lpm	r21, Z
    1174:	86 2f       	mov	r24, r22
    1176:	86 95       	lsr	r24
    1178:	e8 2f       	mov	r30, r24
    117a:	ff 27       	eor	r31, r31
    117c:	eb 5d       	subi	r30, 0xDB	; 219
    117e:	fe 4f       	sbci	r31, 0xFE	; 254
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	77 27       	eor	r23, r23
    1184:	61 70       	andi	r22, 0x01	; 1
    1186:	70 70       	andi	r23, 0x00	; 0

	for (uint8_t BNib = 0; BNib < 4; BNib++)
	{
		uint8_t Mask          = 0xF0;
		uint8_t MaskedSegData = (SegData & 0x0000F);
    1188:	24 2f       	mov	r18, r20
    118a:	2f 70       	andi	r18, 0x0F	; 15
	
		if (Digit & 0x01)
    118c:	61 15       	cp	r22, r1
    118e:	71 05       	cpc	r23, r1
    1190:	11 f4       	brne	.+4      	; 0x1196 <LCD_WriteChar+0x3c>
    1192:	90 ef       	ldi	r25, 0xF0	; 240
    1194:	03 c0       	rjmp	.+6      	; 0x119c <LCD_WriteChar+0x42>
		{
			Mask = 0x0F;
			MaskedSegData <<= 4;
    1196:	22 95       	swap	r18
    1198:	20 7f       	andi	r18, 0xF0	; 240
    119a:	9f e0       	ldi	r25, 0x0F	; 15
		}
		
		*BuffPtr = ((*BuffPtr & Mask) | MaskedSegData);
    119c:	80 81       	ld	r24, Z
    119e:	98 23       	and	r25, r24
    11a0:	92 2b       	or	r25, r18
    11a2:	90 83       	st	Z, r25
    11a4:	3f 5f       	subi	r19, 0xFF	; 255
    11a6:	34 30       	cpi	r19, 0x04	; 4
    11a8:	39 f0       	breq	.+14     	; 0x11b8 <LCD_WriteChar+0x5e>

		SegData >>= 4;
    11aa:	84 e0       	ldi	r24, 0x04	; 4
    11ac:	56 95       	lsr	r21
    11ae:	47 95       	ror	r20
    11b0:	8a 95       	dec	r24
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <LCD_WriteChar+0x52>
		BuffPtr  += 5;
    11b4:	35 96       	adiw	r30, 0x05	; 5
    11b6:	e8 cf       	rjmp	.-48     	; 0x1188 <LCD_WriteChar+0x2e>
    11b8:	08 95       	ret

000011ba <__vector_22>:
	}
}

ISR(LCD_vect, ISR_NOBLOCK)
{
    11ba:	78 94       	sei
    11bc:	1f 92       	push	r1
    11be:	0f 92       	push	r0
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	0f 92       	push	r0
    11c4:	11 24       	eor	r1, r1
    11c6:	cf 92       	push	r12
    11c8:	df 92       	push	r13
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	2f 93       	push	r18
    11d2:	3f 93       	push	r19
    11d4:	4f 93       	push	r20
    11d6:	5f 93       	push	r21
    11d8:	6f 93       	push	r22
    11da:	7f 93       	push	r23
    11dc:	8f 93       	push	r24
    11de:	9f 93       	push	r25
    11e0:	af 93       	push	r26
    11e2:	bf 93       	push	r27
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	ef 93       	push	r30
    11ea:	ff 93       	push	r31
	if (ScrollMode)
    11ec:	80 91 04 01 	lds	r24, 0x0104
    11f0:	88 23       	and	r24, r24
    11f2:	99 f0       	breq	.+38     	; 0x121a <__vector_22+0x60>
	{
		if (DelayCount)
    11f4:	80 91 05 01 	lds	r24, 0x0105
    11f8:	88 23       	and	r24, r24
    11fa:	21 f0       	breq	.+8      	; 0x1204 <__vector_22+0x4a>
		{
			DelayCount--;
    11fc:	81 50       	subi	r24, 0x01	; 1
    11fe:	80 93 05 01 	sts	0x0105, r24
    1202:	0b c0       	rjmp	.+22     	; 0x121a <__vector_22+0x60>
		}
		else
		{
			if (!(ScrollCount--))
    1204:	80 91 06 01 	lds	r24, 0x0106
    1208:	81 50       	subi	r24, 0x01	; 1
    120a:	80 93 06 01 	sts	0x0106, r24
    120e:	8f 3f       	cpi	r24, 0xFF	; 255
    1210:	21 f4       	brne	.+8      	; 0x121a <__vector_22+0x60>
			  UpdateLCD = TRUE;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	80 93 07 01 	sts	0x0107, r24
    1218:	04 c0       	rjmp	.+8      	; 0x1222 <__vector_22+0x68>
		}
	}

	if (UpdateLCD)
    121a:	80 91 07 01 	lds	r24, 0x0107
    121e:	88 23       	and	r24, r24
    1220:	41 f1       	breq	.+80     	; 0x1272 <__vector_22+0xb8>
	{
		for (uint8_t Character = 0; Character < 6; Character++)
		{
			uint8_t Byte = (StrStart + Character);
    1222:	10 91 08 01 	lds	r17, 0x0108

			if (Byte >= StrEnd)
    1226:	f0 90 09 01 	lds	r15, 0x0109
			  Byte = TextBuffer[Byte - StrEnd];
    122a:	cf 2c       	mov	r12, r15
    122c:	dd 24       	eor	r13, r13
    122e:	01 2f       	mov	r16, r17
    1230:	c0 e0       	ldi	r28, 0x00	; 0
    1232:	d0 e0       	ldi	r29, 0x00	; 0
    1234:	6c 2f       	mov	r22, r28
    1236:	e0 2f       	mov	r30, r16
    1238:	ff 27       	eor	r31, r31
    123a:	0f 15       	cp	r16, r15
    123c:	10 f0       	brcs	.+4      	; 0x1242 <__vector_22+0x88>
    123e:	ec 19       	sub	r30, r12
    1240:	fd 09       	sbc	r31, r13
			else
			  Byte = TextBuffer[Byte];
    1242:	e6 5f       	subi	r30, 0xF6	; 246
    1244:	fe 4f       	sbci	r31, 0xFE	; 254
    1246:	80 81       	ld	r24, Z
			
			LCD_WriteChar(Byte, Character);
    1248:	0e 94 ad 08 	call	0x115a	; 0x115a <LCD_WriteChar>
    124c:	21 96       	adiw	r28, 0x01	; 1
    124e:	0f 5f       	subi	r16, 0xFF	; 255
    1250:	c6 30       	cpi	r28, 0x06	; 6
    1252:	d1 05       	cpc	r29, r1
    1254:	79 f7       	brne	.-34     	; 0x1234 <__vector_22+0x7a>
		}
		
		if (StrStart++ == StrEnd)
    1256:	1f 5f       	subi	r17, 0xFF	; 255
    1258:	10 93 08 01 	sts	0x0108, r17
    125c:	11 50       	subi	r17, 0x01	; 1
    125e:	1f 15       	cp	r17, r15
    1260:	19 f4       	brne	.+6      	; 0x1268 <__vector_22+0xae>
		  StrStart = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	80 93 08 01 	sts	0x0108, r24
		
		ScrollCount = LCD_SCROLLCOUNT_DEFAULT;
    1268:	83 e0       	ldi	r24, 0x03	; 3
    126a:	80 93 06 01 	sts	0x0106, r24
		UpdateLCD = FALSE;
    126e:	10 92 07 01 	sts	0x0107, r1
    1272:	a5 e2       	ldi	r26, 0x25	; 37
    1274:	b1 e0       	ldi	r27, 0x01	; 1
    1276:	ec ee       	ldi	r30, 0xEC	; 236
    1278:	f0 e0       	ldi	r31, 0x00	; 0
	}

	for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++)
	  *(pLCDREG + LCDChar) = SegBuffer[LCDChar];
    127a:	8d 91       	ld	r24, X+
    127c:	81 93       	st	Z+, r24
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	e0 30       	cpi	r30, 0x00	; 0
    1282:	f8 07       	cpc	r31, r24
    1284:	d1 f7       	brne	.-12     	; 0x127a <__vector_22+0xc0>
    1286:	ff 91       	pop	r31
    1288:	ef 91       	pop	r30
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	bf 91       	pop	r27
    1290:	af 91       	pop	r26
    1292:	9f 91       	pop	r25
    1294:	8f 91       	pop	r24
    1296:	7f 91       	pop	r23
    1298:	6f 91       	pop	r22
    129a:	5f 91       	pop	r21
    129c:	4f 91       	pop	r20
    129e:	3f 91       	pop	r19
    12a0:	2f 91       	pop	r18
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	df 90       	pop	r13
    12aa:	cf 90       	pop	r12
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	0f 90       	pop	r0
    12b2:	1f 90       	pop	r1
    12b4:	18 95       	reti

000012b6 <LCD_puts_f>:
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	64 97       	sbiw	r28, 0x14	; 20
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	8e 01       	movw	r16, r28
    12d0:	0f 5f       	subi	r16, 0xFF	; 255
    12d2:	1f 4f       	sbci	r17, 0xFF	; 255
    12d4:	bc 01       	movw	r22, r24
    12d6:	c8 01       	movw	r24, r16
    12d8:	0e 94 2e 1a 	call	0x345c	; 0x345c <strcpy_P>
    12dc:	c8 01       	movw	r24, r16
    12de:	0e 94 6e 08 	call	0x10dc	; 0x10dc <LCD_puts>
    12e2:	64 96       	adiw	r28, 0x14	; 20
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	08 95       	ret

000012f8 <USART_Tx>:
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_Tx(const char data)
{
    12f8:	98 2f       	mov	r25, r24
    while (!(UCSRA & (1 << UDRE)));
    12fa:	80 91 c0 00 	lds	r24, 0x00C0
    12fe:	85 ff       	sbrs	r24, 5
    1300:	fc cf       	rjmp	.-8      	; 0x12fa <USART_Tx+0x2>
    UDR = data;
    1302:	90 93 c6 00 	sts	0x00C6, r25
    1306:	08 95       	ret

00001308 <USART_Rx>:
}

/*****************************************************************************
*
*   Function name : Usart_Rx
*
*   Returns :       char: byte received
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART
*
*****************************************************************************/
char USART_Rx(void)
{
    1308:	80 91 b4 02 	lds	r24, 0x02B4
    130c:	88 23       	and	r24, r24
    130e:	21 f4       	brne	.+8      	; 0x1318 <USART_Rx+0x10>
    while (!(BuffElements) && !(PacketTimeOut)) {};
    1310:	80 91 45 01 	lds	r24, 0x0145
    1314:	88 23       	and	r24, r24
    1316:	c1 f3       	breq	.-16     	; 0x1308 <USART_Rx>
    return BUFF_GetBuffByte();
    1318:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <BUFF_GetBuffByte>
}
    131c:	99 27       	eor	r25, r25
    131e:	08 95       	ret

00001320 <USART_Init>:
    1320:	10 92 c5 00 	sts	0x00C5, r1
    1324:	87 e0       	ldi	r24, 0x07	; 7
    1326:	80 93 c4 00 	sts	0x00C4, r24
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	80 93 c0 00 	sts	0x00C0, r24
    1330:	80 e8       	ldi	r24, 0x80	; 128
    1332:	80 93 c1 00 	sts	0x00C1, r24
    1336:	86 e0       	ldi	r24, 0x06	; 6
    1338:	80 93 c2 00 	sts	0x00C2, r24
    133c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <BUFF_InitialiseBuffer>
    1340:	08 95       	ret

00001342 <SPI_SPIInit>:

// ======================================================================================

void SPI_SPIInit(void)
{
    1342:	e4 e6       	ldi	r30, 0x64	; 100
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	8b 7f       	andi	r24, 0xFB	; 251
    134a:	80 83       	st	Z, r24
	PRR &= ~(1 << PRSPI);              // Enable the SPI system by clearing the power save register SPI disable bit

	// Master, Sample falling edge (setup rising), Fosc/2 speed (8Mhz/2 = 4MHz)
	SPSR = (1 << SPI2X);
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	8d bd       	out	0x2d, r24	; 45
	SPCR = ((1 << SPE) | (1 << MSTR) | (1 << CPHA) | (1 << CPOL));
    1350:	8c e5       	ldi	r24, 0x5C	; 92
    1352:	8c bd       	out	0x2c, r24	; 44
    1354:	08 95       	ret

00001356 <SPI_SPITransmit>:
}

uint8_t SPI_SPITransmit(const uint8_t Data)
{
    1356:	8e bd       	out	0x2e, r24	; 46
	SPDR = Data;                       // Loading a byte into the register starts the transmission
	while (!(SPSR & (1 << SPIF)));    // Wait until transmission completed
    1358:	0d b4       	in	r0, 0x2d	; 45
    135a:	07 fe       	sbrs	r0, 7
    135c:	fd cf       	rjmp	.-6      	; 0x1358 <SPI_SPITransmit+0x2>
	return SPDR;
    135e:	8e b5       	in	r24, 0x2e	; 46
}
    1360:	99 27       	eor	r25, r25
    1362:	08 95       	ret

00001364 <SPI_SPITransmitWord>:

uint8_t SPI_SPITransmitWord(const uint16_t Data)
{
    1364:	9c 01       	movw	r18, r24
	SPI_SPITransmit((uint8_t)(Data >> 8));
    1366:	83 2f       	mov	r24, r19
    1368:	99 27       	eor	r25, r25
    136a:	8e bd       	out	0x2e, r24	; 46
    136c:	0d b4       	in	r0, 0x2d	; 45
    136e:	07 fe       	sbrs	r0, 7
    1370:	fd cf       	rjmp	.-6      	; 0x136c <SPI_SPITransmitWord+0x8>
    1372:	8e b5       	in	r24, 0x2e	; 46
    1374:	2e bd       	out	0x2e, r18	; 46
    1376:	0d b4       	in	r0, 0x2d	; 45
    1378:	07 fe       	sbrs	r0, 7
    137a:	fd cf       	rjmp	.-6      	; 0x1376 <SPI_SPITransmitWord+0x12>
    137c:	8e b5       	in	r24, 0x2e	; 46
	return SPI_SPITransmit((uint8_t)Data);
}
    137e:	99 27       	eor	r25, r25
    1380:	08 95       	ret

00001382 <__vector_17>:
 *  have to stop the timer tick.
 *  For all modes the USIDR contents are stored and flags are updated.
 */
ISR(USI_OVERFLOW_vect, ISR_BLOCK)
{
    1382:	1f 92       	push	r1
    1384:	0f 92       	push	r0
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	0f 92       	push	r0
    138a:	11 24       	eor	r1, r1
    138c:	8f 93       	push	r24
    138e:	ef 93       	push	r30
    1390:	ff 93       	push	r31
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	TIMSK0 &= ~(1<<OCIE0A);
    1392:	ee e6       	ldi	r30, 0x6E	; 110
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	8d 7f       	andi	r24, 0xFD	; 253
    139a:	80 83       	st	Z, r24
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
    139c:	80 e4       	ldi	r24, 0x40	; 64
    139e:	80 93 b9 00 	sts	0x00B9, r24
	TransferComplete = 1;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	80 93 70 02 	sts	0x0270, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
    13a8:	80 91 ba 00 	lds	r24, 0x00BA
    13ac:	80 93 71 02 	sts	0x0271, r24
    13b0:	ff 91       	pop	r31
    13b2:	ef 91       	pop	r30
    13b4:	8f 91       	pop	r24
    13b6:	0f 90       	pop	r0
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	0f 90       	pop	r0
    13bc:	1f 90       	pop	r1
    13be:	18 95       	reti

000013c0 <USI_SPIOff>:
}



/*! \brief  Initialize USI as SPI master.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from slave to master mode.
 *  Note that the stored USIDR value is cleared.
 *
 */
void USI_SPIInitMaster(const uint8_t Freq)
{
	// Configure port directions.
 	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN);  // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                       // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                        // Pull-ups.
	USI_OUT_REG &= ~(1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Pull-ups.
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = USI_CONTROL_REG_FLAGS;

	// Set the compare and prescaler for the requested frequency:
	USI_SPISetSpeed(Freq);
	
	// Init driver status register.
	TransferComplete = 0;
	
	storedUSIDR = 0;
}

void USI_SPIOff(void)
{
    13c0:	8d b1       	in	r24, 0x0d	; 13
    13c2:	8f 7a       	andi	r24, 0xAF	; 175
    13c4:	8d b9       	out	0x0d, r24	; 13
	USI_DIR_REG &= ~((1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN));                        // Inputs.
	USI_OUT_REG &= ~((1<<USI_DATAIN_PIN)  | (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN)); // Pull-ups.
    13c6:	8e b1       	in	r24, 0x0e	; 14
    13c8:	8f 78       	andi	r24, 0x8F	; 143
    13ca:	8e b9       	out	0x0e, r24	; 14
	DDRF  &= ~(1 << 6);
    13cc:	86 98       	cbi	0x10, 6	; 16
	PORTF &= ~(1 << 6);
    13ce:	8e 98       	cbi	0x11, 6	; 17
	
	USI_STOPUSITIMER();
    13d0:	14 bc       	out	0x24, r1	; 36
    13d2:	08 95       	ret

000013d4 <USI_SPITransmit>:
}

/*! \brief  Put one byte on bus.
 *
 *  Use this function like you would write to the SPDR register in the native SPI module.
 *  Calling this function in master mode starts a transfer, while in slave mode, a
 *  byte will be prepared for the next transfer initiated by the master device.
 *  If a transfer is in progress, this function will set the write collision flag
 *  and return without altering the data registers.
 *
 *  \returns  Value returned by slave.
 */
uint8_t USI_SPITransmit(uint8_t val)
{
    13d4:	10 92 70 02 	sts	0x0270, r1
	// Reinit flags.
	TransferComplete = 0;

	// Put data in USI data register.
	USIDR = val;
    13d8:	80 93 ba 00 	sts	0x00BA, r24
	
	TIFR0  |= (1<<OCF0A);  // Clear compare match flag.
    13dc:	a9 9a       	sbi	0x15, 1	; 21
	TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.
    13de:	80 91 6e 00 	lds	r24, 0x006E
    13e2:	82 60       	ori	r24, 0x02	; 2
    13e4:	80 93 6e 00 	sts	0x006E, r24

	// Clear the timer 0 value
	TCNT0 = 0;
    13e8:	16 bc       	out	0x26, r1	; 38

	while (!(TransferComplete));
    13ea:	80 91 70 02 	lds	r24, 0x0270
    13ee:	88 23       	and	r24, r24
    13f0:	e1 f3       	breq	.-8      	; 0x13ea <USI_SPITransmit+0x16>

	return storedUSIDR;
    13f2:	80 91 71 02 	lds	r24, 0x0271
}
    13f6:	99 27       	eor	r25, r25
    13f8:	08 95       	ret

000013fa <USI_SPITransmitWord>:

uint8_t USI_SPITransmitWord(const uint16_t val )
{
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	8c 01       	movw	r16, r24
	USI_SPITransmit((uint8_t)(val >> 8));
    1400:	81 2f       	mov	r24, r17
    1402:	99 27       	eor	r25, r25
    1404:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
	return USI_SPITransmit((uint8_t)val);
    1408:	80 2f       	mov	r24, r16
    140a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
}
    140e:	99 27       	eor	r25, r25
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	08 95       	ret

00001416 <USI_SPISetSpeed>:

void USI_SPIToggleClock(void)
{
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);	
}

void USI_SPISetSpeed(const uint8_t Freq)
{
    1416:	98 2f       	mov	r25, r24
    1418:	29 e9       	ldi	r18, 0x99	; 153
    141a:	33 e0       	ldi	r19, 0x03	; 3
    141c:	f9 01       	movw	r30, r18
    141e:	31 97       	sbiw	r30, 0x01	; 1
	for (uint8_t MatchIndex = 0; MatchIndex < USI_PRESET_SPEEDS; MatchIndex++)
	{
		if ((pgm_read_byte(&USIPSValues[MatchIndex][0]) == Freq) || (MatchIndex == (USI_PRESET_SPEEDS - 1)))
    1420:	84 91       	lpm	r24, Z
    1422:	89 17       	cp	r24, r25
    1424:	21 f0       	breq	.+8      	; 0x142e <USI_SPISetSpeed+0x18>
    1426:	83 e0       	ldi	r24, 0x03	; 3
    1428:	ee 39       	cpi	r30, 0x9E	; 158
    142a:	f8 07       	cpc	r31, r24
    142c:	31 f4       	brne	.+12     	; 0x143a <USI_SPISetSpeed+0x24>
		{
			// Init Output Compare Register.
			OCR0A = pgm_read_byte(&USIPSValues[MatchIndex][1]);
    142e:	f9 01       	movw	r30, r18
    1430:	84 91       	lpm	r24, Z
    1432:	87 bd       	out	0x27, r24	; 39

			// Enable 'Clear Timer on Compare match' and set prescaler, which starts the timer
			TCCR0A = ((1<<WGM01) | TC0_PS_1);
    1434:	89 e0       	ldi	r24, 0x09	; 9
    1436:	84 bd       	out	0x24, r24	; 36
    1438:	08 95       	ret
    143a:	32 96       	adiw	r30, 0x02	; 2
    143c:	2e 5f       	subi	r18, 0xFE	; 254
    143e:	3f 4f       	sbci	r19, 0xFF	; 255
    1440:	83 e0       	ldi	r24, 0x03	; 3
    1442:	e0 3a       	cpi	r30, 0xA0	; 160
    1444:	f8 07       	cpc	r31, r24
    1446:	61 f7       	brne	.-40     	; 0x1420 <USI_SPISetSpeed+0xa>
    1448:	08 95       	ret

0000144a <USI_SPIInitMaster>:
    144a:	9d b1       	in	r25, 0x0d	; 13
    144c:	90 65       	ori	r25, 0x50	; 80
    144e:	9d b9       	out	0x0d, r25	; 13
    1450:	6d 98       	cbi	0x0d, 5	; 13
    1452:	75 9a       	sbi	0x0e, 5	; 14
    1454:	76 98       	cbi	0x0e, 6	; 14
    1456:	9a e5       	ldi	r25, 0x5A	; 90
    1458:	90 93 b8 00 	sts	0x00B8, r25
    145c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <USI_SPISetSpeed>
    1460:	10 92 70 02 	sts	0x0270, r1
    1464:	10 92 71 02 	sts	0x0271, r1
    1468:	08 95       	ret

0000146a <USI_SPIToggleClock>:
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MAIN_Delay1MS>
    1474:	08 eb       	ldi	r16, 0xB8	; 184
    1476:	10 e0       	ldi	r17, 0x00	; 0
    1478:	f8 01       	movw	r30, r16
    147a:	80 81       	ld	r24, Z
    147c:	81 60       	ori	r24, 0x01	; 1
    147e:	80 83       	st	Z, r24
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MAIN_Delay1MS>
    1486:	f8 01       	movw	r30, r16
    1488:	80 81       	ld	r24, Z
    148a:	81 60       	ori	r24, 0x01	; 1
    148c:	80 83       	st	Z, r24
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MAIN_Delay1MS>
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	08 95       	ret

0000149a <DF_EnableDataflash>:
	DF_WaitWhileBusy();
}

void DF_EnableDataflash(const uint8_t Enabled)
{
    149a:	90 91 43 01 	lds	r25, 0x0143
	if (Enabled == TRUE)
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	31 f4       	brne	.+12     	; 0x14ae <DF_EnableDataflash+0x14>
	{
		if (DataflashInfo.UseExernalDF == TRUE)
    14a2:	91 30       	cpi	r25, 0x01	; 1
    14a4:	11 f4       	brne	.+4      	; 0x14aa <DF_EnableDataflash+0x10>
		  MAIN_ResetCSLine(MAIN_RESETCS_EXTDFACTIVE);
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	05 c0       	rjmp	.+10     	; 0x14b4 <DF_EnableDataflash+0x1a>
		else
		  PORTB &= ~(1 << 0);
    14aa:	28 98       	cbi	0x05, 0	; 5
    14ac:	08 95       	ret
	}
	else
	{
		if (DataflashInfo.UseExernalDF == TRUE)
    14ae:	91 30       	cpi	r25, 0x01	; 1
    14b0:	21 f4       	brne	.+8      	; 0x14ba <DF_EnableDataflash+0x20>
		  MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE);
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <MAIN_ResetCSLine>
    14b8:	08 95       	ret
		else
		  PORTB |= (1 << 0);
    14ba:	28 9a       	sbi	0x05, 0	; 5
    14bc:	08 95       	ret

000014be <DF_ReadBufferByte>:
    14be:	ef 92       	push	r14
    14c0:	ff 92       	push	r15
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	7c 01       	movw	r14, r24
    14c8:	00 91 00 01 	lds	r16, 0x0100
    14cc:	10 91 01 01 	lds	r17, 0x0101
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    14dc:	84 e5       	ldi	r24, 0x54	; 84
    14de:	f8 01       	movw	r30, r16
    14e0:	09 95       	icall
    14e2:	8f 2d       	mov	r24, r15
    14e4:	99 27       	eor	r25, r25
    14e6:	f8 01       	movw	r30, r16
    14e8:	09 95       	icall
    14ea:	8e 2d       	mov	r24, r14
    14ec:	f8 01       	movw	r30, r16
    14ee:	09 95       	icall
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	f8 01       	movw	r30, r16
    14f4:	09 95       	icall
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	f8 01       	movw	r30, r16
    14fa:	09 95       	icall
    14fc:	99 27       	eor	r25, r25
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	08 95       	ret

00001508 <DF_ContinuousReadEnable>:
    1508:	ef 92       	push	r14
    150a:	ff 92       	push	r15
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	8c 01       	movw	r16, r24
    1516:	7b 01       	movw	r14, r22
    1518:	c0 91 00 01 	lds	r28, 0x0100
    151c:	d0 91 01 01 	lds	r29, 0x0101
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    152c:	88 e6       	ldi	r24, 0x68	; 104
    152e:	fe 01       	movw	r30, r28
    1530:	09 95       	icall
    1532:	8a b5       	in	r24, 0x2a	; 42
    1534:	98 01       	movw	r18, r16
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DF_ContinuousReadEnable+0x34>
    1538:	36 95       	lsr	r19
    153a:	27 95       	ror	r18
    153c:	8a 95       	dec	r24
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DF_ContinuousReadEnable+0x30>
    1540:	c9 01       	movw	r24, r18
    1542:	fe 01       	movw	r30, r28
    1544:	09 95       	icall
    1546:	8b b5       	in	r24, 0x2b	; 43
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DF_ContinuousReadEnable+0x46>
    154a:	00 0f       	add	r16, r16
    154c:	11 1f       	adc	r17, r17
    154e:	8a 95       	dec	r24
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DF_ContinuousReadEnable+0x42>
    1552:	8f 2d       	mov	r24, r15
    1554:	99 27       	eor	r25, r25
    1556:	80 0f       	add	r24, r16
    1558:	fe 01       	movw	r30, r28
    155a:	09 95       	icall
    155c:	8e 2d       	mov	r24, r14
    155e:	fe 01       	movw	r30, r28
    1560:	09 95       	icall
    1562:	00 e0       	ldi	r16, 0x00	; 0
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	fe 01       	movw	r30, r28
    1568:	09 95       	icall
    156a:	0f 5f       	subi	r16, 0xFF	; 255
    156c:	04 30       	cpi	r16, 0x04	; 4
    156e:	d1 f7       	brne	.-12     	; 0x1564 <DF_ContinuousReadEnable+0x5c>
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	ff 90       	pop	r15
    157a:	ef 90       	pop	r14
    157c:	08 95       	ret

0000157e <DF_BufferWriteEnable>:
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	7c 01       	movw	r14, r24
    1588:	00 91 00 01 	lds	r16, 0x0100
    158c:	10 91 01 01 	lds	r17, 0x0101
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    159c:	84 e8       	ldi	r24, 0x84	; 132
    159e:	f8 01       	movw	r30, r16
    15a0:	09 95       	icall
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	f8 01       	movw	r30, r16
    15a6:	09 95       	icall
    15a8:	8f 2d       	mov	r24, r15
    15aa:	99 27       	eor	r25, r25
    15ac:	f8 01       	movw	r30, r16
    15ae:	09 95       	icall
    15b0:	8e 2d       	mov	r24, r14
    15b2:	f8 01       	movw	r30, r16
    15b4:	09 95       	icall
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	08 95       	ret

000015c0 <DF_WaitWhileBusy>:
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	c0 91 00 01 	lds	r28, 0x0100
    15c8:	d0 91 01 01 	lds	r29, 0x0101
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    15d8:	87 e5       	ldi	r24, 0x57	; 87
    15da:	fe 01       	movw	r30, r28
    15dc:	09 95       	icall
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	fe 01       	movw	r30, r28
    15e2:	09 95       	icall
    15e4:	87 ff       	sbrs	r24, 7
    15e6:	fb cf       	rjmp	.-10     	; 0x15de <DF_WaitWhileBusy+0x1e>
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

000015ee <DF_EraseBlock>:
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	7c 01       	movw	r14, r24
    15f8:	00 91 00 01 	lds	r16, 0x0100
    15fc:	10 91 01 01 	lds	r17, 0x0101
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    160c:	80 e5       	ldi	r24, 0x50	; 80
    160e:	f8 01       	movw	r30, r16
    1610:	09 95       	icall
    1612:	8f 2d       	mov	r24, r15
    1614:	99 27       	eor	r25, r25
    1616:	f8 01       	movw	r30, r16
    1618:	09 95       	icall
    161a:	8e 2d       	mov	r24, r14
    161c:	f8 01       	movw	r30, r16
    161e:	09 95       	icall
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	f8 01       	movw	r30, r16
    1624:	09 95       	icall
    1626:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <DF_WaitWhileBusy>
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	08 95       	ret

00001634 <DF_CopyFlashPageToBuffer>:
    1634:	ef 92       	push	r14
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	8c 01       	movw	r16, r24
    163e:	e0 90 00 01 	lds	r14, 0x0100
    1642:	f0 90 01 01 	lds	r15, 0x0101
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    1652:	83 e5       	ldi	r24, 0x53	; 83
    1654:	f7 01       	movw	r30, r14
    1656:	09 95       	icall
    1658:	8a b5       	in	r24, 0x2a	; 42
    165a:	98 01       	movw	r18, r16
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DF_CopyFlashPageToBuffer+0x2e>
    165e:	36 95       	lsr	r19
    1660:	27 95       	ror	r18
    1662:	8a 95       	dec	r24
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DF_CopyFlashPageToBuffer+0x2a>
    1666:	c9 01       	movw	r24, r18
    1668:	f7 01       	movw	r30, r14
    166a:	09 95       	icall
    166c:	8b b5       	in	r24, 0x2b	; 43
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DF_CopyFlashPageToBuffer+0x40>
    1670:	00 0f       	add	r16, r16
    1672:	11 1f       	adc	r17, r17
    1674:	8a 95       	dec	r24
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DF_CopyFlashPageToBuffer+0x3c>
    1678:	80 2f       	mov	r24, r16
    167a:	f7 01       	movw	r30, r14
    167c:	09 95       	icall
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	f7 01       	movw	r30, r14
    1682:	09 95       	icall
    1684:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <DF_WaitWhileBusy>
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	08 95       	ret

00001692 <DF_CopyBufferToFlashPage>:
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	8c 01       	movw	r16, r24
    169c:	e0 90 00 01 	lds	r14, 0x0100
    16a0:	f0 90 01 01 	lds	r15, 0x0101
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    16b0:	83 e8       	ldi	r24, 0x83	; 131
    16b2:	f7 01       	movw	r30, r14
    16b4:	09 95       	icall
    16b6:	8a b5       	in	r24, 0x2a	; 42
    16b8:	98 01       	movw	r18, r16
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <DF_CopyBufferToFlashPage+0x2e>
    16bc:	36 95       	lsr	r19
    16be:	27 95       	ror	r18
    16c0:	8a 95       	dec	r24
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <DF_CopyBufferToFlashPage+0x2a>
    16c4:	c9 01       	movw	r24, r18
    16c6:	f7 01       	movw	r30, r14
    16c8:	09 95       	icall
    16ca:	8b b5       	in	r24, 0x2b	; 43
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <DF_CopyBufferToFlashPage+0x40>
    16ce:	00 0f       	add	r16, r16
    16d0:	11 1f       	adc	r17, r17
    16d2:	8a 95       	dec	r24
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <DF_CopyBufferToFlashPage+0x3c>
    16d6:	80 2f       	mov	r24, r16
    16d8:	f7 01       	movw	r30, r14
    16da:	09 95       	icall
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	f7 01       	movw	r30, r14
    16e0:	09 95       	icall
    16e2:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <DF_WaitWhileBusy>
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	08 95       	ret

000016f0 <DF_GetChipCharacteristics>:
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	00 91 00 01 	lds	r16, 0x0100
    16f8:	10 91 01 01 	lds	r17, 0x0101
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    1708:	87 e5       	ldi	r24, 0x57	; 87
    170a:	f8 01       	movw	r30, r16
    170c:	09 95       	icall
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	f8 01       	movw	r30, r16
    1712:	09 95       	icall
    1714:	99 27       	eor	r25, r25
    1716:	88 73       	andi	r24, 0x38	; 56
    1718:	90 70       	andi	r25, 0x00	; 0
    171a:	63 e0       	ldi	r22, 0x03	; 3
    171c:	96 95       	lsr	r25
    171e:	87 95       	ror	r24
    1720:	6a 95       	dec	r22
    1722:	e1 f7       	brne	.-8      	; 0x171c <DF_GetChipCharacteristics+0x2c>
    1724:	fc 01       	movw	r30, r24
    1726:	e0 56       	subi	r30, 0x60	; 96
    1728:	fc 4f       	sbci	r31, 0xFC	; 252
    172a:	e4 91       	lpm	r30, Z
    172c:	4e 2f       	mov	r20, r30
    172e:	55 27       	eor	r21, r21
    1730:	50 93 3a 01 	sts	0x013A, r21
    1734:	40 93 39 01 	sts	0x0139, r20
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	fc 01       	movw	r30, r24
    173e:	e8 55       	subi	r30, 0x58	; 88
    1740:	fc 4f       	sbci	r31, 0xFC	; 252
    1742:	25 91       	lpm	r18, Z+
    1744:	34 91       	lpm	r19, Z
    1746:	30 93 3c 01 	sts	0x013C, r19
    174a:	20 93 3b 01 	sts	0x013B, r18
    174e:	88 54       	subi	r24, 0x48	; 72
    1750:	9c 4f       	sbci	r25, 0xFC	; 252
    1752:	fc 01       	movw	r30, r24
    1754:	25 91       	lpm	r18, Z+
    1756:	34 91       	lpm	r19, Z
    1758:	30 93 3e 01 	sts	0x013E, r19
    175c:	20 93 3d 01 	sts	0x013D, r18
    1760:	80 e1       	ldi	r24, 0x10	; 16
    1762:	84 1b       	sub	r24, r20
    1764:	8a bd       	out	0x2a, r24	; 42
    1766:	48 50       	subi	r20, 0x08	; 8
    1768:	4b bd       	out	0x2b, r20	; 43
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	08 95       	ret

00001770 <DF_CheckCorrectOnboardChip>:
    1770:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <DF_GetChipCharacteristics>
    1774:	80 91 3d 01 	lds	r24, 0x013D
    1778:	90 91 3e 01 	lds	r25, 0x013E
    177c:	80 50       	subi	r24, 0x00	; 0
    177e:	98 40       	sbci	r25, 0x08	; 8
    1780:	19 f4       	brne	.+6      	; 0x1788 <DF_CheckCorrectOnboardChip+0x18>
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	08 95       	ret
    1788:	80 91 64 00 	lds	r24, 0x0064
    178c:	84 60       	ori	r24, 0x04	; 4
    178e:	80 93 64 00 	sts	0x0064, r24
    1792:	88 ec       	ldi	r24, 0xC8	; 200
    1794:	93 e0       	ldi	r25, 0x03	; 3
    1796:	0e 94 b5 03 	call	0x76a	; 0x76a <MAIN_ShowError>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	08 95       	ret

000017a0 <BUFF_InitialiseBuffer>:

// ======================================================================================

void BUFF_InitialiseBuffer(void)
{
    17a0:	10 92 b3 02 	sts	0x02B3, r1
	InPos  = 0;                            // Set up the IN counter to the start of the buffer
	OutPos = 0;                            // Set up the OUT counter to the start of the buffer
    17a4:	10 92 b2 02 	sts	0x02B2, r1

	BuffElements = 0;                      // Reset the buffer elements counter
    17a8:	10 92 b4 02 	sts	0x02B4, r1
    17ac:	08 95       	ret

000017ae <BUFF_GetBuffByte>:
}

uint8_t BUFF_GetBuffByte(void)
{
    17ae:	80 91 b4 02 	lds	r24, 0x02B4
    17b2:	88 23       	and	r24, r24
    17b4:	19 f4       	brne	.+6      	; 0x17bc <BUFF_GetBuffByte+0xe>
	if (!(BuffElements))                   // No elements in the buffer
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	08 95       	ret
	  return 0;

	uint8_t RetrievedData = RingBuffer[OutPos++]; // Grab the stored byte into a temp variable
    17bc:	80 91 b2 02 	lds	r24, 0x02B2
    17c0:	e8 2f       	mov	r30, r24
    17c2:	ff 27       	eor	r31, r31
    17c4:	ee 58       	subi	r30, 0x8E	; 142
    17c6:	fd 4f       	sbci	r31, 0xFD	; 253
    17c8:	e0 81       	ld	r30, Z
    17ca:	8f 5f       	subi	r24, 0xFF	; 255
    17cc:	80 93 b2 02 	sts	0x02B2, r24
	BuffElements--;                        // Decrement the total elements variable
    17d0:	80 91 b4 02 	lds	r24, 0x02B4
    17d4:	81 50       	subi	r24, 0x01	; 1
    17d6:	80 93 b4 02 	sts	0x02B4, r24
	
	if (OutPos == BUFF_BUFFLEN)
    17da:	80 91 b2 02 	lds	r24, 0x02B2
    17de:	80 34       	cpi	r24, 0x40	; 64
    17e0:	11 f4       	brne	.+4      	; 0x17e6 <BUFF_GetBuffByte+0x38>
	  OutPos = 0;                        // Wrap pointer if end of array reached
    17e2:	10 92 b2 02 	sts	0x02B2, r1
		
	return RetrievedData;                 // Return the retrieved data
    17e6:	8e 2f       	mov	r24, r30
    17e8:	99 27       	eor	r25, r25
}
    17ea:	08 95       	ret

000017ec <__vector_13>:
    17ec:	1f 92       	push	r1
    17ee:	0f 92       	push	r0
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	2f 93       	push	r18
    17f8:	3f 93       	push	r19
    17fa:	4f 93       	push	r20
    17fc:	5f 93       	push	r21
    17fe:	6f 93       	push	r22
    1800:	7f 93       	push	r23
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
    180e:	80 91 b4 02 	lds	r24, 0x02B4
    1812:	80 34       	cpi	r24, 0x40	; 64
    1814:	21 f4       	brne	.+8      	; 0x181e <__vector_13+0x32>
    1816:	88 ed       	ldi	r24, 0xD8	; 216
    1818:	93 e0       	ldi	r25, 0x03	; 3
    181a:	0e 94 96 04 	call	0x92c	; 0x92c <MAIN_CrashProgram>
    181e:	80 91 b3 02 	lds	r24, 0x02B3
    1822:	e8 2f       	mov	r30, r24
    1824:	ff 27       	eor	r31, r31
    1826:	90 91 c6 00 	lds	r25, 0x00C6
    182a:	ee 58       	subi	r30, 0x8E	; 142
    182c:	fd 4f       	sbci	r31, 0xFD	; 253
    182e:	90 83       	st	Z, r25
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	80 93 b3 02 	sts	0x02B3, r24
    1836:	80 91 b4 02 	lds	r24, 0x02B4
    183a:	8f 5f       	subi	r24, 0xFF	; 255
    183c:	80 93 b4 02 	sts	0x02B4, r24
    1840:	80 91 b3 02 	lds	r24, 0x02B3
    1844:	80 34       	cpi	r24, 0x40	; 64
    1846:	11 f4       	brne	.+4      	; 0x184c <__vector_13+0x60>
    1848:	10 92 b3 02 	sts	0x02B3, r1
    184c:	ff 91       	pop	r31
    184e:	ef 91       	pop	r30
    1850:	bf 91       	pop	r27
    1852:	af 91       	pop	r26
    1854:	9f 91       	pop	r25
    1856:	8f 91       	pop	r24
    1858:	7f 91       	pop	r23
    185a:	6f 91       	pop	r22
    185c:	5f 91       	pop	r21
    185e:	4f 91       	pop	r20
    1860:	3f 91       	pop	r19
    1862:	2f 91       	pop	r18
    1864:	0f 90       	pop	r0
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	0f 90       	pop	r0
    186a:	1f 90       	pop	r1
    186c:	18 95       	reti

0000186e <__vector_4>:
// ======================================================================================

// Packet Timeout = ((F_CPU / 1024) / (240 * TIMEOUT_TICKSBEFORETIMEOUT)) per second
ISR(TIMER2_COMP_vect, ISR_NOBLOCK)
{
    186e:	78 94       	sei
    1870:	1f 92       	push	r1
    1872:	0f 92       	push	r0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	0f 92       	push	r0
    1878:	11 24       	eor	r1, r1
    187a:	8f 93       	push	r24
	if (PacketTimeOutTicks++ == TIMEOUT_PACKET_TIMEOUTTICKS)
    187c:	80 91 44 01 	lds	r24, 0x0144
    1880:	8f 5f       	subi	r24, 0xFF	; 255
    1882:	80 93 44 01 	sts	0x0144, r24
    1886:	80 91 44 01 	lds	r24, 0x0144
    188a:	87 39       	cpi	r24, 0x97	; 151
    188c:	29 f4       	brne	.+10     	; 0x1898 <__vector_4+0x2a>
	{
		PacketTimeOutTicks   = 0;
    188e:	10 92 44 01 	sts	0x0144, r1
		PacketTimeOut        = TRUE;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	80 93 45 01 	sts	0x0145, r24
    1898:	8f 91       	pop	r24
    189a:	0f 90       	pop	r0
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	0f 90       	pop	r0
    18a0:	1f 90       	pop	r1
    18a2:	18 95       	reti

000018a4 <TOUT_SetupSleepTimer>:
	}
}

// Autosleep Timeout = (TicksBeforeAutoSleep / 10) secs between timeouts
ISR(TIMER1_OVF_vect, ISR_NOBLOCK)
{
	if (SleepTimeOutTicks++ == TicksBeforeAutoSleep)
	{
		TIMEOUT_SLEEP_TIMER_OFF();
		FUNCSleepMode();
		TOUT_SetupSleepTimer();
	}
}

// ======================================================================================

void TOUT_SetupSleepTimer(void)
{
    18a4:	a8 e8       	ldi	r26, 0x88	; 136
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
    18ac:	80 2d       	mov	r24, r0
	uint8_t NewTicksIndex = eeprom_read_byte(&EEPROMVars.AutoSleepValIndex);
    18ae:	28 2f       	mov	r18, r24
    18b0:	33 27       	eor	r19, r19
    18b2:	e2 2f       	mov	r30, r18

	if (NewTicksIndex == 0xFF) // Blank EEPROM protection
    18b4:	2f 3f       	cpi	r18, 0xFF	; 255
    18b6:	01 f1       	breq	.+64     	; 0x18f8 <TOUT_SetupSleepTimer+0x54>
	  NewTicksIndex = 4;

	TIMSK1 = (1 << TOIE1);
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	80 93 6f 00 	sts	0x006F, r24
	TicksBeforeAutoSleep = (pgm_read_byte(&AutoSleepTOValues[NewTicksIndex]) * 10);
    18be:	ff 27       	eor	r31, r31
    18c0:	ef 51       	subi	r30, 0x1F	; 31
    18c2:	fc 4f       	sbci	r31, 0xFC	; 252
    18c4:	e4 91       	lpm	r30, Z
    18c6:	8a e0       	ldi	r24, 0x0A	; 10
    18c8:	e8 9f       	mul	r30, r24
    18ca:	c0 01       	movw	r24, r0
    18cc:	11 24       	eor	r1, r1
    18ce:	90 93 49 01 	sts	0x0149, r25
    18d2:	80 93 48 01 	sts	0x0148, r24

	TIMEOUT_SLEEP_TIMEOUT_RESET();
    18d6:	10 92 47 01 	sts	0x0147, r1
    18da:	10 92 46 01 	sts	0x0146, r1
    18de:	10 92 85 00 	sts	0x0085, r1
    18e2:	10 92 84 00 	sts	0x0084, r1
	
	if (NewTicksIndex)
    18e6:	22 23       	and	r18, r18
    18e8:	21 f0       	breq	.+8      	; 0x18f2 <TOUT_SetupSleepTimer+0x4e>
	  TIMEOUT_SLEEP_TIMER_ON();
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	80 93 81 00 	sts	0x0081, r24
    18f0:	08 95       	ret
	else
	  TIMEOUT_SLEEP_TIMER_OFF();
    18f2:	10 92 81 00 	sts	0x0081, r1
    18f6:	08 95       	ret
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	80 93 6f 00 	sts	0x006F, r24
    18fe:	e5 ee       	ldi	r30, 0xE5	; 229
    1900:	f3 e0       	ldi	r31, 0x03	; 3
    1902:	e4 91       	lpm	r30, Z
    1904:	8a e0       	ldi	r24, 0x0A	; 10
    1906:	e8 9f       	mul	r30, r24
    1908:	c0 01       	movw	r24, r0
    190a:	11 24       	eor	r1, r1
    190c:	90 93 49 01 	sts	0x0149, r25
    1910:	80 93 48 01 	sts	0x0148, r24
    1914:	10 92 47 01 	sts	0x0147, r1
    1918:	10 92 46 01 	sts	0x0146, r1
    191c:	10 92 85 00 	sts	0x0085, r1
    1920:	10 92 84 00 	sts	0x0084, r1
    1924:	e2 cf       	rjmp	.-60     	; 0x18ea <TOUT_SetupSleepTimer+0x46>

00001926 <__vector_9>:
    1926:	78 94       	sei
    1928:	1f 92       	push	r1
    192a:	0f 92       	push	r0
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	0f 92       	push	r0
    1930:	11 24       	eor	r1, r1
    1932:	2f 93       	push	r18
    1934:	3f 93       	push	r19
    1936:	4f 93       	push	r20
    1938:	5f 93       	push	r21
    193a:	6f 93       	push	r22
    193c:	7f 93       	push	r23
    193e:	8f 93       	push	r24
    1940:	9f 93       	push	r25
    1942:	af 93       	push	r26
    1944:	bf 93       	push	r27
    1946:	ef 93       	push	r30
    1948:	ff 93       	push	r31
    194a:	80 91 46 01 	lds	r24, 0x0146
    194e:	90 91 47 01 	lds	r25, 0x0147
    1952:	20 91 48 01 	lds	r18, 0x0148
    1956:	30 91 49 01 	lds	r19, 0x0149
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	90 93 47 01 	sts	0x0147, r25
    1960:	80 93 46 01 	sts	0x0146, r24
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	82 17       	cp	r24, r18
    1968:	93 07       	cpc	r25, r19
    196a:	31 f4       	brne	.+12     	; 0x1978 <__vector_9+0x52>
    196c:	10 92 81 00 	sts	0x0081, r1
    1970:	0e 94 cc 02 	call	0x598	; 0x598 <FUNCSleepMode>
    1974:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TOUT_SetupSleepTimer>
    1978:	ff 91       	pop	r31
    197a:	ef 91       	pop	r30
    197c:	bf 91       	pop	r27
    197e:	af 91       	pop	r26
    1980:	9f 91       	pop	r25
    1982:	8f 91       	pop	r24
    1984:	7f 91       	pop	r23
    1986:	6f 91       	pop	r22
    1988:	5f 91       	pop	r21
    198a:	4f 91       	pop	r20
    198c:	3f 91       	pop	r19
    198e:	2f 91       	pop	r18
    1990:	0f 90       	pop	r0
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	0f 90       	pop	r0
    1996:	1f 90       	pop	r1
    1998:	18 95       	reti

0000199a <PD_SetupDFAddressCounters>:
	}
}

void PD_SetupDFAddressCounters(void)
{
    199a:	ef 92       	push	r14
    199c:	ff 92       	push	r15
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
	uint32_t StartAddress = CurrAddress;
    19a2:	20 91 62 02 	lds	r18, 0x0262
    19a6:	30 91 63 02 	lds	r19, 0x0263
    19aa:	40 91 64 02 	lds	r20, 0x0264
    19ae:	50 91 65 02 	lds	r21, 0x0265

	DataflashInfo.CurrPageAddress = 0;
    19b2:	10 92 40 01 	sts	0x0140, r1
    19b6:	10 92 3f 01 	sts	0x013F, r1

	while (StartAddress > DataflashInfo.PageSize)      // This loop is the equivalent of a DIV and a MOD
    19ba:	80 91 3b 01 	lds	r24, 0x013B
    19be:	90 91 3c 01 	lds	r25, 0x013C
    19c2:	aa 27       	eor	r26, r26
    19c4:	bb 27       	eor	r27, r27
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	ee 24       	eor	r14, r14
    19cc:	ff 24       	eor	r15, r15
    19ce:	87 01       	movw	r16, r14
    19d0:	e8 1a       	sub	r14, r24
    19d2:	f9 0a       	sbc	r15, r25
    19d4:	0a 0b       	sbc	r16, r26
    19d6:	1b 0b       	sbc	r17, r27
    19d8:	06 c0       	rjmp	.+12     	; 0x19e6 <PD_SetupDFAddressCounters+0x4c>
    19da:	2e 0d       	add	r18, r14
    19dc:	3f 1d       	adc	r19, r15
    19de:	40 1f       	adc	r20, r16
    19e0:	51 1f       	adc	r21, r17
    19e2:	6f 5f       	subi	r22, 0xFF	; 255
    19e4:	7f 4f       	sbci	r23, 0xFF	; 255
    19e6:	82 17       	cp	r24, r18
    19e8:	93 07       	cpc	r25, r19
    19ea:	a4 07       	cpc	r26, r20
    19ec:	b5 07       	cpc	r27, r21
    19ee:	a8 f3       	brcs	.-22     	; 0x19da <PD_SetupDFAddressCounters+0x40>
    19f0:	70 93 40 01 	sts	0x0140, r23
    19f4:	60 93 3f 01 	sts	0x013F, r22
	{
		StartAddress -= DataflashInfo.PageSize;         // Subtract one page's worth of bytes from the desired address
		DataflashInfo.CurrPageAddress++;
	}
	
	DataflashInfo.CurrBuffByte = (uint16_t)StartAddress; // The buffer byte is the remainder
    19f8:	30 93 42 01 	sts	0x0142, r19
    19fc:	20 93 41 01 	sts	0x0141, r18
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	ff 90       	pop	r15
    1a06:	ef 90       	pop	r14
    1a08:	08 95       	ret

00001a0a <PD_StoreDataflashByte>:
}

void PD_StoreDataflashByte(const uint8_t Data)
{
    1a0a:	1f 93       	push	r17
    1a0c:	18 2f       	mov	r17, r24
	if (DataflashInfo.CurrBuffByte == DataflashInfo.PageSize)
    1a0e:	20 91 41 01 	lds	r18, 0x0141
    1a12:	30 91 42 01 	lds	r19, 0x0142
    1a16:	80 91 3b 01 	lds	r24, 0x013B
    1a1a:	90 91 3c 01 	lds	r25, 0x013C
    1a1e:	28 17       	cp	r18, r24
    1a20:	39 07       	cpc	r19, r25
    1a22:	a1 f4       	brne	.+40     	; 0x1a4c <PD_StoreDataflashByte+0x42>
	{
		DF_CopyBufferToFlashPage(DataflashInfo.CurrPageAddress++);
    1a24:	80 91 3f 01 	lds	r24, 0x013F
    1a28:	90 91 40 01 	lds	r25, 0x0140
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	90 93 40 01 	sts	0x0140, r25
    1a32:	80 93 3f 01 	sts	0x013F, r24
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	0e 94 49 0b 	call	0x1692	; 0x1692 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0e 94 bf 0a 	call	0x157e	; 0x157e <DF_BufferWriteEnable>
		DataflashInfo.CurrBuffByte = 0;
    1a44:	10 92 42 01 	sts	0x0142, r1
    1a48:	10 92 41 01 	sts	0x0141, r1
	}
	
	USI_SPITransmit(Data);                                 // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    1a4c:	81 2f       	mov	r24, r17
    1a4e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
	DataflashInfo.CurrBuffByte++;
    1a52:	80 91 41 01 	lds	r24, 0x0141
    1a56:	90 91 42 01 	lds	r25, 0x0142
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	90 93 42 01 	sts	0x0142, r25
    1a60:	80 93 41 01 	sts	0x0141, r24
    1a64:	1f 91       	pop	r17
    1a66:	08 95       	ret

00001a68 <PD_InterpretAVRISPPacket>:
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	80 91 4a 01 	lds	r24, 0x014A
    1a74:	86 31       	cpi	r24, 0x16	; 22
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <PD_InterpretAVRISPPacket+0x12>
    1a78:	f1 c0       	rjmp	.+482    	; 0x1c5c <PD_InterpretAVRISPPacket+0x1f4>
    1a7a:	87 31       	cpi	r24, 0x17	; 23
    1a7c:	90 f4       	brcc	.+36     	; 0x1aa2 <PD_InterpretAVRISPPacket+0x3a>
    1a7e:	82 31       	cpi	r24, 0x12	; 18
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <PD_InterpretAVRISPPacket+0x1c>
    1a82:	65 c0       	rjmp	.+202    	; 0x1b4e <PD_InterpretAVRISPPacket+0xe6>
    1a84:	83 31       	cpi	r24, 0x13	; 19
    1a86:	30 f4       	brcc	.+12     	; 0x1a94 <PD_InterpretAVRISPPacket+0x2c>
    1a88:	80 31       	cpi	r24, 0x10	; 16
    1a8a:	01 f1       	breq	.+64     	; 0x1acc <PD_InterpretAVRISPPacket+0x64>
    1a8c:	81 31       	cpi	r24, 0x11	; 17
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <PD_InterpretAVRISPPacket+0x2a>
    1a90:	2f c1       	rjmp	.+606    	; 0x1cf0 <PD_InterpretAVRISPPacket+0x288>
    1a92:	41 c0       	rjmp	.+130    	; 0x1b16 <PD_InterpretAVRISPPacket+0xae>
    1a94:	84 31       	cpi	r24, 0x14	; 20
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <PD_InterpretAVRISPPacket+0x32>
    1a98:	8b c0       	rjmp	.+278    	; 0x1bb0 <PD_InterpretAVRISPPacket+0x148>
    1a9a:	85 31       	cpi	r24, 0x15	; 21
    1a9c:	08 f0       	brcs	.+2      	; 0x1aa0 <PD_InterpretAVRISPPacket+0x38>
    1a9e:	ab c0       	rjmp	.+342    	; 0x1bf6 <PD_InterpretAVRISPPacket+0x18e>
    1aa0:	80 c0       	rjmp	.+256    	; 0x1ba2 <PD_InterpretAVRISPPacket+0x13a>
    1aa2:	89 31       	cpi	r24, 0x19	; 25
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <PD_InterpretAVRISPPacket+0x40>
    1aa6:	72 c0       	rjmp	.+228    	; 0x1b8c <PD_InterpretAVRISPPacket+0x124>
    1aa8:	8a 31       	cpi	r24, 0x1A	; 26
    1aaa:	38 f4       	brcc	.+14     	; 0x1aba <PD_InterpretAVRISPPacket+0x52>
    1aac:	87 31       	cpi	r24, 0x17	; 23
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <PD_InterpretAVRISPPacket+0x4a>
    1ab0:	6d c0       	rjmp	.+218    	; 0x1b8c <PD_InterpretAVRISPPacket+0x124>
    1ab2:	88 31       	cpi	r24, 0x18	; 24
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <PD_InterpretAVRISPPacket+0x50>
    1ab6:	1c c1       	rjmp	.+568    	; 0x1cf0 <PD_InterpretAVRISPPacket+0x288>
    1ab8:	5b c0       	rjmp	.+182    	; 0x1b70 <PD_InterpretAVRISPPacket+0x108>
    1aba:	8b 31       	cpi	r24, 0x1B	; 27
    1abc:	f1 f1       	breq	.+124    	; 0x1b3a <PD_InterpretAVRISPPacket+0xd2>
    1abe:	8b 31       	cpi	r24, 0x1B	; 27
    1ac0:	08 f4       	brcc	.+2      	; 0x1ac4 <PD_InterpretAVRISPPacket+0x5c>
    1ac2:	56 c0       	rjmp	.+172    	; 0x1b70 <PD_InterpretAVRISPPacket+0x108>
    1ac4:	8c 31       	cpi	r24, 0x1C	; 28
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <PD_InterpretAVRISPPacket+0x62>
    1ac8:	13 c1       	rjmp	.+550    	; 0x1cf0 <PD_InterpretAVRISPPacket+0x288>
    1aca:	52 c0       	rjmp	.+164    	; 0x1b70 <PD_InterpretAVRISPPacket+0x108>
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	90 93 60 02 	sts	0x0260, r25
    1ad4:	80 93 5f 02 	sts	0x025F, r24
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    1ade:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <DF_GetChipCharacteristics>
    1ae2:	80 91 39 01 	lds	r24, 0x0139
    1ae6:	90 91 3a 01 	lds	r25, 0x013A
    1aea:	89 2b       	or	r24, r25
    1aec:	59 f0       	breq	.+22     	; 0x1b04 <PD_InterpretAVRISPPacket+0x9c>
    1aee:	86 ee       	ldi	r24, 0xE6	; 230
    1af0:	93 e0       	ldi	r25, 0x03	; 3
    1af2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	80 93 61 02 	sts	0x0261, r24
    1afc:	81 b3       	in	r24, 0x11	; 17
    1afe:	8f 7c       	andi	r24, 0xCF	; 207
    1b00:	80 62       	ori	r24, 0x20	; 32
    1b02:	17 c0       	rjmp	.+46     	; 0x1b32 <PD_InterpretAVRISPPacket+0xca>
    1b04:	88 ec       	ldi	r24, 0xC8	; 200
    1b06:	93 e0       	ldi	r25, 0x03	; 3
    1b08:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    1b12:	80 ec       	ldi	r24, 0xC0	; 192
    1b14:	f4 c0       	rjmp	.+488    	; 0x1cfe <PD_InterpretAVRISPPacket+0x296>
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	90 93 60 02 	sts	0x0260, r25
    1b1e:	80 93 5f 02 	sts	0x025F, r24
    1b22:	10 92 61 02 	sts	0x0261, r1
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    1b2c:	81 b3       	in	r24, 0x11	; 17
    1b2e:	8f 7c       	andi	r24, 0xCF	; 207
    1b30:	80 61       	ori	r24, 0x10	; 16
    1b32:	81 bb       	out	0x11, r24	; 17
    1b34:	10 92 4b 01 	sts	0x014B, r1
    1b38:	e4 c0       	rjmp	.+456    	; 0x1d02 <PD_InterpretAVRISPPacket+0x29a>
    1b3a:	84 e0       	ldi	r24, 0x04	; 4
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	90 93 60 02 	sts	0x0260, r25
    1b42:	80 93 5f 02 	sts	0x025F, r24
    1b46:	10 92 4b 01 	sts	0x014B, r1
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	1a c0       	rjmp	.+52     	; 0x1b82 <PD_InterpretAVRISPPacket+0x11a>
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	90 93 60 02 	sts	0x0260, r25
    1b56:	80 93 5f 02 	sts	0x025F, r24
    1b5a:	10 92 4b 01 	sts	0x014B, r1
    1b5e:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <V2P_SendPacket>
    1b62:	87 ea       	ldi	r24, 0xA7	; 167
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
    1b6a:	c0 e0       	ldi	r28, 0x00	; 0
    1b6c:	d0 e0       	ldi	r29, 0x00	; 0
    1b6e:	d0 c0       	rjmp	.+416    	; 0x1d10 <PD_InterpretAVRISPPacket+0x2a8>
    1b70:	84 e0       	ldi	r24, 0x04	; 4
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	90 93 60 02 	sts	0x0260, r25
    1b78:	80 93 5f 02 	sts	0x025F, r24
    1b7c:	10 92 4b 01 	sts	0x014B, r1
    1b80:	8f ef       	ldi	r24, 0xFF	; 255
    1b82:	80 93 4c 01 	sts	0x014C, r24
    1b86:	10 92 4d 01 	sts	0x014D, r1
    1b8a:	bb c0       	rjmp	.+374    	; 0x1d02 <PD_InterpretAVRISPPacket+0x29a>
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	90 93 60 02 	sts	0x0260, r25
    1b94:	80 93 5f 02 	sts	0x025F, r24
    1b98:	10 92 4b 01 	sts	0x014B, r1
    1b9c:	10 92 4c 01 	sts	0x014C, r1
    1ba0:	b0 c0       	rjmp	.+352    	; 0x1d02 <PD_InterpretAVRISPPacket+0x29a>
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	90 93 60 02 	sts	0x0260, r25
    1baa:	80 93 5f 02 	sts	0x025F, r24
    1bae:	c2 cf       	rjmp	.-124    	; 0x1b34 <PD_InterpretAVRISPPacket+0xcc>
    1bb0:	20 91 4b 01 	lds	r18, 0x014B
    1bb4:	33 27       	eor	r19, r19
    1bb6:	32 2f       	mov	r19, r18
    1bb8:	22 27       	eor	r18, r18
    1bba:	80 91 4c 01 	lds	r24, 0x014C
    1bbe:	99 27       	eor	r25, r25
    1bc0:	28 2b       	or	r18, r24
    1bc2:	39 2b       	or	r19, r25
    1bc4:	f9 01       	movw	r30, r18
    1bc6:	33 96       	adiw	r30, 0x03	; 3
    1bc8:	f0 93 60 02 	sts	0x0260, r31
    1bcc:	e0 93 5f 02 	sts	0x025F, r30
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	ab e4       	ldi	r26, 0x4B	; 75
    1bd6:	b1 e0       	ldi	r27, 0x01	; 1
    1bd8:	2f 5f       	subi	r18, 0xFF	; 255
    1bda:	3f 4f       	sbci	r19, 0xFF	; 255
    1bdc:	4f ef       	ldi	r20, 0xFF	; 255
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <PD_InterpretAVRISPPacket+0x17c>
    1be0:	4d 93       	st	X+, r20
    1be2:	01 96       	adiw	r24, 0x01	; 1
    1be4:	82 17       	cp	r24, r18
    1be6:	93 07       	cpc	r25, r19
    1be8:	d8 f3       	brcs	.-10     	; 0x1be0 <PD_InterpretAVRISPPacket+0x178>
    1bea:	10 92 4b 01 	sts	0x014B, r1
    1bee:	e7 5b       	subi	r30, 0xB7	; 183
    1bf0:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf2:	10 82       	st	Z, r1
    1bf4:	86 c0       	rjmp	.+268    	; 0x1d02 <PD_InterpretAVRISPPacket+0x29a>
    1bf6:	0e 94 cd 0c 	call	0x199a	; 0x199a <PD_SetupDFAddressCounters>
    1bfa:	80 91 3f 01 	lds	r24, 0x013F
    1bfe:	90 91 40 01 	lds	r25, 0x0140
    1c02:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DF_CopyFlashPageToBuffer>
    1c06:	80 91 41 01 	lds	r24, 0x0141
    1c0a:	90 91 42 01 	lds	r25, 0x0142
    1c0e:	0e 94 bf 0a 	call	0x157e	; 0x157e <DF_BufferWriteEnable>
    1c12:	80 91 4b 01 	lds	r24, 0x014B
    1c16:	99 27       	eor	r25, r25
    1c18:	d8 2f       	mov	r29, r24
    1c1a:	cc 27       	eor	r28, r28
    1c1c:	80 91 4c 01 	lds	r24, 0x014C
    1c20:	99 27       	eor	r25, r25
    1c22:	c8 2b       	or	r28, r24
    1c24:	d9 2b       	or	r29, r25
    1c26:	0a e4       	ldi	r16, 0x4A	; 74
    1c28:	11 e0       	ldi	r17, 0x01	; 1
    1c2a:	11 c0       	rjmp	.+34     	; 0x1c4e <PD_InterpretAVRISPPacket+0x1e6>
    1c2c:	f8 01       	movw	r30, r16
    1c2e:	82 85       	ldd	r24, Z+10	; 0x0a
    1c30:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <PD_StoreDataflashByte>
    1c34:	80 91 41 01 	lds	r24, 0x0141
    1c38:	90 91 42 01 	lds	r25, 0x0142
    1c3c:	01 96       	adiw	r24, 0x01	; 1
    1c3e:	90 93 42 01 	sts	0x0142, r25
    1c42:	80 93 41 01 	sts	0x0141, r24
    1c46:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <V2P_IncrementCurrAddress>
    1c4a:	0f 5f       	subi	r16, 0xFF	; 255
    1c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4e:	ce 01       	movw	r24, r28
    1c50:	86 5b       	subi	r24, 0xB6	; 182
    1c52:	9e 4f       	sbci	r25, 0xFE	; 254
    1c54:	08 17       	cp	r16, r24
    1c56:	19 07       	cpc	r17, r25
    1c58:	49 f7       	brne	.-46     	; 0x1c2c <PD_InterpretAVRISPPacket+0x1c4>
    1c5a:	6c cf       	rjmp	.-296    	; 0x1b34 <PD_InterpretAVRISPPacket+0xcc>
    1c5c:	0e 94 cd 0c 	call	0x199a	; 0x199a <PD_SetupDFAddressCounters>
    1c60:	80 91 3f 01 	lds	r24, 0x013F
    1c64:	90 91 40 01 	lds	r25, 0x0140
    1c68:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DF_CopyFlashPageToBuffer>
    1c6c:	80 91 4b 01 	lds	r24, 0x014B
    1c70:	99 27       	eor	r25, r25
    1c72:	d8 2f       	mov	r29, r24
    1c74:	cc 27       	eor	r28, r28
    1c76:	80 91 4c 01 	lds	r24, 0x014C
    1c7a:	99 27       	eor	r25, r25
    1c7c:	c8 2b       	or	r28, r24
    1c7e:	d9 2b       	or	r29, r25
    1c80:	0a e4       	ldi	r16, 0x4A	; 74
    1c82:	11 e0       	ldi	r17, 0x01	; 1
    1c84:	25 c0       	rjmp	.+74     	; 0x1cd0 <PD_InterpretAVRISPPacket+0x268>
    1c86:	20 91 41 01 	lds	r18, 0x0141
    1c8a:	30 91 42 01 	lds	r19, 0x0142
    1c8e:	80 91 3b 01 	lds	r24, 0x013B
    1c92:	90 91 3c 01 	lds	r25, 0x013C
    1c96:	28 17       	cp	r18, r24
    1c98:	39 07       	cpc	r19, r25
    1c9a:	41 f4       	brne	.+16     	; 0x1cac <PD_InterpretAVRISPPacket+0x244>
    1c9c:	0e 94 cd 0c 	call	0x199a	; 0x199a <PD_SetupDFAddressCounters>
    1ca0:	80 91 3f 01 	lds	r24, 0x013F
    1ca4:	90 91 40 01 	lds	r25, 0x0140
    1ca8:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DF_CopyFlashPageToBuffer>
    1cac:	80 91 41 01 	lds	r24, 0x0141
    1cb0:	90 91 42 01 	lds	r25, 0x0142
    1cb4:	01 96       	adiw	r24, 0x01	; 1
    1cb6:	90 93 42 01 	sts	0x0142, r25
    1cba:	80 93 41 01 	sts	0x0141, r24
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	0e 94 5f 0a 	call	0x14be	; 0x14be <DF_ReadBufferByte>
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	82 83       	std	Z+2, r24	; 0x02
    1cc8:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <V2P_IncrementCurrAddress>
    1ccc:	0f 5f       	subi	r16, 0xFF	; 255
    1cce:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	86 5b       	subi	r24, 0xB6	; 182
    1cd4:	9e 4f       	sbci	r25, 0xFE	; 254
    1cd6:	08 17       	cp	r16, r24
    1cd8:	19 07       	cpc	r17, r25
    1cda:	a9 f6       	brne	.-86     	; 0x1c86 <PD_InterpretAVRISPPacket+0x21e>
    1cdc:	23 96       	adiw	r28, 0x03	; 3
    1cde:	d0 93 60 02 	sts	0x0260, r29
    1ce2:	c0 93 5f 02 	sts	0x025F, r28
    1ce6:	10 92 4b 01 	sts	0x014B, r1
    1cea:	f8 01       	movw	r30, r16
    1cec:	12 82       	std	Z+2, r1	; 0x02
    1cee:	09 c0       	rjmp	.+18     	; 0x1d02 <PD_InterpretAVRISPPacket+0x29a>
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	90 93 60 02 	sts	0x0260, r25
    1cf8:	80 93 5f 02 	sts	0x025F, r24
    1cfc:	89 ec       	ldi	r24, 0xC9	; 201
    1cfe:	80 93 4b 01 	sts	0x014B, r24
    1d02:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <V2P_SendPacket>
    1d06:	14 c0       	rjmp	.+40     	; 0x1d30 <PD_InterpretAVRISPPacket+0x2c8>
    1d08:	ce 01       	movw	r24, r28
    1d0a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <DF_EraseBlock>
    1d0e:	21 96       	adiw	r28, 0x01	; 1
    1d10:	80 91 3d 01 	lds	r24, 0x013D
    1d14:	90 91 3e 01 	lds	r25, 0x013E
    1d18:	23 e0       	ldi	r18, 0x03	; 3
    1d1a:	96 95       	lsr	r25
    1d1c:	87 95       	ror	r24
    1d1e:	2a 95       	dec	r18
    1d20:	e1 f7       	brne	.-8      	; 0x1d1a <PD_InterpretAVRISPPacket+0x2b2>
    1d22:	c8 17       	cp	r28, r24
    1d24:	d9 07       	cpc	r29, r25
    1d26:	80 f3       	brcs	.-32     	; 0x1d08 <PD_InterpretAVRISPPacket+0x2a0>
    1d28:	86 ee       	ldi	r24, 0xE6	; 230
    1d2a:	93 e0       	ldi	r25, 0x03	; 3
    1d2c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <V2P_GetChecksum>:
	SequenceNum++;
}

uint8_t V2P_GetChecksum()
{
    1d3a:	90 91 5d 02 	lds	r25, 0x025D
    1d3e:	8b e1       	ldi	r24, 0x1B	; 27
    1d40:	98 27       	eor	r25, r24
	uint8_t CheckSumByte;
	
	/* Checksum for the V2 protocol is comprised of an XOR of all the packet 
      bytes, including the start, sequence number, size and token bytes.    */
	
	CheckSumByte  = AICB_MESSAGE_START;
	CheckSumByte ^= SequenceNum;
	CheckSumByte ^= (uint8_t)(MessageSize >> 8);
    1d42:	40 91 5f 02 	lds	r20, 0x025F
    1d46:	50 91 60 02 	lds	r21, 0x0260
    1d4a:	94 27       	eor	r25, r20
	CheckSumByte ^= (uint8_t)(MessageSize);
    1d4c:	25 2f       	mov	r18, r21
    1d4e:	33 27       	eor	r19, r19
    1d50:	8e e0       	ldi	r24, 0x0E	; 14
    1d52:	82 27       	eor	r24, r18
	CheckSumByte ^= AICB_TOKEN;
    1d54:	98 27       	eor	r25, r24
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	ea e4       	ldi	r30, 0x4A	; 74
    1d5c:	f1 e0       	ldi	r31, 0x01	; 1
    1d5e:	04 c0       	rjmp	.+8      	; 0x1d68 <V2P_GetChecksum+0x2e>
	
	for (uint16_t CByteIndex = 0; CByteIndex < MessageSize; CByteIndex++)
	   CheckSumByte ^= PacketBytes[CByteIndex];
    1d60:	81 91       	ld	r24, Z+
    1d62:	98 27       	eor	r25, r24
    1d64:	2f 5f       	subi	r18, 0xFF	; 255
    1d66:	3f 4f       	sbci	r19, 0xFF	; 255
    1d68:	24 17       	cp	r18, r20
    1d6a:	35 07       	cpc	r19, r21
    1d6c:	c9 f7       	brne	.-14     	; 0x1d60 <V2P_GetChecksum+0x26>

	return CheckSumByte;
}
    1d6e:	89 2f       	mov	r24, r25
    1d70:	99 27       	eor	r25, r25
    1d72:	08 95       	ret

00001d74 <V2P_IncrementCurrAddress>:

void V2P_GetSetParamater(void)
{
	uint8_t Param_Name = PacketBytes[1];    // Save the parameter number

	MessageSize = 3;                        // Set the default response message size to 3 bytes     
	PacketBytes[1] = AICB_STATUS_CMD_OK;    // Set the default response to OK

	switch (Param_Name)                    // Switch based on the recieved parameter byte
	{
		case AICB_PARAM_BUILD_NUMBER_LOW:
			PacketBytes[2] = VERSION_MINOR;

			break;
		case AICB_PARAM_BUILD_NUMBER_HIGH:
			PacketBytes[2] = VERSION_MAJOR;

			break;
		case AICB_PARAM_HARDWARE_VERSION:
			PacketBytes[2] = V2P_HW_VERSION;

			break;
		case AICB_PARAM_SW_MAJOR:
			PacketBytes[2] = V2P_SW_VERSION_MAJOR;

			break;
		case AICB_PARAM_SW_MINOR:
			PacketBytes[2] = ((eeprom_read_byte(&EEPROMVars.FirmVerMinor) == 0xFF)? V2P_SW_VERSION_MINOR_DEFAULT : eeprom_read_byte(&EEPROMVars.FirmVerMinor));

			break;
		case AICB_PARAM_CONTROLLER_INIT:
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
			{
				PacketBytes[2] = Param_ControllerInit;
			}
			else
			{
				MessageSize = 2;
				Param_ControllerInit = PacketBytes[2];
			}
			
			break;
		case AICB_PARAM_SCK_DURATION:
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.SCKDuration);
			}
			else
			{
				MessageSize = 2;
				eeprom_write_byte(&EEPROMVars.SCKDuration, PacketBytes[2]);
				USI_SPISetSpeed(PacketBytes[2]); // Re-Initialise the USI system with the new frequency
			}
					
			break;
		case AICB_PARAM_RESET_POLARITY:
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.ResetPolarity);		
			}
			else
			{
				MessageSize = 2;
				eeprom_write_byte(&EEPROMVars.ResetPolarity, PacketBytes[2]);
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Change takes effect immediatly
			}
			
			break;
		case AICB_PARAM_OSC_PSCALE:
		case AICB_PARAM_OSC_CMATCH:
			/* Despite not supporting these parameters (STK500 only), the AVR Studio programmer
			   sends them along with the SCK duration. A OK must be returned or the sequence will fail
			   and the SCK duration byte will not be sent.                                             */
		
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
			  PacketBytes[2] = 0;             // If the command is a read, return a 0 for both parameters
			else
			  MessageSize = 2;                // Otherwise just send back an OK if the command is a set		
			
			break;
		default:                             // Unrecognised parameter
			MessageSize = 2;
			PacketBytes[1] = AICB_STATUS_CMD_FAILED;			
	}
	
	V2P_SendPacket();
}

void V2P_IncrementCurrAddress(void)
{
    1d74:	80 91 62 02 	lds	r24, 0x0262
    1d78:	90 91 63 02 	lds	r25, 0x0263
    1d7c:	a0 91 64 02 	lds	r26, 0x0264
    1d80:	b0 91 65 02 	lds	r27, 0x0265
    1d84:	01 96       	adiw	r24, 0x01	; 1
    1d86:	a1 1d       	adc	r26, r1
    1d88:	b1 1d       	adc	r27, r1
    1d8a:	80 93 62 02 	sts	0x0262, r24
    1d8e:	90 93 63 02 	sts	0x0263, r25
    1d92:	a0 93 64 02 	sts	0x0264, r26
    1d96:	b0 93 65 02 	sts	0x0265, r27
    1d9a:	08 95       	ret

00001d9c <V2P_CheckForExtendedAddress>:
	// Incrementing a 32-bit unsigned variable takes a lot of code. Because much of the code is
	// not very time critical (much of it is waiting for the hardware), i've chosen to waste
	// a few extra cycles per increment and save a good 60 bytes or so of code space by putting
	// the incrmement inside a function.

	CurrAddress++;
}

void V2P_CheckForExtendedAddress(void)
{
    1d9c:	80 91 62 02 	lds	r24, 0x0262
    1da0:	90 91 63 02 	lds	r25, 0x0263
    1da4:	a0 91 64 02 	lds	r26, 0x0264
    1da8:	b0 91 65 02 	lds	r27, 0x0265
    1dac:	b7 ff       	sbrs	r27, 7
    1dae:	1e c0       	rjmp	.+60     	; 0x1dec <V2P_CheckForExtendedAddress+0x50>
	if (CurrAddress & V2P_LOAD_EXTENDED_ADDR_FLAG)     // MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
	{
		USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);   // Load extended address command
    1db0:	8d e4       	ldi	r24, 0x4D	; 77
    1db2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
		USI_SPITransmit((CurrAddress & V2P_LOAD_EXTENDED_ADDR_MASK) >> V2P_LOAD_EXTENDED_ADDR_SHIFT);
    1dbc:	80 91 64 02 	lds	r24, 0x0264
    1dc0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
		
		CurrAddress &= ~(V2P_LOAD_EXTENDED_ADDR_FLAG); // Clear the flag
    1dca:	80 91 62 02 	lds	r24, 0x0262
    1dce:	90 91 63 02 	lds	r25, 0x0263
    1dd2:	a0 91 64 02 	lds	r26, 0x0264
    1dd6:	b0 91 65 02 	lds	r27, 0x0265
    1dda:	bf 77       	andi	r27, 0x7F	; 127
    1ddc:	80 93 62 02 	sts	0x0262, r24
    1de0:	90 93 63 02 	sts	0x0263, r25
    1de4:	a0 93 64 02 	sts	0x0264, r26
    1de8:	b0 93 65 02 	sts	0x0265, r27
    1dec:	08 95       	ret

00001dee <V2P_SendPacket>:
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	8b e1       	ldi	r24, 0x1B	; 27
    1df8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <USART_Tx>
    1dfc:	80 91 5d 02 	lds	r24, 0x025D
    1e00:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <USART_Tx>
    1e04:	80 91 60 02 	lds	r24, 0x0260
    1e08:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <USART_Tx>
    1e0c:	80 91 5f 02 	lds	r24, 0x025F
    1e10:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <USART_Tx>
    1e14:	8e e0       	ldi	r24, 0x0E	; 14
    1e16:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <USART_Tx>
    1e1a:	c0 e0       	ldi	r28, 0x00	; 0
    1e1c:	d0 e0       	ldi	r29, 0x00	; 0
    1e1e:	0a e4       	ldi	r16, 0x4A	; 74
    1e20:	11 e0       	ldi	r17, 0x01	; 1
    1e22:	06 c0       	rjmp	.+12     	; 0x1e30 <V2P_SendPacket+0x42>
    1e24:	f8 01       	movw	r30, r16
    1e26:	81 91       	ld	r24, Z+
    1e28:	8f 01       	movw	r16, r30
    1e2a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <USART_Tx>
    1e2e:	21 96       	adiw	r28, 0x01	; 1
    1e30:	80 91 5f 02 	lds	r24, 0x025F
    1e34:	90 91 60 02 	lds	r25, 0x0260
    1e38:	c8 17       	cp	r28, r24
    1e3a:	d9 07       	cpc	r29, r25
    1e3c:	98 f3       	brcs	.-26     	; 0x1e24 <V2P_SendPacket+0x36>
    1e3e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <V2P_GetChecksum>
    1e42:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <USART_Tx>
    1e46:	80 91 5d 02 	lds	r24, 0x025D
    1e4a:	90 91 5e 02 	lds	r25, 0x025E
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	90 93 5e 02 	sts	0x025E, r25
    1e54:	80 93 5d 02 	sts	0x025D, r24
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	08 95       	ret

00001e62 <V2P_GetSetParamater>:
    1e62:	20 91 4b 01 	lds	r18, 0x014B
    1e66:	83 e0       	ldi	r24, 0x03	; 3
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	90 93 60 02 	sts	0x0260, r25
    1e6e:	80 93 5f 02 	sts	0x025F, r24
    1e72:	10 92 4b 01 	sts	0x014B, r1
    1e76:	22 39       	cpi	r18, 0x92	; 146
    1e78:	29 f1       	breq	.+74     	; 0x1ec4 <V2P_GetSetParamater+0x62>
    1e7a:	23 39       	cpi	r18, 0x93	; 147
    1e7c:	70 f4       	brcc	.+28     	; 0x1e9a <V2P_GetSetParamater+0x38>
    1e7e:	21 38       	cpi	r18, 0x81	; 129
    1e80:	d9 f0       	breq	.+54     	; 0x1eb8 <V2P_GetSetParamater+0x56>
    1e82:	22 38       	cpi	r18, 0x82	; 130
    1e84:	20 f4       	brcc	.+8      	; 0x1e8e <V2P_GetSetParamater+0x2c>
    1e86:	20 38       	cpi	r18, 0x80	; 128
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <V2P_GetSetParamater+0x2a>
    1e8a:	77 c0       	rjmp	.+238    	; 0x1f7a <V2P_GetSetParamater+0x118>
    1e8c:	23 c0       	rjmp	.+70     	; 0x1ed4 <V2P_GetSetParamater+0x72>
    1e8e:	20 39       	cpi	r18, 0x90	; 144
    1e90:	b9 f0       	breq	.+46     	; 0x1ec0 <V2P_GetSetParamater+0x5e>
    1e92:	21 39       	cpi	r18, 0x91	; 145
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <V2P_GetSetParamater+0x36>
    1e96:	71 c0       	rjmp	.+226    	; 0x1f7a <V2P_GetSetParamater+0x118>
    1e98:	13 c0       	rjmp	.+38     	; 0x1ec0 <V2P_GetSetParamater+0x5e>
    1e9a:	28 39       	cpi	r18, 0x98	; 152
    1e9c:	89 f1       	breq	.+98     	; 0x1f00 <V2P_GetSetParamater+0x9e>
    1e9e:	29 39       	cpi	r18, 0x99	; 153
    1ea0:	20 f4       	brcc	.+8      	; 0x1eaa <V2P_GetSetParamater+0x48>
    1ea2:	26 39       	cpi	r18, 0x96	; 150
    1ea4:	08 f4       	brcc	.+2      	; 0x1ea8 <V2P_GetSetParamater+0x46>
    1ea6:	69 c0       	rjmp	.+210    	; 0x1f7a <V2P_GetSetParamater+0x118>
    1ea8:	5a c0       	rjmp	.+180    	; 0x1f5e <V2P_GetSetParamater+0xfc>
    1eaa:	2e 39       	cpi	r18, 0x9E	; 158
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <V2P_GetSetParamater+0x4e>
    1eae:	3e c0       	rjmp	.+124    	; 0x1f2c <V2P_GetSetParamater+0xca>
    1eb0:	2f 39       	cpi	r18, 0x9F	; 159
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <V2P_GetSetParamater+0x54>
    1eb4:	62 c0       	rjmp	.+196    	; 0x1f7a <V2P_GetSetParamater+0x118>
    1eb6:	12 c0       	rjmp	.+36     	; 0x1edc <V2P_GetSetParamater+0x7a>
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	80 93 4c 01 	sts	0x014C, r24
    1ebe:	66 c0       	rjmp	.+204    	; 0x1f8c <V2P_GetSetParamater+0x12a>
    1ec0:	82 e0       	ldi	r24, 0x02	; 2
    1ec2:	fb cf       	rjmp	.-10     	; 0x1eba <V2P_GetSetParamater+0x58>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1ec4:	27 e8       	ldi	r18, 0x87	; 135
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	d9 01       	movw	r26, r18
    1eca:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
    1ece:	80 2d       	mov	r24, r0
    1ed0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ed2:	11 f4       	brne	.+4      	; 0x1ed8 <V2P_GetSetParamater+0x76>
    1ed4:	84 e0       	ldi	r24, 0x04	; 4
    1ed6:	f1 cf       	rjmp	.-30     	; 0x1eba <V2P_GetSetParamater+0x58>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1ed8:	d9 01       	movw	r26, r18
    1eda:	2e c0       	rjmp	.+92     	; 0x1f38 <V2P_GetSetParamater+0xd6>
    1edc:	80 91 4a 01 	lds	r24, 0x014A
    1ee0:	83 30       	cpi	r24, 0x03	; 3
    1ee2:	19 f4       	brne	.+6      	; 0x1eea <V2P_GetSetParamater+0x88>
    1ee4:	80 91 66 02 	lds	r24, 0x0266
    1ee8:	e8 cf       	rjmp	.-48     	; 0x1eba <V2P_GetSetParamater+0x58>
    1eea:	82 e0       	ldi	r24, 0x02	; 2
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	90 93 60 02 	sts	0x0260, r25
    1ef2:	80 93 5f 02 	sts	0x025F, r24
    1ef6:	80 91 4c 01 	lds	r24, 0x014C
    1efa:	80 93 66 02 	sts	0x0266, r24
    1efe:	46 c0       	rjmp	.+140    	; 0x1f8c <V2P_GetSetParamater+0x12a>
    1f00:	80 91 4a 01 	lds	r24, 0x014A
    1f04:	a2 e0       	ldi	r26, 0x02	; 2
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	83 30       	cpi	r24, 0x03	; 3
    1f0a:	b1 f0       	breq	.+44     	; 0x1f38 <V2P_GetSetParamater+0xd6>
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	90 93 60 02 	sts	0x0260, r25
    1f14:	80 93 5f 02 	sts	0x025F, r24

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    1f18:	80 91 4c 01 	lds	r24, 0x014C
    1f1c:	08 2e       	mov	r0, r24
    1f1e:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
    1f22:	80 91 4c 01 	lds	r24, 0x014C
    1f26:	0e 94 0b 0a 	call	0x1416	; 0x1416 <USI_SPISetSpeed>
    1f2a:	30 c0       	rjmp	.+96     	; 0x1f8c <V2P_GetSetParamater+0x12a>
    1f2c:	80 91 4a 01 	lds	r24, 0x014A
    1f30:	a1 e0       	ldi	r26, 0x01	; 1
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	83 30       	cpi	r24, 0x03	; 3
    1f36:	21 f4       	brne	.+8      	; 0x1f40 <V2P_GetSetParamater+0xde>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1f38:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
    1f3c:	80 2d       	mov	r24, r0
    1f3e:	bd cf       	rjmp	.-134    	; 0x1eba <V2P_GetSetParamater+0x58>
    1f40:	82 e0       	ldi	r24, 0x02	; 2
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	90 93 60 02 	sts	0x0260, r25
    1f48:	80 93 5f 02 	sts	0x025F, r24

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    1f4c:	80 91 4c 01 	lds	r24, 0x014C
    1f50:	08 2e       	mov	r0, r24
    1f52:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	0e 94 5d 02 	call	0x4ba	; 0x4ba <MAIN_ResetCSLine>
    1f5c:	17 c0       	rjmp	.+46     	; 0x1f8c <V2P_GetSetParamater+0x12a>
    1f5e:	80 91 4a 01 	lds	r24, 0x014A
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	19 f4       	brne	.+6      	; 0x1f6c <V2P_GetSetParamater+0x10a>
    1f66:	10 92 4c 01 	sts	0x014C, r1
    1f6a:	10 c0       	rjmp	.+32     	; 0x1f8c <V2P_GetSetParamater+0x12a>
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	90 93 60 02 	sts	0x0260, r25
    1f74:	80 93 5f 02 	sts	0x025F, r24
    1f78:	09 c0       	rjmp	.+18     	; 0x1f8c <V2P_GetSetParamater+0x12a>
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	90 93 60 02 	sts	0x0260, r25
    1f82:	80 93 5f 02 	sts	0x025F, r24
    1f86:	80 ec       	ldi	r24, 0xC0	; 192
    1f88:	80 93 4b 01 	sts	0x014B, r24
    1f8c:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <V2P_SendPacket>
    1f90:	08 95       	ret

00001f92 <V2P_RunStateMachine>:
    1f92:	cf 92       	push	r12
    1f94:	df 92       	push	r13
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	6c 01       	movw	r12, r24
    1fa4:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <BUFF_InitialiseBuffer>
    1fa8:	10 92 81 00 	sts	0x0081, r1
    1fac:	10 92 61 02 	sts	0x0261, r1
    1fb0:	10 92 62 02 	sts	0x0262, r1
    1fb4:	10 92 63 02 	sts	0x0263, r1
    1fb8:	10 92 64 02 	sts	0x0264, r1
    1fbc:	10 92 65 02 	sts	0x0265, r1
    1fc0:	10 e0       	ldi	r17, 0x00	; 0
    1fc2:	73 c0       	rjmp	.+230    	; 0x20aa <V2P_RunStateMachine+0x118>
    1fc4:	12 e0       	ldi	r17, 0x02	; 2
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <V2P_RunStateMachine+0x38>
    1fc8:	19 e0       	ldi	r17, 0x09	; 9
    1fca:	80 91 45 01 	lds	r24, 0x0145
    1fce:	81 30       	cpi	r24, 0x01	; 1
    1fd0:	09 f4       	brne	.+2      	; 0x1fd4 <V2P_RunStateMachine+0x42>
    1fd2:	0e c1       	rjmp	.+540    	; 0x21f0 <V2P_RunStateMachine+0x25e>
    1fd4:	11 23       	and	r17, r17
    1fd6:	81 f1       	breq	.+96     	; 0x2038 <V2P_RunStateMachine+0xa6>
    1fd8:	10 92 45 01 	sts	0x0145, r1
    1fdc:	10 92 44 01 	sts	0x0144, r1
    1fe0:	10 92 b2 00 	sts	0x00B2, r1
    1fe4:	80 ef       	ldi	r24, 0xF0	; 240
    1fe6:	80 93 b3 00 	sts	0x00B3, r24
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	80 93 70 00 	sts	0x0070, r24
    1ff0:	8f e0       	ldi	r24, 0x0F	; 15
    1ff2:	80 93 b0 00 	sts	0x00B0, r24
    1ff6:	15 30       	cpi	r17, 0x05	; 5
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <V2P_RunStateMachine+0x6a>
    1ffa:	5a c0       	rjmp	.+180    	; 0x20b0 <V2P_RunStateMachine+0x11e>
    1ffc:	16 30       	cpi	r17, 0x06	; 6
    1ffe:	70 f4       	brcc	.+28     	; 0x201c <V2P_RunStateMachine+0x8a>
    2000:	12 30       	cpi	r17, 0x02	; 2
    2002:	69 f1       	breq	.+90     	; 0x205e <V2P_RunStateMachine+0xcc>
    2004:	13 30       	cpi	r17, 0x03	; 3
    2006:	28 f4       	brcc	.+10     	; 0x2012 <V2P_RunStateMachine+0x80>
    2008:	11 23       	and	r17, r17
    200a:	b1 f0       	breq	.+44     	; 0x2038 <V2P_RunStateMachine+0xa6>
    200c:	11 30       	cpi	r17, 0x01	; 1
    200e:	e9 f6       	brne	.-70     	; 0x1fca <V2P_RunStateMachine+0x38>
    2010:	20 c0       	rjmp	.+64     	; 0x2052 <V2P_RunStateMachine+0xc0>
    2012:	13 30       	cpi	r17, 0x03	; 3
    2014:	69 f1       	breq	.+90     	; 0x2070 <V2P_RunStateMachine+0xde>
    2016:	14 30       	cpi	r17, 0x04	; 4
    2018:	c1 f6       	brne	.-80     	; 0x1fca <V2P_RunStateMachine+0x38>
    201a:	35 c0       	rjmp	.+106    	; 0x2086 <V2P_RunStateMachine+0xf4>
    201c:	18 30       	cpi	r17, 0x08	; 8
    201e:	09 f4       	brne	.+2      	; 0x2022 <V2P_RunStateMachine+0x90>
    2020:	f4 c0       	rjmp	.+488    	; 0x220a <V2P_RunStateMachine+0x278>
    2022:	19 30       	cpi	r17, 0x09	; 9
    2024:	30 f4       	brcc	.+12     	; 0x2032 <V2P_RunStateMachine+0xa0>
    2026:	16 30       	cpi	r17, 0x06	; 6
    2028:	09 f4       	brne	.+2      	; 0x202c <V2P_RunStateMachine+0x9a>
    202a:	49 c0       	rjmp	.+146    	; 0x20be <V2P_RunStateMachine+0x12c>
    202c:	17 30       	cpi	r17, 0x07	; 7
    202e:	69 f6       	brne	.-102    	; 0x1fca <V2P_RunStateMachine+0x38>
    2030:	57 c0       	rjmp	.+174    	; 0x20e0 <V2P_RunStateMachine+0x14e>
    2032:	1c 30       	cpi	r17, 0x0C	; 12
    2034:	50 f6       	brcc	.-108    	; 0x1fca <V2P_RunStateMachine+0x38>
    2036:	d6 c0       	rjmp	.+428    	; 0x21e4 <V2P_RunStateMachine+0x252>
    2038:	80 91 b4 02 	lds	r24, 0x02B4
    203c:	81 11       	cpse	r24, r1
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	18 2f       	mov	r17, r24
    2042:	f2 9b       	sbis	0x1e, 2	; 30
    2044:	c2 cf       	rjmp	.-124    	; 0x1fca <V2P_RunStateMachine+0x38>
    2046:	80 91 61 02 	lds	r24, 0x0261
    204a:	88 23       	and	r24, r24
    204c:	09 f0       	breq	.+2      	; 0x2050 <V2P_RunStateMachine+0xbe>
    204e:	bd cf       	rjmp	.-134    	; 0x1fca <V2P_RunStateMachine+0x38>
    2050:	e6 c0       	rjmp	.+460    	; 0x221e <V2P_RunStateMachine+0x28c>
    2052:	0e 94 84 09 	call	0x1308	; 0x1308 <USART_Rx>
    2056:	8b 31       	cpi	r24, 0x1B	; 27
    2058:	09 f0       	breq	.+2      	; 0x205c <V2P_RunStateMachine+0xca>
    205a:	b6 cf       	rjmp	.-148    	; 0x1fc8 <V2P_RunStateMachine+0x36>
    205c:	b3 cf       	rjmp	.-154    	; 0x1fc4 <V2P_RunStateMachine+0x32>
    205e:	0e 94 84 09 	call	0x1308	; 0x1308 <USART_Rx>
    2062:	99 27       	eor	r25, r25
    2064:	90 93 5e 02 	sts	0x025E, r25
    2068:	80 93 5d 02 	sts	0x025D, r24
    206c:	13 e0       	ldi	r17, 0x03	; 3
    206e:	ad cf       	rjmp	.-166    	; 0x1fca <V2P_RunStateMachine+0x38>
    2070:	0e 94 84 09 	call	0x1308	; 0x1308 <USART_Rx>
    2074:	99 27       	eor	r25, r25
    2076:	98 2f       	mov	r25, r24
    2078:	88 27       	eor	r24, r24
    207a:	90 93 60 02 	sts	0x0260, r25
    207e:	80 93 5f 02 	sts	0x025F, r24
    2082:	14 e0       	ldi	r17, 0x04	; 4
    2084:	a2 cf       	rjmp	.-188    	; 0x1fca <V2P_RunStateMachine+0x38>
    2086:	00 91 5f 02 	lds	r16, 0x025F
    208a:	10 91 60 02 	lds	r17, 0x0260
    208e:	0e 94 84 09 	call	0x1308	; 0x1308 <USART_Rx>
    2092:	99 27       	eor	r25, r25
    2094:	80 2b       	or	r24, r16
    2096:	91 2b       	or	r25, r17
    2098:	90 93 60 02 	sts	0x0260, r25
    209c:	80 93 5f 02 	sts	0x025F, r24
    20a0:	83 51       	subi	r24, 0x13	; 19
    20a2:	91 40       	sbci	r25, 0x01	; 1
    20a4:	08 f0       	brcs	.+2      	; 0x20a8 <V2P_RunStateMachine+0x116>
    20a6:	90 cf       	rjmp	.-224    	; 0x1fc8 <V2P_RunStateMachine+0x36>
    20a8:	15 e0       	ldi	r17, 0x05	; 5
    20aa:	c0 e0       	ldi	r28, 0x00	; 0
    20ac:	d0 e0       	ldi	r29, 0x00	; 0
    20ae:	8d cf       	rjmp	.-230    	; 0x1fca <V2P_RunStateMachine+0x38>
    20b0:	0e 94 84 09 	call	0x1308	; 0x1308 <USART_Rx>
    20b4:	8e 30       	cpi	r24, 0x0E	; 14
    20b6:	09 f0       	breq	.+2      	; 0x20ba <V2P_RunStateMachine+0x128>
    20b8:	87 cf       	rjmp	.-242    	; 0x1fc8 <V2P_RunStateMachine+0x36>
    20ba:	16 e0       	ldi	r17, 0x06	; 6
    20bc:	86 cf       	rjmp	.-244    	; 0x1fca <V2P_RunStateMachine+0x38>
    20be:	80 91 5f 02 	lds	r24, 0x025F
    20c2:	90 91 60 02 	lds	r25, 0x0260
    20c6:	c8 17       	cp	r28, r24
    20c8:	d9 07       	cpc	r29, r25
    20ca:	11 f4       	brne	.+4      	; 0x20d0 <V2P_RunStateMachine+0x13e>
    20cc:	17 e0       	ldi	r17, 0x07	; 7
    20ce:	7d cf       	rjmp	.-262    	; 0x1fca <V2P_RunStateMachine+0x38>
    20d0:	0e 94 84 09 	call	0x1308	; 0x1308 <USART_Rx>
    20d4:	fe 01       	movw	r30, r28
    20d6:	e6 5b       	subi	r30, 0xB6	; 182
    20d8:	fe 4f       	sbci	r31, 0xFE	; 254
    20da:	80 83       	st	Z, r24
    20dc:	21 96       	adiw	r28, 0x01	; 1
    20de:	75 cf       	rjmp	.-278    	; 0x1fca <V2P_RunStateMachine+0x38>
    20e0:	80 91 45 01 	lds	r24, 0x0145
    20e4:	88 23       	and	r24, r24
    20e6:	09 f0       	breq	.+2      	; 0x20ea <V2P_RunStateMachine+0x158>
    20e8:	70 cf       	rjmp	.-288    	; 0x1fca <V2P_RunStateMachine+0x38>
    20ea:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <V2P_GetChecksum>
    20ee:	18 2f       	mov	r17, r24
    20f0:	0e 94 84 09 	call	0x1308	; 0x1308 <USART_Rx>
    20f4:	18 17       	cp	r17, r24
    20f6:	11 f0       	breq	.+4      	; 0x20fc <V2P_RunStateMachine+0x16a>
    20f8:	1b e0       	ldi	r17, 0x0B	; 11
    20fa:	67 cf       	rjmp	.-306    	; 0x1fca <V2P_RunStateMachine+0x38>
    20fc:	80 91 4a 01 	lds	r24, 0x014A
    2100:	84 30       	cpi	r24, 0x04	; 4
    2102:	38 f4       	brcc	.+14     	; 0x2112 <V2P_RunStateMachine+0x180>
    2104:	82 30       	cpi	r24, 0x02	; 2
    2106:	08 f0       	brcs	.+2      	; 0x210a <V2P_RunStateMachine+0x178>
    2108:	66 c0       	rjmp	.+204    	; 0x21d6 <V2P_RunStateMachine+0x244>
    210a:	81 30       	cpi	r24, 0x01	; 1
    210c:	09 f0       	breq	.+2      	; 0x2110 <V2P_RunStateMachine+0x17e>
    210e:	66 c0       	rjmp	.+204    	; 0x21dc <V2P_RunStateMachine+0x24a>
    2110:	06 c0       	rjmp	.+12     	; 0x211e <V2P_RunStateMachine+0x18c>
    2112:	86 30       	cpi	r24, 0x06	; 6
    2114:	01 f1       	breq	.+64     	; 0x2156 <V2P_RunStateMachine+0x1c4>
    2116:	87 30       	cpi	r24, 0x07	; 7
    2118:	09 f0       	breq	.+2      	; 0x211c <V2P_RunStateMachine+0x18a>
    211a:	60 c0       	rjmp	.+192    	; 0x21dc <V2P_RunStateMachine+0x24a>
    211c:	12 c0       	rjmp	.+36     	; 0x2142 <V2P_RunStateMachine+0x1b0>
    211e:	8b e0       	ldi	r24, 0x0B	; 11
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	90 93 60 02 	sts	0x0260, r25
    2126:	80 93 5f 02 	sts	0x025F, r24
    212a:	e7 ef       	ldi	r30, 0xF7	; 247
    212c:	f3 e0       	ldi	r31, 0x03	; 3
    212e:	aa e4       	ldi	r26, 0x4A	; 74
    2130:	b1 e0       	ldi	r27, 0x01	; 1
    2132:	84 91       	lpm	r24, Z
    2134:	8d 93       	st	X+, r24
    2136:	31 96       	adiw	r30, 0x01	; 1
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	a5 35       	cpi	r26, 0x55	; 85
    213c:	b8 07       	cpc	r27, r24
    213e:	c9 f7       	brne	.-14     	; 0x2132 <V2P_RunStateMachine+0x1a0>
    2140:	47 c0       	rjmp	.+142    	; 0x21d0 <V2P_RunStateMachine+0x23e>
    2142:	82 e0       	ldi	r24, 0x02	; 2
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	90 93 60 02 	sts	0x0260, r25
    214a:	80 93 5f 02 	sts	0x025F, r24
    214e:	80 ec       	ldi	r24, 0xC0	; 192
    2150:	80 93 4b 01 	sts	0x014B, r24
    2154:	3d c0       	rjmp	.+122    	; 0x21d0 <V2P_RunStateMachine+0x23e>
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	90 93 60 02 	sts	0x0260, r25
    215e:	80 93 5f 02 	sts	0x025F, r24
    2162:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <V2P_CheckForExtendedAddress>
    2166:	e0 90 4d 01 	lds	r14, 0x014D
    216a:	ff 24       	eor	r15, r15
    216c:	00 27       	eor	r16, r16
    216e:	11 27       	eor	r17, r17
    2170:	10 2f       	mov	r17, r16
    2172:	0f 2d       	mov	r16, r15
    2174:	fe 2c       	mov	r15, r14
    2176:	ee 24       	eor	r14, r14
    2178:	20 91 4b 01 	lds	r18, 0x014B
    217c:	33 27       	eor	r19, r19
    217e:	44 27       	eor	r20, r20
    2180:	55 27       	eor	r21, r21
    2182:	52 2f       	mov	r21, r18
    2184:	44 27       	eor	r20, r20
    2186:	33 27       	eor	r19, r19
    2188:	22 27       	eor	r18, r18
    218a:	80 91 4c 01 	lds	r24, 0x014C
    218e:	99 27       	eor	r25, r25
    2190:	aa 27       	eor	r26, r26
    2192:	bb 27       	eor	r27, r27
    2194:	dc 01       	movw	r26, r24
    2196:	99 27       	eor	r25, r25
    2198:	88 27       	eor	r24, r24
    219a:	28 2b       	or	r18, r24
    219c:	39 2b       	or	r19, r25
    219e:	4a 2b       	or	r20, r26
    21a0:	5b 2b       	or	r21, r27
    21a2:	80 91 4e 01 	lds	r24, 0x014E
    21a6:	99 27       	eor	r25, r25
    21a8:	aa 27       	eor	r26, r26
    21aa:	bb 27       	eor	r27, r27
    21ac:	28 2b       	or	r18, r24
    21ae:	39 2b       	or	r19, r25
    21b0:	4a 2b       	or	r20, r26
    21b2:	5b 2b       	or	r21, r27
    21b4:	e2 2a       	or	r14, r18
    21b6:	f3 2a       	or	r15, r19
    21b8:	04 2b       	or	r16, r20
    21ba:	15 2b       	or	r17, r21
    21bc:	e0 92 62 02 	sts	0x0262, r14
    21c0:	f0 92 63 02 	sts	0x0263, r15
    21c4:	00 93 64 02 	sts	0x0264, r16
    21c8:	10 93 65 02 	sts	0x0265, r17
    21cc:	10 92 4b 01 	sts	0x014B, r1
    21d0:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <V2P_SendPacket>
    21d4:	05 c0       	rjmp	.+10     	; 0x21e0 <V2P_RunStateMachine+0x24e>
    21d6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <V2P_GetSetParamater>
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <V2P_RunStateMachine+0x24e>
    21dc:	f6 01       	movw	r30, r12
    21de:	09 95       	icall
    21e0:	18 e0       	ldi	r17, 0x08	; 8
    21e2:	f3 ce       	rjmp	.-538    	; 0x1fca <V2P_RunStateMachine+0x38>
    21e4:	1b 30       	cpi	r17, 0x0B	; 11
    21e6:	11 f4       	brne	.+4      	; 0x21ec <V2P_RunStateMachine+0x25a>
    21e8:	81 ec       	ldi	r24, 0xC1	; 193
    21ea:	05 c0       	rjmp	.+10     	; 0x21f6 <V2P_RunStateMachine+0x264>
    21ec:	1a 30       	cpi	r17, 0x0A	; 10
    21ee:	11 f4       	brne	.+4      	; 0x21f4 <V2P_RunStateMachine+0x262>
    21f0:	80 e8       	ldi	r24, 0x80	; 128
    21f2:	01 c0       	rjmp	.+2      	; 0x21f6 <V2P_RunStateMachine+0x264>
    21f4:	80 ec       	ldi	r24, 0xC0	; 192
    21f6:	80 93 4b 01 	sts	0x014B, r24
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	90 93 60 02 	sts	0x0260, r25
    2202:	80 93 5f 02 	sts	0x025F, r24
    2206:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <V2P_SendPacket>
    220a:	10 92 45 01 	sts	0x0145, r1
    220e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <BUFF_InitialiseBuffer>
    2212:	10 92 b0 00 	sts	0x00B0, r1
    2216:	10 92 70 00 	sts	0x0070, r1
    221a:	10 e0       	ldi	r17, 0x00	; 0
    221c:	d6 ce       	rjmp	.-596    	; 0x1fca <V2P_RunStateMachine+0x38>
    221e:	80 e8       	ldi	r24, 0x80	; 128
    2220:	80 93 61 00 	sts	0x0061, r24
    2224:	83 e0       	ldi	r24, 0x03	; 3
    2226:	80 93 61 00 	sts	0x0061, r24
    222a:	80 91 c1 00 	lds	r24, 0x00C1
    222e:	80 78       	andi	r24, 0x80	; 128
    2230:	80 93 c1 00 	sts	0x00C1, r24
    2234:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TOUT_SetupSleepTimer>
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	ff 90       	pop	r15
    2242:	ef 90       	pop	r14
    2244:	df 90       	pop	r13
    2246:	cf 90       	pop	r12
    2248:	08 95       	ret

0000224a <ISPCC_PollForProgComplete>:
	}
}

void ISPCC_PollForProgComplete(const uint8_t PollData, uint16_t PollAddr)
{
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	eb 01       	movw	r28, r22
	uint8_t PollType;
	uint8_t ProgCommand;

	if (PollData & ISPCC_PROG_MODE_PAGE)
    2252:	99 27       	eor	r25, r25
    2254:	80 ff       	sbrs	r24, 0
    2256:	08 c0       	rjmp	.+16     	; 0x2268 <ISPCC_PollForProgComplete+0x1e>
	   PollType = ((PollData & ISPCC_PAGE_POLLTYPE_MASK) >> ISPCC_PAGE_POLLTYPE_MASKSHIFT);
    2258:	80 77       	andi	r24, 0x70	; 112
    225a:	90 70       	andi	r25, 0x00	; 0
    225c:	34 e0       	ldi	r19, 0x04	; 4
    225e:	95 95       	asr	r25
    2260:	87 95       	ror	r24
    2262:	3a 95       	dec	r19
    2264:	e1 f7       	brne	.-8      	; 0x225e <ISPCC_PollForProgComplete+0x14>
    2266:	04 c0       	rjmp	.+8      	; 0x2270 <ISPCC_PollForProgComplete+0x26>
	else
	   PollType = ((PollData & ISPCC_WORD_POLLTYPE_MASK) >> ISPCC_WORD_POLLTYPE_MASKSHIFT);	
    2268:	8e 70       	andi	r24, 0x0E	; 14
    226a:	90 70       	andi	r25, 0x00	; 0
    226c:	95 95       	asr	r25
    226e:	87 95       	ror	r24

	switch (PollType & ISPCC_POLLTYPE_MASK)
    2270:	99 27       	eor	r25, r25
    2272:	87 70       	andi	r24, 0x07	; 7
    2274:	90 70       	andi	r25, 0x00	; 0
    2276:	82 30       	cpi	r24, 0x02	; 2
    2278:	91 05       	cpc	r25, r1
    227a:	19 f0       	breq	.+6      	; 0x2282 <ISPCC_PollForProgComplete+0x38>
    227c:	04 97       	sbiw	r24, 0x04	; 4
    227e:	41 f5       	brne	.+80     	; 0x22d0 <ISPCC_PollForProgComplete+0x86>
    2280:	1c c0       	rjmp	.+56     	; 0x22ba <ISPCC_PollForProgComplete+0x70>
	{
		case ISPCC_POLLTYPE_DATA:
			ProgCommand = PacketBytes[7];
    2282:	10 91 51 01 	lds	r17, 0x0151
			
			if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP) // Flash uses word addresses
    2286:	80 91 4a 01 	lds	r24, 0x014A
    228a:	83 31       	cpi	r24, 0x13	; 19
    228c:	41 f4       	brne	.+16     	; 0x229e <ISPCC_PollForProgComplete+0x54>
			{
				ProgCommand  |= ((PollAddr & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ);
    228e:	c0 ff       	sbrs	r28, 0
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <ISPCC_PollForProgComplete+0x4c>
    2292:	88 e0       	ldi	r24, 0x08	; 8
    2294:	01 c0       	rjmp	.+2      	; 0x2298 <ISPCC_PollForProgComplete+0x4e>
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	18 2b       	or	r17, r24
				PollAddr    >>= 1;
    229a:	d6 95       	lsr	r29
    229c:	c7 95       	ror	r28
			}

			do
			{
				USI_SPITransmit(ProgCommand);
    229e:	81 2f       	mov	r24, r17
    22a0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
				USI_SPITransmitWord(PollAddr);
    22a4:	ce 01       	movw	r24, r28
    22a6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <USI_SPITransmitWord>
			}
			while (USI_SPITransmit(0x00) == PacketBytes[8]);
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    22b0:	90 91 52 01 	lds	r25, 0x0152
    22b4:	89 17       	cp	r24, r25
    22b6:	81 f4       	brne	.+32     	; 0x22d8 <ISPCC_PollForProgComplete+0x8e>
    22b8:	f2 cf       	rjmp	.-28     	; 0x229e <ISPCC_PollForProgComplete+0x54>
						
			break;
		case ISPCC_POLLTYPE_READY:
			do
			   USI_SPITransmitWord(0xF000);
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 ef       	ldi	r25, 0xF0	; 240
    22be:	0e 94 fd 09 	call	0x13fa	; 0x13fa <USI_SPITransmitWord>
			while (USI_SPITransmitWord(0x0000) & ISPCC_POLL_BUSYFLAG);
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <USI_SPITransmitWord>
    22ca:	80 ff       	sbrs	r24, 0
    22cc:	05 c0       	rjmp	.+10     	; 0x22d8 <ISPCC_PollForProgComplete+0x8e>
    22ce:	f5 cf       	rjmp	.-22     	; 0x22ba <ISPCC_PollForProgComplete+0x70>

			break;
		default:                                      // Default is Wait polling
			MAIN_Delay1MS(PacketBytes[4]);	
    22d0:	80 91 4e 01 	lds	r24, 0x014E
    22d4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MAIN_Delay1MS>
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	1f 91       	pop	r17
    22de:	08 95       	ret

000022e0 <ISPCC_ProgramChip>:
    22e0:	4f 92       	push	r4
    22e2:	5f 92       	push	r5
    22e4:	6f 92       	push	r6
    22e6:	7f 92       	push	r7
    22e8:	8f 92       	push	r8
    22ea:	9f 92       	push	r9
    22ec:	af 92       	push	r10
    22ee:	bf 92       	push	r11
    22f0:	cf 92       	push	r12
    22f2:	df 92       	push	r13
    22f4:	ef 92       	push	r14
    22f6:	ff 92       	push	r15
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	b0 90 4d 01 	lds	r11, 0x014D
    2304:	a0 90 4f 01 	lds	r10, 0x014F
    2308:	40 90 62 02 	lds	r4, 0x0262
    230c:	50 90 63 02 	lds	r5, 0x0263
    2310:	60 90 64 02 	lds	r6, 0x0264
    2314:	70 90 65 02 	lds	r7, 0x0265
    2318:	80 91 4b 01 	lds	r24, 0x014B
    231c:	99 27       	eor	r25, r25
    231e:	98 2e       	mov	r9, r24
    2320:	88 24       	eor	r8, r8
    2322:	80 91 4c 01 	lds	r24, 0x014C
    2326:	99 27       	eor	r25, r25
    2328:	88 2a       	or	r8, r24
    232a:	99 2a       	or	r9, r25
    232c:	e0 90 4a 01 	lds	r14, 0x014A
    2330:	b0 fc       	sbrc	r11, 0
    2332:	09 c0       	rjmp	.+18     	; 0x2346 <ISPCC_ProgramChip+0x66>
    2334:	c0 e0       	ldi	r28, 0x00	; 0
    2336:	d0 e0       	ldi	r29, 0x00	; 0
    2338:	cc 24       	eor	r12, r12
    233a:	dd 24       	eor	r13, r13
    233c:	74 e5       	ldi	r23, 0x54	; 84
    233e:	67 2e       	mov	r6, r23
    2340:	71 e0       	ldi	r23, 0x01	; 1
    2342:	77 2e       	mov	r7, r23
    2344:	ac c0       	rjmp	.+344    	; 0x249e <ISPCC_ProgramChip+0x1be>
    2346:	c0 e0       	ldi	r28, 0x00	; 0
    2348:	d0 e0       	ldi	r29, 0x00	; 0
    234a:	00 e0       	ldi	r16, 0x00	; 0
    234c:	10 e0       	ldi	r17, 0x00	; 0
    234e:	64 e5       	ldi	r22, 0x54	; 84
    2350:	c6 2e       	mov	r12, r22
    2352:	61 e0       	ldi	r22, 0x01	; 1
    2354:	d6 2e       	mov	r13, r22
    2356:	41 c0       	rjmp	.+130    	; 0x23da <ISPCC_ProgramChip+0xfa>
    2358:	f6 01       	movw	r30, r12
    235a:	f0 80       	ld	r15, Z
    235c:	f3 e1       	ldi	r31, 0x13	; 19
    235e:	ef 16       	cp	r14, r31
    2360:	39 f4       	brne	.+14     	; 0x2370 <ISPCC_ProgramChip+0x90>
    2362:	00 ff       	sbrs	r16, 0
    2364:	02 c0       	rjmp	.+4      	; 0x236a <ISPCC_ProgramChip+0x8a>
    2366:	88 e0       	ldi	r24, 0x08	; 8
    2368:	01 c0       	rjmp	.+2      	; 0x236c <ISPCC_ProgramChip+0x8c>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	8a 29       	or	r24, r10
    236e:	01 c0       	rjmp	.+2      	; 0x2372 <ISPCC_ProgramChip+0x92>
    2370:	8a 2d       	mov	r24, r10
    2372:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    2376:	80 91 62 02 	lds	r24, 0x0262
    237a:	90 91 63 02 	lds	r25, 0x0263
    237e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <USI_SPITransmitWord>
    2382:	8f 2d       	mov	r24, r15
    2384:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    2388:	20 97       	sbiw	r28, 0x00	; 0
    238a:	d9 f4       	brne	.+54     	; 0x23c2 <ISPCC_ProgramChip+0xe2>
    238c:	80 91 52 01 	lds	r24, 0x0152
    2390:	8f 15       	cp	r24, r15
    2392:	b9 f0       	breq	.+46     	; 0x23c2 <ISPCC_ProgramChip+0xe2>
    2394:	83 e1       	ldi	r24, 0x13	; 19
    2396:	e8 16       	cp	r14, r24
    2398:	49 f0       	breq	.+18     	; 0x23ac <ISPCC_ProgramChip+0xcc>
    239a:	e5 e1       	ldi	r30, 0x15	; 21
    239c:	ee 16       	cp	r14, r30
    239e:	89 f4       	brne	.+34     	; 0x23c2 <ISPCC_ProgramChip+0xe2>
    23a0:	80 91 53 01 	lds	r24, 0x0153
    23a4:	8f 15       	cp	r24, r15
    23a6:	09 f0       	breq	.+2      	; 0x23aa <ISPCC_ProgramChip+0xca>
    23a8:	7f c0       	rjmp	.+254    	; 0x24a8 <ISPCC_ProgramChip+0x1c8>
    23aa:	0b c0       	rjmp	.+22     	; 0x23c2 <ISPCC_ProgramChip+0xe2>
    23ac:	c0 91 62 02 	lds	r28, 0x0262
    23b0:	d0 91 63 02 	lds	r29, 0x0263
    23b4:	cc 0f       	add	r28, r28
    23b6:	dd 1f       	adc	r29, r29
    23b8:	c8 01       	movw	r24, r16
    23ba:	81 70       	andi	r24, 0x01	; 1
    23bc:	90 70       	andi	r25, 0x00	; 0
    23be:	c8 0f       	add	r28, r24
    23c0:	d9 1f       	adc	r29, r25
    23c2:	00 fd       	sbrc	r16, 0
    23c4:	03 c0       	rjmp	.+6      	; 0x23cc <ISPCC_ProgramChip+0xec>
    23c6:	f5 e1       	ldi	r31, 0x15	; 21
    23c8:	ef 16       	cp	r14, r31
    23ca:	11 f4       	brne	.+4      	; 0x23d0 <ISPCC_ProgramChip+0xf0>
    23cc:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <V2P_IncrementCurrAddress>
    23d0:	0f 5f       	subi	r16, 0xFF	; 255
    23d2:	1f 4f       	sbci	r17, 0xFF	; 255
    23d4:	08 94       	sec
    23d6:	c1 1c       	adc	r12, r1
    23d8:	d1 1c       	adc	r13, r1
    23da:	08 15       	cp	r16, r8
    23dc:	19 05       	cpc	r17, r9
    23de:	09 f0       	breq	.+2      	; 0x23e2 <ISPCC_ProgramChip+0x102>
    23e0:	bb cf       	rjmp	.-138    	; 0x2358 <ISPCC_ProgramChip+0x78>
    23e2:	b7 fe       	sbrs	r11, 7
    23e4:	6c c0       	rjmp	.+216    	; 0x24be <ISPCC_ProgramChip+0x1de>
    23e6:	80 91 50 01 	lds	r24, 0x0150
    23ea:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    23ee:	c2 01       	movw	r24, r4
    23f0:	0e 94 fd 09 	call	0x13fa	; 0x13fa <USI_SPITransmitWord>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    23fa:	20 97       	sbiw	r28, 0x00	; 0
    23fc:	11 f0       	breq	.+4      	; 0x2402 <ISPCC_ProgramChip+0x122>
    23fe:	8b 2d       	mov	r24, r11
    2400:	03 c0       	rjmp	.+6      	; 0x2408 <ISPCC_ProgramChip+0x128>
    2402:	8b 2d       	mov	r24, r11
    2404:	8f 78       	andi	r24, 0x8F	; 143
    2406:	80 61       	ori	r24, 0x10	; 16
    2408:	be 01       	movw	r22, r28
    240a:	0e 94 25 11 	call	0x224a	; 0x224a <ISPCC_PollForProgComplete>
    240e:	57 c0       	rjmp	.+174    	; 0x24be <ISPCC_ProgramChip+0x1de>
    2410:	f3 01       	movw	r30, r6
    2412:	10 81       	ld	r17, Z
    2414:	f3 e1       	ldi	r31, 0x13	; 19
    2416:	ef 16       	cp	r14, r31
    2418:	39 f4       	brne	.+14     	; 0x2428 <ISPCC_ProgramChip+0x148>
    241a:	c0 fe       	sbrs	r12, 0
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <ISPCC_ProgramChip+0x142>
    241e:	88 e0       	ldi	r24, 0x08	; 8
    2420:	01 c0       	rjmp	.+2      	; 0x2424 <ISPCC_ProgramChip+0x144>
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	8a 29       	or	r24, r10
    2426:	01 c0       	rjmp	.+2      	; 0x242a <ISPCC_ProgramChip+0x14a>
    2428:	8a 2d       	mov	r24, r10
    242a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    242e:	80 91 62 02 	lds	r24, 0x0262
    2432:	90 91 63 02 	lds	r25, 0x0263
    2436:	0e 94 fd 09 	call	0x13fa	; 0x13fa <USI_SPITransmitWord>
    243a:	81 2f       	mov	r24, r17
    243c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    2440:	80 91 52 01 	lds	r24, 0x0152
    2444:	81 17       	cp	r24, r17
    2446:	b9 f0       	breq	.+46     	; 0x2476 <ISPCC_ProgramChip+0x196>
    2448:	83 e1       	ldi	r24, 0x13	; 19
    244a:	e8 16       	cp	r14, r24
    244c:	41 f0       	breq	.+16     	; 0x245e <ISPCC_ProgramChip+0x17e>
    244e:	e5 e1       	ldi	r30, 0x15	; 21
    2450:	ee 16       	cp	r14, r30
    2452:	89 f4       	brne	.+34     	; 0x2476 <ISPCC_ProgramChip+0x196>
    2454:	80 91 53 01 	lds	r24, 0x0153
    2458:	81 17       	cp	r24, r17
    245a:	59 f5       	brne	.+86     	; 0x24b2 <ISPCC_ProgramChip+0x1d2>
    245c:	0c c0       	rjmp	.+24     	; 0x2476 <ISPCC_ProgramChip+0x196>
    245e:	c0 91 62 02 	lds	r28, 0x0262
    2462:	d0 91 63 02 	lds	r29, 0x0263
    2466:	cc 0f       	add	r28, r28
    2468:	dd 1f       	adc	r29, r29
    246a:	c6 01       	movw	r24, r12
    246c:	81 70       	andi	r24, 0x01	; 1
    246e:	90 70       	andi	r25, 0x00	; 0
    2470:	c8 0f       	add	r28, r24
    2472:	d9 1f       	adc	r29, r25
    2474:	22 c0       	rjmp	.+68     	; 0x24ba <ISPCC_ProgramChip+0x1da>
    2476:	1b 2d       	mov	r17, r11
    2478:	11 7f       	andi	r17, 0xF1	; 241
    247a:	12 60       	ori	r17, 0x02	; 2
    247c:	c0 fc       	sbrc	r12, 0
    247e:	03 c0       	rjmp	.+6      	; 0x2486 <ISPCC_ProgramChip+0x1a6>
    2480:	f5 e1       	ldi	r31, 0x15	; 21
    2482:	ef 16       	cp	r14, r31
    2484:	11 f4       	brne	.+4      	; 0x248a <ISPCC_ProgramChip+0x1aa>
    2486:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <V2P_IncrementCurrAddress>
    248a:	be 01       	movw	r22, r28
    248c:	81 2f       	mov	r24, r17
    248e:	0e 94 25 11 	call	0x224a	; 0x224a <ISPCC_PollForProgComplete>
    2492:	08 94       	sec
    2494:	c1 1c       	adc	r12, r1
    2496:	d1 1c       	adc	r13, r1
    2498:	08 94       	sec
    249a:	61 1c       	adc	r6, r1
    249c:	71 1c       	adc	r7, r1
    249e:	c8 14       	cp	r12, r8
    24a0:	d9 04       	cpc	r13, r9
    24a2:	09 f0       	breq	.+2      	; 0x24a6 <ISPCC_ProgramChip+0x1c6>
    24a4:	b5 cf       	rjmp	.-150    	; 0x2410 <ISPCC_ProgramChip+0x130>
    24a6:	0b c0       	rjmp	.+22     	; 0x24be <ISPCC_ProgramChip+0x1de>
    24a8:	c0 91 62 02 	lds	r28, 0x0262
    24ac:	d0 91 63 02 	lds	r29, 0x0263
    24b0:	88 cf       	rjmp	.-240    	; 0x23c2 <ISPCC_ProgramChip+0xe2>
    24b2:	c0 91 62 02 	lds	r28, 0x0262
    24b6:	d0 91 63 02 	lds	r29, 0x0263
    24ba:	1b 2d       	mov	r17, r11
    24bc:	df cf       	rjmp	.-66     	; 0x247c <ISPCC_ProgramChip+0x19c>
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	ff 90       	pop	r15
    24c8:	ef 90       	pop	r14
    24ca:	df 90       	pop	r13
    24cc:	cf 90       	pop	r12
    24ce:	bf 90       	pop	r11
    24d0:	af 90       	pop	r10
    24d2:	9f 90       	pop	r9
    24d4:	8f 90       	pop	r8
    24d6:	7f 90       	pop	r7
    24d8:	6f 90       	pop	r6
    24da:	5f 90       	pop	r5
    24dc:	4f 90       	pop	r4
    24de:	08 95       	ret

000024e0 <ISPCC_EnterChipProgrammingMode>:
    24e0:	ff 92       	push	r15
    24e2:	0f 93       	push	r16
    24e4:	1f 93       	push	r17
    24e6:	00 91 4f 01 	lds	r16, 0x014F
    24ea:	10 91 4e 01 	lds	r17, 0x014E
    24ee:	81 b3       	in	r24, 0x11	; 17
    24f0:	8f 7c       	andi	r24, 0xCF	; 207
    24f2:	80 63       	ori	r24, 0x30	; 48
    24f4:	81 bb       	out	0x11, r24	; 17
    24f6:	80 91 4c 01 	lds	r24, 0x014C
    24fa:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MAIN_Delay1MS>
    24fe:	81 2f       	mov	r24, r17
    2500:	81 50       	subi	r24, 0x01	; 1
    2502:	84 36       	cpi	r24, 0x64	; 100
    2504:	08 f4       	brcc	.+2      	; 0x2508 <ISPCC_EnterChipProgrammingMode+0x28>
    2506:	40 c0       	rjmp	.+128    	; 0x2588 <ISPCC_EnterChipProgrammingMode+0xa8>
    2508:	18 e1       	ldi	r17, 0x18	; 24
    250a:	3e c0       	rjmp	.+124    	; 0x2588 <ISPCC_EnterChipProgrammingMode+0xa8>
    250c:	80 91 52 01 	lds	r24, 0x0152
    2510:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    2514:	80 2f       	mov	r24, r16
    2516:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MAIN_Delay1MS>
    251a:	80 91 53 01 	lds	r24, 0x0153
    251e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    2522:	80 2f       	mov	r24, r16
    2524:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MAIN_Delay1MS>
    2528:	80 91 54 01 	lds	r24, 0x0154
    252c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    2530:	f8 2e       	mov	r15, r24
    2532:	80 2f       	mov	r24, r16
    2534:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MAIN_Delay1MS>
    2538:	80 91 51 01 	lds	r24, 0x0151
    253c:	83 30       	cpi	r24, 0x03	; 3
    253e:	29 f4       	brne	.+10     	; 0x254a <ISPCC_EnterChipProgrammingMode+0x6a>
    2540:	80 91 55 01 	lds	r24, 0x0155
    2544:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    2548:	05 c0       	rjmp	.+10     	; 0x2554 <ISPCC_EnterChipProgrammingMode+0x74>
    254a:	80 91 55 01 	lds	r24, 0x0155
    254e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    2552:	f8 2e       	mov	r15, r24
    2554:	80 91 51 01 	lds	r24, 0x0151
    2558:	88 23       	and	r24, r24
    255a:	21 f0       	breq	.+8      	; 0x2564 <ISPCC_EnterChipProgrammingMode+0x84>
    255c:	80 91 50 01 	lds	r24, 0x0150
    2560:	f8 16       	cp	r15, r24
    2562:	69 f4       	brne	.+26     	; 0x257e <ISPCC_EnterChipProgrammingMode+0x9e>
    2564:	80 2f       	mov	r24, r16
    2566:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MAIN_Delay1MS>
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	80 93 61 02 	sts	0x0261, r24
    2570:	81 b3       	in	r24, 0x11	; 17
    2572:	8f 7c       	andi	r24, 0xCF	; 207
    2574:	80 62       	ori	r24, 0x20	; 32
    2576:	81 bb       	out	0x11, r24	; 17
    2578:	10 92 4b 01 	sts	0x014B, r1
    257c:	0e c0       	rjmp	.+28     	; 0x259a <ISPCC_EnterChipProgrammingMode+0xba>
    257e:	80 2f       	mov	r24, r16
    2580:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MAIN_Delay1MS>
    2584:	0e 94 35 0a 	call	0x146a	; 0x146a <USI_SPIToggleClock>
    2588:	11 50       	subi	r17, 0x01	; 1
    258a:	00 f6       	brcc	.-128    	; 0x250c <ISPCC_EnterChipProgrammingMode+0x2c>
    258c:	81 b3       	in	r24, 0x11	; 17
    258e:	8f 7c       	andi	r24, 0xCF	; 207
    2590:	80 61       	ori	r24, 0x10	; 16
    2592:	81 bb       	out	0x11, r24	; 17
    2594:	80 ec       	ldi	r24, 0xC0	; 192
    2596:	80 93 4b 01 	sts	0x014B, r24
    259a:	1f 91       	pop	r17
    259c:	0f 91       	pop	r16
    259e:	ff 90       	pop	r15
    25a0:	08 95       	ret

000025a2 <AICI_InterpretPacket>:

// ======================================================================================

void AICI_InterpretPacket(void)
{
    25a2:	df 92       	push	r13
    25a4:	ef 92       	push	r14
    25a6:	ff 92       	push	r15
    25a8:	0f 93       	push	r16
    25aa:	1f 93       	push	r17
    25ac:	cf 93       	push	r28
    25ae:	df 93       	push	r29
	switch (PacketBytes[0])
    25b0:	80 91 4a 01 	lds	r24, 0x014A
    25b4:	86 31       	cpi	r24, 0x16	; 22
    25b6:	09 f4       	brne	.+2      	; 0x25ba <AICI_InterpretPacket+0x18>
    25b8:	ea c0       	rjmp	.+468    	; 0x278e <AICI_InterpretPacket+0x1ec>
    25ba:	87 31       	cpi	r24, 0x17	; 23
    25bc:	78 f4       	brcc	.+30     	; 0x25dc <AICI_InterpretPacket+0x3a>
    25be:	82 31       	cpi	r24, 0x12	; 18
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <AICI_InterpretPacket+0x22>
    25c2:	57 c0       	rjmp	.+174    	; 0x2672 <AICI_InterpretPacket+0xd0>
    25c4:	83 31       	cpi	r24, 0x13	; 19
    25c6:	30 f4       	brcc	.+12     	; 0x25d4 <AICI_InterpretPacket+0x32>
    25c8:	80 31       	cpi	r24, 0x10	; 16
    25ca:	d9 f0       	breq	.+54     	; 0x2602 <AICI_InterpretPacket+0x60>
    25cc:	81 31       	cpi	r24, 0x11	; 17
    25ce:	09 f0       	breq	.+2      	; 0x25d2 <AICI_InterpretPacket+0x30>
    25d0:	31 c1       	rjmp	.+610    	; 0x2834 <AICI_InterpretPacket+0x292>
    25d2:	35 c0       	rjmp	.+106    	; 0x263e <AICI_InterpretPacket+0x9c>
    25d4:	84 31       	cpi	r24, 0x14	; 20
    25d6:	09 f0       	breq	.+2      	; 0x25da <AICI_InterpretPacket+0x38>
    25d8:	22 c1       	rjmp	.+580    	; 0x281e <AICI_InterpretPacket+0x27c>
    25da:	d9 c0       	rjmp	.+434    	; 0x278e <AICI_InterpretPacket+0x1ec>
    25dc:	89 31       	cpi	r24, 0x19	; 25
    25de:	09 f4       	brne	.+2      	; 0x25e2 <AICI_InterpretPacket+0x40>
    25e0:	c2 c0       	rjmp	.+388    	; 0x2766 <AICI_InterpretPacket+0x1c4>
    25e2:	8a 31       	cpi	r24, 0x1A	; 26
    25e4:	38 f4       	brcc	.+14     	; 0x25f4 <AICI_InterpretPacket+0x52>
    25e6:	87 31       	cpi	r24, 0x17	; 23
    25e8:	09 f4       	brne	.+2      	; 0x25ec <AICI_InterpretPacket+0x4a>
    25ea:	bd c0       	rjmp	.+378    	; 0x2766 <AICI_InterpretPacket+0x1c4>
    25ec:	88 31       	cpi	r24, 0x18	; 24
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <AICI_InterpretPacket+0x50>
    25f0:	21 c1       	rjmp	.+578    	; 0x2834 <AICI_InterpretPacket+0x292>
    25f2:	9a c0       	rjmp	.+308    	; 0x2728 <AICI_InterpretPacket+0x186>
    25f4:	8d 31       	cpi	r24, 0x1D	; 29
    25f6:	08 f4       	brcc	.+2      	; 0x25fa <AICI_InterpretPacket+0x58>
    25f8:	97 c0       	rjmp	.+302    	; 0x2728 <AICI_InterpretPacket+0x186>
    25fa:	8d 31       	cpi	r24, 0x1D	; 29
    25fc:	09 f0       	breq	.+2      	; 0x2600 <AICI_InterpretPacket+0x5e>
    25fe:	1a c1       	rjmp	.+564    	; 0x2834 <AICI_InterpretPacket+0x292>
    2600:	5b c0       	rjmp	.+182    	; 0x26b8 <AICI_InterpretPacket+0x116>
	{
		case AICB_CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
    2602:	82 e0       	ldi	r24, 0x02	; 2
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	90 93 60 02 	sts	0x0260, r25
    260a:	80 93 5f 02 	sts	0x025F, r24
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    260e:	a2 e0       	ldi	r26, 0x02	; 2
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
    2616:	80 2d       	mov	r24, r0
			
			USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
    2618:	0e 94 25 0a 	call	0x144a	; 0x144a <USI_SPIInitMaster>

			MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);  // Pull the slave AVR's RESET line to active
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <MAIN_ResetCSLine>
			ISPCC_EnterChipProgrammingMode();       // Run the Enter Programming Mode routine
    2622:	0e 94 70 12 	call	0x24e0	; 0x24e0 <ISPCC_EnterChipProgrammingMode>

			if (InProgrammingMode)
    2626:	80 91 61 02 	lds	r24, 0x0261
    262a:	88 23       	and	r24, r24
    262c:	19 f0       	breq	.+6      	; 0x2634 <AICI_InterpretPacket+0x92>
			   LCD_puts_f(AVRISPModeMessage);
    262e:	83 e2       	ldi	r24, 0x23	; 35
    2630:	94 e0       	ldi	r25, 0x04	; 4
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <AICI_InterpretPacket+0x96>
			else
			   LCD_puts_f(SyncErrorMessage);
    2634:	88 e1       	ldi	r24, 0x18	; 24
    2636:	94 e0       	ldi	r25, 0x04	; 4
    2638:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_puts_f>
    263c:	04 c1       	rjmp	.+520    	; 0x2846 <AICI_InterpretPacket+0x2a4>
			
			break;
		case AICB_CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	90 93 60 02 	sts	0x0260, r25
    2646:	80 93 5f 02 	sts	0x025F, r24

			MAIN_Delay1MS(PacketBytes[1]);           // Wait for the "PreDelay" amount specified in the packet
    264a:	80 91 4b 01 	lds	r24, 0x014B
    264e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MAIN_Delay1MS>
			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Non programming mode = green status led
    2652:	81 b3       	in	r24, 0x11	; 17
    2654:	8f 7c       	andi	r24, 0xCF	; 207
    2656:	80 61       	ori	r24, 0x10	; 16
    2658:	81 bb       	out	0x11, r24	; 17
			InProgrammingMode = FALSE;
    265a:	10 92 61 02 	sts	0x0261, r1
			MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	0e 94 5d 02 	call	0x4ba	; 0x4ba <MAIN_ResetCSLine>
			MAIN_Delay1MS(PacketBytes[2]);           // Wait for the "PostDelay" amount specified in the packet
    2664:	80 91 4c 01 	lds	r24, 0x014C
    2668:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MAIN_Delay1MS>
			
			USI_SPIOff();
    266c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <USI_SPIOff>
    2670:	de c0       	rjmp	.+444    	; 0x282e <AICI_InterpretPacket+0x28c>

			PacketBytes[1] = AICB_STATUS_CMD_OK;     // Return OK

			break;
		case AICB_CMD_CHIP_ERASE_ISP:
			MessageSize = 2;
    2672:	82 e0       	ldi	r24, 0x02	; 2
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	90 93 60 02 	sts	0x0260, r25
    267a:	80 93 5f 02 	sts	0x025F, r24
    267e:	cd e4       	ldi	r28, 0x4D	; 77
    2680:	d1 e0       	ldi	r29, 0x01	; 1
			
			for (uint8_t PacketB = 3; PacketB <= 6; PacketB++) // Send the erase commands to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    2682:	89 91       	ld	r24, Y+
    2684:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	c1 35       	cpi	r28, 0x51	; 81
    268c:	d8 07       	cpc	r29, r24
    268e:	c9 f7       	brne	.-14     	; 0x2682 <AICI_InterpretPacket+0xe0>

			if (PacketBytes[2])                       // Poll mode, value of 1 indicates a busy flag wait
    2690:	80 91 4c 01 	lds	r24, 0x014C
    2694:	88 23       	and	r24, r24
    2696:	59 f0       	breq	.+22     	; 0x26ae <AICI_InterpretPacket+0x10c>
			{
				do
					USI_SPITransmitWord(0xF000);
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 ef       	ldi	r25, 0xF0	; 240
    269c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <USI_SPITransmitWord>
				while (USI_SPITransmitWord(0x0000) & 0x01);
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <USI_SPITransmitWord>
    26a8:	80 ff       	sbrs	r24, 0
    26aa:	c1 c0       	rjmp	.+386    	; 0x282e <AICI_InterpretPacket+0x28c>
    26ac:	f5 cf       	rjmp	.-22     	; 0x2698 <AICI_InterpretPacket+0xf6>
			}
			else                                      // Poll mode flag of 0 indicates a predefined delay
			{
				MAIN_Delay1MS(PacketBytes[1]);         // Wait the specified interval to ensure erase complete
    26ae:	80 91 4b 01 	lds	r24, 0x014B
    26b2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MAIN_Delay1MS>
    26b6:	bb c0       	rjmp	.+374    	; 0x282e <AICI_InterpretPacket+0x28c>
			}
			
			PacketBytes[1] = AICB_STATUS_CMD_OK;       // Always return OK
			
			break;
		case AICB_CMD_SPI_MULTI:
				MessageSize = (3 + PacketBytes[2]);    // Number of recieved bytes, plus two OKs and the command byte
    26b8:	f0 90 4c 01 	lds	r15, 0x014C
    26bc:	8f 2d       	mov	r24, r15
    26be:	99 27       	eor	r25, r25
    26c0:	03 96       	adiw	r24, 0x03	; 3
    26c2:	90 93 60 02 	sts	0x0260, r25
    26c6:	80 93 5f 02 	sts	0x025F, r24
		
				uint8_t TxBytes      = PacketBytes[1]; // \. The packet data is overwritten during the transfer. Because
    26ca:	d0 90 4b 01 	lds	r13, 0x014B
				uint8_t RxStartByte  = PacketBytes[2]; // |  of this each data byte must be stored into temp variables
				uint8_t RxBytes      = PacketBytes[3]; // /  so that their contents are not lost.
    26ce:	e0 90 4d 01 	lds	r14, 0x014D
    26d2:	11 e0       	ldi	r17, 0x01	; 1
    26d4:	01 e0       	ldi	r16, 0x01	; 1
    26d6:	12 c0       	rjmp	.+36     	; 0x26fc <AICI_InterpretPacket+0x15a>
				uint8_t RxByteNum    = 1;
				uint8_t TxByteNum    = 1;
				uint8_t RecievedByte = 0;

				while (TxByteNum++ < TxBytes)          // Still bytes to transfer
    26d8:	0f 5f       	subi	r16, 0xFF	; 255
				{
					RecievedByte = USI_SPITransmit(PacketBytes[3 + TxByteNum]); // Transmit the byte, store the answer
    26da:	e0 2f       	mov	r30, r16
    26dc:	ff 27       	eor	r31, r31
    26de:	e6 5b       	subi	r30, 0xB6	; 182
    26e0:	fe 4f       	sbci	r31, 0xFE	; 254
    26e2:	83 81       	ldd	r24, Z+3	; 0x03
    26e4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>

					if ((TxByteNum >= RxStartByte) && (RxByteNum < RxBytes))
    26e8:	0f 15       	cp	r16, r15
    26ea:	40 f0       	brcs	.+16     	; 0x26fc <AICI_InterpretPacket+0x15a>
    26ec:	1e 15       	cp	r17, r14
    26ee:	30 f4       	brcc	.+12     	; 0x26fc <AICI_InterpretPacket+0x15a>
					   PacketBytes[2 + RxByteNum++] = RecievedByte;
    26f0:	e1 2f       	mov	r30, r17
    26f2:	ff 27       	eor	r31, r31
    26f4:	e6 5b       	subi	r30, 0xB6	; 182
    26f6:	fe 4f       	sbci	r31, 0xFE	; 254
    26f8:	82 83       	std	Z+2, r24	; 0x02
    26fa:	1f 5f       	subi	r17, 0xFF	; 255
    26fc:	0d 15       	cp	r16, r13
    26fe:	60 f3       	brcs	.-40     	; 0x26d8 <AICI_InterpretPacket+0x136>
    2700:	06 c0       	rjmp	.+12     	; 0x270e <AICI_InterpretPacket+0x16c>
				}

				while (RxByteNum++ < RxBytes)                         // Still more bytes to recieve
				   PacketBytes[2 + RxByteNum] = USI_SPITransmit(0x00); // its answer to be recorded (or more bytes than sent need responses), send dummy bytes to fetch the response(s)
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    2708:	c6 5b       	subi	r28, 0xB6	; 182
    270a:	de 4f       	sbci	r29, 0xFE	; 254
    270c:	8a 83       	std	Y+2, r24	; 0x02
    270e:	1f 5f       	subi	r17, 0xFF	; 255
    2710:	81 2f       	mov	r24, r17
    2712:	81 50       	subi	r24, 0x01	; 1
    2714:	c1 2f       	mov	r28, r17
    2716:	dd 27       	eor	r29, r29
    2718:	8e 15       	cp	r24, r14
    271a:	98 f3       	brcs	.-26     	; 0x2702 <AICI_InterpretPacket+0x160>

				PacketBytes[1]             = AICB_STATUS_CMD_OK; // Data should be encompassed
    271c:	10 92 4b 01 	sts	0x014B, r1
				PacketBytes[3 + RxByteNum] = AICB_STATUS_CMD_OK; //  by STATS_CMD_OKs
    2720:	c6 5b       	subi	r28, 0xB6	; 182
    2722:	de 4f       	sbci	r29, 0xFE	; 254
    2724:	1b 82       	std	Y+3, r1	; 0x03
    2726:	8f c0       	rjmp	.+286    	; 0x2846 <AICI_InterpretPacket+0x2a4>

				break;
		case AICB_CMD_READ_SIGNATURE_ISP:
		case AICB_CMD_READ_FUSE_ISP:
		case AICB_CMD_READ_LOCK_ISP:
		case AICB_CMD_READ_OSCCAL_ISP:
			MessageSize = 4;
    2728:	84 e0       	ldi	r24, 0x04	; 4
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	90 93 60 02 	sts	0x0260, r25
    2730:	80 93 5f 02 	sts	0x025F, r24
    2734:	c1 e0       	ldi	r28, 0x01	; 1
    2736:	d0 e0       	ldi	r29, 0x00	; 0
    2738:	0c e4       	ldi	r16, 0x4C	; 76
    273a:	11 e0       	ldi	r17, 0x01	; 1
	
			for (uint8_t ByteNum = 1; ByteNum <= 4; ByteNum++)
			{
				uint8_t Response = USI_SPITransmit(PacketBytes[1 + ByteNum]); // Transmit the four signature request bytes
    273c:	f8 01       	movw	r30, r16
    273e:	81 91       	ld	r24, Z+
    2740:	8f 01       	movw	r16, r30
    2742:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    2746:	98 2f       	mov	r25, r24

				if (ByteNum == PacketBytes[1])         // If the current byte is the requested signature byte, save the reponse in the packet
    2748:	80 91 4b 01 	lds	r24, 0x014B
    274c:	8c 17       	cp	r24, r28
    274e:	11 f4       	brne	.+4      	; 0x2754 <AICI_InterpretPacket+0x1b2>
					PacketBytes[2] = Response;
    2750:	90 93 4c 01 	sts	0x014C, r25
    2754:	21 96       	adiw	r28, 0x01	; 1
    2756:	c5 30       	cpi	r28, 0x05	; 5
    2758:	d1 05       	cpc	r29, r1
    275a:	81 f7       	brne	.-32     	; 0x273c <AICI_InterpretPacket+0x19a>
			}

			PacketBytes[1] = AICB_STATUS_CMD_OK;       // Data byte is encased in CMD_OKs
    275c:	10 92 4b 01 	sts	0x014B, r1
			PacketBytes[3] = AICB_STATUS_CMD_OK;       // Data byte is encased in CMD_OKs
    2760:	10 92 4d 01 	sts	0x014D, r1
    2764:	70 c0       	rjmp	.+224    	; 0x2846 <AICI_InterpretPacket+0x2a4>

			break;
		case AICB_CMD_PROGRAM_FUSE_ISP:
		case AICB_CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;
    2766:	83 e0       	ldi	r24, 0x03	; 3
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	90 93 60 02 	sts	0x0260, r25
    276e:	80 93 5f 02 	sts	0x025F, r24
    2772:	cb e4       	ldi	r28, 0x4B	; 75
    2774:	d1 e0       	ldi	r29, 0x01	; 1
			
			for (uint8_t PacketB = 1; PacketB <= 4; PacketB++) // Send the lock-byte values to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    2776:	89 91       	ld	r24, Y+
    2778:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    277c:	f1 e0       	ldi	r31, 0x01	; 1
    277e:	cf 34       	cpi	r28, 0x4F	; 79
    2780:	df 07       	cpc	r29, r31
    2782:	c9 f7       	brne	.-14     	; 0x2776 <AICI_InterpretPacket+0x1d4>

			PacketBytes[1] = AICB_STATUS_CMD_OK;       // Two CMD_OKs are always returned
    2784:	10 92 4b 01 	sts	0x014B, r1
			PacketBytes[2] = AICB_STATUS_CMD_OK;       // Two CMD_OKs are always returned
    2788:	10 92 4c 01 	sts	0x014C, r1
    278c:	5c c0       	rjmp	.+184    	; 0x2846 <AICI_InterpretPacket+0x2a4>

			break;
		case AICB_CMD_READ_FLASH_ISP:
		case AICB_CMD_READ_EEPROM_ISP:
			MessageSize = 0;                           // Here to prevent compiler from complaining if a var dec appears straight after a case

			uint8_t  ReadCommand = PacketBytes[3];
    278e:	d0 90 4d 01 	lds	r13, 0x014D
			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8) // Load in the number of bytes that is to
			                     | PacketBytes[2];                 // be read into a temp variable (MSB first)
    2792:	80 91 4b 01 	lds	r24, 0x014B
    2796:	99 27       	eor	r25, r25
    2798:	d8 2f       	mov	r29, r24
    279a:	cc 27       	eor	r28, r28
    279c:	80 91 4c 01 	lds	r24, 0x014C
    27a0:	99 27       	eor	r25, r25
    27a2:	c8 2b       	or	r28, r24
    27a4:	d9 2b       	or	r29, r25

			MessageSize = BytesToRead + 3;
    27a6:	23 96       	adiw	r28, 0x03	; 3
    27a8:	d0 93 60 02 	sts	0x0260, r29
    27ac:	c0 93 5f 02 	sts	0x025F, r28
    27b0:	23 97       	sbiw	r28, 0x03	; 3
    27b2:	00 e0       	ldi	r16, 0x00	; 0
    27b4:	10 e0       	ldi	r17, 0x00	; 0
    27b6:	8c e4       	ldi	r24, 0x4C	; 76
    27b8:	e8 2e       	mov	r14, r24
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	f8 2e       	mov	r15, r24
    27be:	26 c0       	rjmp	.+76     	; 0x280c <AICI_InterpretPacket+0x26a>

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
				if (PacketBytes[0] == AICB_CMD_READ_FLASH_ISP)  // Flash read mode - word addresses so MSB/LSB masking nessesary
    27c0:	80 91 4a 01 	lds	r24, 0x014A
    27c4:	84 31       	cpi	r24, 0x14	; 20
    27c6:	39 f4       	brne	.+14     	; 0x27d6 <AICI_InterpretPacket+0x234>
				{
					USI_SPITransmit(ReadCommand | ((ReadByte & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ));
    27c8:	00 ff       	sbrs	r16, 0
    27ca:	02 c0       	rjmp	.+4      	; 0x27d0 <AICI_InterpretPacket+0x22e>
    27cc:	88 e0       	ldi	r24, 0x08	; 8
    27ce:	01 c0       	rjmp	.+2      	; 0x27d2 <AICI_InterpretPacket+0x230>
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	8d 29       	or	r24, r13
    27d4:	01 c0       	rjmp	.+2      	; 0x27d8 <AICI_InterpretPacket+0x236>
				}
				else                                       // EEPROM read mode, address is in bytes and so no masking nessesary
				{
					USI_SPITransmit(ReadCommand);
    27d6:	8d 2d       	mov	r24, r13
    27d8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
				}
				
				USI_SPITransmitWord(CurrAddress);          // Transmit the current address to the slave AVR
    27dc:	80 91 62 02 	lds	r24, 0x0262
    27e0:	90 91 63 02 	lds	r25, 0x0263
    27e4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <USI_SPITransmitWord>

				PacketBytes[2 + ReadByte] = USI_SPITransmit(0x00); // Read in the byte stored at the requested location
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    27ee:	f7 01       	movw	r30, r14
    27f0:	80 83       	st	Z, r24

				if ((ReadByte & 0x01) || (PacketBytes[0] == AICB_CMD_READ_EEPROM_ISP)) // Flash addresses are given in words; only increment on the odd byte if reading the flash.
    27f2:	00 fd       	sbrc	r16, 0
    27f4:	04 c0       	rjmp	.+8      	; 0x27fe <AICI_InterpretPacket+0x25c>
    27f6:	80 91 4a 01 	lds	r24, 0x014A
    27fa:	86 31       	cpi	r24, 0x16	; 22
    27fc:	11 f4       	brne	.+4      	; 0x2802 <AICI_InterpretPacket+0x260>
				{
					V2P_IncrementCurrAddress();             // Increment the address counter
    27fe:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <V2P_IncrementCurrAddress>
    2802:	0f 5f       	subi	r16, 0xFF	; 255
    2804:	1f 4f       	sbci	r17, 0xFF	; 255
    2806:	08 94       	sec
    2808:	e1 1c       	adc	r14, r1
    280a:	f1 1c       	adc	r15, r1
    280c:	0c 17       	cp	r16, r28
    280e:	1d 07       	cpc	r17, r29
    2810:	b9 f6       	brne	.-82     	; 0x27c0 <AICI_InterpretPacket+0x21e>
				}
				else
				{
					if ((CurrAddress & 0x00FF0000) & !(CurrAddress & 0x0000FFFF))
					{
						CurrAddress |= (1UL << 31);        // Set MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
						V2P_CheckForExtendedAddress();
					}
				}
			}
			
			PacketBytes[1]               = AICB_STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    2812:	10 92 4b 01 	sts	0x014B, r1
			PacketBytes[2 + BytesToRead] = AICB_STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    2816:	c6 5b       	subi	r28, 0xB6	; 182
    2818:	de 4f       	sbci	r29, 0xFE	; 254
    281a:	1a 82       	std	Y+2, r1	; 0x02
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <AICI_InterpretPacket+0x2a4>

			break;
		case AICB_CMD_PROGRAM_FLASH_ISP:
		case AICB_CMD_PROGRAM_EEPROM_ISP:
			ISPCC_ProgramChip();                         // Program the bytes into the chip
    281e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <ISPCC_ProgramChip>
			
			MessageSize = 2;
    2822:	82 e0       	ldi	r24, 0x02	; 2
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	90 93 60 02 	sts	0x0260, r25
    282a:	80 93 5f 02 	sts	0x025F, r24

			PacketBytes[1] = AICB_STATUS_CMD_OK;
    282e:	10 92 4b 01 	sts	0x014B, r1
    2832:	09 c0       	rjmp	.+18     	; 0x2846 <AICI_InterpretPacket+0x2a4>
			
			break;
		default:                                        // Unknown command, return error
			MessageSize = 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	90 93 60 02 	sts	0x0260, r25
    283c:	80 93 5f 02 	sts	0x025F, r24
			
			PacketBytes[1] = AICB_STATUS_CMD_UNKNOWN;
    2840:	89 ec       	ldi	r24, 0xC9	; 201
    2842:	80 93 4b 01 	sts	0x014B, r24
	}

	V2P_SendPacket();                                    // Send the response packet
    2846:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <V2P_SendPacket>
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	1f 91       	pop	r17
    2850:	0f 91       	pop	r16
    2852:	ff 90       	pop	r15
    2854:	ef 90       	pop	r14
    2856:	df 90       	pop	r13
    2858:	08 95       	ret

0000285a <PM_SetupDFAddressCounters>:
	  return ProgDataSize;
}

void PM_SetupDFAddressCounters(const uint8_t Type)
{
    285a:	80 93 67 02 	sts	0x0267, r24
	uint32_t StartAddress;
	
	MemoryType  = Type;
	GPageLength = 0;
    285e:	10 92 6a 02 	sts	0x026A, r1
    2862:	10 92 69 02 	sts	0x0269, r1
    2866:	20 91 62 02 	lds	r18, 0x0262
    286a:	30 91 63 02 	lds	r19, 0x0263
    286e:	40 91 64 02 	lds	r20, 0x0264
    2872:	50 91 65 02 	lds	r21, 0x0265

	if (Type == TYPE_FLASH)                                              // Type 1 = Flash
    2876:	81 30       	cpi	r24, 0x01	; 1
    2878:	39 f4       	brne	.+14     	; 0x2888 <PM_SetupDFAddressCounters+0x2e>
	  StartAddress = (CurrAddress << 1);                                 // Convert flash word address to byte address
    287a:	da 01       	movw	r26, r20
    287c:	c9 01       	movw	r24, r18
    287e:	88 0f       	add	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	aa 1f       	adc	r26, r26
    2884:	bb 1f       	adc	r27, r27
    2886:	06 c0       	rjmp	.+12     	; 0x2894 <PM_SetupDFAddressCounters+0x3a>
	else
	  StartAddress = CurrAddress + PM_EEPROM_OFFSET;                     // EEPROM uses byte addresses, and starts at the 257th kilobyte in Dataflash
    2888:	da 01       	movw	r26, r20
    288a:	c9 01       	movw	r24, r18
    288c:	80 50       	subi	r24, 0x00	; 0
    288e:	9c 4f       	sbci	r25, 0xFC	; 252
    2890:	ab 4f       	sbci	r26, 0xFB	; 251
    2892:	bf 4f       	sbci	r27, 0xFF	; 255
	
	DataflashInfo.CurrPageAddress = 0;
    2894:	10 92 40 01 	sts	0x0140, r1
    2898:	10 92 3f 01 	sts	0x013F, r1
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	06 c0       	rjmp	.+12     	; 0x28ae <PM_SetupDFAddressCounters+0x54>

	while (StartAddress >= DF_INTERNALDF_BUFFBYTES)                     // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DF_INTERNALDF_BUFFBYTES;                         // Subtract one page's worth of bytes from the desired address
    28a2:	88 50       	subi	r24, 0x08	; 8
    28a4:	91 40       	sbci	r25, 0x01	; 1
    28a6:	a0 40       	sbci	r26, 0x00	; 0
    28a8:	b0 40       	sbci	r27, 0x00	; 0
    28aa:	2f 5f       	subi	r18, 0xFF	; 255
    28ac:	3f 4f       	sbci	r19, 0xFF	; 255
    28ae:	88 30       	cpi	r24, 0x08	; 8
    28b0:	41 e0       	ldi	r20, 0x01	; 1
    28b2:	94 07       	cpc	r25, r20
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	a4 07       	cpc	r26, r20
    28b8:	40 e0       	ldi	r20, 0x00	; 0
    28ba:	b4 07       	cpc	r27, r20
    28bc:	90 f7       	brcc	.-28     	; 0x28a2 <PM_SetupDFAddressCounters+0x48>
    28be:	30 93 40 01 	sts	0x0140, r19
    28c2:	20 93 3f 01 	sts	0x013F, r18
		DataflashInfo.CurrPageAddress++;
	}
	
	DataflashInfo.CurrBuffByte = (uint16_t)StartAddress;                 // The buffer byte is the remainder
    28c6:	90 93 42 01 	sts	0x0142, r25
    28ca:	80 93 41 01 	sts	0x0141, r24
    28ce:	08 95       	ret

000028d0 <PM_CheckEndOfFuseLockData>:
}

void PM_StoreProgramByte(const uint8_t Data)
{
	if (DataflashInfo.CurrBuffByte == DF_INTERNALDF_BUFFBYTES)
	{
		DF_CopyBufferToFlashPage(DataflashInfo.CurrPageAddress++);
		DF_BufferWriteEnable(0);
		DataflashInfo.CurrBuffByte = 0;
	}
	
	SPI_SPITransmit(Data);                                               // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
	DataflashInfo.CurrBuffByte++;
	GPageLength++;
}

void PM_InterpretAVRISPPacket(void)
{
	uint8_t* EEPROMAddress;

	switch (PacketBytes[0])
	{
		case AICB_CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
						
			for (uint8_t PacketB = 0; PacketB <= 11; PacketB++)          // Save the enter programming mode command bytes
			  eeprom_write_byte(&EEPROMVars.EnterProgMode[PacketB], PacketBytes[PacketB]);
			
			InProgrammingMode = TRUE;                                    // Set the flag, prevent the user from exiting the V2P state machine			
			CurrentMode = PM_NO_SETUP;                                   // Clear the current mode variable

			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = AICB_STATUS_CMD_OK;

			break;			
		case AICB_CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;

			PM_CheckEndOfFuseLockData();                                 // Check for remaining bytes to be stored and general cleanup
			
			InProgrammingMode = FALSE;                                   // Clear the flag, allow the user to exit the V2P state machine

			DF_EnableDataflash(FALSE);

			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
			PacketBytes[1] = AICB_STATUS_CMD_OK;

			break;
		case AICB_CMD_READ_SIGNATURE_ISP:
			MessageSize = 4;

			PacketBytes[1] = AICB_STATUS_CMD_OK;                          // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x01;                                        // Signature bytes all return "01" in storage mode
			PacketBytes[3] = AICB_STATUS_CMD_OK;                          // Data byte is encased in CMD_OKs

			break;
		case AICB_CMD_CHIP_ERASE_ISP:
			MessageSize = 2;

			for (uint8_t PacketB = 1; PacketB <= 6; PacketB++)          // Save the erase chip command bytes to EEPROM
			  eeprom_write_byte(&EEPROMVars.EraseChip[PacketB], PacketBytes[PacketB]);

			for (uint8_t Byte = 0; Byte < 8; Byte++)                    // Clear the program and EEPROM size counters
			{
				eeprom_write_byte(&EEPROMVars.DataSize[Byte], 0x00);
				eeprom_write_byte(&EEPROMVars.EEPROMSize[Byte], 0x00);
			}
						
			eeprom_write_byte(&EEPROMVars.EraseCmdStored, TRUE);
			
			PacketBytes[1] = AICB_STATUS_CMD_OK;
			
			break;
		case AICB_CMD_READ_OSCCAL_ISP:
			MessageSize = 4;

			PacketBytes[1] = AICB_STATUS_CMD_OK;                        // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x00;                                      // Return 0x00 for the OSCCAL byte
			PacketBytes[3] = AICB_STATUS_CMD_OK;                        // Data byte is encased in CMD_OKs

			break;
		case AICB_CMD_READ_FUSE_ISP:
		case AICB_CMD_READ_LOCK_ISP:
			MessageSize = 4;
	
			if (CurrentMode != PM_LOCKFUSEBITS_READ)                    // First lock or fuse byte being read, set the EEPROM pointer
			{
				PM_CheckEndOfFuseLockData();                            // Check for remaining bytes to be stored and general cleanup
				
				DataflashInfo.CurrBuffByte = 0;
				CurrentMode  = PM_LOCKFUSEBITS_READ;
			}
			
			if (DataflashInfo.CurrBuffByte > eeprom_read_byte((PacketBytes[0] == AICB_CMD_READ_FUSE_ISP)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes))  // Trying to read more fuse/lock bytes than are stored in memory
			{
				PacketBytes[2] = 0xFF;                                 // Return 0xFF for the fuse/lock byte
			}
			else
			{
				PacketBytes[2] = eeprom_read_byte((uint8_t*)(((PacketBytes[0] == AICB_CMD_READ_FUSE_ISP)? &EEPROMVars.FuseBytes : &EEPROMVars.LockBytes) // Starting location
									                         + (DataflashInfo.CurrBuffByte << 2) + (PacketBytes[1] - 1)));                               // The start position of the actual fuse/lock byte to read (4 bytes each));
			}

			DataflashInfo.CurrBuffByte++;

			PacketBytes[1] = AICB_STATUS_CMD_OK;                       // Data byte is encased in CMD_OKs
			PacketBytes[3] = AICB_STATUS_CMD_OK;                       // Data byte is encased in CMD_OKs

			break;
		case AICB_CMD_PROGRAM_FUSE_ISP:
		case AICB_CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;

			if (CurrentMode != PM_LOCKFUSEBITS_WRITE)                  // First lock or fuse byte being written, set the EEPROM pointer
			{
				CurrentMode   = PM_LOCKFUSEBITS_WRITE;
				DataflashInfo.CurrBuffByte  = 0;                       // CurrBuffByte is used to store the total fuse/lock bytes written
			}

			if (PacketBytes[0] == AICB_CMD_PROGRAM_FUSE_ISP)
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.FuseBytes + (DataflashInfo.CurrBuffByte << 2));
				MemoryType    = TYPE_FUSE;
			}
			else
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.LockBytes + (DataflashInfo.CurrBuffByte << 2));
				MemoryType    = TYPE_LOCK;
			}				
			
			if (DataflashInfo.CurrBuffByte < PM_MAX_FUSELOCKBITS)
			{
				for (uint8_t FLByte = 1; FLByte <= 4; FLByte++)
				{
					eeprom_write_byte(EEPROMAddress, PacketBytes[FLByte]);
					EEPROMAddress++;
				}

				DataflashInfo.CurrBuffByte++;                          // Increment the total fuse/lock bytes written counter
			}
			
			PacketBytes[1] = AICB_STATUS_CMD_OK;                       // Two CMD_OKs are always returned
			PacketBytes[2] = AICB_STATUS_CMD_OK;                       // Two CMD_OKs are always returned

			break;
		case AICB_CMD_PROGRAM_FLASH_ISP:
		case AICB_CMD_PROGRAM_EEPROM_ISP:
			MessageSize = 2;

			if (CurrentMode != PM_DATAFLASH_WRITE)                      // First programming packet
			{
				if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP)       // Flash programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram; // Set the eeprom address to the Program command bytes location
					PM_SetupDFAddressCounters(TYPE_FLASH);
				}
				else                                                   // EEPROM programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;  // Set the eeprom address to the EEPROM command bytes location
					PM_SetupDFAddressCounters(TYPE_EEPROM);
				}
				
				DF_BufferWriteEnable(DataflashInfo.CurrBuffByte);
				CurrentMode = PM_DATAFLASH_WRITE;
				
				for (uint8_t B = 1; B <= 9; B++)                       // Save the command bytes
				  eeprom_write_byte(EEPROMAddress, PacketBytes[B]);
			}

			uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
			                      | PacketBytes[2];

			for (uint16_t CurrByte = 0; CurrByte < BytesToWrite; CurrByte++)
				PM_StoreProgramByte(PacketBytes[10 + CurrByte]);

			if (!(GPageLength & PM_PAGELENGTH_FOUNDBIT) && (PacketBytes[3] & ISPCC_PROG_MODE_PAGEDONE) && GPageLength)
			{
				eeprom_write_word(((MemoryType == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength), GPageLength);
		
				GPageLength |= PM_PAGELENGTH_FOUNDBIT;                 // Bit 15 is used to indicate if the length has been found
			}

			PacketBytes[1] = AICB_STATUS_CMD_OK;
		
			break;
		case AICB_CMD_READ_FLASH_ISP:
		case AICB_CMD_READ_EEPROM_ISP:	
			if (CurrentMode != PM_DATAFLASH_READ)
			{
				PM_CheckEndOfFuseLockData();                           // Check for remaining bytes to be stored and general cleanup
				
				PM_SetupDFAddressCounters((PacketBytes[0] == AICB_CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);
				DF_ContinuousReadEnable(DataflashInfo.CurrPageAddress, DataflashInfo.CurrBuffByte);
				
				CurrentMode = PM_DATAFLASH_READ;
				CurrAddress = 0;
			}

			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8)    // \. Load in the number of bytes that is to
			                     | PacketBytes[2];                    // /  be read into a temp variable (MSB first)
						
			uint16_t BytesInMem  = PM_GetStoredDataSize((PacketBytes[0] == AICB_CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
			   PacketBytes[2 + ReadByte] = ((CurrAddress < BytesInMem)? SPI_SPITransmit(0x00) : 0xFF); // Read in the next dataflash byte if present
			   V2P_IncrementCurrAddress();
			}
			
			MessageSize = BytesToRead + 3;

			PacketBytes[1]               = AICB_STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
			PacketBytes[2 + BytesToRead] = AICB_STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
		
			break;
		default:
			MessageSize = 1;
			
			PacketBytes[1] = AICB_STATUS_CMD_UNKNOWN;
	}

	V2P_SendPacket();                                   // Send the response packet
}

void PM_CheckEndOfFuseLockData(void)
{
    28d0:	cf 93       	push	r28
    28d2:	df 93       	push	r29
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	24 97       	sbiw	r28, 0x04	; 4
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61
	if (CurrentMode == PM_DATAFLASH_WRITE)
    28e4:	80 91 68 02 	lds	r24, 0x0268
    28e8:	81 30       	cpi	r24, 0x01	; 1
    28ea:	09 f0       	breq	.+2      	; 0x28ee <PM_CheckEndOfFuseLockData+0x1e>
    28ec:	40 c0       	rjmp	.+128    	; 0x296e <PM_CheckEndOfFuseLockData+0x9e>
	{
		if (DataflashInfo.CurrBuffByte)                               // Data in the dataflash buffer, pending to be written
    28ee:	80 91 41 01 	lds	r24, 0x0141
    28f2:	90 91 42 01 	lds	r25, 0x0142
    28f6:	89 2b       	or	r24, r25
    28f8:	31 f0       	breq	.+12     	; 0x2906 <PM_CheckEndOfFuseLockData+0x36>
		  DF_CopyBufferToFlashPage(DataflashInfo.CurrPageAddress);    // Save the remaining buffer bytes
    28fa:	80 91 3f 01 	lds	r24, 0x013F
    28fe:	90 91 40 01 	lds	r25, 0x0140
    2902:	0e 94 49 0b 	call	0x1692	; 0x1692 <DF_CopyBufferToFlashPage>

		uint32_t DataSize = ((DataflashInfo.CurrPageAddress * DF_INTERNALDF_BUFFBYTES) + DataflashInfo.CurrBuffByte);
    2906:	20 91 3f 01 	lds	r18, 0x013F
    290a:	30 91 40 01 	lds	r19, 0x0140
    290e:	88 e0       	ldi	r24, 0x08	; 8
    2910:	91 e0       	ldi	r25, 0x01	; 1
    2912:	ac 01       	movw	r20, r24
    2914:	24 9f       	mul	r18, r20
    2916:	c0 01       	movw	r24, r0
    2918:	25 9f       	mul	r18, r21
    291a:	90 0d       	add	r25, r0
    291c:	34 9f       	mul	r19, r20
    291e:	90 0d       	add	r25, r0
    2920:	11 24       	eor	r1, r1
    2922:	20 91 41 01 	lds	r18, 0x0141
    2926:	30 91 42 01 	lds	r19, 0x0142
    292a:	82 0f       	add	r24, r18
    292c:	93 1f       	adc	r25, r19
    292e:	9c 01       	movw	r18, r24
    2930:	44 27       	eor	r20, r20
    2932:	55 27       	eor	r21, r21
    2934:	29 83       	std	Y+1, r18	; 0x01
    2936:	3a 83       	std	Y+2, r19	; 0x02
    2938:	4b 83       	std	Y+3, r20	; 0x03
    293a:	5c 83       	std	Y+4, r21	; 0x04

		if (MemoryType == TYPE_FLASH)
    293c:	80 91 67 02 	lds	r24, 0x0267
    2940:	fe 01       	movw	r30, r28
    2942:	31 96       	adiw	r30, 0x01	; 1
    2944:	81 30       	cpi	r24, 0x01	; 1
    2946:	21 f4       	brne	.+8      	; 0x2950 <PM_CheckEndOfFuseLockData+0x80>
            {
              uint8_t len;
              len = (uint8_t) n;

              asm volatile (
    2948:	84 e0       	ldi	r24, 0x04	; 4
    294a:	ac e1       	ldi	r26, 0x1C	; 28
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	0b c0       	rjmp	.+22     	; 0x2966 <PM_CheckEndOfFuseLockData+0x96>
		{
			eeprom_write_block((const void*)&DataSize, (void*)&EEPROMVars.DataSize, sizeof(uint32_t));
		}
		else
		{
			DataSize -= PM_EEPROM_OFFSET;                // Remove DataFlash EEPROM start offset
    2950:	20 50       	subi	r18, 0x00	; 0
    2952:	34 40       	sbci	r19, 0x04	; 4
    2954:	44 40       	sbci	r20, 0x04	; 4
    2956:	50 40       	sbci	r21, 0x00	; 0
    2958:	29 83       	std	Y+1, r18	; 0x01
    295a:	3a 83       	std	Y+2, r19	; 0x02
    295c:	4b 83       	std	Y+3, r20	; 0x03
    295e:	5c 83       	std	Y+4, r21	; 0x04
            {
              uint8_t len;
              len = (uint8_t) n;

              asm volatile (
    2960:	84 e0       	ldi	r24, 0x04	; 4
    2962:	a0 e2       	ldi	r26, 0x20	; 32
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	18 2e       	mov	r1, r24
    2968:	0e 94 8d 1a 	call	0x351a	; 0x351a <__eeprom_write_block_1F2021>
    296c:	12 c0       	rjmp	.+36     	; 0x2992 <PM_CheckEndOfFuseLockData+0xc2>
			eeprom_write_block((const void*)&DataSize, (void*)&EEPROMVars.EEPROMSize, sizeof(uint32_t));
		}
	}
	else if (CurrentMode == PM_LOCKFUSEBITS_WRITE)
    296e:	83 30       	cpi	r24, 0x03	; 3
    2970:	81 f4       	brne	.+32     	; 0x2992 <PM_CheckEndOfFuseLockData+0xc2>
	{
		// CurrBuffByte stores the total number of fuse/lock bytes written in this case:
		eeprom_write_byte(((MemoryType == TYPE_FUSE)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes), DataflashInfo.CurrBuffByte);
    2972:	20 91 41 01 	lds	r18, 0x0141
    2976:	30 91 42 01 	lds	r19, 0x0142
    297a:	80 91 67 02 	lds	r24, 0x0267
    297e:	82 30       	cpi	r24, 0x02	; 2
    2980:	19 f4       	brne	.+6      	; 0x2988 <PM_CheckEndOfFuseLockData+0xb8>
    2982:	a0 e3       	ldi	r26, 0x30	; 48
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	02 c0       	rjmp	.+4      	; 0x298c <PM_CheckEndOfFuseLockData+0xbc>
    2988:	a1 e3       	ldi	r26, 0x31	; 49
    298a:	b0 e0       	ldi	r27, 0x00	; 0

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    298c:	02 2e       	mov	r0, r18
    298e:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
    2992:	24 96       	adiw	r28, 0x04	; 4
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	f8 94       	cli
    2998:	de bf       	out	0x3e, r29	; 62
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	cd bf       	out	0x3d, r28	; 61
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	08 95       	ret

000029a4 <PM_GetStoredDataSize>:
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	24 97       	sbiw	r28, 0x04	; 4
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	81 30       	cpi	r24, 0x01	; 1
    29ba:	19 f4       	brne	.+6      	; 0x29c2 <PM_GetStoredDataSize+0x1e>
    29bc:	ac e1       	ldi	r26, 0x1C	; 28
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <PM_GetStoredDataSize+0x22>
    29c2:	a0 e2       	ldi	r26, 0x20	; 32
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 

              asm volatile (
    29c6:	84 e0       	ldi	r24, 0x04	; 4
    29c8:	fe 01       	movw	r30, r28
    29ca:	31 96       	adiw	r30, 0x01	; 1
    29cc:	18 2e       	mov	r1, r24
    29ce:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__eeprom_read_block_1F2021>
    29d2:	69 81       	ldd	r22, Y+1	; 0x01
    29d4:	7a 81       	ldd	r23, Y+2	; 0x02
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	9c 81       	ldd	r25, Y+4	; 0x04
    29da:	6f 3f       	cpi	r22, 0xFF	; 255
    29dc:	2f ef       	ldi	r18, 0xFF	; 255
    29de:	72 07       	cpc	r23, r18
    29e0:	2f ef       	ldi	r18, 0xFF	; 255
    29e2:	82 07       	cpc	r24, r18
    29e4:	2f ef       	ldi	r18, 0xFF	; 255
    29e6:	92 07       	cpc	r25, r18
    29e8:	21 f4       	brne	.+8      	; 0x29f2 <PM_GetStoredDataSize+0x4e>
    29ea:	60 e0       	ldi	r22, 0x00	; 0
    29ec:	70 e0       	ldi	r23, 0x00	; 0
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	24 96       	adiw	r28, 0x04	; 4
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	08 95       	ret

00002a04 <PM_StoreProgramByte>:
    2a04:	1f 93       	push	r17
    2a06:	18 2f       	mov	r17, r24
    2a08:	80 91 41 01 	lds	r24, 0x0141
    2a0c:	90 91 42 01 	lds	r25, 0x0142
    2a10:	88 50       	subi	r24, 0x08	; 8
    2a12:	91 40       	sbci	r25, 0x01	; 1
    2a14:	a1 f4       	brne	.+40     	; 0x2a3e <PM_StoreProgramByte+0x3a>
    2a16:	80 91 3f 01 	lds	r24, 0x013F
    2a1a:	90 91 40 01 	lds	r25, 0x0140
    2a1e:	01 96       	adiw	r24, 0x01	; 1
    2a20:	90 93 40 01 	sts	0x0140, r25
    2a24:	80 93 3f 01 	sts	0x013F, r24
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	0e 94 49 0b 	call	0x1692	; 0x1692 <DF_CopyBufferToFlashPage>
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	0e 94 bf 0a 	call	0x157e	; 0x157e <DF_BufferWriteEnable>
    2a36:	10 92 42 01 	sts	0x0142, r1
    2a3a:	10 92 41 01 	sts	0x0141, r1
    2a3e:	81 2f       	mov	r24, r17
    2a40:	0e 94 ab 09 	call	0x1356	; 0x1356 <SPI_SPITransmit>
    2a44:	80 91 41 01 	lds	r24, 0x0141
    2a48:	90 91 42 01 	lds	r25, 0x0142
    2a4c:	01 96       	adiw	r24, 0x01	; 1
    2a4e:	90 93 42 01 	sts	0x0142, r25
    2a52:	80 93 41 01 	sts	0x0141, r24
    2a56:	80 91 69 02 	lds	r24, 0x0269
    2a5a:	90 91 6a 02 	lds	r25, 0x026A
    2a5e:	01 96       	adiw	r24, 0x01	; 1
    2a60:	90 93 6a 02 	sts	0x026A, r25
    2a64:	80 93 69 02 	sts	0x0269, r24
    2a68:	1f 91       	pop	r17
    2a6a:	08 95       	ret

00002a6c <PM_SendFuseLockBytes>:
	}
}

void PM_SendFuseLockBytes(const uint8_t Type)
{
    2a6c:	ef 92       	push	r14
    2a6e:	ff 92       	push	r15
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
	uint8_t  TotalBytes;
	uint8_t* EEPROMAddress;

	if (Type == TYPE_FUSE)
    2a78:	82 30       	cpi	r24, 0x02	; 2
    2a7a:	59 f4       	brne	.+22     	; 0x2a92 <PM_SendFuseLockBytes+0x26>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2a7c:	40 e3       	ldi	r20, 0x30	; 48
    2a7e:	50 e0       	ldi	r21, 0x00	; 0
    2a80:	da 01       	movw	r26, r20
    2a82:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
    2a86:	80 2d       	mov	r24, r0
	{
		TotalBytes    = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
    2a88:	18 2f       	mov	r17, r24
    2a8a:	62 e0       	ldi	r22, 0x02	; 2
    2a8c:	e6 2e       	mov	r14, r22
    2a8e:	f1 2c       	mov	r15, r1
    2a90:	0a c0       	rjmp	.+20     	; 0x2aa6 <PM_SendFuseLockBytes+0x3a>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2a92:	41 e3       	ldi	r20, 0x31	; 49
    2a94:	50 e0       	ldi	r21, 0x00	; 0
    2a96:	da 01       	movw	r26, r20
    2a98:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
    2a9c:	80 2d       	mov	r24, r0
		EEPROMAddress = EEPROMVars.FuseBytes;
	}
	else
	{
		TotalBytes    = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
    2a9e:	18 2f       	mov	r17, r24
    2aa0:	39 e2       	ldi	r19, 0x29	; 41
    2aa2:	e3 2e       	mov	r14, r19
    2aa4:	f1 2c       	mov	r15, r1
    2aa6:	e4 0e       	add	r14, r20
    2aa8:	f5 1e       	adc	r15, r21
    2aaa:	15 c0       	rjmp	.+42     	; 0x2ad6 <PM_SendFuseLockBytes+0x6a>
    2aac:	e7 01       	movw	r28, r14
    2aae:	00 e0       	ldi	r16, 0x00	; 0
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2ab0:	de 01       	movw	r26, r28
    2ab2:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
    2ab6:	80 2d       	mov	r24, r0
		EEPROMAddress = EEPROMVars.LockBytes;	
	}

	while (TotalBytes--)                              // Write each of the fuse/lock bytes stored in memory to the slave AVR
	{
		for (uint8_t CommandByte = 0; CommandByte < 4; CommandByte++)      // Write each individual command byte
		{
			USI_SPITransmit(eeprom_read_byte(EEPROMAddress));
    2ab8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
			EEPROMAddress++;
    2abc:	21 96       	adiw	r28, 0x01	; 1
    2abe:	0f 5f       	subi	r16, 0xFF	; 255
    2ac0:	04 30       	cpi	r16, 0x04	; 4
    2ac2:	b1 f7       	brne	.-20     	; 0x2ab0 <PM_SendFuseLockBytes+0x44>
    2ac4:	84 e0       	ldi	r24, 0x04	; 4
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	e8 0e       	add	r14, r24
    2aca:	f9 1e       	adc	r15, r25
		}
		
		// Add some delay before programming next byte, if there is one:
		if (TotalBytes)
    2acc:	11 23       	and	r17, r17
    2ace:	19 f0       	breq	.+6      	; 0x2ad6 <PM_SendFuseLockBytes+0x6a>
		  MAIN_Delay10MS(5);
    2ad0:	85 e0       	ldi	r24, 0x05	; 5
    2ad2:	0e 94 49 02 	call	0x492	; 0x492 <MAIN_Delay10MS>
    2ad6:	11 50       	subi	r17, 0x01	; 1
    2ad8:	48 f7       	brcc	.-46     	; 0x2aac <PM_SendFuseLockBytes+0x40>
    2ada:	df 91       	pop	r29
    2adc:	cf 91       	pop	r28
    2ade:	1f 91       	pop	r17
    2ae0:	0f 91       	pop	r16
    2ae2:	ff 90       	pop	r15
    2ae4:	ef 90       	pop	r14
    2ae6:	08 95       	ret

00002ae8 <PM_SendEraseCommand>:
	}
}

void PM_SendEraseCommand(void)
{			
    2ae8:	cf 93       	push	r28
    2aea:	df 93       	push	r29
    2aec:	c8 e1       	ldi	r28, 0x18	; 24
    2aee:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2af0:	de 01       	movw	r26, r28
    2af2:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
    2af6:	80 2d       	mov	r24, r0
	for (uint8_t B = 2; B < 6 ; B++)                  // Read out the erase chip command bytes
	  USI_SPITransmit(eeprom_read_byte(&EEPROMVars.EraseChip[B])); // Send the erase chip commands
    2af8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
    2afc:	21 96       	adiw	r28, 0x01	; 1
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	cc 31       	cpi	r28, 0x1C	; 28
    2b02:	d8 07       	cpc	r29, r24
    2b04:	a9 f7       	brne	.-22     	; 0x2af0 <PM_SendEraseCommand+0x8>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2b06:	25 97       	sbiw	r28, 0x05	; 5
    2b08:	de 01       	movw	r26, r28
    2b0a:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
    2b0e:	80 2d       	mov	r24, r0
    2b10:	25 96       	adiw	r28, 0x05	; 5
			
	if (eeprom_read_byte(&EEPROMVars.EraseChip[1]))   // Value of 1 indicates a busy flag test
    2b12:	88 23       	and	r24, r24
    2b14:	59 f0       	breq	.+22     	; 0x2b2c <PM_SendEraseCommand+0x44>
	{
		do
			USI_SPITransmitWord(0xF000);
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	90 ef       	ldi	r25, 0xF0	; 240
    2b1a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <USI_SPITransmitWord>
		while (USI_SPITransmitWord(0x0000) & 0x01);
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	0e 94 fd 09 	call	0x13fa	; 0x13fa <USI_SPITransmitWord>
    2b26:	80 ff       	sbrs	r24, 0
    2b28:	08 c0       	rjmp	.+16     	; 0x2b3a <PM_SendEraseCommand+0x52>
    2b2a:	f5 cf       	rjmp	.-22     	; 0x2b16 <PM_SendEraseCommand+0x2e>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2b2c:	26 97       	sbiw	r28, 0x06	; 6
    2b2e:	de 01       	movw	r26, r28
    2b30:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
    2b34:	80 2d       	mov	r24, r0
	}
	else                                              // Cleared flag means use a predefined delay
	{		
		MAIN_Delay1MS(eeprom_read_byte(&EEPROMVars.EraseChip[0])); // Wait the erase delay
    2b36:	0e 94 53 02 	call	0x4a6	; 0x4a6 <MAIN_Delay1MS>
    2b3a:	df 91       	pop	r29
    2b3c:	cf 91       	pop	r28
    2b3e:	08 95       	ret

00002b40 <PM_CreateProgrammingPackets>:
	}
}

void PM_CreateProgrammingPackets(const uint8_t Type)
{			
    2b40:	3f 92       	push	r3
    2b42:	4f 92       	push	r4
    2b44:	5f 92       	push	r5
    2b46:	6f 92       	push	r6
    2b48:	7f 92       	push	r7
    2b4a:	8f 92       	push	r8
    2b4c:	9f 92       	push	r9
    2b4e:	af 92       	push	r10
    2b50:	bf 92       	push	r11
    2b52:	cf 92       	push	r12
    2b54:	df 92       	push	r13
    2b56:	ef 92       	push	r14
    2b58:	ff 92       	push	r15
    2b5a:	0f 93       	push	r16
    2b5c:	1f 93       	push	r17
    2b5e:	cf 93       	push	r28
    2b60:	df 93       	push	r29
    2b62:	18 2f       	mov	r17, r24
	uint32_t BytesRead       = 0;
	uint32_t BytesToRead     = PM_GetStoredDataSize(Type);      // Get the byte size of the stored program
    2b64:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <PM_GetStoredDataSize>
    2b68:	2b 01       	movw	r4, r22
    2b6a:	3c 01       	movw	r6, r24
	uint16_t BytesPerProgram;
	uint16_t PageLength;
	uint8_t* EEPROMAddress;
	uint8_t  ContinuedPage   = FALSE;

	PageLength  = eeprom_read_word((Type == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength);
    2b6c:	11 30       	cpi	r17, 0x01	; 1
    2b6e:	09 f0       	breq	.+2      	; 0x2b72 <PM_CreateProgrammingPackets+0x32>
    2b70:	d7 c0       	rjmp	.+430    	; 0x2d20 <PM_CreateProgrammingPackets+0x1e0>
eeprom_read_word (const uint16_t *addr)
{
  uint16_t result;

  asm ( 
    2b72:	a2 e8       	ldi	r26, 0x82	; 130
    2b74:	b0 e0       	ldi	r27, 0x00	; 0
    2b76:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__eeprom_read_word_1F2021>
    2b7a:	4f 01       	movw	r8, r30
	CurrAddress = 0;
    2b7c:	10 92 62 02 	sts	0x0262, r1
    2b80:	10 92 63 02 	sts	0x0263, r1
    2b84:	10 92 64 02 	sts	0x0264, r1
    2b88:	10 92 65 02 	sts	0x0265, r1

	if (Type == TYPE_FLASH)
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram;       // Set the EEPROM pointer to the write flash command bytes location
		DF_ContinuousReadEnable(0, 0);
    2b8c:	60 e0       	ldi	r22, 0x00	; 0
    2b8e:	70 e0       	ldi	r23, 0x00	; 0
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 84 0a 	call	0x1508	; 0x1508 <DF_ContinuousReadEnable>
		PacketBytes[0] = AICB_CMD_PROGRAM_FLASH_ISP;
    2b98:	83 e1       	ldi	r24, 0x13	; 19
    2b9a:	80 93 4a 01 	sts	0x014A, r24
    2b9e:	23 e0       	ldi	r18, 0x03	; 3
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	eb e4       	ldi	r30, 0x4B	; 75
    2ba4:	f1 e0       	ldi	r31, 0x01	; 1
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2ba6:	d9 01       	movw	r26, r18
    2ba8:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
    2bac:	80 2d       	mov	r24, r0
	}
	else
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;        // Set the EEPROM pointer to the write EEPROM command bytes location
		DF_ContinuousReadEnable(PM_EEPROM_OFFSET / DF_INTERNALDF_BUFFBYTES, PM_EEPROM_OFFSET % DF_INTERNALDF_BUFFBYTES); // Start read from the EEPROM offset location
		PacketBytes[0] = AICB_CMD_PROGRAM_EEPROM_ISP;
	}

	for (uint8_t B = 1; B <= 9 ; B++)                 // Load in the write data command bytes
	{
		PacketBytes[B] = eeprom_read_byte(EEPROMAddress); // Synthesise a write packet header
    2bae:	81 93       	st	Z+, r24
		EEPROMAddress++;                               // Increment the EEPROM location counter
    2bb0:	2f 5f       	subi	r18, 0xFF	; 255
    2bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	e4 35       	cpi	r30, 0x54	; 84
    2bb8:	f8 07       	cpc	r31, r24
    2bba:	a9 f7       	brne	.-22     	; 0x2ba6 <PM_CreateProgrammingPackets+0x66>
	}
	
	BytesPerProgram = ((uint16_t)PacketBytes[1] << 8)
    2bbc:	80 91 4b 01 	lds	r24, 0x014B
    2bc0:	99 27       	eor	r25, r25
    2bc2:	d8 2f       	mov	r29, r24
    2bc4:	cc 27       	eor	r28, r28
    2bc6:	80 91 4c 01 	lds	r24, 0x014C
    2bca:	99 27       	eor	r25, r25
    2bcc:	c8 2b       	or	r28, r24
    2bce:	d9 2b       	or	r29, r25
    2bd0:	aa 24       	eor	r10, r10
    2bd2:	bb 24       	eor	r11, r11
    2bd4:	65 01       	movw	r12, r10
    2bd6:	33 24       	eor	r3, r3
    2bd8:	9c c0       	rjmp	.+312    	; 0x2d12 <PM_CreateProgrammingPackets+0x1d2>
	                | PacketBytes[2];

	while (BytesRead < BytesToRead)
	{
		if (PacketBytes[3] & ISPCC_PROG_MODE_PAGE)
    2bda:	80 91 4d 01 	lds	r24, 0x014D
    2bde:	80 ff       	sbrs	r24, 0
    2be0:	4b c0       	rjmp	.+150    	; 0x2c78 <PM_CreateProgrammingPackets+0x138>
		{
			if (PageLength > 160) // Max 160 bytes at a time
    2be2:	91 ea       	ldi	r25, 0xA1	; 161
    2be4:	89 16       	cp	r8, r25
    2be6:	91 04       	cpc	r9, r1
    2be8:	18 f4       	brcc	.+6      	; 0x2bf0 <PM_CreateProgrammingPackets+0xb0>
    2bea:	0a e4       	ldi	r16, 0x4A	; 74
    2bec:	11 e0       	ldi	r17, 0x01	; 1
    2bee:	2f c0       	rjmp	.+94     	; 0x2c4e <PM_CreateProgrammingPackets+0x10e>
			{
				if (!(ContinuedPage))                      // Start of a new page, program in the first 150 bytes
    2bf0:	33 20       	and	r3, r3
    2bf2:	41 f4       	brne	.+16     	; 0x2c04 <PM_CreateProgrammingPackets+0xc4>
				{
					BytesPerProgram = 160;
					PacketBytes[3] &= ~ISPCC_PROG_MODE_PAGEDONE;		
    2bf4:	8f 77       	andi	r24, 0x7F	; 127
    2bf6:	80 93 4d 01 	sts	0x014D, r24
    2bfa:	c0 ea       	ldi	r28, 0xA0	; 160
    2bfc:	d0 e0       	ldi	r29, 0x00	; 0
    2bfe:	11 e0       	ldi	r17, 0x01	; 1
    2c00:	31 2e       	mov	r3, r17
    2c02:	07 c0       	rjmp	.+14     	; 0x2c12 <PM_CreateProgrammingPackets+0xd2>
					ContinuedPage = TRUE;
				}
				else                                       // Middle of a page, program in the remainder
				{
					BytesPerProgram = PageLength - 160;
    2c04:	e4 01       	movw	r28, r8
    2c06:	c0 5a       	subi	r28, 0xA0	; 160
    2c08:	d0 40       	sbci	r29, 0x00	; 0
					PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
    2c0a:	80 68       	ori	r24, 0x80	; 128
    2c0c:	80 93 4d 01 	sts	0x014D, r24
    2c10:	33 24       	eor	r3, r3
    2c12:	0a e4       	ldi	r16, 0x4A	; 74
    2c14:	11 e0       	ldi	r17, 0x01	; 1
    2c16:	07 c0       	rjmp	.+14     	; 0x2c26 <PM_CreateProgrammingPackets+0xe6>
					ContinuedPage = FALSE;
				}
				
				for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page				
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	0e 94 ab 09 	call	0x1356	; 0x1356 <SPI_SPITransmit>
    2c1e:	f8 01       	movw	r30, r16
    2c20:	82 87       	std	Z+10, r24	; 0x0a
    2c22:	0f 5f       	subi	r16, 0xFF	; 255
    2c24:	1f 4f       	sbci	r17, 0xFF	; 255
    2c26:	ce 01       	movw	r24, r28
    2c28:	86 5b       	subi	r24, 0xB6	; 182
    2c2a:	9e 4f       	sbci	r25, 0xFE	; 254
    2c2c:	08 17       	cp	r16, r24
    2c2e:	19 07       	cpc	r17, r25
    2c30:	99 f7       	brne	.-26     	; 0x2c18 <PM_CreateProgrammingPackets+0xd8>

				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);
    2c32:	8d 2f       	mov	r24, r29
    2c34:	99 27       	eor	r25, r25
    2c36:	80 93 4b 01 	sts	0x014B, r24
				PacketBytes[2] = (uint8_t)(BytesPerProgram);
    2c3a:	c0 93 4c 01 	sts	0x014C, r28
    2c3e:	41 c0       	rjmp	.+130    	; 0x2cc2 <PM_CreateProgrammingPackets+0x182>

				BytesRead += BytesPerProgram;                         // Increment the counter
			}
			else
			{
				for (uint16_t LoadB = 0; LoadB < PageLength; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	0e 94 ab 09 	call	0x1356	; 0x1356 <SPI_SPITransmit>
    2c46:	f8 01       	movw	r30, r16
    2c48:	82 87       	std	Z+10, r24	; 0x0a
    2c4a:	0f 5f       	subi	r16, 0xFF	; 255
    2c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4e:	c4 01       	movw	r24, r8
    2c50:	86 5b       	subi	r24, 0xB6	; 182
    2c52:	9e 4f       	sbci	r25, 0xFE	; 254
    2c54:	08 17       	cp	r16, r24
    2c56:	19 07       	cpc	r17, r25
    2c58:	99 f7       	brne	.-26     	; 0x2c40 <PM_CreateProgrammingPackets+0x100>
			
				PacketBytes[1]  = (uint8_t)(PageLength >> 8);
    2c5a:	89 2d       	mov	r24, r9
    2c5c:	99 27       	eor	r25, r25
    2c5e:	80 93 4b 01 	sts	0x014B, r24
				PacketBytes[2]  = (uint8_t)(PageLength);
    2c62:	80 92 4c 01 	sts	0x014C, r8
				PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
    2c66:	80 91 4d 01 	lds	r24, 0x014D
    2c6a:	80 68       	ori	r24, 0x80	; 128
    2c6c:	80 93 4d 01 	sts	0x014D, r24

				BytesRead += PageLength;                            // Increment the counter
    2c70:	c4 01       	movw	r24, r8
    2c72:	aa 27       	eor	r26, r26
    2c74:	bb 27       	eor	r27, r27
    2c76:	28 c0       	rjmp	.+80     	; 0x2cc8 <PM_CreateProgrammingPackets+0x188>
			}
		}
		else
		{
			if ((BytesRead + BytesPerProgram) > BytesToRead)        // Less than a whole BytesPerProgram left of data to write
    2c78:	ce 01       	movw	r24, r28
    2c7a:	aa 27       	eor	r26, r26
    2c7c:	bb 27       	eor	r27, r27
    2c7e:	8a 0d       	add	r24, r10
    2c80:	9b 1d       	adc	r25, r11
    2c82:	ac 1d       	adc	r26, r12
    2c84:	bd 1d       	adc	r27, r13
    2c86:	48 16       	cp	r4, r24
    2c88:	59 06       	cpc	r5, r25
    2c8a:	6a 06       	cpc	r6, r26
    2c8c:	7b 06       	cpc	r7, r27
    2c8e:	48 f4       	brcc	.+18     	; 0x2ca2 <PM_CreateProgrammingPackets+0x162>
			{
				BytesPerProgram = BytesToRead - BytesRead;          // Next lot of bytes will be the remaining data length
    2c90:	e2 01       	movw	r28, r4
    2c92:	ca 19       	sub	r28, r10
    2c94:	db 09       	sbc	r29, r11
				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);   // \. Save the new length
    2c96:	8d 2f       	mov	r24, r29
    2c98:	99 27       	eor	r25, r25
    2c9a:	80 93 4b 01 	sts	0x014B, r24
				PacketBytes[2] = (uint8_t)(BytesPerProgram);        // /  into the data packet
    2c9e:	c0 93 4c 01 	sts	0x014C, r28
    2ca2:	0a e4       	ldi	r16, 0x4A	; 74
    2ca4:	11 e0       	ldi	r17, 0x01	; 1
    2ca6:	07 c0       	rjmp	.+14     	; 0x2cb6 <PM_CreateProgrammingPackets+0x176>
			}

			for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
				PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);    // Load in the page
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	0e 94 ab 09 	call	0x1356	; 0x1356 <SPI_SPITransmit>
    2cae:	f8 01       	movw	r30, r16
    2cb0:	82 87       	std	Z+10, r24	; 0x0a
    2cb2:	0f 5f       	subi	r16, 0xFF	; 255
    2cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	86 5b       	subi	r24, 0xB6	; 182
    2cba:	9e 4f       	sbci	r25, 0xFE	; 254
    2cbc:	08 17       	cp	r16, r24
    2cbe:	19 07       	cpc	r17, r25
    2cc0:	99 f7       	brne	.-26     	; 0x2ca8 <PM_CreateProgrammingPackets+0x168>
			
			BytesRead += BytesPerProgram;                           // Increment the counter
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	aa 27       	eor	r26, r26
    2cc6:	bb 27       	eor	r27, r27
    2cc8:	a8 0e       	add	r10, r24
    2cca:	b9 1e       	adc	r11, r25
    2ccc:	ca 1e       	adc	r12, r26
    2cce:	db 1e       	adc	r13, r27
		}
	
		if (!(BytesRead & 0xFFFF) && (BytesRead & 0x00FF0000))      // Extended address required
    2cd0:	a1 14       	cp	r10, r1
    2cd2:	b1 04       	cpc	r11, r1
    2cd4:	e1 f4       	brne	.+56     	; 0x2d0e <PM_CreateProgrammingPackets+0x1ce>
    2cd6:	e1 2c       	mov	r14, r1
    2cd8:	f1 2c       	mov	r15, r1
    2cda:	ef ef       	ldi	r30, 0xFF	; 255
    2cdc:	0e 2f       	mov	r16, r30
    2cde:	11 2d       	mov	r17, r1
    2ce0:	ea 20       	and	r14, r10
    2ce2:	fb 20       	and	r15, r11
    2ce4:	0c 21       	and	r16, r12
    2ce6:	1d 21       	and	r17, r13
    2ce8:	e1 14       	cp	r14, r1
    2cea:	f1 04       	cpc	r15, r1
    2cec:	01 05       	cpc	r16, r1
    2cee:	11 05       	cpc	r17, r1
    2cf0:	71 f0       	breq	.+28     	; 0x2d0e <PM_CreateProgrammingPackets+0x1ce>
		{
			USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);            // Load extended address command
    2cf2:	8d e4       	ldi	r24, 0x4D	; 77
    2cf4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
			USI_SPITransmit(0x00);
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
			USI_SPITransmit((BytesRead & 0x00FF0000) >> 16);        // The 3rd byte of the long holds the extended address
    2cfe:	c8 01       	movw	r24, r16
    2d00:	aa 27       	eor	r26, r26
    2d02:	bb 27       	eor	r27, r27
    2d04:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
			USI_SPITransmit(0x00);
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <USI_SPITransmit>
		}

		ISPCC_ProgramChip();                                        // Start the program cycle
    2d0e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <ISPCC_ProgramChip>
    2d12:	a4 14       	cp	r10, r4
    2d14:	b5 04       	cpc	r11, r5
    2d16:	c6 04       	cpc	r12, r6
    2d18:	d7 04       	cpc	r13, r7
    2d1a:	08 f4       	brcc	.+2      	; 0x2d1e <PM_CreateProgrammingPackets+0x1de>
    2d1c:	5e cf       	rjmp	.-324    	; 0x2bda <PM_CreateProgrammingPackets+0x9a>
    2d1e:	19 c0       	rjmp	.+50     	; 0x2d52 <PM_CreateProgrammingPackets+0x212>
eeprom_read_word (const uint16_t *addr)
{
  uint16_t result;

  asm ( 
    2d20:	a4 e8       	ldi	r26, 0x84	; 132
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__eeprom_read_word_1F2021>
    2d28:	4f 01       	movw	r8, r30
    2d2a:	10 92 62 02 	sts	0x0262, r1
    2d2e:	10 92 63 02 	sts	0x0263, r1
    2d32:	10 92 64 02 	sts	0x0264, r1
    2d36:	10 92 65 02 	sts	0x0265, r1
    2d3a:	60 ee       	ldi	r22, 0xE0	; 224
    2d3c:	70 e0       	ldi	r23, 0x00	; 0
    2d3e:	84 ee       	ldi	r24, 0xE4	; 228
    2d40:	93 e0       	ldi	r25, 0x03	; 3
    2d42:	0e 94 84 0a 	call	0x1508	; 0x1508 <DF_ContinuousReadEnable>
    2d46:	85 e1       	ldi	r24, 0x15	; 21
    2d48:	80 93 4a 01 	sts	0x014A, r24
    2d4c:	2c e0       	ldi	r18, 0x0C	; 12
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	28 cf       	rjmp	.-432    	; 0x2ba2 <PM_CreateProgrammingPackets+0x62>
    2d52:	df 91       	pop	r29
    2d54:	cf 91       	pop	r28
    2d56:	1f 91       	pop	r17
    2d58:	0f 91       	pop	r16
    2d5a:	ff 90       	pop	r15
    2d5c:	ef 90       	pop	r14
    2d5e:	df 90       	pop	r13
    2d60:	cf 90       	pop	r12
    2d62:	bf 90       	pop	r11
    2d64:	af 90       	pop	r10
    2d66:	9f 90       	pop	r9
    2d68:	8f 90       	pop	r8
    2d6a:	7f 90       	pop	r7
    2d6c:	6f 90       	pop	r6
    2d6e:	5f 90       	pop	r5
    2d70:	4f 90       	pop	r4
    2d72:	3f 90       	pop	r3
    2d74:	08 95       	ret

00002d76 <PM_ShowStoredItemSizes>:
	}
}

void PM_ShowStoredItemSizes(void)
{
    2d76:	1f 93       	push	r17
    2d78:	cf 93       	push	r28
    2d7a:	df 93       	push	r29
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	2e 97       	sbiw	r28, 0x0e	; 14
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[14];
	uint8_t ItemInfoIndex = 0;
	uint8_t TempB;
	
	JoyStatus = 1;
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	8e bb       	out	0x1e, r24	; 30
    2d90:	10 e0       	ldi	r17, 0x00	; 0
	
	while (1)
	{
		if (JoyStatus)                           // Joystick is in the non-center position
    2d92:	8e b3       	in	r24, 0x1e	; 30
    2d94:	88 23       	and	r24, r24
    2d96:	e9 f3       	breq	.-6      	; 0x2d92 <PM_ShowStoredItemSizes+0x1c>
		{
			if (JoyStatus & JOY_UP)              // Previous item
    2d98:	f6 9b       	sbis	0x1e, 6	; 30
    2d9a:	04 c0       	rjmp	.+8      	; 0x2da4 <PM_ShowStoredItemSizes+0x2e>
				(ItemInfoIndex == 0)? ItemInfoIndex = 3 : ItemInfoIndex--;
    2d9c:	11 23       	and	r17, r17
    2d9e:	b9 f1       	breq	.+110    	; 0x2e0e <PM_ShowStoredItemSizes+0x98>
    2da0:	11 50       	subi	r17, 0x01	; 1
    2da2:	0a c0       	rjmp	.+20     	; 0x2db8 <PM_ShowStoredItemSizes+0x42>
			else if (JoyStatus & JOY_DOWN)      // Next item
    2da4:	f7 9b       	sbis	0x1e, 7	; 30
    2da6:	06 c0       	rjmp	.+12     	; 0x2db4 <PM_ShowStoredItemSizes+0x3e>
				(ItemInfoIndex == 3)? ItemInfoIndex = 0 : ItemInfoIndex++;
    2da8:	13 30       	cpi	r17, 0x03	; 3
    2daa:	11 f4       	brne	.+4      	; 0x2db0 <PM_ShowStoredItemSizes+0x3a>
    2dac:	10 e0       	ldi	r17, 0x00	; 0
    2dae:	0d c0       	rjmp	.+26     	; 0x2dca <PM_ShowStoredItemSizes+0x54>
    2db0:	1f 5f       	subi	r17, 0xFF	; 255
    2db2:	02 c0       	rjmp	.+4      	; 0x2db8 <PM_ShowStoredItemSizes+0x42>
			else if (JoyStatus & JOY_LEFT)
    2db4:	f2 99       	sbic	0x1e, 2	; 30
    2db6:	49 c0       	rjmp	.+146    	; 0x2e4a <PM_ShowStoredItemSizes+0xd4>
				return;
		
			switch (ItemInfoIndex)
    2db8:	11 30       	cpi	r17, 0x01	; 1
    2dba:	79 f0       	breq	.+30     	; 0x2dda <PM_ShowStoredItemSizes+0x64>
    2dbc:	11 30       	cpi	r17, 0x01	; 1
    2dbe:	28 f0       	brcs	.+10     	; 0x2dca <PM_ShowStoredItemSizes+0x54>
    2dc0:	12 30       	cpi	r17, 0x02	; 2
    2dc2:	e1 f0       	breq	.+56     	; 0x2dfc <PM_ShowStoredItemSizes+0x86>
    2dc4:	13 30       	cpi	r17, 0x03	; 3
    2dc6:	d1 f5       	brne	.+116    	; 0x2e3c <PM_ShowStoredItemSizes+0xc6>
    2dc8:	23 c0       	rjmp	.+70     	; 0x2e10 <PM_ShowStoredItemSizes+0x9a>
			{
				case 0:
					strcpy_P(Buffer, PSTR("DATA-"));
    2dca:	65 e4       	ldi	r22, 0x45	; 69
    2dcc:	74 e0       	ldi	r23, 0x04	; 4
    2dce:	ce 01       	movw	r24, r28
    2dd0:	01 96       	adiw	r24, 0x01	; 1
    2dd2:	0e 94 2e 1a 	call	0x345c	; 0x345c <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_FLASH), &Buffer[5], 10);
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	07 c0       	rjmp	.+14     	; 0x2de8 <PM_ShowStoredItemSizes+0x72>
					break;
				case 1:
					strcpy_P(Buffer, PSTR("EPRM-"));
    2dda:	6f e3       	ldi	r22, 0x3F	; 63
    2ddc:	74 e0       	ldi	r23, 0x04	; 4
    2dde:	ce 01       	movw	r24, r28
    2de0:	01 96       	adiw	r24, 0x01	; 1
    2de2:	0e 94 2e 1a 	call	0x345c	; 0x345c <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_EEPROM), &Buffer[5], 10);
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <PM_GetStoredDataSize>
    2dec:	2a e0       	ldi	r18, 0x0A	; 10
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	ae 01       	movw	r20, r28
    2df2:	4a 5f       	subi	r20, 0xFA	; 250
    2df4:	5f 4f       	sbci	r21, 0xFF	; 255
    2df6:	0e 94 35 1a 	call	0x346a	; 0x346a <ultoa>
    2dfa:	20 c0       	rjmp	.+64     	; 0x2e3c <PM_ShowStoredItemSizes+0xc6>
					break;
				case 2:
					strcpy_P(Buffer, PSTR("FUSE-"));
    2dfc:	69 e3       	ldi	r22, 0x39	; 57
    2dfe:	74 e0       	ldi	r23, 0x04	; 4
    2e00:	ce 01       	movw	r24, r28
    2e02:	01 96       	adiw	r24, 0x01	; 1
    2e04:	0e 94 2e 1a 	call	0x345c	; 0x345c <strcpy_P>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2e08:	a0 e3       	ldi	r26, 0x30	; 48
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	09 c0       	rjmp	.+18     	; 0x2e20 <PM_ShowStoredItemSizes+0xaa>
					TempB = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);
					break;
    2e0e:	13 e0       	ldi	r17, 0x03	; 3
				case 3:
					strcpy_P(Buffer, PSTR("LOCK-"));
    2e10:	63 e3       	ldi	r22, 0x33	; 51
    2e12:	74 e0       	ldi	r23, 0x04	; 4
    2e14:	ce 01       	movw	r24, r28
    2e16:	01 96       	adiw	r24, 0x01	; 1
    2e18:	0e 94 2e 1a 	call	0x345c	; 0x345c <strcpy_P>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2e1c:	a1 e3       	ldi	r26, 0x31	; 49
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
    2e24:	80 2d       	mov	r24, r0
					TempB = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);		
    2e26:	8f 3f       	cpi	r24, 0xFF	; 255
    2e28:	19 f4       	brne	.+6      	; 0x2e30 <PM_ShowStoredItemSizes+0xba>
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	01 c0       	rjmp	.+2      	; 0x2e32 <PM_ShowStoredItemSizes+0xbc>
    2e30:	99 27       	eor	r25, r25
    2e32:	be 01       	movw	r22, r28
    2e34:	6a 5f       	subi	r22, 0xFA	; 250
    2e36:	7f 4f       	sbci	r23, 0xFF	; 255
    2e38:	0e 94 8e 02 	call	0x51c	; 0x51c <MAIN_IntToStr>
			}
	
			LCD_puts(Buffer);
    2e3c:	ce 01       	movw	r24, r28
    2e3e:	01 96       	adiw	r24, 0x01	; 1
    2e40:	0e 94 6e 08 	call	0x10dc	; 0x10dc <LCD_puts>

			MAIN_WaitForJoyRelease();
    2e44:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
    2e48:	a4 cf       	rjmp	.-184    	; 0x2d92 <PM_ShowStoredItemSizes+0x1c>
    2e4a:	2e 96       	adiw	r28, 0x0e	; 14
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	1f 91       	pop	r17
    2e5c:	08 95       	ret

00002e5e <PM_InterpretAVRISPPacket>:
    2e5e:	ef 92       	push	r14
    2e60:	ff 92       	push	r15
    2e62:	0f 93       	push	r16
    2e64:	1f 93       	push	r17
    2e66:	cf 93       	push	r28
    2e68:	df 93       	push	r29
    2e6a:	20 91 4a 01 	lds	r18, 0x014A
    2e6e:	26 31       	cpi	r18, 0x16	; 22
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <PM_InterpretAVRISPPacket+0x16>
    2e72:	ad c1       	rjmp	.+858    	; 0x31ce <PM_InterpretAVRISPPacket+0x370>
    2e74:	27 31       	cpi	r18, 0x17	; 23
    2e76:	78 f4       	brcc	.+30     	; 0x2e96 <PM_InterpretAVRISPPacket+0x38>
    2e78:	22 31       	cpi	r18, 0x12	; 18
    2e7a:	09 f4       	brne	.+2      	; 0x2e7e <PM_InterpretAVRISPPacket+0x20>
    2e7c:	5f c0       	rjmp	.+190    	; 0x2f3c <PM_InterpretAVRISPPacket+0xde>
    2e7e:	23 31       	cpi	r18, 0x13	; 19
    2e80:	30 f4       	brcc	.+12     	; 0x2e8e <PM_InterpretAVRISPPacket+0x30>
    2e82:	20 31       	cpi	r18, 0x10	; 16
    2e84:	e9 f0       	breq	.+58     	; 0x2ec0 <PM_InterpretAVRISPPacket+0x62>
    2e86:	21 31       	cpi	r18, 0x11	; 17
    2e88:	09 f0       	breq	.+2      	; 0x2e8c <PM_InterpretAVRISPPacket+0x2e>
    2e8a:	07 c2       	rjmp	.+1038   	; 0x329a <PM_InterpretAVRISPPacket+0x43c>
    2e8c:	37 c0       	rjmp	.+110    	; 0x2efc <PM_InterpretAVRISPPacket+0x9e>
    2e8e:	24 31       	cpi	r18, 0x14	; 20
    2e90:	09 f0       	breq	.+2      	; 0x2e94 <PM_InterpretAVRISPPacket+0x36>
    2e92:	35 c1       	rjmp	.+618    	; 0x30fe <PM_InterpretAVRISPPacket+0x2a0>
    2e94:	9c c1       	rjmp	.+824    	; 0x31ce <PM_InterpretAVRISPPacket+0x370>
    2e96:	29 31       	cpi	r18, 0x19	; 25
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <PM_InterpretAVRISPPacket+0x3e>
    2e9a:	de c0       	rjmp	.+444    	; 0x3058 <PM_InterpretAVRISPPacket+0x1fa>
    2e9c:	2a 31       	cpi	r18, 0x1A	; 26
    2e9e:	38 f4       	brcc	.+14     	; 0x2eae <PM_InterpretAVRISPPacket+0x50>
    2ea0:	27 31       	cpi	r18, 0x17	; 23
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <PM_InterpretAVRISPPacket+0x48>
    2ea4:	d9 c0       	rjmp	.+434    	; 0x3058 <PM_InterpretAVRISPPacket+0x1fa>
    2ea6:	28 31       	cpi	r18, 0x18	; 24
    2ea8:	09 f0       	breq	.+2      	; 0x2eac <PM_InterpretAVRISPPacket+0x4e>
    2eaa:	f7 c1       	rjmp	.+1006   	; 0x329a <PM_InterpretAVRISPPacket+0x43c>
    2eac:	83 c0       	rjmp	.+262    	; 0x2fb4 <PM_InterpretAVRISPPacket+0x156>
    2eae:	2b 31       	cpi	r18, 0x1B	; 27
    2eb0:	c9 f1       	breq	.+114    	; 0x2f24 <PM_InterpretAVRISPPacket+0xc6>
    2eb2:	2b 31       	cpi	r18, 0x1B	; 27
    2eb4:	08 f4       	brcc	.+2      	; 0x2eb8 <PM_InterpretAVRISPPacket+0x5a>
    2eb6:	7e c0       	rjmp	.+252    	; 0x2fb4 <PM_InterpretAVRISPPacket+0x156>
    2eb8:	2c 31       	cpi	r18, 0x1C	; 28
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <PM_InterpretAVRISPPacket+0x60>
    2ebc:	ee c1       	rjmp	.+988    	; 0x329a <PM_InterpretAVRISPPacket+0x43c>
    2ebe:	6d c0       	rjmp	.+218    	; 0x2f9a <PM_InterpretAVRISPPacket+0x13c>
    2ec0:	82 e0       	ldi	r24, 0x02	; 2
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	90 93 60 02 	sts	0x0260, r25
    2ec8:	80 93 5f 02 	sts	0x025F, r24
    2ecc:	ea e4       	ldi	r30, 0x4A	; 74
    2ece:	f1 e0       	ldi	r31, 0x01	; 1
    2ed0:	24 e2       	ldi	r18, 0x24	; 36
    2ed2:	30 e0       	ldi	r19, 0x00	; 0

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    2ed4:	81 91       	ld	r24, Z+
    2ed6:	d9 01       	movw	r26, r18
    2ed8:	08 2e       	mov	r0, r24
    2eda:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
    2ede:	2f 5f       	subi	r18, 0xFF	; 255
    2ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	e6 35       	cpi	r30, 0x56	; 86
    2ee6:	f8 07       	cpc	r31, r24
    2ee8:	a9 f7       	brne	.-22     	; 0x2ed4 <PM_InterpretAVRISPPacket+0x76>
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	80 93 61 02 	sts	0x0261, r24
    2ef0:	10 92 68 02 	sts	0x0268, r1
    2ef4:	81 b3       	in	r24, 0x11	; 17
    2ef6:	8f 7c       	andi	r24, 0xCF	; 207
    2ef8:	80 62       	ori	r24, 0x20	; 32
    2efa:	10 c0       	rjmp	.+32     	; 0x2f1c <PM_InterpretAVRISPPacket+0xbe>
    2efc:	82 e0       	ldi	r24, 0x02	; 2
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	90 93 60 02 	sts	0x0260, r25
    2f04:	80 93 5f 02 	sts	0x025F, r24
    2f08:	0e 94 68 14 	call	0x28d0	; 0x28d0 <PM_CheckEndOfFuseLockData>
    2f0c:	10 92 61 02 	sts	0x0261, r1
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    2f16:	81 b3       	in	r24, 0x11	; 17
    2f18:	8f 7c       	andi	r24, 0xCF	; 207
    2f1a:	80 61       	ori	r24, 0x10	; 16
    2f1c:	81 bb       	out	0x11, r24	; 17
    2f1e:	10 92 4b 01 	sts	0x014B, r1
    2f22:	c4 c1       	rjmp	.+904    	; 0x32ac <PM_InterpretAVRISPPacket+0x44e>
    2f24:	84 e0       	ldi	r24, 0x04	; 4
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	90 93 60 02 	sts	0x0260, r25
    2f2c:	80 93 5f 02 	sts	0x025F, r24
    2f30:	10 92 4b 01 	sts	0x014B, r1
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	80 93 4c 01 	sts	0x014C, r24
    2f3a:	39 c0       	rjmp	.+114    	; 0x2fae <PM_InterpretAVRISPPacket+0x150>
    2f3c:	82 e0       	ldi	r24, 0x02	; 2
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	90 93 60 02 	sts	0x0260, r25
    2f44:	80 93 5f 02 	sts	0x025F, r24
    2f48:	eb e4       	ldi	r30, 0x4B	; 75
    2f4a:	f1 e0       	ldi	r31, 0x01	; 1
    2f4c:	27 e1       	ldi	r18, 0x17	; 23
    2f4e:	30 e0       	ldi	r19, 0x00	; 0

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    2f50:	81 91       	ld	r24, Z+
    2f52:	d9 01       	movw	r26, r18
    2f54:	08 2e       	mov	r0, r24
    2f56:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
    2f5a:	2f 5f       	subi	r18, 0xFF	; 255
    2f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5e:	91 e0       	ldi	r25, 0x01	; 1
    2f60:	e1 35       	cpi	r30, 0x51	; 81
    2f62:	f9 07       	cpc	r31, r25
    2f64:	a9 f7       	brne	.-22     	; 0x2f50 <PM_InterpretAVRISPPacket+0xf2>
    2f66:	2c e1       	ldi	r18, 0x1C	; 28
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	80 e0       	ldi	r24, 0x00	; 0

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    2f6c:	d9 01       	movw	r26, r18
    2f6e:	08 2e       	mov	r0, r24
    2f70:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
    2f74:	d9 01       	movw	r26, r18
    2f76:	14 96       	adiw	r26, 0x04	; 4
    2f78:	08 2e       	mov	r0, r24
    2f7a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
    2f7e:	2f 5f       	subi	r18, 0xFF	; 255
    2f80:	3f 4f       	sbci	r19, 0xFF	; 255
    2f82:	e0 e0       	ldi	r30, 0x00	; 0
    2f84:	24 32       	cpi	r18, 0x24	; 36
    2f86:	3e 07       	cpc	r19, r30
    2f88:	89 f7       	brne	.-30     	; 0x2f6c <PM_InterpretAVRISPPacket+0x10e>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	2f 50       	subi	r18, 0x0F	; 15
    2f8e:	30 40       	sbci	r19, 0x00	; 0
    2f90:	d9 01       	movw	r26, r18
    2f92:	08 2e       	mov	r0, r24
    2f94:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
    2f98:	c2 cf       	rjmp	.-124    	; 0x2f1e <PM_InterpretAVRISPPacket+0xc0>
    2f9a:	84 e0       	ldi	r24, 0x04	; 4
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	90 93 60 02 	sts	0x0260, r25
    2fa2:	80 93 5f 02 	sts	0x025F, r24
    2fa6:	10 92 4b 01 	sts	0x014B, r1
    2faa:	10 92 4c 01 	sts	0x014C, r1
    2fae:	10 92 4d 01 	sts	0x014D, r1
    2fb2:	7c c1       	rjmp	.+760    	; 0x32ac <PM_InterpretAVRISPPacket+0x44e>
    2fb4:	84 e0       	ldi	r24, 0x04	; 4
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	90 93 60 02 	sts	0x0260, r25
    2fbc:	80 93 5f 02 	sts	0x025F, r24
    2fc0:	80 91 68 02 	lds	r24, 0x0268
    2fc4:	84 30       	cpi	r24, 0x04	; 4
    2fc6:	49 f0       	breq	.+18     	; 0x2fda <PM_InterpretAVRISPPacket+0x17c>
    2fc8:	0e 94 68 14 	call	0x28d0	; 0x28d0 <PM_CheckEndOfFuseLockData>
    2fcc:	10 92 42 01 	sts	0x0142, r1
    2fd0:	10 92 41 01 	sts	0x0141, r1
    2fd4:	84 e0       	ldi	r24, 0x04	; 4
    2fd6:	80 93 68 02 	sts	0x0268, r24
    2fda:	40 91 41 01 	lds	r20, 0x0141
    2fde:	50 91 42 01 	lds	r21, 0x0142
    2fe2:	20 91 4a 01 	lds	r18, 0x014A
    2fe6:	28 31       	cpi	r18, 0x18	; 24
    2fe8:	19 f0       	breq	.+6      	; 0x2ff0 <PM_InterpretAVRISPPacket+0x192>
    2fea:	a1 e3       	ldi	r26, 0x31	; 49
    2fec:	b0 e0       	ldi	r27, 0x00	; 0
    2fee:	02 c0       	rjmp	.+4      	; 0x2ff4 <PM_InterpretAVRISPPacket+0x196>
    2ff0:	a0 e3       	ldi	r26, 0x30	; 48
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2ff4:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
    2ff8:	80 2d       	mov	r24, r0
    2ffa:	99 27       	eor	r25, r25
    2ffc:	84 17       	cp	r24, r20
    2ffe:	95 07       	cpc	r25, r21
    3000:	10 f4       	brcc	.+4      	; 0x3006 <PM_InterpretAVRISPPacket+0x1a8>
    3002:	8f ef       	ldi	r24, 0xFF	; 255
    3004:	1e c0       	rjmp	.+60     	; 0x3042 <PM_InterpretAVRISPPacket+0x1e4>
    3006:	28 31       	cpi	r18, 0x18	; 24
    3008:	19 f4       	brne	.+6      	; 0x3010 <PM_InterpretAVRISPPacket+0x1b2>
    300a:	22 e3       	ldi	r18, 0x32	; 50
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	02 c0       	rjmp	.+4      	; 0x3014 <PM_InterpretAVRISPPacket+0x1b6>
    3010:	2a e5       	ldi	r18, 0x5A	; 90
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	80 ea       	ldi	r24, 0xA0	; 160
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	48 9f       	mul	r20, r24
    301a:	d0 01       	movw	r26, r0
    301c:	49 9f       	mul	r20, r25
    301e:	b0 0d       	add	r27, r0
    3020:	58 9f       	mul	r21, r24
    3022:	b0 0d       	add	r27, r0
    3024:	11 24       	eor	r1, r1
    3026:	a2 0f       	add	r26, r18
    3028:	b3 1f       	adc	r27, r19
    302a:	80 91 4b 01 	lds	r24, 0x014B
    302e:	28 e2       	ldi	r18, 0x28	; 40
    3030:	82 9f       	mul	r24, r18
    3032:	c0 01       	movw	r24, r0
    3034:	11 24       	eor	r1, r1
    3036:	a8 0f       	add	r26, r24
    3038:	b9 1f       	adc	r27, r25
    303a:	98 97       	sbiw	r26, 0x28	; 40
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    303c:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <__eeprom_read_byte_1F2021>
    3040:	80 2d       	mov	r24, r0
    3042:	80 93 4c 01 	sts	0x014C, r24
    3046:	4f 5f       	subi	r20, 0xFF	; 255
    3048:	5f 4f       	sbci	r21, 0xFF	; 255
    304a:	50 93 42 01 	sts	0x0142, r21
    304e:	40 93 41 01 	sts	0x0141, r20
    3052:	10 92 4b 01 	sts	0x014B, r1
    3056:	ab cf       	rjmp	.-170    	; 0x2fae <PM_InterpretAVRISPPacket+0x150>
    3058:	83 e0       	ldi	r24, 0x03	; 3
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	90 93 60 02 	sts	0x0260, r25
    3060:	80 93 5f 02 	sts	0x025F, r24
    3064:	80 91 68 02 	lds	r24, 0x0268
    3068:	83 30       	cpi	r24, 0x03	; 3
    306a:	39 f0       	breq	.+14     	; 0x307a <PM_InterpretAVRISPPacket+0x21c>
    306c:	83 e0       	ldi	r24, 0x03	; 3
    306e:	80 93 68 02 	sts	0x0268, r24
    3072:	10 92 42 01 	sts	0x0142, r1
    3076:	10 92 41 01 	sts	0x0141, r1
    307a:	40 91 41 01 	lds	r20, 0x0141
    307e:	50 91 42 01 	lds	r21, 0x0142
    3082:	27 31       	cpi	r18, 0x17	; 23
    3084:	69 f4       	brne	.+26     	; 0x30a0 <PM_InterpretAVRISPPacket+0x242>
    3086:	80 ea       	ldi	r24, 0xA0	; 160
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	48 9f       	mul	r20, r24
    308c:	90 01       	movw	r18, r0
    308e:	49 9f       	mul	r20, r25
    3090:	30 0d       	add	r19, r0
    3092:	58 9f       	mul	r21, r24
    3094:	30 0d       	add	r19, r0
    3096:	11 24       	eor	r1, r1
    3098:	2e 5c       	subi	r18, 0xCE	; 206
    309a:	3f 4f       	sbci	r19, 0xFF	; 255
    309c:	82 e0       	ldi	r24, 0x02	; 2
    309e:	0c c0       	rjmp	.+24     	; 0x30b8 <PM_InterpretAVRISPPacket+0x25a>
    30a0:	80 ea       	ldi	r24, 0xA0	; 160
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	48 9f       	mul	r20, r24
    30a6:	90 01       	movw	r18, r0
    30a8:	49 9f       	mul	r20, r25
    30aa:	30 0d       	add	r19, r0
    30ac:	58 9f       	mul	r21, r24
    30ae:	30 0d       	add	r19, r0
    30b0:	11 24       	eor	r1, r1
    30b2:	26 5a       	subi	r18, 0xA6	; 166
    30b4:	3f 4f       	sbci	r19, 0xFF	; 255
    30b6:	83 e0       	ldi	r24, 0x03	; 3
    30b8:	80 93 67 02 	sts	0x0267, r24
    30bc:	80 91 41 01 	lds	r24, 0x0141
    30c0:	90 91 42 01 	lds	r25, 0x0142
    30c4:	0a 97       	sbiw	r24, 0x0a	; 10
    30c6:	b0 f4       	brcc	.+44     	; 0x30f4 <PM_InterpretAVRISPPacket+0x296>
    30c8:	eb e4       	ldi	r30, 0x4B	; 75
    30ca:	f1 e0       	ldi	r31, 0x01	; 1

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    30cc:	81 91       	ld	r24, Z+
    30ce:	d9 01       	movw	r26, r18
    30d0:	08 2e       	mov	r0, r24
    30d2:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
    30d6:	2f 5f       	subi	r18, 0xFF	; 255
    30d8:	3f 4f       	sbci	r19, 0xFF	; 255
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	ef 34       	cpi	r30, 0x4F	; 79
    30de:	f8 07       	cpc	r31, r24
    30e0:	a9 f7       	brne	.-22     	; 0x30cc <PM_InterpretAVRISPPacket+0x26e>
    30e2:	80 91 41 01 	lds	r24, 0x0141
    30e6:	90 91 42 01 	lds	r25, 0x0142
    30ea:	01 96       	adiw	r24, 0x01	; 1
    30ec:	90 93 42 01 	sts	0x0142, r25
    30f0:	80 93 41 01 	sts	0x0141, r24
    30f4:	10 92 4b 01 	sts	0x014B, r1
    30f8:	10 92 4c 01 	sts	0x014C, r1
    30fc:	d7 c0       	rjmp	.+430    	; 0x32ac <PM_InterpretAVRISPPacket+0x44e>
    30fe:	82 e0       	ldi	r24, 0x02	; 2
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	90 93 60 02 	sts	0x0260, r25
    3106:	80 93 5f 02 	sts	0x025F, r24
    310a:	80 91 68 02 	lds	r24, 0x0268
    310e:	81 30       	cpi	r24, 0x01	; 1
    3110:	09 f1       	breq	.+66     	; 0x3154 <PM_InterpretAVRISPPacket+0x2f6>
    3112:	23 31       	cpi	r18, 0x13	; 19
    3114:	31 f4       	brne	.+12     	; 0x3122 <PM_InterpretAVRISPPacket+0x2c4>
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	0e 94 2d 14 	call	0x285a	; 0x285a <PM_SetupDFAddressCounters>
    311c:	c3 e0       	ldi	r28, 0x03	; 3
    311e:	d0 e0       	ldi	r29, 0x00	; 0
    3120:	05 c0       	rjmp	.+10     	; 0x312c <PM_InterpretAVRISPPacket+0x2ce>
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	0e 94 2d 14 	call	0x285a	; 0x285a <PM_SetupDFAddressCounters>
    3128:	cc e0       	ldi	r28, 0x0C	; 12
    312a:	d0 e0       	ldi	r29, 0x00	; 0
    312c:	80 91 41 01 	lds	r24, 0x0141
    3130:	90 91 42 01 	lds	r25, 0x0142
    3134:	0e 94 bf 0a 	call	0x157e	; 0x157e <DF_BufferWriteEnable>
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	80 93 68 02 	sts	0x0268, r24
    313e:	eb e4       	ldi	r30, 0x4B	; 75
    3140:	f1 e0       	ldi	r31, 0x01	; 1

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    3142:	81 91       	ld	r24, Z+
    3144:	de 01       	movw	r26, r28
    3146:	08 2e       	mov	r0, r24
    3148:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__eeprom_write_byte_1F2021>
    314c:	91 e0       	ldi	r25, 0x01	; 1
    314e:	e4 35       	cpi	r30, 0x54	; 84
    3150:	f9 07       	cpc	r31, r25
    3152:	b9 f7       	brne	.-18     	; 0x3142 <PM_InterpretAVRISPPacket+0x2e4>
    3154:	80 91 4b 01 	lds	r24, 0x014B
    3158:	99 27       	eor	r25, r25
    315a:	d8 2f       	mov	r29, r24
    315c:	cc 27       	eor	r28, r28
    315e:	80 91 4c 01 	lds	r24, 0x014C
    3162:	99 27       	eor	r25, r25
    3164:	c8 2b       	or	r28, r24
    3166:	d9 2b       	or	r29, r25
    3168:	0a e4       	ldi	r16, 0x4A	; 74
    316a:	11 e0       	ldi	r17, 0x01	; 1
    316c:	06 c0       	rjmp	.+12     	; 0x317a <PM_InterpretAVRISPPacket+0x31c>
    316e:	f8 01       	movw	r30, r16
    3170:	82 85       	ldd	r24, Z+10	; 0x0a
    3172:	0e 94 02 15 	call	0x2a04	; 0x2a04 <PM_StoreProgramByte>
    3176:	0f 5f       	subi	r16, 0xFF	; 255
    3178:	1f 4f       	sbci	r17, 0xFF	; 255
    317a:	ce 01       	movw	r24, r28
    317c:	86 5b       	subi	r24, 0xB6	; 182
    317e:	9e 4f       	sbci	r25, 0xFE	; 254
    3180:	08 17       	cp	r16, r24
    3182:	19 07       	cpc	r17, r25
    3184:	a1 f7       	brne	.-24     	; 0x316e <PM_InterpretAVRISPPacket+0x310>
    3186:	20 91 69 02 	lds	r18, 0x0269
    318a:	30 91 6a 02 	lds	r19, 0x026A
    318e:	37 fd       	sbrc	r19, 7
    3190:	c6 ce       	rjmp	.-628    	; 0x2f1e <PM_InterpretAVRISPPacket+0xc0>
    3192:	80 91 4d 01 	lds	r24, 0x014D
    3196:	87 ff       	sbrs	r24, 7
    3198:	c2 ce       	rjmp	.-636    	; 0x2f1e <PM_InterpretAVRISPPacket+0xc0>
    319a:	21 15       	cp	r18, r1
    319c:	31 05       	cpc	r19, r1
    319e:	09 f4       	brne	.+2      	; 0x31a2 <PM_InterpretAVRISPPacket+0x344>
    31a0:	be ce       	rjmp	.-644    	; 0x2f1e <PM_InterpretAVRISPPacket+0xc0>
    31a2:	80 91 67 02 	lds	r24, 0x0267
    31a6:	81 30       	cpi	r24, 0x01	; 1
    31a8:	19 f4       	brne	.+6      	; 0x31b0 <PM_InterpretAVRISPPacket+0x352>
    31aa:	a2 e8       	ldi	r26, 0x82	; 130
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	02 c0       	rjmp	.+4      	; 0x31b4 <PM_InterpretAVRISPPacket+0x356>
    31b0:	a4 e8       	ldi	r26, 0x84	; 132
    31b2:	b0 e0       	ldi	r27, 0x00	; 0

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
  asm volatile (
    31b4:	09 01       	movw	r0, r18
    31b6:	0e 94 88 1a 	call	0x3510	; 0x3510 <__eeprom_write_word_1F2021>
    31ba:	80 91 69 02 	lds	r24, 0x0269
    31be:	90 91 6a 02 	lds	r25, 0x026A
    31c2:	90 68       	ori	r25, 0x80	; 128
    31c4:	90 93 6a 02 	sts	0x026A, r25
    31c8:	80 93 69 02 	sts	0x0269, r24
    31cc:	a8 ce       	rjmp	.-688    	; 0x2f1e <PM_InterpretAVRISPPacket+0xc0>
    31ce:	80 91 68 02 	lds	r24, 0x0268
    31d2:	82 30       	cpi	r24, 0x02	; 2
    31d4:	01 f1       	breq	.+64     	; 0x3216 <PM_InterpretAVRISPPacket+0x3b8>
    31d6:	0e 94 68 14 	call	0x28d0	; 0x28d0 <PM_CheckEndOfFuseLockData>
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	80 91 4a 01 	lds	r24, 0x014A
    31e0:	84 31       	cpi	r24, 0x14	; 20
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <PM_InterpretAVRISPPacket+0x388>
    31e4:	91 e0       	ldi	r25, 0x01	; 1
    31e6:	89 2f       	mov	r24, r25
    31e8:	0e 94 2d 14 	call	0x285a	; 0x285a <PM_SetupDFAddressCounters>
    31ec:	60 91 41 01 	lds	r22, 0x0141
    31f0:	70 91 42 01 	lds	r23, 0x0142
    31f4:	80 91 3f 01 	lds	r24, 0x013F
    31f8:	90 91 40 01 	lds	r25, 0x0140
    31fc:	0e 94 84 0a 	call	0x1508	; 0x1508 <DF_ContinuousReadEnable>
    3200:	82 e0       	ldi	r24, 0x02	; 2
    3202:	80 93 68 02 	sts	0x0268, r24
    3206:	10 92 62 02 	sts	0x0262, r1
    320a:	10 92 63 02 	sts	0x0263, r1
    320e:	10 92 64 02 	sts	0x0264, r1
    3212:	10 92 65 02 	sts	0x0265, r1
    3216:	80 91 4b 01 	lds	r24, 0x014B
    321a:	99 27       	eor	r25, r25
    321c:	d8 2f       	mov	r29, r24
    321e:	cc 27       	eor	r28, r28
    3220:	80 91 4c 01 	lds	r24, 0x014C
    3224:	99 27       	eor	r25, r25
    3226:	c8 2b       	or	r28, r24
    3228:	d9 2b       	or	r29, r25
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	80 91 4a 01 	lds	r24, 0x014A
    3230:	84 31       	cpi	r24, 0x14	; 20
    3232:	09 f4       	brne	.+2      	; 0x3236 <PM_InterpretAVRISPPacket+0x3d8>
    3234:	91 e0       	ldi	r25, 0x01	; 1
    3236:	89 2f       	mov	r24, r25
    3238:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <PM_GetStoredDataSize>
    323c:	7b 01       	movw	r14, r22
    323e:	0a e4       	ldi	r16, 0x4A	; 74
    3240:	11 e0       	ldi	r17, 0x01	; 1
    3242:	1b c0       	rjmp	.+54     	; 0x327a <PM_InterpretAVRISPPacket+0x41c>
    3244:	97 01       	movw	r18, r14
    3246:	44 27       	eor	r20, r20
    3248:	55 27       	eor	r21, r21
    324a:	80 91 62 02 	lds	r24, 0x0262
    324e:	90 91 63 02 	lds	r25, 0x0263
    3252:	a0 91 64 02 	lds	r26, 0x0264
    3256:	b0 91 65 02 	lds	r27, 0x0265
    325a:	82 17       	cp	r24, r18
    325c:	93 07       	cpc	r25, r19
    325e:	a4 07       	cpc	r26, r20
    3260:	b5 07       	cpc	r27, r21
    3262:	10 f0       	brcs	.+4      	; 0x3268 <PM_InterpretAVRISPPacket+0x40a>
    3264:	8f ef       	ldi	r24, 0xFF	; 255
    3266:	03 c0       	rjmp	.+6      	; 0x326e <PM_InterpretAVRISPPacket+0x410>
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	0e 94 ab 09 	call	0x1356	; 0x1356 <SPI_SPITransmit>
    326e:	f8 01       	movw	r30, r16
    3270:	82 83       	std	Z+2, r24	; 0x02
    3272:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <V2P_IncrementCurrAddress>
    3276:	0f 5f       	subi	r16, 0xFF	; 255
    3278:	1f 4f       	sbci	r17, 0xFF	; 255
    327a:	ce 01       	movw	r24, r28
    327c:	86 5b       	subi	r24, 0xB6	; 182
    327e:	9e 4f       	sbci	r25, 0xFE	; 254
    3280:	08 17       	cp	r16, r24
    3282:	19 07       	cpc	r17, r25
    3284:	f9 f6       	brne	.-66     	; 0x3244 <PM_InterpretAVRISPPacket+0x3e6>
    3286:	23 96       	adiw	r28, 0x03	; 3
    3288:	d0 93 60 02 	sts	0x0260, r29
    328c:	c0 93 5f 02 	sts	0x025F, r28
    3290:	10 92 4b 01 	sts	0x014B, r1
    3294:	f8 01       	movw	r30, r16
    3296:	12 82       	std	Z+2, r1	; 0x02
    3298:	09 c0       	rjmp	.+18     	; 0x32ac <PM_InterpretAVRISPPacket+0x44e>
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	90 93 60 02 	sts	0x0260, r25
    32a2:	80 93 5f 02 	sts	0x025F, r24
    32a6:	89 ec       	ldi	r24, 0xC9	; 201
    32a8:	80 93 4b 01 	sts	0x014B, r24
    32ac:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <V2P_SendPacket>
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	1f 91       	pop	r17
    32b6:	0f 91       	pop	r16
    32b8:	ff 90       	pop	r15
    32ba:	ef 90       	pop	r14
    32bc:	08 95       	ret

000032be <TM_FindNextTag>:
	DF_EnableDataflash(FALSE);
}

void TM_FindNextTag(void)
{
    32be:	cf 92       	push	r12
    32c0:	df 92       	push	r13
    32c2:	ef 92       	push	r14
    32c4:	ff 92       	push	r15
    32c6:	0f 93       	push	r16
    32c8:	1f 93       	push	r17
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    32d2:	69 97       	sbiw	r28, 0x19	; 25
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	f8 94       	cli
    32d8:	de bf       	out	0x3e, r29	; 62
    32da:	0f be       	out	0x3f, r0	; 63
    32dc:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Buffer[21];
	uint8_t  HeadBuff[4]      = BT_TAGHEADER;
    32de:	80 e4       	ldi	r24, 0x40	; 64
    32e0:	89 83       	std	Y+1, r24	; 0x01
    32e2:	88 e2       	ldi	r24, 0x28	; 40
    32e4:	8a 83       	std	Y+2, r24	; 0x02
    32e6:	83 e2       	ldi	r24, 0x23	; 35
    32e8:	8b 83       	std	Y+3, r24	; 0x03
    32ea:	89 e2       	ldi	r24, 0x29	; 41
    32ec:	8c 83       	std	Y+4, r24	; 0x04
	uint32_t ProgDataSize     = PM_GetStoredDataSize(TYPE_FLASH);
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <PM_GetStoredDataSize>
    32f4:	6b 01       	movw	r12, r22
    32f6:	7c 01       	movw	r14, r24
	uint8_t  TotalOkHeadBytes = 0;
	uint8_t  TagByte;
	uint8_t  BytesRead;
	
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);    // Orange = busy
    32f8:	81 b3       	in	r24, 0x11	; 17
    32fa:	8f 7c       	andi	r24, 0xCF	; 207
    32fc:	80 63       	ori	r24, 0x30	; 48
    32fe:	81 bb       	out	0x11, r24	; 17

	while (DFPos < ProgDataSize)
	{
		BytesRead = 1;
		
		TagByte = SPI_SPITransmit(0x00);       // Get next byte from dataflash
		if (TagByte == HeadBuff[TotalOkHeadBytes++])
		{
			if (TotalOkHeadBytes == 4)
			{
				uint8_t HB;
			
				for (HB = 0; HB < 20; HB++)
				{
					TagByte = SPI_SPITransmit(0x00);
					Buffer[HB] = TagByte;
					
					if (TagByte == 0x00)
					  break;
				}
				
				Buffer[20] = '\0';             // Make sure string is null-terminated

				TagExists = TRUE;
				BytesRead = (HB + 2);

				LCD_puts(Buffer);
				MAIN_SETSTATUSLED(MAIN_STATLED_GREEN); // Green = ready
				return;
			}
		}
		else
		{
			TotalOkHeadBytes = ((TagByte == HeadBuff[0])? 1 : 0);
    3300:	09 81       	ldd	r16, Y+1	; 0x01
    3302:	10 e0       	ldi	r17, 0x00	; 0
    3304:	42 c0       	rjmp	.+132    	; 0x338a <TM_FindNextTag+0xcc>
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	0e 94 ab 09 	call	0x1356	; 0x1356 <SPI_SPITransmit>
    330c:	98 2f       	mov	r25, r24
    330e:	fe 01       	movw	r30, r28
    3310:	e1 0f       	add	r30, r17
    3312:	f1 1d       	adc	r31, r1
    3314:	81 81       	ldd	r24, Z+1	; 0x01
    3316:	98 17       	cp	r25, r24
    3318:	09 f5       	brne	.+66     	; 0x335c <TM_FindNextTag+0x9e>
    331a:	1f 5f       	subi	r17, 0xFF	; 255
    331c:	14 30       	cpi	r17, 0x04	; 4
    331e:	11 f5       	brne	.+68     	; 0x3364 <TM_FindNextTag+0xa6>
    3320:	8e 01       	movw	r16, r28
    3322:	0b 5f       	subi	r16, 0xFB	; 251
    3324:	1f 4f       	sbci	r17, 0xFF	; 255
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	0e 94 ab 09 	call	0x1356	; 0x1356 <SPI_SPITransmit>
    332c:	f8 01       	movw	r30, r16
    332e:	80 83       	st	Z, r24
    3330:	88 23       	and	r24, r24
    3332:	39 f0       	breq	.+14     	; 0x3342 <TM_FindNextTag+0x84>
    3334:	0f 5f       	subi	r16, 0xFF	; 255
    3336:	1f 4f       	sbci	r17, 0xFF	; 255
    3338:	ce 01       	movw	r24, r28
    333a:	49 96       	adiw	r24, 0x19	; 25
    333c:	08 17       	cp	r16, r24
    333e:	19 07       	cpc	r17, r25
    3340:	91 f7       	brne	.-28     	; 0x3326 <TM_FindNextTag+0x68>
    3342:	19 8e       	std	Y+25, r1	; 0x19
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	80 93 6b 02 	sts	0x026B, r24
    334a:	ce 01       	movw	r24, r28
    334c:	05 96       	adiw	r24, 0x05	; 5
    334e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <LCD_puts>
    3352:	81 b3       	in	r24, 0x11	; 17
    3354:	8f 7c       	andi	r24, 0xCF	; 207
    3356:	80 61       	ori	r24, 0x10	; 16
    3358:	81 bb       	out	0x11, r24	; 17
    335a:	42 c0       	rjmp	.+132    	; 0x33e0 <TM_FindNextTag+0x122>
    335c:	10 e0       	ldi	r17, 0x00	; 0
    335e:	90 17       	cp	r25, r16
    3360:	09 f4       	brne	.+2      	; 0x3364 <TM_FindNextTag+0xa6>
    3362:	11 e0       	ldi	r17, 0x01	; 1
		}

		DFPos += BytesRead;
    3364:	80 91 6c 02 	lds	r24, 0x026C
    3368:	90 91 6d 02 	lds	r25, 0x026D
    336c:	a0 91 6e 02 	lds	r26, 0x026E
    3370:	b0 91 6f 02 	lds	r27, 0x026F
    3374:	01 96       	adiw	r24, 0x01	; 1
    3376:	a1 1d       	adc	r26, r1
    3378:	b1 1d       	adc	r27, r1
    337a:	80 93 6c 02 	sts	0x026C, r24
    337e:	90 93 6d 02 	sts	0x026D, r25
    3382:	a0 93 6e 02 	sts	0x026E, r26
    3386:	b0 93 6f 02 	sts	0x026F, r27
    338a:	80 91 6c 02 	lds	r24, 0x026C
    338e:	90 91 6d 02 	lds	r25, 0x026D
    3392:	a0 91 6e 02 	lds	r26, 0x026E
    3396:	b0 91 6f 02 	lds	r27, 0x026F
    339a:	8c 15       	cp	r24, r12
    339c:	9d 05       	cpc	r25, r13
    339e:	ae 05       	cpc	r26, r14
    33a0:	bf 05       	cpc	r27, r15
    33a2:	08 f4       	brcc	.+2      	; 0x33a6 <TM_FindNextTag+0xe8>
    33a4:	b0 cf       	rjmp	.-160    	; 0x3306 <TM_FindNextTag+0x48>
	}
	
	DF_ContinuousReadEnable(0, 0);
    33a6:	60 e0       	ldi	r22, 0x00	; 0
    33a8:	70 e0       	ldi	r23, 0x00	; 0
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	0e 94 84 0a 	call	0x1508	; 0x1508 <DF_ContinuousReadEnable>
	DFPos = 0;
    33b2:	10 92 6c 02 	sts	0x026C, r1
    33b6:	10 92 6d 02 	sts	0x026D, r1
    33ba:	10 92 6e 02 	sts	0x026E, r1
    33be:	10 92 6f 02 	sts	0x026F, r1
	
	if (TagExists == FALSE)
    33c2:	80 91 6b 02 	lds	r24, 0x026B
    33c6:	88 23       	and	r24, r24
    33c8:	49 f4       	brne	.+18     	; 0x33dc <TM_FindNextTag+0x11e>
	{
		MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);  // Green = ready
    33ca:	81 b3       	in	r24, 0x11	; 17
    33cc:	8f 7c       	andi	r24, 0xCF	; 207
    33ce:	80 61       	ori	r24, 0x10	; 16
    33d0:	81 bb       	out	0x11, r24	; 17
		MAIN_ShowError(PSTR("NO TAGS"));
    33d2:	8b e4       	ldi	r24, 0x4B	; 75
    33d4:	94 e0       	ldi	r25, 0x04	; 4
    33d6:	0e 94 b5 03 	call	0x76a	; 0x76a <MAIN_ShowError>
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <TM_FindNextTag+0x122>
	}
	else
	{
		/* The following line _is_ recursion, but the function will only ever call itself
		   a maximum of one time. The function will call itself upon skipping from the last
		   tag stored in the program data to the first; to guard against infinite recursion
		   if no tags are present, the system will error out if the TagExists flag is empty
		   after a full data read. Once a tag has been read and displayed onto the LCD, the
           function returns to the main tag handling routine.                               */
		TM_FindNextTag();
    33dc:	0e 94 5f 19 	call	0x32be	; 0x32be <TM_FindNextTag>
    33e0:	69 96       	adiw	r28, 0x19	; 25
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	f8 94       	cli
    33e6:	de bf       	out	0x3e, r29	; 62
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	cd bf       	out	0x3d, r28	; 61
    33ec:	df 91       	pop	r29
    33ee:	cf 91       	pop	r28
    33f0:	1f 91       	pop	r17
    33f2:	0f 91       	pop	r16
    33f4:	ff 90       	pop	r15
    33f6:	ef 90       	pop	r14
    33f8:	df 90       	pop	r13
    33fa:	cf 90       	pop	r12
    33fc:	08 95       	ret

000033fe <TM_ShowTags>:
    33fe:	60 e0       	ldi	r22, 0x00	; 0
    3400:	70 e0       	ldi	r23, 0x00	; 0
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	0e 94 84 0a 	call	0x1508	; 0x1508 <DF_ContinuousReadEnable>
    340a:	10 92 6b 02 	sts	0x026B, r1
    340e:	10 92 6c 02 	sts	0x026C, r1
    3412:	10 92 6d 02 	sts	0x026D, r1
    3416:	10 92 6e 02 	sts	0x026E, r1
    341a:	10 92 6f 02 	sts	0x026F, r1
    341e:	0e 94 5f 19 	call	0x32be	; 0x32be <TM_FindNextTag>
    3422:	80 91 6b 02 	lds	r24, 0x026B
    3426:	88 23       	and	r24, r24
    3428:	71 f0       	breq	.+28     	; 0x3446 <TM_ShowTags+0x48>
    342a:	8e b3       	in	r24, 0x1e	; 30
    342c:	88 23       	and	r24, r24
    342e:	e9 f3       	breq	.-6      	; 0x342a <TM_ShowTags+0x2c>
    3430:	f7 9b       	sbis	0x1e, 7	; 30
    3432:	03 c0       	rjmp	.+6      	; 0x343a <TM_ShowTags+0x3c>
    3434:	0e 94 5f 19 	call	0x32be	; 0x32be <TM_FindNextTag>
    3438:	02 c0       	rjmp	.+4      	; 0x343e <TM_ShowTags+0x40>
    343a:	f2 99       	sbic	0x1e, 2	; 30
    343c:	03 c0       	rjmp	.+6      	; 0x3444 <TM_ShowTags+0x46>
    343e:	0e 94 84 02 	call	0x508	; 0x508 <MAIN_WaitForJoyRelease>
    3442:	f3 cf       	rjmp	.-26     	; 0x342a <TM_ShowTags+0x2c>
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	0e 94 4d 0a 	call	0x149a	; 0x149a <DF_EnableDataflash>
    344a:	08 95       	ret

0000344c <__vector_2>:
.global PCINT0_vect             ; Pin change 0 (joystick)
.global PCINT1_vect             ; Pin change 1 (joystick)

PCINT0_vect:
  jmp PCINT1_vect
    344c:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__vector_3>

00003450 <__vector_10>:

.global TIMER0_COMP_vect             ; Timer 0 compare

TIMER0_COMP_vect:
  push r24
    3450:	8f 93       	push	r24
  ldi r24, (USI_CONTROL_REG_FLAGS | (1<<USITC))
    3452:	8b e5       	ldi	r24, 0x5B	; 91
  sts _SFR_IO_ADDR(USICR), r24
    3454:	80 93 98 00 	sts	0x0098, r24
  pop r24
    3458:	8f 91       	pop	r24
  reti
    345a:	18 95       	reti

0000345c <strcpy_P>:
    345c:	fb 01       	movw	r30, r22
    345e:	dc 01       	movw	r26, r24
    3460:	05 90       	lpm	r0, Z+
    3462:	0d 92       	st	X+, r0
    3464:	00 20       	and	r0, r0
    3466:	e1 f7       	brne	.-8      	; 0x3460 <strcpy_P+0x4>
    3468:	08 95       	ret

0000346a <ultoa>:
    346a:	fa 01       	movw	r30, r20
    346c:	cf 93       	push	r28
    346e:	ff 93       	push	r31
    3470:	ef 93       	push	r30
    3472:	22 30       	cpi	r18, 0x02	; 2
    3474:	cc f0       	brlt	.+50     	; 0x34a8 <ultoa+0x3e>
    3476:	25 32       	cpi	r18, 0x25	; 37
    3478:	bc f4       	brge	.+46     	; 0x34a8 <ultoa+0x3e>
    347a:	c2 2f       	mov	r28, r18
    347c:	2c 2f       	mov	r18, r28
    347e:	33 27       	eor	r19, r19
    3480:	44 27       	eor	r20, r20
    3482:	55 27       	eor	r21, r21
    3484:	ff 93       	push	r31
    3486:	ef 93       	push	r30
    3488:	0e 94 92 1a 	call	0x3524	; 0x3524 <__udivmodsi4>
    348c:	ef 91       	pop	r30
    348e:	ff 91       	pop	r31
    3490:	60 5d       	subi	r22, 0xD0	; 208
    3492:	6a 33       	cpi	r22, 0x3A	; 58
    3494:	0c f0       	brlt	.+2      	; 0x3498 <ultoa+0x2e>
    3496:	69 5d       	subi	r22, 0xD9	; 217
    3498:	61 93       	st	Z+, r22
    349a:	b9 01       	movw	r22, r18
    349c:	ca 01       	movw	r24, r20
    349e:	60 50       	subi	r22, 0x00	; 0
    34a0:	70 40       	sbci	r23, 0x00	; 0
    34a2:	80 40       	sbci	r24, 0x00	; 0
    34a4:	90 40       	sbci	r25, 0x00	; 0
    34a6:	51 f7       	brne	.-44     	; 0x347c <ultoa+0x12>
    34a8:	10 82       	st	Z, r1
    34aa:	8f 91       	pop	r24
    34ac:	9f 91       	pop	r25
    34ae:	cf 91       	pop	r28
    34b0:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <strrev>

000034b4 <strrev>:
    34b4:	dc 01       	movw	r26, r24
    34b6:	fc 01       	movw	r30, r24
    34b8:	01 90       	ld	r0, Z+
    34ba:	00 20       	and	r0, r0
    34bc:	e9 f7       	brne	.-6      	; 0x34b8 <strrev+0x4>
    34be:	32 97       	sbiw	r30, 0x02	; 2
    34c0:	ae 17       	cp	r26, r30
    34c2:	bf 07       	cpc	r27, r31
    34c4:	30 f4       	brcc	.+12     	; 0x34d2 <strrev+0x1e>
    34c6:	7c 91       	ld	r23, X
    34c8:	60 81       	ld	r22, Z
    34ca:	70 83       	st	Z, r23
    34cc:	31 97       	sbiw	r30, 0x01	; 1
    34ce:	6d 93       	st	X+, r22
    34d0:	f7 cf       	rjmp	.-18     	; 0x34c0 <strrev+0xc>
    34d2:	08 95       	ret

000034d4 <__eeprom_read_byte_1F2021>:
    34d4:	f9 99       	sbic	0x1f, 1	; 31
    34d6:	fe cf       	rjmp	.-4      	; 0x34d4 <__eeprom_read_byte_1F2021>
    34d8:	b2 bd       	out	0x22, r27	; 34
    34da:	a1 bd       	out	0x21, r26	; 33
    34dc:	f8 9a       	sbi	0x1f, 0	; 31
    34de:	11 96       	adiw	r26, 0x01	; 1
    34e0:	00 b4       	in	r0, 0x20	; 32
    34e2:	08 95       	ret

000034e4 <__eeprom_read_block_1F2021>:
    34e4:	f7 df       	rcall	.-18     	; 0x34d4 <__eeprom_read_byte_1F2021>
    34e6:	01 92       	st	Z+, r0
    34e8:	1a 94       	dec	r1
    34ea:	e1 f7       	brne	.-8      	; 0x34e4 <__eeprom_read_block_1F2021>
    34ec:	08 95       	ret

000034ee <__eeprom_read_word_1F2021>:
    34ee:	f2 df       	rcall	.-28     	; 0x34d4 <__eeprom_read_byte_1F2021>
    34f0:	e0 2d       	mov	r30, r0
    34f2:	f0 df       	rcall	.-32     	; 0x34d4 <__eeprom_read_byte_1F2021>
    34f4:	f0 2d       	mov	r31, r0
    34f6:	08 95       	ret

000034f8 <__eeprom_write_byte_1F2021>:
    34f8:	f9 99       	sbic	0x1f, 1	; 31
    34fa:	fe cf       	rjmp	.-4      	; 0x34f8 <__eeprom_write_byte_1F2021>
    34fc:	b2 bd       	out	0x22, r27	; 34
    34fe:	a1 bd       	out	0x21, r26	; 33
    3500:	00 bc       	out	0x20, r0	; 32
    3502:	11 96       	adiw	r26, 0x01	; 1
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	fa 9a       	sbi	0x1f, 2	; 31
    350a:	f9 9a       	sbi	0x1f, 1	; 31
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	08 95       	ret

00003510 <__eeprom_write_word_1F2021>:
    3510:	f3 df       	rcall	.-26     	; 0x34f8 <__eeprom_write_byte_1F2021>
    3512:	01 2c       	mov	r0, r1
    3514:	f1 df       	rcall	.-30     	; 0x34f8 <__eeprom_write_byte_1F2021>
    3516:	11 24       	eor	r1, r1
    3518:	08 95       	ret

0000351a <__eeprom_write_block_1F2021>:
    351a:	01 90       	ld	r0, Z+
    351c:	ed df       	rcall	.-38     	; 0x34f8 <__eeprom_write_byte_1F2021>
    351e:	1a 94       	dec	r1
    3520:	e1 f7       	brne	.-8      	; 0x351a <__eeprom_write_block_1F2021>
    3522:	08 95       	ret

00003524 <__udivmodsi4>:
    3524:	a1 e2       	ldi	r26, 0x21	; 33
    3526:	1a 2e       	mov	r1, r26
    3528:	aa 1b       	sub	r26, r26
    352a:	bb 1b       	sub	r27, r27
    352c:	fd 01       	movw	r30, r26
    352e:	0d c0       	rjmp	.+26     	; 0x354a <__udivmodsi4_ep>

00003530 <__udivmodsi4_loop>:
    3530:	aa 1f       	adc	r26, r26
    3532:	bb 1f       	adc	r27, r27
    3534:	ee 1f       	adc	r30, r30
    3536:	ff 1f       	adc	r31, r31
    3538:	a2 17       	cp	r26, r18
    353a:	b3 07       	cpc	r27, r19
    353c:	e4 07       	cpc	r30, r20
    353e:	f5 07       	cpc	r31, r21
    3540:	20 f0       	brcs	.+8      	; 0x354a <__udivmodsi4_ep>
    3542:	a2 1b       	sub	r26, r18
    3544:	b3 0b       	sbc	r27, r19
    3546:	e4 0b       	sbc	r30, r20
    3548:	f5 0b       	sbc	r31, r21

0000354a <__udivmodsi4_ep>:
    354a:	66 1f       	adc	r22, r22
    354c:	77 1f       	adc	r23, r23
    354e:	88 1f       	adc	r24, r24
    3550:	99 1f       	adc	r25, r25
    3552:	1a 94       	dec	r1
    3554:	69 f7       	brne	.-38     	; 0x3530 <__udivmodsi4_loop>
    3556:	60 95       	com	r22
    3558:	70 95       	com	r23
    355a:	80 95       	com	r24
    355c:	90 95       	com	r25
    355e:	9b 01       	movw	r18, r22
    3560:	ac 01       	movw	r20, r24
    3562:	bd 01       	movw	r22, r26
    3564:	cf 01       	movw	r24, r30
    3566:	08 95       	ret

00003568 <_exit>:
    3568:	ff cf       	rjmp	.-2      	; 0x3568 <_exit>
