
ButtLoad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00003540  000035f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003540  00000000  00000000  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b4  00800104  00800104  000035f8  2**0
                  ALLOC
  3 .noinit       00000000  008002b8  008002b8  00003681  2**0
                  CONTENTS
  4 .eeprom       00000089  00810000  00810000  000035f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .stab         000003e4  00000000  00000000  00003684  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000000fb  00000000  00000000  00003a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 0000012c  00000000  00000000  00003b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d49  00000000  00000000  00003c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000041ec  00000000  00000000  000049d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000100a  00000000  00000000  00008bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000033bc  00000000  00000000  00009bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000114f  00000000  00000000  0000cf8a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 14 02 	jmp	0x428 <__init>
       4:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
       8:	0c 94 12 1a 	jmp	0x3424 <__vector_2>
       c:	0c 94 95 03 	jmp	0x72a <__vector_3>
      10:	0c 94 ce 0b 	jmp	0x179c <__vector_4>
      14:	0c 94 eb 07 	jmp	0xfd6 <__vector_5>
      18:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      1c:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      20:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      24:	0c 94 12 0c 	jmp	0x1824 <__vector_9>
      28:	0c 94 14 1a 	jmp	0x3428 <__vector_10>
      2c:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      30:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      34:	0c 94 54 0b 	jmp	0x16a8 <__vector_13>
      38:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      3c:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      40:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      44:	0c 94 4d 09 	jmp	0x129a <__vector_17>
      48:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      4c:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      50:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      54:	0c 94 2f 02 	jmp	0x45e <__bad_interrupt>
      58:	0c 94 98 08 	jmp	0x1130 <__vector_22>

0000005c <SIFONames>:
      5c:	53 54 4f 52 41 47 45 20 53 49 5a 45 53 00 00 56     STORAGE SIZES..V
      6c:	49 45 57 20 44 41 54 41 20 54 41 47 53 00           IEW DATA TAGS.

0000007a <USISpeeds>:
      7a:	20 35 37 31 35 33 20 48 5a 00 20 38 36 37 33 38      57153 HZ. 86738
      8a:	20 48 5a 00 31 31 33 34 32 37 20 48 5a 00 32 31      HZ.113427 HZ.21
      9a:	30 36 35 31 20 48 5a 00                             0651 HZ.

000000a2 <ProgOptions>:
      a2:	0b 01 ff 00 ef 00 df 00 cf 00 bb 00 b0 00           ..............

000000b0 <PRG_C>:
      b0:	45 52 41 53 45 20 4f 4e 4c 59 00                    ERASE ONLY.

000000bb <PRG_FL>:
      bb:	46 55 53 45 20 41 4e 44 20 4c 4f 43 4b 20 42 59     FUSE AND LOCK BY
      cb:	54 45 53 00                                         TES.

000000cf <PRG_L>:
      cf:	4c 4f 43 4b 20 42 59 54 45 53 20 4f 4e 4c 59 00     LOCK BYTES ONLY.

000000df <PRG_F>:
      df:	46 55 53 45 20 42 59 54 45 53 20 4f 4e 4c 59 00     FUSE BYTES ONLY.

000000ef <PRG_DE>:
      ef:	44 41 54 41 20 41 4e 44 20 45 45 50 52 4f 4d 00     DATA AND EEPROM.

000000ff <PRG_E>:
      ff:	45 45 50 52 4f 4d 20 4f 4e 4c 59 00                 EEPROM ONLY.

0000010b <PRG_D>:
     10b:	44 41 54 41 20 4f 4e 4c 59 00                       DATA ONLY.

00000115 <SettingFunctionPtrs>:
     115:	d2 05 25 06 5d 06 a9 06 9f 05 76 07                 ..%.].....v.

00000121 <SettingFunctionNames>:
     121:	7e 01 70 01 5f 01 4d 01 40 01 2d 01                 ~.p._.M.@.-.

0000012d <SFunc_GOBOOTLOADER>:
     12d:	4a 55 4d 50 20 54 4f 20 42 4f 4f 54 4c 4f 41 44     JUMP TO BOOTLOAD
     13d:	45 52 00                                            ER.

00000140 <SFunc_CLEARMEM>:
     140:	43 4c 45 41 52 20 4d 45 4d 4f 52 59 00              CLEAR MEMORY.

0000014d <SFunc_SETAUTOSLEEPTO>:
     14d:	53 45 54 20 53 4c 45 45 50 20 54 49 4d 45 4f 55     SET SLEEP TIMEOU
     15d:	54 00                                               T.

0000015f <SFunc_SETFIRMMINOR>:
     15f:	53 45 54 20 46 49 52 4d 20 56 45 52 53 49 4f 4e     SET FIRM VERSION
	...

00000170 <SFunc_SETSPISPEED>:
     170:	53 45 54 20 53 50 49 20 53 50 45 45 44 00           SET SPI SPEED.

0000017e <SFunc_SETCONTRAST>:
     17e:	53 45 54 20 43 4f 4e 54 52 41 53 54 00              SET CONTRAST.

0000018b <MainFunctionPtrs>:
     18b:	ee 03 6d 05 38 04 07 04 20 07 b9 03 0c 07           ..m.8... .....

00000199 <MainFunctionNames>:
     199:	f0 01 e5 01 d9 01 ca 01 bb 01 b2 01 a7 01           ..............

000001a7 <Func_SLEEP>:
     1a7:	53 4c 45 45 50 20 4d 4f 44 45 00                    SLEEP MODE.

000001b2 <Func_SETTINGS>:
     1b2:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

000001bb <Func_PRGMSTOREINFO>:
     1bb:	44 41 54 41 53 54 4f 52 45 20 49 4e 46 4f 00        DATASTORE INFO.

000001ca <Func_PRGMDATAFLASH>:
     1ca:	44 41 54 41 46 4c 41 53 48 20 50 52 47 4d 00        DATAFLASH PRGM.

000001d9 <Func_PRGMAVR>:
     1d9:	50 52 4f 47 52 41 4d 20 41 56 52 00                 PROGRAM AVR.

000001e5 <Func_STOREPRGM>:
     1e5:	53 54 4f 52 45 20 50 52 47 4d 00                    STORE PRGM.

000001f0 <Func_ISPPRGM>:
     1f0:	41 56 52 49 53 50 20 4d 4f 44 45 00                 AVRISP MODE.

000001fc <AboutTextPtrs>:
     1fc:	27 02 22 02 13 02 04 02                             '.".....

00000204 <CopyRight>:
     204:	3c 43 3e 20 32 30 30 36 20 2d 20 47 50 4c 00        <C> 2006 - GPL.

00000213 <AuthorName>:
     213:	42 59 20 44 45 41 4e 20 43 41 4d 45 52 41 00        BY DEAN CAMERA.

00000222 <VersionInfo>:
     222:	56 31 2d 34 00                                      V1-4.

00000227 <ProgrammerName>:
     227:	42 55 54 54 4c 4f 41 44 00                          BUTTLOAD.

00000230 <WaitText>:
     230:	2a 57 41 49 54 2a 00                                *WAIT*.

00000237 <BUTTTAG_Name>:
     237:	40 28 23 29 42 55 54 54 4c 4f 41 44 20 41 56 52     @(#)BUTTLOAD AVR
     247:	49 53 50 00                                         ISP.

0000024b <BUTTTAG_Author>:
     24b:	40 28 23 29 42 59 20 44 45 41 4e 20 43 41 4d 45     @(#)BY DEAN CAME
     25b:	52 41 00                                            RA.

0000025e <__c.17>:
     25e:	50 52 47 3e 20 20 00                                PRG>  .

00000265 <__c.16>:
     265:	42 41 44 49 53 52 00                                BADISR.

0000026c <__c.9>:
     26c:	4e 4f 20 45 52 41 53 45 20 43 4d 44 00              NO ERASE CMD.

00000279 <__c.10>:
     279:	4e 4f 20 44 41 54 41 00                             NO DATA.

00000281 <__c.11>:
     281:	4e 4f 20 45 45 50 52 4f 4d 00                       NO EEPROM.

0000028b <__c.12>:
     28b:	4e 4f 20 46 55 53 45 20 42 59 54 45 53 00           NO FUSE BYTES.

00000299 <__c.13>:
     299:	4e 4f 20 4c 4f 43 4b 20 42 59 54 45 53 00           NO LOCK BYTES.

000002a7 <__c.14>:
     2a7:	50 52 4f 47 52 41 4d 4d 49 4e 47 20 44 4f 4e 45     PROGRAMMING DONE
	...

000002b8 <__c.15>:
     2b8:	46 41 49 4c 45 44 00                                FAILED.

000002bf <__c.8>:
     2bf:	2a 53 54 4f 52 41 47 45 20 4d 4f 44 45 2a 00        *STORAGE MODE*.

000002ce <__c.5>:
     2ce:	43 4f 4e 46 49 52 4d 00                             CONFIRM.

000002d6 <__c.6>:
     2d6:	3c 4e 20 59 3e 00                                   <N Y>.

000002dc <__c.7>:
     2dc:	4d 45 4d 20 43 4c 45 41 52 45 44 00                 MEM CLEARED.

000002e8 <__c.4>:
     2e8:	56 32 2d 20 00                                      V2- .

000002ed <__c.2>:
     2ed:	20 20 20 20 53 45 43 00                                 SEC.

000002f5 <__c.3>:
     2f5:	4f 46 46 00                                         OFF.

000002f9 <__c.1>:
     2f9:	4e 4f 20 53 54 4f 52 45 44 20 50 52 47 4d 00        NO STORED PRGM.

00000308 <__c.0>:
     308:	2a 4a 54 41 47 20 4f 4e 2a 00                       *JTAG ON*.

00000312 <LCD_SegTable>:
     312:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
     322:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
     332:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
     342:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
     352:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
     362:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
     372:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

0000037e <USIPSValues>:
     37e:	03 80 02 54 01 40 00 22                             ...T.@."

00000386 <DataFlashError>:
     386:	44 41 54 41 46 4c 41 53 48 20 45 52 52 4f 52 00     DATAFLASH ERROR.

00000396 <DF_Pages>:
     396:	00 01 00 02 00 04 00 08 00 10 00 10 00 20 00 20     ............. . 

000003a6 <DF_PageSize>:
     3a6:	08 01 08 01 08 01 08 01 08 01 10 02 10 02 20 04     .............. .

000003b6 <DF_PageBits>:
     3b6:	09 09 09 09 09 0a 0a 0b                             ........

000003be <__c.0>:
     3be:	42 55 46 46 20 4f 56 45 52 46 4c 4f 57 00           BUFF OVERFLOW.

000003cc <AutoSleepTOValues>:
     3cc:	00 0f 1e 3c 78                                      ...<x

000003d1 <DataFlashProgMode>:
     3d1:	2a 44 41 54 41 46 4c 41 53 48 20 4d 4f 44 45 2a     *DATAFLASH MODE*
	...

000003e2 <SignonResponse>:
     3e2:	01 00 08 41 56 52 49 53 50 5f 32                    ...AVRISP_2

000003ed <SyncErrorMessage>:
     3ed:	53 59 4e 43 20 45 52 52 4f 52 00                    SYNC ERROR.

000003f8 <AVRISPModeMessage>:
     3f8:	2a 41 54 41 56 52 49 53 50 20 4d 4f 44 45 2a 00     *ATAVRISP MODE*.

00000408 <__c.0>:
     408:	44 41 54 41 2d 00                                   DATA-.

0000040e <__c.1>:
     40e:	45 50 52 4d 2d 00                                   EPRM-.

00000414 <__c.2>:
     414:	46 55 53 45 2d 00                                   FUSE-.

0000041a <__c.3>:
     41a:	4c 4f 43 4b 2d 00                                   LOCK-.

00000420 <__c.0>:
     420:	4e 4f 20 54 41 47 53 00                             NO TAGS.

00000428 <__init>:
     428:	11 24       	eor	r1, r1
     42a:	1f be       	out	0x3f, r1	; 63
     42c:	cf ef       	ldi	r28, 0xFF	; 255
     42e:	d4 e0       	ldi	r29, 0x04	; 4
     430:	de bf       	out	0x3e, r29	; 62
     432:	cd bf       	out	0x3d, r28	; 61

00000434 <__do_copy_data>:
     434:	11 e0       	ldi	r17, 0x01	; 1
     436:	a0 e0       	ldi	r26, 0x00	; 0
     438:	b1 e0       	ldi	r27, 0x01	; 1
     43a:	e0 e4       	ldi	r30, 0x40	; 64
     43c:	f5 e3       	ldi	r31, 0x35	; 53
     43e:	02 c0       	rjmp	.+4      	; 0x444 <.do_copy_data_start>

00000440 <.do_copy_data_loop>:
     440:	05 90       	lpm	r0, Z+
     442:	0d 92       	st	X+, r0

00000444 <.do_copy_data_start>:
     444:	a4 30       	cpi	r26, 0x04	; 4
     446:	b1 07       	cpc	r27, r17
     448:	d9 f7       	brne	.-10     	; 0x440 <.do_copy_data_loop>

0000044a <__do_clear_bss>:
     44a:	12 e0       	ldi	r17, 0x02	; 2
     44c:	a4 e0       	ldi	r26, 0x04	; 4
     44e:	b1 e0       	ldi	r27, 0x01	; 1
     450:	01 c0       	rjmp	.+2      	; 0x454 <.do_clear_bss_start>

00000452 <.do_clear_bss_loop>:
     452:	1d 92       	st	X+, r1

00000454 <.do_clear_bss_start>:
     454:	a8 3b       	cpi	r26, 0xB8	; 184
     456:	b1 07       	cpc	r27, r17
     458:	e1 f7       	brne	.-8      	; 0x452 <.do_clear_bss_loop>
     45a:	0c 94 75 02 	jmp	0x4ea <main>

0000045e <__bad_interrupt>:
     45e:	0c 94 b4 03 	jmp	0x768 <__vector_default>

00000462 <MAIN_Delay10MS>:

// ======================================================================================

void MAIN_Delay10MS(uint8_t loops)
{
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     466:	28 2f       	mov	r18, r24
     468:	21 50       	subi	r18, 0x01	; 1
     46a:	2f 3f       	cpi	r18, 0xFF	; 255
     46c:	49 f0       	breq	.+18     	; 0x480 <MAIN_Delay10MS+0x1e>
     46e:	a0 e0       	ldi	r26, 0x00	; 0
     470:	b8 e4       	ldi	r27, 0x48	; 72
     472:	c0 e0       	ldi	r28, 0x00	; 0
     474:	d0 e0       	ldi	r29, 0x00	; 0
     476:	cd 01       	movw	r24, r26
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <MAIN_Delay10MS+0x16>
     47c:	21 50       	subi	r18, 0x01	; 1
     47e:	d8 f7       	brcc	.-10     	; 0x476 <MAIN_Delay10MS+0x14>
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <MAIN_WaitForJoyRelease>:
  /* Prevents the use of floating point libraries. Delaying in groups of
     10ms increases accuracy by reducing the time overhead for each loop
     interation of the while.                                            */

	while (loops--)
	  _delay_ms(10);
}

void MAIN_Delay1MS(uint8_t loops)
{
  /* Prevents the use of floating point libraries. Less accurate than the
     Delay10MS routine, but nessesary for many commands. The overhead required
     to call the routine is substantially less than the overhead required to
     calculate the float at compile time, so this actually saves execution time. */

	while (loops--)
	  _delay_ms(1);
}

void MAIN_ResetCSLine(const uint8_t ActiveInactive)
{
	/* ActiveInactive controls the /Reset line to an AVR device or external dataflash
	/CS line. If the reset polarity parameter is a 0 then interfacing with AT89
	devices which has an active high reset. Pins are tristated when inactive.         */
	
	switch (ActiveInactive)
	{
		case MAIN_RESETCS_ACTIVE:      // The target RESET line may be either active high or low.
			DDRF |= (1 << 6);
		
			if (!(eeprom_read_byte(&EEPROMVars.ResetPolarity))) // Translate to correct logic level for target device type
			  PORTF |=  (1 << 6);
			else
			  PORTF &= ~(1 << 6);
		
			break;
		case MAIN_RESETCS_EXTDFACTIVE: // Dataflashes are always active low.
			DDRF  |=  (1 << 6);
			PORTF &= ~(1 << 6);
			
			break;
		case MAIN_RESETCS_INACTIVE:    // Both modes tristate the pins when inactive.
			DDRF  &= ~(1 << 6);
			PORTF &= ~(1 << 6);
	}
}

void MAIN_WaitForJoyRelease(void)
{
	while (1)
	{
		while (JoyStatus) {};                   // Wait until joystick released
     486:	8e b3       	in	r24, 0x1e	; 30
     488:	88 23       	and	r24, r24
     48a:	e9 f7       	brne	.-6      	; 0x486 <MAIN_WaitForJoyRelease>

		MAIN_Delay10MS(1);
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>

		if (!(JoyStatus))                       // Joystick still released (not bouncing), return
     492:	8e b3       	in	r24, 0x1e	; 30
     494:	88 23       	and	r24, r24
     496:	b9 f7       	brne	.-18     	; 0x486 <MAIN_WaitForJoyRelease>
     498:	08 95       	ret

0000049a <FUNCShowAbout>:
		  return;
	}
}

void MAIN_IntToStr(uint16_t IntV, uint8_t* Buff)
{
	// Shows leading zeros, unlike itoa.

	uint8_t Temp = 0;
	
	while (IntV >= 100)
	{
		Temp++;
		IntV -= 100;
	}

	*(Buff++) = '0' + Temp;
	
	Temp = 0;
	
	while (IntV >= 10)
	{
		Temp++;
		IntV -= 10;
	}
		
	*(Buff++) = '0' + Temp;
	*(Buff++) = '0' + IntV;
	*(Buff)   = '\0';
}

void MAIN_ShowProgType(const uint8_t Letter)
{
	uint8_t ProgTypeBuffer[7];

	strcpy_P(ProgTypeBuffer, PSTR("PRG>  "));
	ProgTypeBuffer[5] = Letter;
	
	LCD_puts(ProgTypeBuffer);
}

void MAIN_ShowError(const uint8_t *pFlashStr)
{
	uint8_t ErrorBuff[LCD_TEXTBUFFER_SIZE];   // New buffer, LCD text buffer size
	
	ErrorBuff[0] = 'E';
	ErrorBuff[1] = '>';

	strcpy_P(&ErrorBuff[2], pFlashStr);       // WARNING: If error text is larger than (TEXTBUFFER_SIZE - 2),
	                                          // this will overflow the buffer and probably crash the micro!
	LCD_puts(ErrorBuff);
	
	MAIN_WaitForJoyRelease();
	while (!(JoyStatus & JOY_PRESS)) {};
	MAIN_WaitForJoyRelease();
}

// ======================================================================================

ISR(PCINT1_vect, ISR_NOBLOCK)                 // Joystick routine; PCINT0_vect is bound to this also via JoystickInterrupt.S
{
	JoyStatus = (~PINB & JOY_BMASK)
	          | (~PINE & JOY_EMASK);
			  
	TIMEOUT_SLEEP_TIMEOUT_RESET();
}

ISR(BADISR_vect, ISR_NAKED)                   // Bad ISR routine; should never be called, here for safety
{
	MAIN_ShowError(PSTR("BADISR"));
	while (1) {};
}

// ======================================================================================

void FUNCChangeSettings(void)
{
	uint8_t CurrSFunc = 0;
	
	JoyStatus = 1;

	while (1)
	{
		if (JoyStatus)                         // Joystick is in the non-center position
		{
			if (JoyStatus & JOY_UP)            // Previous function
			  (CurrSFunc == 0)? CurrSFunc = ARRAY_UPPERBOUND(SettingFunctionPtrs) : CurrSFunc--;
			else if (JoyStatus & JOY_DOWN)     // Next function
			  (CurrSFunc == ARRAY_UPPERBOUND(SettingFunctionPtrs))? CurrSFunc = 0 : CurrSFunc++;
			else if (JoyStatus & JOY_PRESS)    // Select current function
			  ((FuncPtr)pgm_read_word(&SettingFunctionPtrs[CurrSFunc]))(); // Run associated function
			else if (JoyStatus & JOY_LEFT)
			  return;
		
			// Show current function onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&SettingFunctionNames[CurrSFunc]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCShowAbout(void)
{
     49a:	cf 93       	push	r28
	uint8_t InfoNum = 0;
     49c:	c0 e0       	ldi	r28, 0x00	; 0
	
	JoyStatus = 1;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	8e bb       	out	0x1e, r24	; 30
			
	while (1)
	{
		if (JoyStatus)
     4a2:	8e b3       	in	r24, 0x1e	; 30
     4a4:	88 23       	and	r24, r24
     4a6:	e9 f3       	breq	.-6      	; 0x4a2 <FUNCShowAbout+0x8>
		{
			if (JoyStatus & JOY_UP)
     4a8:	f6 9b       	sbis	0x1e, 6	; 30
     4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <FUNCShowAbout+0x1e>
			  (InfoNum == 0)? InfoNum = ARRAY_UPPERBOUND(AboutTextPtrs) : InfoNum--;
     4ac:	cc 23       	and	r28, r28
     4ae:	11 f4       	brne	.+4      	; 0x4b4 <FUNCShowAbout+0x1a>
     4b0:	c3 e0       	ldi	r28, 0x03	; 3
     4b2:	0c c0       	rjmp	.+24     	; 0x4cc <FUNCShowAbout+0x32>
     4b4:	c1 50       	subi	r28, 0x01	; 1
     4b6:	0a c0       	rjmp	.+20     	; 0x4cc <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_DOWN)
     4b8:	f7 9b       	sbis	0x1e, 7	; 30
     4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <FUNCShowAbout+0x2e>
			  (InfoNum == ARRAY_UPPERBOUND(AboutTextPtrs))? InfoNum = 0 : InfoNum++;
     4bc:	c3 30       	cpi	r28, 0x03	; 3
     4be:	11 f4       	brne	.+4      	; 0x4c4 <FUNCShowAbout+0x2a>
     4c0:	c0 e0       	ldi	r28, 0x00	; 0
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <FUNCShowAbout+0x32>
     4c4:	cf 5f       	subi	r28, 0xFF	; 255
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_LEFT)
     4c8:	f2 99       	sbic	0x1e, 2	; 30
     4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <FUNCShowAbout+0x4c>
			  return;

			LCD_puts_f((uint8_t*)pgm_read_word(&AboutTextPtrs[InfoNum]));
     4cc:	ec 2f       	mov	r30, r28
     4ce:	ff 27       	eor	r31, r31
     4d0:	ee 0f       	add	r30, r30
     4d2:	ff 1f       	adc	r31, r31
     4d4:	e4 50       	subi	r30, 0x04	; 4
     4d6:	fe 4f       	sbci	r31, 0xFE	; 254
     4d8:	85 91       	lpm	r24, Z+
     4da:	94 91       	lpm	r25, Z
     4dc:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     4e0:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     4e4:	de cf       	rjmp	.-68     	; 0x4a2 <FUNCShowAbout+0x8>
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <main>:
     4ea:	cf ef       	ldi	r28, 0xFF	; 255
     4ec:	d4 e0       	ldi	r29, 0x04	; 4
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	c0 e0       	ldi	r28, 0x00	; 0
     4f4:	80 e8       	ldi	r24, 0x80	; 128
     4f6:	85 bf       	out	0x35, r24	; 53
     4f8:	85 bf       	out	0x35, r24	; 53
     4fa:	80 bf       	out	0x30, r24	; 48
     4fc:	85 e0       	ldi	r24, 0x05	; 5
     4fe:	80 93 64 00 	sts	0x0064, r24
     502:	80 e3       	ldi	r24, 0x30	; 48
     504:	80 bb       	out	0x10, r24	; 16
     506:	87 e2       	ldi	r24, 0x27	; 39
     508:	84 b9       	out	0x04, r24	; 4
     50a:	8f ed       	ldi	r24, 0xDF	; 223
     50c:	85 b9       	out	0x05, r24	; 5
     50e:	8c e0       	ldi	r24, 0x0C	; 12
     510:	8e b9       	out	0x0e, r24	; 14
     512:	80 93 6b 00 	sts	0x006B, r24
     516:	80 ed       	ldi	r24, 0xD0	; 208
     518:	80 93 6c 00 	sts	0x006C, r24
     51c:	80 ec       	ldi	r24, 0xC0	; 192
     51e:	8d bb       	out	0x1d, r24	; 29
     520:	8c bb       	out	0x1c, r24	; 28
     522:	81 b3       	in	r24, 0x11	; 17
     524:	8f 7c       	andi	r24, 0xCF	; 207
     526:	80 62       	ori	r24, 0x20	; 32
     528:	81 bb       	out	0x11, r24	; 17
     52a:	0e 94 0c 08 	call	0x1018 <LCD_Init>
     52e:	8f e0       	ldi	r24, 0x0F	; 15
     530:	80 93 e7 00 	sts	0x00E7, r24
     534:	80 e3       	ldi	r24, 0x30	; 48
     536:	92 e0       	ldi	r25, 0x02	; 2
     538:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     53c:	78 94       	sei
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     53e:	28 e8       	ldi	r18, 0x88	; 136
     540:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t result;
  asm volatile
     542:	d9 01       	movw	r26, r18
     544:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
     548:	80 2d       	mov	r24, r0
     54a:	8a 37       	cpi	r24, 0x7A	; 122
     54c:	81 f0       	breq	.+32     	; 0x56e <__stack+0x6f>
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	4f ef       	ldi	r20, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     554:	dc 01       	movw	r26, r24
     556:	04 2e       	mov	r0, r20
     558:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	89 38       	cpi	r24, 0x89	; 137
     560:	91 05       	cpc	r25, r1
     562:	c0 f3       	brcs	.-16     	; 0x554 <__stack+0x55>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
     564:	8a e7       	ldi	r24, 0x7A	; 122
  asm volatile (
     566:	d9 01       	movw	r26, r18
     568:	08 2e       	mov	r0, r24
     56a:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
     56e:	a5 e8       	ldi	r26, 0x85	; 133
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
     576:	80 2d       	mov	r24, r0
     578:	8f 70       	andi	r24, 0x0F	; 15
     57a:	80 93 e7 00 	sts	0x00E7, r24
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
     584:	81 b3       	in	r24, 0x11	; 17
     586:	80 63       	ori	r24, 0x30	; 48
     588:	81 bb       	out	0x11, r24	; 17
     58a:	0e 94 09 09 	call	0x1212 <USART_Init>
     58e:	0e 94 86 07 	call	0xf0c <OSCCAL_Calibrate>
     592:	0e 94 e9 0b 	call	0x17d2 <TOUT_SetupSleepTimer>
     596:	81 b3       	in	r24, 0x11	; 17
     598:	8f 7c       	andi	r24, 0xCF	; 207
     59a:	80 61       	ori	r24, 0x10	; 16
     59c:	81 bb       	out	0x11, r24	; 17
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	8e bb       	out	0x1e, r24	; 30
     5a2:	80 e8       	ldi	r24, 0x80	; 128
     5a4:	80 93 61 00 	sts	0x0061, r24
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	80 93 61 00 	sts	0x0061, r24
     5ae:	8e b3       	in	r24, 0x1e	; 30
     5b0:	88 23       	and	r24, r24
     5b2:	e9 f3       	breq	.-6      	; 0x5ae <__stack+0xaf>
     5b4:	f6 9b       	sbis	0x1e, 6	; 30
     5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <__stack+0xc5>
     5b8:	cc 23       	and	r28, r28
     5ba:	11 f4       	brne	.+4      	; 0x5c0 <__stack+0xc1>
     5bc:	c6 e0       	ldi	r28, 0x06	; 6
     5be:	1b c0       	rjmp	.+54     	; 0x5f6 <__stack+0xf7>
     5c0:	c1 50       	subi	r28, 0x01	; 1
     5c2:	19 c0       	rjmp	.+50     	; 0x5f6 <__stack+0xf7>
     5c4:	f7 9b       	sbis	0x1e, 7	; 30
     5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <__stack+0xd5>
     5c8:	c6 30       	cpi	r28, 0x06	; 6
     5ca:	11 f4       	brne	.+4      	; 0x5d0 <__stack+0xd1>
     5cc:	c0 e0       	ldi	r28, 0x00	; 0
     5ce:	13 c0       	rjmp	.+38     	; 0x5f6 <__stack+0xf7>
     5d0:	cf 5f       	subi	r28, 0xFF	; 255
     5d2:	11 c0       	rjmp	.+34     	; 0x5f6 <__stack+0xf7>
     5d4:	f4 9b       	sbis	0x1e, 4	; 30
     5d6:	0b c0       	rjmp	.+22     	; 0x5ee <__stack+0xef>
     5d8:	ec 2f       	mov	r30, r28
     5da:	ff 27       	eor	r31, r31
     5dc:	ee 0f       	add	r30, r30
     5de:	ff 1f       	adc	r31, r31
     5e0:	e5 57       	subi	r30, 0x75	; 117
     5e2:	fe 4f       	sbci	r31, 0xFE	; 254
     5e4:	85 91       	lpm	r24, Z+
     5e6:	94 91       	lpm	r25, Z
     5e8:	fc 01       	movw	r30, r24
     5ea:	09 95       	icall
     5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <__stack+0xf7>
     5ee:	f3 9b       	sbis	0x1e, 3	; 30
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <__stack+0xf7>
     5f2:	0e 94 4d 02 	call	0x49a <FUNCShowAbout>
     5f6:	ec 2f       	mov	r30, r28
     5f8:	ff 27       	eor	r31, r31
     5fa:	ee 0f       	add	r30, r30
     5fc:	ff 1f       	adc	r31, r31
     5fe:	e7 56       	subi	r30, 0x67	; 103
     600:	fe 4f       	sbci	r31, 0xFE	; 254
     602:	85 91       	lpm	r24, Z+
     604:	94 91       	lpm	r25, Z
     606:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     60a:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     60e:	cf cf       	rjmp	.-98     	; 0x5ae <__stack+0xaf>

00000610 <MAIN_Delay1MS>:
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     614:	28 2f       	mov	r18, r24
     616:	21 50       	subi	r18, 0x01	; 1
     618:	2f 3f       	cpi	r18, 0xFF	; 255
     61a:	49 f0       	breq	.+18     	; 0x62e <MAIN_Delay1MS+0x1e>
     61c:	a3 e3       	ldi	r26, 0x33	; 51
     61e:	b7 e0       	ldi	r27, 0x07	; 7
     620:	c0 e0       	ldi	r28, 0x00	; 0
     622:	d0 e0       	ldi	r29, 0x00	; 0
     624:	cd 01       	movw	r24, r26
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	f1 f7       	brne	.-4      	; 0x626 <MAIN_Delay1MS+0x16>
     62a:	21 50       	subi	r18, 0x01	; 1
     62c:	d8 f7       	brcc	.-10     	; 0x624 <MAIN_Delay1MS+0x14>
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <MAIN_ResetCSLine>:
     634:	99 27       	eor	r25, r25
     636:	81 30       	cpi	r24, 0x01	; 1
     638:	91 05       	cpc	r25, r1
     63a:	b1 f0       	breq	.+44     	; 0x668 <MAIN_ResetCSLine+0x34>
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	91 05       	cpc	r25, r1
     640:	1c f4       	brge	.+6      	; 0x648 <MAIN_ResetCSLine+0x14>
     642:	89 2b       	or	r24, r25
     644:	21 f0       	breq	.+8      	; 0x64e <MAIN_ResetCSLine+0x1a>
     646:	08 95       	ret
     648:	02 97       	sbiw	r24, 0x02	; 2
     64a:	59 f0       	breq	.+22     	; 0x662 <MAIN_ResetCSLine+0x2e>
     64c:	08 95       	ret
     64e:	86 9a       	sbi	0x10, 6	; 16
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     650:	a0 e0       	ldi	r26, 0x00	; 0
     652:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     654:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
     658:	80 2d       	mov	r24, r0
     65a:	88 23       	and	r24, r24
     65c:	19 f4       	brne	.+6      	; 0x664 <MAIN_ResetCSLine+0x30>
     65e:	8e 9a       	sbi	0x11, 6	; 17
     660:	08 95       	ret
     662:	86 9a       	sbi	0x10, 6	; 16
     664:	8e 98       	cbi	0x11, 6	; 17
     666:	08 95       	ret
     668:	86 98       	cbi	0x10, 6	; 16
     66a:	fc cf       	rjmp	.-8      	; 0x664 <MAIN_ResetCSLine+0x30>

0000066c <MAIN_IntToStr>:
     66c:	fb 01       	movw	r30, r22
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	84 36       	cpi	r24, 0x64	; 100
     672:	91 05       	cpc	r25, r1
     674:	20 f0       	brcs	.+8      	; 0x67e <MAIN_IntToStr+0x12>
     676:	2f 5f       	subi	r18, 0xFF	; 255
     678:	84 56       	subi	r24, 0x64	; 100
     67a:	90 40       	sbci	r25, 0x00	; 0
     67c:	f9 cf       	rjmp	.-14     	; 0x670 <MAIN_IntToStr+0x4>
     67e:	20 5d       	subi	r18, 0xD0	; 208
     680:	21 93       	st	Z+, r18
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	8a 30       	cpi	r24, 0x0A	; 10
     686:	91 05       	cpc	r25, r1
     688:	18 f0       	brcs	.+6      	; 0x690 <MAIN_IntToStr+0x24>
     68a:	2f 5f       	subi	r18, 0xFF	; 255
     68c:	0a 97       	sbiw	r24, 0x0a	; 10
     68e:	fa cf       	rjmp	.-12     	; 0x684 <MAIN_IntToStr+0x18>
     690:	20 5d       	subi	r18, 0xD0	; 208
     692:	21 93       	st	Z+, r18
     694:	80 5d       	subi	r24, 0xD0	; 208
     696:	81 93       	st	Z+, r24
     698:	10 82       	st	Z, r1
     69a:	08 95       	ret

0000069c <MAIN_ShowProgType>:
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	27 97       	sbiw	r28, 0x07	; 7
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	18 2f       	mov	r17, r24
     6b4:	6e e5       	ldi	r22, 0x5E	; 94
     6b6:	72 e0       	ldi	r23, 0x02	; 2
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	0e 94 1a 1a 	call	0x3434 <strcpy_P>
     6c0:	1e 83       	std	Y+6, r17	; 0x06
     6c2:	ce 01       	movw	r24, r28
     6c4:	01 96       	adiw	r24, 0x01	; 1
     6c6:	0e 94 19 08 	call	0x1032 <LCD_puts>
     6ca:	27 96       	adiw	r28, 0x07	; 7
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	08 95       	ret

000006de <MAIN_ShowError>:
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	64 97       	sbiw	r28, 0x14	; 20
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
     6f2:	25 e4       	ldi	r18, 0x45	; 69
     6f4:	29 83       	std	Y+1, r18	; 0x01
     6f6:	2e e3       	ldi	r18, 0x3E	; 62
     6f8:	2a 83       	std	Y+2, r18	; 0x02
     6fa:	bc 01       	movw	r22, r24
     6fc:	ce 01       	movw	r24, r28
     6fe:	03 96       	adiw	r24, 0x03	; 3
     700:	0e 94 1a 1a 	call	0x3434 <strcpy_P>
     704:	ce 01       	movw	r24, r28
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	0e 94 19 08 	call	0x1032 <LCD_puts>
     70c:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     710:	f4 9b       	sbis	0x1e, 4	; 30
     712:	fe cf       	rjmp	.-4      	; 0x710 <MAIN_ShowError+0x32>
     714:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     718:	64 96       	adiw	r28, 0x14	; 20
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <__vector_3>:
     72a:	78 94       	sei
     72c:	1f 92       	push	r1
     72e:	0f 92       	push	r0
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	0f 92       	push	r0
     734:	11 24       	eor	r1, r1
     736:	8f 93       	push	r24
     738:	9f 93       	push	r25
     73a:	93 b1       	in	r25, 0x03	; 3
     73c:	90 95       	com	r25
     73e:	90 7d       	andi	r25, 0xD0	; 208
     740:	8c b1       	in	r24, 0x0c	; 12
     742:	80 95       	com	r24
     744:	8c 70       	andi	r24, 0x0C	; 12
     746:	98 2b       	or	r25, r24
     748:	9e bb       	out	0x1e, r25	; 30
     74a:	10 92 3e 01 	sts	0x013E, r1
     74e:	10 92 3d 01 	sts	0x013D, r1
     752:	10 92 85 00 	sts	0x0085, r1
     756:	10 92 84 00 	sts	0x0084, r1
     75a:	9f 91       	pop	r25
     75c:	8f 91       	pop	r24
     75e:	0f 90       	pop	r0
     760:	0f be       	out	0x3f, r0	; 63
     762:	0f 90       	pop	r0
     764:	1f 90       	pop	r1
     766:	18 95       	reti

00000768 <__vector_default>:
     768:	85 e6       	ldi	r24, 0x65	; 101
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	0e 94 6f 03 	call	0x6de <MAIN_ShowError>
     770:	ff cf       	rjmp	.-2      	; 0x770 <__vector_default+0x8>

00000772 <FUNCChangeSettings>:
     772:	cf 93       	push	r28
     774:	c0 e0       	ldi	r28, 0x00	; 0
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	8e bb       	out	0x1e, r24	; 30
     77a:	8e b3       	in	r24, 0x1e	; 30
     77c:	88 23       	and	r24, r24
     77e:	e9 f3       	breq	.-6      	; 0x77a <FUNCChangeSettings+0x8>
     780:	f6 9b       	sbis	0x1e, 6	; 30
     782:	06 c0       	rjmp	.+12     	; 0x790 <FUNCChangeSettings+0x1e>
     784:	cc 23       	and	r28, r28
     786:	11 f4       	brne	.+4      	; 0x78c <FUNCChangeSettings+0x1a>
     788:	c5 e0       	ldi	r28, 0x05	; 5
     78a:	19 c0       	rjmp	.+50     	; 0x7be <FUNCChangeSettings+0x4c>
     78c:	c1 50       	subi	r28, 0x01	; 1
     78e:	17 c0       	rjmp	.+46     	; 0x7be <FUNCChangeSettings+0x4c>
     790:	f7 9b       	sbis	0x1e, 7	; 30
     792:	06 c0       	rjmp	.+12     	; 0x7a0 <FUNCChangeSettings+0x2e>
     794:	c5 30       	cpi	r28, 0x05	; 5
     796:	11 f4       	brne	.+4      	; 0x79c <FUNCChangeSettings+0x2a>
     798:	c0 e0       	ldi	r28, 0x00	; 0
     79a:	11 c0       	rjmp	.+34     	; 0x7be <FUNCChangeSettings+0x4c>
     79c:	cf 5f       	subi	r28, 0xFF	; 255
     79e:	0f c0       	rjmp	.+30     	; 0x7be <FUNCChangeSettings+0x4c>
     7a0:	f4 9b       	sbis	0x1e, 4	; 30
     7a2:	0b c0       	rjmp	.+22     	; 0x7ba <FUNCChangeSettings+0x48>
     7a4:	ec 2f       	mov	r30, r28
     7a6:	ff 27       	eor	r31, r31
     7a8:	ee 0f       	add	r30, r30
     7aa:	ff 1f       	adc	r31, r31
     7ac:	eb 5e       	subi	r30, 0xEB	; 235
     7ae:	fe 4f       	sbci	r31, 0xFE	; 254
     7b0:	85 91       	lpm	r24, Z+
     7b2:	94 91       	lpm	r25, Z
     7b4:	fc 01       	movw	r30, r24
     7b6:	09 95       	icall
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <FUNCChangeSettings+0x4c>
     7ba:	f2 99       	sbic	0x1e, 2	; 30
     7bc:	0d c0       	rjmp	.+26     	; 0x7d8 <FUNCChangeSettings+0x66>
     7be:	ec 2f       	mov	r30, r28
     7c0:	ff 27       	eor	r31, r31
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
     7c6:	ef 5d       	subi	r30, 0xDF	; 223
     7c8:	fe 4f       	sbci	r31, 0xFE	; 254
     7ca:	85 91       	lpm	r24, Z+
     7cc:	94 91       	lpm	r25, Z
     7ce:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     7d2:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     7d6:	d1 cf       	rjmp	.-94     	; 0x77a <FUNCChangeSettings+0x8>
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <FUNCAVRISPMode>:
		}
	}
}

void FUNCAVRISPMode(void)
{
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     7dc:	80 e3       	ldi	r24, 0x30	; 48
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     7e4:	0e 94 86 07 	call	0xf0c <OSCCAL_Calibrate>
     7e8:	80 91 c1 00 	lds	r24, 0x00C1
     7ec:	80 78       	andi	r24, 0x80	; 128
     7ee:	88 61       	ori	r24, 0x18	; 24
     7f0:	80 93 c1 00 	sts	0x00C1, r24
	LCD_puts_f(AVRISPModeMessage);
     7f4:	88 ef       	ldi	r24, 0xF8	; 248
     7f6:	93 e0       	ldi	r25, 0x03	; 3
     7f8:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
	
	InterpretPacketRoutine = (FuncPtr)AICI_InterpretPacket;
     7fc:	82 e7       	ldi	r24, 0x72	; 114
     7fe:	92 e1       	ldi	r25, 0x12	; 18
     800:	90 93 03 01 	sts	0x0103, r25
     804:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     808:	0e 94 78 0f 	call	0x1ef0 <V2P_RunStateMachine>
     80c:	08 95       	ret

0000080e <FUNCProgramDataflash>:
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     80e:	a1 e0       	ldi	r26, 0x01	; 1
     810:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     812:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
     816:	80 2d       	mov	r24, r0
     818:	0e 94 83 09 	call	0x1306 <USI_SPIInitMaster>
}

void FUNCProgramDataflash(void)
{
	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	UseExernalDF = TRUE;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	80 93 65 02 	sts	0x0265, r24
	DFSPIRoutinePointer = USI_SPITransmit;
     822:	8d e9       	ldi	r24, 0x9D	; 157
     824:	99 e0       	ldi	r25, 0x09	; 9
     826:	90 93 01 01 	sts	0x0101, r25
     82a:	80 93 00 01 	sts	0x0100, r24
	
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     82e:	80 e3       	ldi	r24, 0x30	; 48
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     836:	0e 94 86 07 	call	0xf0c <OSCCAL_Calibrate>
     83a:	80 91 c1 00 	lds	r24, 0x00C1
     83e:	80 78       	andi	r24, 0x80	; 128
     840:	88 61       	ori	r24, 0x18	; 24
     842:	80 93 c1 00 	sts	0x00C1, r24
	LCD_puts_f(DataFlashProgMode);
     846:	81 ed       	ldi	r24, 0xD1	; 209
     848:	93 e0       	ldi	r25, 0x03	; 3
     84a:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PD_InterpretAVRISPPacket;
     84e:	89 ea       	ldi	r24, 0xA9	; 169
     850:	9c e0       	ldi	r25, 0x0C	; 12
     852:	90 93 03 01 	sts	0x0103, r25
     856:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     85a:	0e 94 78 0f 	call	0x1ef0 <V2P_RunStateMachine>
	   
	DF_EnableDataflash(FALSE);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
	SPI_SPIOFF();
     864:	80 91 64 00 	lds	r24, 0x0064
     868:	84 60       	ori	r24, 0x04	; 4
     86a:	80 93 64 00 	sts	0x0064, r24
     86e:	08 95       	ret

00000870 <FUNCProgramAVR>:
}

void FUNCProgramAVR(void)
{
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	63 97       	sbiw	r28, 0x13	; 19
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
	uint8_t  DoneFailMessageBuff[19];
	uint8_t  Fault    = ISPCC_NO_FAULT;
     888:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t  ProgMode = 0;
     88a:	10 2f       	mov	r17, r16

	SPI_SPIInit();
     88c:	0e 94 2e 09 	call	0x125c <SPI_SPIInit>
	UseExernalDF = FALSE;
     890:	00 93 65 02 	sts	0x0265, r16
	DFSPIRoutinePointer = SPI_SPITransmit;
     894:	88 e3       	ldi	r24, 0x38	; 56
     896:	99 e0       	ldi	r25, 0x09	; 9
     898:	90 93 01 01 	sts	0x0101, r25
     89c:	80 93 00 01 	sts	0x0100, r24
	
	if (!(DF_CheckCorrectOnboardChip()))
     8a0:	0e 94 3c 0b 	call	0x1678 <DF_CheckCorrectOnboardChip>
     8a4:	88 23       	and	r24, r24
     8a6:	09 f4       	brne	.+2      	; 0x8aa <FUNCProgramAVR+0x3a>
     8a8:	0d c1       	rjmp	.+538    	; 0xac4 <FUNCProgramAVR+0x254>
	  return;

	MAIN_WaitForJoyRelease();
     8aa:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
	
	JoyStatus = 1;                              // Use an invalid joystick value to force the program to write the
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	8e bb       	out	0x1e, r24	; 30
	                                            // name of the default command onto the LCD
	while (1)
	{
		if (JoyStatus)
     8b2:	8e b3       	in	r24, 0x1e	; 30
     8b4:	88 23       	and	r24, r24
     8b6:	e9 f3       	breq	.-6      	; 0x8b2 <FUNCProgramAVR+0x42>
		{
			if (JoyStatus & JOY_LEFT)
     8b8:	f2 99       	sbic	0x1e, 2	; 30
     8ba:	04 c1       	rjmp	.+520    	; 0xac4 <FUNCProgramAVR+0x254>
			  return;
			else if (JoyStatus & JOY_PRESS)
     8bc:	f4 99       	sbic	0x1e, 4	; 30
     8be:	1c c0       	rjmp	.+56     	; 0x8f8 <FUNCProgramAVR+0x88>
			  break;
			else if (JoyStatus & JOY_UP)
     8c0:	f6 9b       	sbis	0x1e, 6	; 30
     8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <FUNCProgramAVR+0x60>
			  (ProgMode == 0)? ProgMode = ARRAY_UPPERBOUND(ProgOptions) : ProgMode--;
     8c4:	11 23       	and	r17, r17
     8c6:	11 f4       	brne	.+4      	; 0x8cc <FUNCProgramAVR+0x5c>
     8c8:	16 e0       	ldi	r17, 0x06	; 6
     8ca:	09 c0       	rjmp	.+18     	; 0x8de <FUNCProgramAVR+0x6e>
     8cc:	11 50       	subi	r17, 0x01	; 1
     8ce:	07 c0       	rjmp	.+14     	; 0x8de <FUNCProgramAVR+0x6e>
			else if (JoyStatus & JOY_DOWN)
     8d0:	f7 9b       	sbis	0x1e, 7	; 30
     8d2:	05 c0       	rjmp	.+10     	; 0x8de <FUNCProgramAVR+0x6e>
			  (ProgMode == ARRAY_UPPERBOUND(ProgOptions))? ProgMode = 0 : ProgMode++;
     8d4:	16 30       	cpi	r17, 0x06	; 6
     8d6:	11 f4       	brne	.+4      	; 0x8dc <FUNCProgramAVR+0x6c>
     8d8:	10 e0       	ldi	r17, 0x00	; 0
     8da:	01 c0       	rjmp	.+2      	; 0x8de <FUNCProgramAVR+0x6e>
     8dc:	1f 5f       	subi	r17, 0xFF	; 255

			LCD_puts_f((uint8_t*)pgm_read_word(&ProgOptions[ProgMode])); // Show current function onto the LCD
     8de:	e1 2f       	mov	r30, r17
     8e0:	ff 27       	eor	r31, r31
     8e2:	ee 0f       	add	r30, r30
     8e4:	ff 1f       	adc	r31, r31
     8e6:	ee 55       	subi	r30, 0x5E	; 94
     8e8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ea:	85 91       	lpm	r24, Z+
     8ec:	94 91       	lpm	r25, Z
     8ee:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     8f2:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     8f6:	dd cf       	rjmp	.-70     	; 0x8b2 <FUNCProgramAVR+0x42>
		}
	}

	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);                // Orange = busy
     8f8:	81 b3       	in	r24, 0x11	; 17
     8fa:	80 63       	ori	r24, 0x30	; 48
     8fc:	81 bb       	out	0x11, r24	; 17
	LCD_puts_f(WaitText);
     8fe:	80 e3       	ldi	r24, 0x30	; 48
     900:	92 e0       	ldi	r25, 0x02	; 2
     902:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     906:	a1 e0       	ldi	r26, 0x01	; 1
     908:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     90a:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
     90e:	80 2d       	mov	r24, r0
     910:	0e 94 83 09 	call	0x1306 <USI_SPIInitMaster>

	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	0e 94 1a 03 	call	0x634 <MAIN_ResetCSLine>
     91a:	eb e4       	ldi	r30, 0x4B	; 75
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	9b e0       	ldi	r25, 0x0B	; 11
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     924:	d9 01       	movw	r26, r18
     926:	ad 5d       	subi	r26, 0xDD	; 221
     928:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
     92a:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
     92e:	80 2d       	mov	r24, r0
     930:	81 93       	st	Z+, r24
			
	for (uint8_t PacketB = 0; PacketB <= 11; PacketB++) // Read the enter programming mode command bytes
     932:	91 50       	subi	r25, 0x01	; 1
     934:	2f 5f       	subi	r18, 0xFF	; 255
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	97 ff       	sbrs	r25, 7
     93a:	f4 cf       	rjmp	.-24     	; 0x924 <FUNCProgramAVR+0xb4>
	  PacketBytes[PacketB] = eeprom_read_byte(&EEPROMVars.EnterProgMode[PacketB]);
	
	ISPCC_EnterChipProgrammingMode();    // Try to sync with the slave AVR
     93c:	0e 94 e2 10 	call	0x21c4 <ISPCC_EnterChipProgrammingMode>

	CurrAddress = 0;
     940:	10 92 42 01 	sts	0x0142, r1
     944:	10 92 43 01 	sts	0x0143, r1
     948:	10 92 44 01 	sts	0x0144, r1
     94c:	10 92 45 01 	sts	0x0145, r1

	if (PacketBytes[1] == AICB_STATUS_CMD_OK) // ISPCC_EnterChipProgrammingMode alters the PacketBytes buffer rather than returning a value
     950:	80 91 4c 01 	lds	r24, 0x014C
     954:	88 23       	and	r24, r24
     956:	09 f0       	breq	.+2      	; 0x95a <FUNCProgramAVR+0xea>
     958:	a0 c0       	rjmp	.+320    	; 0xa9a <FUNCProgramAVR+0x22a>
	{						
		if ((ProgMode == 6) || (ProgMode == 0) || (ProgMode == 2)) // Erase chip, or program flash mode
     95a:	16 30       	cpi	r17, 0x06	; 6
     95c:	21 f0       	breq	.+8      	; 0x966 <FUNCProgramAVR+0xf6>
     95e:	11 23       	and	r17, r17
     960:	11 f0       	breq	.+4      	; 0x966 <FUNCProgramAVR+0xf6>
     962:	12 30       	cpi	r17, 0x02	; 2
     964:	91 f4       	brne	.+36     	; 0x98a <FUNCProgramAVR+0x11a>
		{
			MAIN_ShowProgType('C');
     966:	83 e4       	ldi	r24, 0x43	; 67
     968:	0e 94 4e 03 	call	0x69c <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     96c:	a4 e1       	ldi	r26, 0x14	; 20
     96e:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     970:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
     974:	80 2d       	mov	r24, r0
     976:	81 30       	cpi	r24, 0x01	; 1
     978:	31 f0       	breq	.+12     	; 0x986 <FUNCProgramAVR+0x116>
			
			if (!(eeprom_read_byte(&EEPROMVars.EraseCmdStored) == TRUE))
			{
				Fault = ISPCC_FAULT_NOERASE;
     97a:	02 e0       	ldi	r16, 0x02	; 2
				MAIN_ShowError(PSTR("NO ERASE CMD"));
     97c:	8c e6       	ldi	r24, 0x6C	; 108
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	0e 94 6f 03 	call	0x6de <MAIN_ShowError>
     984:	02 c0       	rjmp	.+4      	; 0x98a <FUNCProgramAVR+0x11a>
			}
			else
			{
				PM_SendEraseCommand();
     986:	0e 94 76 17 	call	0x2eec <PM_SendEraseCommand>
			}
		}

		if (((ProgMode == 0) || (ProgMode == 2)) && (Fault == ISPCC_NO_FAULT)) // Program flash
     98a:	11 23       	and	r17, r17
     98c:	11 f0       	breq	.+4      	; 0x992 <FUNCProgramAVR+0x122>
     98e:	12 30       	cpi	r17, 0x02	; 2
     990:	b9 f4       	brne	.+46     	; 0x9c0 <FUNCProgramAVR+0x150>
     992:	00 23       	and	r16, r16
     994:	a9 f4       	brne	.+42     	; 0x9c0 <FUNCProgramAVR+0x150>
		{
			MAIN_ShowProgType('D');
     996:	84 e4       	ldi	r24, 0x44	; 68
     998:	0e 94 4e 03 	call	0x69c <MAIN_ShowProgType>

			if (!(PM_GetStoredDataSize(TYPE_FLASH))) // Check to make sure a program is present in memory
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	0e 94 e2 13 	call	0x27c4 <PM_GetStoredDataSize>
     9a2:	dc 01       	movw	r26, r24
     9a4:	cb 01       	movw	r24, r22
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	a1 05       	cpc	r26, r1
     9aa:	b1 05       	cpc	r27, r1
     9ac:	31 f4       	brne	.+12     	; 0x9ba <FUNCProgramAVR+0x14a>
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     9ae:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO DATA"));
     9b0:	89 e7       	ldi	r24, 0x79	; 121
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	0e 94 6f 03 	call	0x6de <MAIN_ShowError>
     9b8:	03 c0       	rjmp	.+6      	; 0x9c0 <FUNCProgramAVR+0x150>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_FLASH);
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	0e 94 a5 17 	call	0x2f4a <PM_CreateProgrammingPackets>
			}
		}
	
		if ((ProgMode == 1) || (ProgMode == 2)) // Program EEPROM
     9c0:	81 2f       	mov	r24, r17
     9c2:	81 50       	subi	r24, 0x01	; 1
     9c4:	82 30       	cpi	r24, 0x02	; 2
     9c6:	a8 f4       	brcc	.+42     	; 0x9f2 <FUNCProgramAVR+0x182>
		{
			MAIN_ShowProgType('E');
     9c8:	85 e4       	ldi	r24, 0x45	; 69
     9ca:	0e 94 4e 03 	call	0x69c <MAIN_ShowProgType>
				
			if (!(PM_GetStoredDataSize(TYPE_EEPROM))) // Check to make sure EEPROM data is present in memory
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	0e 94 e2 13 	call	0x27c4 <PM_GetStoredDataSize>
     9d4:	dc 01       	movw	r26, r24
     9d6:	cb 01       	movw	r24, r22
     9d8:	00 97       	sbiw	r24, 0x00	; 0
     9da:	a1 05       	cpc	r26, r1
     9dc:	b1 05       	cpc	r27, r1
     9de:	31 f4       	brne	.+12     	; 0x9ec <FUNCProgramAVR+0x17c>
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     9e0:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO EEPROM"));
     9e2:	81 e8       	ldi	r24, 0x81	; 129
     9e4:	92 e0       	ldi	r25, 0x02	; 2
     9e6:	0e 94 6f 03 	call	0x6de <MAIN_ShowError>
     9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <FUNCProgramAVR+0x182>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_EEPROM);
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 a5 17 	call	0x2f4a <PM_CreateProgrammingPackets>
			}
		}

		if ((ProgMode == 3) || (ProgMode == 5)) // Program Fuse bytes
     9f2:	13 30       	cpi	r17, 0x03	; 3
     9f4:	11 f0       	breq	.+4      	; 0x9fa <FUNCProgramAVR+0x18a>
     9f6:	15 30       	cpi	r17, 0x05	; 5
     9f8:	99 f4       	brne	.+38     	; 0xa20 <FUNCProgramAVR+0x1b0>
		{
			MAIN_ShowProgType('F');
     9fa:	86 e4       	ldi	r24, 0x46	; 70
     9fc:	0e 94 4e 03 	call	0x69c <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     a00:	af e2       	ldi	r26, 0x2F	; 47
     a02:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     a04:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
     a08:	80 2d       	mov	r24, r0
     a0a:	88 23       	and	r24, r24
     a0c:	31 f4       	brne	.+12     	; 0xa1a <FUNCProgramAVR+0x1aa>
			
			if (!(eeprom_read_byte(&EEPROMVars.TotalFuseBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     a0e:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO FUSE BYTES"));
     a10:	8b e8       	ldi	r24, 0x8B	; 139
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	0e 94 6f 03 	call	0x6de <MAIN_ShowError>
     a18:	03 c0       	rjmp	.+6      	; 0xa20 <FUNCProgramAVR+0x1b0>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_FUSE);
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	0e 94 45 17 	call	0x2e8a <PM_SendFuseLockBytes>
			}
		}

		if ((ProgMode == 4) || (ProgMode == 5)) // Program Lock bytes
     a20:	81 2f       	mov	r24, r17
     a22:	84 50       	subi	r24, 0x04	; 4
     a24:	82 30       	cpi	r24, 0x02	; 2
     a26:	00 f5       	brcc	.+64     	; 0xa68 <FUNCProgramAVR+0x1f8>
		{
			if (ProgMode == 5)                    // If fusebytes have already been written, we need to reenter programming mode to latch them
     a28:	15 30       	cpi	r17, 0x05	; 5
     a2a:	59 f4       	brne	.+22     	; 0xa42 <FUNCProgramAVR+0x1d2>
			{
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line of the slave AVR
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	0e 94 1a 03 	call	0x634 <MAIN_ResetCSLine>
				MAIN_Delay10MS(1);
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
				MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	0e 94 1a 03 	call	0x634 <MAIN_ResetCSLine>
				ISPCC_EnterChipProgrammingMode(); // Try to sync with the slave AVR
     a3e:	0e 94 e2 10 	call	0x21c4 <ISPCC_EnterChipProgrammingMode>
			}

			MAIN_ShowProgType('L');
     a42:	8c e4       	ldi	r24, 0x4C	; 76
     a44:	0e 94 4e 03 	call	0x69c <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     a48:	a0 e3       	ldi	r26, 0x30	; 48
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     a4c:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
     a50:	80 2d       	mov	r24, r0
     a52:	88 23       	and	r24, r24
     a54:	31 f4       	brne	.+12     	; 0xa62 <FUNCProgramAVR+0x1f2>
		
			if (!(eeprom_read_byte(&EEPROMVars.TotalLockBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     a56:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO LOCK BYTES"));
     a58:	89 e9       	ldi	r24, 0x99	; 153
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	0e 94 6f 03 	call	0x6de <MAIN_ShowError>
     a60:	03 c0       	rjmp	.+6      	; 0xa68 <FUNCProgramAVR+0x1f8>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_LOCK);
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	0e 94 45 17 	call	0x2e8a <PM_SendFuseLockBytes>
			}
		}

		strcpy_P(DoneFailMessageBuff, PSTR("PROGRAMMING DONE"));
     a68:	67 ea       	ldi	r22, 0xA7	; 167
     a6a:	72 e0       	ldi	r23, 0x02	; 2
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	0e 94 1a 1a 	call	0x3434 <strcpy_P>

		if (Fault != ISPCC_NO_FAULT)         // Takes less code to just overwrite part of the string on fail
     a74:	00 23       	and	r16, r16
     a76:	31 f0       	breq	.+12     	; 0xa84 <FUNCProgramAVR+0x214>
		  strcpy_P(&DoneFailMessageBuff[12], PSTR("FAILED"));
     a78:	68 eb       	ldi	r22, 0xB8	; 184
     a7a:	72 e0       	ldi	r23, 0x02	; 2
     a7c:	ce 01       	movw	r24, r28
     a7e:	0d 96       	adiw	r24, 0x0d	; 13
     a80:	0e 94 1a 1a 	call	0x3434 <strcpy_P>

		LCD_puts(DoneFailMessageBuff);
     a84:	ce 01       	movw	r24, r28
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	0e 94 19 08 	call	0x1032 <LCD_puts>

		MAIN_Delay10MS(255);
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
		MAIN_Delay10MS(100);
     a92:	84 e6       	ldi	r24, 0x64	; 100
     a94:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
     a98:	04 c0       	rjmp	.+8      	; 0xaa2 <FUNCProgramAVR+0x232>
	}
	else
	{
		MAIN_ShowError(SyncErrorMessage);
     a9a:	8d ee       	ldi	r24, 0xED	; 237
     a9c:	93 e0       	ldi	r25, 0x03	; 3
     a9e:	0e 94 6f 03 	call	0x6de <MAIN_ShowError>
	}
	
	MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run	
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	0e 94 1a 03 	call	0x634 <MAIN_ResetCSLine>
	USI_SPIOff();
     aa8:	0e 94 93 09 	call	0x1326 <USI_SPIOff>
	DF_EnableDataflash(FALSE);
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
	SPI_SPIOFF();
     ab2:	80 91 64 00 	lds	r24, 0x0064
     ab6:	84 60       	ori	r24, 0x04	; 4
     ab8:	80 93 64 00 	sts	0x0064, r24
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Green = ready
     abc:	81 b3       	in	r24, 0x11	; 17
     abe:	8f 7c       	andi	r24, 0xCF	; 207
     ac0:	80 61       	ori	r24, 0x10	; 16
     ac2:	81 bb       	out	0x11, r24	; 17
     ac4:	63 96       	adiw	r28, 0x13	; 19
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <FUNCStoreProgram>:
}

void FUNCStoreProgram(void)
{
	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     ada:	88 e3       	ldi	r24, 0x38	; 56
     adc:	99 e0       	ldi	r25, 0x09	; 9
     ade:	90 93 01 01 	sts	0x0101, r25
     ae2:	80 93 00 01 	sts	0x0100, r24
	SPI_SPIInit();
     ae6:	0e 94 2e 09 	call	0x125c <SPI_SPIInit>
	UseExernalDF = FALSE;
     aea:	10 92 65 02 	sts	0x0265, r1
	DF_EnableDataflash(TRUE);
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>

	if (!(DF_CheckCorrectOnboardChip()))
     af4:	0e 94 3c 0b 	call	0x1678 <DF_CheckCorrectOnboardChip>
     af8:	88 23       	and	r24, r24
     afa:	01 f1       	breq	.+64     	; 0xb3c <FUNCStoreProgram+0x62>
	  return;
			
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
     afc:	80 e3       	ldi	r24, 0x30	; 48
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     b04:	0e 94 86 07 	call	0xf0c <OSCCAL_Calibrate>
     b08:	80 91 c1 00 	lds	r24, 0x00C1
     b0c:	80 78       	andi	r24, 0x80	; 128
     b0e:	88 61       	ori	r24, 0x18	; 24
     b10:	80 93 c1 00 	sts	0x00C1, r24
	LCD_puts_f(PSTR("*STORAGE MODE*"));
     b14:	8f eb       	ldi	r24, 0xBF	; 191
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PM_InterpretAVRISPPacket;
     b1c:	87 ef       	ldi	r24, 0xF7	; 247
     b1e:	94 e1       	ldi	r25, 0x14	; 20
     b20:	90 93 03 01 	sts	0x0103, r25
     b24:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     b28:	0e 94 78 0f 	call	0x1ef0 <V2P_RunStateMachine>
	
	DF_EnableDataflash(FALSE);
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
	SPI_SPIOFF();
     b32:	80 91 64 00 	lds	r24, 0x0064
     b36:	84 60       	ori	r24, 0x04	; 4
     b38:	80 93 64 00 	sts	0x0064, r24
     b3c:	08 95       	ret

00000b3e <FUNCClearMem>:
}

void FUNCClearMem(void)
{
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
	LCD_puts_f(PSTR("CONFIRM"));
     b42:	8e ec       	ldi	r24, 0xCE	; 206
     b44:	92 e0       	ldi	r25, 0x02	; 2
     b46:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
	MAIN_Delay10MS(180);
     b4a:	84 eb       	ldi	r24, 0xB4	; 180
     b4c:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>

	LCD_puts_f(PSTR("<N Y>"));
     b50:	86 ed       	ldi	r24, 0xD6	; 214
     b52:	92 e0       	ldi	r25, 0x02	; 2
     b54:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

	while (1)
	{
		if (JoyStatus)
     b58:	8e b3       	in	r24, 0x1e	; 30
     b5a:	88 23       	and	r24, r24
     b5c:	e9 f3       	breq	.-6      	; 0xb58 <FUNCClearMem+0x1a>
		{
			if (JoyStatus & JOY_LEFT)
     b5e:	8e b3       	in	r24, 0x1e	; 30
     b60:	99 27       	eor	r25, r25
     b62:	ec 01       	movw	r28, r24
     b64:	c4 70       	andi	r28, 0x04	; 4
     b66:	d0 70       	andi	r29, 0x00	; 0
     b68:	82 fd       	sbrc	r24, 2
     b6a:	19 c0       	rjmp	.+50     	; 0xb9e <FUNCClearMem+0x60>
			  return;
			else if (JoyStatus & JOY_RIGHT)
     b6c:	f3 9b       	sbis	0x1e, 3	; 30
     b6e:	f4 cf       	rjmp	.-24     	; 0xb58 <FUNCClearMem+0x1a>
			  break;
		}
	}

	MAIN_WaitForJoyRelease();
     b70:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>

	LCD_puts_f(WaitText);
     b74:	80 e3       	ldi	r24, 0x30	; 48
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

	for (uint16_t EAddr = 0; EAddr < sizeof(EEPROMVars); EAddr++)
     b7c:	ce 01       	movw	r24, r28
     b7e:	2f ef       	ldi	r18, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     b80:	dc 01       	movw	r26, r24
     b82:	02 2e       	mov	r0, r18
     b84:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	89 38       	cpi	r24, 0x89	; 137
     b8c:	91 05       	cpc	r25, r1
     b8e:	c0 f3       	brcs	.-16     	; 0xb80 <FUNCClearMem+0x42>
	  eeprom_write_byte((uint8_t*)EAddr, 0xFF);

	LCD_puts_f(PSTR("MEM CLEARED"));
     b90:	8c ed       	ldi	r24, 0xDC	; 220
     b92:	92 e0       	ldi	r25, 0x02	; 2
     b94:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
	MAIN_Delay10MS(255);
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <FUNCSetContrast>:
}

void FUNCSetContrast(void)
{
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	26 97       	sbiw	r28, 0x06	; 6
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     bbe:	85 e8       	ldi	r24, 0x85	; 133
     bc0:	e8 2e       	mov	r14, r24
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	f8 2e       	mov	r15, r24
  uint8_t result;
  asm volatile
     bc6:	d7 01       	movw	r26, r14
     bc8:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
     bcc:	80 2d       	mov	r24, r0
     bce:	18 2f       	mov	r17, r24
     bd0:	1f 70       	andi	r17, 0x0F	; 15
	uint8_t Buffer[6];
	uint8_t Contrast = (eeprom_read_byte(&EEPROMVars.LCDContrast) & 0x0F); // Ranges from 0-15 so mask retuns 15 on blank EEPROM (0xFF)
	
	JoyStatus = 1;                          // Invalid value to force the LCD to update
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)
     bd6:	8e b3       	in	r24, 0x1e	; 30
     bd8:	88 23       	and	r24, r24
     bda:	e9 f3       	breq	.-6      	; 0xbd6 <FUNCSetContrast+0x32>
		{
			if (JoyStatus & JOY_UP)
     bdc:	f6 9b       	sbis	0x1e, 6	; 30
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <FUNCSetContrast+0x44>
			{
				if (Contrast < 15)
     be0:	1f 30       	cpi	r17, 0x0F	; 15
     be2:	78 f4       	brcc	.+30     	; 0xc02 <FUNCSetContrast+0x5e>
				  Contrast++;
     be4:	1f 5f       	subi	r17, 0xFF	; 255
     be6:	0d c0       	rjmp	.+26     	; 0xc02 <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_DOWN)
     be8:	f7 9b       	sbis	0x1e, 7	; 30
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <FUNCSetContrast+0x50>
			{
				if (Contrast > 1)          // Zero is non-visible, so 1 is the minimum
     bec:	12 30       	cpi	r17, 0x02	; 2
     bee:	48 f0       	brcs	.+18     	; 0xc02 <FUNCSetContrast+0x5e>
				  Contrast--;
     bf0:	11 50       	subi	r17, 0x01	; 1
     bf2:	07 c0       	rjmp	.+14     	; 0xc02 <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_LEFT)
     bf4:	f2 9b       	sbis	0x1e, 2	; 30
     bf6:	05 c0       	rjmp	.+10     	; 0xc02 <FUNCSetContrast+0x5e>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     bf8:	d7 01       	movw	r26, r14
     bfa:	01 2e       	mov	r0, r17
     bfc:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.LCDContrast, Contrast);
				return;
     c00:	18 c0       	rjmp	.+48     	; 0xc32 <FUNCSetContrast+0x8e>
			}
					
			Buffer[0] = 'C';
     c02:	83 e4       	ldi	r24, 0x43	; 67
     c04:	89 83       	std	Y+1, r24	; 0x01
			Buffer[1] = 'T';
     c06:	84 e5       	ldi	r24, 0x54	; 84
     c08:	8a 83       	std	Y+2, r24	; 0x02
			Buffer[2] = ' ';
     c0a:	80 e2       	ldi	r24, 0x20	; 32
     c0c:	8b 83       	std	Y+3, r24	; 0x03

			MAIN_IntToStr((uint16_t)Contrast, &Buffer[3]);
     c0e:	be 01       	movw	r22, r28
     c10:	6c 5f       	subi	r22, 0xFC	; 252
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	81 2f       	mov	r24, r17
     c16:	99 27       	eor	r25, r25
     c18:	0e 94 36 03 	call	0x66c <MAIN_IntToStr>
			LCD_puts(Buffer);
     c1c:	ce 01       	movw	r24, r28
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	0e 94 19 08 	call	0x1032 <LCD_puts>

			LCD_CONTRAST_LEVEL(Contrast);
     c24:	81 2f       	mov	r24, r17
     c26:	8f 70       	andi	r24, 0x0F	; 15
     c28:	80 93 e7 00 	sts	0x00E7, r24

			MAIN_WaitForJoyRelease();
     c2c:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     c30:	d2 cf       	rjmp	.-92     	; 0xbd6 <FUNCSetContrast+0x32>
     c32:	26 96       	adiw	r28, 0x06	; 6
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	08 95       	ret

00000c4a <FUNCSetISPSpeed>:
		}
	}
}

void FUNCSetISPSpeed(void)
{
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     c50:	01 e0       	ldi	r16, 0x01	; 1
     c52:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t result;
  asm volatile
     c54:	d8 01       	movw	r26, r16
     c56:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
     c5a:	80 2d       	mov	r24, r0
     c5c:	c8 2f       	mov	r28, r24
	uint8_t CurrSpeed = eeprom_read_byte(&EEPROMVars.SCKDuration);

	if (CurrSpeed > ARRAY_UPPERBOUND(USISpeeds)) CurrSpeed = ARRAY_UPPERBOUND(USISpeeds); // Protection against blank EEPROM
     c5e:	84 30       	cpi	r24, 0x04	; 4
     c60:	08 f0       	brcs	.+2      	; 0xc64 <FUNCSetISPSpeed+0x1a>
     c62:	c3 e0       	ldi	r28, 0x03	; 3

	JoyStatus = 1;                         // Invalid value to force the LCD to update
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     c68:	8e b3       	in	r24, 0x1e	; 30
     c6a:	88 23       	and	r24, r24
     c6c:	e9 f3       	breq	.-6      	; 0xc68 <FUNCSetISPSpeed+0x1e>
		{
			if (JoyStatus & JOY_UP)
     c6e:	f6 9b       	sbis	0x1e, 6	; 30
     c70:	06 c0       	rjmp	.+12     	; 0xc7e <FUNCSetISPSpeed+0x34>
			{
				(CurrSpeed == 0)? CurrSpeed = ARRAY_UPPERBOUND(USISpeeds) : CurrSpeed--;
     c72:	cc 23       	and	r28, r28
     c74:	11 f4       	brne	.+4      	; 0xc7a <FUNCSetISPSpeed+0x30>
     c76:	c3 e0       	ldi	r28, 0x03	; 3
     c78:	11 c0       	rjmp	.+34     	; 0xc9c <FUNCSetISPSpeed+0x52>
     c7a:	c1 50       	subi	r28, 0x01	; 1
     c7c:	0f c0       	rjmp	.+30     	; 0xc9c <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_DOWN)
     c7e:	f7 9b       	sbis	0x1e, 7	; 30
     c80:	06 c0       	rjmp	.+12     	; 0xc8e <FUNCSetISPSpeed+0x44>
			{
				(CurrSpeed == ARRAY_UPPERBOUND(USISpeeds))? CurrSpeed = 0 : CurrSpeed++;
     c82:	c3 30       	cpi	r28, 0x03	; 3
     c84:	11 f4       	brne	.+4      	; 0xc8a <FUNCSetISPSpeed+0x40>
     c86:	c0 e0       	ldi	r28, 0x00	; 0
     c88:	09 c0       	rjmp	.+18     	; 0xc9c <FUNCSetISPSpeed+0x52>
     c8a:	cf 5f       	subi	r28, 0xFF	; 255
     c8c:	07 c0       	rjmp	.+14     	; 0xc9c <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_LEFT)
     c8e:	f2 9b       	sbis	0x1e, 2	; 30
     c90:	05 c0       	rjmp	.+10     	; 0xc9c <FUNCSetISPSpeed+0x52>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     c92:	d8 01       	movw	r26, r16
     c94:	0c 2e       	mov	r0, r28
     c96:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.SCKDuration, CurrSpeed);
				return;
     c9a:	0b c0       	rjmp	.+22     	; 0xcb2 <FUNCSetISPSpeed+0x68>
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f(USISpeeds[CurrSpeed]);
     c9c:	8a e0       	ldi	r24, 0x0A	; 10
     c9e:	c8 9f       	mul	r28, r24
     ca0:	c0 01       	movw	r24, r0
     ca2:	11 24       	eor	r1, r1
     ca4:	86 58       	subi	r24, 0x86	; 134
     ca6:	9f 4f       	sbci	r25, 0xFF	; 255
     ca8:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     cac:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     cb0:	db cf       	rjmp	.-74     	; 0xc68 <FUNCSetISPSpeed+0x1e>
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	08 95       	ret

00000cba <FUNCSetFirmMinorVer>:
		}
	}
}

void FUNCSetFirmMinorVer(void)
{
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	25 97       	sbiw	r28, 0x05	; 5
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     cd4:	96 e8       	ldi	r25, 0x86	; 134
     cd6:	e9 2e       	mov	r14, r25
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	f9 2e       	mov	r15, r25
  uint8_t result;
  asm volatile
     cdc:	d7 01       	movw	r26, r14
     cde:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
     ce2:	80 2d       	mov	r24, r0
     ce4:	18 2f       	mov	r17, r24
	uint8_t VerBuffer[5];
	uint8_t VerMinor = eeprom_read_byte(&EEPROMVars.FirmVerMinor);

	if (VerMinor > 9)
     ce6:	8a 30       	cpi	r24, 0x0A	; 10
     ce8:	08 f0       	brcs	.+2      	; 0xcec <FUNCSetFirmMinorVer+0x32>
	  VerMinor = V2P_SW_VERSION_MINOR_DEFAULT;
     cea:	14 e0       	ldi	r17, 0x04	; 4
	
	strcpy_P(VerBuffer, PSTR("V2- "));
     cec:	68 ee       	ldi	r22, 0xE8	; 232
     cee:	72 e0       	ldi	r23, 0x02	; 2
     cf0:	ce 01       	movw	r24, r28
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	0e 94 1a 1a 	call	0x3434 <strcpy_P>

	JoyStatus = 1;                        // Invalid value to force the LCD to update
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     cfc:	8e b3       	in	r24, 0x1e	; 30
     cfe:	88 23       	and	r24, r24
     d00:	e9 f3       	breq	.-6      	; 0xcfc <FUNCSetFirmMinorVer+0x42>
		{
			if (JoyStatus & JOY_UP)
     d02:	f6 9b       	sbis	0x1e, 6	; 30
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <FUNCSetFirmMinorVer+0x52>
			{
				if (VerMinor < 9)
     d06:	19 30       	cpi	r17, 0x09	; 9
     d08:	08 f4       	brcc	.+2      	; 0xd0c <FUNCSetFirmMinorVer+0x52>
				  VerMinor++;
     d0a:	1f 5f       	subi	r17, 0xFF	; 255
			}
			if (JoyStatus & JOY_DOWN)
     d0c:	f7 9b       	sbis	0x1e, 7	; 30
     d0e:	04 c0       	rjmp	.+8      	; 0xd18 <FUNCSetFirmMinorVer+0x5e>
			{
				if (VerMinor)
     d10:	11 23       	and	r17, r17
     d12:	49 f0       	breq	.+18     	; 0xd26 <FUNCSetFirmMinorVer+0x6c>
				  VerMinor--;
     d14:	11 50       	subi	r17, 0x01	; 1
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <FUNCSetFirmMinorVer+0x6c>
			}
			else if (JoyStatus & JOY_LEFT)
     d18:	f2 9b       	sbis	0x1e, 2	; 30
     d1a:	05 c0       	rjmp	.+10     	; 0xd26 <FUNCSetFirmMinorVer+0x6c>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     d1c:	d7 01       	movw	r26, r14
     d1e:	01 2e       	mov	r0, r17
     d20:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.FirmVerMinor, VerMinor);
				return;
     d24:	0a c0       	rjmp	.+20     	; 0xd3a <FUNCSetFirmMinorVer+0x80>
			}
			
			VerBuffer[3] = ('0' + VerMinor);
     d26:	10 5d       	subi	r17, 0xD0	; 208
     d28:	1c 83       	std	Y+4, r17	; 0x04
     d2a:	10 53       	subi	r17, 0x30	; 48
			LCD_puts(VerBuffer);
     d2c:	ce 01       	movw	r24, r28
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	0e 94 19 08 	call	0x1032 <LCD_puts>

			MAIN_WaitForJoyRelease();
     d34:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     d38:	e1 cf       	rjmp	.-62     	; 0xcfc <FUNCSetFirmMinorVer+0x42>
     d3a:	25 96       	adiw	r28, 0x05	; 5
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	08 95       	ret

00000d52 <FUNCSetAutoSleepTimeOut>:
		}
	}	
}

void FUNCSetAutoSleepTimeOut(void)
{
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	28 97       	sbiw	r28, 0x08	; 8
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     d6c:	27 e8       	ldi	r18, 0x87	; 135
     d6e:	e2 2e       	mov	r14, r18
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	f2 2e       	mov	r15, r18
  uint8_t result;
  asm volatile
     d74:	d7 01       	movw	r26, r14
     d76:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
     d7a:	80 2d       	mov	r24, r0
     d7c:	18 2f       	mov	r17, r24
	uint8_t SleepTxtBuffer[8];
	uint8_t SleepVal = eeprom_read_byte(&EEPROMVars.AutoSleepValIndex);

	if (SleepVal > 4)
     d7e:	85 30       	cpi	r24, 0x05	; 5
     d80:	08 f0       	brcs	.+2      	; 0xd84 <FUNCSetAutoSleepTimeOut+0x32>
	  SleepVal = 4;
     d82:	14 e0       	ldi	r17, 0x04	; 4

	strcpy_P(SleepTxtBuffer, PSTR("    SEC"));
     d84:	6d ee       	ldi	r22, 0xED	; 237
     d86:	72 e0       	ldi	r23, 0x02	; 2
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	0e 94 1a 1a 	call	0x3434 <strcpy_P>
	
	JoyStatus = 1;                        // Invalid value to force the LCD to update
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     d94:	8e b3       	in	r24, 0x1e	; 30
     d96:	88 23       	and	r24, r24
     d98:	e9 f3       	breq	.-6      	; 0xd94 <FUNCSetAutoSleepTimeOut+0x42>
		{
			if (JoyStatus & JOY_UP)
     d9a:	f6 9b       	sbis	0x1e, 6	; 30
     d9c:	05 c0       	rjmp	.+10     	; 0xda8 <FUNCSetAutoSleepTimeOut+0x56>
			{
				(SleepVal == 0)? SleepVal = ARRAY_UPPERBOUND(AutoSleepTOValues) : SleepVal--;
     d9e:	11 23       	and	r17, r17
     da0:	11 f4       	brne	.+4      	; 0xda6 <FUNCSetAutoSleepTimeOut+0x54>
     da2:	14 e0       	ldi	r17, 0x04	; 4
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <FUNCSetAutoSleepTimeOut+0x56>
     da6:	11 50       	subi	r17, 0x01	; 1
			}
			if (JoyStatus & JOY_DOWN)
     da8:	f7 9b       	sbis	0x1e, 7	; 30
     daa:	06 c0       	rjmp	.+12     	; 0xdb8 <FUNCSetAutoSleepTimeOut+0x66>
			{
				(SleepVal == ARRAY_UPPERBOUND(AutoSleepTOValues))? SleepVal = 0 : SleepVal++;
     dac:	14 30       	cpi	r17, 0x04	; 4
     dae:	11 f4       	brne	.+4      	; 0xdb4 <FUNCSetAutoSleepTimeOut+0x62>
     db0:	10 e0       	ldi	r17, 0x00	; 0
     db2:	0d c0       	rjmp	.+26     	; 0xdce <FUNCSetAutoSleepTimeOut+0x7c>
     db4:	1f 5f       	subi	r17, 0xFF	; 255
     db6:	09 c0       	rjmp	.+18     	; 0xdca <FUNCSetAutoSleepTimeOut+0x78>
			}
			else if (JoyStatus & JOY_LEFT)
     db8:	f2 9b       	sbis	0x1e, 2	; 30
     dba:	07 c0       	rjmp	.+14     	; 0xdca <FUNCSetAutoSleepTimeOut+0x78>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     dbc:	d7 01       	movw	r26, r14
     dbe:	01 2e       	mov	r0, r17
     dc0:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.AutoSleepValIndex, SleepVal);
				TOUT_SetupSleepTimer();
     dc4:	0e 94 e9 0b 	call	0x17d2 <TOUT_SetupSleepTimer>
				return;
     dc8:	1b c0       	rjmp	.+54     	; 0xe00 <FUNCSetAutoSleepTimeOut+0xae>
			}

			if (!(SleepVal))
     dca:	11 23       	and	r17, r17
     dcc:	29 f4       	brne	.+10     	; 0xdd8 <FUNCSetAutoSleepTimeOut+0x86>
			{
				LCD_puts_f(PSTR("OFF"));
     dce:	85 ef       	ldi	r24, 0xF5	; 245
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
     dd6:	11 c0       	rjmp	.+34     	; 0xdfa <FUNCSetAutoSleepTimeOut+0xa8>
			}
			else
			{
				MAIN_IntToStr(pgm_read_byte(&AutoSleepTOValues[SleepVal]), &SleepTxtBuffer[0]);
     dd8:	e1 2f       	mov	r30, r17
     dda:	ff 27       	eor	r31, r31
     ddc:	e4 53       	subi	r30, 0x34	; 52
     dde:	fc 4f       	sbci	r31, 0xFC	; 252
     de0:	84 91       	lpm	r24, Z
     de2:	be 01       	movw	r22, r28
     de4:	6f 5f       	subi	r22, 0xFF	; 255
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	99 27       	eor	r25, r25
     dea:	0e 94 36 03 	call	0x66c <MAIN_IntToStr>
				SleepTxtBuffer[3] = ' '; // Remove the auto-string termination from the buffer
     dee:	80 e2       	ldi	r24, 0x20	; 32
     df0:	8c 83       	std	Y+4, r24	; 0x04
				LCD_puts(SleepTxtBuffer);
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	0e 94 19 08 	call	0x1032 <LCD_puts>
			}

			MAIN_WaitForJoyRelease();
     dfa:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     dfe:	ca cf       	rjmp	.-108    	; 0xd94 <FUNCSetAutoSleepTimeOut+0x42>
     e00:	28 96       	adiw	r28, 0x08	; 8
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	08 95       	ret

00000e18 <FUNCSleepMode>:
		}
	}	
}

void FUNCSleepMode(void)
{
	SMCR    = ((1 << SM1) | (1 << SE));    // Power down sleep mode
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	83 bf       	out	0x33, r24	; 51
	LCDCRA &= ~(1 << LCDEN); 
     e1c:	80 91 e4 00 	lds	r24, 0x00E4
     e20:	8f 77       	andi	r24, 0x7F	; 127
     e22:	80 93 e4 00 	sts	0x00E4, r24
	
	while (!(JoyStatus & JOY_UP))         // Joystick interrupt wakes the micro
	  SLEEP();
     e26:	f6 99       	sbic	0x1e, 6	; 30
     e28:	03 c0       	rjmp	.+6      	; 0xe30 <FUNCSleepMode+0x18>
     e2a:	88 95       	sleep
     e2c:	f6 9b       	sbis	0x1e, 6	; 30
     e2e:	fd cf       	rjmp	.-6      	; 0xe2a <FUNCSleepMode+0x12>
	   
	LCDCRA |= (1 << LCDEN);
     e30:	80 91 e4 00 	lds	r24, 0x00E4
     e34:	80 68       	ori	r24, 0x80	; 128
     e36:	80 93 e4 00 	sts	0x00E4, r24
	
	MAIN_WaitForJoyRelease();
     e3a:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     e3e:	08 95       	ret

00000e40 <FUNCStorageInfo>:
}

void FUNCStorageInfo(void)
{
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
	uint8_t SelectedItem = 0;
     e44:	10 e0       	ldi	r17, 0x00	; 0

	MAIN_WaitForJoyRelease();
     e46:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>

	JoyStatus = 1;                        // Invalid value to force the LCD to update
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     e4e:	8e b3       	in	r24, 0x1e	; 30
     e50:	88 23       	and	r24, r24
     e52:	e9 f3       	breq	.-6      	; 0xe4e <FUNCStorageInfo+0xe>
		{
			if (JoyStatus & (JOY_UP | JOY_DOWN))
     e54:	ce b3       	in	r28, 0x1e	; 30
     e56:	c0 7c       	andi	r28, 0xC0	; 192
     e58:	19 f0       	breq	.+6      	; 0xe60 <FUNCStorageInfo+0x20>
			{
				SelectedItem ^= 1;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	18 27       	eor	r17, r24
     e5e:	38 c0       	rjmp	.+112    	; 0xed0 <FUNCStorageInfo+0x90>
			}
			else if (JoyStatus & JOY_LEFT)
     e60:	f2 99       	sbic	0x1e, 2	; 30
     e62:	41 c0       	rjmp	.+130    	; 0xee6 <FUNCStorageInfo+0xa6>
			{
				return;
			}
			else if (JoyStatus & JOY_PRESS)
     e64:	f4 9b       	sbis	0x1e, 4	; 30
     e66:	34 c0       	rjmp	.+104    	; 0xed0 <FUNCStorageInfo+0x90>
			{
				if (SelectedItem == 1)    // View storage tags
     e68:	11 30       	cpi	r17, 0x01	; 1
     e6a:	81 f5       	brne	.+96     	; 0xecc <FUNCStorageInfo+0x8c>
				{
					DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     e6c:	88 e3       	ldi	r24, 0x38	; 56
     e6e:	99 e0       	ldi	r25, 0x09	; 9
     e70:	90 93 01 01 	sts	0x0101, r25
     e74:	80 93 00 01 	sts	0x0100, r24
					SPI_SPIInit();
     e78:	0e 94 2e 09 	call	0x125c <SPI_SPIInit>
					UseExernalDF = FALSE;
     e7c:	c0 93 65 02 	sts	0x0265, r28
					DF_EnableDataflash(TRUE);
     e80:	81 2f       	mov	r24, r17
     e82:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>

					if (DF_CheckCorrectOnboardChip())
     e86:	0e 94 3c 0b 	call	0x1678 <DF_CheckCorrectOnboardChip>
     e8a:	c8 2f       	mov	r28, r24
     e8c:	88 23       	and	r24, r24
     e8e:	41 f0       	breq	.+16     	; 0xea0 <FUNCStorageInfo+0x60>
					{
						TM_ShowTags();
     e90:	0e 94 ec 19 	call	0x33d8 <TM_ShowTags>
						SPI_SPIOFF();
     e94:	80 91 64 00 	lds	r24, 0x0064
     e98:	84 60       	ori	r24, 0x04	; 4
     e9a:	80 93 64 00 	sts	0x0064, r24
     e9e:	18 c0       	rjmp	.+48     	; 0xed0 <FUNCStorageInfo+0x90>
					}
					else if (!(PM_GetStoredDataSize(TYPE_FLASH)))
     ea0:	81 2f       	mov	r24, r17
     ea2:	0e 94 e2 13 	call	0x27c4 <PM_GetStoredDataSize>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	a1 05       	cpc	r26, r1
     eae:	b1 05       	cpc	r27, r1
     eb0:	79 f4       	brne	.+30     	; 0xed0 <FUNCStorageInfo+0x90>
					{
						DF_EnableDataflash(FALSE);
     eb2:	8c 2f       	mov	r24, r28
     eb4:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
						SPI_SPIOFF();
     eb8:	80 91 64 00 	lds	r24, 0x0064
     ebc:	84 60       	ori	r24, 0x04	; 4
     ebe:	80 93 64 00 	sts	0x0064, r24

						MAIN_ShowError(PSTR("NO STORED PRGM"));
     ec2:	89 ef       	ldi	r24, 0xF9	; 249
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	0e 94 6f 03 	call	0x6de <MAIN_ShowError>
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <FUNCStorageInfo+0x90>
					}	
				}
				else                      // View stored data sizes
				{
					PM_ShowStoredItemSizes();
     ecc:	0e 94 c7 18 	call	0x318e <PM_ShowStoredItemSizes>
				}
			}
			
			LCD_puts_f(SIFONames[SelectedItem]);
     ed0:	8f e0       	ldi	r24, 0x0F	; 15
     ed2:	18 9f       	mul	r17, r24
     ed4:	c0 01       	movw	r24, r0
     ed6:	11 24       	eor	r1, r1
     ed8:	84 5a       	subi	r24, 0xA4	; 164
     eda:	9f 4f       	sbci	r25, 0xFF	; 255
     edc:	0e 94 4f 08 	call	0x109e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     ee0:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
     ee4:	b4 cf       	rjmp	.-152    	; 0xe4e <FUNCStorageInfo+0xe>
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	08 95       	ret

00000eec <FUNCGoBootloader>:
		}
	}
}

void FUNCGoBootloader(void)
{
	uint8_t MD = (MCUCR & ~(1 << JTD));   // Forces compiler to use IN, AND plus two OUTs rather than two lots of IN/AND/OUTs
     eec:	85 b7       	in	r24, 0x35	; 53
     eee:	8f 77       	andi	r24, 0x7F	; 127
	MCUCR = MD;                           // Turn on JTAG via code
     ef0:	85 bf       	out	0x35, r24	; 53
	MCUCR = MD;                           // Set bit twice as specified in datasheet        
     ef2:	85 bf       	out	0x35, r24	; 53

	TIMEOUT_SLEEP_TIMER_OFF();
     ef4:	10 92 81 00 	sts	0x0081, r1
	
	LCD_puts_f(PSTR("*JTAG ON*"));
     ef8:	88 e0       	ldi	r24, 0x08	; 8
     efa:	93 e0       	ldi	r25, 0x03	; 3
     efc:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
	
	MAIN_WaitForJoyRelease();
     f00:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
	
	WDTCR = ((1<<WDCE) | (1<<WDE));       // Enable Watchdog Timer to give reset after minimum timeout
     f04:	88 e1       	ldi	r24, 0x18	; 24
     f06:	80 93 60 00 	sts	0x0060, r24
	while (1) {};                        // Eternal loop - when watchdog resets the AVR it will enter the bootloader
     f0a:	ff cf       	rjmp	.-2      	; 0xf0a <FUNCGoBootloader+0x1e>

00000f0c <OSCCAL_Calibrate>:

static volatile uint16_t ActualCount;

void OSCCAL_Calibrate(void)
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
	uint8_t SREG_Backup;
	uint8_t LoopCount = (0x7F / 2); // Maximum range is 128, and starts from the middle, so 64 is the max number of iterations required
     f10:	4f e3       	ldi	r20, 0x3F	; 63
	uint8_t PrevOSCALValues[2];
   
	// Reset ActualCount
	ActualCount = 0;
     f12:	10 92 05 01 	sts	0x0105, r1
     f16:	10 92 04 01 	sts	0x0104, r1
   
	// Make sure all clock division is turned off (8Mhz RC clock)
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_8MHZ);
     f1a:	80 e8       	ldi	r24, 0x80	; 128
     f1c:	80 93 61 00 	sts	0x0061, r24
     f20:	10 92 61 00 	sts	0x0061, r1

	// Inital OSCCAL of half its maximum
	OSCCAL = (0x7F / 2);
     f24:	40 93 66 00 	sts	0x0066, r20

	// Save the SREG
	SREG_Backup = SREG;
     f28:	5f b7       	in	r21, 0x3f	; 63
    
	// Disable all timer 1 interrupts
	TIMSK1 = 0;
     f2a:	10 92 6f 00 	sts	0x006F, r1
        
	// Set timer 2 to asyncronous mode (32.768KHz crystal)
	ASSR   = (1 << AS2);
     f2e:	88 e0       	ldi	r24, 0x08	; 8
     f30:	80 93 b6 00 	sts	0x00B6, r24
        
	// Timer 2 overflow interrupt enable
	TIMSK2 = (1 << TOIE2);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 70 00 	sts	0x0070, r24

	// Enable interrupts
	sei();
     f3a:	78 94       	sei

	// Start both counters with no prescaling
	TCCR1B = (1 << CS10);
     f3c:	80 93 81 00 	sts	0x0081, r24
	TCCR2A = (1 << CS20);
     f40:	80 93 b0 00 	sts	0x00B0, r24
	 	 
	// Previous OSCCAL value of 0
	PrevOSCALValues[0] = 0;
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0

	// Wait until timer 2's external 32.768KHz crystal is stable
	while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB) | (1 << OCR2UB)));
     f48:	80 91 b6 00 	lds	r24, 0x00B6
     f4c:	99 27       	eor	r25, r25
     f4e:	87 70       	andi	r24, 0x07	; 7
     f50:	90 70       	andi	r25, 0x00	; 0
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	c9 f7       	brne	.-14     	; 0xf48 <OSCCAL_Calibrate+0x3c>
    
	// Clear the timer values
	TCNT1  = 0;
     f56:	90 93 85 00 	sts	0x0085, r25
     f5a:	80 93 84 00 	sts	0x0084, r24
	TCNT2  = 0;
     f5e:	10 92 b2 00 	sts	0x00B2, r1
    
	while (LoopCount--)
	{
		// Let it take a few readings (14ms, approx 2 readings)
		_delay_ms(14);

		PrevOSCALValues[1] = PrevOSCALValues[0];
		PrevOSCALValues[0] = OSCCAL;
        
		if (ActualCount > OSCCAL_UPPERCOUNTBOUND)       // Clock is running too fast
			OSCCAL--;
		else if (ActualCount < OSCCAL_LOWERCOUNTBOUND) // Clock is running too slow
			OSCCAL++;
		else		                                     // Clock is just right
			break;
		
		// If the routine cannot find a value withing the count tollerance,
		// it will cause the OSCCAL to hover around the closest two values.
		// If the current value is the same as the 2*n previous, exit the
		// routine as the best value has been found.
		if (OSCCAL == PrevOSCALValues[1])
		  break;
     f62:	4e e3       	ldi	r20, 0x3E	; 62
     f64:	ac ec       	ldi	r26, 0xCC	; 204
     f66:	b4 e6       	ldi	r27, 0x64	; 100
     f68:	c0 e0       	ldi	r28, 0x00	; 0
     f6a:	d0 e0       	ldi	r29, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f6c:	cd 01       	movw	r24, r26
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <OSCCAL_Calibrate+0x62>
     f72:	32 2f       	mov	r19, r18
     f74:	80 91 66 00 	lds	r24, 0x0066
     f78:	28 2f       	mov	r18, r24
     f7a:	80 91 04 01 	lds	r24, 0x0104
     f7e:	90 91 05 01 	lds	r25, 0x0105
     f82:	81 50       	subi	r24, 0x01	; 1
     f84:	91 4e       	sbci	r25, 0xE1	; 225
     f86:	20 f0       	brcs	.+8      	; 0xf90 <OSCCAL_Calibrate+0x84>
     f88:	80 91 66 00 	lds	r24, 0x0066
     f8c:	81 50       	subi	r24, 0x01	; 1
     f8e:	0a c0       	rjmp	.+20     	; 0xfa4 <OSCCAL_Calibrate+0x98>
     f90:	80 91 04 01 	lds	r24, 0x0104
     f94:	90 91 05 01 	lds	r25, 0x0105
     f98:	86 5f       	subi	r24, 0xF6	; 246
     f9a:	90 4e       	sbci	r25, 0xE0	; 224
     f9c:	58 f4       	brcc	.+22     	; 0xfb4 <OSCCAL_Calibrate+0xa8>
     f9e:	80 91 66 00 	lds	r24, 0x0066
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
     fa4:	80 93 66 00 	sts	0x0066, r24
     fa8:	80 91 66 00 	lds	r24, 0x0066
     fac:	83 17       	cp	r24, r19
     fae:	11 f0       	breq	.+4      	; 0xfb4 <OSCCAL_Calibrate+0xa8>
     fb0:	41 50       	subi	r20, 0x01	; 1
     fb2:	e0 f6       	brcc	.-72     	; 0xf6c <OSCCAL_Calibrate+0x60>
	}

	// Disable all timer interrupts
	TIMSK1 = 0;
     fb4:	10 92 6f 00 	sts	0x006F, r1
	TIMSK2 = 0;
     fb8:	10 92 70 00 	sts	0x0070, r1
    
	// Stop the timers
	TCCR1B = 0x00;
     fbc:	10 92 81 00 	sts	0x0081, r1
	TCCR2A = 0x00;
     fc0:	10 92 b0 00 	sts	0x00B0, r1

	// Turn off timer 2 asynchronous mode
	ASSR  &= ~(1 << AS2);
     fc4:	80 91 b6 00 	lds	r24, 0x00B6
     fc8:	87 7f       	andi	r24, 0xF7	; 247
     fca:	80 93 b6 00 	sts	0x00B6, r24

	// Restore SREG
	SREG = SREG_Backup;
     fce:	5f bf       	out	0x3f, r21	; 63
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <__vector_5>:
        
	return;
}

ISR(TIMER2_OVF_vect, ISR_BLOCK) // Occurs 32768/256 timers per second, or 128Hz
{
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	8f 93       	push	r24
     fe2:	9f 93       	push	r25
	// Stop timer 1 so it can be read
	TCCR1B = 0x00;
     fe4:	10 92 81 00 	sts	0x0081, r1
    
	// Record timer 1's value
	ActualCount = TCNT1;
     fe8:	80 91 84 00 	lds	r24, 0x0084
     fec:	90 91 85 00 	lds	r25, 0x0085
     ff0:	90 93 05 01 	sts	0x0105, r25
     ff4:	80 93 04 01 	sts	0x0104, r24
	     
	// Reset counters and restart timer 1
	TCNT1  = 0;
     ff8:	10 92 85 00 	sts	0x0085, r1
     ffc:	10 92 84 00 	sts	0x0084, r1
	TCNT2  = 0;
    1000:	10 92 b2 00 	sts	0x00B2, r1
	TCCR1B = (1 << CS10);
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 93 81 00 	sts	0x0081, r24
    100a:	9f 91       	pop	r25
    100c:	8f 91       	pop	r24
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	1f 90       	pop	r1
    1016:	18 95       	reti

00001018 <LCD_Init>:

void LCD_Init(void)
{
	// Set the initial contrast level to maximum:
	LCDCCR = 0x0F;
    1018:	8f e0       	ldi	r24, 0x0F	; 15
    101a:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all segment pins:
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
    101e:	87 eb       	ldi	r24, 0xB7	; 183
    1020:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32Hz:
    LCDFRR  = (7<<LCDCD0);    
    1024:	87 e0       	ldi	r24, 0x07	; 7
    1026:	80 93 e6 00 	sts	0x00E6, r24

	// Enable LCD and set low power waveform, enable start of frame interrupt:
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB) | (1<<LCDIE);
    102a:	88 ec       	ldi	r24, 0xC8	; 200
    102c:	80 93 e4 00 	sts	0x00E4, r24
    1030:	08 95       	ret

00001032 <LCD_puts>:
}

void LCD_puts_f(const uint8_t *FlashData)
{
	uint8_t StrBuff[LCD_TEXTBUFFER_SIZE];

	strcpy_P(StrBuff, FlashData);
	LCD_puts(StrBuff);
}

void LCD_puts(const uint8_t *Data)
{
    1032:	dc 01       	movw	r26, r24
	uint8_t LoadB;
	
	for (LoadB = 0; LoadB < 20; LoadB++)
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	3f ef       	ldi	r19, 0xFF	; 255
    1038:	e6 e0       	ldi	r30, 0x06	; 6
    103a:	f1 e0       	ldi	r31, 0x01	; 1
	{
		uint8_t CByte = *(Data++);
    103c:	9d 91       	ld	r25, X+
	
		if ((CByte >= '*') && (CByte <= 'z') && (CByte != ' '))
    103e:	89 2f       	mov	r24, r25
    1040:	8a 52       	subi	r24, 0x2A	; 42
    1042:	81 35       	cpi	r24, 0x51	; 81
    1044:	10 f4       	brcc	.+4      	; 0x104a <LCD_puts+0x18>
		  TextBuffer[LoadB] = (CByte - '*');
    1046:	80 83       	st	Z, r24
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <LCD_puts+0x1e>
		else if (CByte == 0x00)
    104a:	99 23       	and	r25, r25
    104c:	29 f0       	breq	.+10     	; 0x1058 <LCD_puts+0x26>
		  break;
		else
		  TextBuffer[LoadB] = 0xFF;		
    104e:	30 83       	st	Z, r19
    1050:	2f 5f       	subi	r18, 0xFF	; 255
    1052:	31 96       	adiw	r30, 0x01	; 1
    1054:	24 31       	cpi	r18, 0x14	; 20
    1056:	90 f3       	brcs	.-28     	; 0x103c <LCD_puts+0xa>
	}

	ScrollMode  = ((LoadB > 6)? TRUE : FALSE);
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	27 30       	cpi	r18, 0x07	; 7
    105c:	08 f0       	brcs	.+2      	; 0x1060 <LCD_puts+0x2e>
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	80 93 37 01 	sts	0x0137, r24
	ScrollCount = 0;
    1064:	10 92 38 01 	sts	0x0138, r1
    1068:	9f ef       	ldi	r25, 0xFF	; 255
    106a:	86 e0       	ldi	r24, 0x06	; 6

	for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
		TextBuffer[LoadB++] = 0xFF;
    106c:	e2 2f       	mov	r30, r18
    106e:	ff 27       	eor	r31, r31
    1070:	ea 5f       	subi	r30, 0xFA	; 250
    1072:	fe 4f       	sbci	r31, 0xFE	; 254
    1074:	90 83       	st	Z, r25
    1076:	2f 5f       	subi	r18, 0xFF	; 255
    1078:	81 50       	subi	r24, 0x01	; 1
    107a:	87 ff       	sbrs	r24, 7
    107c:	f7 cf       	rjmp	.-18     	; 0x106c <LCD_puts+0x3a>
	
	TextBuffer[LoadB] = 0x00;
    107e:	e2 2f       	mov	r30, r18
    1080:	ff 27       	eor	r31, r31
    1082:	ea 5f       	subi	r30, 0xFA	; 250
    1084:	fe 4f       	sbci	r31, 0xFE	; 254
    1086:	10 82       	st	Z, r1
	StrStart   = 0;
    1088:	10 92 35 01 	sts	0x0135, r1
	StrEnd     = LoadB;	
    108c:	20 93 36 01 	sts	0x0136, r18
	DelayCount = LCD_DELAYCOUNT_DEFAULT;
    1090:	8a e0       	ldi	r24, 0x0A	; 10
    1092:	80 93 39 01 	sts	0x0139, r24

	UpdateLCD  = TRUE;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 3a 01 	sts	0x013A, r24
    109c:	08 95       	ret

0000109e <LCD_puts_f>:
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	64 97       	sbiw	r28, 0x14	; 20
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	bc 01       	movw	r22, r24
    10b4:	ce 01       	movw	r24, r28
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	0e 94 1a 1a 	call	0x3434 <strcpy_P>
    10bc:	ce 01       	movw	r24, r28
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	0e 94 19 08 	call	0x1032 <LCD_puts>
    10c4:	64 96       	adiw	r28, 0x14	; 20
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <LCD_WriteChar>:
}

void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit)
{
    10d6:	e8 2f       	mov	r30, r24
	uint16_t SegData  = 0x00;
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1));
    10dc:	86 2f       	mov	r24, r22
    10de:	86 95       	lsr	r24
    10e0:	a8 2f       	mov	r26, r24
    10e2:	bb 27       	eor	r27, r27
    10e4:	af 5d       	subi	r26, 0xDF	; 223
    10e6:	be 4f       	sbci	r27, 0xFE	; 254

	if (Byte != 0xFF)
    10e8:	ef 3f       	cpi	r30, 0xFF	; 255
    10ea:	39 f0       	breq	.+14     	; 0x10fa <LCD_WriteChar+0x24>
	  SegData = pgm_read_word(&LCD_SegTable[Byte]);	
    10ec:	ff 27       	eor	r31, r31
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	ee 5e       	subi	r30, 0xEE	; 238
    10f4:	fc 4f       	sbci	r31, 0xFC	; 252
    10f6:	25 91       	lpm	r18, Z+
    10f8:	34 91       	lpm	r19, Z
    10fa:	77 27       	eor	r23, r23
    10fc:	61 70       	andi	r22, 0x01	; 1
    10fe:	70 70       	andi	r23, 0x00	; 0
    1100:	43 e0       	ldi	r20, 0x03	; 3

	for (uint8_t BNib = 0; BNib < 4; BNib++)
	{
		uint8_t Mask          = 0xF0;
    1102:	50 ef       	ldi	r21, 0xF0	; 240
		uint8_t MaskedSegData = (SegData & 0x0000F);
    1104:	92 2f       	mov	r25, r18
    1106:	9f 70       	andi	r25, 0x0F	; 15
	
		if (Digit & 0x01)
    1108:	61 15       	cp	r22, r1
    110a:	71 05       	cpc	r23, r1
    110c:	19 f0       	breq	.+6      	; 0x1114 <LCD_WriteChar+0x3e>
		{
			Mask = 0x0F;
    110e:	5f e0       	ldi	r21, 0x0F	; 15
			MaskedSegData <<= 4;
    1110:	92 95       	swap	r25
    1112:	90 7f       	andi	r25, 0xF0	; 240
		}
		
		*BuffPtr = ((*BuffPtr & Mask) | MaskedSegData);
    1114:	8c 91       	ld	r24, X
    1116:	85 23       	and	r24, r21
    1118:	89 2b       	or	r24, r25
    111a:	8c 93       	st	X, r24

		SegData >>= 4;
    111c:	84 e0       	ldi	r24, 0x04	; 4
    111e:	36 95       	lsr	r19
    1120:	27 95       	ror	r18
    1122:	8a 95       	dec	r24
    1124:	e1 f7       	brne	.-8      	; 0x111e <LCD_WriteChar+0x48>
		BuffPtr  += 5;
    1126:	15 96       	adiw	r26, 0x05	; 5
    1128:	41 50       	subi	r20, 0x01	; 1
    112a:	47 ff       	sbrs	r20, 7
    112c:	ea cf       	rjmp	.-44     	; 0x1102 <LCD_WriteChar+0x2c>
    112e:	08 95       	ret

00001130 <__vector_22>:
	}
}

ISR(LCD_vect, ISR_NOBLOCK)
{
    1130:	78 94       	sei
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	11 24       	eor	r1, r1
    113c:	2f 93       	push	r18
    113e:	3f 93       	push	r19
    1140:	4f 93       	push	r20
    1142:	5f 93       	push	r21
    1144:	6f 93       	push	r22
    1146:	7f 93       	push	r23
    1148:	8f 93       	push	r24
    114a:	9f 93       	push	r25
    114c:	af 93       	push	r26
    114e:	bf 93       	push	r27
    1150:	cf 93       	push	r28
    1152:	ef 93       	push	r30
    1154:	ff 93       	push	r31
	if (ScrollMode)
    1156:	80 91 37 01 	lds	r24, 0x0137
    115a:	88 23       	and	r24, r24
    115c:	99 f0       	breq	.+38     	; 0x1184 <__vector_22+0x54>
	{
		if (DelayCount)
    115e:	80 91 39 01 	lds	r24, 0x0139
    1162:	88 23       	and	r24, r24
    1164:	21 f0       	breq	.+8      	; 0x116e <__vector_22+0x3e>
		{
			DelayCount--;
    1166:	81 50       	subi	r24, 0x01	; 1
    1168:	80 93 39 01 	sts	0x0139, r24
    116c:	0b c0       	rjmp	.+22     	; 0x1184 <__vector_22+0x54>
		}
		else
		{
			if (!(ScrollCount))
    116e:	80 91 38 01 	lds	r24, 0x0138
    1172:	88 23       	and	r24, r24
    1174:	21 f4       	brne	.+8      	; 0x117e <__vector_22+0x4e>
			  UpdateLCD = TRUE;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	80 93 3a 01 	sts	0x013A, r24
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <__vector_22+0x54>
			else
			  ScrollCount--;
    117e:	81 50       	subi	r24, 0x01	; 1
    1180:	80 93 38 01 	sts	0x0138, r24
		}
	}

	if (UpdateLCD)
    1184:	80 91 3a 01 	lds	r24, 0x013A
    1188:	88 23       	and	r24, r24
    118a:	39 f1       	breq	.+78     	; 0x11da <__vector_22+0xaa>
	{
		for (uint8_t Character = 0; Character < 6; Character++)
    118c:	c0 e0       	ldi	r28, 0x00	; 0
		{
			uint8_t Byte = (StrStart + Character);
    118e:	80 91 35 01 	lds	r24, 0x0135
    1192:	8c 0f       	add	r24, r28

			if (Byte >= StrEnd)
    1194:	90 91 36 01 	lds	r25, 0x0136
    1198:	e8 2f       	mov	r30, r24
    119a:	ff 27       	eor	r31, r31
    119c:	89 17       	cp	r24, r25
    119e:	10 f0       	brcs	.+4      	; 0x11a4 <__vector_22+0x74>
			  Byte = TextBuffer[Byte - StrEnd];
    11a0:	e9 1b       	sub	r30, r25
    11a2:	f1 09       	sbc	r31, r1
			else
			  Byte = TextBuffer[Byte];
    11a4:	ea 5f       	subi	r30, 0xFA	; 250
    11a6:	fe 4f       	sbci	r31, 0xFE	; 254
    11a8:	80 81       	ld	r24, Z
			
			LCD_WriteChar(Byte, Character);
    11aa:	6c 2f       	mov	r22, r28
    11ac:	0e 94 6b 08 	call	0x10d6 <LCD_WriteChar>
    11b0:	cf 5f       	subi	r28, 0xFF	; 255
    11b2:	c6 30       	cpi	r28, 0x06	; 6
    11b4:	60 f3       	brcs	.-40     	; 0x118e <__vector_22+0x5e>
		}
		
		if (StrStart++ == StrEnd)
    11b6:	80 91 35 01 	lds	r24, 0x0135
    11ba:	98 2f       	mov	r25, r24
    11bc:	8f 5f       	subi	r24, 0xFF	; 255
    11be:	80 93 35 01 	sts	0x0135, r24
    11c2:	80 91 36 01 	lds	r24, 0x0136
    11c6:	98 17       	cp	r25, r24
    11c8:	19 f4       	brne	.+6      	; 0x11d0 <__vector_22+0xa0>
		  StrStart = 1;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 35 01 	sts	0x0135, r24
		
		ScrollCount = LCD_SCROLLCOUNT_DEFAULT;
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	80 93 38 01 	sts	0x0138, r24
		UpdateLCD = FALSE;
    11d6:	10 92 3a 01 	sts	0x013A, r1
    11da:	ac ee       	ldi	r26, 0xEC	; 236
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e1 e2       	ldi	r30, 0x21	; 33
    11e0:	f1 e0       	ldi	r31, 0x01	; 1
    11e2:	93 e1       	ldi	r25, 0x13	; 19
	}

	for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++)
	  *(pLCDREG + LCDChar) = SegBuffer[LCDChar];
    11e4:	81 91       	ld	r24, Z+
    11e6:	8d 93       	st	X+, r24
    11e8:	91 50       	subi	r25, 0x01	; 1
    11ea:	97 ff       	sbrs	r25, 7
    11ec:	fb cf       	rjmp	.-10     	; 0x11e4 <__vector_22+0xb4>
    11ee:	ff 91       	pop	r31
    11f0:	ef 91       	pop	r30
    11f2:	cf 91       	pop	r28
    11f4:	bf 91       	pop	r27
    11f6:	af 91       	pop	r26
    11f8:	9f 91       	pop	r25
    11fa:	8f 91       	pop	r24
    11fc:	7f 91       	pop	r23
    11fe:	6f 91       	pop	r22
    1200:	5f 91       	pop	r21
    1202:	4f 91       	pop	r20
    1204:	3f 91       	pop	r19
    1206:	2f 91       	pop	r18
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <USART_Init>:
*****************************************************************************/
void USART_Init(void)
{
    // Set baud rate
    UBRRH = (uint8_t)(USART_BAUDVALUE >> 8);
    1212:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = (uint8_t)(USART_BAUDVALUE);
    1216:	87 e0       	ldi	r24, 0x07	; 7
    1218:	80 93 c4 00 	sts	0x00C4, r24

    // Double speed
	UCSRA = (USART_DOUBLESPEED << U2X);
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	80 93 c0 00 	sts	0x00C0, r24

    // Enable recieve complete interrupt
	UCSRB = (1 << RXCIE);
    1222:	80 e8       	ldi	r24, 0x80	; 128
    1224:	80 93 c1 00 	sts	0x00C1, r24
	 
    // Async. mode, 8N1
    UCSRC = (3 << UCSZ0);
    1228:	86 e0       	ldi	r24, 0x06	; 6
    122a:	80 93 c2 00 	sts	0x00C2, r24
	 
	 // Initalise ringbuffer
	BUFF_InitialiseBuffer();
    122e:	0e 94 9f 0b 	call	0x173e <BUFF_InitialiseBuffer>
    1232:	08 95       	ret

00001234 <USART_Tx>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_Tx(const char data)
{
    1234:	98 2f       	mov	r25, r24
    while (!(UCSRA & (1 << UDRE)));
    1236:	80 91 c0 00 	lds	r24, 0x00C0
    123a:	85 ff       	sbrs	r24, 5
    123c:	fc cf       	rjmp	.-8      	; 0x1236 <USART_Tx+0x2>
    UDR = data;
    123e:	90 93 c6 00 	sts	0x00C6, r25
    1242:	08 95       	ret

00001244 <USART_Rx>:
}

/*****************************************************************************
*
*   Function name : Usart_Rx
*
*   Returns :       char: byte received
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART
*
*****************************************************************************/
char USART_Rx(void)
{
    while (!(BuffElements) && !(PacketTimeOut)) {};
    1244:	80 91 b3 02 	lds	r24, 0x02B3
    1248:	88 23       	and	r24, r24
    124a:	21 f4       	brne	.+8      	; 0x1254 <USART_Rx+0x10>
    124c:	80 91 3f 01 	lds	r24, 0x013F
    1250:	88 23       	and	r24, r24
    1252:	c1 f3       	breq	.-16     	; 0x1244 <USART_Rx>
    return BUFF_GetBuffByte();
    1254:	0e 94 ac 0b 	call	0x1758 <BUFF_GetBuffByte>
}
    1258:	99 27       	eor	r25, r25
    125a:	08 95       	ret

0000125c <SPI_SPIInit>:
// ======================================================================================

void SPI_SPIInit(void)
{
	PRR &= ~(1 << PRSPI);              // Enable the SPI system by clearing the power save register SPI disable bit
    125c:	80 91 64 00 	lds	r24, 0x0064
    1260:	8b 7f       	andi	r24, 0xFB	; 251
    1262:	80 93 64 00 	sts	0x0064, r24

	// Master, Sample falling edge (setup rising), Fosc/2 speed (8Mhz/2 = 4MHz)
	SPSR = (1 << SPI2X);
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	8d bd       	out	0x2d, r24	; 45
	SPCR = ((1 << SPE) | (1 << MSTR) | (1 << CPHA) | (1 << CPOL));
    126a:	8c e5       	ldi	r24, 0x5C	; 92
    126c:	8c bd       	out	0x2c, r24	; 44
    126e:	08 95       	ret

00001270 <SPI_SPITransmit>:
}

uint8_t SPI_SPITransmit(const uint8_t Data)
{
	SPDR = Data;                       // Loading a byte into the register starts the transmission
    1270:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));    // Wait until transmission completed
    1272:	0d b4       	in	r0, 0x2d	; 45
    1274:	07 fe       	sbrs	r0, 7
    1276:	fd cf       	rjmp	.-6      	; 0x1272 <SPI_SPITransmit+0x2>
	return SPDR;
    1278:	8e b5       	in	r24, 0x2e	; 46
}
    127a:	99 27       	eor	r25, r25
    127c:	08 95       	ret

0000127e <SPI_SPITransmitWord>:

uint8_t SPI_SPITransmitWord(const uint16_t Data)
{
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	8c 01       	movw	r16, r24
	SPI_SPITransmit((uint8_t)(Data >> 8));
    1284:	81 2f       	mov	r24, r17
    1286:	99 27       	eor	r25, r25
    1288:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
	return SPI_SPITransmit((uint8_t)Data);
    128c:	80 2f       	mov	r24, r16
    128e:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
}
    1292:	99 27       	eor	r25, r25
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	08 95       	ret

0000129a <__vector_17>:
 *  have to stop the timer tick.
 *  For all modes the USIDR contents are stored and flags are updated.
 */
ISR(USI_OVERFLOW_vect, ISR_BLOCK)
{
    129a:	1f 92       	push	r1
    129c:	0f 92       	push	r0
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	0f 92       	push	r0
    12a2:	11 24       	eor	r1, r1
    12a4:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	TIMSK0 &= ~(1<<OCIE0A);
    12a6:	80 91 6e 00 	lds	r24, 0x006E
    12aa:	8d 7f       	andi	r24, 0xFD	; 253
    12ac:	80 93 6e 00 	sts	0x006E, r24
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
    12b0:	80 e4       	ldi	r24, 0x40	; 64
    12b2:	80 93 b9 00 	sts	0x00B9, r24
	TransferComplete = 1;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 93 63 02 	sts	0x0263, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
    12bc:	80 91 ba 00 	lds	r24, 0x00BA
    12c0:	80 93 64 02 	sts	0x0264, r24
    12c4:	8f 91       	pop	r24
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <USI_SPISetSpeed>:
}



/*! \brief  Initialize USI as SPI master.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from slave to master mode.
 *  Note that the stored USIDR value is cleared.
 *
 */
void USI_SPIInitMaster(const uint8_t Freq)
{
	// Configure port directions.
 	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN);  // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                       // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                        // Pull-ups.
	USI_OUT_REG &= ~(1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Pull-ups.
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = USI_CONTROL_REG_FLAGS;

	// Set the compare and prescaler for the requested frequency:
	USI_SPISetSpeed(Freq);
	
	// Init driver status register.
	TransferComplete = 0;
	
	storedUSIDR = 0;
}

void USI_SPIOff(void)
{
	USI_DIR_REG &= ~((1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN));                        // Inputs.
	USI_OUT_REG &= ~((1<<USI_DATAIN_PIN)  | (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN)); // Pull-ups.
	DDRF  &= ~(1 << 6);
	PORTF &= ~(1 << 6);
	
	USI_STOPUSITIMER();
}

/*! \brief  Put one byte on bus.
 *
 *  Use this function like you would write to the SPDR register in the native SPI module.
 *  Calling this function in master mode starts a transfer, while in slave mode, a
 *  byte will be prepared for the next transfer initiated by the master device.
 *  If a transfer is in progress, this function will set the write collision flag
 *  and return without altering the data registers.
 *
 *  \returns  Value returned by slave.
 */
uint8_t USI_SPITransmit(uint8_t val)
{
	// Reinit flags.
	TransferComplete = 0;

	// Put data in USI data register.
	USIDR = val;
	
	TIFR0  |= (1<<OCF0A);  // Clear compare match flag.
	TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.

	// Clear the timer 0 value
	TCNT0 = 0;

	while (!(TransferComplete));

	return storedUSIDR;
}

uint8_t USI_SPITransmitWord(const uint16_t val )
{
	USI_SPITransmit((uint8_t)(val >> 8));
	return USI_SPITransmit((uint8_t)val);
}

void USI_SPIToggleClock(void)
{
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);	
}

void USI_SPISetSpeed(const uint8_t Freq)
{
    12d0:	48 2f       	mov	r20, r24
	for (uint8_t MatchIndex = 0; MatchIndex < USI_PRESET_SPEEDS; MatchIndex++)
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	6f e7       	ldi	r22, 0x7F	; 127
    12d6:	73 e0       	ldi	r23, 0x03	; 3
    12d8:	9b 01       	movw	r18, r22
    12da:	21 50       	subi	r18, 0x01	; 1
    12dc:	30 40       	sbci	r19, 0x00	; 0
	{
		if ((pgm_read_byte(&USIPSValues[MatchIndex][0]) == Freq) || (MatchIndex == (USI_PRESET_SPEEDS - 1)))
    12de:	f9 01       	movw	r30, r18
    12e0:	84 91       	lpm	r24, Z
    12e2:	84 17       	cp	r24, r20
    12e4:	11 f0       	breq	.+4      	; 0x12ea <USI_SPISetSpeed+0x1a>
    12e6:	93 30       	cpi	r25, 0x03	; 3
    12e8:	31 f4       	brne	.+12     	; 0x12f6 <USI_SPISetSpeed+0x26>
		{
			// Init Output Compare Register.
			OCR0A = pgm_read_byte(&USIPSValues[MatchIndex][1]);
    12ea:	fb 01       	movw	r30, r22
    12ec:	84 91       	lpm	r24, Z
    12ee:	87 bd       	out	0x27, r24	; 39

			// Enable 'Clear Timer on Compare match' and set prescaler, which starts the timer
			TCCR0A = ((1<<WGM01) | TC0_PS_1);
    12f0:	89 e0       	ldi	r24, 0x09	; 9
    12f2:	84 bd       	out	0x24, r24	; 36
				
			return;
    12f4:	08 95       	ret
    12f6:	9f 5f       	subi	r25, 0xFF	; 255
    12f8:	2e 5f       	subi	r18, 0xFE	; 254
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	6e 5f       	subi	r22, 0xFE	; 254
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	94 30       	cpi	r25, 0x04	; 4
    1302:	68 f3       	brcs	.-38     	; 0x12de <USI_SPISetSpeed+0xe>
    1304:	08 95       	ret

00001306 <USI_SPIInitMaster>:
    1306:	9d b1       	in	r25, 0x0d	; 13
    1308:	90 65       	ori	r25, 0x50	; 80
    130a:	9d b9       	out	0x0d, r25	; 13
    130c:	6d 98       	cbi	0x0d, 5	; 13
    130e:	75 9a       	sbi	0x0e, 5	; 14
    1310:	76 98       	cbi	0x0e, 6	; 14
    1312:	9a e5       	ldi	r25, 0x5A	; 90
    1314:	90 93 b8 00 	sts	0x00B8, r25
    1318:	0e 94 68 09 	call	0x12d0 <USI_SPISetSpeed>
    131c:	10 92 63 02 	sts	0x0263, r1
    1320:	10 92 64 02 	sts	0x0264, r1
    1324:	08 95       	ret

00001326 <USI_SPIOff>:
    1326:	8d b1       	in	r24, 0x0d	; 13
    1328:	8f 7a       	andi	r24, 0xAF	; 175
    132a:	8d b9       	out	0x0d, r24	; 13
    132c:	8e b1       	in	r24, 0x0e	; 14
    132e:	8f 78       	andi	r24, 0x8F	; 143
    1330:	8e b9       	out	0x0e, r24	; 14
    1332:	86 98       	cbi	0x10, 6	; 16
    1334:	8e 98       	cbi	0x11, 6	; 17
    1336:	14 bc       	out	0x24, r1	; 36
    1338:	08 95       	ret

0000133a <USI_SPITransmit>:
    133a:	10 92 63 02 	sts	0x0263, r1
    133e:	80 93 ba 00 	sts	0x00BA, r24
    1342:	a9 9a       	sbi	0x15, 1	; 21
    1344:	80 91 6e 00 	lds	r24, 0x006E
    1348:	82 60       	ori	r24, 0x02	; 2
    134a:	80 93 6e 00 	sts	0x006E, r24
    134e:	16 bc       	out	0x26, r1	; 38
    1350:	80 91 63 02 	lds	r24, 0x0263
    1354:	88 23       	and	r24, r24
    1356:	e1 f3       	breq	.-8      	; 0x1350 <USI_SPITransmit+0x16>
    1358:	80 91 64 02 	lds	r24, 0x0264
    135c:	99 27       	eor	r25, r25
    135e:	08 95       	ret

00001360 <USI_SPITransmitWord>:
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	8c 01       	movw	r16, r24
    1366:	81 2f       	mov	r24, r17
    1368:	99 27       	eor	r25, r25
    136a:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    136e:	80 2f       	mov	r24, r16
    1370:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    1374:	99 27       	eor	r25, r25
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	08 95       	ret

0000137c <USI_SPIToggleClock>:
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	0e 94 08 03 	call	0x610 <MAIN_Delay1MS>
    1382:	80 91 b8 00 	lds	r24, 0x00B8
    1386:	81 60       	ori	r24, 0x01	; 1
    1388:	80 93 b8 00 	sts	0x00B8, r24
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	0e 94 08 03 	call	0x610 <MAIN_Delay1MS>
    1392:	80 91 b8 00 	lds	r24, 0x00B8
    1396:	81 60       	ori	r24, 0x01	; 1
    1398:	80 93 b8 00 	sts	0x00B8, r24
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	0e 94 08 03 	call	0x610 <MAIN_Delay1MS>
    13a2:	08 95       	ret

000013a4 <DF_EnableDataflash>:
	DF_WaitWhileBusy();
}

void DF_EnableDataflash(const uint8_t Enabled)
{
    13a4:	90 91 65 02 	lds	r25, 0x0265
	if (Enabled == TRUE)
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	31 f4       	brne	.+12     	; 0x13b8 <DF_EnableDataflash+0x14>
	{
		if (UseExernalDF == TRUE)
    13ac:	91 30       	cpi	r25, 0x01	; 1
    13ae:	11 f4       	brne	.+4      	; 0x13b4 <DF_EnableDataflash+0x10>
		  MAIN_ResetCSLine(MAIN_RESETCS_EXTDFACTIVE);
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	05 c0       	rjmp	.+10     	; 0x13be <DF_EnableDataflash+0x1a>
		else
		  PORTB &= ~(1 << 0);
    13b4:	28 98       	cbi	0x05, 0	; 5
    13b6:	08 95       	ret
	}
	else
	{
		if (UseExernalDF == TRUE)
    13b8:	91 30       	cpi	r25, 0x01	; 1
    13ba:	21 f4       	brne	.+8      	; 0x13c4 <DF_EnableDataflash+0x20>
		  MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE);
    13bc:	89 2f       	mov	r24, r25
    13be:	0e 94 1a 03 	call	0x634 <MAIN_ResetCSLine>
    13c2:	08 95       	ret
		else
		  PORTB |= (1 << 0);
    13c4:	28 9a       	sbi	0x05, 0	; 5
    13c6:	08 95       	ret

000013c8 <DF_ReadBufferByte>:
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	7c 01       	movw	r14, r24
    13d2:	00 91 00 01 	lds	r16, 0x0100
    13d6:	10 91 01 01 	lds	r17, 0x0101
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    13e6:	84 e5       	ldi	r24, 0x54	; 84
    13e8:	f8 01       	movw	r30, r16
    13ea:	09 95       	icall
    13ec:	8f 2d       	mov	r24, r15
    13ee:	99 27       	eor	r25, r25
    13f0:	f8 01       	movw	r30, r16
    13f2:	09 95       	icall
    13f4:	8e 2d       	mov	r24, r14
    13f6:	f8 01       	movw	r30, r16
    13f8:	09 95       	icall
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	f8 01       	movw	r30, r16
    13fe:	09 95       	icall
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	f8 01       	movw	r30, r16
    1404:	09 95       	icall
    1406:	99 27       	eor	r25, r25
    1408:	1f 91       	pop	r17
    140a:	0f 91       	pop	r16
    140c:	ff 90       	pop	r15
    140e:	ef 90       	pop	r14
    1410:	08 95       	ret

00001412 <DF_ContinuousReadEnable>:
    1412:	ef 92       	push	r14
    1414:	ff 92       	push	r15
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	8c 01       	movw	r16, r24
    1420:	7b 01       	movw	r14, r22
    1422:	c0 91 00 01 	lds	r28, 0x0100
    1426:	d0 91 01 01 	lds	r29, 0x0101
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1436:	88 e6       	ldi	r24, 0x68	; 104
    1438:	fe 01       	movw	r30, r28
    143a:	09 95       	icall
    143c:	8a b5       	in	r24, 0x2a	; 42
    143e:	98 01       	movw	r18, r16
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DF_ContinuousReadEnable+0x34>
    1442:	36 95       	lsr	r19
    1444:	27 95       	ror	r18
    1446:	8a 95       	dec	r24
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DF_ContinuousReadEnable+0x30>
    144a:	c9 01       	movw	r24, r18
    144c:	fe 01       	movw	r30, r28
    144e:	09 95       	icall
    1450:	8b b5       	in	r24, 0x2b	; 43
    1452:	98 01       	movw	r18, r16
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DF_ContinuousReadEnable+0x48>
    1456:	22 0f       	add	r18, r18
    1458:	33 1f       	adc	r19, r19
    145a:	8a 95       	dec	r24
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <DF_ContinuousReadEnable+0x44>
    145e:	8f 2d       	mov	r24, r15
    1460:	99 27       	eor	r25, r25
    1462:	82 0f       	add	r24, r18
    1464:	fe 01       	movw	r30, r28
    1466:	09 95       	icall
    1468:	8e 2d       	mov	r24, r14
    146a:	fe 01       	movw	r30, r28
    146c:	09 95       	icall
    146e:	03 e0       	ldi	r16, 0x03	; 3
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	fe 01       	movw	r30, r28
    1474:	09 95       	icall
    1476:	01 50       	subi	r16, 0x01	; 1
    1478:	07 ff       	sbrs	r16, 7
    147a:	fa cf       	rjmp	.-12     	; 0x1470 <DF_ContinuousReadEnable+0x5e>
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	ff 90       	pop	r15
    1486:	ef 90       	pop	r14
    1488:	08 95       	ret

0000148a <DF_BufferWriteEnable>:
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	7c 01       	movw	r14, r24
    1494:	00 91 00 01 	lds	r16, 0x0100
    1498:	10 91 01 01 	lds	r17, 0x0101
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    14a8:	84 e8       	ldi	r24, 0x84	; 132
    14aa:	f8 01       	movw	r30, r16
    14ac:	09 95       	icall
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	f8 01       	movw	r30, r16
    14b2:	09 95       	icall
    14b4:	8f 2d       	mov	r24, r15
    14b6:	99 27       	eor	r25, r25
    14b8:	f8 01       	movw	r30, r16
    14ba:	09 95       	icall
    14bc:	8e 2d       	mov	r24, r14
    14be:	f8 01       	movw	r30, r16
    14c0:	09 95       	icall
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	08 95       	ret

000014cc <DF_WaitWhileBusy>:
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	c0 91 00 01 	lds	r28, 0x0100
    14d4:	d0 91 01 01 	lds	r29, 0x0101
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    14e4:	87 e5       	ldi	r24, 0x57	; 87
    14e6:	fe 01       	movw	r30, r28
    14e8:	09 95       	icall
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	fe 01       	movw	r30, r28
    14ee:	09 95       	icall
    14f0:	88 23       	and	r24, r24
    14f2:	dc f7       	brge	.-10     	; 0x14ea <DF_WaitWhileBusy+0x1e>
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <DF_EraseBlock>:
    14fa:	ef 92       	push	r14
    14fc:	ff 92       	push	r15
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	7c 01       	movw	r14, r24
    1504:	00 91 00 01 	lds	r16, 0x0100
    1508:	10 91 01 01 	lds	r17, 0x0101
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1518:	80 e5       	ldi	r24, 0x50	; 80
    151a:	f8 01       	movw	r30, r16
    151c:	09 95       	icall
    151e:	8f 2d       	mov	r24, r15
    1520:	99 27       	eor	r25, r25
    1522:	f8 01       	movw	r30, r16
    1524:	09 95       	icall
    1526:	8e 2d       	mov	r24, r14
    1528:	f8 01       	movw	r30, r16
    152a:	09 95       	icall
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	f8 01       	movw	r30, r16
    1530:	09 95       	icall
    1532:	0e 94 66 0a 	call	0x14cc <DF_WaitWhileBusy>
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	08 95       	ret

00001540 <DF_CopyFlashPageToBuffer>:
    1540:	ef 92       	push	r14
    1542:	ff 92       	push	r15
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	7c 01       	movw	r14, r24
    154a:	00 91 00 01 	lds	r16, 0x0100
    154e:	10 91 01 01 	lds	r17, 0x0101
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    155e:	83 e5       	ldi	r24, 0x53	; 83
    1560:	f8 01       	movw	r30, r16
    1562:	09 95       	icall
    1564:	8a b5       	in	r24, 0x2a	; 42
    1566:	97 01       	movw	r18, r14
    1568:	02 c0       	rjmp	.+4      	; 0x156e <DF_CopyFlashPageToBuffer+0x2e>
    156a:	36 95       	lsr	r19
    156c:	27 95       	ror	r18
    156e:	8a 95       	dec	r24
    1570:	e2 f7       	brpl	.-8      	; 0x156a <DF_CopyFlashPageToBuffer+0x2a>
    1572:	c9 01       	movw	r24, r18
    1574:	f8 01       	movw	r30, r16
    1576:	09 95       	icall
    1578:	8b b5       	in	r24, 0x2b	; 43
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DF_CopyFlashPageToBuffer+0x40>
    157c:	ee 0c       	add	r14, r14
    157e:	ff 1c       	adc	r15, r15
    1580:	8a 95       	dec	r24
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DF_CopyFlashPageToBuffer+0x3c>
    1584:	c7 01       	movw	r24, r14
    1586:	f8 01       	movw	r30, r16
    1588:	09 95       	icall
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	f8 01       	movw	r30, r16
    158e:	09 95       	icall
    1590:	0e 94 66 0a 	call	0x14cc <DF_WaitWhileBusy>
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	ff 90       	pop	r15
    159a:	ef 90       	pop	r14
    159c:	08 95       	ret

0000159e <DF_CopyBufferToFlashPage>:
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	7c 01       	movw	r14, r24
    15a8:	00 91 00 01 	lds	r16, 0x0100
    15ac:	10 91 01 01 	lds	r17, 0x0101
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    15bc:	83 e8       	ldi	r24, 0x83	; 131
    15be:	f8 01       	movw	r30, r16
    15c0:	09 95       	icall
    15c2:	8a b5       	in	r24, 0x2a	; 42
    15c4:	97 01       	movw	r18, r14
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DF_CopyBufferToFlashPage+0x2e>
    15c8:	36 95       	lsr	r19
    15ca:	27 95       	ror	r18
    15cc:	8a 95       	dec	r24
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DF_CopyBufferToFlashPage+0x2a>
    15d0:	c9 01       	movw	r24, r18
    15d2:	f8 01       	movw	r30, r16
    15d4:	09 95       	icall
    15d6:	8b b5       	in	r24, 0x2b	; 43
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <DF_CopyBufferToFlashPage+0x40>
    15da:	ee 0c       	add	r14, r14
    15dc:	ff 1c       	adc	r15, r15
    15de:	8a 95       	dec	r24
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <DF_CopyBufferToFlashPage+0x3c>
    15e2:	c7 01       	movw	r24, r14
    15e4:	f8 01       	movw	r30, r16
    15e6:	09 95       	icall
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	f8 01       	movw	r30, r16
    15ec:	09 95       	icall
    15ee:	0e 94 66 0a 	call	0x14cc <DF_WaitWhileBusy>
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	ff 90       	pop	r15
    15f8:	ef 90       	pop	r14
    15fa:	08 95       	ret

000015fc <DF_GetChipCharacteristics>:
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	00 91 00 01 	lds	r16, 0x0100
    1604:	10 91 01 01 	lds	r17, 0x0101
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1614:	87 e5       	ldi	r24, 0x57	; 87
    1616:	f8 01       	movw	r30, r16
    1618:	09 95       	icall
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	f8 01       	movw	r30, r16
    161e:	09 95       	icall
    1620:	99 27       	eor	r25, r25
    1622:	88 73       	andi	r24, 0x38	; 56
    1624:	90 70       	andi	r25, 0x00	; 0
    1626:	43 e0       	ldi	r20, 0x03	; 3
    1628:	95 95       	asr	r25
    162a:	87 95       	ror	r24
    162c:	4a 95       	dec	r20
    162e:	e1 f7       	brne	.-8      	; 0x1628 <DF_GetChipCharacteristics+0x2c>
    1630:	99 27       	eor	r25, r25
    1632:	fc 01       	movw	r30, r24
    1634:	ea 54       	subi	r30, 0x4A	; 74
    1636:	fc 4f       	sbci	r31, 0xFC	; 252
    1638:	44 91       	lpm	r20, Z
    163a:	40 93 68 02 	sts	0x0268, r20
    163e:	9c 01       	movw	r18, r24
    1640:	28 0f       	add	r18, r24
    1642:	39 1f       	adc	r19, r25
    1644:	f9 01       	movw	r30, r18
    1646:	ea 55       	subi	r30, 0x5A	; 90
    1648:	fc 4f       	sbci	r31, 0xFC	; 252
    164a:	85 91       	lpm	r24, Z+
    164c:	94 91       	lpm	r25, Z
    164e:	90 93 6a 02 	sts	0x026A, r25
    1652:	80 93 69 02 	sts	0x0269, r24
    1656:	f9 01       	movw	r30, r18
    1658:	ea 56       	subi	r30, 0x6A	; 106
    165a:	fc 4f       	sbci	r31, 0xFC	; 252
    165c:	85 91       	lpm	r24, Z+
    165e:	94 91       	lpm	r25, Z
    1660:	90 93 6c 02 	sts	0x026C, r25
    1664:	80 93 6b 02 	sts	0x026B, r24
    1668:	80 e1       	ldi	r24, 0x10	; 16
    166a:	84 1b       	sub	r24, r20
    166c:	8a bd       	out	0x2a, r24	; 42
    166e:	48 50       	subi	r20, 0x08	; 8
    1670:	4b bd       	out	0x2b, r20	; 43
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	08 95       	ret

00001678 <DF_CheckCorrectOnboardChip>:
    1678:	0e 94 fe 0a 	call	0x15fc <DF_GetChipCharacteristics>
    167c:	80 91 6b 02 	lds	r24, 0x026B
    1680:	90 91 6c 02 	lds	r25, 0x026C
    1684:	80 50       	subi	r24, 0x00	; 0
    1686:	98 40       	sbci	r25, 0x08	; 8
    1688:	61 f0       	breq	.+24     	; 0x16a2 <DF_CheckCorrectOnboardChip+0x2a>
    168a:	80 91 64 00 	lds	r24, 0x0064
    168e:	84 60       	ori	r24, 0x04	; 4
    1690:	80 93 64 00 	sts	0x0064, r24
    1694:	86 e8       	ldi	r24, 0x86	; 134
    1696:	93 e0       	ldi	r25, 0x03	; 3
    1698:	0e 94 6f 03 	call	0x6de <MAIN_ShowError>
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	08 95       	ret
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	08 95       	ret

000016a8 <__vector_13>:

// ======================================================================================

ISR(USART0_RX_vect, ISR_BLOCK)
{
    16a8:	1f 92       	push	r1
    16aa:	0f 92       	push	r0
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	0f 92       	push	r0
    16b0:	11 24       	eor	r1, r1
    16b2:	2f 93       	push	r18
    16b4:	3f 93       	push	r19
    16b6:	4f 93       	push	r20
    16b8:	5f 93       	push	r21
    16ba:	6f 93       	push	r22
    16bc:	7f 93       	push	r23
    16be:	8f 93       	push	r24
    16c0:	9f 93       	push	r25
    16c2:	af 93       	push	r26
    16c4:	bf 93       	push	r27
    16c6:	ef 93       	push	r30
    16c8:	ff 93       	push	r31
	if (BuffElements == BUFF_BUFFLEN)     // Buffer full
    16ca:	80 91 b3 02 	lds	r24, 0x02B3
    16ce:	80 34       	cpi	r24, 0x40	; 64
    16d0:	29 f4       	brne	.+10     	; 0x16dc <__vector_13+0x34>
	{
		MAIN_ShowError(PSTR("BUFF OVERFLOW"));
    16d2:	8e eb       	ldi	r24, 0xBE	; 190
    16d4:	93 e0       	ldi	r25, 0x03	; 3
    16d6:	0e 94 6f 03 	call	0x6de <MAIN_ShowError>
		return;
    16da:	20 c0       	rjmp	.+64     	; 0x171c <__vector_13+0x74>
	}
		
	*StoreLoc = UDR;                      // Store the data
    16dc:	e0 91 af 02 	lds	r30, 0x02AF
    16e0:	f0 91 b0 02 	lds	r31, 0x02B0
    16e4:	80 91 c6 00 	lds	r24, 0x00C6
    16e8:	80 83       	st	Z, r24

	StoreLoc++;                           // Increment the IN pointer to the next element
    16ea:	40 91 af 02 	lds	r20, 0x02AF
    16ee:	50 91 b0 02 	lds	r21, 0x02B0
    16f2:	9a 01       	movw	r18, r20
    16f4:	2f 5f       	subi	r18, 0xFF	; 255
    16f6:	3f 4f       	sbci	r19, 0xFF	; 255
    16f8:	30 93 b0 02 	sts	0x02B0, r19
    16fc:	20 93 af 02 	sts	0x02AF, r18
	BuffElements++;                       // Increment the total elements variable
    1700:	80 91 b3 02 	lds	r24, 0x02B3
    1704:	8f 5f       	subi	r24, 0xFF	; 255
    1706:	80 93 b3 02 	sts	0x02B3, r24

	if (StoreLoc == (BuffType*)&RingBuffer[BUFF_BUFFLEN])
    170a:	2f 5a       	subi	r18, 0xAF	; 175
    170c:	32 40       	sbci	r19, 0x02	; 2
    170e:	31 f4       	brne	.+12     	; 0x171c <__vector_13+0x74>
		StoreLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    1710:	4f 53       	subi	r20, 0x3F	; 63
    1712:	50 40       	sbci	r21, 0x00	; 0
    1714:	50 93 b0 02 	sts	0x02B0, r21
    1718:	40 93 af 02 	sts	0x02AF, r20
    171c:	ff 91       	pop	r31
    171e:	ef 91       	pop	r30
    1720:	bf 91       	pop	r27
    1722:	af 91       	pop	r26
    1724:	9f 91       	pop	r25
    1726:	8f 91       	pop	r24
    1728:	7f 91       	pop	r23
    172a:	6f 91       	pop	r22
    172c:	5f 91       	pop	r21
    172e:	4f 91       	pop	r20
    1730:	3f 91       	pop	r19
    1732:	2f 91       	pop	r18
    1734:	0f 90       	pop	r0
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	0f 90       	pop	r0
    173a:	1f 90       	pop	r1
    173c:	18 95       	reti

0000173e <BUFF_InitialiseBuffer>:
}	

// ======================================================================================

void BUFF_InitialiseBuffer(void)
{
	StoreLoc    = (BuffType*)&RingBuffer[0]; // Set up the IN pointer to the start of the buffer
    173e:	8f e6       	ldi	r24, 0x6F	; 111
    1740:	92 e0       	ldi	r25, 0x02	; 2
    1742:	90 93 b0 02 	sts	0x02B0, r25
    1746:	80 93 af 02 	sts	0x02AF, r24
	RetrieveLoc = (BuffType*)&RingBuffer[0]; // Set up the OUT pointer to the start of the buffer
    174a:	90 93 b2 02 	sts	0x02B2, r25
    174e:	80 93 b1 02 	sts	0x02B1, r24

	BuffElements = 0;                     // Reset the buffer elements counter
    1752:	10 92 b3 02 	sts	0x02B3, r1
    1756:	08 95       	ret

00001758 <BUFF_GetBuffByte>:
}

BuffType BUFF_GetBuffByte(void)
{
	if (!(BuffElements))                  // No elements in the buffer
    1758:	80 91 b3 02 	lds	r24, 0x02B3
    175c:	88 23       	and	r24, r24
    175e:	19 f4       	brne	.+6      	; 0x1766 <BUFF_GetBuffByte+0xe>
		return 0;
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	08 95       	ret

	BuffType RetrievedData = *RetrieveLoc; // Grab the stored byte into a temp variable
    1766:	20 91 b1 02 	lds	r18, 0x02B1
    176a:	30 91 b2 02 	lds	r19, 0x02B2
    176e:	f9 01       	movw	r30, r18
    1770:	91 91       	ld	r25, Z+

	RetrieveLoc++;                         // Increment the OUT pointer to the next element if flag set
    1772:	f0 93 b2 02 	sts	0x02B2, r31
    1776:	e0 93 b1 02 	sts	0x02B1, r30
	BuffElements--;                        // Decrement the total elements variable
    177a:	80 91 b3 02 	lds	r24, 0x02B3
    177e:	81 50       	subi	r24, 0x01	; 1
    1780:	80 93 b3 02 	sts	0x02B3, r24
	
	if (RetrieveLoc == (BuffType*)&RingBuffer[BUFF_BUFFLEN])
    1784:	ef 5a       	subi	r30, 0xAF	; 175
    1786:	f2 40       	sbci	r31, 0x02	; 2
    1788:	31 f4       	brne	.+12     	; 0x1796 <BUFF_GetBuffByte+0x3e>
		RetrieveLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    178a:	2f 53       	subi	r18, 0x3F	; 63
    178c:	30 40       	sbci	r19, 0x00	; 0
    178e:	30 93 b2 02 	sts	0x02B2, r19
    1792:	20 93 b1 02 	sts	0x02B1, r18
		
	return RetrievedData;                 // Return the retrieved data
    1796:	89 2f       	mov	r24, r25
    1798:	99 27       	eor	r25, r25
}
    179a:	08 95       	ret

0000179c <__vector_4>:
// ======================================================================================

// Packet Timeout = ((F_CPU / 1024) / (240 * TIMEOUT_TICKSBEFORETIMEOUT)) per second
ISR(TIMER2_COMP_vect, ISR_NOBLOCK)
{
    179c:	78 94       	sei
    179e:	1f 92       	push	r1
    17a0:	0f 92       	push	r0
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	0f 92       	push	r0
    17a6:	11 24       	eor	r1, r1
    17a8:	8f 93       	push	r24
	if (PacketTimeOutTicks++ == TIMEOUT_PACKET_TIMEOUTTICKS)
    17aa:	80 91 40 01 	lds	r24, 0x0140
    17ae:	8f 5f       	subi	r24, 0xFF	; 255
    17b0:	80 93 40 01 	sts	0x0140, r24
    17b4:	80 91 40 01 	lds	r24, 0x0140
    17b8:	87 39       	cpi	r24, 0x97	; 151
    17ba:	29 f4       	brne	.+10     	; 0x17c6 <__vector_4+0x2a>
	{
		PacketTimeOutTicks   = 0;
    17bc:	10 92 40 01 	sts	0x0140, r1
		PacketTimeOut        = TRUE;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	80 93 3f 01 	sts	0x013F, r24
    17c6:	8f 91       	pop	r24
    17c8:	0f 90       	pop	r0
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	0f 90       	pop	r0
    17ce:	1f 90       	pop	r1
    17d0:	18 95       	reti

000017d2 <TOUT_SetupSleepTimer>:
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    17d2:	a7 e8       	ldi	r26, 0x87	; 135
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    17d6:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
    17da:	80 2d       	mov	r24, r0
    17dc:	28 2f       	mov	r18, r24
	}
}

// Autosleep Timeout = (TIMEOUT_TICKSBEFORETIMEOUT / 10) secs between timeouts
ISR(TIMER1_OVF_vect, ISR_NOBLOCK)
{
	if (SleepTimeOutTicks++ == TicksBeforeAutoSleep)
	{
		TIMEOUT_SLEEP_TIMER_OFF();
		FUNCSleepMode();
		TOUT_SetupSleepTimer();
	}
}

// ======================================================================================

void TOUT_SetupSleepTimer(void)
{
	uint8_t NewTicksIndex = eeprom_read_byte(&EEPROMVars.AutoSleepValIndex);

	if (NewTicksIndex == 0xFF)
    17de:	8f 3f       	cpi	r24, 0xFF	; 255
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <TOUT_SetupSleepTimer+0x12>
	  NewTicksIndex = 4;
    17e2:	24 e0       	ldi	r18, 0x04	; 4

	TIMSK1 = (1 << TOIE1);
    17e4:	31 e0       	ldi	r19, 0x01	; 1
    17e6:	30 93 6f 00 	sts	0x006F, r19
	TicksBeforeAutoSleep = (pgm_read_byte(&AutoSleepTOValues[NewTicksIndex]) * 10);
    17ea:	e2 2f       	mov	r30, r18
    17ec:	ff 27       	eor	r31, r31
    17ee:	e4 53       	subi	r30, 0x34	; 52
    17f0:	fc 4f       	sbci	r31, 0xFC	; 252
    17f2:	94 91       	lpm	r25, Z
    17f4:	8a e0       	ldi	r24, 0x0A	; 10
    17f6:	98 9f       	mul	r25, r24
    17f8:	c0 01       	movw	r24, r0
    17fa:	11 24       	eor	r1, r1
    17fc:	90 93 3c 01 	sts	0x013C, r25
    1800:	80 93 3b 01 	sts	0x013B, r24

	TIMEOUT_SLEEP_TIMEOUT_RESET();
    1804:	10 92 3e 01 	sts	0x013E, r1
    1808:	10 92 3d 01 	sts	0x013D, r1
    180c:	10 92 85 00 	sts	0x0085, r1
    1810:	10 92 84 00 	sts	0x0084, r1
	
	if (NewTicksIndex)
    1814:	22 23       	and	r18, r18
    1816:	19 f0       	breq	.+6      	; 0x181e <TOUT_SetupSleepTimer+0x4c>
	  TIMEOUT_SLEEP_TIMER_ON();
    1818:	30 93 81 00 	sts	0x0081, r19
    181c:	08 95       	ret
	else
	  TIMEOUT_SLEEP_TIMER_OFF();
    181e:	20 93 81 00 	sts	0x0081, r18
    1822:	08 95       	ret

00001824 <__vector_9>:
    1824:	78 94       	sei
    1826:	1f 92       	push	r1
    1828:	0f 92       	push	r0
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	0f 92       	push	r0
    182e:	11 24       	eor	r1, r1
    1830:	2f 93       	push	r18
    1832:	3f 93       	push	r19
    1834:	4f 93       	push	r20
    1836:	5f 93       	push	r21
    1838:	6f 93       	push	r22
    183a:	7f 93       	push	r23
    183c:	8f 93       	push	r24
    183e:	9f 93       	push	r25
    1840:	af 93       	push	r26
    1842:	bf 93       	push	r27
    1844:	ef 93       	push	r30
    1846:	ff 93       	push	r31
    1848:	80 91 3d 01 	lds	r24, 0x013D
    184c:	90 91 3e 01 	lds	r25, 0x013E
    1850:	9c 01       	movw	r18, r24
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	90 93 3e 01 	sts	0x013E, r25
    1858:	80 93 3d 01 	sts	0x013D, r24
    185c:	80 91 3b 01 	lds	r24, 0x013B
    1860:	90 91 3c 01 	lds	r25, 0x013C
    1864:	28 17       	cp	r18, r24
    1866:	39 07       	cpc	r19, r25
    1868:	31 f4       	brne	.+12     	; 0x1876 <__vector_9+0x52>
    186a:	10 92 81 00 	sts	0x0081, r1
    186e:	0e 94 0c 07 	call	0xe18 <FUNCSleepMode>
    1872:	0e 94 e9 0b 	call	0x17d2 <TOUT_SetupSleepTimer>
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	bf 91       	pop	r27
    187c:	af 91       	pop	r26
    187e:	9f 91       	pop	r25
    1880:	8f 91       	pop	r24
    1882:	7f 91       	pop	r23
    1884:	6f 91       	pop	r22
    1886:	5f 91       	pop	r21
    1888:	4f 91       	pop	r20
    188a:	3f 91       	pop	r19
    188c:	2f 91       	pop	r18
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	0f 90       	pop	r0
    1894:	1f 90       	pop	r1
    1896:	18 95       	reti

00001898 <PD_SetupDFAddressCounters>:
}

void PD_SetupDFAddressCounters(void)
{
	uint32_t StartAddress = CurrAddress;
    1898:	20 91 42 01 	lds	r18, 0x0142
    189c:	30 91 43 01 	lds	r19, 0x0143
    18a0:	40 91 44 01 	lds	r20, 0x0144
    18a4:	50 91 45 01 	lds	r21, 0x0145

	CurrPageAddress = 0;
    18a8:	10 92 6e 02 	sts	0x026E, r1
    18ac:	10 92 6d 02 	sts	0x026D, r1

	while (StartAddress > DataflashInfo.PageSize)      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DataflashInfo.PageSize;         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    18b0:	80 91 69 02 	lds	r24, 0x0269
    18b4:	90 91 6a 02 	lds	r25, 0x026A
    18b8:	aa 27       	eor	r26, r26
    18ba:	bb 27       	eor	r27, r27
    18bc:	82 17       	cp	r24, r18
    18be:	93 07       	cpc	r25, r19
    18c0:	a4 07       	cpc	r26, r20
    18c2:	b5 07       	cpc	r27, r21
    18c4:	88 f4       	brcc	.+34     	; 0x18e8 <PD_SetupDFAddressCounters+0x50>
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	28 1b       	sub	r18, r24
    18cc:	39 0b       	sbc	r19, r25
    18ce:	4a 0b       	sbc	r20, r26
    18d0:	5b 0b       	sbc	r21, r27
    18d2:	6f 5f       	subi	r22, 0xFF	; 255
    18d4:	7f 4f       	sbci	r23, 0xFF	; 255
    18d6:	82 17       	cp	r24, r18
    18d8:	93 07       	cpc	r25, r19
    18da:	a4 07       	cpc	r26, r20
    18dc:	b5 07       	cpc	r27, r21
    18de:	a8 f3       	brcs	.-22     	; 0x18ca <PD_SetupDFAddressCounters+0x32>
    18e0:	70 93 6e 02 	sts	0x026E, r23
    18e4:	60 93 6d 02 	sts	0x026D, r22
	}
	
	CurrBuffByte = (uint16_t)StartAddress;              // The buffer byte is the remainder
    18e8:	30 93 67 02 	sts	0x0267, r19
    18ec:	20 93 66 02 	sts	0x0266, r18
    18f0:	08 95       	ret

000018f2 <PD_StoreDataflashByte>:
}

void PD_StoreDataflashByte(const uint8_t Data)
{
    18f2:	cf 93       	push	r28
    18f4:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DataflashInfo.PageSize)
    18f6:	20 91 66 02 	lds	r18, 0x0266
    18fa:	30 91 67 02 	lds	r19, 0x0267
    18fe:	80 91 69 02 	lds	r24, 0x0269
    1902:	90 91 6a 02 	lds	r25, 0x026A
    1906:	28 17       	cp	r18, r24
    1908:	39 07       	cpc	r19, r25
    190a:	a9 f4       	brne	.+42     	; 0x1936 <PD_StoreDataflashByte+0x44>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    190c:	80 91 6d 02 	lds	r24, 0x026D
    1910:	90 91 6e 02 	lds	r25, 0x026E
    1914:	9c 01       	movw	r18, r24
    1916:	01 96       	adiw	r24, 0x01	; 1
    1918:	90 93 6e 02 	sts	0x026E, r25
    191c:	80 93 6d 02 	sts	0x026D, r24
    1920:	c9 01       	movw	r24, r18
    1922:	0e 94 cf 0a 	call	0x159e <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 45 0a 	call	0x148a <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    192e:	10 92 67 02 	sts	0x0267, r1
    1932:	10 92 66 02 	sts	0x0266, r1
	}
	
	USI_SPITransmit(Data);                                 // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    1936:	8c 2f       	mov	r24, r28
    1938:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
	CurrBuffByte++;
    193c:	80 91 66 02 	lds	r24, 0x0266
    1940:	90 91 67 02 	lds	r25, 0x0267
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	90 93 67 02 	sts	0x0267, r25
    194a:	80 93 66 02 	sts	0x0266, r24
    194e:	cf 91       	pop	r28
    1950:	08 95       	ret

00001952 <PD_InterpretAVRISPPacket>:
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	dd 24       	eor	r13, r13
    1962:	80 91 4b 01 	lds	r24, 0x014B
    1966:	99 27       	eor	r25, r25
    1968:	86 31       	cpi	r24, 0x16	; 22
    196a:	91 05       	cpc	r25, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <PD_InterpretAVRISPPacket+0x1e>
    196e:	00 c1       	rjmp	.+512    	; 0x1b70 <PD_InterpretAVRISPPacket+0x21e>
    1970:	87 31       	cpi	r24, 0x17	; 23
    1972:	91 05       	cpc	r25, r1
    1974:	b4 f4       	brge	.+44     	; 0x19a2 <PD_InterpretAVRISPPacket+0x50>
    1976:	82 31       	cpi	r24, 0x12	; 18
    1978:	91 05       	cpc	r25, r1
    197a:	09 f4       	brne	.+2      	; 0x197e <PD_InterpretAVRISPPacket+0x2c>
    197c:	6f c0       	rjmp	.+222    	; 0x1a5c <PD_InterpretAVRISPPacket+0x10a>
    197e:	83 31       	cpi	r24, 0x13	; 19
    1980:	91 05       	cpc	r25, r1
    1982:	3c f4       	brge	.+14     	; 0x1992 <PD_InterpretAVRISPPacket+0x40>
    1984:	80 31       	cpi	r24, 0x10	; 16
    1986:	91 05       	cpc	r25, r1
    1988:	31 f1       	breq	.+76     	; 0x19d6 <PD_InterpretAVRISPPacket+0x84>
    198a:	41 97       	sbiw	r24, 0x11	; 17
    198c:	09 f4       	brne	.+2      	; 0x1990 <PD_InterpretAVRISPPacket+0x3e>
    198e:	46 c0       	rjmp	.+140    	; 0x1a1c <PD_InterpretAVRISPPacket+0xca>
    1990:	40 c1       	rjmp	.+640    	; 0x1c12 <PD_InterpretAVRISPPacket+0x2c0>
    1992:	84 31       	cpi	r24, 0x14	; 20
    1994:	91 05       	cpc	r25, r1
    1996:	09 f4       	brne	.+2      	; 0x199a <PD_InterpretAVRISPPacket+0x48>
    1998:	8a c0       	rjmp	.+276    	; 0x1aae <PD_InterpretAVRISPPacket+0x15c>
    199a:	45 97       	sbiw	r24, 0x15	; 21
    199c:	0c f0       	brlt	.+2      	; 0x19a0 <PD_InterpretAVRISPPacket+0x4e>
    199e:	af c0       	rjmp	.+350    	; 0x1afe <PD_InterpretAVRISPPacket+0x1ac>
    19a0:	7f c0       	rjmp	.+254    	; 0x1aa0 <PD_InterpretAVRISPPacket+0x14e>
    19a2:	89 31       	cpi	r24, 0x19	; 25
    19a4:	91 05       	cpc	r25, r1
    19a6:	09 f4       	brne	.+2      	; 0x19aa <PD_InterpretAVRISPPacket+0x58>
    19a8:	70 c0       	rjmp	.+224    	; 0x1a8a <PD_InterpretAVRISPPacket+0x138>
    19aa:	8a 31       	cpi	r24, 0x1A	; 26
    19ac:	91 05       	cpc	r25, r1
    19ae:	44 f4       	brge	.+16     	; 0x19c0 <PD_InterpretAVRISPPacket+0x6e>
    19b0:	87 31       	cpi	r24, 0x17	; 23
    19b2:	91 05       	cpc	r25, r1
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <PD_InterpretAVRISPPacket+0x66>
    19b6:	69 c0       	rjmp	.+210    	; 0x1a8a <PD_InterpretAVRISPPacket+0x138>
    19b8:	48 97       	sbiw	r24, 0x18	; 24
    19ba:	09 f4       	brne	.+2      	; 0x19be <PD_InterpretAVRISPPacket+0x6c>
    19bc:	58 c0       	rjmp	.+176    	; 0x1a6e <PD_InterpretAVRISPPacket+0x11c>
    19be:	29 c1       	rjmp	.+594    	; 0x1c12 <PD_InterpretAVRISPPacket+0x2c0>
    19c0:	8b 31       	cpi	r24, 0x1B	; 27
    19c2:	91 05       	cpc	r25, r1
    19c4:	e9 f1       	breq	.+122    	; 0x1a40 <PD_InterpretAVRISPPacket+0xee>
    19c6:	8b 31       	cpi	r24, 0x1B	; 27
    19c8:	91 05       	cpc	r25, r1
    19ca:	0c f4       	brge	.+2      	; 0x19ce <PD_InterpretAVRISPPacket+0x7c>
    19cc:	50 c0       	rjmp	.+160    	; 0x1a6e <PD_InterpretAVRISPPacket+0x11c>
    19ce:	4c 97       	sbiw	r24, 0x1c	; 28
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <PD_InterpretAVRISPPacket+0x82>
    19d2:	4d c0       	rjmp	.+154    	; 0x1a6e <PD_InterpretAVRISPPacket+0x11c>
    19d4:	1e c1       	rjmp	.+572    	; 0x1c12 <PD_InterpretAVRISPPacket+0x2c0>
    19d6:	82 e0       	ldi	r24, 0x02	; 2
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	90 93 48 01 	sts	0x0148, r25
    19de:	80 93 47 01 	sts	0x0147, r24
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    19e8:	0e 94 fe 0a 	call	0x15fc <DF_GetChipCharacteristics>
    19ec:	80 91 68 02 	lds	r24, 0x0268
    19f0:	88 23       	and	r24, r24
    19f2:	59 f0       	breq	.+22     	; 0x1a0a <PD_InterpretAVRISPPacket+0xb8>
    19f4:	81 ed       	ldi	r24, 0xD1	; 209
    19f6:	93 e0       	ldi	r25, 0x03	; 3
    19f8:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	80 93 46 01 	sts	0x0146, r24
    1a02:	81 b3       	in	r24, 0x11	; 17
    1a04:	8f 7c       	andi	r24, 0xCF	; 207
    1a06:	80 62       	ori	r24, 0x20	; 32
    1a08:	17 c0       	rjmp	.+46     	; 0x1a38 <PD_InterpretAVRISPPacket+0xe6>
    1a0a:	86 e8       	ldi	r24, 0x86	; 134
    1a0c:	93 e0       	ldi	r25, 0x03	; 3
    1a0e:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    1a12:	8d 2d       	mov	r24, r13
    1a14:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1a18:	80 ec       	ldi	r24, 0xC0	; 192
    1a1a:	02 c1       	rjmp	.+516    	; 0x1c20 <PD_InterpretAVRISPPacket+0x2ce>
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	90 93 48 01 	sts	0x0148, r25
    1a24:	80 93 47 01 	sts	0x0147, r24
    1a28:	d0 92 46 01 	sts	0x0146, r13
    1a2c:	8d 2d       	mov	r24, r13
    1a2e:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    1a32:	81 b3       	in	r24, 0x11	; 17
    1a34:	8f 7c       	andi	r24, 0xCF	; 207
    1a36:	80 61       	ori	r24, 0x10	; 16
    1a38:	81 bb       	out	0x11, r24	; 17
    1a3a:	d0 92 4c 01 	sts	0x014C, r13
    1a3e:	f2 c0       	rjmp	.+484    	; 0x1c24 <PD_InterpretAVRISPPacket+0x2d2>
    1a40:	84 e0       	ldi	r24, 0x04	; 4
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	90 93 48 01 	sts	0x0148, r25
    1a48:	80 93 47 01 	sts	0x0147, r24
    1a4c:	d0 92 4c 01 	sts	0x014C, r13
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	80 93 4d 01 	sts	0x014D, r24
    1a56:	d0 92 4e 01 	sts	0x014E, r13
    1a5a:	e4 c0       	rjmp	.+456    	; 0x1c24 <PD_InterpretAVRISPPacket+0x2d2>
    1a5c:	82 e0       	ldi	r24, 0x02	; 2
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	90 93 48 01 	sts	0x0148, r25
    1a64:	80 93 47 01 	sts	0x0147, r24
    1a68:	e1 e0       	ldi	r30, 0x01	; 1
    1a6a:	de 2e       	mov	r13, r30
    1a6c:	7e c0       	rjmp	.+252    	; 0x1b6a <PD_InterpretAVRISPPacket+0x218>
    1a6e:	84 e0       	ldi	r24, 0x04	; 4
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	90 93 48 01 	sts	0x0148, r25
    1a76:	80 93 47 01 	sts	0x0147, r24
    1a7a:	10 92 4c 01 	sts	0x014C, r1
    1a7e:	8f ef       	ldi	r24, 0xFF	; 255
    1a80:	80 93 4d 01 	sts	0x014D, r24
    1a84:	10 92 4e 01 	sts	0x014E, r1
    1a88:	cd c0       	rjmp	.+410    	; 0x1c24 <PD_InterpretAVRISPPacket+0x2d2>
    1a8a:	83 e0       	ldi	r24, 0x03	; 3
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	90 93 48 01 	sts	0x0148, r25
    1a92:	80 93 47 01 	sts	0x0147, r24
    1a96:	10 92 4c 01 	sts	0x014C, r1
    1a9a:	10 92 4d 01 	sts	0x014D, r1
    1a9e:	c2 c0       	rjmp	.+388    	; 0x1c24 <PD_InterpretAVRISPPacket+0x2d2>
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	90 93 48 01 	sts	0x0148, r25
    1aa8:	80 93 47 01 	sts	0x0147, r24
    1aac:	5e c0       	rjmp	.+188    	; 0x1b6a <PD_InterpretAVRISPPacket+0x218>
    1aae:	80 91 4c 01 	lds	r24, 0x014C
    1ab2:	99 27       	eor	r25, r25
    1ab4:	98 2f       	mov	r25, r24
    1ab6:	88 27       	eor	r24, r24
    1ab8:	20 91 4d 01 	lds	r18, 0x014D
    1abc:	33 27       	eor	r19, r19
    1abe:	82 2b       	or	r24, r18
    1ac0:	93 2b       	or	r25, r19
    1ac2:	03 96       	adiw	r24, 0x03	; 3
    1ac4:	90 93 48 01 	sts	0x0148, r25
    1ac8:	80 93 47 01 	sts	0x0147, r24
    1acc:	21 e0       	ldi	r18, 0x01	; 1
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	02 97       	sbiw	r24, 0x02	; 2
    1ad2:	28 17       	cp	r18, r24
    1ad4:	39 07       	cpc	r19, r25
    1ad6:	48 f4       	brcc	.+18     	; 0x1aea <PD_InterpretAVRISPPacket+0x198>
    1ad8:	4f ef       	ldi	r20, 0xFF	; 255
    1ada:	ec e4       	ldi	r30, 0x4C	; 76
    1adc:	f1 e0       	ldi	r31, 0x01	; 1
    1ade:	41 93       	st	Z+, r20
    1ae0:	2f 5f       	subi	r18, 0xFF	; 255
    1ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae4:	28 17       	cp	r18, r24
    1ae6:	39 07       	cpc	r19, r25
    1ae8:	d0 f3       	brcs	.-12     	; 0x1ade <PD_InterpretAVRISPPacket+0x18c>
    1aea:	10 92 4c 01 	sts	0x014C, r1
    1aee:	e0 91 47 01 	lds	r30, 0x0147
    1af2:	f0 91 48 01 	lds	r31, 0x0148
    1af6:	e6 5b       	subi	r30, 0xB6	; 182
    1af8:	fe 4f       	sbci	r31, 0xFE	; 254
    1afa:	10 82       	st	Z, r1
    1afc:	93 c0       	rjmp	.+294    	; 0x1c24 <PD_InterpretAVRISPPacket+0x2d2>
    1afe:	0e 94 4c 0c 	call	0x1898 <PD_SetupDFAddressCounters>
    1b02:	80 91 6d 02 	lds	r24, 0x026D
    1b06:	90 91 6e 02 	lds	r25, 0x026E
    1b0a:	0e 94 a0 0a 	call	0x1540 <DF_CopyFlashPageToBuffer>
    1b0e:	80 91 66 02 	lds	r24, 0x0266
    1b12:	90 91 67 02 	lds	r25, 0x0267
    1b16:	0e 94 45 0a 	call	0x148a <DF_BufferWriteEnable>
    1b1a:	80 91 4c 01 	lds	r24, 0x014C
    1b1e:	99 27       	eor	r25, r25
    1b20:	d8 2f       	mov	r29, r24
    1b22:	cc 27       	eor	r28, r28
    1b24:	80 91 4d 01 	lds	r24, 0x014D
    1b28:	99 27       	eor	r25, r25
    1b2a:	c8 2b       	or	r28, r24
    1b2c:	d9 2b       	or	r29, r25
    1b2e:	00 e0       	ldi	r16, 0x00	; 0
    1b30:	10 e0       	ldi	r17, 0x00	; 0
    1b32:	0c 17       	cp	r16, r28
    1b34:	1d 07       	cpc	r17, r29
    1b36:	c8 f4       	brcc	.+50     	; 0x1b6a <PD_InterpretAVRISPPacket+0x218>
    1b38:	55 e5       	ldi	r21, 0x55	; 85
    1b3a:	e5 2e       	mov	r14, r21
    1b3c:	51 e0       	ldi	r21, 0x01	; 1
    1b3e:	f5 2e       	mov	r15, r21
    1b40:	f7 01       	movw	r30, r14
    1b42:	81 91       	ld	r24, Z+
    1b44:	7f 01       	movw	r14, r30
    1b46:	0e 94 79 0c 	call	0x18f2 <PD_StoreDataflashByte>
    1b4a:	80 91 66 02 	lds	r24, 0x0266
    1b4e:	90 91 67 02 	lds	r25, 0x0267
    1b52:	01 96       	adiw	r24, 0x01	; 1
    1b54:	90 93 67 02 	sts	0x0267, r25
    1b58:	80 93 66 02 	sts	0x0266, r24
    1b5c:	0e 94 3b 0f 	call	0x1e76 <V2P_IncrementCurrAddress>
    1b60:	0f 5f       	subi	r16, 0xFF	; 255
    1b62:	1f 4f       	sbci	r17, 0xFF	; 255
    1b64:	0c 17       	cp	r16, r28
    1b66:	1d 07       	cpc	r17, r29
    1b68:	58 f3       	brcs	.-42     	; 0x1b40 <PD_InterpretAVRISPPacket+0x1ee>
    1b6a:	10 92 4c 01 	sts	0x014C, r1
    1b6e:	5a c0       	rjmp	.+180    	; 0x1c24 <PD_InterpretAVRISPPacket+0x2d2>
    1b70:	0e 94 4c 0c 	call	0x1898 <PD_SetupDFAddressCounters>
    1b74:	80 91 6d 02 	lds	r24, 0x026D
    1b78:	90 91 6e 02 	lds	r25, 0x026E
    1b7c:	0e 94 a0 0a 	call	0x1540 <DF_CopyFlashPageToBuffer>
    1b80:	80 91 4c 01 	lds	r24, 0x014C
    1b84:	99 27       	eor	r25, r25
    1b86:	d8 2f       	mov	r29, r24
    1b88:	cc 27       	eor	r28, r28
    1b8a:	80 91 4d 01 	lds	r24, 0x014D
    1b8e:	99 27       	eor	r25, r25
    1b90:	c8 2b       	or	r28, r24
    1b92:	d9 2b       	or	r29, r25
    1b94:	00 e0       	ldi	r16, 0x00	; 0
    1b96:	10 e0       	ldi	r17, 0x00	; 0
    1b98:	0c 17       	cp	r16, r28
    1b9a:	1d 07       	cpc	r17, r29
    1b9c:	70 f5       	brcc	.+92     	; 0x1bfa <PD_InterpretAVRISPPacket+0x2a8>
    1b9e:	3d e4       	ldi	r19, 0x4D	; 77
    1ba0:	e3 2e       	mov	r14, r19
    1ba2:	31 e0       	ldi	r19, 0x01	; 1
    1ba4:	f3 2e       	mov	r15, r19
    1ba6:	20 91 66 02 	lds	r18, 0x0266
    1baa:	30 91 67 02 	lds	r19, 0x0267
    1bae:	80 91 69 02 	lds	r24, 0x0269
    1bb2:	90 91 6a 02 	lds	r25, 0x026A
    1bb6:	28 17       	cp	r18, r24
    1bb8:	39 07       	cpc	r19, r25
    1bba:	41 f4       	brne	.+16     	; 0x1bcc <PD_InterpretAVRISPPacket+0x27a>
    1bbc:	0e 94 4c 0c 	call	0x1898 <PD_SetupDFAddressCounters>
    1bc0:	80 91 6d 02 	lds	r24, 0x026D
    1bc4:	90 91 6e 02 	lds	r25, 0x026E
    1bc8:	0e 94 a0 0a 	call	0x1540 <DF_CopyFlashPageToBuffer>
    1bcc:	80 91 66 02 	lds	r24, 0x0266
    1bd0:	90 91 67 02 	lds	r25, 0x0267
    1bd4:	9c 01       	movw	r18, r24
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	90 93 67 02 	sts	0x0267, r25
    1bdc:	80 93 66 02 	sts	0x0266, r24
    1be0:	c9 01       	movw	r24, r18
    1be2:	0e 94 e4 09 	call	0x13c8 <DF_ReadBufferByte>
    1be6:	f7 01       	movw	r30, r14
    1be8:	81 93       	st	Z+, r24
    1bea:	7f 01       	movw	r14, r30
    1bec:	0e 94 3b 0f 	call	0x1e76 <V2P_IncrementCurrAddress>
    1bf0:	0f 5f       	subi	r16, 0xFF	; 255
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	0c 17       	cp	r16, r28
    1bf6:	1d 07       	cpc	r17, r29
    1bf8:	b0 f2       	brcs	.-84     	; 0x1ba6 <PD_InterpretAVRISPPacket+0x254>
    1bfa:	23 96       	adiw	r28, 0x03	; 3
    1bfc:	d0 93 48 01 	sts	0x0148, r29
    1c00:	c0 93 47 01 	sts	0x0147, r28
    1c04:	23 97       	sbiw	r28, 0x03	; 3
    1c06:	10 92 4c 01 	sts	0x014C, r1
    1c0a:	c5 5b       	subi	r28, 0xB5	; 181
    1c0c:	de 4f       	sbci	r29, 0xFE	; 254
    1c0e:	1a 82       	std	Y+2, r1	; 0x02
    1c10:	09 c0       	rjmp	.+18     	; 0x1c24 <PD_InterpretAVRISPPacket+0x2d2>
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	90 93 48 01 	sts	0x0148, r25
    1c1a:	80 93 47 01 	sts	0x0147, r24
    1c1e:	89 ec       	ldi	r24, 0xC9	; 201
    1c20:	80 93 4c 01 	sts	0x014C, r24
    1c24:	0e 94 5a 0e 	call	0x1cb4 <V2P_SendPacket>
    1c28:	dd 20       	and	r13, r13
    1c2a:	d9 f0       	breq	.+54     	; 0x1c62 <PD_InterpretAVRISPPacket+0x310>
    1c2c:	80 e3       	ldi	r24, 0x30	; 48
    1c2e:	92 e0       	ldi	r25, 0x02	; 2
    1c30:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    1c34:	c0 e0       	ldi	r28, 0x00	; 0
    1c36:	d0 e0       	ldi	r29, 0x00	; 0
    1c38:	80 91 6b 02 	lds	r24, 0x026B
    1c3c:	90 91 6c 02 	lds	r25, 0x026C
    1c40:	23 e0       	ldi	r18, 0x03	; 3
    1c42:	96 95       	lsr	r25
    1c44:	87 95       	ror	r24
    1c46:	2a 95       	dec	r18
    1c48:	e1 f7       	brne	.-8      	; 0x1c42 <PD_InterpretAVRISPPacket+0x2f0>
    1c4a:	c8 17       	cp	r28, r24
    1c4c:	d9 07       	cpc	r29, r25
    1c4e:	28 f4       	brcc	.+10     	; 0x1c5a <PD_InterpretAVRISPPacket+0x308>
    1c50:	ce 01       	movw	r24, r28
    1c52:	0e 94 7d 0a 	call	0x14fa <DF_EraseBlock>
    1c56:	21 96       	adiw	r28, 0x01	; 1
    1c58:	ef cf       	rjmp	.-34     	; 0x1c38 <PD_InterpretAVRISPPacket+0x2e6>
    1c5a:	81 ed       	ldi	r24, 0xD1	; 209
    1c5c:	93 e0       	ldi	r25, 0x03	; 3
    1c5e:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
    1c6a:	ff 90       	pop	r15
    1c6c:	ef 90       	pop	r14
    1c6e:	df 90       	pop	r13
    1c70:	08 95       	ret

00001c72 <V2P_GetChecksum>:
	
	/* Checksum for the V2 protocol is comprised of an XOR of all the packet 
      bytes, including the start, sequence number, size and token bytes.    */
	
	CheckSumByte  = AICB_MESSAGE_START;
    1c72:	6b e1       	ldi	r22, 0x1B	; 27
	CheckSumByte ^= SequenceNum;
    1c74:	80 91 49 01 	lds	r24, 0x0149
    1c78:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize >> 8);
    1c7a:	20 91 47 01 	lds	r18, 0x0147
    1c7e:	30 91 48 01 	lds	r19, 0x0148
    1c82:	83 2f       	mov	r24, r19
    1c84:	99 27       	eor	r25, r25
    1c86:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize);
    1c88:	80 91 47 01 	lds	r24, 0x0147
    1c8c:	68 27       	eor	r22, r24
	CheckSumByte ^= AICB_TOKEN;
    1c8e:	8e e0       	ldi	r24, 0x0E	; 14
    1c90:	68 27       	eor	r22, r24
	
	for (uint16_t CByteIndex = 0; CByteIndex < MessageSize; CByteIndex++)
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	42 17       	cp	r20, r18
    1c98:	53 07       	cpc	r21, r19
    1c9a:	48 f4       	brcc	.+18     	; 0x1cae <V2P_GetChecksum+0x3c>
    1c9c:	eb e4       	ldi	r30, 0x4B	; 75
    1c9e:	f1 e0       	ldi	r31, 0x01	; 1
	   CheckSumByte ^= PacketBytes[CByteIndex];
    1ca0:	81 91       	ld	r24, Z+
    1ca2:	68 27       	eor	r22, r24
    1ca4:	4f 5f       	subi	r20, 0xFF	; 255
    1ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca8:	42 17       	cp	r20, r18
    1caa:	53 07       	cpc	r21, r19
    1cac:	c8 f3       	brcs	.-14     	; 0x1ca0 <V2P_GetChecksum+0x2e>

	return CheckSumByte;
}
    1cae:	86 2f       	mov	r24, r22
    1cb0:	99 27       	eor	r25, r25
    1cb2:	08 95       	ret

00001cb4 <V2P_SendPacket>:
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	8b e1       	ldi	r24, 0x1B	; 27
    1cbe:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1cc2:	80 91 49 01 	lds	r24, 0x0149
    1cc6:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1cca:	80 91 48 01 	lds	r24, 0x0148
    1cce:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1cd2:	80 91 47 01 	lds	r24, 0x0147
    1cd6:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1cda:	8e e0       	ldi	r24, 0x0E	; 14
    1cdc:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1ce0:	c0 e0       	ldi	r28, 0x00	; 0
    1ce2:	d0 e0       	ldi	r29, 0x00	; 0
    1ce4:	80 91 47 01 	lds	r24, 0x0147
    1ce8:	90 91 48 01 	lds	r25, 0x0148
    1cec:	c8 17       	cp	r28, r24
    1cee:	d9 07       	cpc	r29, r25
    1cf0:	78 f4       	brcc	.+30     	; 0x1d10 <V2P_SendPacket+0x5c>
    1cf2:	0b e4       	ldi	r16, 0x4B	; 75
    1cf4:	11 e0       	ldi	r17, 0x01	; 1
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	81 91       	ld	r24, Z+
    1cfa:	8f 01       	movw	r16, r30
    1cfc:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1d00:	21 96       	adiw	r28, 0x01	; 1
    1d02:	80 91 47 01 	lds	r24, 0x0147
    1d06:	90 91 48 01 	lds	r25, 0x0148
    1d0a:	c8 17       	cp	r28, r24
    1d0c:	d9 07       	cpc	r29, r25
    1d0e:	98 f3       	brcs	.-26     	; 0x1cf6 <V2P_SendPacket+0x42>
    1d10:	0e 94 39 0e 	call	0x1c72 <V2P_GetChecksum>
    1d14:	0e 94 1a 09 	call	0x1234 <USART_Tx>
    1d18:	80 91 49 01 	lds	r24, 0x0149
    1d1c:	90 91 4a 01 	lds	r25, 0x014A
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	90 93 4a 01 	sts	0x014A, r25
    1d26:	80 93 49 01 	sts	0x0149, r24
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	08 95       	ret

00001d34 <V2P_GetSetParamater>:

void V2P_GetSetParamater(void)
{
	uint8_t Param_Name = PacketBytes[1];    // Save the parameter number
    1d34:	20 91 4c 01 	lds	r18, 0x014C

	MessageSize = 3;                        // Set the default response message size to 3 bytes     
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	90 93 48 01 	sts	0x0148, r25
    1d40:	80 93 47 01 	sts	0x0147, r24
	PacketBytes[1] = AICB_STATUS_CMD_OK;    // Set the default response to OK
    1d44:	10 92 4c 01 	sts	0x014C, r1

	switch (Param_Name)                    // Switch based on the recieved parameter byte
    1d48:	33 27       	eor	r19, r19
    1d4a:	22 39       	cpi	r18, 0x92	; 146
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	51 f1       	breq	.+84     	; 0x1da4 <V2P_GetSetParamater+0x70>
    1d50:	23 39       	cpi	r18, 0x93	; 147
    1d52:	31 05       	cpc	r19, r1
    1d54:	8c f4       	brge	.+34     	; 0x1d78 <V2P_GetSetParamater+0x44>
    1d56:	21 38       	cpi	r18, 0x81	; 129
    1d58:	31 05       	cpc	r19, r1
    1d5a:	01 f1       	breq	.+64     	; 0x1d9c <V2P_GetSetParamater+0x68>
    1d5c:	22 38       	cpi	r18, 0x82	; 130
    1d5e:	31 05       	cpc	r19, r1
    1d60:	24 f4       	brge	.+8      	; 0x1d6a <V2P_GetSetParamater+0x36>
    1d62:	20 38       	cpi	r18, 0x80	; 128
    1d64:	31 05       	cpc	r19, r1
    1d66:	41 f1       	breq	.+80     	; 0x1db8 <V2P_GetSetParamater+0x84>
    1d68:	7a c0       	rjmp	.+244    	; 0x1e5e <V2P_GetSetParamater+0x12a>
    1d6a:	20 39       	cpi	r18, 0x90	; 144
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	c1 f0       	breq	.+48     	; 0x1da0 <V2P_GetSetParamater+0x6c>
    1d70:	21 39       	cpi	r18, 0x91	; 145
    1d72:	31 05       	cpc	r19, r1
    1d74:	a9 f0       	breq	.+42     	; 0x1da0 <V2P_GetSetParamater+0x6c>
    1d76:	73 c0       	rjmp	.+230    	; 0x1e5e <V2P_GetSetParamater+0x12a>
    1d78:	28 39       	cpi	r18, 0x98	; 152
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	89 f1       	breq	.+98     	; 0x1de0 <V2P_GetSetParamater+0xac>
    1d7e:	29 39       	cpi	r18, 0x99	; 153
    1d80:	31 05       	cpc	r19, r1
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <V2P_GetSetParamater+0x5a>
    1d84:	26 39       	cpi	r18, 0x96	; 150
    1d86:	31 05       	cpc	r19, r1
    1d88:	0c f4       	brge	.+2      	; 0x1d8c <V2P_GetSetParamater+0x58>
    1d8a:	69 c0       	rjmp	.+210    	; 0x1e5e <V2P_GetSetParamater+0x12a>
    1d8c:	5a c0       	rjmp	.+180    	; 0x1e42 <V2P_GetSetParamater+0x10e>
    1d8e:	2e 39       	cpi	r18, 0x9E	; 158
    1d90:	31 05       	cpc	r19, r1
    1d92:	e1 f1       	breq	.+120    	; 0x1e0c <V2P_GetSetParamater+0xd8>
    1d94:	2f 39       	cpi	r18, 0x9F	; 159
    1d96:	31 05       	cpc	r19, r1
    1d98:	89 f0       	breq	.+34     	; 0x1dbc <V2P_GetSetParamater+0x88>
    1d9a:	61 c0       	rjmp	.+194    	; 0x1e5e <V2P_GetSetParamater+0x12a>
	{
		case AICB_PARAM_BUILD_NUMBER_LOW:
			PacketBytes[2] = VERSION_MINOR;

			break;
		case AICB_PARAM_BUILD_NUMBER_HIGH:
			PacketBytes[2] = VERSION_MAJOR;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	3f c0       	rjmp	.+126    	; 0x1e1e <V2P_GetSetParamater+0xea>

			break;
		case AICB_PARAM_HARDWARE_VERSION:
			PacketBytes[2] = V2P_HW_VERSION;

			break;
		case AICB_PARAM_SW_MAJOR:
			PacketBytes[2] = V2P_SW_VERSION_MAJOR;
    1da0:	82 e0       	ldi	r24, 0x02	; 2
    1da2:	3d c0       	rjmp	.+122    	; 0x1e1e <V2P_GetSetParamater+0xea>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    1da4:	a6 e8       	ldi	r26, 0x86	; 134
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	9d 01       	movw	r18, r26
  uint8_t result;
  asm volatile
    1daa:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
    1dae:	80 2d       	mov	r24, r0
    1db0:	8f 3f       	cpi	r24, 0xFF	; 255
    1db2:	11 f0       	breq	.+4      	; 0x1db8 <V2P_GetSetParamater+0x84>
    1db4:	d9 01       	movw	r26, r18
    1db6:	30 c0       	rjmp	.+96     	; 0x1e18 <V2P_GetSetParamater+0xe4>
    1db8:	84 e0       	ldi	r24, 0x04	; 4
    1dba:	31 c0       	rjmp	.+98     	; 0x1e1e <V2P_GetSetParamater+0xea>

			break;
		case AICB_PARAM_SW_MINOR:
			PacketBytes[2] = ((eeprom_read_byte(&EEPROMVars.FirmVerMinor) == 0xFF)? V2P_SW_VERSION_MINOR_DEFAULT : eeprom_read_byte(&EEPROMVars.FirmVerMinor));

			break;
		case AICB_PARAM_CONTROLLER_INIT:
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
    1dbc:	80 91 4b 01 	lds	r24, 0x014B
    1dc0:	83 30       	cpi	r24, 0x03	; 3
    1dc2:	19 f4       	brne	.+6      	; 0x1dca <V2P_GetSetParamater+0x96>
			{
				PacketBytes[2] = Param_ControllerInit;
    1dc4:	80 91 41 01 	lds	r24, 0x0141
    1dc8:	2a c0       	rjmp	.+84     	; 0x1e1e <V2P_GetSetParamater+0xea>
			}
			else
			{
				MessageSize = 2;
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	90 93 48 01 	sts	0x0148, r25
    1dd2:	80 93 47 01 	sts	0x0147, r24
				Param_ControllerInit = PacketBytes[2];
    1dd6:	80 91 4d 01 	lds	r24, 0x014D
    1dda:	80 93 41 01 	sts	0x0141, r24
			}
			
			break;
    1dde:	48 c0       	rjmp	.+144    	; 0x1e70 <V2P_GetSetParamater+0x13c>
		case AICB_PARAM_SCK_DURATION:
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
    1de0:	80 91 4b 01 	lds	r24, 0x014B
    1de4:	a1 e0       	ldi	r26, 0x01	; 1
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	83 30       	cpi	r24, 0x03	; 3
    1dea:	b1 f0       	breq	.+44     	; 0x1e18 <V2P_GetSetParamater+0xe4>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.SCKDuration);
			}
			else
			{
				MessageSize = 2;
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	90 93 48 01 	sts	0x0148, r25
    1df4:	80 93 47 01 	sts	0x0147, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1df8:	80 91 4d 01 	lds	r24, 0x014D
  asm volatile (
    1dfc:	08 2e       	mov	r0, r24
    1dfe:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.SCKDuration, PacketBytes[2]);
				USI_SPISetSpeed(PacketBytes[2]); // Re-Initialise the USI system with the new frequency
    1e02:	80 91 4d 01 	lds	r24, 0x014D
    1e06:	0e 94 68 09 	call	0x12d0 <USI_SPISetSpeed>
			}
					
			break;
    1e0a:	32 c0       	rjmp	.+100    	; 0x1e70 <V2P_GetSetParamater+0x13c>
		case AICB_PARAM_RESET_POLARITY:
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
    1e0c:	80 91 4b 01 	lds	r24, 0x014B
    1e10:	a0 e0       	ldi	r26, 0x00	; 0
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	83 30       	cpi	r24, 0x03	; 3
    1e16:	31 f4       	brne	.+12     	; 0x1e24 <V2P_GetSetParamater+0xf0>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1e18:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
    1e1c:	80 2d       	mov	r24, r0
    1e1e:	80 93 4d 01 	sts	0x014D, r24
    1e22:	26 c0       	rjmp	.+76     	; 0x1e70 <V2P_GetSetParamater+0x13c>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.ResetPolarity);		
			}
			else
			{
				MessageSize = 2;
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	90 93 48 01 	sts	0x0148, r25
    1e2c:	80 93 47 01 	sts	0x0147, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1e30:	80 91 4d 01 	lds	r24, 0x014D
  asm volatile (
    1e34:	08 2e       	mov	r0, r24
    1e36:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.ResetPolarity, PacketBytes[2]);
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Change takes effect immediatly
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	0e 94 1a 03 	call	0x634 <MAIN_ResetCSLine>
			}
			
			break;
    1e40:	17 c0       	rjmp	.+46     	; 0x1e70 <V2P_GetSetParamater+0x13c>
		case AICB_PARAM_OSC_PSCALE:
		case AICB_PARAM_OSC_CMATCH:
			/* Despite not supporting these parameters (STK500 only), the AVR Studio programmer
			   sends them along with the SCK duration. A OK must be returned or the sequence will fail
			   and the SCK duration byte will not be sent.                                             */
		
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
    1e42:	80 91 4b 01 	lds	r24, 0x014B
    1e46:	83 30       	cpi	r24, 0x03	; 3
    1e48:	19 f4       	brne	.+6      	; 0x1e50 <V2P_GetSetParamater+0x11c>
			  PacketBytes[2] = 0;             // If the command is a read, return a 0 for both parameters
    1e4a:	10 92 4d 01 	sts	0x014D, r1
    1e4e:	10 c0       	rjmp	.+32     	; 0x1e70 <V2P_GetSetParamater+0x13c>
			else
			  MessageSize = 2;                // Otherwise just send back an OK if the command is a set		
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	90 93 48 01 	sts	0x0148, r25
    1e58:	80 93 47 01 	sts	0x0147, r24
			
			break;
    1e5c:	09 c0       	rjmp	.+18     	; 0x1e70 <V2P_GetSetParamater+0x13c>
		default:                             // Unrecognised parameter
			MessageSize = 2;
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	90 93 48 01 	sts	0x0148, r25
    1e66:	80 93 47 01 	sts	0x0147, r24
			PacketBytes[1] = AICB_STATUS_CMD_FAILED;			
    1e6a:	80 ec       	ldi	r24, 0xC0	; 192
    1e6c:	80 93 4c 01 	sts	0x014C, r24
	}
	
	V2P_SendPacket();
    1e70:	0e 94 5a 0e 	call	0x1cb4 <V2P_SendPacket>
    1e74:	08 95       	ret

00001e76 <V2P_IncrementCurrAddress>:
}

void V2P_IncrementCurrAddress(void)
{
	// Incrementing a 32-bit unsigned variable takes a lot of code. Because much of the code is
	// not very time critical (much of it is waiting for the hardware), i've chosen to waste
	// a few extra cycles per increment and save a good 60 bytes or so of code space by putting
	// the incrmement inside a function.

	CurrAddress++;
    1e76:	80 91 42 01 	lds	r24, 0x0142
    1e7a:	90 91 43 01 	lds	r25, 0x0143
    1e7e:	a0 91 44 01 	lds	r26, 0x0144
    1e82:	b0 91 45 01 	lds	r27, 0x0145
    1e86:	01 96       	adiw	r24, 0x01	; 1
    1e88:	a1 1d       	adc	r26, r1
    1e8a:	b1 1d       	adc	r27, r1
    1e8c:	80 93 42 01 	sts	0x0142, r24
    1e90:	90 93 43 01 	sts	0x0143, r25
    1e94:	a0 93 44 01 	sts	0x0144, r26
    1e98:	b0 93 45 01 	sts	0x0145, r27
    1e9c:	08 95       	ret

00001e9e <V2P_CheckForExtendedAddress>:
}

void V2P_CheckForExtendedAddress(void)
{
	if (CurrAddress & V2P_LOAD_EXTENDED_ADDR_FLAG)     // MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
    1e9e:	80 91 42 01 	lds	r24, 0x0142
    1ea2:	90 91 43 01 	lds	r25, 0x0143
    1ea6:	a0 91 44 01 	lds	r26, 0x0144
    1eaa:	b0 91 45 01 	lds	r27, 0x0145
    1eae:	b7 ff       	sbrs	r27, 7
    1eb0:	1e c0       	rjmp	.+60     	; 0x1eee <V2P_CheckForExtendedAddress+0x50>
	{
		USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);   // Load extended address command
    1eb2:	8d e4       	ldi	r24, 0x4D	; 77
    1eb4:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
		USI_SPITransmit((CurrAddress & V2P_LOAD_EXTENDED_ADDR_MASK) >> V2P_LOAD_EXTENDED_ADDR_SHIFT);
    1ebe:	80 91 44 01 	lds	r24, 0x0144
    1ec2:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
		
		CurrAddress &= ~(V2P_LOAD_EXTENDED_ADDR_FLAG); // Clear the flag
    1ecc:	80 91 42 01 	lds	r24, 0x0142
    1ed0:	90 91 43 01 	lds	r25, 0x0143
    1ed4:	a0 91 44 01 	lds	r26, 0x0144
    1ed8:	b0 91 45 01 	lds	r27, 0x0145
    1edc:	bf 77       	andi	r27, 0x7F	; 127
    1ede:	80 93 42 01 	sts	0x0142, r24
    1ee2:	90 93 43 01 	sts	0x0143, r25
    1ee6:	a0 93 44 01 	sts	0x0144, r26
    1eea:	b0 93 45 01 	sts	0x0145, r27
    1eee:	08 95       	ret

00001ef0 <V2P_RunStateMachine>:
    1ef0:	ef 92       	push	r14
    1ef2:	ff 92       	push	r15
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	c0 e0       	ldi	r28, 0x00	; 0
    1efc:	ee 24       	eor	r14, r14
    1efe:	ff 24       	eor	r15, r15
    1f00:	0e 94 9f 0b 	call	0x173e <BUFF_InitialiseBuffer>
    1f04:	c0 93 81 00 	sts	0x0081, r28
    1f08:	c0 93 46 01 	sts	0x0146, r28
    1f0c:	10 92 42 01 	sts	0x0142, r1
    1f10:	10 92 43 01 	sts	0x0143, r1
    1f14:	10 92 44 01 	sts	0x0144, r1
    1f18:	10 92 45 01 	sts	0x0145, r1
    1f1c:	80 91 3f 01 	lds	r24, 0x013F
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	11 f4       	brne	.+4      	; 0x1f28 <V2P_RunStateMachine+0x38>
    1f24:	ca e0       	ldi	r28, 0x0A	; 10
    1f26:	11 c0       	rjmp	.+34     	; 0x1f4a <V2P_RunStateMachine+0x5a>
    1f28:	cc 23       	and	r28, r28
    1f2a:	79 f0       	breq	.+30     	; 0x1f4a <V2P_RunStateMachine+0x5a>
    1f2c:	10 92 3f 01 	sts	0x013F, r1
    1f30:	10 92 40 01 	sts	0x0140, r1
    1f34:	10 92 b2 00 	sts	0x00B2, r1
    1f38:	80 ef       	ldi	r24, 0xF0	; 240
    1f3a:	80 93 b3 00 	sts	0x00B3, r24
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	80 93 70 00 	sts	0x0070, r24
    1f44:	8f e0       	ldi	r24, 0x0F	; 15
    1f46:	80 93 b0 00 	sts	0x00B0, r24
    1f4a:	8c 2f       	mov	r24, r28
    1f4c:	99 27       	eor	r25, r25
    1f4e:	85 30       	cpi	r24, 0x05	; 5
    1f50:	91 05       	cpc	r25, r1
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <V2P_RunStateMachine+0x66>
    1f54:	87 c0       	rjmp	.+270    	; 0x2064 <V2P_RunStateMachine+0x174>
    1f56:	86 30       	cpi	r24, 0x06	; 6
    1f58:	91 05       	cpc	r25, r1
    1f5a:	ac f4       	brge	.+42     	; 0x1f86 <V2P_RunStateMachine+0x96>
    1f5c:	82 30       	cpi	r24, 0x02	; 2
    1f5e:	91 05       	cpc	r25, r1
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <V2P_RunStateMachine+0x74>
    1f62:	57 c0       	rjmp	.+174    	; 0x2012 <V2P_RunStateMachine+0x122>
    1f64:	83 30       	cpi	r24, 0x03	; 3
    1f66:	91 05       	cpc	r25, r1
    1f68:	34 f4       	brge	.+12     	; 0x1f76 <V2P_RunStateMachine+0x86>
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	99 f1       	breq	.+102    	; 0x1fd4 <V2P_RunStateMachine+0xe4>
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <V2P_RunStateMachine+0x84>
    1f72:	49 c0       	rjmp	.+146    	; 0x2006 <V2P_RunStateMachine+0x116>
    1f74:	d3 cf       	rjmp	.-90     	; 0x1f1c <V2P_RunStateMachine+0x2c>
    1f76:	83 30       	cpi	r24, 0x03	; 3
    1f78:	91 05       	cpc	r25, r1
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <V2P_RunStateMachine+0x8e>
    1f7c:	53 c0       	rjmp	.+166    	; 0x2024 <V2P_RunStateMachine+0x134>
    1f7e:	04 97       	sbiw	r24, 0x04	; 4
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <V2P_RunStateMachine+0x94>
    1f82:	5b c0       	rjmp	.+182    	; 0x203a <V2P_RunStateMachine+0x14a>
    1f84:	cb cf       	rjmp	.-106    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    1f86:	88 30       	cpi	r24, 0x08	; 8
    1f88:	91 05       	cpc	r25, r1
    1f8a:	d1 f0       	breq	.+52     	; 0x1fc0 <V2P_RunStateMachine+0xd0>
    1f8c:	89 30       	cpi	r24, 0x09	; 9
    1f8e:	91 05       	cpc	r25, r1
    1f90:	44 f4       	brge	.+16     	; 0x1fa2 <V2P_RunStateMachine+0xb2>
    1f92:	86 30       	cpi	r24, 0x06	; 6
    1f94:	91 05       	cpc	r25, r1
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <V2P_RunStateMachine+0xaa>
    1f98:	6d c0       	rjmp	.+218    	; 0x2074 <V2P_RunStateMachine+0x184>
    1f9a:	07 97       	sbiw	r24, 0x07	; 7
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <V2P_RunStateMachine+0xb0>
    1f9e:	7e c0       	rjmp	.+252    	; 0x209c <V2P_RunStateMachine+0x1ac>
    1fa0:	bd cf       	rjmp	.-134    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    1fa2:	89 30       	cpi	r24, 0x09	; 9
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <V2P_RunStateMachine+0xba>
    1fa8:	ab c0       	rjmp	.+342    	; 0x2100 <V2P_RunStateMachine+0x210>
    1faa:	0a 97       	sbiw	r24, 0x0a	; 10
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <V2P_RunStateMachine+0xc0>
    1fae:	b6 cf       	rjmp	.-148    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    1fb0:	82 e0       	ldi	r24, 0x02	; 2
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	90 93 48 01 	sts	0x0148, r25
    1fb8:	80 93 47 01 	sts	0x0147, r24
    1fbc:	80 e8       	ldi	r24, 0x80	; 128
    1fbe:	f6 c0       	rjmp	.+492    	; 0x21ac <V2P_RunStateMachine+0x2bc>
    1fc0:	10 92 3f 01 	sts	0x013F, r1
    1fc4:	0e 94 9f 0b 	call	0x173e <BUFF_InitialiseBuffer>
    1fc8:	10 92 b0 00 	sts	0x00B0, r1
    1fcc:	10 92 70 00 	sts	0x0070, r1
    1fd0:	c0 e0       	ldi	r28, 0x00	; 0
    1fd2:	a4 cf       	rjmp	.-184    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    1fd4:	80 91 b3 02 	lds	r24, 0x02B3
    1fd8:	81 11       	cpse	r24, r1
    1fda:	c1 e0       	ldi	r28, 0x01	; 1
    1fdc:	f2 9b       	sbis	0x1e, 2	; 30
    1fde:	9e cf       	rjmp	.-196    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    1fe0:	80 91 46 01 	lds	r24, 0x0146
    1fe4:	88 23       	and	r24, r24
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <V2P_RunStateMachine+0xfa>
    1fe8:	99 cf       	rjmp	.-206    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    1fea:	80 e8       	ldi	r24, 0x80	; 128
    1fec:	80 93 61 00 	sts	0x0061, r24
    1ff0:	83 e0       	ldi	r24, 0x03	; 3
    1ff2:	80 93 61 00 	sts	0x0061, r24
    1ff6:	80 91 c1 00 	lds	r24, 0x00C1
    1ffa:	80 78       	andi	r24, 0x80	; 128
    1ffc:	80 93 c1 00 	sts	0x00C1, r24
    2000:	0e 94 e9 0b 	call	0x17d2 <TOUT_SetupSleepTimer>
    2004:	d9 c0       	rjmp	.+434    	; 0x21b8 <V2P_RunStateMachine+0x2c8>
    2006:	0e 94 22 09 	call	0x1244 <USART_Rx>
    200a:	8b 31       	cpi	r24, 0x1B	; 27
    200c:	89 f5       	brne	.+98     	; 0x2070 <V2P_RunStateMachine+0x180>
    200e:	c2 e0       	ldi	r28, 0x02	; 2
    2010:	85 cf       	rjmp	.-246    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    2012:	0e 94 22 09 	call	0x1244 <USART_Rx>
    2016:	99 27       	eor	r25, r25
    2018:	90 93 4a 01 	sts	0x014A, r25
    201c:	80 93 49 01 	sts	0x0149, r24
    2020:	c3 e0       	ldi	r28, 0x03	; 3
    2022:	7c cf       	rjmp	.-264    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    2024:	0e 94 22 09 	call	0x1244 <USART_Rx>
    2028:	99 27       	eor	r25, r25
    202a:	98 2f       	mov	r25, r24
    202c:	88 27       	eor	r24, r24
    202e:	90 93 48 01 	sts	0x0148, r25
    2032:	80 93 47 01 	sts	0x0147, r24
    2036:	c4 e0       	ldi	r28, 0x04	; 4
    2038:	71 cf       	rjmp	.-286    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    203a:	0e 94 22 09 	call	0x1244 <USART_Rx>
    203e:	28 2f       	mov	r18, r24
    2040:	33 27       	eor	r19, r19
    2042:	80 91 47 01 	lds	r24, 0x0147
    2046:	90 91 48 01 	lds	r25, 0x0148
    204a:	82 2b       	or	r24, r18
    204c:	93 2b       	or	r25, r19
    204e:	90 93 48 01 	sts	0x0148, r25
    2052:	80 93 47 01 	sts	0x0147, r24
    2056:	83 51       	subi	r24, 0x13	; 19
    2058:	91 40       	sbci	r25, 0x01	; 1
    205a:	50 f4       	brcc	.+20     	; 0x2070 <V2P_RunStateMachine+0x180>
    205c:	c5 e0       	ldi	r28, 0x05	; 5
    205e:	ee 24       	eor	r14, r14
    2060:	ff 24       	eor	r15, r15
    2062:	5c cf       	rjmp	.-328    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    2064:	0e 94 22 09 	call	0x1244 <USART_Rx>
    2068:	8e 30       	cpi	r24, 0x0E	; 14
    206a:	11 f4       	brne	.+4      	; 0x2070 <V2P_RunStateMachine+0x180>
    206c:	c6 e0       	ldi	r28, 0x06	; 6
    206e:	56 cf       	rjmp	.-340    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    2070:	c9 e0       	ldi	r28, 0x09	; 9
    2072:	54 cf       	rjmp	.-344    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    2074:	80 91 47 01 	lds	r24, 0x0147
    2078:	90 91 48 01 	lds	r25, 0x0148
    207c:	e8 16       	cp	r14, r24
    207e:	f9 06       	cpc	r15, r25
    2080:	11 f4       	brne	.+4      	; 0x2086 <V2P_RunStateMachine+0x196>
    2082:	c7 e0       	ldi	r28, 0x07	; 7
    2084:	4b cf       	rjmp	.-362    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    2086:	87 01       	movw	r16, r14
    2088:	05 5b       	subi	r16, 0xB5	; 181
    208a:	1e 4f       	sbci	r17, 0xFE	; 254
    208c:	08 94       	sec
    208e:	e1 1c       	adc	r14, r1
    2090:	f1 1c       	adc	r15, r1
    2092:	0e 94 22 09 	call	0x1244 <USART_Rx>
    2096:	f8 01       	movw	r30, r16
    2098:	80 83       	st	Z, r24
    209a:	40 cf       	rjmp	.-384    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    209c:	0e 94 39 0e 	call	0x1c72 <V2P_GetChecksum>
    20a0:	18 2f       	mov	r17, r24
    20a2:	0e 94 22 09 	call	0x1244 <USART_Rx>
    20a6:	18 17       	cp	r17, r24
    20a8:	09 f0       	breq	.+2      	; 0x20ac <V2P_RunStateMachine+0x1bc>
    20aa:	79 c0       	rjmp	.+242    	; 0x219e <V2P_RunStateMachine+0x2ae>
    20ac:	c0 91 3f 01 	lds	r28, 0x013F
    20b0:	cc 23       	and	r28, r28
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <V2P_RunStateMachine+0x1c6>
    20b4:	74 c0       	rjmp	.+232    	; 0x219e <V2P_RunStateMachine+0x2ae>
    20b6:	80 91 4b 01 	lds	r24, 0x014B
    20ba:	99 27       	eor	r25, r25
    20bc:	84 30       	cpi	r24, 0x04	; 4
    20be:	91 05       	cpc	r25, r1
    20c0:	3c f4       	brge	.+14     	; 0x20d0 <V2P_RunStateMachine+0x1e0>
    20c2:	82 30       	cpi	r24, 0x02	; 2
    20c4:	91 05       	cpc	r25, r1
    20c6:	0c f0       	brlt	.+2      	; 0x20ca <V2P_RunStateMachine+0x1da>
    20c8:	61 c0       	rjmp	.+194    	; 0x218c <V2P_RunStateMachine+0x29c>
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	39 f0       	breq	.+14     	; 0x20dc <V2P_RunStateMachine+0x1ec>
    20ce:	61 c0       	rjmp	.+194    	; 0x2192 <V2P_RunStateMachine+0x2a2>
    20d0:	86 30       	cpi	r24, 0x06	; 6
    20d2:	91 05       	cpc	r25, r1
    20d4:	e9 f0       	breq	.+58     	; 0x2110 <V2P_RunStateMachine+0x220>
    20d6:	07 97       	sbiw	r24, 0x07	; 7
    20d8:	99 f0       	breq	.+38     	; 0x2100 <V2P_RunStateMachine+0x210>
    20da:	5b c0       	rjmp	.+182    	; 0x2192 <V2P_RunStateMachine+0x2a2>
    20dc:	8b e0       	ldi	r24, 0x0B	; 11
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	90 93 48 01 	sts	0x0148, r25
    20e4:	80 93 47 01 	sts	0x0147, r24
    20e8:	ab e4       	ldi	r26, 0x4B	; 75
    20ea:	b1 e0       	ldi	r27, 0x01	; 1
    20ec:	e2 ee       	ldi	r30, 0xE2	; 226
    20ee:	f3 e0       	ldi	r31, 0x03	; 3
    20f0:	9a e0       	ldi	r25, 0x0A	; 10
    20f2:	84 91       	lpm	r24, Z
    20f4:	8d 93       	st	X+, r24
    20f6:	91 50       	subi	r25, 0x01	; 1
    20f8:	31 96       	adiw	r30, 0x01	; 1
    20fa:	97 ff       	sbrs	r25, 7
    20fc:	fa cf       	rjmp	.-12     	; 0x20f2 <V2P_RunStateMachine+0x202>
    20fe:	58 c0       	rjmp	.+176    	; 0x21b0 <V2P_RunStateMachine+0x2c0>
    2100:	82 e0       	ldi	r24, 0x02	; 2
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	90 93 48 01 	sts	0x0148, r25
    2108:	80 93 47 01 	sts	0x0147, r24
    210c:	80 ec       	ldi	r24, 0xC0	; 192
    210e:	4e c0       	rjmp	.+156    	; 0x21ac <V2P_RunStateMachine+0x2bc>
    2110:	82 e0       	ldi	r24, 0x02	; 2
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	90 93 48 01 	sts	0x0148, r25
    2118:	80 93 47 01 	sts	0x0147, r24
    211c:	0e 94 4f 0f 	call	0x1e9e <V2P_CheckForExtendedAddress>
    2120:	80 91 4c 01 	lds	r24, 0x014C
    2124:	99 27       	eor	r25, r25
    2126:	aa 27       	eor	r26, r26
    2128:	bb 27       	eor	r27, r27
    212a:	b8 2f       	mov	r27, r24
    212c:	aa 27       	eor	r26, r26
    212e:	99 27       	eor	r25, r25
    2130:	88 27       	eor	r24, r24
    2132:	20 91 4d 01 	lds	r18, 0x014D
    2136:	33 27       	eor	r19, r19
    2138:	44 27       	eor	r20, r20
    213a:	55 27       	eor	r21, r21
    213c:	a9 01       	movw	r20, r18
    213e:	33 27       	eor	r19, r19
    2140:	22 27       	eor	r18, r18
    2142:	82 2b       	or	r24, r18
    2144:	93 2b       	or	r25, r19
    2146:	a4 2b       	or	r26, r20
    2148:	b5 2b       	or	r27, r21
    214a:	20 91 4e 01 	lds	r18, 0x014E
    214e:	33 27       	eor	r19, r19
    2150:	44 27       	eor	r20, r20
    2152:	55 27       	eor	r21, r21
    2154:	54 2f       	mov	r21, r20
    2156:	43 2f       	mov	r20, r19
    2158:	32 2f       	mov	r19, r18
    215a:	22 27       	eor	r18, r18
    215c:	82 2b       	or	r24, r18
    215e:	93 2b       	or	r25, r19
    2160:	a4 2b       	or	r26, r20
    2162:	b5 2b       	or	r27, r21
    2164:	20 91 4f 01 	lds	r18, 0x014F
    2168:	33 27       	eor	r19, r19
    216a:	44 27       	eor	r20, r20
    216c:	55 27       	eor	r21, r21
    216e:	82 2b       	or	r24, r18
    2170:	93 2b       	or	r25, r19
    2172:	a4 2b       	or	r26, r20
    2174:	b5 2b       	or	r27, r21
    2176:	80 93 42 01 	sts	0x0142, r24
    217a:	90 93 43 01 	sts	0x0143, r25
    217e:	a0 93 44 01 	sts	0x0144, r26
    2182:	b0 93 45 01 	sts	0x0145, r27
    2186:	c0 93 4c 01 	sts	0x014C, r28
    218a:	12 c0       	rjmp	.+36     	; 0x21b0 <V2P_RunStateMachine+0x2c0>
    218c:	0e 94 9a 0e 	call	0x1d34 <V2P_GetSetParamater>
    2190:	11 c0       	rjmp	.+34     	; 0x21b4 <V2P_RunStateMachine+0x2c4>
    2192:	e0 91 02 01 	lds	r30, 0x0102
    2196:	f0 91 03 01 	lds	r31, 0x0103
    219a:	09 95       	icall
    219c:	0b c0       	rjmp	.+22     	; 0x21b4 <V2P_RunStateMachine+0x2c4>
    219e:	82 e0       	ldi	r24, 0x02	; 2
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	90 93 48 01 	sts	0x0148, r25
    21a6:	80 93 47 01 	sts	0x0147, r24
    21aa:	81 ec       	ldi	r24, 0xC1	; 193
    21ac:	80 93 4c 01 	sts	0x014C, r24
    21b0:	0e 94 5a 0e 	call	0x1cb4 <V2P_SendPacket>
    21b4:	c8 e0       	ldi	r28, 0x08	; 8
    21b6:	b2 ce       	rjmp	.-668    	; 0x1f1c <V2P_RunStateMachine+0x2c>
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	08 95       	ret

000021c4 <ISPCC_EnterChipProgrammingMode>:

// ======================================================================================

void ISPCC_EnterChipProgrammingMode(void)
{
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	cf 93       	push	r28
	uint8_t ByteDelay = PacketBytes[5];
    21ca:	10 91 50 01 	lds	r17, 0x0150
	uint8_t Attempts  = PacketBytes[4];
    21ce:	c0 91 4f 01 	lds	r28, 0x014F
	uint8_t Response;

	MAIN_Delay1MS(PacketBytes[2]);         // Wait before continuing, amount specified in the packet
    21d2:	80 91 4d 01 	lds	r24, 0x014D
    21d6:	0e 94 08 03 	call	0x610 <MAIN_Delay1MS>

	if ((!(Attempts)) || (Attempts > 100)) // if no attempts or too high a value is specified, a fixed number is chosen
    21da:	8c 2f       	mov	r24, r28
    21dc:	81 50       	subi	r24, 0x01	; 1
    21de:	84 36       	cpi	r24, 0x64	; 100
    21e0:	08 f0       	brcs	.+2      	; 0x21e4 <ISPCC_EnterChipProgrammingMode+0x20>
	   Attempts = 24;
    21e2:	c8 e1       	ldi	r28, 0x18	; 24
		
	while (Attempts--)
	{
		USI_SPITransmit(PacketBytes[8]);
		MAIN_Delay1MS(ByteDelay);
		USI_SPITransmit(PacketBytes[9]);
		MAIN_Delay1MS(ByteDelay);
			
		Response = USI_SPITransmit(PacketBytes[10]);
		MAIN_Delay1MS(ByteDelay);

		if (PacketBytes[7] == ISPCC_POLL_MODE_AVR)
		  USI_SPITransmit(PacketBytes[11]);
		else
		  Response = USI_SPITransmit(PacketBytes[11]);
				
		if (!(PacketBytes[7]) || (Response == PacketBytes[6])) // Polling disabled, or returned value matches expected poll value
		{
			MAIN_Delay1MS(ByteDelay);

			InProgrammingMode = TRUE;
			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = AICB_STATUS_CMD_OK;
			return;
		}
		
		MAIN_Delay1MS(ByteDelay);
		USI_SPIToggleClock();            // Out of sync, shift in one bit and try again
    21e4:	c1 50       	subi	r28, 0x01	; 1
    21e6:	cf 3f       	cpi	r28, 0xFF	; 255
    21e8:	09 f4       	brne	.+2      	; 0x21ec <ISPCC_EnterChipProgrammingMode+0x28>
    21ea:	3f c0       	rjmp	.+126    	; 0x226a <ISPCC_EnterChipProgrammingMode+0xa6>
    21ec:	80 91 53 01 	lds	r24, 0x0153
    21f0:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    21f4:	81 2f       	mov	r24, r17
    21f6:	0e 94 08 03 	call	0x610 <MAIN_Delay1MS>
    21fa:	80 91 54 01 	lds	r24, 0x0154
    21fe:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2202:	81 2f       	mov	r24, r17
    2204:	0e 94 08 03 	call	0x610 <MAIN_Delay1MS>
    2208:	80 91 55 01 	lds	r24, 0x0155
    220c:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2210:	08 2f       	mov	r16, r24
    2212:	81 2f       	mov	r24, r17
    2214:	0e 94 08 03 	call	0x610 <MAIN_Delay1MS>
    2218:	80 91 52 01 	lds	r24, 0x0152
    221c:	83 30       	cpi	r24, 0x03	; 3
    221e:	29 f4       	brne	.+10     	; 0x222a <ISPCC_EnterChipProgrammingMode+0x66>
    2220:	80 91 56 01 	lds	r24, 0x0156
    2224:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2228:	05 c0       	rjmp	.+10     	; 0x2234 <ISPCC_EnterChipProgrammingMode+0x70>
    222a:	80 91 56 01 	lds	r24, 0x0156
    222e:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2232:	08 2f       	mov	r16, r24
    2234:	80 91 52 01 	lds	r24, 0x0152
    2238:	88 23       	and	r24, r24
    223a:	21 f0       	breq	.+8      	; 0x2244 <ISPCC_EnterChipProgrammingMode+0x80>
    223c:	80 91 51 01 	lds	r24, 0x0151
    2240:	08 17       	cp	r16, r24
    2242:	69 f4       	brne	.+26     	; 0x225e <ISPCC_EnterChipProgrammingMode+0x9a>
    2244:	81 2f       	mov	r24, r17
    2246:	0e 94 08 03 	call	0x610 <MAIN_Delay1MS>
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	80 93 46 01 	sts	0x0146, r24
    2250:	81 b3       	in	r24, 0x11	; 17
    2252:	8f 7c       	andi	r24, 0xCF	; 207
    2254:	80 62       	ori	r24, 0x20	; 32
    2256:	81 bb       	out	0x11, r24	; 17
    2258:	10 92 4c 01 	sts	0x014C, r1
    225c:	0d c0       	rjmp	.+26     	; 0x2278 <ISPCC_EnterChipProgrammingMode+0xb4>
    225e:	81 2f       	mov	r24, r17
    2260:	0e 94 08 03 	call	0x610 <MAIN_Delay1MS>
    2264:	0e 94 be 09 	call	0x137c <USI_SPIToggleClock>
    2268:	bd cf       	rjmp	.-134    	; 0x21e4 <ISPCC_EnterChipProgrammingMode+0x20>
	}

	// If function hasn't returned by now, all the attempts have failed. Show this by
	// resetting the status leds to green (ready) and send a fail message.

	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
    226a:	81 b3       	in	r24, 0x11	; 17
    226c:	8f 7c       	andi	r24, 0xCF	; 207
    226e:	80 61       	ori	r24, 0x10	; 16
    2270:	81 bb       	out	0x11, r24	; 17
	PacketBytes[1] = AICB_STATUS_CMD_FAILED;
    2272:	80 ec       	ldi	r24, 0xC0	; 192
    2274:	80 93 4c 01 	sts	0x014C, r24
    2278:	cf 91       	pop	r28
    227a:	1f 91       	pop	r17
    227c:	0f 91       	pop	r16
    227e:	08 95       	ret

00002280 <ISPCC_PollForProgComplete>:
}

void ISPCC_ProgramChip(void)
{
	uint16_t PollAddress  = 0;
	uint8_t  ProgMode     = PacketBytes[3];
	uint8_t  WriteCommand = PacketBytes[5];
	uint16_t StartAddress = (uint16_t)CurrAddress;
	uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
	                      | PacketBytes[2];
	uint8_t  PollType;
	uint8_t  ByteToWrite;
			
	if (ProgMode & ISPCC_PROG_MODE_PAGE)                 // Page writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++) // Transmit the page bytes
		{
			ByteToWrite = PacketBytes[10 + WriteByte];
		
			if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP) // Flash write mode - word addresses so MSB/LSB masking 
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else                                         // EEPROM write mode - byte addresses so no masking 
			   USI_SPITransmit(WriteCommand);

			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Only the LSW of the address should be sent
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			if (!(PollAddress))
			{
				if ((PacketBytes[8] != ByteToWrite)       // Can do polling
				   && ((PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == AICB_CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
				{
					PollAddress = (CurrAddress & 0xFFFF); // Save the current address
				
					if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP)
					   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
				}
			}

			// Flash addresses are in words; only increment address on odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == AICB_CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();
		}

		PollType = ProgMode;

		if (ProgMode & ISPCC_PROG_MODE_PAGEDONE)         // If this packet is the end of a page, we need to send the program page command
		{
			USI_SPITransmit(PacketBytes[6]);             // Send the write program memory page command
			USI_SPITransmitWord(StartAddress);           // Send the page address word
			USI_SPITransmit(0x00);

			if (!(PollAddress))                          // No polling address
			   PollType = ((ProgMode & ~ISPCC_PAGE_POLLTYPE_MASK) | ISPCC_PAGE_POLLTYPE_WAIT);

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
	else                                                 // Flash Word writing mode or EEPROM byte writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++)
		{
			ByteToWrite = PacketBytes[10 + WriteByte];

			if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP)
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else
			   USI_SPITransmit(WriteCommand);					
					
			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Transmit the current address to the slave AVR
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			PollType = ProgMode;

			if ((PacketBytes[8] != ByteToWrite)           // Can do polling
			   && ((PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == AICB_CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
			{
				PollAddress = (CurrAddress & 0xFFFF);     // Save the current address;

				if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP)
				   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
			}
			else
			{
				PollType = ((ProgMode & ~ISPCC_WORD_POLLTYPE_MASK) | ISPCC_WORD_POLLTYPE_WAIT);
			}					

			// Flash addresses are in words; only increment address on the odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == AICB_CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
}

void ISPCC_PollForProgComplete(const uint8_t PollData, uint16_t PollAddr)
{
    2280:	1f 93       	push	r17
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	eb 01       	movw	r28, r22
	uint8_t PollType;
	uint8_t ProgCommand;

	if (PollData & ISPCC_PROG_MODE_PAGE)
    2288:	99 27       	eor	r25, r25
    228a:	80 ff       	sbrs	r24, 0
    228c:	08 c0       	rjmp	.+16     	; 0x229e <ISPCC_PollForProgComplete+0x1e>
	   PollType = ((PollData & ISPCC_PAGE_POLLTYPE_MASK) >> ISPCC_PAGE_POLLTYPE_MASKSHIFT);
    228e:	80 77       	andi	r24, 0x70	; 112
    2290:	90 70       	andi	r25, 0x00	; 0
    2292:	34 e0       	ldi	r19, 0x04	; 4
    2294:	95 95       	asr	r25
    2296:	87 95       	ror	r24
    2298:	3a 95       	dec	r19
    229a:	e1 f7       	brne	.-8      	; 0x2294 <ISPCC_PollForProgComplete+0x14>
    229c:	04 c0       	rjmp	.+8      	; 0x22a6 <ISPCC_PollForProgComplete+0x26>
	else
	   PollType = ((PollData & ISPCC_WORD_POLLTYPE_MASK) >> ISPCC_WORD_POLLTYPE_MASKSHIFT);	
    229e:	8e 70       	andi	r24, 0x0E	; 14
    22a0:	90 70       	andi	r25, 0x00	; 0
    22a2:	95 95       	asr	r25
    22a4:	87 95       	ror	r24

	switch (PollType & ISPCC_POLLTYPE_MASK)
    22a6:	99 27       	eor	r25, r25
    22a8:	87 70       	andi	r24, 0x07	; 7
    22aa:	90 70       	andi	r25, 0x00	; 0
    22ac:	82 30       	cpi	r24, 0x02	; 2
    22ae:	91 05       	cpc	r25, r1
    22b0:	19 f0       	breq	.+6      	; 0x22b8 <ISPCC_PollForProgComplete+0x38>
    22b2:	04 97       	sbiw	r24, 0x04	; 4
    22b4:	e1 f0       	breq	.+56     	; 0x22ee <ISPCC_PollForProgComplete+0x6e>
    22b6:	26 c0       	rjmp	.+76     	; 0x2304 <ISPCC_PollForProgComplete+0x84>
	{
		case ISPCC_POLLTYPE_DATA:
			ProgCommand = PacketBytes[7];
    22b8:	10 91 52 01 	lds	r17, 0x0152
			
			if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP) // Flash uses word addresses
    22bc:	80 91 4b 01 	lds	r24, 0x014B
    22c0:	83 31       	cpi	r24, 0x13	; 19
    22c2:	39 f4       	brne	.+14     	; 0x22d2 <ISPCC_PollForProgComplete+0x52>
			{
				ProgCommand  |= ((PollAddr & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ);
    22c4:	81 2f       	mov	r24, r17
    22c6:	99 27       	eor	r25, r25
    22c8:	c0 fd       	sbrc	r28, 0
    22ca:	88 60       	ori	r24, 0x08	; 8
    22cc:	18 2f       	mov	r17, r24
				PollAddr    >>= 1;
    22ce:	d6 95       	lsr	r29
    22d0:	c7 95       	ror	r28
			}

			do
			{
				USI_SPITransmit(ProgCommand);
    22d2:	81 2f       	mov	r24, r17
    22d4:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
				USI_SPITransmitWord(PollAddr);
    22d8:	ce 01       	movw	r24, r28
    22da:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
			}
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    22e4:	90 91 53 01 	lds	r25, 0x0153
    22e8:	89 17       	cp	r24, r25
    22ea:	99 f3       	breq	.-26     	; 0x22d2 <ISPCC_PollForProgComplete+0x52>
			while (USI_SPITransmit(0x00) == PacketBytes[8]);
						
			break;
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <ISPCC_PollForProgComplete+0x8c>
		case ISPCC_POLLTYPE_READY:
			do
			   USI_SPITransmitWord(0xF000);
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 ef       	ldi	r25, 0xF0	; 240
    22f2:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    22fe:	80 fd       	sbrc	r24, 0
    2300:	f6 cf       	rjmp	.-20     	; 0x22ee <ISPCC_PollForProgComplete+0x6e>
			while (USI_SPITransmitWord(0x0000) & ISPCC_POLL_BUSYFLAG);

			break;
    2302:	04 c0       	rjmp	.+8      	; 0x230c <ISPCC_PollForProgComplete+0x8c>
		default:                                      // Default is Wait polling
			MAIN_Delay1MS(PacketBytes[4]);	
    2304:	80 91 4f 01 	lds	r24, 0x014F
    2308:	0e 94 08 03 	call	0x610 <MAIN_Delay1MS>
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	1f 91       	pop	r17
    2312:	08 95       	ret

00002314 <ISPCC_ProgramChip>:
    2314:	6f 92       	push	r6
    2316:	7f 92       	push	r7
    2318:	9f 92       	push	r9
    231a:	af 92       	push	r10
    231c:	bf 92       	push	r11
    231e:	cf 92       	push	r12
    2320:	df 92       	push	r13
    2322:	ef 92       	push	r14
    2324:	ff 92       	push	r15
    2326:	0f 93       	push	r16
    2328:	1f 93       	push	r17
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	00 e0       	ldi	r16, 0x00	; 0
    2330:	10 e0       	ldi	r17, 0x00	; 0
    2332:	90 90 4e 01 	lds	r9, 0x014E
    2336:	c0 90 50 01 	lds	r12, 0x0150
    233a:	60 90 42 01 	lds	r6, 0x0142
    233e:	70 90 43 01 	lds	r7, 0x0143
    2342:	80 91 4c 01 	lds	r24, 0x014C
    2346:	99 27       	eor	r25, r25
    2348:	b8 2e       	mov	r11, r24
    234a:	aa 24       	eor	r10, r10
    234c:	80 91 4d 01 	lds	r24, 0x014D
    2350:	99 27       	eor	r25, r25
    2352:	a8 2a       	or	r10, r24
    2354:	b9 2a       	or	r11, r25
    2356:	90 fe       	sbrs	r9, 0
    2358:	62 c0       	rjmp	.+196    	; 0x241e <ISPCC_ProgramChip+0x10a>
    235a:	78 01       	movw	r14, r16
    235c:	0a 15       	cp	r16, r10
    235e:	1b 05       	cpc	r17, r11
    2360:	08 f0       	brcs	.+2      	; 0x2364 <ISPCC_ProgramChip+0x50>
    2362:	46 c0       	rjmp	.+140    	; 0x23f0 <ISPCC_ProgramChip+0xdc>
    2364:	c5 e5       	ldi	r28, 0x55	; 85
    2366:	d1 e0       	ldi	r29, 0x01	; 1
    2368:	d9 90       	ld	r13, Y+
    236a:	80 91 4b 01 	lds	r24, 0x014B
    236e:	83 31       	cpi	r24, 0x13	; 19
    2370:	31 f4       	brne	.+12     	; 0x237e <ISPCC_ProgramChip+0x6a>
    2372:	8c 2d       	mov	r24, r12
    2374:	99 27       	eor	r25, r25
    2376:	e0 fe       	sbrs	r14, 0
    2378:	03 c0       	rjmp	.+6      	; 0x2380 <ISPCC_ProgramChip+0x6c>
    237a:	88 60       	ori	r24, 0x08	; 8
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <ISPCC_ProgramChip+0x6c>
    237e:	8c 2d       	mov	r24, r12
    2380:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2384:	80 91 42 01 	lds	r24, 0x0142
    2388:	90 91 43 01 	lds	r25, 0x0143
    238c:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2390:	8d 2d       	mov	r24, r13
    2392:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2396:	01 15       	cp	r16, r1
    2398:	11 05       	cpc	r17, r1
    239a:	d9 f4       	brne	.+54     	; 0x23d2 <ISPCC_ProgramChip+0xbe>
    239c:	80 91 53 01 	lds	r24, 0x0153
    23a0:	8d 15       	cp	r24, r13
    23a2:	b9 f0       	breq	.+46     	; 0x23d2 <ISPCC_ProgramChip+0xbe>
    23a4:	90 91 4b 01 	lds	r25, 0x014B
    23a8:	93 31       	cpi	r25, 0x13	; 19
    23aa:	31 f0       	breq	.+12     	; 0x23b8 <ISPCC_ProgramChip+0xa4>
    23ac:	95 31       	cpi	r25, 0x15	; 21
    23ae:	89 f4       	brne	.+34     	; 0x23d2 <ISPCC_ProgramChip+0xbe>
    23b0:	80 91 54 01 	lds	r24, 0x0154
    23b4:	8d 15       	cp	r24, r13
    23b6:	69 f0       	breq	.+26     	; 0x23d2 <ISPCC_ProgramChip+0xbe>
    23b8:	00 91 42 01 	lds	r16, 0x0142
    23bc:	10 91 43 01 	lds	r17, 0x0143
    23c0:	93 31       	cpi	r25, 0x13	; 19
    23c2:	39 f4       	brne	.+14     	; 0x23d2 <ISPCC_ProgramChip+0xbe>
    23c4:	00 0f       	add	r16, r16
    23c6:	11 1f       	adc	r17, r17
    23c8:	c7 01       	movw	r24, r14
    23ca:	81 70       	andi	r24, 0x01	; 1
    23cc:	90 70       	andi	r25, 0x00	; 0
    23ce:	08 0f       	add	r16, r24
    23d0:	19 1f       	adc	r17, r25
    23d2:	e0 fc       	sbrc	r14, 0
    23d4:	04 c0       	rjmp	.+8      	; 0x23de <ISPCC_ProgramChip+0xca>
    23d6:	80 91 4b 01 	lds	r24, 0x014B
    23da:	85 31       	cpi	r24, 0x15	; 21
    23dc:	11 f4       	brne	.+4      	; 0x23e2 <ISPCC_ProgramChip+0xce>
    23de:	0e 94 3b 0f 	call	0x1e76 <V2P_IncrementCurrAddress>
    23e2:	08 94       	sec
    23e4:	e1 1c       	adc	r14, r1
    23e6:	f1 1c       	adc	r15, r1
    23e8:	ea 14       	cp	r14, r10
    23ea:	fb 04       	cpc	r15, r11
    23ec:	08 f4       	brcc	.+2      	; 0x23f0 <ISPCC_ProgramChip+0xdc>
    23ee:	bc cf       	rjmp	.-136    	; 0x2368 <ISPCC_ProgramChip+0x54>
    23f0:	c9 2d       	mov	r28, r9
    23f2:	97 fe       	sbrs	r9, 7
    23f4:	69 c0       	rjmp	.+210    	; 0x24c8 <ISPCC_ProgramChip+0x1b4>
    23f6:	80 91 51 01 	lds	r24, 0x0151
    23fa:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    23fe:	c3 01       	movw	r24, r6
    2400:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    240a:	01 15       	cp	r16, r1
    240c:	11 05       	cpc	r17, r1
    240e:	11 f4       	brne	.+4      	; 0x2414 <ISPCC_ProgramChip+0x100>
    2410:	cf 78       	andi	r28, 0x8F	; 143
    2412:	c0 61       	ori	r28, 0x10	; 16
    2414:	b8 01       	movw	r22, r16
    2416:	8c 2f       	mov	r24, r28
    2418:	0e 94 40 11 	call	0x2280 <ISPCC_PollForProgComplete>
    241c:	55 c0       	rjmp	.+170    	; 0x24c8 <ISPCC_ProgramChip+0x1b4>
    241e:	78 01       	movw	r14, r16
    2420:	0a 15       	cp	r16, r10
    2422:	1b 05       	cpc	r17, r11
    2424:	08 f0       	brcs	.+2      	; 0x2428 <ISPCC_ProgramChip+0x114>
    2426:	50 c0       	rjmp	.+160    	; 0x24c8 <ISPCC_ProgramChip+0x1b4>
    2428:	55 e5       	ldi	r21, 0x55	; 85
    242a:	65 2e       	mov	r6, r21
    242c:	51 e0       	ldi	r21, 0x01	; 1
    242e:	75 2e       	mov	r7, r21
    2430:	f3 01       	movw	r30, r6
    2432:	d1 90       	ld	r13, Z+
    2434:	3f 01       	movw	r6, r30
    2436:	80 91 4b 01 	lds	r24, 0x014B
    243a:	83 31       	cpi	r24, 0x13	; 19
    243c:	31 f4       	brne	.+12     	; 0x244a <ISPCC_ProgramChip+0x136>
    243e:	8c 2d       	mov	r24, r12
    2440:	99 27       	eor	r25, r25
    2442:	e0 fe       	sbrs	r14, 0
    2444:	03 c0       	rjmp	.+6      	; 0x244c <ISPCC_ProgramChip+0x138>
    2446:	88 60       	ori	r24, 0x08	; 8
    2448:	01 c0       	rjmp	.+2      	; 0x244c <ISPCC_ProgramChip+0x138>
    244a:	8c 2d       	mov	r24, r12
    244c:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2450:	80 91 42 01 	lds	r24, 0x0142
    2454:	90 91 43 01 	lds	r25, 0x0143
    2458:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    245c:	8d 2d       	mov	r24, r13
    245e:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2462:	c9 2d       	mov	r28, r9
    2464:	80 91 53 01 	lds	r24, 0x0153
    2468:	8d 15       	cp	r24, r13
    246a:	c1 f0       	breq	.+48     	; 0x249c <ISPCC_ProgramChip+0x188>
    246c:	90 91 4b 01 	lds	r25, 0x014B
    2470:	93 31       	cpi	r25, 0x13	; 19
    2472:	31 f0       	breq	.+12     	; 0x2480 <ISPCC_ProgramChip+0x16c>
    2474:	95 31       	cpi	r25, 0x15	; 21
    2476:	91 f4       	brne	.+36     	; 0x249c <ISPCC_ProgramChip+0x188>
    2478:	80 91 54 01 	lds	r24, 0x0154
    247c:	8d 15       	cp	r24, r13
    247e:	71 f0       	breq	.+28     	; 0x249c <ISPCC_ProgramChip+0x188>
    2480:	00 91 42 01 	lds	r16, 0x0142
    2484:	10 91 43 01 	lds	r17, 0x0143
    2488:	93 31       	cpi	r25, 0x13	; 19
    248a:	59 f4       	brne	.+22     	; 0x24a2 <ISPCC_ProgramChip+0x18e>
    248c:	00 0f       	add	r16, r16
    248e:	11 1f       	adc	r17, r17
    2490:	c7 01       	movw	r24, r14
    2492:	81 70       	andi	r24, 0x01	; 1
    2494:	90 70       	andi	r25, 0x00	; 0
    2496:	08 0f       	add	r16, r24
    2498:	19 1f       	adc	r17, r25
    249a:	03 c0       	rjmp	.+6      	; 0x24a2 <ISPCC_ProgramChip+0x18e>
    249c:	c9 2d       	mov	r28, r9
    249e:	c1 7f       	andi	r28, 0xF1	; 241
    24a0:	c2 60       	ori	r28, 0x02	; 2
    24a2:	e0 fc       	sbrc	r14, 0
    24a4:	04 c0       	rjmp	.+8      	; 0x24ae <ISPCC_ProgramChip+0x19a>
    24a6:	80 91 4b 01 	lds	r24, 0x014B
    24aa:	85 31       	cpi	r24, 0x15	; 21
    24ac:	11 f4       	brne	.+4      	; 0x24b2 <ISPCC_ProgramChip+0x19e>
    24ae:	0e 94 3b 0f 	call	0x1e76 <V2P_IncrementCurrAddress>
    24b2:	b8 01       	movw	r22, r16
    24b4:	8c 2f       	mov	r24, r28
    24b6:	0e 94 40 11 	call	0x2280 <ISPCC_PollForProgComplete>
    24ba:	08 94       	sec
    24bc:	e1 1c       	adc	r14, r1
    24be:	f1 1c       	adc	r15, r1
    24c0:	ea 14       	cp	r14, r10
    24c2:	fb 04       	cpc	r15, r11
    24c4:	08 f4       	brcc	.+2      	; 0x24c8 <ISPCC_ProgramChip+0x1b4>
    24c6:	b4 cf       	rjmp	.-152    	; 0x2430 <ISPCC_ProgramChip+0x11c>
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	ff 90       	pop	r15
    24d2:	ef 90       	pop	r14
    24d4:	df 90       	pop	r13
    24d6:	cf 90       	pop	r12
    24d8:	bf 90       	pop	r11
    24da:	af 90       	pop	r10
    24dc:	9f 90       	pop	r9
    24de:	7f 90       	pop	r7
    24e0:	6f 90       	pop	r6
    24e2:	08 95       	ret

000024e4 <AICI_InterpretPacket>:

// ======================================================================================

void AICI_InterpretPacket(void)
{
    24e4:	df 92       	push	r13
    24e6:	ef 92       	push	r14
    24e8:	ff 92       	push	r15
    24ea:	0f 93       	push	r16
    24ec:	1f 93       	push	r17
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
	switch (PacketBytes[0])
    24f2:	80 91 4b 01 	lds	r24, 0x014B
    24f6:	99 27       	eor	r25, r25
    24f8:	86 31       	cpi	r24, 0x16	; 22
    24fa:	91 05       	cpc	r25, r1
    24fc:	09 f4       	brne	.+2      	; 0x2500 <AICI_InterpretPacket+0x1c>
    24fe:	fb c0       	rjmp	.+502    	; 0x26f6 <AICI_InterpretPacket+0x212>
    2500:	87 31       	cpi	r24, 0x17	; 23
    2502:	91 05       	cpc	r25, r1
    2504:	94 f4       	brge	.+36     	; 0x252a <AICI_InterpretPacket+0x46>
    2506:	82 31       	cpi	r24, 0x12	; 18
    2508:	91 05       	cpc	r25, r1
    250a:	09 f4       	brne	.+2      	; 0x250e <AICI_InterpretPacket+0x2a>
    250c:	60 c0       	rjmp	.+192    	; 0x25ce <AICI_InterpretPacket+0xea>
    250e:	83 31       	cpi	r24, 0x13	; 19
    2510:	91 05       	cpc	r25, r1
    2512:	3c f4       	brge	.+14     	; 0x2522 <AICI_InterpretPacket+0x3e>
    2514:	80 31       	cpi	r24, 0x10	; 16
    2516:	91 05       	cpc	r25, r1
    2518:	f9 f0       	breq	.+62     	; 0x2558 <AICI_InterpretPacket+0x74>
    251a:	41 97       	sbiw	r24, 0x11	; 17
    251c:	09 f4       	brne	.+2      	; 0x2520 <AICI_InterpretPacket+0x3c>
    251e:	3d c0       	rjmp	.+122    	; 0x259a <AICI_InterpretPacket+0xb6>
    2520:	3e c1       	rjmp	.+636    	; 0x279e <AICI_InterpretPacket+0x2ba>
    2522:	44 97       	sbiw	r24, 0x14	; 20
    2524:	09 f4       	brne	.+2      	; 0x2528 <AICI_InterpretPacket+0x44>
    2526:	e7 c0       	rjmp	.+462    	; 0x26f6 <AICI_InterpretPacket+0x212>
    2528:	2f c1       	rjmp	.+606    	; 0x2788 <AICI_InterpretPacket+0x2a4>
    252a:	89 31       	cpi	r24, 0x19	; 25
    252c:	91 05       	cpc	r25, r1
    252e:	09 f4       	brne	.+2      	; 0x2532 <AICI_InterpretPacket+0x4e>
    2530:	cc c0       	rjmp	.+408    	; 0x26ca <AICI_InterpretPacket+0x1e6>
    2532:	8a 31       	cpi	r24, 0x1A	; 26
    2534:	91 05       	cpc	r25, r1
    2536:	44 f4       	brge	.+16     	; 0x2548 <AICI_InterpretPacket+0x64>
    2538:	87 31       	cpi	r24, 0x17	; 23
    253a:	91 05       	cpc	r25, r1
    253c:	09 f4       	brne	.+2      	; 0x2540 <AICI_InterpretPacket+0x5c>
    253e:	c5 c0       	rjmp	.+394    	; 0x26ca <AICI_InterpretPacket+0x1e6>
    2540:	48 97       	sbiw	r24, 0x18	; 24
    2542:	09 f4       	brne	.+2      	; 0x2546 <AICI_InterpretPacket+0x62>
    2544:	a5 c0       	rjmp	.+330    	; 0x2690 <AICI_InterpretPacket+0x1ac>
    2546:	2b c1       	rjmp	.+598    	; 0x279e <AICI_InterpretPacket+0x2ba>
    2548:	8d 31       	cpi	r24, 0x1D	; 29
    254a:	91 05       	cpc	r25, r1
    254c:	0c f4       	brge	.+2      	; 0x2550 <AICI_InterpretPacket+0x6c>
    254e:	a0 c0       	rjmp	.+320    	; 0x2690 <AICI_InterpretPacket+0x1ac>
    2550:	4d 97       	sbiw	r24, 0x1d	; 29
    2552:	09 f4       	brne	.+2      	; 0x2556 <AICI_InterpretPacket+0x72>
    2554:	61 c0       	rjmp	.+194    	; 0x2618 <AICI_InterpretPacket+0x134>
    2556:	23 c1       	rjmp	.+582    	; 0x279e <AICI_InterpretPacket+0x2ba>
	{
		case AICB_CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
    2558:	82 e0       	ldi	r24, 0x02	; 2
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	90 93 48 01 	sts	0x0148, r25
    2560:	80 93 47 01 	sts	0x0147, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2564:	a1 e0       	ldi	r26, 0x01	; 1
    2566:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2568:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
    256c:	80 2d       	mov	r24, r0
    256e:	0e 94 83 09 	call	0x1306 <USI_SPIInitMaster>
			
			USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));

			MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);  // Pull the slave AVR's RESET line to active
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	0e 94 1a 03 	call	0x634 <MAIN_ResetCSLine>
			MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE); // Orange = Busy
    2578:	81 b3       	in	r24, 0x11	; 17
    257a:	80 63       	ori	r24, 0x30	; 48
    257c:	81 bb       	out	0x11, r24	; 17
			ISPCC_EnterChipProgrammingMode();       // Run the Enter Programming Mode routine
    257e:	0e 94 e2 10 	call	0x21c4 <ISPCC_EnterChipProgrammingMode>

			if (InProgrammingMode)
    2582:	80 91 46 01 	lds	r24, 0x0146
    2586:	88 23       	and	r24, r24
    2588:	19 f0       	breq	.+6      	; 0x2590 <AICI_InterpretPacket+0xac>
			   LCD_puts_f(AVRISPModeMessage);
    258a:	88 ef       	ldi	r24, 0xF8	; 248
    258c:	93 e0       	ldi	r25, 0x03	; 3
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <AICI_InterpretPacket+0xb0>
			else
			   LCD_puts_f(SyncErrorMessage);
    2590:	8d ee       	ldi	r24, 0xED	; 237
    2592:	93 e0       	ldi	r25, 0x03	; 3
    2594:	0e 94 4f 08 	call	0x109e <LCD_puts_f>
			
			break;
    2598:	0b c1       	rjmp	.+534    	; 0x27b0 <AICI_InterpretPacket+0x2cc>
		case AICB_CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;
    259a:	82 e0       	ldi	r24, 0x02	; 2
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	90 93 48 01 	sts	0x0148, r25
    25a2:	80 93 47 01 	sts	0x0147, r24

			MAIN_Delay1MS(PacketBytes[1]);           // Wait for the "PreDelay" amount specified in the packet
    25a6:	80 91 4c 01 	lds	r24, 0x014C
    25aa:	0e 94 08 03 	call	0x610 <MAIN_Delay1MS>
			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Non programming mode = green status led
    25ae:	81 b3       	in	r24, 0x11	; 17
    25b0:	8f 7c       	andi	r24, 0xCF	; 207
    25b2:	80 61       	ori	r24, 0x10	; 16
    25b4:	81 bb       	out	0x11, r24	; 17
			InProgrammingMode = FALSE;
    25b6:	10 92 46 01 	sts	0x0146, r1
			MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	0e 94 1a 03 	call	0x634 <MAIN_ResetCSLine>
			MAIN_Delay1MS(PacketBytes[2]);           // Wait for the "PostDelay" amount specified in the packet
    25c0:	80 91 4d 01 	lds	r24, 0x014D
    25c4:	0e 94 08 03 	call	0x610 <MAIN_Delay1MS>
			
			USI_SPIOff();
    25c8:	0e 94 93 09 	call	0x1326 <USI_SPIOff>
    25cc:	e5 c0       	rjmp	.+458    	; 0x2798 <AICI_InterpretPacket+0x2b4>

			PacketBytes[1] = AICB_STATUS_CMD_OK;     // Return OK

			break;
		case AICB_CMD_CHIP_ERASE_ISP:
			MessageSize = 2;
    25ce:	82 e0       	ldi	r24, 0x02	; 2
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	90 93 48 01 	sts	0x0148, r25
    25d6:	80 93 47 01 	sts	0x0147, r24
			
			for (uint8_t PacketB = 3; PacketB <= 6; PacketB++) // Send the erase commands to the slave AVR
    25da:	c3 e0       	ldi	r28, 0x03	; 3
    25dc:	0e e4       	ldi	r16, 0x4E	; 78
    25de:	11 e0       	ldi	r17, 0x01	; 1
				USI_SPITransmit(PacketBytes[PacketB]);
    25e0:	f8 01       	movw	r30, r16
    25e2:	81 91       	ld	r24, Z+
    25e4:	8f 01       	movw	r16, r30
    25e6:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    25ea:	c1 50       	subi	r28, 0x01	; 1
    25ec:	c7 ff       	sbrs	r28, 7
    25ee:	f8 cf       	rjmp	.-16     	; 0x25e0 <AICI_InterpretPacket+0xfc>

			if (PacketBytes[2])                       // Poll mode, value of 1 indicates a busy flag wait
    25f0:	80 91 4d 01 	lds	r24, 0x014D
    25f4:	88 23       	and	r24, r24
    25f6:	59 f0       	breq	.+22     	; 0x260e <AICI_InterpretPacket+0x12a>
			{
				do
					USI_SPITransmitWord(0xF000);
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 ef       	ldi	r25, 0xF0	; 240
    25fc:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2608:	80 fd       	sbrc	r24, 0
    260a:	f6 cf       	rjmp	.-20     	; 0x25f8 <AICI_InterpretPacket+0x114>
    260c:	c5 c0       	rjmp	.+394    	; 0x2798 <AICI_InterpretPacket+0x2b4>
				while (USI_SPITransmitWord(0x0000) & 0x01);
			}
			else                                      // Poll mode flag of 0 indicates a predefined delay
			{
				MAIN_Delay1MS(PacketBytes[1]);         // Wait the specified interval to ensure erase complete
    260e:	80 91 4c 01 	lds	r24, 0x014C
    2612:	0e 94 08 03 	call	0x610 <MAIN_Delay1MS>
    2616:	c0 c0       	rjmp	.+384    	; 0x2798 <AICI_InterpretPacket+0x2b4>
			}
			
			PacketBytes[1] = AICB_STATUS_CMD_OK;       // Always return OK
			
			break;
		case AICB_CMD_SPI_MULTI:
				MessageSize = (3 + PacketBytes[2]);    // Number of recieved bytes, plus two OKs and the command byte
    2618:	e0 90 4d 01 	lds	r14, 0x014D
    261c:	8e 2d       	mov	r24, r14
    261e:	99 27       	eor	r25, r25
    2620:	03 96       	adiw	r24, 0x03	; 3
    2622:	90 93 48 01 	sts	0x0148, r25
    2626:	80 93 47 01 	sts	0x0147, r24
		
				uint8_t TxBytes      = PacketBytes[1]; // \. The packet data is overwritten during the transfer. Because
    262a:	00 91 4c 01 	lds	r16, 0x014C
				uint8_t RxStartByte  = PacketBytes[2]; // |  of this each data byte must be stored into temp variables
				uint8_t RxBytes      = PacketBytes[3]; // /  so that their contents are not lost.
    262e:	f0 90 4e 01 	lds	r15, 0x014E
				uint8_t RxByteNum    = 1;
    2632:	c1 e0       	ldi	r28, 0x01	; 1
				uint8_t TxByteNum    = 1;
				uint8_t RecievedByte = 0;

				while (TxByteNum++ < TxBytes)          // Still bytes to transfer
				{
					RecievedByte = USI_SPITransmit(PacketBytes[3 + TxByteNum]); // Transmit the byte, store the answer

					if ((TxByteNum >= RxStartByte) && (RxByteNum < RxBytes))
					   PacketBytes[2 + RxByteNum++] = RecievedByte;
    2634:	12 e0       	ldi	r17, 0x02	; 2
    2636:	c0 17       	cp	r28, r16
    2638:	a8 f4       	brcc	.+42     	; 0x2664 <AICI_InterpretPacket+0x180>
    263a:	e1 2f       	mov	r30, r17
    263c:	ff 27       	eor	r31, r31
    263e:	e5 5b       	subi	r30, 0xB5	; 181
    2640:	fe 4f       	sbci	r31, 0xFE	; 254
    2642:	83 81       	ldd	r24, Z+3	; 0x03
    2644:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2648:	1e 15       	cp	r17, r14
    264a:	40 f0       	brcs	.+16     	; 0x265c <AICI_InterpretPacket+0x178>
    264c:	cf 15       	cp	r28, r15
    264e:	30 f4       	brcc	.+12     	; 0x265c <AICI_InterpretPacket+0x178>
    2650:	ec 2f       	mov	r30, r28
    2652:	ff 27       	eor	r31, r31
    2654:	e5 5b       	subi	r30, 0xB5	; 181
    2656:	fe 4f       	sbci	r31, 0xFE	; 254
    2658:	82 83       	std	Z+2, r24	; 0x02
    265a:	cf 5f       	subi	r28, 0xFF	; 255
    265c:	81 2f       	mov	r24, r17
    265e:	1f 5f       	subi	r17, 0xFF	; 255
    2660:	80 17       	cp	r24, r16
    2662:	58 f3       	brcs	.-42     	; 0x263a <AICI_InterpretPacket+0x156>
				}

				while (RxByteNum++ < RxBytes)                         // Still more bytes to recieve
				   PacketBytes[2 + RxByteNum] = USI_SPITransmit(0x00); // its answer to be recorded (or more bytes than sent need responses), send dummy bytes to fetch the response(s)
    2664:	8c 2f       	mov	r24, r28
    2666:	cf 5f       	subi	r28, 0xFF	; 255
    2668:	8f 15       	cp	r24, r15
    266a:	50 f4       	brcc	.+20     	; 0x2680 <AICI_InterpretPacket+0x19c>
    266c:	0c 2f       	mov	r16, r28
    266e:	11 27       	eor	r17, r17
    2670:	05 5b       	subi	r16, 0xB5	; 181
    2672:	1e 4f       	sbci	r17, 0xFE	; 254
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    267a:	f8 01       	movw	r30, r16
    267c:	82 83       	std	Z+2, r24	; 0x02
    267e:	f2 cf       	rjmp	.-28     	; 0x2664 <AICI_InterpretPacket+0x180>

				PacketBytes[1]             = AICB_STATUS_CMD_OK; // Data should be encompassed
    2680:	10 92 4c 01 	sts	0x014C, r1
				PacketBytes[3 + RxByteNum] = AICB_STATUS_CMD_OK; //  by STATS_CMD_OKs
    2684:	ec 2f       	mov	r30, r28
    2686:	ff 27       	eor	r31, r31
    2688:	e5 5b       	subi	r30, 0xB5	; 181
    268a:	fe 4f       	sbci	r31, 0xFE	; 254
    268c:	13 82       	std	Z+3, r1	; 0x03

				break;
    268e:	90 c0       	rjmp	.+288    	; 0x27b0 <AICI_InterpretPacket+0x2cc>
		case AICB_CMD_READ_SIGNATURE_ISP:
		case AICB_CMD_READ_FUSE_ISP:
		case AICB_CMD_READ_LOCK_ISP:
		case AICB_CMD_READ_OSCCAL_ISP:
			MessageSize = 4;
    2690:	84 e0       	ldi	r24, 0x04	; 4
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	90 93 48 01 	sts	0x0148, r25
    2698:	80 93 47 01 	sts	0x0147, r24
	
			for (uint8_t ByteNum = 1; ByteNum <= 4; ByteNum++)
    269c:	c1 e0       	ldi	r28, 0x01	; 1
    269e:	0d e4       	ldi	r16, 0x4D	; 77
    26a0:	11 e0       	ldi	r17, 0x01	; 1
			{
				uint8_t Response = USI_SPITransmit(PacketBytes[1 + ByteNum]); // Transmit the four signature request bytes
    26a2:	f8 01       	movw	r30, r16
    26a4:	81 91       	ld	r24, Z+
    26a6:	8f 01       	movw	r16, r30
    26a8:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    26ac:	98 2f       	mov	r25, r24

				if (ByteNum == PacketBytes[1])         // If the current byte is the requested signature byte, save the reponse in the packet
    26ae:	80 91 4c 01 	lds	r24, 0x014C
    26b2:	c8 17       	cp	r28, r24
    26b4:	11 f4       	brne	.+4      	; 0x26ba <AICI_InterpretPacket+0x1d6>
					PacketBytes[2] = Response;
    26b6:	90 93 4d 01 	sts	0x014D, r25
    26ba:	cf 5f       	subi	r28, 0xFF	; 255
    26bc:	c5 30       	cpi	r28, 0x05	; 5
    26be:	88 f3       	brcs	.-30     	; 0x26a2 <AICI_InterpretPacket+0x1be>
			}

			PacketBytes[1] = AICB_STATUS_CMD_OK;       // Data byte is encased in CMD_OKs
    26c0:	10 92 4c 01 	sts	0x014C, r1
			PacketBytes[3] = AICB_STATUS_CMD_OK;       // Data byte is encased in CMD_OKs
    26c4:	10 92 4e 01 	sts	0x014E, r1

			break;
    26c8:	73 c0       	rjmp	.+230    	; 0x27b0 <AICI_InterpretPacket+0x2cc>
		case AICB_CMD_PROGRAM_FUSE_ISP:
		case AICB_CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;
    26ca:	83 e0       	ldi	r24, 0x03	; 3
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	90 93 48 01 	sts	0x0148, r25
    26d2:	80 93 47 01 	sts	0x0147, r24
    26d6:	0c e4       	ldi	r16, 0x4C	; 76
    26d8:	11 e0       	ldi	r17, 0x01	; 1
    26da:	c3 e0       	ldi	r28, 0x03	; 3
			
			for (uint8_t PacketB = 1; PacketB <= 4; PacketB++) // Send the lock-byte values to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    26dc:	f8 01       	movw	r30, r16
    26de:	81 91       	ld	r24, Z+
    26e0:	8f 01       	movw	r16, r30
    26e2:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    26e6:	c1 50       	subi	r28, 0x01	; 1
    26e8:	c7 ff       	sbrs	r28, 7
    26ea:	f8 cf       	rjmp	.-16     	; 0x26dc <AICI_InterpretPacket+0x1f8>

			PacketBytes[1] = AICB_STATUS_CMD_OK;       // Two CMD_OKs are always returned
    26ec:	10 92 4c 01 	sts	0x014C, r1
			PacketBytes[2] = AICB_STATUS_CMD_OK;       // Two CMD_OKs are always returned
    26f0:	10 92 4d 01 	sts	0x014D, r1

			break;
    26f4:	5d c0       	rjmp	.+186    	; 0x27b0 <AICI_InterpretPacket+0x2cc>
		case AICB_CMD_READ_FLASH_ISP:
		case AICB_CMD_READ_EEPROM_ISP:
			MessageSize = 0;                           // Here to prevent compiler from complaining if a var dec appears straight after a case

			uint8_t  ReadCommand = PacketBytes[3];
    26f6:	d0 90 4e 01 	lds	r13, 0x014E
			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8) // Load in the number of bytes that is to
    26fa:	80 91 4c 01 	lds	r24, 0x014C
    26fe:	99 27       	eor	r25, r25
    2700:	d8 2f       	mov	r29, r24
    2702:	cc 27       	eor	r28, r28
    2704:	80 91 4d 01 	lds	r24, 0x014D
    2708:	99 27       	eor	r25, r25
    270a:	c8 2b       	or	r28, r24
    270c:	d9 2b       	or	r29, r25
			                     | PacketBytes[2];                 // be read into a temp variable (MSB first)

			MessageSize = BytesToRead + 3;
    270e:	23 96       	adiw	r28, 0x03	; 3
    2710:	d0 93 48 01 	sts	0x0148, r29
    2714:	c0 93 47 01 	sts	0x0147, r28
    2718:	23 97       	sbiw	r28, 0x03	; 3

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
    271a:	00 e0       	ldi	r16, 0x00	; 0
    271c:	10 e0       	ldi	r17, 0x00	; 0
    271e:	0c 17       	cp	r16, r28
    2720:	1d 07       	cpc	r17, r29
    2722:	60 f5       	brcc	.+88     	; 0x277c <AICI_InterpretPacket+0x298>
    2724:	8d e4       	ldi	r24, 0x4D	; 77
    2726:	e8 2e       	mov	r14, r24
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	f8 2e       	mov	r15, r24
			{
				if (PacketBytes[0] == AICB_CMD_READ_FLASH_ISP)  // Flash read mode - word addresses so MSB/LSB masking nessesary
    272c:	80 91 4b 01 	lds	r24, 0x014B
    2730:	84 31       	cpi	r24, 0x14	; 20
    2732:	31 f4       	brne	.+12     	; 0x2740 <AICI_InterpretPacket+0x25c>
				{
					USI_SPITransmit(ReadCommand | ((ReadByte & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ));
    2734:	8d 2d       	mov	r24, r13
    2736:	99 27       	eor	r25, r25
    2738:	00 ff       	sbrs	r16, 0
    273a:	03 c0       	rjmp	.+6      	; 0x2742 <AICI_InterpretPacket+0x25e>
    273c:	88 60       	ori	r24, 0x08	; 8
    273e:	01 c0       	rjmp	.+2      	; 0x2742 <AICI_InterpretPacket+0x25e>
				}
				else                                       // EEPROM read mode, address is in bytes and so no masking nessesary
				{
					USI_SPITransmit(ReadCommand);
    2740:	8d 2d       	mov	r24, r13
    2742:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
				}
				
				USI_SPITransmitWord(CurrAddress);          // Transmit the current address to the slave AVR
    2746:	80 91 42 01 	lds	r24, 0x0142
    274a:	90 91 43 01 	lds	r25, 0x0143
    274e:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>

				PacketBytes[2 + ReadByte] = USI_SPITransmit(0x00); // Read in the byte stored at the requested location
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2758:	f7 01       	movw	r30, r14
    275a:	80 83       	st	Z, r24

				if ((ReadByte & 0x01) || (PacketBytes[0] == AICB_CMD_READ_EEPROM_ISP)) // Flash addresses are given in words; only increment on the odd byte if reading the flash.
    275c:	00 fd       	sbrc	r16, 0
    275e:	04 c0       	rjmp	.+8      	; 0x2768 <AICI_InterpretPacket+0x284>
    2760:	80 91 4b 01 	lds	r24, 0x014B
    2764:	86 31       	cpi	r24, 0x16	; 22
    2766:	11 f4       	brne	.+4      	; 0x276c <AICI_InterpretPacket+0x288>
				{
					V2P_IncrementCurrAddress();             // Increment the address counter
    2768:	0e 94 3b 0f 	call	0x1e76 <V2P_IncrementCurrAddress>
    276c:	0f 5f       	subi	r16, 0xFF	; 255
    276e:	1f 4f       	sbci	r17, 0xFF	; 255
    2770:	08 94       	sec
    2772:	e1 1c       	adc	r14, r1
    2774:	f1 1c       	adc	r15, r1
    2776:	0c 17       	cp	r16, r28
    2778:	1d 07       	cpc	r17, r29
    277a:	c0 f2       	brcs	.-80     	; 0x272c <AICI_InterpretPacket+0x248>
				}
				else
				{
					if ((CurrAddress & 0x00FF0000) & !(CurrAddress & 0x0000FFFF))
					{
						CurrAddress |= (1UL << 31);        // Set MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
						V2P_CheckForExtendedAddress();
					}
				}
			}
			
			PacketBytes[1]               = AICB_STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    277c:	10 92 4c 01 	sts	0x014C, r1
			PacketBytes[2 + BytesToRead] = AICB_STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    2780:	c5 5b       	subi	r28, 0xB5	; 181
    2782:	de 4f       	sbci	r29, 0xFE	; 254
    2784:	1a 82       	std	Y+2, r1	; 0x02

			break;
    2786:	14 c0       	rjmp	.+40     	; 0x27b0 <AICI_InterpretPacket+0x2cc>
		case AICB_CMD_PROGRAM_FLASH_ISP:
		case AICB_CMD_PROGRAM_EEPROM_ISP:
			ISPCC_ProgramChip();                          // Program the bytes into the chip
    2788:	0e 94 8a 11 	call	0x2314 <ISPCC_ProgramChip>
			
			MessageSize = 2;
    278c:	82 e0       	ldi	r24, 0x02	; 2
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	90 93 48 01 	sts	0x0148, r25
    2794:	80 93 47 01 	sts	0x0147, r24

			PacketBytes[1] = AICB_STATUS_CMD_OK;
    2798:	10 92 4c 01 	sts	0x014C, r1
			
			break;
    279c:	09 c0       	rjmp	.+18     	; 0x27b0 <AICI_InterpretPacket+0x2cc>
		default:                                        // Unknown command, return error
			MessageSize = 1;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	90 93 48 01 	sts	0x0148, r25
    27a6:	80 93 47 01 	sts	0x0147, r24
			
			PacketBytes[1] = AICB_STATUS_CMD_UNKNOWN;
    27aa:	89 ec       	ldi	r24, 0xC9	; 201
    27ac:	80 93 4c 01 	sts	0x014C, r24
	}

	V2P_SendPacket();                                   // Send the response packet
    27b0:	0e 94 5a 0e 	call	0x1cb4 <V2P_SendPacket>
    27b4:	df 91       	pop	r29
    27b6:	cf 91       	pop	r28
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	ff 90       	pop	r15
    27be:	ef 90       	pop	r14
    27c0:	df 90       	pop	r13
    27c2:	08 95       	ret

000027c4 <PM_GetStoredDataSize>:

// ======================================================================================

uint32_t PM_GetStoredDataSize(const uint8_t Type)
{
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	24 97       	sbiw	r28, 0x04	; 4
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
	/* This take a **LOT** of code and is accessed several times throughout
	   the program, so I've put it into a seperate function to save on flash. */

	uint32_t ProgDataSize = 0;
    27d8:	19 82       	std	Y+1, r1	; 0x01
    27da:	1a 82       	std	Y+2, r1	; 0x02
    27dc:	1b 82       	std	Y+3, r1	; 0x03
    27de:	1c 82       	std	Y+4, r1	; 0x04
void 
eeprom_read_block (void *pointer_ram,
                   const void *pointer_eeprom,
                   size_t n)
{
    27e0:	fe 01       	movw	r30, r28
    27e2:	31 96       	adiw	r30, 0x01	; 1
    27e4:	81 30       	cpi	r24, 0x01	; 1
    27e6:	19 f4       	brne	.+6      	; 0x27ee <PM_GetStoredDataSize+0x2a>
    27e8:	ab e1       	ldi	r26, 0x1B	; 27
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <PM_GetStoredDataSize+0x2e>
    27ee:	af e1       	ldi	r26, 0x1F	; 31
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
             XCALL " __eeprom_read_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "st z+,__tmp_reg__" CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                  XCALL " __eeprom_read_block_" _REG_LOCATION_SUFFIX 
                : "+x" (pointer_eeprom),
                  "=z" (pointer_ram)
                : "z"  (pointer_ram)
                : "memory");
            }
          else
            {
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 
    27f2:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    27f4:	18 2e       	mov	r1, r24
    27f6:	0e 94 5e 1a 	call	0x34bc <__eeprom_read_block_1F2021>

	eeprom_read_block((void*)&ProgDataSize, (const void*)((Type == TYPE_FLASH)? &EEPROMVars.DataSize : &EEPROMVars.EEPROMSize), sizeof(uint32_t));

	if (ProgDataSize == 0xFFFFFFFF)                                      // Blank EEPROM, return a size  of 0 bytes
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	9a 81       	ldd	r25, Y+2	; 0x02
    27fe:	ab 81       	ldd	r26, Y+3	; 0x03
    2800:	bc 81       	ldd	r27, Y+4	; 0x04
    2802:	8f 5f       	subi	r24, 0xFF	; 255
    2804:	9f 4f       	sbci	r25, 0xFF	; 255
    2806:	af 4f       	sbci	r26, 0xFF	; 255
    2808:	bf 4f       	sbci	r27, 0xFF	; 255
    280a:	21 f4       	brne	.+8      	; 0x2814 <PM_GetStoredDataSize+0x50>
	  ProgDataSize = 0x00;
    280c:	19 82       	std	Y+1, r1	; 0x01
    280e:	1a 82       	std	Y+2, r1	; 0x02
    2810:	1b 82       	std	Y+3, r1	; 0x03
    2812:	1c 82       	std	Y+4, r1	; 0x04

	return ProgDataSize;
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	9a 81       	ldd	r25, Y+2	; 0x02
    2818:	ab 81       	ldd	r26, Y+3	; 0x03
    281a:	bc 81       	ldd	r27, Y+4	; 0x04
}
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	24 96       	adiw	r28, 0x04	; 4
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	08 95       	ret

00002832 <PM_SetupDFAddressCounters>:

void PM_SetupDFAddressCounters(const uint8_t Type)
{
	uint32_t StartAddress;
	
	MemoryType  = Type;
    2832:	80 93 61 02 	sts	0x0261, r24
	GPageLength = 0;
    2836:	10 92 5f 02 	sts	0x025F, r1
    283a:	10 92 5e 02 	sts	0x025E, r1
    283e:	20 91 42 01 	lds	r18, 0x0142
    2842:	30 91 43 01 	lds	r19, 0x0143
    2846:	40 91 44 01 	lds	r20, 0x0144
    284a:	50 91 45 01 	lds	r21, 0x0145

	if (Type == TYPE_FLASH)                                              // Type 1 = Flash
    284e:	81 30       	cpi	r24, 0x01	; 1
    2850:	39 f4       	brne	.+14     	; 0x2860 <PM_SetupDFAddressCounters+0x2e>
	  StartAddress = (CurrAddress << 1);                               // Convert flash word address to byte address
    2852:	da 01       	movw	r26, r20
    2854:	c9 01       	movw	r24, r18
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	aa 1f       	adc	r26, r26
    285c:	bb 1f       	adc	r27, r27
    285e:	06 c0       	rjmp	.+12     	; 0x286c <PM_SetupDFAddressCounters+0x3a>
	else
	  StartAddress = CurrAddress + PM_EEPROM_OFFSET;                   // EEPROM uses byte addresses, and starts at the 257th kilobyte in Dataflash
    2860:	da 01       	movw	r26, r20
    2862:	c9 01       	movw	r24, r18
    2864:	80 50       	subi	r24, 0x00	; 0
    2866:	9c 4f       	sbci	r25, 0xFC	; 252
    2868:	ab 4f       	sbci	r26, 0xFB	; 251
    286a:	bf 4f       	sbci	r27, 0xFF	; 255
	
	CurrPageAddress = 0;
    286c:	10 92 6e 02 	sts	0x026E, r1
    2870:	10 92 6d 02 	sts	0x026D, r1

	while (StartAddress >= DF_INTERNALDF_BUFFBYTES)                      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DF_INTERNALDF_BUFFBYTES;                         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    2874:	88 30       	cpi	r24, 0x08	; 8
    2876:	21 e0       	ldi	r18, 0x01	; 1
    2878:	92 07       	cpc	r25, r18
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	a2 07       	cpc	r26, r18
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	b2 07       	cpc	r27, r18
    2882:	a0 f0       	brcs	.+40     	; 0x28ac <PM_SetupDFAddressCounters+0x7a>
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	88 50       	subi	r24, 0x08	; 8
    288a:	91 40       	sbci	r25, 0x01	; 1
    288c:	a0 40       	sbci	r26, 0x00	; 0
    288e:	b0 40       	sbci	r27, 0x00	; 0
    2890:	2f 5f       	subi	r18, 0xFF	; 255
    2892:	3f 4f       	sbci	r19, 0xFF	; 255
    2894:	88 30       	cpi	r24, 0x08	; 8
    2896:	41 e0       	ldi	r20, 0x01	; 1
    2898:	94 07       	cpc	r25, r20
    289a:	40 e0       	ldi	r20, 0x00	; 0
    289c:	a4 07       	cpc	r26, r20
    289e:	40 e0       	ldi	r20, 0x00	; 0
    28a0:	b4 07       	cpc	r27, r20
    28a2:	90 f7       	brcc	.-28     	; 0x2888 <PM_SetupDFAddressCounters+0x56>
    28a4:	30 93 6e 02 	sts	0x026E, r19
    28a8:	20 93 6d 02 	sts	0x026D, r18
	}
	
	CurrBuffByte = (uint16_t)StartAddress;                               // The buffer byte is the remainder
    28ac:	90 93 67 02 	sts	0x0267, r25
    28b0:	80 93 66 02 	sts	0x0266, r24
    28b4:	08 95       	ret

000028b6 <PM_StoreProgramByte>:
}

void PM_StoreProgramByte(const uint8_t Data)
{
    28b6:	cf 93       	push	r28
    28b8:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DF_INTERNALDF_BUFFBYTES)
    28ba:	80 91 66 02 	lds	r24, 0x0266
    28be:	90 91 67 02 	lds	r25, 0x0267
    28c2:	88 50       	subi	r24, 0x08	; 8
    28c4:	91 40       	sbci	r25, 0x01	; 1
    28c6:	a9 f4       	brne	.+42     	; 0x28f2 <PM_StoreProgramByte+0x3c>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    28c8:	80 91 6d 02 	lds	r24, 0x026D
    28cc:	90 91 6e 02 	lds	r25, 0x026E
    28d0:	9c 01       	movw	r18, r24
    28d2:	01 96       	adiw	r24, 0x01	; 1
    28d4:	90 93 6e 02 	sts	0x026E, r25
    28d8:	80 93 6d 02 	sts	0x026D, r24
    28dc:	c9 01       	movw	r24, r18
    28de:	0e 94 cf 0a 	call	0x159e <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	0e 94 45 0a 	call	0x148a <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    28ea:	10 92 67 02 	sts	0x0267, r1
    28ee:	10 92 66 02 	sts	0x0266, r1
	}
	
	SPI_SPITransmit(Data);                                               // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    28f2:	8c 2f       	mov	r24, r28
    28f4:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
	CurrBuffByte++;
    28f8:	80 91 66 02 	lds	r24, 0x0266
    28fc:	90 91 67 02 	lds	r25, 0x0267
    2900:	01 96       	adiw	r24, 0x01	; 1
    2902:	90 93 67 02 	sts	0x0267, r25
    2906:	80 93 66 02 	sts	0x0266, r24
	GPageLength++;
    290a:	80 91 5e 02 	lds	r24, 0x025E
    290e:	90 91 5f 02 	lds	r25, 0x025F
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	90 93 5f 02 	sts	0x025F, r25
    2918:	80 93 5e 02 	sts	0x025E, r24
    291c:	cf 91       	pop	r28
    291e:	08 95       	ret

00002920 <PM_CheckEndOfFuseLockData>:
}

void PM_InterpretAVRISPPacket(void)
{
	uint8_t* EEPROMAddress;

	switch (PacketBytes[0])
	{
		case AICB_CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
						
			for (uint8_t PacketB = 0; PacketB <= 11; PacketB++)          // Save the enter programming mode command bytes
			  eeprom_write_byte(&EEPROMVars.EnterProgMode[PacketB], PacketBytes[PacketB]);
			
			InProgrammingMode = TRUE;                                    // Set the flag, prevent the user from exiting the V2P state machine			
			CurrentMode = PM_NO_SETUP;                                   // Clear the current mode variable

			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = AICB_STATUS_CMD_OK;

			break;			
		case AICB_CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;

			PM_CheckEndOfFuseLockData();                                 // Check for remaining bytes to be stored and general cleanup
			
			InProgrammingMode = FALSE;                                   // Clear the flag, allow the user to exit the V2P state machine

			DF_EnableDataflash(FALSE);

			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
			PacketBytes[1] = AICB_STATUS_CMD_OK;

			break;
		case AICB_CMD_READ_SIGNATURE_ISP:
			MessageSize = 4;

			PacketBytes[1] = AICB_STATUS_CMD_OK;                          // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x01;                                        // Signature bytes all return "01" in storage mode
			PacketBytes[3] = AICB_STATUS_CMD_OK;                          // Data byte is encased in CMD_OKs

			break;
		case AICB_CMD_CHIP_ERASE_ISP:
			MessageSize = 2;

			for (uint8_t PacketB = 1; PacketB <= 6; PacketB++)          // Save the erase chip command bytes to EEPROM
			  eeprom_write_byte(&EEPROMVars.EraseChip[PacketB], PacketBytes[PacketB]);

			for (uint8_t Byte = 0; Byte < 8; Byte++)                    // Clear the program and EEPROM size counters
			{
				eeprom_write_byte(&EEPROMVars.DataSize[Byte], 0x00);
				eeprom_write_byte(&EEPROMVars.EEPROMSize[Byte], 0x00);
			}
						
			eeprom_write_byte(&EEPROMVars.EraseCmdStored, TRUE);
			
			PacketBytes[1] = AICB_STATUS_CMD_OK;
			
			break;
		case AICB_CMD_READ_OSCCAL_ISP:
			MessageSize = 4;

			PacketBytes[1] = AICB_STATUS_CMD_OK;                        // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x00;                                      // Return 0x00 for the OSCCAL byte
			PacketBytes[3] = AICB_STATUS_CMD_OK;                        // Data byte is encased in CMD_OKs

			break;
		case AICB_CMD_READ_FUSE_ISP:
		case AICB_CMD_READ_LOCK_ISP:
			MessageSize = 4;
	
			if (CurrentMode != PM_LOCKFUSEBITS_READ)                    // First lock or fuse byte being read, set the EEPROM pointer
			{
				PM_CheckEndOfFuseLockData();                            // Check for remaining bytes to be stored and general cleanup
				
				CurrBuffByte = 0;
				CurrentMode  = PM_LOCKFUSEBITS_READ;
			}
			
			if (CurrBuffByte > eeprom_read_byte((PacketBytes[0] == AICB_CMD_READ_FUSE_ISP)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes))  // Trying to read more fuse/lock bytes than are stored in memory
			{
				PacketBytes[2] = 0xFF;                                 // Return 0xFF for the fuse/lock byte
			}
			else
			{
				PacketBytes[2] = eeprom_read_byte((uint8_t*)(((PacketBytes[0] == AICB_CMD_READ_FUSE_ISP)? &EEPROMVars.FuseBytes : &EEPROMVars.LockBytes) // Starting location
									                         + (CurrBuffByte << 2) + (PacketBytes[1] - 1)));                                             // The start position of the actual fuse/lock byte to read (4 bytes each));
			}

			PacketBytes[1] = AICB_STATUS_CMD_OK;                       // Data byte is encased in CMD_OKs
			PacketBytes[3] = AICB_STATUS_CMD_OK;                       // Data byte is encased in CMD_OKs

			CurrBuffByte++;

			break;
		case AICB_CMD_PROGRAM_FUSE_ISP:
		case AICB_CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;

			if (CurrentMode != PM_LOCKFUSEBITS_WRITE)                  // First lock or fuse byte being written, set the EEPROM pointer
			{
				CurrentMode   = PM_LOCKFUSEBITS_WRITE;
				CurrBuffByte  = 0;                                     // CurrBuffByte is used to store the total fuse/lock bytes written
			}

			if (PacketBytes[0] == AICB_CMD_PROGRAM_FUSE_ISP)
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.FuseBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_FUSE;
			}
			else
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.LockBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_LOCK;
			}				
			
			if (CurrBuffByte < PM_MAX_FUSELOCKBITS)
			{
				for (uint8_t FLByte = 1; FLByte <= 4; FLByte++)
				{
					eeprom_write_byte(EEPROMAddress, PacketBytes[FLByte]);
					EEPROMAddress++;
				}

				CurrBuffByte++;                                        // Increment the total fuse/lock bytes written counter
			}
			
			PacketBytes[1] = AICB_STATUS_CMD_OK;                       // Two CMD_OKs are always returned
			PacketBytes[2] = AICB_STATUS_CMD_OK;                       // Two CMD_OKs are always returned

			break;
		case AICB_CMD_PROGRAM_FLASH_ISP:
		case AICB_CMD_PROGRAM_EEPROM_ISP:
			MessageSize = 2;

			if (CurrentMode != PM_DATAFLASH_WRITE)                      // First programming packet
			{
				if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP)       // Flash programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram; // Set the eeprom address to the Program command bytes location
					PM_SetupDFAddressCounters(TYPE_FLASH);
				}
				else                                                   // EEPROM programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;  // Set the eeprom address to the EEPROM command bytes location
					PM_SetupDFAddressCounters(TYPE_EEPROM);
				}
				
				DF_BufferWriteEnable(CurrBuffByte);
				CurrentMode = PM_DATAFLASH_WRITE;
				
				for (uint8_t B = 1; B <= 9; B++)                       // Save the command bytes
				  eeprom_write_byte(EEPROMAddress, PacketBytes[B]);
			}

			uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
			                      | PacketBytes[2];

			for (uint16_t CurrByte = 0; CurrByte < BytesToWrite; CurrByte++)
				PM_StoreProgramByte(PacketBytes[10 + CurrByte]);

			if (!(GPageLength & PM_PAGELENGTH_FOUNDBIT) && (PacketBytes[3] & ISPCC_PROG_MODE_PAGEDONE) && GPageLength)
			{
				eeprom_write_word(((MemoryType == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength), GPageLength);
		
				GPageLength |= PM_PAGELENGTH_FOUNDBIT;                 // Bit 15 is used to indicate if the length has been found
			}

			PacketBytes[1] = AICB_STATUS_CMD_OK;
		
			break;
		case AICB_CMD_READ_FLASH_ISP:
		case AICB_CMD_READ_EEPROM_ISP:	
			if (CurrentMode != PM_DATAFLASH_READ)
			{
				PM_CheckEndOfFuseLockData();                           // Check for remaining bytes to be stored and general cleanup
				
				PM_SetupDFAddressCounters((PacketBytes[0] == AICB_CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);
				DF_ContinuousReadEnable(CurrPageAddress, CurrBuffByte);
				
				CurrentMode = PM_DATAFLASH_READ;
				CurrAddress = 0;
			}

			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8)    // \. Load in the number of bytes that is to
			                     | PacketBytes[2];                    // /  be read into a temp variable (MSB first)
						
			uint16_t BytesInMem  = PM_GetStoredDataSize((PacketBytes[0] == AICB_CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
			   PacketBytes[2 + ReadByte] = ((CurrAddress < BytesInMem)? SPI_SPITransmit(0x00) : 0xFF); // Read in the next dataflash byte if present
			   V2P_IncrementCurrAddress();
			}
			
			MessageSize = BytesToRead + 3;

			PacketBytes[1]               = AICB_STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
			PacketBytes[2 + BytesToRead] = AICB_STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
		
			break;
		default:
			MessageSize = 1;
			
			PacketBytes[1] = AICB_STATUS_CMD_UNKNOWN;
	}

	V2P_SendPacket();                                   // Send the response packet
}

void PM_CheckEndOfFuseLockData(void)
{
    2920:	cf 93       	push	r28
    2922:	df 93       	push	r29
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	24 97       	sbiw	r28, 0x04	; 4
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	f8 94       	cli
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	cd bf       	out	0x3d, r28	; 61
	if (CurrentMode == PM_DATAFLASH_WRITE)
    2934:	80 91 60 02 	lds	r24, 0x0260
    2938:	81 30       	cpi	r24, 0x01	; 1
    293a:	09 f0       	breq	.+2      	; 0x293e <PM_CheckEndOfFuseLockData+0x1e>
    293c:	3f c0       	rjmp	.+126    	; 0x29bc <PM_CheckEndOfFuseLockData+0x9c>
	{
		if (CurrBuffByte)                               // Data in the dataflash buffer, pending to be written
    293e:	80 91 66 02 	lds	r24, 0x0266
    2942:	90 91 67 02 	lds	r25, 0x0267
    2946:	89 2b       	or	r24, r25
    2948:	31 f0       	breq	.+12     	; 0x2956 <PM_CheckEndOfFuseLockData+0x36>
		  DF_CopyBufferToFlashPage(CurrPageAddress);    // Save the remaining buffer bytes
    294a:	80 91 6d 02 	lds	r24, 0x026D
    294e:	90 91 6e 02 	lds	r25, 0x026E
    2952:	0e 94 cf 0a 	call	0x159e <DF_CopyBufferToFlashPage>

		uint32_t DataSize = ((CurrPageAddress * DF_INTERNALDF_BUFFBYTES) + CurrBuffByte);
    2956:	20 91 6d 02 	lds	r18, 0x026D
    295a:	30 91 6e 02 	lds	r19, 0x026E
    295e:	88 e0       	ldi	r24, 0x08	; 8
    2960:	91 e0       	ldi	r25, 0x01	; 1
    2962:	28 9f       	mul	r18, r24
    2964:	a0 01       	movw	r20, r0
    2966:	29 9f       	mul	r18, r25
    2968:	50 0d       	add	r21, r0
    296a:	38 9f       	mul	r19, r24
    296c:	50 0d       	add	r21, r0
    296e:	11 24       	eor	r1, r1
    2970:	ca 01       	movw	r24, r20
    2972:	20 91 66 02 	lds	r18, 0x0266
    2976:	30 91 67 02 	lds	r19, 0x0267
    297a:	82 0f       	add	r24, r18
    297c:	93 1f       	adc	r25, r19
    297e:	9c 01       	movw	r18, r24
    2980:	44 27       	eor	r20, r20
    2982:	55 27       	eor	r21, r21
    2984:	29 83       	std	Y+1, r18	; 0x01
    2986:	3a 83       	std	Y+2, r19	; 0x02
    2988:	4b 83       	std	Y+3, r20	; 0x03
    298a:	5c 83       	std	Y+4, r21	; 0x04

		if (MemoryType == TYPE_FLASH)
    298c:	80 91 61 02 	lds	r24, 0x0261
    2990:	fe 01       	movw	r30, r28
    2992:	31 96       	adiw	r30, 0x01	; 1
    2994:	81 30       	cpi	r24, 0x01	; 1
    2996:	19 f4       	brne	.+6      	; 0x299e <PM_CheckEndOfFuseLockData+0x7e>
void 
eeprom_write_block (const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t n)
{
    2998:	ab e1       	ldi	r26, 0x1B	; 27
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	0a c0       	rjmp	.+20     	; 0x29b2 <PM_CheckEndOfFuseLockData+0x92>
		{
			eeprom_write_block((const void*)&DataSize, (void*)&EEPROMVars.DataSize, sizeof(uint32_t));
		}
		else
		{
			DataSize -= PM_EEPROM_OFFSET;                // Remove DataFlash EEPROM start offset
    299e:	20 50       	subi	r18, 0x00	; 0
    29a0:	34 40       	sbci	r19, 0x04	; 4
    29a2:	44 40       	sbci	r20, 0x04	; 4
    29a4:	50 40       	sbci	r21, 0x00	; 0
    29a6:	29 83       	std	Y+1, r18	; 0x01
    29a8:	3a 83       	std	Y+2, r19	; 0x02
    29aa:	4b 83       	std	Y+3, r20	; 0x03
    29ac:	5c 83       	std	Y+4, r21	; 0x04
void 
eeprom_write_block (const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t n)
{
    29ae:	af e1       	ldi	r26, 0x1F	; 31
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
            "ld __tmp_reg__,z+" CR_TAB
             XCALL " __eeprom_write_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      /* Do nothing for compile time constant transfer size n == 0.  */
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                 XCALL " __eeprom_write_block_" _REG_LOCATION_SUFFIX
               : "+x" (pointer_eeprom),
                 "=z" (pointer_ram)
               : "z"  (pointer_ram)
               : "memory" );
            }
          else
            {
              uint8_t len;
              len = (uint8_t) n;
    29b2:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    29b4:	18 2e       	mov	r1, r24
    29b6:	0e 94 79 1a 	call	0x34f2 <__eeprom_write_block_1F2021>
    29ba:	10 c0       	rjmp	.+32     	; 0x29dc <PM_CheckEndOfFuseLockData+0xbc>
			eeprom_write_block((const void*)&DataSize, (void*)&EEPROMVars.EEPROMSize, sizeof(uint32_t));
		}
	}
	else if (CurrentMode == PM_LOCKFUSEBITS_WRITE)
    29bc:	83 30       	cpi	r24, 0x03	; 3
    29be:	71 f4       	brne	.+28     	; 0x29dc <PM_CheckEndOfFuseLockData+0xbc>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    29c0:	80 91 61 02 	lds	r24, 0x0261
    29c4:	82 30       	cpi	r24, 0x02	; 2
    29c6:	19 f4       	brne	.+6      	; 0x29ce <PM_CheckEndOfFuseLockData+0xae>
    29c8:	af e2       	ldi	r26, 0x2F	; 47
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	02 c0       	rjmp	.+4      	; 0x29d2 <PM_CheckEndOfFuseLockData+0xb2>
    29ce:	a0 e3       	ldi	r26, 0x30	; 48
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	80 91 66 02 	lds	r24, 0x0266
  asm volatile (
    29d6:	08 2e       	mov	r0, r24
    29d8:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
    29dc:	24 96       	adiw	r28, 0x04	; 4
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	f8 94       	cli
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	cd bf       	out	0x3d, r28	; 61
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	08 95       	ret

000029ee <PM_InterpretAVRISPPacket>:
    29ee:	cf 92       	push	r12
    29f0:	df 92       	push	r13
    29f2:	ef 92       	push	r14
    29f4:	ff 92       	push	r15
    29f6:	0f 93       	push	r16
    29f8:	1f 93       	push	r17
    29fa:	cf 93       	push	r28
    29fc:	df 93       	push	r29
    29fe:	40 91 4b 01 	lds	r20, 0x014B
    2a02:	84 2f       	mov	r24, r20
    2a04:	99 27       	eor	r25, r25
    2a06:	86 31       	cpi	r24, 0x16	; 22
    2a08:	91 05       	cpc	r25, r1
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <PM_InterpretAVRISPPacket+0x20>
    2a0c:	bc c1       	rjmp	.+888    	; 0x2d86 <PM_InterpretAVRISPPacket+0x398>
    2a0e:	87 31       	cpi	r24, 0x17	; 23
    2a10:	91 05       	cpc	r25, r1
    2a12:	94 f4       	brge	.+36     	; 0x2a38 <PM_InterpretAVRISPPacket+0x4a>
    2a14:	82 31       	cpi	r24, 0x12	; 18
    2a16:	91 05       	cpc	r25, r1
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <PM_InterpretAVRISPPacket+0x2e>
    2a1a:	66 c0       	rjmp	.+204    	; 0x2ae8 <PM_InterpretAVRISPPacket+0xfa>
    2a1c:	83 31       	cpi	r24, 0x13	; 19
    2a1e:	91 05       	cpc	r25, r1
    2a20:	3c f4       	brge	.+14     	; 0x2a30 <PM_InterpretAVRISPPacket+0x42>
    2a22:	80 31       	cpi	r24, 0x10	; 16
    2a24:	91 05       	cpc	r25, r1
    2a26:	11 f1       	breq	.+68     	; 0x2a6c <PM_InterpretAVRISPPacket+0x7e>
    2a28:	41 97       	sbiw	r24, 0x11	; 17
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <PM_InterpretAVRISPPacket+0x40>
    2a2c:	3f c0       	rjmp	.+126    	; 0x2aac <PM_InterpretAVRISPPacket+0xbe>
    2a2e:	19 c2       	rjmp	.+1074   	; 0x2e62 <PM_InterpretAVRISPPacket+0x474>
    2a30:	44 97       	sbiw	r24, 0x14	; 20
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <PM_InterpretAVRISPPacket+0x48>
    2a34:	a8 c1       	rjmp	.+848    	; 0x2d86 <PM_InterpretAVRISPPacket+0x398>
    2a36:	3c c1       	rjmp	.+632    	; 0x2cb0 <PM_InterpretAVRISPPacket+0x2c2>
    2a38:	89 31       	cpi	r24, 0x19	; 25
    2a3a:	91 05       	cpc	r25, r1
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <PM_InterpretAVRISPPacket+0x52>
    2a3e:	e6 c0       	rjmp	.+460    	; 0x2c0c <PM_InterpretAVRISPPacket+0x21e>
    2a40:	8a 31       	cpi	r24, 0x1A	; 26
    2a42:	91 05       	cpc	r25, r1
    2a44:	44 f4       	brge	.+16     	; 0x2a56 <PM_InterpretAVRISPPacket+0x68>
    2a46:	87 31       	cpi	r24, 0x17	; 23
    2a48:	91 05       	cpc	r25, r1
    2a4a:	09 f4       	brne	.+2      	; 0x2a4e <PM_InterpretAVRISPPacket+0x60>
    2a4c:	df c0       	rjmp	.+446    	; 0x2c0c <PM_InterpretAVRISPPacket+0x21e>
    2a4e:	48 97       	sbiw	r24, 0x18	; 24
    2a50:	09 f4       	brne	.+2      	; 0x2a54 <PM_InterpretAVRISPPacket+0x66>
    2a52:	89 c0       	rjmp	.+274    	; 0x2b66 <PM_InterpretAVRISPPacket+0x178>
    2a54:	06 c2       	rjmp	.+1036   	; 0x2e62 <PM_InterpretAVRISPPacket+0x474>
    2a56:	8b 31       	cpi	r24, 0x1B	; 27
    2a58:	91 05       	cpc	r25, r1
    2a5a:	d1 f1       	breq	.+116    	; 0x2ad0 <PM_InterpretAVRISPPacket+0xe2>
    2a5c:	8b 31       	cpi	r24, 0x1B	; 27
    2a5e:	91 05       	cpc	r25, r1
    2a60:	0c f4       	brge	.+2      	; 0x2a64 <PM_InterpretAVRISPPacket+0x76>
    2a62:	81 c0       	rjmp	.+258    	; 0x2b66 <PM_InterpretAVRISPPacket+0x178>
    2a64:	4c 97       	sbiw	r24, 0x1c	; 28
    2a66:	09 f4       	brne	.+2      	; 0x2a6a <PM_InterpretAVRISPPacket+0x7c>
    2a68:	71 c0       	rjmp	.+226    	; 0x2b4c <PM_InterpretAVRISPPacket+0x15e>
    2a6a:	fb c1       	rjmp	.+1014   	; 0x2e62 <PM_InterpretAVRISPPacket+0x474>
    2a6c:	82 e0       	ldi	r24, 0x02	; 2
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	90 93 48 01 	sts	0x0148, r25
    2a74:	80 93 47 01 	sts	0x0147, r24
    2a78:	eb e4       	ldi	r30, 0x4B	; 75
    2a7a:	f1 e0       	ldi	r31, 0x01	; 1
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	9b e0       	ldi	r25, 0x0B	; 11
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2a82:	d9 01       	movw	r26, r18
    2a84:	ad 5d       	subi	r26, 0xDD	; 221
    2a86:	bf 4f       	sbci	r27, 0xFF	; 255
    2a88:	81 91       	ld	r24, Z+
  asm volatile (
    2a8a:	08 2e       	mov	r0, r24
    2a8c:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
    2a90:	91 50       	subi	r25, 0x01	; 1
    2a92:	2f 5f       	subi	r18, 0xFF	; 255
    2a94:	3f 4f       	sbci	r19, 0xFF	; 255
    2a96:	97 ff       	sbrs	r25, 7
    2a98:	f4 cf       	rjmp	.-24     	; 0x2a82 <PM_InterpretAVRISPPacket+0x94>
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	80 93 46 01 	sts	0x0146, r24
    2aa0:	10 92 60 02 	sts	0x0260, r1
    2aa4:	81 b3       	in	r24, 0x11	; 17
    2aa6:	8f 7c       	andi	r24, 0xCF	; 207
    2aa8:	80 62       	ori	r24, 0x20	; 32
    2aaa:	10 c0       	rjmp	.+32     	; 0x2acc <PM_InterpretAVRISPPacket+0xde>
    2aac:	82 e0       	ldi	r24, 0x02	; 2
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	90 93 48 01 	sts	0x0148, r25
    2ab4:	80 93 47 01 	sts	0x0147, r24
    2ab8:	0e 94 90 14 	call	0x2920 <PM_CheckEndOfFuseLockData>
    2abc:	10 92 46 01 	sts	0x0146, r1
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    2ac6:	81 b3       	in	r24, 0x11	; 17
    2ac8:	8f 7c       	andi	r24, 0xCF	; 207
    2aca:	80 61       	ori	r24, 0x10	; 16
    2acc:	81 bb       	out	0x11, r24	; 17
    2ace:	58 c1       	rjmp	.+688    	; 0x2d80 <PM_InterpretAVRISPPacket+0x392>
    2ad0:	84 e0       	ldi	r24, 0x04	; 4
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	90 93 48 01 	sts	0x0148, r25
    2ad8:	80 93 47 01 	sts	0x0147, r24
    2adc:	10 92 4c 01 	sts	0x014C, r1
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	80 93 4d 01 	sts	0x014D, r24
    2ae6:	3c c0       	rjmp	.+120    	; 0x2b60 <PM_InterpretAVRISPPacket+0x172>
    2ae8:	82 e0       	ldi	r24, 0x02	; 2
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	90 93 48 01 	sts	0x0148, r25
    2af0:	80 93 47 01 	sts	0x0147, r24
    2af4:	ec e4       	ldi	r30, 0x4C	; 76
    2af6:	f1 e0       	ldi	r31, 0x01	; 1
    2af8:	21 e0       	ldi	r18, 0x01	; 1
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	95 e0       	ldi	r25, 0x05	; 5
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2afe:	d9 01       	movw	r26, r18
    2b00:	ab 5e       	subi	r26, 0xEB	; 235
    2b02:	bf 4f       	sbci	r27, 0xFF	; 255
    2b04:	81 91       	ld	r24, Z+
  asm volatile (
    2b06:	08 2e       	mov	r0, r24
    2b08:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
    2b0c:	91 50       	subi	r25, 0x01	; 1
    2b0e:	2f 5f       	subi	r18, 0xFF	; 255
    2b10:	3f 4f       	sbci	r19, 0xFF	; 255
    2b12:	97 ff       	sbrs	r25, 7
    2b14:	f4 cf       	rjmp	.-24     	; 0x2afe <PM_InterpretAVRISPPacket+0x110>
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	37 e0       	ldi	r19, 0x07	; 7
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b1e:	dc 01       	movw	r26, r24
    2b20:	a5 5e       	subi	r26, 0xE5	; 229
    2b22:	bf 4f       	sbci	r27, 0xFF	; 255
  asm volatile (
    2b24:	02 2e       	mov	r0, r18
    2b26:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	a1 5e       	subi	r26, 0xE1	; 225
    2b2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b30:	02 2e       	mov	r0, r18
    2b32:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
    2b36:	31 50       	subi	r19, 0x01	; 1
    2b38:	01 96       	adiw	r24, 0x01	; 1
    2b3a:	37 ff       	sbrs	r19, 7
    2b3c:	f0 cf       	rjmp	.-32     	; 0x2b1e <PM_InterpretAVRISPPacket+0x130>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2b3e:	a4 e1       	ldi	r26, 0x14	; 20
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	81 e0       	ldi	r24, 0x01	; 1
  asm volatile (
    2b44:	08 2e       	mov	r0, r24
    2b46:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
    2b4a:	1a c1       	rjmp	.+564    	; 0x2d80 <PM_InterpretAVRISPPacket+0x392>
    2b4c:	84 e0       	ldi	r24, 0x04	; 4
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	90 93 48 01 	sts	0x0148, r25
    2b54:	80 93 47 01 	sts	0x0147, r24
    2b58:	10 92 4c 01 	sts	0x014C, r1
    2b5c:	10 92 4d 01 	sts	0x014D, r1
    2b60:	10 92 4e 01 	sts	0x014E, r1
    2b64:	87 c1       	rjmp	.+782    	; 0x2e74 <PM_InterpretAVRISPPacket+0x486>
    2b66:	84 e0       	ldi	r24, 0x04	; 4
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	90 93 48 01 	sts	0x0148, r25
    2b6e:	80 93 47 01 	sts	0x0147, r24
    2b72:	80 91 60 02 	lds	r24, 0x0260
    2b76:	84 30       	cpi	r24, 0x04	; 4
    2b78:	49 f0       	breq	.+18     	; 0x2b8c <PM_InterpretAVRISPPacket+0x19e>
    2b7a:	0e 94 90 14 	call	0x2920 <PM_CheckEndOfFuseLockData>
    2b7e:	10 92 67 02 	sts	0x0267, r1
    2b82:	10 92 66 02 	sts	0x0266, r1
    2b86:	84 e0       	ldi	r24, 0x04	; 4
    2b88:	80 93 60 02 	sts	0x0260, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2b8c:	60 91 4b 01 	lds	r22, 0x014B
    2b90:	68 31       	cpi	r22, 0x18	; 24
    2b92:	19 f4       	brne	.+6      	; 0x2b9a <PM_InterpretAVRISPPacket+0x1ac>
    2b94:	af e2       	ldi	r26, 0x2F	; 47
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <PM_InterpretAVRISPPacket+0x1b0>
    2b9a:	a0 e3       	ldi	r26, 0x30	; 48
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2b9e:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
    2ba2:	80 2d       	mov	r24, r0
    2ba4:	99 27       	eor	r25, r25
    2ba6:	40 91 66 02 	lds	r20, 0x0266
    2baa:	50 91 67 02 	lds	r21, 0x0267
    2bae:	84 17       	cp	r24, r20
    2bb0:	95 07       	cpc	r25, r21
    2bb2:	10 f4       	brcc	.+4      	; 0x2bb8 <PM_InterpretAVRISPPacket+0x1ca>
    2bb4:	8f ef       	ldi	r24, 0xFF	; 255
    2bb6:	1d c0       	rjmp	.+58     	; 0x2bf2 <PM_InterpretAVRISPPacket+0x204>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2bb8:	80 ea       	ldi	r24, 0xA0	; 160
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	48 9f       	mul	r20, r24
    2bbe:	90 01       	movw	r18, r0
    2bc0:	49 9f       	mul	r20, r25
    2bc2:	30 0d       	add	r19, r0
    2bc4:	58 9f       	mul	r21, r24
    2bc6:	30 0d       	add	r19, r0
    2bc8:	11 24       	eor	r1, r1
    2bca:	90 91 4c 01 	lds	r25, 0x014C
    2bce:	88 e2       	ldi	r24, 0x28	; 40
    2bd0:	98 9f       	mul	r25, r24
    2bd2:	c0 01       	movw	r24, r0
    2bd4:	11 24       	eor	r1, r1
    2bd6:	28 0f       	add	r18, r24
    2bd8:	39 1f       	adc	r19, r25
    2bda:	68 31       	cpi	r22, 0x18	; 24
    2bdc:	21 f4       	brne	.+8      	; 0x2be6 <PM_InterpretAVRISPPacket+0x1f8>
    2bde:	d9 01       	movw	r26, r18
    2be0:	a7 5f       	subi	r26, 0xF7	; 247
    2be2:	bf 4f       	sbci	r27, 0xFF	; 255
    2be4:	03 c0       	rjmp	.+6      	; 0x2bec <PM_InterpretAVRISPPacket+0x1fe>
    2be6:	d9 01       	movw	r26, r18
    2be8:	af 5c       	subi	r26, 0xCF	; 207
    2bea:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2bec:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
    2bf0:	80 2d       	mov	r24, r0
    2bf2:	80 93 4d 01 	sts	0x014D, r24
    2bf6:	10 92 4c 01 	sts	0x014C, r1
    2bfa:	10 92 4e 01 	sts	0x014E, r1
    2bfe:	4f 5f       	subi	r20, 0xFF	; 255
    2c00:	5f 4f       	sbci	r21, 0xFF	; 255
    2c02:	50 93 67 02 	sts	0x0267, r21
    2c06:	40 93 66 02 	sts	0x0266, r20
    2c0a:	34 c1       	rjmp	.+616    	; 0x2e74 <PM_InterpretAVRISPPacket+0x486>
    2c0c:	83 e0       	ldi	r24, 0x03	; 3
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	90 93 48 01 	sts	0x0148, r25
    2c14:	80 93 47 01 	sts	0x0147, r24
    2c18:	80 91 60 02 	lds	r24, 0x0260
    2c1c:	83 30       	cpi	r24, 0x03	; 3
    2c1e:	39 f0       	breq	.+14     	; 0x2c2e <PM_InterpretAVRISPPacket+0x240>
    2c20:	83 e0       	ldi	r24, 0x03	; 3
    2c22:	80 93 60 02 	sts	0x0260, r24
    2c26:	10 92 67 02 	sts	0x0267, r1
    2c2a:	10 92 66 02 	sts	0x0266, r1
    2c2e:	20 91 66 02 	lds	r18, 0x0266
    2c32:	30 91 67 02 	lds	r19, 0x0267
    2c36:	47 31       	cpi	r20, 0x17	; 23
    2c38:	69 f4       	brne	.+26     	; 0x2c54 <PM_InterpretAVRISPPacket+0x266>
    2c3a:	80 ea       	ldi	r24, 0xA0	; 160
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	28 9f       	mul	r18, r24
    2c40:	e0 01       	movw	r28, r0
    2c42:	29 9f       	mul	r18, r25
    2c44:	d0 0d       	add	r29, r0
    2c46:	38 9f       	mul	r19, r24
    2c48:	d0 0d       	add	r29, r0
    2c4a:	11 24       	eor	r1, r1
    2c4c:	cf 5c       	subi	r28, 0xCF	; 207
    2c4e:	df 4f       	sbci	r29, 0xFF	; 255
    2c50:	82 e0       	ldi	r24, 0x02	; 2
    2c52:	0c c0       	rjmp	.+24     	; 0x2c6c <PM_InterpretAVRISPPacket+0x27e>
    2c54:	80 ea       	ldi	r24, 0xA0	; 160
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	28 9f       	mul	r18, r24
    2c5a:	e0 01       	movw	r28, r0
    2c5c:	29 9f       	mul	r18, r25
    2c5e:	d0 0d       	add	r29, r0
    2c60:	38 9f       	mul	r19, r24
    2c62:	d0 0d       	add	r29, r0
    2c64:	11 24       	eor	r1, r1
    2c66:	c7 5a       	subi	r28, 0xA7	; 167
    2c68:	df 4f       	sbci	r29, 0xFF	; 255
    2c6a:	83 e0       	ldi	r24, 0x03	; 3
    2c6c:	80 93 61 02 	sts	0x0261, r24
    2c70:	80 91 66 02 	lds	r24, 0x0266
    2c74:	90 91 67 02 	lds	r25, 0x0267
    2c78:	0a 97       	sbiw	r24, 0x0a	; 10
    2c7a:	a8 f4       	brcc	.+42     	; 0x2ca6 <PM_InterpretAVRISPPacket+0x2b8>
    2c7c:	ec e4       	ldi	r30, 0x4C	; 76
    2c7e:	f1 e0       	ldi	r31, 0x01	; 1
    2c80:	93 e0       	ldi	r25, 0x03	; 3
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2c82:	81 91       	ld	r24, Z+
  asm volatile (
    2c84:	de 01       	movw	r26, r28
    2c86:	08 2e       	mov	r0, r24
    2c88:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
    2c8c:	21 96       	adiw	r28, 0x01	; 1
    2c8e:	91 50       	subi	r25, 0x01	; 1
    2c90:	97 ff       	sbrs	r25, 7
    2c92:	f7 cf       	rjmp	.-18     	; 0x2c82 <PM_InterpretAVRISPPacket+0x294>
    2c94:	80 91 66 02 	lds	r24, 0x0266
    2c98:	90 91 67 02 	lds	r25, 0x0267
    2c9c:	01 96       	adiw	r24, 0x01	; 1
    2c9e:	90 93 67 02 	sts	0x0267, r25
    2ca2:	80 93 66 02 	sts	0x0266, r24
    2ca6:	10 92 4c 01 	sts	0x014C, r1
    2caa:	10 92 4d 01 	sts	0x014D, r1
    2cae:	e2 c0       	rjmp	.+452    	; 0x2e74 <PM_InterpretAVRISPPacket+0x486>
    2cb0:	82 e0       	ldi	r24, 0x02	; 2
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	90 93 48 01 	sts	0x0148, r25
    2cb8:	80 93 47 01 	sts	0x0147, r24
    2cbc:	80 91 60 02 	lds	r24, 0x0260
    2cc0:	81 30       	cpi	r24, 0x01	; 1
    2cc2:	f9 f0       	breq	.+62     	; 0x2d02 <PM_InterpretAVRISPPacket+0x314>
    2cc4:	43 31       	cpi	r20, 0x13	; 19
    2cc6:	21 f4       	brne	.+8      	; 0x2cd0 <PM_InterpretAVRISPPacket+0x2e2>
    2cc8:	c2 e0       	ldi	r28, 0x02	; 2
    2cca:	d0 e0       	ldi	r29, 0x00	; 0
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	03 c0       	rjmp	.+6      	; 0x2cd6 <PM_InterpretAVRISPPacket+0x2e8>
    2cd0:	cb e0       	ldi	r28, 0x0B	; 11
    2cd2:	d0 e0       	ldi	r29, 0x00	; 0
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	0e 94 19 14 	call	0x2832 <PM_SetupDFAddressCounters>
    2cda:	80 91 66 02 	lds	r24, 0x0266
    2cde:	90 91 67 02 	lds	r25, 0x0267
    2ce2:	0e 94 45 0a 	call	0x148a <DF_BufferWriteEnable>
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	80 93 60 02 	sts	0x0260, r24
    2cec:	ec e4       	ldi	r30, 0x4C	; 76
    2cee:	f1 e0       	ldi	r31, 0x01	; 1
    2cf0:	98 e0       	ldi	r25, 0x08	; 8
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2cf2:	81 91       	ld	r24, Z+
  asm volatile (
    2cf4:	de 01       	movw	r26, r28
    2cf6:	08 2e       	mov	r0, r24
    2cf8:	0e 94 68 1a 	call	0x34d0 <__eeprom_write_byte_1F2021>
    2cfc:	91 50       	subi	r25, 0x01	; 1
    2cfe:	97 ff       	sbrs	r25, 7
    2d00:	f8 cf       	rjmp	.-16     	; 0x2cf2 <PM_InterpretAVRISPPacket+0x304>
    2d02:	80 91 4c 01 	lds	r24, 0x014C
    2d06:	99 27       	eor	r25, r25
    2d08:	d8 2f       	mov	r29, r24
    2d0a:	cc 27       	eor	r28, r28
    2d0c:	80 91 4d 01 	lds	r24, 0x014D
    2d10:	99 27       	eor	r25, r25
    2d12:	c8 2b       	or	r28, r24
    2d14:	d9 2b       	or	r29, r25
    2d16:	00 e0       	ldi	r16, 0x00	; 0
    2d18:	10 e0       	ldi	r17, 0x00	; 0
    2d1a:	0c 17       	cp	r16, r28
    2d1c:	1d 07       	cpc	r17, r29
    2d1e:	70 f4       	brcc	.+28     	; 0x2d3c <PM_InterpretAVRISPPacket+0x34e>
    2d20:	55 e5       	ldi	r21, 0x55	; 85
    2d22:	e5 2e       	mov	r14, r21
    2d24:	51 e0       	ldi	r21, 0x01	; 1
    2d26:	f5 2e       	mov	r15, r21
    2d28:	f7 01       	movw	r30, r14
    2d2a:	81 91       	ld	r24, Z+
    2d2c:	7f 01       	movw	r14, r30
    2d2e:	0e 94 5b 14 	call	0x28b6 <PM_StoreProgramByte>
    2d32:	0f 5f       	subi	r16, 0xFF	; 255
    2d34:	1f 4f       	sbci	r17, 0xFF	; 255
    2d36:	0c 17       	cp	r16, r28
    2d38:	1d 07       	cpc	r17, r29
    2d3a:	b0 f3       	brcs	.-20     	; 0x2d28 <PM_InterpretAVRISPPacket+0x33a>
    2d3c:	20 91 5e 02 	lds	r18, 0x025E
    2d40:	30 91 5f 02 	lds	r19, 0x025F
    2d44:	37 fd       	sbrc	r19, 7
    2d46:	1c c0       	rjmp	.+56     	; 0x2d80 <PM_InterpretAVRISPPacket+0x392>
    2d48:	80 91 4e 01 	lds	r24, 0x014E
    2d4c:	87 ff       	sbrs	r24, 7
    2d4e:	18 c0       	rjmp	.+48     	; 0x2d80 <PM_InterpretAVRISPPacket+0x392>
    2d50:	21 15       	cp	r18, r1
    2d52:	31 05       	cpc	r19, r1
    2d54:	a9 f0       	breq	.+42     	; 0x2d80 <PM_InterpretAVRISPPacket+0x392>
    Write a word \c value to EEPROM address \c addr. */

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
    2d56:	80 91 61 02 	lds	r24, 0x0261
    2d5a:	81 30       	cpi	r24, 0x01	; 1
    2d5c:	19 f4       	brne	.+6      	; 0x2d64 <PM_InterpretAVRISPPacket+0x376>
    2d5e:	a1 e8       	ldi	r26, 0x81	; 129
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <PM_InterpretAVRISPPacket+0x37a>
    2d64:	a3 e8       	ldi	r26, 0x83	; 131
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
  asm volatile (
    2d68:	09 01       	movw	r0, r18
    2d6a:	0e 94 74 1a 	call	0x34e8 <__eeprom_write_word_1F2021>
    2d6e:	80 91 5e 02 	lds	r24, 0x025E
    2d72:	90 91 5f 02 	lds	r25, 0x025F
    2d76:	90 68       	ori	r25, 0x80	; 128
    2d78:	90 93 5f 02 	sts	0x025F, r25
    2d7c:	80 93 5e 02 	sts	0x025E, r24
    2d80:	10 92 4c 01 	sts	0x014C, r1
    2d84:	77 c0       	rjmp	.+238    	; 0x2e74 <PM_InterpretAVRISPPacket+0x486>
    2d86:	80 91 60 02 	lds	r24, 0x0260
    2d8a:	82 30       	cpi	r24, 0x02	; 2
    2d8c:	01 f1       	breq	.+64     	; 0x2dce <PM_InterpretAVRISPPacket+0x3e0>
    2d8e:	0e 94 90 14 	call	0x2920 <PM_CheckEndOfFuseLockData>
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	80 91 4b 01 	lds	r24, 0x014B
    2d98:	84 31       	cpi	r24, 0x14	; 20
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <PM_InterpretAVRISPPacket+0x3b0>
    2d9c:	91 e0       	ldi	r25, 0x01	; 1
    2d9e:	89 2f       	mov	r24, r25
    2da0:	0e 94 19 14 	call	0x2832 <PM_SetupDFAddressCounters>
    2da4:	60 91 66 02 	lds	r22, 0x0266
    2da8:	70 91 67 02 	lds	r23, 0x0267
    2dac:	80 91 6d 02 	lds	r24, 0x026D
    2db0:	90 91 6e 02 	lds	r25, 0x026E
    2db4:	0e 94 09 0a 	call	0x1412 <DF_ContinuousReadEnable>
    2db8:	82 e0       	ldi	r24, 0x02	; 2
    2dba:	80 93 60 02 	sts	0x0260, r24
    2dbe:	10 92 42 01 	sts	0x0142, r1
    2dc2:	10 92 43 01 	sts	0x0143, r1
    2dc6:	10 92 44 01 	sts	0x0144, r1
    2dca:	10 92 45 01 	sts	0x0145, r1
    2dce:	80 91 4c 01 	lds	r24, 0x014C
    2dd2:	99 27       	eor	r25, r25
    2dd4:	d8 2f       	mov	r29, r24
    2dd6:	cc 27       	eor	r28, r28
    2dd8:	80 91 4d 01 	lds	r24, 0x014D
    2ddc:	99 27       	eor	r25, r25
    2dde:	c8 2b       	or	r28, r24
    2de0:	d9 2b       	or	r29, r25
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	80 91 4b 01 	lds	r24, 0x014B
    2de8:	84 31       	cpi	r24, 0x14	; 20
    2dea:	09 f4       	brne	.+2      	; 0x2dee <PM_InterpretAVRISPPacket+0x400>
    2dec:	91 e0       	ldi	r25, 0x01	; 1
    2dee:	89 2f       	mov	r24, r25
    2df0:	0e 94 e2 13 	call	0x27c4 <PM_GetStoredDataSize>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	7c 01       	movw	r14, r24
    2dfa:	00 e0       	ldi	r16, 0x00	; 0
    2dfc:	10 e0       	ldi	r17, 0x00	; 0
    2dfe:	0c 17       	cp	r16, r28
    2e00:	1d 07       	cpc	r17, r29
    2e02:	18 f5       	brcc	.+70     	; 0x2e4a <PM_InterpretAVRISPPacket+0x45c>
    2e04:	3d e4       	ldi	r19, 0x4D	; 77
    2e06:	c3 2e       	mov	r12, r19
    2e08:	31 e0       	ldi	r19, 0x01	; 1
    2e0a:	d3 2e       	mov	r13, r19
    2e0c:	97 01       	movw	r18, r14
    2e0e:	44 27       	eor	r20, r20
    2e10:	55 27       	eor	r21, r21
    2e12:	80 91 42 01 	lds	r24, 0x0142
    2e16:	90 91 43 01 	lds	r25, 0x0143
    2e1a:	a0 91 44 01 	lds	r26, 0x0144
    2e1e:	b0 91 45 01 	lds	r27, 0x0145
    2e22:	82 17       	cp	r24, r18
    2e24:	93 07       	cpc	r25, r19
    2e26:	a4 07       	cpc	r26, r20
    2e28:	b5 07       	cpc	r27, r21
    2e2a:	20 f4       	brcc	.+8      	; 0x2e34 <PM_InterpretAVRISPPacket+0x446>
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    2e32:	01 c0       	rjmp	.+2      	; 0x2e36 <PM_InterpretAVRISPPacket+0x448>
    2e34:	8f ef       	ldi	r24, 0xFF	; 255
    2e36:	f6 01       	movw	r30, r12
    2e38:	81 93       	st	Z+, r24
    2e3a:	6f 01       	movw	r12, r30
    2e3c:	0e 94 3b 0f 	call	0x1e76 <V2P_IncrementCurrAddress>
    2e40:	0f 5f       	subi	r16, 0xFF	; 255
    2e42:	1f 4f       	sbci	r17, 0xFF	; 255
    2e44:	0c 17       	cp	r16, r28
    2e46:	1d 07       	cpc	r17, r29
    2e48:	08 f3       	brcs	.-62     	; 0x2e0c <PM_InterpretAVRISPPacket+0x41e>
    2e4a:	23 96       	adiw	r28, 0x03	; 3
    2e4c:	d0 93 48 01 	sts	0x0148, r29
    2e50:	c0 93 47 01 	sts	0x0147, r28
    2e54:	23 97       	sbiw	r28, 0x03	; 3
    2e56:	10 92 4c 01 	sts	0x014C, r1
    2e5a:	c5 5b       	subi	r28, 0xB5	; 181
    2e5c:	de 4f       	sbci	r29, 0xFE	; 254
    2e5e:	1a 82       	std	Y+2, r1	; 0x02
    2e60:	09 c0       	rjmp	.+18     	; 0x2e74 <PM_InterpretAVRISPPacket+0x486>
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	90 93 48 01 	sts	0x0148, r25
    2e6a:	80 93 47 01 	sts	0x0147, r24
    2e6e:	89 ec       	ldi	r24, 0xC9	; 201
    2e70:	80 93 4c 01 	sts	0x014C, r24
    2e74:	0e 94 5a 0e 	call	0x1cb4 <V2P_SendPacket>
    2e78:	df 91       	pop	r29
    2e7a:	cf 91       	pop	r28
    2e7c:	1f 91       	pop	r17
    2e7e:	0f 91       	pop	r16
    2e80:	ff 90       	pop	r15
    2e82:	ef 90       	pop	r14
    2e84:	df 90       	pop	r13
    2e86:	cf 90       	pop	r12
    2e88:	08 95       	ret

00002e8a <PM_SendFuseLockBytes>:
	{
		// CurrBuffByte stores the total number of fuse/lock bytes written in this case:
		eeprom_write_byte(((MemoryType == TYPE_FUSE)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes), CurrBuffByte);
	}
}

void PM_SendFuseLockBytes(const uint8_t Type)
{
    2e8a:	0f 93       	push	r16
    2e8c:	1f 93       	push	r17
    2e8e:	cf 93       	push	r28
    2e90:	df 93       	push	r29
	uint8_t* EEPROMAddress;
	uint8_t  TotalBytes;

	if (Type == TYPE_FUSE)
    2e92:	82 30       	cpi	r24, 0x02	; 2
    2e94:	49 f4       	brne	.+18     	; 0x2ea8 <PM_SendFuseLockBytes+0x1e>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2e96:	af e2       	ldi	r26, 0x2F	; 47
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2e9a:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
    2e9e:	80 2d       	mov	r24, r0
    2ea0:	18 2f       	mov	r17, r24
	{
		TotalBytes    = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
		EEPROMAddress = EEPROMVars.FuseBytes;
    2ea2:	c1 e3       	ldi	r28, 0x31	; 49
    2ea4:	d0 e0       	ldi	r29, 0x00	; 0
    2ea6:	08 c0       	rjmp	.+16     	; 0x2eb8 <PM_SendFuseLockBytes+0x2e>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2ea8:	a0 e3       	ldi	r26, 0x30	; 48
    2eaa:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2eac:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
    2eb0:	80 2d       	mov	r24, r0
    2eb2:	18 2f       	mov	r17, r24
	}
	else
	{
		TotalBytes    = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
		EEPROMAddress = EEPROMVars.LockBytes;	
    2eb4:	c9 e5       	ldi	r28, 0x59	; 89
    2eb6:	d0 e0       	ldi	r29, 0x00	; 0
	}

	while (TotalBytes--)                              // Write each of the fuse/lock bytes stored in memory to the slave AVR
	{
		for (uint8_t CommandByte = 0; CommandByte < 4; CommandByte++)      // Write each individual command byte
		{
			USI_SPITransmit(eeprom_read_byte(EEPROMAddress));
			EEPROMAddress++;
		}
		
		// Add some delay before programming next byte, if there is one:
		if (TotalBytes)
		  MAIN_Delay10MS(5);
    2eb8:	11 50       	subi	r17, 0x01	; 1
    2eba:	1f 3f       	cpi	r17, 0xFF	; 255
    2ebc:	91 f0       	breq	.+36     	; 0x2ee2 <PM_SendFuseLockBytes+0x58>
    2ebe:	03 e0       	ldi	r16, 0x03	; 3
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2ec0:	de 01       	movw	r26, r28
    2ec2:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
    2ec6:	80 2d       	mov	r24, r0
    2ec8:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    2ecc:	21 96       	adiw	r28, 0x01	; 1
    2ece:	01 50       	subi	r16, 0x01	; 1
    2ed0:	07 ff       	sbrs	r16, 7
    2ed2:	f6 cf       	rjmp	.-20     	; 0x2ec0 <PM_SendFuseLockBytes+0x36>
    2ed4:	11 23       	and	r17, r17
    2ed6:	19 f0       	breq	.+6      	; 0x2ede <PM_SendFuseLockBytes+0x54>
    2ed8:	85 e0       	ldi	r24, 0x05	; 5
    2eda:	0e 94 31 02 	call	0x462 <MAIN_Delay10MS>
    2ede:	11 50       	subi	r17, 0x01	; 1
    2ee0:	70 f7       	brcc	.-36     	; 0x2ebe <PM_SendFuseLockBytes+0x34>
    2ee2:	df 91       	pop	r29
    2ee4:	cf 91       	pop	r28
    2ee6:	1f 91       	pop	r17
    2ee8:	0f 91       	pop	r16
    2eea:	08 95       	ret

00002eec <PM_SendEraseCommand>:
	}
}

void PM_SendEraseCommand(void)
{			
    2eec:	1f 93       	push	r17
    2eee:	cf 93       	push	r28
    2ef0:	df 93       	push	r29
    2ef2:	c2 e0       	ldi	r28, 0x02	; 2
    2ef4:	d0 e0       	ldi	r29, 0x00	; 0
    2ef6:	13 e0       	ldi	r17, 0x03	; 3
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2ef8:	de 01       	movw	r26, r28
    2efa:	ab 5e       	subi	r26, 0xEB	; 235
    2efc:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2efe:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
    2f02:	80 2d       	mov	r24, r0
    2f04:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
	for (uint8_t B = 2; B < 6 ; B++)                  // Read out the erase chip command bytes
    2f08:	11 50       	subi	r17, 0x01	; 1
    2f0a:	21 96       	adiw	r28, 0x01	; 1
    2f0c:	17 ff       	sbrs	r17, 7
    2f0e:	f4 cf       	rjmp	.-24     	; 0x2ef8 <PM_SendEraseCommand+0xc>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2f10:	a6 e1       	ldi	r26, 0x16	; 22
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2f14:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
    2f18:	80 2d       	mov	r24, r0
    2f1a:	88 23       	and	r24, r24
    2f1c:	59 f0       	breq	.+22     	; 0x2f34 <PM_SendEraseCommand+0x48>
	  USI_SPITransmit(eeprom_read_byte(&EEPROMVars.EraseChip[B])); // Send the erase chip commands
			
	if (eeprom_read_byte(&EEPROMVars.EraseChip[1]))   // Value of 1 indicates a busy flag test
	{
		do
			USI_SPITransmitWord(0xF000);
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	90 ef       	ldi	r25, 0xF0	; 240
    2f22:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	0e 94 b0 09 	call	0x1360 <USI_SPITransmitWord>
    2f2e:	80 fd       	sbrc	r24, 0
    2f30:	f6 cf       	rjmp	.-20     	; 0x2f1e <PM_SendEraseCommand+0x32>
    2f32:	07 c0       	rjmp	.+14     	; 0x2f42 <PM_SendEraseCommand+0x56>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2f34:	a5 e1       	ldi	r26, 0x15	; 21
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2f38:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
    2f3c:	80 2d       	mov	r24, r0
    2f3e:	0e 94 08 03 	call	0x610 <MAIN_Delay1MS>
    2f42:	df 91       	pop	r29
    2f44:	cf 91       	pop	r28
    2f46:	1f 91       	pop	r17
    2f48:	08 95       	ret

00002f4a <PM_CreateProgrammingPackets>:
		while (USI_SPITransmitWord(0x0000) & 0x01);
	}
	else                                              // Cleared flag means use a predefined delay
	{		
		MAIN_Delay1MS(eeprom_read_byte(&EEPROMVars.EraseChip[0])); // Wait the erase delay
	}
}

void PM_CreateProgrammingPackets(const uint8_t Type)
{			
    2f4a:	3f 92       	push	r3
    2f4c:	4f 92       	push	r4
    2f4e:	5f 92       	push	r5
    2f50:	6f 92       	push	r6
    2f52:	7f 92       	push	r7
    2f54:	8f 92       	push	r8
    2f56:	9f 92       	push	r9
    2f58:	af 92       	push	r10
    2f5a:	bf 92       	push	r11
    2f5c:	cf 92       	push	r12
    2f5e:	df 92       	push	r13
    2f60:	ef 92       	push	r14
    2f62:	ff 92       	push	r15
    2f64:	0f 93       	push	r16
    2f66:	1f 93       	push	r17
    2f68:	cf 93       	push	r28
    2f6a:	df 93       	push	r29
    2f6c:	c8 2f       	mov	r28, r24
	uint32_t BytesRead       = 0;
    2f6e:	aa 24       	eor	r10, r10
    2f70:	bb 24       	eor	r11, r11
    2f72:	65 01       	movw	r12, r10
	uint32_t BytesToRead     = PM_GetStoredDataSize(Type);      // Get the byte size of the stored program
    2f74:	0e 94 e2 13 	call	0x27c4 <PM_GetStoredDataSize>
    2f78:	2b 01       	movw	r4, r22
    2f7a:	3c 01       	movw	r6, r24
	uint16_t BytesPerProgram;
	uint16_t PageLength;
	uint8_t* EEPROMAddress;
	uint8_t  ContinuedPage   = FALSE;
    2f7c:	33 24       	eor	r3, r3
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \c addr. */
uint16_t
eeprom_read_word (const uint16_t *addr)
{
    2f7e:	c1 30       	cpi	r28, 0x01	; 1
    2f80:	19 f4       	brne	.+6      	; 0x2f88 <PM_CreateProgrammingPackets+0x3e>
    2f82:	a1 e8       	ldi	r26, 0x81	; 129
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <PM_CreateProgrammingPackets+0x42>
    2f88:	a3 e8       	ldi	r26, 0x83	; 131
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
  uint16_t result;

  asm ( 
    2f8c:	0e 94 63 1a 	call	0x34c6 <__eeprom_read_word_1F2021>
    2f90:	4f 01       	movw	r8, r30

	PageLength  = eeprom_read_word((Type == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength);
	CurrAddress = 0;
    2f92:	10 92 42 01 	sts	0x0142, r1
    2f96:	10 92 43 01 	sts	0x0143, r1
    2f9a:	10 92 44 01 	sts	0x0144, r1
    2f9e:	10 92 45 01 	sts	0x0145, r1

	if (Type == TYPE_FLASH)
    2fa2:	c1 30       	cpi	r28, 0x01	; 1
    2fa4:	49 f4       	brne	.+18     	; 0x2fb8 <PM_CreateProgrammingPackets+0x6e>
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram;       // Set the EEPROM pointer to the write flash command bytes location
    2fa6:	c2 e0       	ldi	r28, 0x02	; 2
    2fa8:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(0, 0);
    2faa:	60 e0       	ldi	r22, 0x00	; 0
    2fac:	70 e0       	ldi	r23, 0x00	; 0
    2fae:	cb 01       	movw	r24, r22
    2fb0:	0e 94 09 0a 	call	0x1412 <DF_ContinuousReadEnable>
		PacketBytes[0] = AICB_CMD_PROGRAM_FLASH_ISP;
    2fb4:	83 e1       	ldi	r24, 0x13	; 19
    2fb6:	09 c0       	rjmp	.+18     	; 0x2fca <PM_CreateProgrammingPackets+0x80>
	}
	else
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;        // Set the EEPROM pointer to the write EEPROM command bytes location
    2fb8:	cb e0       	ldi	r28, 0x0B	; 11
    2fba:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(PM_EEPROM_OFFSET / DF_INTERNALDF_BUFFBYTES, PM_EEPROM_OFFSET % DF_INTERNALDF_BUFFBYTES); // Start read from the EEPROM offset location
    2fbc:	60 ee       	ldi	r22, 0xE0	; 224
    2fbe:	70 e0       	ldi	r23, 0x00	; 0
    2fc0:	84 ee       	ldi	r24, 0xE4	; 228
    2fc2:	93 e0       	ldi	r25, 0x03	; 3
    2fc4:	0e 94 09 0a 	call	0x1412 <DF_ContinuousReadEnable>
		PacketBytes[0] = AICB_CMD_PROGRAM_EEPROM_ISP;
    2fc8:	85 e1       	ldi	r24, 0x15	; 21
    2fca:	80 93 4b 01 	sts	0x014B, r24
    2fce:	ec e4       	ldi	r30, 0x4C	; 76
    2fd0:	f1 e0       	ldi	r31, 0x01	; 1
    2fd2:	98 e0       	ldi	r25, 0x08	; 8
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2fd4:	de 01       	movw	r26, r28
    2fd6:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
    2fda:	80 2d       	mov	r24, r0
    2fdc:	81 93       	st	Z+, r24
	}

	for (uint8_t B = 1; B <= 9 ; B++)                 // Load in the write data command bytes
	{
		PacketBytes[B] = eeprom_read_byte(EEPROMAddress); // Synthesise a write packet header
		EEPROMAddress++;                               // Increment the EEPROM location counter
    2fde:	21 96       	adiw	r28, 0x01	; 1
    2fe0:	91 50       	subi	r25, 0x01	; 1
    2fe2:	97 ff       	sbrs	r25, 7
    2fe4:	f7 cf       	rjmp	.-18     	; 0x2fd4 <PM_CreateProgrammingPackets+0x8a>
	}
	
	BytesPerProgram = ((uint16_t)PacketBytes[1] << 8)
    2fe6:	80 91 4c 01 	lds	r24, 0x014C
    2fea:	99 27       	eor	r25, r25
    2fec:	d8 2f       	mov	r29, r24
    2fee:	cc 27       	eor	r28, r28
    2ff0:	80 91 4d 01 	lds	r24, 0x014D
    2ff4:	99 27       	eor	r25, r25
    2ff6:	c8 2b       	or	r28, r24
    2ff8:	d9 2b       	or	r29, r25
	                | PacketBytes[2];

	while (BytesRead < BytesToRead)
	{
		if (PacketBytes[3] & ISPCC_PROG_MODE_PAGE)
		{
			if (PageLength > 160) // Max 160 bytes at a time
			{
				if (!(ContinuedPage))                      // Start of a new page, program in the first 150 bytes
				{
					BytesPerProgram = 160;
					PacketBytes[3] &= ~ISPCC_PROG_MODE_PAGEDONE;		
					ContinuedPage = TRUE;
				}
				else                                       // Middle of a page, program in the remainder
				{
					BytesPerProgram = PageLength - 160;
					PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
					ContinuedPage = FALSE;
				}
				
				for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page				

				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);
				PacketBytes[2] = (uint8_t)(BytesPerProgram);

				BytesRead += BytesPerProgram;                         // Increment the counter
			}
			else
			{
				for (uint16_t LoadB = 0; LoadB < PageLength; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page
			
				PacketBytes[1]  = (uint8_t)(PageLength >> 8);
				PacketBytes[2]  = (uint8_t)(PageLength);
				PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;

				BytesRead += PageLength;                            // Increment the counter
			}
		}
		else
		{
			if ((BytesRead + BytesPerProgram) > BytesToRead)        // Less than a whole BytesPerProgram left of data to write
			{
				BytesPerProgram = BytesToRead - BytesRead;          // Next lot of bytes will be the remaining data length
				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);   // \. Save the new length
				PacketBytes[2] = (uint8_t)(BytesPerProgram);        // /  into the data packet
			}

			for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
				PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);    // Load in the page
			
			BytesRead += BytesPerProgram;                           // Increment the counter
		}
	
		if (!(BytesRead & 0xFFFF) && (BytesRead & 0x00FF0000))      // Extended address required
		{
			USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);            // Load extended address command
			USI_SPITransmit(0x00);
			USI_SPITransmit((BytesRead & 0x00FF0000) >> 16);        // The 3rd byte of the long holds the extended address
			USI_SPITransmit(0x00);
		}

		ISPCC_ProgramChip();                                        // Start the program cycle
    2ffa:	a4 14       	cp	r10, r4
    2ffc:	b5 04       	cpc	r11, r5
    2ffe:	c6 04       	cpc	r12, r6
    3000:	d7 04       	cpc	r13, r7
    3002:	08 f0       	brcs	.+2      	; 0x3006 <PM_CreateProgrammingPackets+0xbc>
    3004:	b2 c0       	rjmp	.+356    	; 0x316a <PM_CreateProgrammingPackets+0x220>
    3006:	20 91 4e 01 	lds	r18, 0x014E
    300a:	82 2f       	mov	r24, r18
    300c:	99 27       	eor	r25, r25
    300e:	ac 01       	movw	r20, r24
    3010:	41 70       	andi	r20, 0x01	; 1
    3012:	50 70       	andi	r21, 0x00	; 0
    3014:	80 ff       	sbrs	r24, 0
    3016:	53 c0       	rjmp	.+166    	; 0x30be <PM_CreateProgrammingPackets+0x174>
    3018:	f1 ea       	ldi	r31, 0xA1	; 161
    301a:	8f 16       	cp	r8, r31
    301c:	91 04       	cpc	r9, r1
    301e:	60 f1       	brcs	.+88     	; 0x3078 <PM_CreateProgrammingPackets+0x12e>
    3020:	33 20       	and	r3, r3
    3022:	41 f4       	brne	.+16     	; 0x3034 <PM_CreateProgrammingPackets+0xea>
    3024:	c0 ea       	ldi	r28, 0xA0	; 160
    3026:	d0 e0       	ldi	r29, 0x00	; 0
    3028:	2f 77       	andi	r18, 0x7F	; 127
    302a:	20 93 4e 01 	sts	0x014E, r18
    302e:	31 e0       	ldi	r19, 0x01	; 1
    3030:	33 2e       	mov	r3, r19
    3032:	07 c0       	rjmp	.+14     	; 0x3042 <PM_CreateProgrammingPackets+0xf8>
    3034:	e4 01       	movw	r28, r8
    3036:	c0 5a       	subi	r28, 0xA0	; 160
    3038:	d0 40       	sbci	r29, 0x00	; 0
    303a:	20 68       	ori	r18, 0x80	; 128
    303c:	20 93 4e 01 	sts	0x014E, r18
    3040:	33 24       	eor	r3, r3
    3042:	00 e0       	ldi	r16, 0x00	; 0
    3044:	10 e0       	ldi	r17, 0x00	; 0
    3046:	0c 17       	cp	r16, r28
    3048:	1d 07       	cpc	r17, r29
    304a:	78 f4       	brcc	.+30     	; 0x306a <PM_CreateProgrammingPackets+0x120>
    304c:	25 e5       	ldi	r18, 0x55	; 85
    304e:	e2 2e       	mov	r14, r18
    3050:	21 e0       	ldi	r18, 0x01	; 1
    3052:	f2 2e       	mov	r15, r18
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    305a:	f7 01       	movw	r30, r14
    305c:	81 93       	st	Z+, r24
    305e:	7f 01       	movw	r14, r30
    3060:	0f 5f       	subi	r16, 0xFF	; 255
    3062:	1f 4f       	sbci	r17, 0xFF	; 255
    3064:	0c 17       	cp	r16, r28
    3066:	1d 07       	cpc	r17, r29
    3068:	a8 f3       	brcs	.-22     	; 0x3054 <PM_CreateProgrammingPackets+0x10a>
    306a:	8d 2f       	mov	r24, r29
    306c:	99 27       	eor	r25, r25
    306e:	80 93 4c 01 	sts	0x014C, r24
    3072:	c0 93 4d 01 	sts	0x014D, r28
    3076:	4b c0       	rjmp	.+150    	; 0x310e <PM_CreateProgrammingPackets+0x1c4>
    3078:	00 e0       	ldi	r16, 0x00	; 0
    307a:	10 e0       	ldi	r17, 0x00	; 0
    307c:	08 15       	cp	r16, r8
    307e:	19 05       	cpc	r17, r9
    3080:	78 f4       	brcc	.+30     	; 0x30a0 <PM_CreateProgrammingPackets+0x156>
    3082:	85 e5       	ldi	r24, 0x55	; 85
    3084:	e8 2e       	mov	r14, r24
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	f8 2e       	mov	r15, r24
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    3090:	f7 01       	movw	r30, r14
    3092:	81 93       	st	Z+, r24
    3094:	7f 01       	movw	r14, r30
    3096:	0f 5f       	subi	r16, 0xFF	; 255
    3098:	1f 4f       	sbci	r17, 0xFF	; 255
    309a:	08 15       	cp	r16, r8
    309c:	19 05       	cpc	r17, r9
    309e:	a8 f3       	brcs	.-22     	; 0x308a <PM_CreateProgrammingPackets+0x140>
    30a0:	89 2d       	mov	r24, r9
    30a2:	99 27       	eor	r25, r25
    30a4:	80 93 4c 01 	sts	0x014C, r24
    30a8:	80 92 4d 01 	sts	0x014D, r8
    30ac:	80 91 4e 01 	lds	r24, 0x014E
    30b0:	80 68       	ori	r24, 0x80	; 128
    30b2:	80 93 4e 01 	sts	0x014E, r24
    30b6:	c4 01       	movw	r24, r8
    30b8:	aa 27       	eor	r26, r26
    30ba:	bb 27       	eor	r27, r27
    30bc:	2b c0       	rjmp	.+86     	; 0x3114 <PM_CreateProgrammingPackets+0x1ca>
    30be:	ce 01       	movw	r24, r28
    30c0:	aa 27       	eor	r26, r26
    30c2:	bb 27       	eor	r27, r27
    30c4:	8a 0d       	add	r24, r10
    30c6:	9b 1d       	adc	r25, r11
    30c8:	ac 1d       	adc	r26, r12
    30ca:	bd 1d       	adc	r27, r13
    30cc:	48 16       	cp	r4, r24
    30ce:	59 06       	cpc	r5, r25
    30d0:	6a 06       	cpc	r6, r26
    30d2:	7b 06       	cpc	r7, r27
    30d4:	48 f4       	brcc	.+18     	; 0x30e8 <PM_CreateProgrammingPackets+0x19e>
    30d6:	e2 01       	movw	r28, r4
    30d8:	ca 19       	sub	r28, r10
    30da:	db 09       	sbc	r29, r11
    30dc:	8d 2f       	mov	r24, r29
    30de:	99 27       	eor	r25, r25
    30e0:	80 93 4c 01 	sts	0x014C, r24
    30e4:	c0 93 4d 01 	sts	0x014D, r28
    30e8:	8a 01       	movw	r16, r20
    30ea:	4c 17       	cp	r20, r28
    30ec:	5d 07       	cpc	r21, r29
    30ee:	78 f4       	brcc	.+30     	; 0x310e <PM_CreateProgrammingPackets+0x1c4>
    30f0:	f5 e5       	ldi	r31, 0x55	; 85
    30f2:	ef 2e       	mov	r14, r31
    30f4:	f1 e0       	ldi	r31, 0x01	; 1
    30f6:	ff 2e       	mov	r15, r31
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    30fe:	f7 01       	movw	r30, r14
    3100:	81 93       	st	Z+, r24
    3102:	7f 01       	movw	r14, r30
    3104:	0f 5f       	subi	r16, 0xFF	; 255
    3106:	1f 4f       	sbci	r17, 0xFF	; 255
    3108:	0c 17       	cp	r16, r28
    310a:	1d 07       	cpc	r17, r29
    310c:	a8 f3       	brcs	.-22     	; 0x30f8 <PM_CreateProgrammingPackets+0x1ae>
    310e:	ce 01       	movw	r24, r28
    3110:	aa 27       	eor	r26, r26
    3112:	bb 27       	eor	r27, r27
    3114:	a8 0e       	add	r10, r24
    3116:	b9 1e       	adc	r11, r25
    3118:	ca 1e       	adc	r12, r26
    311a:	db 1e       	adc	r13, r27
    311c:	a1 14       	cp	r10, r1
    311e:	b1 04       	cpc	r11, r1
    3120:	e1 f4       	brne	.+56     	; 0x315a <PM_CreateProgrammingPackets+0x210>
    3122:	e1 2c       	mov	r14, r1
    3124:	f1 2c       	mov	r15, r1
    3126:	ef ef       	ldi	r30, 0xFF	; 255
    3128:	0e 2f       	mov	r16, r30
    312a:	11 2d       	mov	r17, r1
    312c:	ea 20       	and	r14, r10
    312e:	fb 20       	and	r15, r11
    3130:	0c 21       	and	r16, r12
    3132:	1d 21       	and	r17, r13
    3134:	e1 14       	cp	r14, r1
    3136:	f1 04       	cpc	r15, r1
    3138:	01 05       	cpc	r16, r1
    313a:	11 05       	cpc	r17, r1
    313c:	71 f0       	breq	.+28     	; 0x315a <PM_CreateProgrammingPackets+0x210>
    313e:	8d e4       	ldi	r24, 0x4D	; 77
    3140:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    314a:	c8 01       	movw	r24, r16
    314c:	aa 27       	eor	r26, r26
    314e:	bb 27       	eor	r27, r27
    3150:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	0e 94 9d 09 	call	0x133a <USI_SPITransmit>
    315a:	0e 94 8a 11 	call	0x2314 <ISPCC_ProgramChip>
    315e:	a4 14       	cp	r10, r4
    3160:	b5 04       	cpc	r11, r5
    3162:	c6 04       	cpc	r12, r6
    3164:	d7 04       	cpc	r13, r7
    3166:	08 f4       	brcc	.+2      	; 0x316a <PM_CreateProgrammingPackets+0x220>
    3168:	4e cf       	rjmp	.-356    	; 0x3006 <PM_CreateProgrammingPackets+0xbc>
    316a:	df 91       	pop	r29
    316c:	cf 91       	pop	r28
    316e:	1f 91       	pop	r17
    3170:	0f 91       	pop	r16
    3172:	ff 90       	pop	r15
    3174:	ef 90       	pop	r14
    3176:	df 90       	pop	r13
    3178:	cf 90       	pop	r12
    317a:	bf 90       	pop	r11
    317c:	af 90       	pop	r10
    317e:	9f 90       	pop	r9
    3180:	8f 90       	pop	r8
    3182:	7f 90       	pop	r7
    3184:	6f 90       	pop	r6
    3186:	5f 90       	pop	r5
    3188:	4f 90       	pop	r4
    318a:	3f 90       	pop	r3
    318c:	08 95       	ret

0000318e <PM_ShowStoredItemSizes>:
	}
}

void PM_ShowStoredItemSizes(void)
{
    318e:	1f 93       	push	r17
    3190:	cf 93       	push	r28
    3192:	df 93       	push	r29
    3194:	cd b7       	in	r28, 0x3d	; 61
    3196:	de b7       	in	r29, 0x3e	; 62
    3198:	2e 97       	sbiw	r28, 0x0e	; 14
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	f8 94       	cli
    319e:	de bf       	out	0x3e, r29	; 62
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[14];
	uint8_t ItemInfoIndex = 0;
    31a4:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t TempB;
	
	JoyStatus = 1;
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)                           // Joystick is in the non-center position
    31aa:	8e b3       	in	r24, 0x1e	; 30
    31ac:	88 23       	and	r24, r24
    31ae:	e9 f3       	breq	.-6      	; 0x31aa <PM_ShowStoredItemSizes+0x1c>
		{
			if (JoyStatus & JOY_UP)              // Previous item
    31b0:	f6 9b       	sbis	0x1e, 6	; 30
    31b2:	06 c0       	rjmp	.+12     	; 0x31c0 <PM_ShowStoredItemSizes+0x32>
				(ItemInfoIndex == 0)? ItemInfoIndex = 3 : ItemInfoIndex--;
    31b4:	11 23       	and	r17, r17
    31b6:	11 f4       	brne	.+4      	; 0x31bc <PM_ShowStoredItemSizes+0x2e>
    31b8:	13 e0       	ldi	r17, 0x03	; 3
    31ba:	0c c0       	rjmp	.+24     	; 0x31d4 <PM_ShowStoredItemSizes+0x46>
    31bc:	11 50       	subi	r17, 0x01	; 1
    31be:	0a c0       	rjmp	.+20     	; 0x31d4 <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_DOWN)      // Next item
    31c0:	f7 9b       	sbis	0x1e, 7	; 30
    31c2:	06 c0       	rjmp	.+12     	; 0x31d0 <PM_ShowStoredItemSizes+0x42>
				(ItemInfoIndex == 3)? ItemInfoIndex = 0 : ItemInfoIndex++;
    31c4:	13 30       	cpi	r17, 0x03	; 3
    31c6:	11 f4       	brne	.+4      	; 0x31cc <PM_ShowStoredItemSizes+0x3e>
    31c8:	10 e0       	ldi	r17, 0x00	; 0
    31ca:	04 c0       	rjmp	.+8      	; 0x31d4 <PM_ShowStoredItemSizes+0x46>
    31cc:	1f 5f       	subi	r17, 0xFF	; 255
    31ce:	02 c0       	rjmp	.+4      	; 0x31d4 <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_LEFT)
    31d0:	f2 99       	sbic	0x1e, 2	; 30
    31d2:	54 c0       	rjmp	.+168    	; 0x327c <PM_ShowStoredItemSizes+0xee>
				return;
		
			switch (ItemInfoIndex)
    31d4:	81 2f       	mov	r24, r17
    31d6:	99 27       	eor	r25, r25
    31d8:	81 30       	cpi	r24, 0x01	; 1
    31da:	91 05       	cpc	r25, r1
    31dc:	a1 f0       	breq	.+40     	; 0x3206 <PM_ShowStoredItemSizes+0x78>
    31de:	82 30       	cpi	r24, 0x02	; 2
    31e0:	91 05       	cpc	r25, r1
    31e2:	1c f4       	brge	.+6      	; 0x31ea <PM_ShowStoredItemSizes+0x5c>
    31e4:	89 2b       	or	r24, r25
    31e6:	39 f0       	breq	.+14     	; 0x31f6 <PM_ShowStoredItemSizes+0x68>
    31e8:	42 c0       	rjmp	.+132    	; 0x326e <PM_ShowStoredItemSizes+0xe0>
    31ea:	82 30       	cpi	r24, 0x02	; 2
    31ec:	91 05       	cpc	r25, r1
    31ee:	01 f1       	breq	.+64     	; 0x3230 <PM_ShowStoredItemSizes+0xa2>
    31f0:	03 97       	sbiw	r24, 0x03	; 3
    31f2:	39 f1       	breq	.+78     	; 0x3242 <PM_ShowStoredItemSizes+0xb4>
    31f4:	3c c0       	rjmp	.+120    	; 0x326e <PM_ShowStoredItemSizes+0xe0>
			{
				case 0:
					strcpy_P(Buffer, PSTR("DATA-"));
    31f6:	68 e0       	ldi	r22, 0x08	; 8
    31f8:	74 e0       	ldi	r23, 0x04	; 4
    31fa:	ce 01       	movw	r24, r28
    31fc:	01 96       	adiw	r24, 0x01	; 1
    31fe:	0e 94 1a 1a 	call	0x3434 <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_FLASH), &Buffer[5], 10);
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	07 c0       	rjmp	.+14     	; 0x3214 <PM_ShowStoredItemSizes+0x86>
					break;
				case 1:
					strcpy_P(Buffer, PSTR("EPRM-"));
    3206:	6e e0       	ldi	r22, 0x0E	; 14
    3208:	74 e0       	ldi	r23, 0x04	; 4
    320a:	ce 01       	movw	r24, r28
    320c:	01 96       	adiw	r24, 0x01	; 1
    320e:	0e 94 1a 1a 	call	0x3434 <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_EEPROM), &Buffer[5], 10);
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	0e 94 e2 13 	call	0x27c4 <PM_GetStoredDataSize>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	2a e0       	ldi	r18, 0x0A	; 10
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	ae 01       	movw	r20, r28
    3222:	4a 5f       	subi	r20, 0xFA	; 250
    3224:	5f 4f       	sbci	r21, 0xFF	; 255
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	0e 94 21 1a 	call	0x3442 <ultoa>
					break;
    322e:	1f c0       	rjmp	.+62     	; 0x326e <PM_ShowStoredItemSizes+0xe0>
				case 2:
					strcpy_P(Buffer, PSTR("FUSE-"));
    3230:	64 e1       	ldi	r22, 0x14	; 20
    3232:	74 e0       	ldi	r23, 0x04	; 4
    3234:	ce 01       	movw	r24, r28
    3236:	01 96       	adiw	r24, 0x01	; 1
    3238:	0e 94 1a 1a 	call	0x3434 <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    323c:	af e2       	ldi	r26, 0x2F	; 47
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	08 c0       	rjmp	.+16     	; 0x3252 <PM_ShowStoredItemSizes+0xc4>
					TempB = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);
					break;
				case 3:
					strcpy_P(Buffer, PSTR("LOCK-"));
    3242:	6a e1       	ldi	r22, 0x1A	; 26
    3244:	74 e0       	ldi	r23, 0x04	; 4
    3246:	ce 01       	movw	r24, r28
    3248:	01 96       	adiw	r24, 0x01	; 1
    324a:	0e 94 1a 1a 	call	0x3434 <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    324e:	a0 e3       	ldi	r26, 0x30	; 48
    3250:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    3252:	0e 94 56 1a 	call	0x34ac <__eeprom_read_byte_1F2021>
    3256:	80 2d       	mov	r24, r0
					TempB = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);		
    3258:	8f 3f       	cpi	r24, 0xFF	; 255
    325a:	11 f0       	breq	.+4      	; 0x3260 <PM_ShowStoredItemSizes+0xd2>
    325c:	99 27       	eor	r25, r25
    325e:	02 c0       	rjmp	.+4      	; 0x3264 <PM_ShowStoredItemSizes+0xd6>
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	be 01       	movw	r22, r28
    3266:	6a 5f       	subi	r22, 0xFA	; 250
    3268:	7f 4f       	sbci	r23, 0xFF	; 255
    326a:	0e 94 36 03 	call	0x66c <MAIN_IntToStr>
			}
	
			LCD_puts(Buffer);
    326e:	ce 01       	movw	r24, r28
    3270:	01 96       	adiw	r24, 0x01	; 1
    3272:	0e 94 19 08 	call	0x1032 <LCD_puts>

			MAIN_WaitForJoyRelease();
    3276:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
    327a:	97 cf       	rjmp	.-210    	; 0x31aa <PM_ShowStoredItemSizes+0x1c>
    327c:	2e 96       	adiw	r28, 0x0e	; 14
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	de bf       	out	0x3e, r29	; 62
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	cd bf       	out	0x3d, r28	; 61
    3288:	df 91       	pop	r29
    328a:	cf 91       	pop	r28
    328c:	1f 91       	pop	r17
    328e:	08 95       	ret

00003290 <TM_FindNextTag>:
	DF_EnableDataflash(FALSE);
}

void TM_FindNextTag(void)
{
    3290:	af 92       	push	r10
    3292:	bf 92       	push	r11
    3294:	df 92       	push	r13
    3296:	ef 92       	push	r14
    3298:	ff 92       	push	r15
    329a:	0f 93       	push	r16
    329c:	1f 93       	push	r17
    329e:	cf 93       	push	r28
    32a0:	df 93       	push	r29
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
    32a6:	69 97       	sbiw	r28, 0x19	; 25
    32a8:	0f b6       	in	r0, 0x3f	; 63
    32aa:	f8 94       	cli
    32ac:	de bf       	out	0x3e, r29	; 62
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Buffer[21];
	uint8_t  HeadBuff[4]      = BT_TAGHEADER;
    32b2:	80 e4       	ldi	r24, 0x40	; 64
    32b4:	8e 8b       	std	Y+22, r24	; 0x16
    32b6:	86 e1       	ldi	r24, 0x16	; 22
    32b8:	a8 2e       	mov	r10, r24
    32ba:	b1 2c       	mov	r11, r1
    32bc:	ac 0e       	add	r10, r28
    32be:	bd 1e       	adc	r11, r29
    32c0:	88 e2       	ldi	r24, 0x28	; 40
    32c2:	8f 8b       	std	Y+23, r24	; 0x17
    32c4:	83 e2       	ldi	r24, 0x23	; 35
    32c6:	88 8f       	std	Y+24, r24	; 0x18
    32c8:	89 e2       	ldi	r24, 0x29	; 41
    32ca:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t ProgDataSize     = PM_GetStoredDataSize(TYPE_FLASH);
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	0e 94 e2 13 	call	0x27c4 <PM_GetStoredDataSize>
    32d2:	7b 01       	movw	r14, r22
    32d4:	8c 01       	movw	r16, r24
	uint8_t  TotalOkHeadBytes = 0;
    32d6:	dd 24       	eor	r13, r13
	uint8_t  TagByte;
	uint8_t  BytesRead;
	
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);    // Orange = busy
    32d8:	81 b3       	in	r24, 0x11	; 17
    32da:	80 63       	ori	r24, 0x30	; 48
    32dc:	81 bb       	out	0x11, r24	; 17

	while (DFPos < ProgDataSize)
	{
		BytesRead = 1;
		
		if (SPI_SPITransmit(0x00) == HeadBuff[TotalOkHeadBytes++])
		{
			if (TotalOkHeadBytes == 4)
			{
				uint8_t HB;
			
				for (HB = 0; HB < 20; HB++)
				{
					TagByte = SPI_SPITransmit(0x00);
					Buffer[HB] = TagByte;
					
					if (TagByte == 0x00)
					  break;
				}
				
				Buffer[20] = '\0';             // Make sure string is null-terminated

				TagExists = TRUE;
				BytesRead = (HB + 2);

				LCD_puts(Buffer);
				MAIN_SETSTATUSLED(MAIN_STATLED_GREEN); // Green = ready
				return;
			}
		}
		else
		{
			TotalOkHeadBytes = 0;
		}

		DFPos += BytesRead;
    32de:	80 91 b4 02 	lds	r24, 0x02B4
    32e2:	90 91 b5 02 	lds	r25, 0x02B5
    32e6:	a0 91 b6 02 	lds	r26, 0x02B6
    32ea:	b0 91 b7 02 	lds	r27, 0x02B7
    32ee:	8e 15       	cp	r24, r14
    32f0:	9f 05       	cpc	r25, r15
    32f2:	a0 07       	cpc	r26, r16
    32f4:	b1 07       	cpc	r27, r17
    32f6:	08 f0       	brcs	.+2      	; 0x32fa <TM_FindNextTag+0x6a>
    32f8:	43 c0       	rjmp	.+134    	; 0x3380 <TM_FindNextTag+0xf0>
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    3300:	f5 01       	movw	r30, r10
    3302:	ed 0d       	add	r30, r13
    3304:	f1 1d       	adc	r31, r1
    3306:	d3 94       	inc	r13
    3308:	90 81       	ld	r25, Z
    330a:	89 17       	cp	r24, r25
    330c:	21 f5       	brne	.+72     	; 0x3356 <TM_FindNextTag+0xc6>
    330e:	84 e0       	ldi	r24, 0x04	; 4
    3310:	d8 16       	cp	r13, r24
    3312:	11 f5       	brne	.+68     	; 0x3358 <TM_FindNextTag+0xc8>
    3314:	ff 24       	eor	r15, r15
    3316:	00 e0       	ldi	r16, 0x00	; 0
    3318:	10 e0       	ldi	r17, 0x00	; 0
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	0e 94 38 09 	call	0x1270 <SPI_SPITransmit>
    3320:	9e 01       	movw	r18, r28
    3322:	2f 5f       	subi	r18, 0xFF	; 255
    3324:	3f 4f       	sbci	r19, 0xFF	; 255
    3326:	f8 01       	movw	r30, r16
    3328:	e2 0f       	add	r30, r18
    332a:	f3 1f       	adc	r31, r19
    332c:	80 83       	st	Z, r24
    332e:	88 23       	and	r24, r24
    3330:	31 f0       	breq	.+12     	; 0x333e <TM_FindNextTag+0xae>
    3332:	f3 94       	inc	r15
    3334:	0f 5f       	subi	r16, 0xFF	; 255
    3336:	1f 4f       	sbci	r17, 0xFF	; 255
    3338:	83 e1       	ldi	r24, 0x13	; 19
    333a:	8f 15       	cp	r24, r15
    333c:	70 f7       	brcc	.-36     	; 0x331a <TM_FindNextTag+0x8a>
    333e:	1d 8a       	std	Y+21, r1	; 0x15
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	80 93 62 02 	sts	0x0262, r24
    3346:	c9 01       	movw	r24, r18
    3348:	0e 94 19 08 	call	0x1032 <LCD_puts>
    334c:	81 b3       	in	r24, 0x11	; 17
    334e:	8f 7c       	andi	r24, 0xCF	; 207
    3350:	80 61       	ori	r24, 0x10	; 16
    3352:	81 bb       	out	0x11, r24	; 17
    3354:	31 c0       	rjmp	.+98     	; 0x33b8 <TM_FindNextTag+0x128>
    3356:	dd 24       	eor	r13, r13
    3358:	80 91 b4 02 	lds	r24, 0x02B4
    335c:	90 91 b5 02 	lds	r25, 0x02B5
    3360:	a0 91 b6 02 	lds	r26, 0x02B6
    3364:	b0 91 b7 02 	lds	r27, 0x02B7
    3368:	01 96       	adiw	r24, 0x01	; 1
    336a:	a1 1d       	adc	r26, r1
    336c:	b1 1d       	adc	r27, r1
    336e:	80 93 b4 02 	sts	0x02B4, r24
    3372:	90 93 b5 02 	sts	0x02B5, r25
    3376:	a0 93 b6 02 	sts	0x02B6, r26
    337a:	b0 93 b7 02 	sts	0x02B7, r27
    337e:	b7 cf       	rjmp	.-146    	; 0x32ee <TM_FindNextTag+0x5e>
	}
	
	DF_ContinuousReadEnable(0, 0);
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	70 e0       	ldi	r23, 0x00	; 0
    3384:	cb 01       	movw	r24, r22
    3386:	0e 94 09 0a 	call	0x1412 <DF_ContinuousReadEnable>
	DFPos = 0;
    338a:	10 92 b4 02 	sts	0x02B4, r1
    338e:	10 92 b5 02 	sts	0x02B5, r1
    3392:	10 92 b6 02 	sts	0x02B6, r1
    3396:	10 92 b7 02 	sts	0x02B7, r1
	
	if (TagExists == FALSE)
    339a:	80 91 62 02 	lds	r24, 0x0262
    339e:	88 23       	and	r24, r24
    33a0:	49 f4       	brne	.+18     	; 0x33b4 <TM_FindNextTag+0x124>
	{
		MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);  // Green = ready
    33a2:	81 b3       	in	r24, 0x11	; 17
    33a4:	8f 7c       	andi	r24, 0xCF	; 207
    33a6:	80 61       	ori	r24, 0x10	; 16
    33a8:	81 bb       	out	0x11, r24	; 17
		MAIN_ShowError(PSTR("NO TAGS"));
    33aa:	80 e2       	ldi	r24, 0x20	; 32
    33ac:	94 e0       	ldi	r25, 0x04	; 4
    33ae:	0e 94 6f 03 	call	0x6de <MAIN_ShowError>
    33b2:	02 c0       	rjmp	.+4      	; 0x33b8 <TM_FindNextTag+0x128>
	}
	else
	{
		/* The following line _is_ recursion, but the function will only ever call itself
		   a maximum of one time. The function will call itself upon skipping from the last
		   tag stored in the program data to the first; to guard against infinite recursion
		   if no tags are present, the system will error out if the TagExists flag is empty
		   after a full data read. Once a tag has been read and displayed onto the LCD, the
           function returns to the main tag handling routine.                               */
		TM_FindNextTag();
    33b4:	0e 94 48 19 	call	0x3290 <TM_FindNextTag>
    33b8:	69 96       	adiw	r28, 0x19	; 25
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	f8 94       	cli
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	cd bf       	out	0x3d, r28	; 61
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	1f 91       	pop	r17
    33ca:	0f 91       	pop	r16
    33cc:	ff 90       	pop	r15
    33ce:	ef 90       	pop	r14
    33d0:	df 90       	pop	r13
    33d2:	bf 90       	pop	r11
    33d4:	af 90       	pop	r10
    33d6:	08 95       	ret

000033d8 <TM_ShowTags>:
    33d8:	60 e0       	ldi	r22, 0x00	; 0
    33da:	70 e0       	ldi	r23, 0x00	; 0
    33dc:	cb 01       	movw	r24, r22
    33de:	0e 94 09 0a 	call	0x1412 <DF_ContinuousReadEnable>
    33e2:	10 92 62 02 	sts	0x0262, r1
    33e6:	10 92 b4 02 	sts	0x02B4, r1
    33ea:	10 92 b5 02 	sts	0x02B5, r1
    33ee:	10 92 b6 02 	sts	0x02B6, r1
    33f2:	10 92 b7 02 	sts	0x02B7, r1
    33f6:	0e 94 48 19 	call	0x3290 <TM_FindNextTag>
    33fa:	80 91 62 02 	lds	r24, 0x0262
    33fe:	88 23       	and	r24, r24
    3400:	71 f0       	breq	.+28     	; 0x341e <TM_ShowTags+0x46>
    3402:	8e b3       	in	r24, 0x1e	; 30
    3404:	88 23       	and	r24, r24
    3406:	e9 f3       	breq	.-6      	; 0x3402 <TM_ShowTags+0x2a>
    3408:	f7 9b       	sbis	0x1e, 7	; 30
    340a:	03 c0       	rjmp	.+6      	; 0x3412 <TM_ShowTags+0x3a>
    340c:	0e 94 48 19 	call	0x3290 <TM_FindNextTag>
    3410:	02 c0       	rjmp	.+4      	; 0x3416 <TM_ShowTags+0x3e>
    3412:	f2 99       	sbic	0x1e, 2	; 30
    3414:	03 c0       	rjmp	.+6      	; 0x341c <TM_ShowTags+0x44>
    3416:	0e 94 43 02 	call	0x486 <MAIN_WaitForJoyRelease>
    341a:	f3 cf       	rjmp	.-26     	; 0x3402 <TM_ShowTags+0x2a>
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	0e 94 d2 09 	call	0x13a4 <DF_EnableDataflash>
    3422:	08 95       	ret

00003424 <__vector_2>:
.global PCINT0_vect             ; Pin change 0 (joystick)
.global PCINT1_vect             ; Pin change 1 (joystick)

PCINT0_vect:
  jmp PCINT1_vect
    3424:	0c 94 95 03 	jmp	0x72a <__vector_3>

00003428 <__vector_10>:

.global TIMER0_COMP_vect             ; Timer 0 compare

TIMER0_COMP_vect:
  push r24
    3428:	8f 93       	push	r24
  ldi r24, (USI_CONTROL_REG_FLAGS | (1<<USITC))
    342a:	8b e5       	ldi	r24, 0x5B	; 91
  sts _SFR_MEM_ADDR(USICR), r24
    342c:	80 93 b8 00 	sts	0x00B8, r24
  pop r24
    3430:	8f 91       	pop	r24
  reti
    3432:	18 95       	reti

00003434 <strcpy_P>:
    3434:	fb 01       	movw	r30, r22
    3436:	dc 01       	movw	r26, r24
    3438:	05 90       	lpm	r0, Z+
    343a:	0d 92       	st	X+, r0
    343c:	00 20       	and	r0, r0
    343e:	e1 f7       	brne	.-8      	; 0x3438 <strcpy_P+0x4>
    3440:	08 95       	ret

00003442 <ultoa>:
    3442:	fa 01       	movw	r30, r20
    3444:	cf 93       	push	r28
    3446:	ff 93       	push	r31
    3448:	ef 93       	push	r30
    344a:	22 30       	cpi	r18, 0x02	; 2
    344c:	cc f0       	brlt	.+50     	; 0x3480 <ultoa+0x3e>
    344e:	25 32       	cpi	r18, 0x25	; 37
    3450:	bc f4       	brge	.+46     	; 0x3480 <ultoa+0x3e>
    3452:	c2 2f       	mov	r28, r18
    3454:	2c 2f       	mov	r18, r28
    3456:	33 27       	eor	r19, r19
    3458:	44 27       	eor	r20, r20
    345a:	55 27       	eor	r21, r21
    345c:	ff 93       	push	r31
    345e:	ef 93       	push	r30
    3460:	0e 94 7e 1a 	call	0x34fc <__udivmodsi4>
    3464:	ef 91       	pop	r30
    3466:	ff 91       	pop	r31
    3468:	60 5d       	subi	r22, 0xD0	; 208
    346a:	6a 33       	cpi	r22, 0x3A	; 58
    346c:	0c f0       	brlt	.+2      	; 0x3470 <ultoa+0x2e>
    346e:	69 5d       	subi	r22, 0xD9	; 217
    3470:	61 93       	st	Z+, r22
    3472:	b9 01       	movw	r22, r18
    3474:	ca 01       	movw	r24, r20
    3476:	60 50       	subi	r22, 0x00	; 0
    3478:	70 40       	sbci	r23, 0x00	; 0
    347a:	80 40       	sbci	r24, 0x00	; 0
    347c:	90 40       	sbci	r25, 0x00	; 0
    347e:	51 f7       	brne	.-44     	; 0x3454 <ultoa+0x12>
    3480:	10 82       	st	Z, r1
    3482:	8f 91       	pop	r24
    3484:	9f 91       	pop	r25
    3486:	cf 91       	pop	r28
    3488:	0c 94 46 1a 	jmp	0x348c <strrev>

0000348c <strrev>:
    348c:	dc 01       	movw	r26, r24
    348e:	fc 01       	movw	r30, r24
    3490:	01 90       	ld	r0, Z+
    3492:	00 20       	and	r0, r0
    3494:	e9 f7       	brne	.-6      	; 0x3490 <strrev+0x4>
    3496:	32 97       	sbiw	r30, 0x02	; 2
    3498:	ae 17       	cp	r26, r30
    349a:	bf 07       	cpc	r27, r31
    349c:	30 f4       	brcc	.+12     	; 0x34aa <strrev+0x1e>
    349e:	7c 91       	ld	r23, X
    34a0:	60 81       	ld	r22, Z
    34a2:	70 83       	st	Z, r23
    34a4:	31 97       	sbiw	r30, 0x01	; 1
    34a6:	6d 93       	st	X+, r22
    34a8:	f7 cf       	rjmp	.-18     	; 0x3498 <strrev+0xc>
    34aa:	08 95       	ret

000034ac <__eeprom_read_byte_1F2021>:
    34ac:	f9 99       	sbic	0x1f, 1	; 31
    34ae:	fe cf       	rjmp	.-4      	; 0x34ac <__eeprom_read_byte_1F2021>
    34b0:	b2 bd       	out	0x22, r27	; 34
    34b2:	a1 bd       	out	0x21, r26	; 33
    34b4:	f8 9a       	sbi	0x1f, 0	; 31
    34b6:	11 96       	adiw	r26, 0x01	; 1
    34b8:	00 b4       	in	r0, 0x20	; 32
    34ba:	08 95       	ret

000034bc <__eeprom_read_block_1F2021>:
    34bc:	f7 df       	rcall	.-18     	; 0x34ac <__eeprom_read_byte_1F2021>
    34be:	01 92       	st	Z+, r0
    34c0:	1a 94       	dec	r1
    34c2:	e1 f7       	brne	.-8      	; 0x34bc <__eeprom_read_block_1F2021>
    34c4:	08 95       	ret

000034c6 <__eeprom_read_word_1F2021>:
    34c6:	f2 df       	rcall	.-28     	; 0x34ac <__eeprom_read_byte_1F2021>
    34c8:	e0 2d       	mov	r30, r0
    34ca:	f0 df       	rcall	.-32     	; 0x34ac <__eeprom_read_byte_1F2021>
    34cc:	f0 2d       	mov	r31, r0
    34ce:	08 95       	ret

000034d0 <__eeprom_write_byte_1F2021>:
    34d0:	f9 99       	sbic	0x1f, 1	; 31
    34d2:	fe cf       	rjmp	.-4      	; 0x34d0 <__eeprom_write_byte_1F2021>
    34d4:	b2 bd       	out	0x22, r27	; 34
    34d6:	a1 bd       	out	0x21, r26	; 33
    34d8:	00 bc       	out	0x20, r0	; 32
    34da:	11 96       	adiw	r26, 0x01	; 1
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	fa 9a       	sbi	0x1f, 2	; 31
    34e2:	f9 9a       	sbi	0x1f, 1	; 31
    34e4:	0f be       	out	0x3f, r0	; 63
    34e6:	08 95       	ret

000034e8 <__eeprom_write_word_1F2021>:
    34e8:	f3 df       	rcall	.-26     	; 0x34d0 <__eeprom_write_byte_1F2021>
    34ea:	01 2c       	mov	r0, r1
    34ec:	f1 df       	rcall	.-30     	; 0x34d0 <__eeprom_write_byte_1F2021>
    34ee:	11 24       	eor	r1, r1
    34f0:	08 95       	ret

000034f2 <__eeprom_write_block_1F2021>:
    34f2:	01 90       	ld	r0, Z+
    34f4:	ed df       	rcall	.-38     	; 0x34d0 <__eeprom_write_byte_1F2021>
    34f6:	1a 94       	dec	r1
    34f8:	e1 f7       	brne	.-8      	; 0x34f2 <__eeprom_write_block_1F2021>
    34fa:	08 95       	ret

000034fc <__udivmodsi4>:
    34fc:	a1 e2       	ldi	r26, 0x21	; 33
    34fe:	1a 2e       	mov	r1, r26
    3500:	aa 1b       	sub	r26, r26
    3502:	bb 1b       	sub	r27, r27
    3504:	fd 01       	movw	r30, r26
    3506:	0d c0       	rjmp	.+26     	; 0x3522 <__udivmodsi4_ep>

00003508 <__udivmodsi4_loop>:
    3508:	aa 1f       	adc	r26, r26
    350a:	bb 1f       	adc	r27, r27
    350c:	ee 1f       	adc	r30, r30
    350e:	ff 1f       	adc	r31, r31
    3510:	a2 17       	cp	r26, r18
    3512:	b3 07       	cpc	r27, r19
    3514:	e4 07       	cpc	r30, r20
    3516:	f5 07       	cpc	r31, r21
    3518:	20 f0       	brcs	.+8      	; 0x3522 <__udivmodsi4_ep>
    351a:	a2 1b       	sub	r26, r18
    351c:	b3 0b       	sbc	r27, r19
    351e:	e4 0b       	sbc	r30, r20
    3520:	f5 0b       	sbc	r31, r21

00003522 <__udivmodsi4_ep>:
    3522:	66 1f       	adc	r22, r22
    3524:	77 1f       	adc	r23, r23
    3526:	88 1f       	adc	r24, r24
    3528:	99 1f       	adc	r25, r25
    352a:	1a 94       	dec	r1
    352c:	69 f7       	brne	.-38     	; 0x3508 <__udivmodsi4_loop>
    352e:	60 95       	com	r22
    3530:	70 95       	com	r23
    3532:	80 95       	com	r24
    3534:	90 95       	com	r25
    3536:	9b 01       	movw	r18, r22
    3538:	ac 01       	movw	r20, r24
    353a:	bd 01       	movw	r22, r26
    353c:	cf 01       	movw	r24, r30
    353e:	08 95       	ret
