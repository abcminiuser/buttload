
ButtLoad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000035be  00003672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035be  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b2  00800104  00800104  00003676  2**0
                  ALLOC
  3 .eeprom       0000008e  00810000  00810000  00003676  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000084  00000000  00000000  00003704  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000078  00000000  00000000  00003788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 0000012c  00000000  00000000  00003800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000d48  00000000  00000000  0000392c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004528  00000000  00000000  00004674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000012e7  00000000  00000000  00008b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000334b  00000000  00000000  00009e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000004ec  00000000  00000000  0000d1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000011ae  00000000  00000000  0000d6ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001112  00000000  00000000  0000e868  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000070  00000000  00000000  0000f97a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 02 	jmp	0x466	; 0x466 <__ctors_end>
       4:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__bad_interrupt>
       8:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__vector_2>
       c:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_3>
      10:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__vector_4>
      14:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_5>
      18:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__bad_interrupt>
      1c:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__bad_interrupt>
      20:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__bad_interrupt>
      24:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__vector_9>
      28:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__vector_10>
      2c:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__bad_interrupt>
      30:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__bad_interrupt>
      34:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__vector_13>
      38:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__bad_interrupt>
      3c:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__bad_interrupt>
      40:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__bad_interrupt>
      44:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_17>
      48:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__bad_interrupt>
      4c:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__bad_interrupt>
      50:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__bad_interrupt>
      54:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__bad_interrupt>
      58:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_22>

0000005c <BUTTTAG_Title>:
      5c:	40 28 23 29 42 55 54 54 4c 4f 41 44 20 41 56 52     @(#)BUTTLOAD AVR
      6c:	49 53 50 00                                         ISP.

00000070 <BUTTTAG_Version>:
      70:	40 28 23 29 56 31 2d 34 00                          @(#)V1-4.

00000079 <BUTTTAG_Author>:
      79:	40 28 23 29 42 59 20 44 45 41 4e 20 43 41 4d 45     @(#)BY DEAN CAME
      89:	52 41 00                                            RA.

0000008c <BUTTTAG_Copyright>:
      8c:	40 28 23 29 3c 43 3e 20 32 30 30 36 20 2d 20 47     @(#)<C> 2006 - G
      9c:	50 4c 00                                            PL.

0000009f <AboutTextPtrs>:
      9f:	60 00 74 00 7d 00 90 00                             `.t.}...

000000a7 <WaitText>:
      a7:	2a 57 41 49 54 2a 00                                *WAIT*.

000000ae <Func_ISPPRGM>:
      ae:	41 56 52 49 53 50 20 4d 4f 44 45 00                 AVRISP MODE.

000000ba <Func_STOREPRGM>:
      ba:	53 54 4f 52 45 20 50 52 47 4d 00                    STORE PRGM.

000000c5 <Func_PRGMAVR>:
      c5:	50 52 4f 47 52 41 4d 20 41 56 52 00                 PROGRAM AVR.

000000d1 <Func_PRGMDATAFLASH>:
      d1:	44 41 54 41 46 4c 41 53 48 20 50 52 47 4d 00        DATAFLASH PRGM.

000000e0 <Func_PRGMSTOREINFO>:
      e0:	44 41 54 41 53 54 4f 52 45 20 49 4e 46 4f 00        DATASTORE INFO.

000000ef <Func_SETTINGS>:
      ef:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

000000f8 <Func_SLEEP>:
      f8:	53 4c 45 45 50 20 4d 4f 44 45 00                    SLEEP MODE.

00000103 <MainFunctionNames>:
     103:	ae 00 ba 00 c5 00 d1 00 e0 00 ef 00 f8 00           ..............

00000111 <MainFunctionPtrs>:
     111:	8f 04 61 04 f4 04 a4 04 e9 03 2c 03 da 02           ..a.......,...

0000011f <SFunc_SETCONTRAST>:
     11f:	53 45 54 20 43 4f 4e 54 52 41 53 54 00              SET CONTRAST.

0000012c <SFunc_SETSPISPEED>:
     12c:	53 45 54 20 49 53 50 20 53 50 45 45 44 00           SET ISP SPEED.

0000013a <SFunc_SETRESETMODE>:
     13a:	53 45 54 20 52 45 53 45 54 20 4d 4f 44 45 00        SET RESET MODE.

00000149 <SFunc_SETFIRMMINOR>:
     149:	53 45 54 20 46 49 52 4d 20 56 45 52 53 49 4f 4e     SET FIRM VERSION
	...

0000015a <SFunc_SETAUTOSLEEPTO>:
     15a:	53 45 54 20 53 4c 45 45 50 20 54 49 4d 45 4f 55     SET SLEEP TIMEOU
     16a:	54 00                                               T.

0000016c <SFunc_CLEARMEM>:
     16c:	43 4c 45 41 52 20 4d 45 4d 4f 52 59 00              CLEAR MEMORY.

00000179 <SFunc_GOBOOTLOADER>:
     179:	4a 55 4d 50 20 54 4f 20 42 4f 4f 54 4c 4f 41 44     JUMP TO BOOTLOAD
     189:	45 52 00                                            ER.

0000018c <SettingFunctionNames>:
     18c:	1f 01 2c 01 3a 01 49 01 5a 01 6c 01 79 01           ..,.:.I.Z.l.y.

0000019a <SettingFunctionPtrs>:
     19a:	fa 06 46 07 79 07 a1 07 61 03 c7 06 f4 02           ..F.y...a.....

000001a8 <PRG_A>:
     1a8:	50 52 47 4d 20 41 4c 4c 00                          PRGM ALL.

000001b1 <PRG_D>:
     1b1:	44 41 54 41 20 4f 4e 4c 59 00                       DATA ONLY.

000001bb <PRG_E>:
     1bb:	45 45 50 52 4f 4d 20 4f 4e 4c 59 00                 EEPROM ONLY.

000001c7 <PRG_DE>:
     1c7:	44 41 54 41 20 41 4e 44 20 45 45 50 52 4f 4d 00     DATA AND EEPROM.

000001d7 <PRG_F>:
     1d7:	46 55 53 45 20 42 59 54 45 53 20 4f 4e 4c 59 00     FUSE BYTES ONLY.

000001e7 <PRG_L>:
     1e7:	4c 4f 43 4b 20 42 59 54 45 53 20 4f 4e 4c 59 00     LOCK BYTES ONLY.

000001f7 <PRG_FL>:
     1f7:	46 55 53 45 20 41 4e 44 20 4c 4f 43 4b 20 42 59     FUSE AND LOCK BY
     207:	54 45 53 00                                         TES.

0000020b <PRG_C>:
     20b:	45 52 41 53 45 20 4f 4e 4c 59 00                    ERASE ONLY.

00000216 <ProgOptions>:
     216:	a8 01 b1 01 bb 01 c7 01 d7 01 e7 01 f7 01 0b 02     ................

00000226 <USISpeeds>:
     226:	20 35 37 31 35 33 20 48 5a 00 20 38 36 37 33 38      57153 HZ. 86738
     236:	20 48 5a 00 31 31 33 34 32 37 20 48 5a 00 32 31      HZ.113427 HZ.21
     246:	30 36 35 31 20 48 5a 00                             0651 HZ.

0000024e <SPIResetModes>:
     24e:	4c 4f 47 49 43 00 46 4c 4f 41 54 00                 LOGIC.FLOAT.

0000025a <SIFONames>:
     25a:	53 54 4f 52 41 47 45 20 53 49 5a 45 53 00 00 56     STORAGE SIZES..V
     26a:	49 45 57 20 44 41 54 41 20 54 41 47 53 00           IEW DATA TAGS.

00000278 <__c.2510>:
     278:	2a 4a 54 41 47 20 4f 4e 2a 00                       *JTAG ON*.

00000282 <__c.2479>:
     282:	4e 4f 20 53 54 4f 52 45 44 20 50 52 47 4d 00        NO STORED PRGM.

00000291 <__c.2425>:
     291:	4f 46 46 00                                         OFF.

00000295 <__c.2423>:
     295:	20 20 20 20 53 45 43 00                                 SEC.

0000029d <__c.2402>:
     29d:	56 32 2d 20 00                                      V2- .

000002a2 <__c.2304>:
     2a2:	4d 45 4d 20 43 4c 45 41 52 45 44 00                 MEM CLEARED.

000002ae <__c.2296>:
     2ae:	3c 4e 20 59 3e 00                                   <N Y>.

000002b4 <__c.2294>:
     2b4:	43 4f 4e 46 49 52 4d 00                             CONFIRM.

000002bc <__c.2277>:
     2bc:	2a 53 54 4f 52 41 47 45 20 4d 4f 44 45 2a 00        *STORAGE MODE*.

000002cb <__c.2210>:
     2cb:	46 41 49 4c 45 44 00                                FAILED.

000002d2 <__c.2208>:
     2d2:	50 52 4f 47 52 41 4d 4d 49 4e 47 20 44 4f 4e 45     PROGRAMMING DONE
	...

000002e3 <__c.2206>:
     2e3:	4e 4f 20 4c 4f 43 4b 20 42 59 54 45 53 00           NO LOCK BYTES.

000002f1 <__c.2204>:
     2f1:	4e 4f 20 46 55 53 45 20 42 59 54 45 53 00           NO FUSE BYTES.

000002ff <__c.2202>:
     2ff:	4e 4f 20 45 45 50 52 4f 4d 00                       NO EEPROM.

00000309 <__c.2200>:
     309:	4e 4f 20 44 41 54 41 00                             NO DATA.

00000311 <__c.2198>:
     311:	4e 4f 20 45 52 41 53 45 20 43 4d 44 00              NO ERASE CMD.

0000031e <__c.2095>:
     31e:	42 41 44 49 53 52 00                                BADISR.

00000325 <__c.2032>:
     325:	50 52 47 3e 20 20 00                                PRG>  .

0000032c <LCD_SegTable>:
     32c:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
     33c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
     34c:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
     35c:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
     36c:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
     37c:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
     38c:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

00000398 <USIPSValues>:
     398:	03 80 02 54 01 40 00 22                             ...T.@."

000003a0 <DF_PageBits>:
     3a0:	09 09 09 09 09 0a 0a 0b                             ........

000003a8 <DF_PageSize>:
     3a8:	08 01 08 01 08 01 08 01 08 01 10 02 10 02 20 04     .............. .

000003b8 <DF_Pages>:
     3b8:	00 01 00 02 00 04 00 08 00 10 00 10 00 20 00 20     ............. . 

000003c8 <DataFlashError>:
     3c8:	44 41 54 41 46 4c 41 53 48 20 45 52 52 4f 52 00     DATAFLASH ERROR.

000003d8 <__c.1862>:
     3d8:	42 55 46 46 20 4f 56 46 00                          BUFF OVF.

000003e1 <AutoSleepTOValues>:
     3e1:	00 0f 1e 3c 78                                      ...<x

000003e6 <__c.1865>:
     3e6:	46 52 41 4d 45 20 45 52 52 00                       FRAME ERR.

000003f0 <__c.1863>:
     3f0:	44 41 54 41 20 4f 56 52 00                          DATA OVR.

000003f9 <DataFlashProgMode>:
     3f9:	2a 44 41 54 41 46 4c 41 53 48 20 4d 4f 44 45 2a     *DATAFLASH MODE*
	...

0000040a <SignonResponse>:
     40a:	01 00 08 41 56 52 49 53 50 5f 32 00                 ...AVRISP_2.

00000416 <ButtLoadData>:
     416:	40 28 23 29 2a 53 43 52 45 57 20 52 45 54 52 4f     @(#)*SCREW RETRO
     426:	44 41 4e 00 2a                                      DAN.*

0000042b <SyncErrorMessage>:
     42b:	53 59 4e 43 20 45 52 52 4f 52 00                    SYNC ERROR.

00000436 <AVRISPModeMessage>:
     436:	2a 41 54 41 56 52 49 53 50 20 4d 4f 44 45 2a 00     *ATAVRISP MODE*.

00000446 <__c.2148>:
     446:	4c 4f 43 4b 2d 00                                   LOCK-.

0000044c <__c.2145>:
     44c:	46 55 53 45 2d 00                                   FUSE-.

00000452 <__c.2142>:
     452:	45 50 52 4d 2d 00                                   EPRM-.

00000458 <__c.2138>:
     458:	44 41 54 41 2d 00                                   DATA-.

0000045e <__c.1884>:
     45e:	4e 4f 20 54 41 47 53 00                             NO TAGS.

00000466 <__ctors_end>:
     466:	11 24       	eor	r1, r1
     468:	1f be       	out	0x3f, r1	; 63
     46a:	cf ef       	ldi	r28, 0xFF	; 255
     46c:	d4 e0       	ldi	r29, 0x04	; 4
     46e:	de bf       	out	0x3e, r29	; 62
     470:	cd bf       	out	0x3d, r28	; 61

00000472 <__do_copy_data>:
     472:	11 e0       	ldi	r17, 0x01	; 1
     474:	a0 e0       	ldi	r26, 0x00	; 0
     476:	b1 e0       	ldi	r27, 0x01	; 1
     478:	ee eb       	ldi	r30, 0xBE	; 190
     47a:	f5 e3       	ldi	r31, 0x35	; 53
     47c:	02 c0       	rjmp	.+4      	; 0x482 <.do_copy_data_start>

0000047e <.do_copy_data_loop>:
     47e:	05 90       	lpm	r0, Z+
     480:	0d 92       	st	X+, r0

00000482 <.do_copy_data_start>:
     482:	a4 30       	cpi	r26, 0x04	; 4
     484:	b1 07       	cpc	r27, r17
     486:	d9 f7       	brne	.-10     	; 0x47e <.do_copy_data_loop>

00000488 <__do_clear_bss>:
     488:	12 e0       	ldi	r17, 0x02	; 2
     48a:	a4 e0       	ldi	r26, 0x04	; 4
     48c:	b1 e0       	ldi	r27, 0x01	; 1
     48e:	01 c0       	rjmp	.+2      	; 0x492 <.do_clear_bss_start>

00000490 <.do_clear_bss_loop>:
     490:	1d 92       	st	X+, r1

00000492 <.do_clear_bss_start>:
     492:	a6 3b       	cpi	r26, 0xB6	; 182
     494:	b1 07       	cpc	r27, r17
     496:	e1 f7       	brne	.-8      	; 0x490 <.do_clear_bss_loop>
     498:	0e 94 37 06 	call	0xc6e	; 0xc6e <main>
     49c:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <_exit>

000004a0 <__bad_interrupt>:
     4a0:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__vector_default>

000004a4 <MAIN_Delay10MS>:

// ======================================================================================

void MAIN_Delay10MS(uint8_t loops)
{
     4a4:	28 2f       	mov	r18, r24
     4a6:	e0 e0       	ldi	r30, 0x00	; 0
     4a8:	f8 e4       	ldi	r31, 0x48	; 72
     4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <MAIN_Delay10MS+0xe>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4ac:	cf 01       	movw	r24, r30
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <MAIN_Delay10MS+0xa>
  /* Prevents the use of floating point libraries. Delaying in groups of
     10ms increases accuracy by reducing the time overhead for each loop
     interation of the while.                                            */

	while (loops--)
     4b2:	21 50       	subi	r18, 0x01	; 1
     4b4:	d8 f7       	brcc	.-10     	; 0x4ac <MAIN_Delay10MS+0x8>
     4b6:	08 95       	ret

000004b8 <MAIN_Delay1MS>:
	  _delay_ms(10);
}

void MAIN_Delay1MS(uint8_t loops)
{
     4b8:	28 2f       	mov	r18, r24
     4ba:	e3 e3       	ldi	r30, 0x33	; 51
     4bc:	f7 e0       	ldi	r31, 0x07	; 7
     4be:	03 c0       	rjmp	.+6      	; 0x4c6 <MAIN_Delay1MS+0xe>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4c0:	cf 01       	movw	r24, r30
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <MAIN_Delay1MS+0xa>
  /* Prevents the use of floating point libraries. Less accurate than the
     Delay10MS routine, but nessesary for many commands. The overhead required
     to call the routine is substantially less than the overhead required to
     calculate the float at compile time, so this actually saves execution time. */

	while (loops--)
     4c6:	21 50       	subi	r18, 0x01	; 1
     4c8:	d8 f7       	brcc	.-10     	; 0x4c0 <MAIN_Delay1MS+0x8>
     4ca:	08 95       	ret

000004cc <MAIN_ResetCSLine>:
	  _delay_ms(1);
}

void MAIN_ResetCSLine(const uint8_t ActiveInactive)
{
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	81 f0       	breq	.+32     	; 0x4f0 <MAIN_ResetCSLine+0x24>
	/* ActiveInactive controls the /Reset line to an AVR device or external dataflash
	/CS line. If the reset polarity parameter is a 0 then interfacing with AT89
	devices which has an active high reset. Pins are tristated when inactive.         */
	
	switch (ActiveInactive)
     4d0:	81 30       	cpi	r24, 0x01	; 1
     4d2:	18 f0       	brcs	.+6      	; 0x4da <MAIN_ResetCSLine+0xe>
     4d4:	82 30       	cpi	r24, 0x02	; 2
     4d6:	01 f5       	brne	.+64     	; 0x518 <__stack+0x19>
     4d8:	09 c0       	rjmp	.+18     	; 0x4ec <MAIN_ResetCSLine+0x20>
	{
		case MAIN_RESETCS_ACTIVE:                // The target RESET line may be either active high or low.
			DDRF |= (1 << 6);
     4da:	86 9a       	sbi	0x10, 6	; 16
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     4dc:	a1 e0       	ldi	r26, 0x01	; 1
     4de:	b0 e0       	ldi	r27, 0x00	; 0
     4e0:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
     4e4:	80 2d       	mov	r24, r0
		
			if (eeprom_read_byte(&EEPROMVars.ResetPolarity)) // Translate to correct active logic level for target device type
     4e6:	88 23       	and	r24, r24
     4e8:	59 f4       	brne	.+22     	; 0x500 <__stack+0x1>
     4ea:	13 c0       	rjmp	.+38     	; 0x512 <__stack+0x13>
			  PORTF &= ~(1 << 6);
			else
			  PORTF |= (1 << 6);
		
			break;
		case MAIN_RESETCS_EXTDFACTIVE:           // Dataflashes are always active low.
			DDRF  |=  (1 << 6);
     4ec:	86 9a       	sbi	0x10, 6	; 16
     4ee:	08 c0       	rjmp	.+16     	; 0x500 <__stack+0x1>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     4f0:	ac e8       	ldi	r26, 0x8C	; 140
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
     4f8:	80 2d       	mov	r24, r0
			PORTF &= ~(1 << 6);
			
			break;
		case MAIN_RESETCS_INACTIVE:              // Must determine what to do for inactive RESET.
			if (eeprom_read_byte(&EEPROMVars.SPIResetMode)) // FLOAT mode reset
     4fa:	88 23       	and	r24, r24
     4fc:	19 f0       	breq	.+6      	; 0x504 <__stack+0x5>
			{
				DDRF  &= ~(1 << 6);
     4fe:	86 98       	cbi	0x10, 6	; 16
				PORTF &= ~(1 << 6);
     500:	8e 98       	cbi	0x11, 6	; 17
     502:	08 95       	ret
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     504:	a1 e0       	ldi	r26, 0x01	; 1
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
     50c:	80 2d       	mov	r24, r0
			}
			else                                 // ACTIVE mode reset
			{
				if (eeprom_read_byte(&EEPROMVars.ResetPolarity)) // Translate to correct inactive logic level for target device type
     50e:	88 23       	and	r24, r24
     510:	11 f0       	breq	.+4      	; 0x516 <__stack+0x17>
				  PORTF |= (1 << 6);
     512:	8e 9a       	sbi	0x11, 6	; 17
     514:	08 95       	ret
				else
				  PORTF &= ~(1 << 6);			
     516:	8e 98       	cbi	0x11, 6	; 17
     518:	08 95       	ret

0000051a <MAIN_WaitForJoyRelease>:
			}
	}
}

void MAIN_WaitForJoyRelease(void)
{
     51a:	8e b3       	in	r24, 0x1e	; 30
     51c:	81 30       	cpi	r24, 0x01	; 1
     51e:	11 f4       	brne	.+4      	; 0x524 <MAIN_WaitForJoyRelease+0xa>
	if (JoyStatus == 1)                          // If invalid value used to force menu drawing, reset value and exit
	{
		JoyStatus = 0;
     520:	1e ba       	out	0x1e, r1	; 30
     522:	08 95       	ret
		return;
	}

	for (;;)
	{
		while (JoyStatus) {};                    // Wait until joystick released
     524:	8e b3       	in	r24, 0x1e	; 30
     526:	88 23       	and	r24, r24
     528:	e9 f7       	brne	.-6      	; 0x524 <MAIN_WaitForJoyRelease+0xa>

		MAIN_Delay10MS(2);
     52a:	82 e0       	ldi	r24, 0x02	; 2
     52c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <MAIN_Delay10MS>

		if (!(JoyStatus))                        // Joystick still released (not bouncing), return
     530:	8e b3       	in	r24, 0x1e	; 30
     532:	88 23       	and	r24, r24
     534:	b9 f7       	brne	.-18     	; 0x524 <MAIN_WaitForJoyRelease+0xa>
     536:	08 95       	ret

00000538 <MAIN_IntToStr>:
		  return;
	}
}

void MAIN_IntToStr(uint16_t IntV, uint8_t* Buff)
{
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	fb 01       	movw	r30, r22
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	03 c0       	rjmp	.+6      	; 0x548 <MAIN_IntToStr+0x10>
	// Shows leading zeros, unlike itoa.

	uint8_t Temp = 0;
	
	while (IntV >= 100)
	{
		Temp++;
     542:	2f 5f       	subi	r18, 0xFF	; 255
		IntV -= 100;
     544:	84 56       	subi	r24, 0x64	; 100
     546:	90 40       	sbci	r25, 0x00	; 0
     548:	84 36       	cpi	r24, 0x64	; 100
     54a:	91 05       	cpc	r25, r1
     54c:	d0 f7       	brcc	.-12     	; 0x542 <MAIN_IntToStr+0xa>
	}

	*(Buff++) = '0' + Temp;
     54e:	20 5d       	subi	r18, 0xD0	; 208
     550:	21 93       	st	Z+, r18
     552:	df 01       	movw	r26, r30
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	02 c0       	rjmp	.+4      	; 0x55c <MAIN_IntToStr+0x24>
	
	Temp = 0;
	
	while (IntV >= 10)
	{
		Temp++;
     558:	2f 5f       	subi	r18, 0xFF	; 255
		IntV -= 10;
     55a:	0a 97       	sbiw	r24, 0x0a	; 10
     55c:	8a 30       	cpi	r24, 0x0A	; 10
     55e:	91 05       	cpc	r25, r1
     560:	d8 f7       	brcc	.-10     	; 0x558 <MAIN_IntToStr+0x20>
	}
		
	*(Buff++) = '0' + Temp;
     562:	20 5d       	subi	r18, 0xD0	; 208
     564:	fd 01       	movw	r30, r26
     566:	21 93       	st	Z+, r18
	*(Buff++) = '0' + IntV;
     568:	80 5d       	subi	r24, 0xD0	; 208
     56a:	ed 01       	movw	r28, r26
     56c:	89 83       	std	Y+1, r24	; 0x01
	*(Buff)   = '\0';
     56e:	11 82       	std	Z+1, r1	; 0x01
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <__vector_3>:
}

void MAIN_ShowProgType(const uint8_t Letter)
{
	uint8_t ProgTypeBuffer[7];

	strcpy_P(ProgTypeBuffer, PSTR("PRG>  "));
	ProgTypeBuffer[5] = Letter;
	
	LCD_puts(ProgTypeBuffer);
}

void MAIN_ShowError(const uint8_t *pFlashStr)
{
	uint8_t ErrorBuff[LCD_TEXTBUFFER_SIZE];      // New buffer, LCD text buffer size
	
	ErrorBuff[0] = 'E';
	ErrorBuff[1] = '>';

	strcpy_P(&ErrorBuff[2], pFlashStr);          // WARNING: If flash error text is larger than (TEXTBUFFER_SIZE - 1),
	                                             // this will overflow the buffer and crash the program!
	LCD_puts(ErrorBuff);
	
	MAIN_WaitForJoyRelease();
	while (!(JoyStatus & JOY_PRESS)) {};
	MAIN_WaitForJoyRelease();
}

void MAIN_CrashProgram(const uint8_t *ErrTxtPtr)
{
	SPI_SPIOFF();
	USI_SPIOff();
	TIMEOUT_PACKET_TIMER_OFF();
	TIMEOUT_SLEEP_TIMER_OFF();
	USART_ENABLE(USART_TX_OFF, USART_RX_OFF);

	LCD_puts_f(ErrTxtPtr);
	
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);	

	for (;;)
	{
		MAIN_Delay10MS(50);
		PORTF ^= MAIN_STATLED_GREEN;               // Loop forever, blinking the status LED from orange to red and back
	}
}

// ======================================================================================

ISR(PCINT1_vect, ISR_NOBLOCK)                    // Joystick routine; PCINT0_vect is bound to this also via JoystickInterrupt.S
{
     576:	78 94       	sei
     578:	1f 92       	push	r1
     57a:	0f 92       	push	r0
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	0f 92       	push	r0
     580:	11 24       	eor	r1, r1
     582:	8f 93       	push	r24
     584:	9f 93       	push	r25
	JoyStatus = (~PINB & JOY_BMASK)
     586:	83 b1       	in	r24, 0x03	; 3
     588:	9c b1       	in	r25, 0x0c	; 12
     58a:	80 95       	com	r24
     58c:	80 7d       	andi	r24, 0xD0	; 208
     58e:	90 95       	com	r25
     590:	9c 70       	andi	r25, 0x0C	; 12
     592:	89 2b       	or	r24, r25
     594:	8e bb       	out	0x1e, r24	; 30
	          | (~PINE & JOY_EMASK);
			  
	TIMEOUT_SLEEP_TIMEOUT_RESET();
     596:	10 92 8e 01 	sts	0x018E, r1
     59a:	10 92 8d 01 	sts	0x018D, r1
     59e:	10 92 85 00 	sts	0x0085, r1
     5a2:	10 92 84 00 	sts	0x0084, r1
     5a6:	9f 91       	pop	r25
     5a8:	8f 91       	pop	r24
     5aa:	0f 90       	pop	r0
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	0f 90       	pop	r0
     5b0:	1f 90       	pop	r1
     5b2:	18 95       	reti

000005b4 <FUNCSleepMode>:
}

ISR(BADISR_vect, ISR_NAKED)                      // Bad ISR routine; should never be called, here for safety
{
	MAIN_CrashProgram(PSTR("BADISR"));
}

// ======================================================================================

void FUNCChangeSettings(void)
{
	uint8_t CurrSFunc = 0;
	
	JoyStatus = 1;

	for (;;)
	{
		if (JoyStatus)                           // Joystick is in the non-center position
		{
			if (JoyStatus & JOY_UP)              // Previous function
			  (CurrSFunc == 0)? CurrSFunc = ARRAY_UPPERBOUND(SettingFunctionPtrs) : CurrSFunc--;
			else if (JoyStatus & JOY_DOWN)       // Next function
			  (CurrSFunc == ARRAY_UPPERBOUND(SettingFunctionPtrs))? CurrSFunc = 0 : CurrSFunc++;
			else if (JoyStatus & JOY_PRESS)      // Select current function
			  ((FuncPtr)pgm_read_word(&SettingFunctionPtrs[CurrSFunc]))(); // Run associated function
			else if (JoyStatus & JOY_LEFT)
			  return;
		
			// Show current function onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&SettingFunctionNames[CurrSFunc]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCShowAbout(void)
{
	uint8_t InfoNum = 0;
	
	JoyStatus = 1;
			
	for (;;)
	{
		if (JoyStatus)
		{
			if (JoyStatus & JOY_UP)
			  (InfoNum == 0)? InfoNum = ARRAY_UPPERBOUND(AboutTextPtrs) : InfoNum--;
			else if (JoyStatus & JOY_DOWN)
			  (InfoNum == ARRAY_UPPERBOUND(AboutTextPtrs))? InfoNum = 0 : InfoNum++;
			else if (JoyStatus & JOY_LEFT)
			  return;

			LCD_puts_f((uint8_t*)pgm_read_word(&AboutTextPtrs[InfoNum]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCAVRISPMode(void)
{
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
	LCD_puts_f(AVRISPModeMessage);
	
	V2P_RunStateMachine(AICI_InterpretPacket);
}

void FUNCProgramDataflash(void)
{
	USI_SPIInitMaster();
	DataflashInfo.UseExernalDF = TRUE;
	DFSPIRoutinePointer = USI_SPITransmit;
	
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
	LCD_puts_f(DataFlashProgMode);

	V2P_RunStateMachine(PD_InterpretAVRISPPacket);
	   
	DF_EnableDataflash(FALSE);
	SPI_SPIOFF();
}

void FUNCProgramAVR(void)
{
	uint8_t  DoneFailMessageBuff[19];
	uint8_t  Fault    = ISPCC_NO_FAULT;
	uint8_t  ProgMode = 0;

	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
	SPI_SPIInit();
	DataflashInfo.UseExernalDF = FALSE;
	
	if (!(DF_CheckCorrectOnboardChip()))
	  return;

	MAIN_WaitForJoyRelease();
	
	JoyStatus = 1;                               // Use an invalid joystick value to force the program to write the
	                                             // name of the default command onto the LCD
	for (;;)
	{
		if (JoyStatus)
		{
			if (JoyStatus & JOY_LEFT)
			  return;
			else if (JoyStatus & JOY_PRESS)
			  break;
			else if (JoyStatus & JOY_UP)
			  (ProgMode == 0)? ProgMode = ARRAY_UPPERBOUND(ProgOptions) : ProgMode--;
			else if (JoyStatus & JOY_DOWN)
			  (ProgMode == ARRAY_UPPERBOUND(ProgOptions))? ProgMode = 0 : ProgMode++;

			LCD_puts_f((uint8_t*)pgm_read_word(&ProgOptions[ProgMode])); // Show current function onto the LCD

			MAIN_WaitForJoyRelease();
		}
	}

	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_BASECLOCKSPEED_8MHZ);
	LCD_puts_f(WaitText);

	TIMEOUT_SLEEP_TIMER_OFF();

	USI_SPIInitMaster();
	MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);       // Capture the RESET line of the slave AVR
			
	for (uint8_t PacketB = 0; PacketB < 12; PacketB++) // Read the enter programming mode command bytes
	  PacketBytes[PacketB] = eeprom_read_byte(&EEPROMVars.EnterProgMode[PacketB]);
	
	ISPCC_EnterChipProgrammingMode();            // Try to sync with the slave AVR

	CurrAddress = 0;

	if (PacketBytes[1] == AICB_STATUS_CMD_OK)    // ISPCC_EnterChipProgrammingMode alters the PacketBytes buffer rather than returning a value
	{						
		if (!(ProgMode) || (ProgMode == 7) || (ProgMode == 1) || (ProgMode == 3)) // All, erase chip, flash and eeprom, or program flash mode
		{
			MAIN_ShowProgType('C');
			
			if (!(eeprom_read_byte(&EEPROMVars.EraseCmdStored) == TRUE))
			{
				Fault = ISPCC_FAULT_NOERASE;
				MAIN_ShowError(PSTR("NO ERASE CMD"));
			}
			else
			{
				PM_SendEraseCommand();
			}
		}

		if ((!(ProgMode) || (ProgMode == 1) || (ProgMode == 3)) && (Fault == ISPCC_NO_FAULT)) // All, flash and EEPROM, or program flash mode
		{
			MAIN_ShowProgType('D');

			if (!(PM_GetStoredDataSize(TYPE_FLASH))) // Check to make sure a program is present in memory
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
				MAIN_ShowError(PSTR("NO DATA"));
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_FLASH);
			}
		}
	
		if (!(ProgMode) || (ProgMode == 2) || (ProgMode == 3)) // All, flash and EEPROM, or program EEPROM mode
		{
			MAIN_ShowProgType('E');
				
			if (!(PM_GetStoredDataSize(TYPE_EEPROM))) // Check to make sure EEPROM data is present in memory
			{
				Fault = ISPCC_FAULT_NODATATYPE;
				MAIN_ShowError(PSTR("NO EEPROM"));
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_EEPROM);
			}
		}

		if (!(ProgMode) || (ProgMode == 4) || (ProgMode == 6)) // All, fuse and lock bytes, or program fuse bytes mode
		{
			MAIN_ShowProgType('F');
			
			if (!(eeprom_read_byte(&EEPROMVars.TotalFuseBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
				MAIN_ShowError(PSTR("NO FUSE BYTES"));
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_FUSE);
			}
		}

		if (!(ProgMode) || (ProgMode == 5) || (ProgMode == 6)) // All, fuse and lock bytes, or program lock bytes mode
		{
			if (ProgMode == 6)                           // If fusebytes have already been written, we need to reenter programming mode to latch them
			{
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line of the slave AVR
				MAIN_Delay10MS(1);
				MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);   // Capture the RESET line of the slave AVR
				ISPCC_EnterChipProgrammingMode();        // Try to sync with the slave AVR
			}

			MAIN_ShowProgType('L');
		
			if (!(eeprom_read_byte(&EEPROMVars.TotalLockBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;
				MAIN_ShowError(PSTR("NO LOCK BYTES"));
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_LOCK);
			}
		}

		strcpy_P(DoneFailMessageBuff, PSTR("PROGRAMMING DONE"));

		if (Fault != ISPCC_NO_FAULT)             // Takes less code to just overwrite part of the string on fail
		  strcpy_P(&DoneFailMessageBuff[12], PSTR("FAILED"));

		LCD_puts(DoneFailMessageBuff);

		MAIN_Delay10MS(250);
		MAIN_Delay10MS(200);
	}
	else
	{
		MAIN_ShowError(SyncErrorMessage);
	}
	
	TOUT_SetupSleepTimer();
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_BASECLOCKSPEED_1MHZ);
	MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE);     // Release the RESET line and allow the slave AVR to run	
	USI_SPIOff();
	DF_EnableDataflash(FALSE);
	SPI_SPIOFF();
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);       // Set status LEDs to green (ready)
}

void FUNCStoreProgram(void)
{
	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
	SPI_SPIInit();
	DataflashInfo.UseExernalDF = FALSE;
	DF_EnableDataflash(TRUE);

	if (!(DF_CheckCorrectOnboardChip()))
	  return;
			
	USART_ENABLE(USART_TX_ON, USART_RX_ON);
	LCD_puts_f(PSTR("*STORAGE MODE*"));

	V2P_RunStateMachine(PM_InterpretAVRISPPacket);
	
	DF_EnableDataflash(FALSE);
	SPI_SPIOFF();
}

void FUNCClearMem(void)
{
	LCD_puts_f(PSTR("CONFIRM"));
	MAIN_Delay10MS(180);

	LCD_puts_f(PSTR("<N Y>"));

	for (;;)
	{
		if (JoyStatus)
		{
			if (JoyStatus & JOY_LEFT)
			  return;
			else if (JoyStatus & JOY_RIGHT)
			  break;
		}
	}

	MAIN_WaitForJoyRelease();

	LCD_puts_f(WaitText);
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);      // Set status LEDs to orange (busy)

	for (uint16_t EAddr = 0; EAddr < sizeof(EEPROMVars); EAddr++)
	  eeprom_write_byte((uint8_t*)EAddr, 0xFF);

	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);       // Set status LEDs to green (ready)
	LCD_puts_f(PSTR("MEM CLEARED"));
	MAIN_Delay10MS(250);
}

void FUNCSetContrast(void)
{
	uint8_t Buffer[6];
	uint8_t Contrast = (eeprom_read_byte(&EEPROMVars.LCDContrast) & 0x0F); // Ranges from 0-15 so mask retuns 15 on blank EEPROM (0xFF)
	
	JoyStatus = 1;                               // Invalid value to force the LCD to update
	
	for (;;)
	{
		if (JoyStatus)
		{
			if (JoyStatus & JOY_UP)
			{
				if (Contrast < 15)
				  Contrast++;
			}
			else if (JoyStatus & JOY_DOWN)
			{
				if (Contrast > 1)                // Zero is non-visible, so 1 is the minimum
				  Contrast--;
			}
			else if (JoyStatus & JOY_LEFT)
			{
				eeprom_write_byte(&EEPROMVars.LCDContrast, Contrast);
				return;
			}
					
			Buffer[0] = 'C';
			Buffer[1] = 'T';
			Buffer[2] = ' ';

			MAIN_IntToStr((uint16_t)Contrast, &Buffer[3]);
			LCD_puts(Buffer);

			LCD_CONTRAST_LEVEL(Contrast);

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCSetISPSpeed(void)
{
	uint8_t CurrSpeed = eeprom_read_byte(&EEPROMVars.SCKDuration);

	if (CurrSpeed > ARRAY_UPPERBOUND(USISpeeds))
	  CurrSpeed = ARRAY_UPPERBOUND(USISpeeds);   // Protection against blank EEPROM

	JoyStatus = 1;                               // Invalid value to force the LCD to update

	for (;;)
	{
		if (JoyStatus)
		{
			if (JoyStatus & JOY_UP)
			{
				(CurrSpeed == 0)? CurrSpeed = ARRAY_UPPERBOUND(USISpeeds) : CurrSpeed--;
			}
			else if (JoyStatus & JOY_DOWN)
			{
				(CurrSpeed == ARRAY_UPPERBOUND(USISpeeds))? CurrSpeed = 0 : CurrSpeed++;
			}
			else if (JoyStatus & JOY_LEFT)
			{
				eeprom_write_byte(&EEPROMVars.SCKDuration, CurrSpeed);
				return;
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f(USISpeeds[CurrSpeed]);

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCSetResetMode(void)
{
	uint8_t CurrMode = (eeprom_read_byte(&EEPROMVars.SPIResetMode) & 0x01);

	JoyStatus = 1;                               // Invalid value to force the LCD to update

	for (;;)
	{
		if (JoyStatus)
		{
			if ((JoyStatus & JOY_UP) || (JoyStatus & JOY_DOWN))
			{
				CurrMode ^= 1;
			}
			else if (JoyStatus & JOY_LEFT)
			{
				eeprom_write_byte(&EEPROMVars.SPIResetMode, CurrMode);
				return;
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f(SPIResetModes[CurrMode]);

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCSetFirmMinorVer(void)
{
	uint8_t VerBuffer[5];
	uint8_t VerMinor = eeprom_read_byte(&EEPROMVars.FirmVerMinor);

	if (VerMinor > 9)
	  VerMinor = V2P_SW_VERSION_MINOR_DEFAULT;
	
	strcpy_P(VerBuffer, PSTR("V2- "));

	JoyStatus = 1;                               // Invalid value to force the LCD to update

	for (;;)
	{
		if (JoyStatus)
		{
			if (JoyStatus & JOY_UP)
			{
				if (VerMinor < 9)
				  VerMinor++;
			}
			if (JoyStatus & JOY_DOWN)
			{
				if (VerMinor)
				  VerMinor--;
			}
			else if (JoyStatus & JOY_LEFT)
			{
				eeprom_write_byte(&EEPROMVars.FirmVerMinor, VerMinor);
				return;
			}
			
			VerBuffer[3] = ('0' + VerMinor);
			LCD_puts(VerBuffer);

			MAIN_WaitForJoyRelease();
		}
	}	
}

void FUNCSetAutoSleepTimeOut(void)
{
	uint8_t SleepTxtBuffer[8];
	uint8_t SleepVal = eeprom_read_byte(&EEPROMVars.AutoSleepValIndex);

	if (SleepVal > ARRAY_UPPERBOUND(AutoSleepTOValues))
	  SleepVal = ARRAY_UPPERBOUND(AutoSleepTOValues);

	strcpy_P(SleepTxtBuffer, PSTR("    SEC"));
	
	JoyStatus = 1;                               // Invalid value to force the LCD to update

	for (;;)
	{
		if (JoyStatus)
		{
			if (JoyStatus & JOY_UP)
			{
				(SleepVal == 0)? SleepVal = ARRAY_UPPERBOUND(AutoSleepTOValues) : SleepVal--;
			}
			if (JoyStatus & JOY_DOWN)
			{
				(SleepVal == ARRAY_UPPERBOUND(AutoSleepTOValues))? SleepVal = 0 : SleepVal++;
			}
			else if (JoyStatus & JOY_LEFT)
			{
				eeprom_write_byte(&EEPROMVars.AutoSleepValIndex, SleepVal);
				TOUT_SetupSleepTimer();
				return;
			}

			if (!(SleepVal))
			{
				LCD_puts_f(PSTR("OFF"));
			}
			else
			{
				MAIN_IntToStr(pgm_read_byte(&AutoSleepTOValues[SleepVal]), &SleepTxtBuffer[0]);
				SleepTxtBuffer[3] = ' ';         // Remove the auto-string termination from the buffer
				LCD_puts(SleepTxtBuffer);
			}

			MAIN_WaitForJoyRelease();
		}
	}	
}

void FUNCSleepMode(void)
{
     5b4:	85 e0       	ldi	r24, 0x05	; 5
     5b6:	83 bf       	out	0x33, r24	; 51
	SMCR    = ((1 << SM1) | (1 << SE));          // Power down sleep mode
	LCDCRA &= ~(1 << LCDEN); 
     5b8:	80 91 e4 00 	lds	r24, 0x00E4
     5bc:	8f 77       	andi	r24, 0x7F	; 127
     5be:	80 93 e4 00 	sts	0x00E4, r24
	
	MAIN_SETSTATUSLED(MAIN_STATLED_OFF);         // Save battery power - turn off status LED
     5c2:	81 b3       	in	r24, 0x11	; 17
     5c4:	8f 7c       	andi	r24, 0xCF	; 207
     5c6:	81 bb       	out	0x11, r24	; 17
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <FUNCSleepMode+0x18>

	while (!(JoyStatus & JOY_UP))                // Joystick interrupt wakes the micro
	  SLEEP();
     5ca:	88 95       	sleep
     5cc:	f6 9b       	sbis	0x1e, 6	; 30
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <FUNCSleepMode+0x16>
	   
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);       // Turn status LED back on
     5d0:	81 b3       	in	r24, 0x11	; 17
     5d2:	8f 7c       	andi	r24, 0xCF	; 207
     5d4:	80 61       	ori	r24, 0x10	; 16
     5d6:	81 bb       	out	0x11, r24	; 17

	LCDCRA |= (1 << LCDEN);
     5d8:	80 91 e4 00 	lds	r24, 0x00E4
     5dc:	80 68       	ori	r24, 0x80	; 128
     5de:	80 93 e4 00 	sts	0x00E4, r24
	
	MAIN_WaitForJoyRelease();
     5e2:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     5e6:	08 95       	ret

000005e8 <FUNCGoBootloader>:
}

void FUNCStorageInfo(void)
{
	uint8_t SelectedItem = 0;

	MAIN_WaitForJoyRelease();

	JoyStatus = 1;                               // Invalid value to force the LCD to update

	for (;;)
	{
		if (JoyStatus)
		{
			if (JoyStatus & (JOY_UP | JOY_DOWN))
			{
				SelectedItem ^= 1;
			}
			else if (JoyStatus & JOY_LEFT)
			{
				return;
			}
			else if (JoyStatus & JOY_PRESS)
			{
				if (SelectedItem == 1)           // View storage tags
				{
					DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
					SPI_SPIInit();
					DataflashInfo.UseExernalDF = FALSE;
					DF_EnableDataflash(TRUE);

					if (DF_CheckCorrectOnboardChip())
					{
						TM_ShowTags();
						SPI_SPIOFF();
					}
					else if (!(PM_GetStoredDataSize(TYPE_FLASH)))
					{
						DF_EnableDataflash(FALSE);
						SPI_SPIOFF();

						MAIN_ShowError(PSTR("NO STORED PRGM"));
					}	
				}
				else                             // View stored data sizes
				{
					PM_ShowStoredItemSizes();
				}
			}
			
			LCD_puts_f(SIFONames[SelectedItem]);

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCGoBootloader(void)
{
     5e8:	85 b7       	in	r24, 0x35	; 53
     5ea:	8f 77       	andi	r24, 0x7F	; 127
	uint8_t MD = (MCUCR & ~(1 << JTD));         // Forces compiler to use IN, AND plus two OUTs rather than two lots of IN/AND/OUTs
	MCUCR = MD;                                 // Turn on JTAG via code
     5ec:	85 bf       	out	0x35, r24	; 53
	MCUCR = MD;                                 // Set bit twice as specified in datasheet        
     5ee:	85 bf       	out	0x35, r24	; 53

	TIMEOUT_SLEEP_TIMER_OFF();
     5f0:	10 92 81 00 	sts	0x0081, r1
	
	LCD_puts_f(PSTR("*JTAG ON*"));
     5f4:	88 e7       	ldi	r24, 0x78	; 120
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
	
	MAIN_WaitForJoyRelease();
     5fc:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
	
	WDTCR = ((1<<WDCE) | (1<<WDE));             // Enable Watchdog Timer to give reset after minimum timeout
     600:	88 e1       	ldi	r24, 0x18	; 24
     602:	80 93 60 00 	sts	0x0060, r24
     606:	ff cf       	rjmp	.-2      	; 0x606 <FUNCGoBootloader+0x1e>

00000608 <FUNCShowAbout>:
     608:	1f 93       	push	r17
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	8e bb       	out	0x1e, r24	; 30
     60e:	10 e0       	ldi	r17, 0x00	; 0
     610:	8e b3       	in	r24, 0x1e	; 30
     612:	88 23       	and	r24, r24
     614:	e9 f3       	breq	.-6      	; 0x610 <FUNCShowAbout+0x8>
     616:	f6 9b       	sbis	0x1e, 6	; 30
     618:	06 c0       	rjmp	.+12     	; 0x626 <FUNCShowAbout+0x1e>
     61a:	11 23       	and	r17, r17
     61c:	11 f4       	brne	.+4      	; 0x622 <FUNCShowAbout+0x1a>
     61e:	13 e0       	ldi	r17, 0x03	; 3
     620:	0c c0       	rjmp	.+24     	; 0x63a <FUNCShowAbout+0x32>
     622:	11 50       	subi	r17, 0x01	; 1
     624:	0a c0       	rjmp	.+20     	; 0x63a <FUNCShowAbout+0x32>
     626:	f7 9b       	sbis	0x1e, 7	; 30
     628:	06 c0       	rjmp	.+12     	; 0x636 <FUNCShowAbout+0x2e>
     62a:	13 30       	cpi	r17, 0x03	; 3
     62c:	11 f4       	brne	.+4      	; 0x632 <FUNCShowAbout+0x2a>
     62e:	10 e0       	ldi	r17, 0x00	; 0
     630:	04 c0       	rjmp	.+8      	; 0x63a <FUNCShowAbout+0x32>
     632:	1f 5f       	subi	r17, 0xFF	; 255
     634:	02 c0       	rjmp	.+4      	; 0x63a <FUNCShowAbout+0x32>
     636:	f2 99       	sbic	0x1e, 2	; 30
     638:	0d c0       	rjmp	.+26     	; 0x654 <FUNCShowAbout+0x4c>
     63a:	e1 2f       	mov	r30, r17
     63c:	ff 27       	eor	r31, r31
     63e:	ee 0f       	add	r30, r30
     640:	ff 1f       	adc	r31, r31
     642:	e1 56       	subi	r30, 0x61	; 97
     644:	ff 4f       	sbci	r31, 0xFF	; 255
     646:	85 91       	lpm	r24, Z+
     648:	94 91       	lpm	r25, Z
     64a:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     64e:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     652:	de cf       	rjmp	.-68     	; 0x610 <FUNCShowAbout+0x8>
     654:	1f 91       	pop	r17
     656:	08 95       	ret

00000658 <FUNCChangeSettings>:
     658:	1f 93       	push	r17
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	8e bb       	out	0x1e, r24	; 30
     65e:	10 e0       	ldi	r17, 0x00	; 0
     660:	8e b3       	in	r24, 0x1e	; 30
     662:	88 23       	and	r24, r24
     664:	e9 f3       	breq	.-6      	; 0x660 <FUNCChangeSettings+0x8>
     666:	f6 9b       	sbis	0x1e, 6	; 30
     668:	06 c0       	rjmp	.+12     	; 0x676 <FUNCChangeSettings+0x1e>
     66a:	11 23       	and	r17, r17
     66c:	11 f4       	brne	.+4      	; 0x672 <FUNCChangeSettings+0x1a>
     66e:	16 e0       	ldi	r17, 0x06	; 6
     670:	19 c0       	rjmp	.+50     	; 0x6a4 <FUNCChangeSettings+0x4c>
     672:	11 50       	subi	r17, 0x01	; 1
     674:	17 c0       	rjmp	.+46     	; 0x6a4 <FUNCChangeSettings+0x4c>
     676:	f7 9b       	sbis	0x1e, 7	; 30
     678:	06 c0       	rjmp	.+12     	; 0x686 <FUNCChangeSettings+0x2e>
     67a:	16 30       	cpi	r17, 0x06	; 6
     67c:	11 f4       	brne	.+4      	; 0x682 <FUNCChangeSettings+0x2a>
     67e:	10 e0       	ldi	r17, 0x00	; 0
     680:	11 c0       	rjmp	.+34     	; 0x6a4 <FUNCChangeSettings+0x4c>
     682:	1f 5f       	subi	r17, 0xFF	; 255
     684:	0f c0       	rjmp	.+30     	; 0x6a4 <FUNCChangeSettings+0x4c>
     686:	f4 9b       	sbis	0x1e, 4	; 30
     688:	0b c0       	rjmp	.+22     	; 0x6a0 <FUNCChangeSettings+0x48>
     68a:	e1 2f       	mov	r30, r17
     68c:	ff 27       	eor	r31, r31
     68e:	ee 0f       	add	r30, r30
     690:	ff 1f       	adc	r31, r31
     692:	e6 56       	subi	r30, 0x66	; 102
     694:	fe 4f       	sbci	r31, 0xFE	; 254
     696:	85 91       	lpm	r24, Z+
     698:	94 91       	lpm	r25, Z
     69a:	fc 01       	movw	r30, r24
     69c:	09 95       	icall
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <FUNCChangeSettings+0x4c>
     6a0:	f2 99       	sbic	0x1e, 2	; 30
     6a2:	0d c0       	rjmp	.+26     	; 0x6be <FUNCChangeSettings+0x66>
     6a4:	e1 2f       	mov	r30, r17
     6a6:	ff 27       	eor	r31, r31
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	e4 57       	subi	r30, 0x74	; 116
     6ae:	fe 4f       	sbci	r31, 0xFE	; 254
     6b0:	85 91       	lpm	r24, Z+
     6b2:	94 91       	lpm	r25, Z
     6b4:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     6b8:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     6bc:	d1 cf       	rjmp	.-94     	; 0x660 <FUNCChangeSettings+0x8>
     6be:	1f 91       	pop	r17
     6c0:	08 95       	ret

000006c2 <FUNCSetAutoSleepTimeOut>:
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
     6d0:	28 97       	sbiw	r28, 0x08	; 8
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     6dc:	ab e8       	ldi	r26, 0x8B	; 139
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
     6e4:	80 2d       	mov	r24, r0
     6e6:	08 2f       	mov	r16, r24
     6e8:	85 30       	cpi	r24, 0x05	; 5
     6ea:	08 f0       	brcs	.+2      	; 0x6ee <FUNCSetAutoSleepTimeOut+0x2c>
     6ec:	04 e0       	ldi	r16, 0x04	; 4
     6ee:	65 e9       	ldi	r22, 0x95	; 149
     6f0:	72 e0       	ldi	r23, 0x02	; 2
     6f2:	ce 01       	movw	r24, r28
     6f4:	01 96       	adiw	r24, 0x01	; 1
     6f6:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <strcpy_P>
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	8e bb       	out	0x1e, r24	; 30
     6fe:	8e b3       	in	r24, 0x1e	; 30
     700:	88 23       	and	r24, r24
     702:	e9 f3       	breq	.-6      	; 0x6fe <FUNCSetAutoSleepTimeOut+0x3c>
     704:	f6 9b       	sbis	0x1e, 6	; 30
     706:	05 c0       	rjmp	.+10     	; 0x712 <FUNCSetAutoSleepTimeOut+0x50>
     708:	00 23       	and	r16, r16
     70a:	11 f4       	brne	.+4      	; 0x710 <FUNCSetAutoSleepTimeOut+0x4e>
     70c:	04 e0       	ldi	r16, 0x04	; 4
     70e:	01 c0       	rjmp	.+2      	; 0x712 <FUNCSetAutoSleepTimeOut+0x50>
     710:	01 50       	subi	r16, 0x01	; 1
     712:	f7 9b       	sbis	0x1e, 7	; 30
     714:	06 c0       	rjmp	.+12     	; 0x722 <FUNCSetAutoSleepTimeOut+0x60>
     716:	04 30       	cpi	r16, 0x04	; 4
     718:	11 f4       	brne	.+4      	; 0x71e <FUNCSetAutoSleepTimeOut+0x5c>
     71a:	00 e0       	ldi	r16, 0x00	; 0
     71c:	06 c0       	rjmp	.+12     	; 0x72a <FUNCSetAutoSleepTimeOut+0x68>
     71e:	0f 5f       	subi	r16, 0xFF	; 255
     720:	02 c0       	rjmp	.+4      	; 0x726 <FUNCSetAutoSleepTimeOut+0x64>
     722:	f2 99       	sbic	0x1e, 2	; 30
     724:	1d c0       	rjmp	.+58     	; 0x760 <FUNCSetAutoSleepTimeOut+0x9e>
     726:	00 23       	and	r16, r16
     728:	29 f4       	brne	.+10     	; 0x734 <FUNCSetAutoSleepTimeOut+0x72>
     72a:	81 e9       	ldi	r24, 0x91	; 145
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     732:	13 c0       	rjmp	.+38     	; 0x75a <FUNCSetAutoSleepTimeOut+0x98>
     734:	e0 2f       	mov	r30, r16
     736:	ff 27       	eor	r31, r31
     738:	ef 51       	subi	r30, 0x1F	; 31
     73a:	fc 4f       	sbci	r31, 0xFC	; 252
     73c:	e4 91       	lpm	r30, Z
     73e:	7e 01       	movw	r14, r28
     740:	08 94       	sec
     742:	e1 1c       	adc	r14, r1
     744:	f1 1c       	adc	r15, r1
     746:	b7 01       	movw	r22, r14
     748:	8e 2f       	mov	r24, r30
     74a:	99 27       	eor	r25, r25
     74c:	0e 94 9c 02 	call	0x538	; 0x538 <MAIN_IntToStr>
     750:	80 e2       	ldi	r24, 0x20	; 32
     752:	8c 83       	std	Y+4, r24	; 0x04
     754:	c7 01       	movw	r24, r14
     756:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_puts>
     75a:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     75e:	cf cf       	rjmp	.-98     	; 0x6fe <FUNCSetAutoSleepTimeOut+0x3c>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     760:	ab e8       	ldi	r26, 0x8B	; 139
     762:	b0 e0       	ldi	r27, 0x00	; 0
     764:	00 2e       	mov	r0, r16
     766:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
     76a:	0e 94 40 0c 	call	0x1880	; 0x1880 <TOUT_SetupSleepTimer>
     76e:	28 96       	adiw	r28, 0x08	; 8
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	08 95       	ret

00000786 <MAIN_ShowError>:
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	64 97       	sbiw	r28, 0x14	; 20
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	25 e4       	ldi	r18, 0x45	; 69
     79c:	29 83       	std	Y+1, r18	; 0x01
     79e:	2e e3       	ldi	r18, 0x3E	; 62
     7a0:	2a 83       	std	Y+2, r18	; 0x02
     7a2:	bc 01       	movw	r22, r24
     7a4:	ce 01       	movw	r24, r28
     7a6:	03 96       	adiw	r24, 0x03	; 3
     7a8:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <strcpy_P>
     7ac:	ce 01       	movw	r24, r28
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_puts>
     7b4:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     7b8:	f4 9b       	sbis	0x1e, 4	; 30
     7ba:	fe cf       	rjmp	.-4      	; 0x7b8 <MAIN_ShowError+0x32>
     7bc:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     7c0:	64 96       	adiw	r28, 0x14	; 20
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <FUNCStorageInfo>:
     7d2:	1f 93       	push	r17
     7d4:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	8e bb       	out	0x1e, r24	; 30
     7dc:	10 e0       	ldi	r17, 0x00	; 0
     7de:	8e b3       	in	r24, 0x1e	; 30
     7e0:	88 23       	and	r24, r24
     7e2:	e9 f3       	breq	.-6      	; 0x7de <FUNCStorageInfo+0xc>
     7e4:	8e b3       	in	r24, 0x1e	; 30
     7e6:	80 7c       	andi	r24, 0xC0	; 192
     7e8:	19 f0       	breq	.+6      	; 0x7f0 <FUNCStorageInfo+0x1e>
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	18 27       	eor	r17, r24
     7ee:	36 c0       	rjmp	.+108    	; 0x85c <FUNCStorageInfo+0x8a>
     7f0:	f2 99       	sbic	0x1e, 2	; 30
     7f2:	3f c0       	rjmp	.+126    	; 0x872 <FUNCStorageInfo+0xa0>
     7f4:	f4 9b       	sbis	0x1e, 4	; 30
     7f6:	32 c0       	rjmp	.+100    	; 0x85c <FUNCStorageInfo+0x8a>
     7f8:	11 30       	cpi	r17, 0x01	; 1
     7fa:	71 f5       	brne	.+92     	; 0x858 <FUNCStorageInfo+0x86>
     7fc:	84 eb       	ldi	r24, 0xB4	; 180
     7fe:	99 e0       	ldi	r25, 0x09	; 9
     800:	90 93 01 01 	sts	0x0101, r25
     804:	80 93 00 01 	sts	0x0100, r24
     808:	0e 94 ac 09 	call	0x1358	; 0x1358 <SPI_SPIInit>
     80c:	10 92 47 01 	sts	0x0147, r1
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
     816:	0e 94 c1 0b 	call	0x1782	; 0x1782 <DF_CheckCorrectOnboardChip>
     81a:	88 23       	and	r24, r24
     81c:	41 f0       	breq	.+16     	; 0x82e <FUNCStorageInfo+0x5c>
     81e:	0e 94 29 1a 	call	0x3452	; 0x3452 <TM_ShowTags>
     822:	80 91 64 00 	lds	r24, 0x0064
     826:	84 60       	ori	r24, 0x04	; 4
     828:	80 93 64 00 	sts	0x0064, r24
     82c:	17 c0       	rjmp	.+46     	; 0x85c <FUNCStorageInfo+0x8a>
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <PM_GetStoredDataSize>
     834:	61 15       	cp	r22, r1
     836:	71 05       	cpc	r23, r1
     838:	81 05       	cpc	r24, r1
     83a:	91 05       	cpc	r25, r1
     83c:	79 f4       	brne	.+30     	; 0x85c <FUNCStorageInfo+0x8a>
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
     844:	80 91 64 00 	lds	r24, 0x0064
     848:	84 60       	ori	r24, 0x04	; 4
     84a:	80 93 64 00 	sts	0x0064, r24
     84e:	82 e8       	ldi	r24, 0x82	; 130
     850:	92 e0       	ldi	r25, 0x02	; 2
     852:	0e 94 c3 03 	call	0x786	; 0x786 <MAIN_ShowError>
     856:	02 c0       	rjmp	.+4      	; 0x85c <FUNCStorageInfo+0x8a>
     858:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <PM_ShowStoredItemSizes>
     85c:	8f e0       	ldi	r24, 0x0F	; 15
     85e:	18 9f       	mul	r17, r24
     860:	c0 01       	movw	r24, r0
     862:	11 24       	eor	r1, r1
     864:	86 5a       	subi	r24, 0xA6	; 166
     866:	9d 4f       	sbci	r25, 0xFD	; 253
     868:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     86c:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     870:	b6 cf       	rjmp	.-148    	; 0x7de <FUNCStorageInfo+0xc>
     872:	1f 91       	pop	r17
     874:	08 95       	ret

00000876 <MAIN_ShowProgType>:
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	27 97       	sbiw	r28, 0x07	; 7
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	f8 2e       	mov	r15, r24
     892:	8e 01       	movw	r16, r28
     894:	0f 5f       	subi	r16, 0xFF	; 255
     896:	1f 4f       	sbci	r17, 0xFF	; 255
     898:	65 e2       	ldi	r22, 0x25	; 37
     89a:	73 e0       	ldi	r23, 0x03	; 3
     89c:	c8 01       	movw	r24, r16
     89e:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <strcpy_P>
     8a2:	fe 82       	std	Y+6, r15	; 0x06
     8a4:	c8 01       	movw	r24, r16
     8a6:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_puts>
     8aa:	27 96       	adiw	r28, 0x07	; 7
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	08 95       	ret

000008c2 <FUNCStoreProgram>:
     8c2:	84 eb       	ldi	r24, 0xB4	; 180
     8c4:	99 e0       	ldi	r25, 0x09	; 9
     8c6:	90 93 01 01 	sts	0x0101, r25
     8ca:	80 93 00 01 	sts	0x0100, r24
     8ce:	0e 94 ac 09 	call	0x1358	; 0x1358 <SPI_SPIInit>
     8d2:	10 92 47 01 	sts	0x0147, r1
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
     8dc:	0e 94 c1 0b 	call	0x1782	; 0x1782 <DF_CheckCorrectOnboardChip>
     8e0:	88 23       	and	r24, r24
     8e2:	e1 f0       	breq	.+56     	; 0x91c <FUNCStoreProgram+0x5a>
     8e4:	87 ea       	ldi	r24, 0xA7	; 167
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     8ec:	0e 94 e6 07 	call	0xfcc	; 0xfcc <OSCCAL_Calibrate>
     8f0:	80 91 c1 00 	lds	r24, 0x00C1
     8f4:	80 78       	andi	r24, 0x80	; 128
     8f6:	88 61       	ori	r24, 0x18	; 24
     8f8:	80 93 c1 00 	sts	0x00C1, r24
     8fc:	8c eb       	ldi	r24, 0xBC	; 188
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     904:	88 e5       	ldi	r24, 0x58	; 88
     906:	97 e1       	ldi	r25, 0x17	; 23
     908:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <V2P_RunStateMachine>
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
     912:	80 91 64 00 	lds	r24, 0x0064
     916:	84 60       	ori	r24, 0x04	; 4
     918:	80 93 64 00 	sts	0x0064, r24
     91c:	08 95       	ret

0000091e <FUNCAVRISPMode>:
     91e:	87 ea       	ldi	r24, 0xA7	; 167
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     926:	0e 94 e6 07 	call	0xfcc	; 0xfcc <OSCCAL_Calibrate>
     92a:	e1 ec       	ldi	r30, 0xC1	; 193
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	80 81       	ld	r24, Z
     930:	80 78       	andi	r24, 0x80	; 128
     932:	88 61       	ori	r24, 0x18	; 24
     934:	80 83       	st	Z, r24
     936:	86 e3       	ldi	r24, 0x36	; 54
     938:	94 e0       	ldi	r25, 0x04	; 4
     93a:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     93e:	80 ef       	ldi	r24, 0xF0	; 240
     940:	92 e1       	ldi	r25, 0x12	; 18
     942:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <V2P_RunStateMachine>
     946:	08 95       	ret

00000948 <FUNCProgramDataflash>:
     948:	0e 94 2e 0a 	call	0x145c	; 0x145c <USI_SPIInitMaster>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	80 93 47 01 	sts	0x0147, r24
     952:	83 ef       	ldi	r24, 0xF3	; 243
     954:	99 e0       	ldi	r25, 0x09	; 9
     956:	90 93 01 01 	sts	0x0101, r25
     95a:	80 93 00 01 	sts	0x0100, r24
     95e:	87 ea       	ldi	r24, 0xA7	; 167
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     966:	0e 94 e6 07 	call	0xfcc	; 0xfcc <OSCCAL_Calibrate>
     96a:	e1 ec       	ldi	r30, 0xC1	; 193
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	80 81       	ld	r24, Z
     970:	80 78       	andi	r24, 0x80	; 128
     972:	88 61       	ori	r24, 0x18	; 24
     974:	80 83       	st	Z, r24
     976:	89 ef       	ldi	r24, 0xF9	; 249
     978:	93 e0       	ldi	r25, 0x03	; 3
     97a:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     97e:	82 e5       	ldi	r24, 0x52	; 82
     980:	9d e0       	ldi	r25, 0x0D	; 13
     982:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <V2P_RunStateMachine>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
     98c:	e4 e6       	ldi	r30, 0x64	; 100
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	84 60       	ori	r24, 0x04	; 4
     994:	80 83       	st	Z, r24
     996:	08 95       	ret

00000998 <MAIN_CrashProgram>:
     998:	8c 01       	movw	r16, r24
     99a:	80 91 64 00 	lds	r24, 0x0064
     99e:	84 60       	ori	r24, 0x04	; 4
     9a0:	80 93 64 00 	sts	0x0064, r24
     9a4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <USI_SPIOff>
     9a8:	10 92 b0 00 	sts	0x00B0, r1
     9ac:	10 92 70 00 	sts	0x0070, r1
     9b0:	10 92 81 00 	sts	0x0081, r1
     9b4:	80 e8       	ldi	r24, 0x80	; 128
     9b6:	80 93 61 00 	sts	0x0061, r24
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	80 93 61 00 	sts	0x0061, r24
     9c0:	10 92 c1 00 	sts	0x00C1, r1
     9c4:	c8 01       	movw	r24, r16
     9c6:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     9ca:	81 b3       	in	r24, 0x11	; 17
     9cc:	8f 7c       	andi	r24, 0xCF	; 207
     9ce:	80 63       	ori	r24, 0x30	; 48
     9d0:	81 bb       	out	0x11, r24	; 17
     9d2:	82 e3       	ldi	r24, 0x32	; 50
     9d4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <MAIN_Delay10MS>
     9d8:	81 b3       	in	r24, 0x11	; 17
     9da:	90 e1       	ldi	r25, 0x10	; 16
     9dc:	89 27       	eor	r24, r25
     9de:	f8 cf       	rjmp	.-16     	; 0x9d0 <MAIN_CrashProgram+0x38>

000009e0 <__vector_default>:
     9e0:	8e e1       	ldi	r24, 0x1E	; 30
     9e2:	93 e0       	ldi	r25, 0x03	; 3
     9e4:	0e 94 cc 04 	call	0x998	; 0x998 <MAIN_CrashProgram>

000009e8 <FUNCProgramAVR>:
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	63 97       	sbiw	r28, 0x13	; 19
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
     a00:	84 eb       	ldi	r24, 0xB4	; 180
     a02:	99 e0       	ldi	r25, 0x09	; 9
     a04:	90 93 01 01 	sts	0x0101, r25
     a08:	80 93 00 01 	sts	0x0100, r24
     a0c:	0e 94 ac 09 	call	0x1358	; 0x1358 <SPI_SPIInit>
     a10:	10 92 47 01 	sts	0x0147, r1
     a14:	0e 94 c1 0b 	call	0x1782	; 0x1782 <DF_CheckCorrectOnboardChip>
     a18:	88 23       	and	r24, r24
     a1a:	09 f4       	brne	.+2      	; 0xa1e <FUNCProgramAVR+0x36>
     a1c:	1d c1       	rjmp	.+570    	; 0xc58 <FUNCProgramAVR+0x270>
     a1e:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	8e bb       	out	0x1e, r24	; 30
     a26:	10 e0       	ldi	r17, 0x00	; 0
     a28:	8e b3       	in	r24, 0x1e	; 30
     a2a:	88 23       	and	r24, r24
     a2c:	e9 f3       	breq	.-6      	; 0xa28 <FUNCProgramAVR+0x40>
     a2e:	f2 99       	sbic	0x1e, 2	; 30
     a30:	13 c1       	rjmp	.+550    	; 0xc58 <FUNCProgramAVR+0x270>
     a32:	f4 99       	sbic	0x1e, 4	; 30
     a34:	1c c0       	rjmp	.+56     	; 0xa6e <FUNCProgramAVR+0x86>
     a36:	f6 9b       	sbis	0x1e, 6	; 30
     a38:	06 c0       	rjmp	.+12     	; 0xa46 <FUNCProgramAVR+0x5e>
     a3a:	11 23       	and	r17, r17
     a3c:	11 f4       	brne	.+4      	; 0xa42 <FUNCProgramAVR+0x5a>
     a3e:	17 e0       	ldi	r17, 0x07	; 7
     a40:	09 c0       	rjmp	.+18     	; 0xa54 <FUNCProgramAVR+0x6c>
     a42:	11 50       	subi	r17, 0x01	; 1
     a44:	07 c0       	rjmp	.+14     	; 0xa54 <FUNCProgramAVR+0x6c>
     a46:	f7 9b       	sbis	0x1e, 7	; 30
     a48:	05 c0       	rjmp	.+10     	; 0xa54 <FUNCProgramAVR+0x6c>
     a4a:	17 30       	cpi	r17, 0x07	; 7
     a4c:	11 f4       	brne	.+4      	; 0xa52 <FUNCProgramAVR+0x6a>
     a4e:	10 e0       	ldi	r17, 0x00	; 0
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <FUNCProgramAVR+0x6c>
     a52:	1f 5f       	subi	r17, 0xFF	; 255
     a54:	e1 2f       	mov	r30, r17
     a56:	ff 27       	eor	r31, r31
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ea 5e       	subi	r30, 0xEA	; 234
     a5e:	fd 4f       	sbci	r31, 0xFD	; 253
     a60:	85 91       	lpm	r24, Z+
     a62:	94 91       	lpm	r25, Z
     a64:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     a68:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     a6c:	dd cf       	rjmp	.-70     	; 0xa28 <FUNCProgramAVR+0x40>
     a6e:	80 e8       	ldi	r24, 0x80	; 128
     a70:	80 93 61 00 	sts	0x0061, r24
     a74:	10 92 61 00 	sts	0x0061, r1
     a78:	87 ea       	ldi	r24, 0xA7	; 167
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     a80:	10 92 81 00 	sts	0x0081, r1
     a84:	0e 94 2e 0a 	call	0x145c	; 0x145c <USI_SPIInitMaster>
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 66 02 	call	0x4cc	; 0x4cc <MAIN_ResetCSLine>
     a8e:	27 e2       	ldi	r18, 0x27	; 39
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	e1 e9       	ldi	r30, 0x91	; 145
     a94:	f1 e0       	ldi	r31, 0x01	; 1
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     a96:	d9 01       	movw	r26, r18
     a98:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
     a9c:	80 2d       	mov	r24, r0
     a9e:	81 93       	st	Z+, r24
     aa0:	2f 5f       	subi	r18, 0xFF	; 255
     aa2:	3f 4f       	sbci	r19, 0xFF	; 255
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	23 33       	cpi	r18, 0x33	; 51
     aa8:	38 07       	cpc	r19, r24
     aaa:	a9 f7       	brne	.-22     	; 0xa96 <FUNCProgramAVR+0xae>
     aac:	0e 94 8f 12 	call	0x251e	; 0x251e <ISPCC_EnterChipProgrammingMode>
     ab0:	10 92 a9 02 	sts	0x02A9, r1
     ab4:	10 92 aa 02 	sts	0x02AA, r1
     ab8:	10 92 ab 02 	sts	0x02AB, r1
     abc:	10 92 ac 02 	sts	0x02AC, r1
     ac0:	80 91 92 01 	lds	r24, 0x0192
     ac4:	88 23       	and	r24, r24
     ac6:	09 f0       	breq	.+2      	; 0xaca <FUNCProgramAVR+0xe2>
     ac8:	aa c0       	rjmp	.+340    	; 0xc1e <FUNCProgramAVR+0x236>
     aca:	11 23       	and	r17, r17
     acc:	31 f0       	breq	.+12     	; 0xada <FUNCProgramAVR+0xf2>
     ace:	17 30       	cpi	r17, 0x07	; 7
     ad0:	21 f0       	breq	.+8      	; 0xada <FUNCProgramAVR+0xf2>
     ad2:	11 30       	cpi	r17, 0x01	; 1
     ad4:	11 f0       	breq	.+4      	; 0xada <FUNCProgramAVR+0xf2>
     ad6:	13 30       	cpi	r17, 0x03	; 3
     ad8:	91 f4       	brne	.+36     	; 0xafe <FUNCProgramAVR+0x116>
     ada:	83 e4       	ldi	r24, 0x43	; 67
     adc:	0e 94 3b 04 	call	0x876	; 0x876 <MAIN_ShowProgType>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     ae0:	a7 e1       	ldi	r26, 0x17	; 23
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
     ae8:	80 2d       	mov	r24, r0
     aea:	81 30       	cpi	r24, 0x01	; 1
     aec:	31 f0       	breq	.+12     	; 0xafa <FUNCProgramAVR+0x112>
     aee:	81 e1       	ldi	r24, 0x11	; 17
     af0:	93 e0       	ldi	r25, 0x03	; 3
     af2:	0e 94 c3 03 	call	0x786	; 0x786 <MAIN_ShowError>
     af6:	02 e0       	ldi	r16, 0x02	; 2
     af8:	03 c0       	rjmp	.+6      	; 0xb00 <FUNCProgramAVR+0x118>
     afa:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <PM_SendEraseCommand>
     afe:	00 e0       	ldi	r16, 0x00	; 0
     b00:	12 30       	cpi	r17, 0x02	; 2
     b02:	10 f0       	brcs	.+4      	; 0xb08 <FUNCProgramAVR+0x120>
     b04:	13 30       	cpi	r17, 0x03	; 3
     b06:	c1 f4       	brne	.+48     	; 0xb38 <FUNCProgramAVR+0x150>
     b08:	00 23       	and	r16, r16
     b0a:	a1 f4       	brne	.+40     	; 0xb34 <FUNCProgramAVR+0x14c>
     b0c:	84 e4       	ldi	r24, 0x44	; 68
     b0e:	0e 94 3b 04 	call	0x876	; 0x876 <MAIN_ShowProgType>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <PM_GetStoredDataSize>
     b18:	61 15       	cp	r22, r1
     b1a:	71 05       	cpc	r23, r1
     b1c:	81 05       	cpc	r24, r1
     b1e:	91 05       	cpc	r25, r1
     b20:	31 f4       	brne	.+12     	; 0xb2e <FUNCProgramAVR+0x146>
     b22:	89 e0       	ldi	r24, 0x09	; 9
     b24:	93 e0       	ldi	r25, 0x03	; 3
     b26:	0e 94 c3 03 	call	0x786	; 0x786 <MAIN_ShowError>
     b2a:	03 e0       	ldi	r16, 0x03	; 3
     b2c:	03 c0       	rjmp	.+6      	; 0xb34 <FUNCProgramAVR+0x14c>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <PM_CreateProgrammingPackets>
     b34:	11 23       	and	r17, r17
     b36:	21 f0       	breq	.+8      	; 0xb40 <FUNCProgramAVR+0x158>
     b38:	12 30       	cpi	r17, 0x02	; 2
     b3a:	11 f0       	breq	.+4      	; 0xb40 <FUNCProgramAVR+0x158>
     b3c:	13 30       	cpi	r17, 0x03	; 3
     b3e:	b1 f4       	brne	.+44     	; 0xb6c <FUNCProgramAVR+0x184>
     b40:	85 e4       	ldi	r24, 0x45	; 69
     b42:	0e 94 3b 04 	call	0x876	; 0x876 <MAIN_ShowProgType>
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <PM_GetStoredDataSize>
     b4c:	61 15       	cp	r22, r1
     b4e:	71 05       	cpc	r23, r1
     b50:	81 05       	cpc	r24, r1
     b52:	91 05       	cpc	r25, r1
     b54:	31 f4       	brne	.+12     	; 0xb62 <FUNCProgramAVR+0x17a>
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	0e 94 c3 03 	call	0x786	; 0x786 <MAIN_ShowError>
     b5e:	03 e0       	ldi	r16, 0x03	; 3
     b60:	03 c0       	rjmp	.+6      	; 0xb68 <FUNCProgramAVR+0x180>
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <PM_CreateProgrammingPackets>
     b68:	11 23       	and	r17, r17
     b6a:	21 f0       	breq	.+8      	; 0xb74 <FUNCProgramAVR+0x18c>
     b6c:	14 30       	cpi	r17, 0x04	; 4
     b6e:	11 f0       	breq	.+4      	; 0xb74 <FUNCProgramAVR+0x18c>
     b70:	16 30       	cpi	r17, 0x06	; 6
     b72:	a9 f4       	brne	.+42     	; 0xb9e <FUNCProgramAVR+0x1b6>
     b74:	86 e4       	ldi	r24, 0x46	; 70
     b76:	0e 94 3b 04 	call	0x876	; 0x876 <MAIN_ShowProgType>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     b7a:	a3 e3       	ldi	r26, 0x33	; 51
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
     b82:	80 2d       	mov	r24, r0
     b84:	88 23       	and	r24, r24
     b86:	31 f4       	brne	.+12     	; 0xb94 <FUNCProgramAVR+0x1ac>
     b88:	81 ef       	ldi	r24, 0xF1	; 241
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	0e 94 c3 03 	call	0x786	; 0x786 <MAIN_ShowError>
     b90:	03 e0       	ldi	r16, 0x03	; 3
     b92:	03 c0       	rjmp	.+6      	; 0xb9a <FUNCProgramAVR+0x1b2>
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <PM_SendFuseLockBytes>
     b9a:	11 23       	and	r17, r17
     b9c:	79 f0       	breq	.+30     	; 0xbbc <FUNCProgramAVR+0x1d4>
     b9e:	15 30       	cpi	r17, 0x05	; 5
     ba0:	69 f0       	breq	.+26     	; 0xbbc <FUNCProgramAVR+0x1d4>
     ba2:	16 30       	cpi	r17, 0x06	; 6
     ba4:	19 f5       	brne	.+70     	; 0xbec <FUNCProgramAVR+0x204>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	0e 94 66 02 	call	0x4cc	; 0x4cc <MAIN_ResetCSLine>
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	0e 94 52 02 	call	0x4a4	; 0x4a4 <MAIN_Delay10MS>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	0e 94 66 02 	call	0x4cc	; 0x4cc <MAIN_ResetCSLine>
     bb8:	0e 94 8f 12 	call	0x251e	; 0x251e <ISPCC_EnterChipProgrammingMode>
     bbc:	8c e4       	ldi	r24, 0x4C	; 76
     bbe:	0e 94 3b 04 	call	0x876	; 0x876 <MAIN_ShowProgType>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     bc2:	a4 e3       	ldi	r26, 0x34	; 52
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
     bca:	80 2d       	mov	r24, r0
     bcc:	88 23       	and	r24, r24
     bce:	59 f4       	brne	.+22     	; 0xbe6 <FUNCProgramAVR+0x1fe>
     bd0:	83 ee       	ldi	r24, 0xE3	; 227
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	0e 94 c3 03 	call	0x786	; 0x786 <MAIN_ShowError>
     bd8:	62 ed       	ldi	r22, 0xD2	; 210
     bda:	72 e0       	ldi	r23, 0x02	; 2
     bdc:	ce 01       	movw	r24, r28
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <strcpy_P>
     be4:	0b c0       	rjmp	.+22     	; 0xbfc <FUNCProgramAVR+0x214>
     be6:	83 e0       	ldi	r24, 0x03	; 3
     be8:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <PM_SendFuseLockBytes>
     bec:	62 ed       	ldi	r22, 0xD2	; 210
     bee:	72 e0       	ldi	r23, 0x02	; 2
     bf0:	ce 01       	movw	r24, r28
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <strcpy_P>
     bf8:	00 23       	and	r16, r16
     bfa:	31 f0       	breq	.+12     	; 0xc08 <FUNCProgramAVR+0x220>
     bfc:	6b ec       	ldi	r22, 0xCB	; 203
     bfe:	72 e0       	ldi	r23, 0x02	; 2
     c00:	ce 01       	movw	r24, r28
     c02:	0d 96       	adiw	r24, 0x0d	; 13
     c04:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <strcpy_P>
     c08:	ce 01       	movw	r24, r28
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_puts>
     c10:	8a ef       	ldi	r24, 0xFA	; 250
     c12:	0e 94 52 02 	call	0x4a4	; 0x4a4 <MAIN_Delay10MS>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	0e 94 52 02 	call	0x4a4	; 0x4a4 <MAIN_Delay10MS>
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <FUNCProgramAVR+0x23e>
     c1e:	8b e2       	ldi	r24, 0x2B	; 43
     c20:	94 e0       	ldi	r25, 0x04	; 4
     c22:	0e 94 c3 03 	call	0x786	; 0x786 <MAIN_ShowError>
     c26:	0e 94 40 0c 	call	0x1880	; 0x1880 <TOUT_SetupSleepTimer>
     c2a:	80 e8       	ldi	r24, 0x80	; 128
     c2c:	80 93 61 00 	sts	0x0061, r24
     c30:	83 e0       	ldi	r24, 0x03	; 3
     c32:	80 93 61 00 	sts	0x0061, r24
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	0e 94 66 02 	call	0x4cc	; 0x4cc <MAIN_ResetCSLine>
     c3c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <USI_SPIOff>
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
     c46:	80 91 64 00 	lds	r24, 0x0064
     c4a:	84 60       	ori	r24, 0x04	; 4
     c4c:	80 93 64 00 	sts	0x0064, r24
     c50:	81 b3       	in	r24, 0x11	; 17
     c52:	8f 7c       	andi	r24, 0xCF	; 207
     c54:	80 61       	ori	r24, 0x10	; 16
     c56:	81 bb       	out	0x11, r24	; 17
     c58:	63 96       	adiw	r28, 0x13	; 19
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	08 95       	ret

00000c6e <main>:
     c6e:	1f 93       	push	r17
     c70:	80 e8       	ldi	r24, 0x80	; 128
     c72:	85 bf       	out	0x35, r24	; 53
     c74:	85 bf       	out	0x35, r24	; 53
     c76:	80 bf       	out	0x30, r24	; 48
     c78:	85 e0       	ldi	r24, 0x05	; 5
     c7a:	80 93 64 00 	sts	0x0064, r24
     c7e:	80 e3       	ldi	r24, 0x30	; 48
     c80:	80 bb       	out	0x10, r24	; 16
     c82:	87 e2       	ldi	r24, 0x27	; 39
     c84:	84 b9       	out	0x04, r24	; 4
     c86:	8f ed       	ldi	r24, 0xDF	; 223
     c88:	85 b9       	out	0x05, r24	; 5
     c8a:	8c e0       	ldi	r24, 0x0C	; 12
     c8c:	8e b9       	out	0x0e, r24	; 14
     c8e:	80 93 6b 00 	sts	0x006B, r24
     c92:	80 ed       	ldi	r24, 0xD0	; 208
     c94:	80 93 6c 00 	sts	0x006C, r24
     c98:	80 ec       	ldi	r24, 0xC0	; 192
     c9a:	8d bb       	out	0x1d, r24	; 29
     c9c:	8c bb       	out	0x1c, r24	; 28
     c9e:	81 b3       	in	r24, 0x11	; 17
     ca0:	8f 7c       	andi	r24, 0xCF	; 207
     ca2:	80 63       	ori	r24, 0x30	; 48
     ca4:	81 bb       	out	0x11, r24	; 17
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	0e 94 66 02 	call	0x4cc	; 0x4cc <MAIN_ResetCSLine>
     cac:	0e 94 74 08 	call	0x10e8	; 0x10e8 <LCD_Init>
     cb0:	8f e0       	ldi	r24, 0x0F	; 15
     cb2:	80 93 e7 00 	sts	0x00E7, r24
     cb6:	87 ea       	ldi	r24, 0xA7	; 167
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     cbe:	78 94       	sei
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     cc0:	ad e8       	ldi	r26, 0x8D	; 141
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
     cc8:	80 2d       	mov	r24, r0
     cca:	8a 37       	cpi	r24, 0x7A	; 122
     ccc:	89 f0       	breq	.+34     	; 0xcf0 <main+0x82>
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	2f ef       	ldi	r18, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     cd4:	dc 01       	movw	r26, r24
     cd6:	02 2e       	mov	r0, r18
     cd8:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	8e 38       	cpi	r24, 0x8E	; 142
     ce0:	91 05       	cpc	r25, r1
     ce2:	c1 f7       	brne	.-16     	; 0xcd4 <main+0x66>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     ce4:	8a e7       	ldi	r24, 0x7A	; 122
     ce6:	ad e8       	ldi	r26, 0x8D	; 141
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	08 2e       	mov	r0, r24
     cec:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
     cf0:	a9 e8       	ldi	r26, 0x89	; 137
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
     cf8:	80 2d       	mov	r24, r0
     cfa:	8f 70       	andi	r24, 0x0F	; 15
     cfc:	80 93 e7 00 	sts	0x00E7, r24
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
     d06:	0e 94 9b 09 	call	0x1336	; 0x1336 <USART_Init>
     d0a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <OSCCAL_Calibrate>
     d0e:	0e 94 40 0c 	call	0x1880	; 0x1880 <TOUT_SetupSleepTimer>
     d12:	81 b3       	in	r24, 0x11	; 17
     d14:	8f 7c       	andi	r24, 0xCF	; 207
     d16:	80 61       	ori	r24, 0x10	; 16
     d18:	81 bb       	out	0x11, r24	; 17
     d1a:	80 e8       	ldi	r24, 0x80	; 128
     d1c:	80 93 61 00 	sts	0x0061, r24
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	80 93 61 00 	sts	0x0061, r24
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	8e bb       	out	0x1e, r24	; 30
     d2a:	10 e0       	ldi	r17, 0x00	; 0
     d2c:	8e b3       	in	r24, 0x1e	; 30
     d2e:	88 23       	and	r24, r24
     d30:	e9 f3       	breq	.-6      	; 0xd2c <main+0xbe>
     d32:	f6 9b       	sbis	0x1e, 6	; 30
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <main+0xd4>
     d36:	11 23       	and	r17, r17
     d38:	11 f4       	brne	.+4      	; 0xd3e <main+0xd0>
     d3a:	16 e0       	ldi	r17, 0x06	; 6
     d3c:	1b c0       	rjmp	.+54     	; 0xd74 <main+0x106>
     d3e:	11 50       	subi	r17, 0x01	; 1
     d40:	19 c0       	rjmp	.+50     	; 0xd74 <main+0x106>
     d42:	f7 9b       	sbis	0x1e, 7	; 30
     d44:	06 c0       	rjmp	.+12     	; 0xd52 <main+0xe4>
     d46:	16 30       	cpi	r17, 0x06	; 6
     d48:	11 f4       	brne	.+4      	; 0xd4e <main+0xe0>
     d4a:	10 e0       	ldi	r17, 0x00	; 0
     d4c:	13 c0       	rjmp	.+38     	; 0xd74 <main+0x106>
     d4e:	1f 5f       	subi	r17, 0xFF	; 255
     d50:	11 c0       	rjmp	.+34     	; 0xd74 <main+0x106>
     d52:	f4 9b       	sbis	0x1e, 4	; 30
     d54:	0b c0       	rjmp	.+22     	; 0xd6c <main+0xfe>
     d56:	e1 2f       	mov	r30, r17
     d58:	ff 27       	eor	r31, r31
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	ef 5e       	subi	r30, 0xEF	; 239
     d60:	fe 4f       	sbci	r31, 0xFE	; 254
     d62:	85 91       	lpm	r24, Z+
     d64:	94 91       	lpm	r25, Z
     d66:	fc 01       	movw	r30, r24
     d68:	09 95       	icall
     d6a:	04 c0       	rjmp	.+8      	; 0xd74 <main+0x106>
     d6c:	f3 9b       	sbis	0x1e, 3	; 30
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <main+0x106>
     d70:	0e 94 04 03 	call	0x608	; 0x608 <FUNCShowAbout>
     d74:	e1 2f       	mov	r30, r17
     d76:	ff 27       	eor	r31, r31
     d78:	ee 0f       	add	r30, r30
     d7a:	ff 1f       	adc	r31, r31
     d7c:	ed 5f       	subi	r30, 0xFD	; 253
     d7e:	fe 4f       	sbci	r31, 0xFE	; 254
     d80:	85 91       	lpm	r24, Z+
     d82:	94 91       	lpm	r25, Z
     d84:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     d88:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     d8c:	cf cf       	rjmp	.-98     	; 0xd2c <main+0xbe>

00000d8e <FUNCClearMem>:
     d8e:	84 eb       	ldi	r24, 0xB4	; 180
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     d96:	84 eb       	ldi	r24, 0xB4	; 180
     d98:	0e 94 52 02 	call	0x4a4	; 0x4a4 <MAIN_Delay10MS>
     d9c:	8e ea       	ldi	r24, 0xAE	; 174
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     da4:	8e b3       	in	r24, 0x1e	; 30
     da6:	88 23       	and	r24, r24
     da8:	e9 f3       	breq	.-6      	; 0xda4 <FUNCClearMem+0x16>
     daa:	f2 99       	sbic	0x1e, 2	; 30
     dac:	22 c0       	rjmp	.+68     	; 0xdf2 <FUNCClearMem+0x64>
     dae:	f3 9b       	sbis	0x1e, 3	; 30
     db0:	f9 cf       	rjmp	.-14     	; 0xda4 <FUNCClearMem+0x16>
     db2:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     db6:	87 ea       	ldi	r24, 0xA7	; 167
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     dbe:	81 b3       	in	r24, 0x11	; 17
     dc0:	8f 7c       	andi	r24, 0xCF	; 207
     dc2:	80 63       	ori	r24, 0x30	; 48
     dc4:	81 bb       	out	0x11, r24	; 17
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	2f ef       	ldi	r18, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     dcc:	dc 01       	movw	r26, r24
     dce:	02 2e       	mov	r0, r18
     dd0:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	8e 38       	cpi	r24, 0x8E	; 142
     dd8:	91 05       	cpc	r25, r1
     dda:	c1 f7       	brne	.-16     	; 0xdcc <FUNCClearMem+0x3e>
     ddc:	81 b3       	in	r24, 0x11	; 17
     dde:	8f 7c       	andi	r24, 0xCF	; 207
     de0:	80 61       	ori	r24, 0x10	; 16
     de2:	81 bb       	out	0x11, r24	; 17
     de4:	82 ea       	ldi	r24, 0xA2	; 162
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     dec:	8a ef       	ldi	r24, 0xFA	; 250
     dee:	0e 94 52 02 	call	0x4a4	; 0x4a4 <MAIN_Delay10MS>
     df2:	08 95       	ret

00000df4 <FUNCSetContrast>:
     df4:	1f 93       	push	r17
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	26 97       	sbiw	r28, 0x06	; 6
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     e0a:	a9 e8       	ldi	r26, 0x89	; 137
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
     e12:	80 2d       	mov	r24, r0
     e14:	18 2f       	mov	r17, r24
     e16:	1f 70       	andi	r17, 0x0F	; 15
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	8e bb       	out	0x1e, r24	; 30
     e1c:	8e b3       	in	r24, 0x1e	; 30
     e1e:	88 23       	and	r24, r24
     e20:	e9 f3       	breq	.-6      	; 0xe1c <FUNCSetContrast+0x28>
     e22:	f6 9b       	sbis	0x1e, 6	; 30
     e24:	04 c0       	rjmp	.+8      	; 0xe2e <FUNCSetContrast+0x3a>
     e26:	1f 30       	cpi	r17, 0x0F	; 15
     e28:	50 f4       	brcc	.+20     	; 0xe3e <FUNCSetContrast+0x4a>
     e2a:	1f 5f       	subi	r17, 0xFF	; 255
     e2c:	08 c0       	rjmp	.+16     	; 0xe3e <FUNCSetContrast+0x4a>
     e2e:	f7 9b       	sbis	0x1e, 7	; 30
     e30:	04 c0       	rjmp	.+8      	; 0xe3a <FUNCSetContrast+0x46>
     e32:	12 30       	cpi	r17, 0x02	; 2
     e34:	20 f0       	brcs	.+8      	; 0xe3e <FUNCSetContrast+0x4a>
     e36:	11 50       	subi	r17, 0x01	; 1
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <FUNCSetContrast+0x4a>
     e3a:	f2 99       	sbic	0x1e, 2	; 30
     e3c:	18 c0       	rjmp	.+48     	; 0xe6e <FUNCSetContrast+0x7a>
     e3e:	83 e4       	ldi	r24, 0x43	; 67
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	84 e5       	ldi	r24, 0x54	; 84
     e44:	8a 83       	std	Y+2, r24	; 0x02
     e46:	80 e2       	ldi	r24, 0x20	; 32
     e48:	8b 83       	std	Y+3, r24	; 0x03
     e4a:	be 01       	movw	r22, r28
     e4c:	6c 5f       	subi	r22, 0xFC	; 252
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	81 2f       	mov	r24, r17
     e52:	99 27       	eor	r25, r25
     e54:	0e 94 9c 02 	call	0x538	; 0x538 <MAIN_IntToStr>
     e58:	ce 01       	movw	r24, r28
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_puts>
     e60:	81 2f       	mov	r24, r17
     e62:	8f 70       	andi	r24, 0x0F	; 15
     e64:	80 93 e7 00 	sts	0x00E7, r24
     e68:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     e6c:	d7 cf       	rjmp	.-82     	; 0xe1c <FUNCSetContrast+0x28>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     e6e:	a9 e8       	ldi	r26, 0x89	; 137
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	01 2e       	mov	r0, r17
     e74:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
     e78:	26 96       	adiw	r28, 0x06	; 6
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	08 95       	ret

00000e8c <FUNCSetISPSpeed>:
     e8c:	1f 93       	push	r17
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     e8e:	a2 e0       	ldi	r26, 0x02	; 2
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
     e96:	80 2d       	mov	r24, r0
     e98:	18 2f       	mov	r17, r24
     e9a:	84 30       	cpi	r24, 0x04	; 4
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <FUNCSetISPSpeed+0x14>
     e9e:	13 e0       	ldi	r17, 0x03	; 3
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	8e bb       	out	0x1e, r24	; 30
     ea4:	8e b3       	in	r24, 0x1e	; 30
     ea6:	88 23       	and	r24, r24
     ea8:	e9 f3       	breq	.-6      	; 0xea4 <FUNCSetISPSpeed+0x18>
     eaa:	f6 9b       	sbis	0x1e, 6	; 30
     eac:	06 c0       	rjmp	.+12     	; 0xeba <FUNCSetISPSpeed+0x2e>
     eae:	11 23       	and	r17, r17
     eb0:	11 f4       	brne	.+4      	; 0xeb6 <FUNCSetISPSpeed+0x2a>
     eb2:	13 e0       	ldi	r17, 0x03	; 3
     eb4:	0c c0       	rjmp	.+24     	; 0xece <FUNCSetISPSpeed+0x42>
     eb6:	11 50       	subi	r17, 0x01	; 1
     eb8:	0a c0       	rjmp	.+20     	; 0xece <FUNCSetISPSpeed+0x42>
     eba:	f7 9b       	sbis	0x1e, 7	; 30
     ebc:	04 c0       	rjmp	.+8      	; 0xec6 <FUNCSetISPSpeed+0x3a>
     ebe:	13 30       	cpi	r17, 0x03	; 3
     ec0:	29 f0       	breq	.+10     	; 0xecc <FUNCSetISPSpeed+0x40>
     ec2:	1f 5f       	subi	r17, 0xFF	; 255
     ec4:	04 c0       	rjmp	.+8      	; 0xece <FUNCSetISPSpeed+0x42>
     ec6:	f2 9b       	sbis	0x1e, 2	; 30
     ec8:	02 c0       	rjmp	.+4      	; 0xece <FUNCSetISPSpeed+0x42>
     eca:	0c c0       	rjmp	.+24     	; 0xee4 <FUNCSetISPSpeed+0x58>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     ecc:	10 e0       	ldi	r17, 0x00	; 0
     ece:	8a e0       	ldi	r24, 0x0A	; 10
     ed0:	18 9f       	mul	r17, r24
     ed2:	c0 01       	movw	r24, r0
     ed4:	11 24       	eor	r1, r1
     ed6:	8a 5d       	subi	r24, 0xDA	; 218
     ed8:	9d 4f       	sbci	r25, 0xFD	; 253
     eda:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     ede:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     ee2:	e0 cf       	rjmp	.-64     	; 0xea4 <FUNCSetISPSpeed+0x18>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     ee4:	a2 e0       	ldi	r26, 0x02	; 2
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	01 2e       	mov	r0, r17
     eea:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
     eee:	1f 91       	pop	r17
     ef0:	08 95       	ret

00000ef2 <FUNCSetResetMode>:
     ef2:	1f 93       	push	r17
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     ef4:	ac e8       	ldi	r26, 0x8C	; 140
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
     efc:	80 2d       	mov	r24, r0
     efe:	18 2f       	mov	r17, r24
     f00:	11 70       	andi	r17, 0x01	; 1
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	8e bb       	out	0x1e, r24	; 30
     f06:	8e b3       	in	r24, 0x1e	; 30
     f08:	88 23       	and	r24, r24
     f0a:	e9 f3       	breq	.-6      	; 0xf06 <FUNCSetResetMode+0x14>
     f0c:	f6 99       	sbic	0x1e, 6	; 30
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <FUNCSetResetMode+0x22>
     f10:	f7 9b       	sbis	0x1e, 7	; 30
     f12:	03 c0       	rjmp	.+6      	; 0xf1a <FUNCSetResetMode+0x28>
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	18 27       	eor	r17, r24
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <FUNCSetResetMode+0x2c>
     f1a:	f2 99       	sbic	0x1e, 2	; 30
     f1c:	0b c0       	rjmp	.+22     	; 0xf34 <FUNCSetResetMode+0x42>
     f1e:	86 e0       	ldi	r24, 0x06	; 6
     f20:	18 9f       	mul	r17, r24
     f22:	c0 01       	movw	r24, r0
     f24:	11 24       	eor	r1, r1
     f26:	82 5b       	subi	r24, 0xB2	; 178
     f28:	9d 4f       	sbci	r25, 0xFD	; 253
     f2a:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
     f2e:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     f32:	e9 cf       	rjmp	.-46     	; 0xf06 <FUNCSetResetMode+0x14>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     f34:	ac e8       	ldi	r26, 0x8C	; 140
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	01 2e       	mov	r0, r17
     f3a:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
     f3e:	1f 91       	pop	r17
     f40:	08 95       	ret

00000f42 <FUNCSetFirmMinorVer>:
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	25 97       	sbiw	r28, 0x05	; 5
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
     f58:	aa e8       	ldi	r26, 0x8A	; 138
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
     f60:	80 2d       	mov	r24, r0
     f62:	18 2f       	mov	r17, r24
     f64:	8a 30       	cpi	r24, 0x0A	; 10
     f66:	08 f0       	brcs	.+2      	; 0xf6a <FUNCSetFirmMinorVer+0x28>
     f68:	17 e0       	ldi	r17, 0x07	; 7
     f6a:	6d e9       	ldi	r22, 0x9D	; 157
     f6c:	72 e0       	ldi	r23, 0x02	; 2
     f6e:	ce 01       	movw	r24, r28
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <strcpy_P>
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	8e bb       	out	0x1e, r24	; 30
     f7a:	8e b3       	in	r24, 0x1e	; 30
     f7c:	88 23       	and	r24, r24
     f7e:	e9 f3       	breq	.-6      	; 0xf7a <FUNCSetFirmMinorVer+0x38>
     f80:	f6 9b       	sbis	0x1e, 6	; 30
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <FUNCSetFirmMinorVer+0x48>
     f84:	19 30       	cpi	r17, 0x09	; 9
     f86:	08 f4       	brcc	.+2      	; 0xf8a <FUNCSetFirmMinorVer+0x48>
     f88:	1f 5f       	subi	r17, 0xFF	; 255
     f8a:	f7 9b       	sbis	0x1e, 7	; 30
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <FUNCSetFirmMinorVer+0x54>
     f8e:	11 23       	and	r17, r17
     f90:	21 f0       	breq	.+8      	; 0xf9a <FUNCSetFirmMinorVer+0x58>
     f92:	11 50       	subi	r17, 0x01	; 1
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <FUNCSetFirmMinorVer+0x58>
     f96:	f2 99       	sbic	0x1e, 2	; 30
     f98:	0a c0       	rjmp	.+20     	; 0xfae <FUNCSetFirmMinorVer+0x6c>
     f9a:	10 5d       	subi	r17, 0xD0	; 208
     f9c:	1c 83       	std	Y+4, r17	; 0x04
     f9e:	10 53       	subi	r17, 0x30	; 48
     fa0:	ce 01       	movw	r24, r28
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_puts>
     fa8:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
     fac:	e6 cf       	rjmp	.-52     	; 0xf7a <FUNCSetFirmMinorVer+0x38>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     fae:	aa e8       	ldi	r26, 0x8A	; 138
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	01 2e       	mov	r0, r17
     fb4:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
     fb8:	25 96       	adiw	r28, 0x05	; 5
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	08 95       	ret

00000fcc <OSCCAL_Calibrate>:

volatile uint16_t ActualCount = 0;

void OSCCAL_Calibrate(void)
{
     fcc:	10 92 05 01 	sts	0x0105, r1
     fd0:	10 92 04 01 	sts	0x0104, r1
	uint8_t SREG_Backup;
	uint8_t LoopCount = (0x7F / 2); // Maximum range is 128, and starts from the middle, so 64 is the max number of iterations required
	uint8_t PrevOSCALValues[4] = {0,0,0,0};
   
	// Reset ActualCount
	ActualCount = 0;
   
	// Make sure all clock division is turned off (8Mhz RC clock)
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_BASECLOCKSPEED_8MHZ);
     fd4:	80 e8       	ldi	r24, 0x80	; 128
     fd6:	80 93 61 00 	sts	0x0061, r24
     fda:	10 92 61 00 	sts	0x0061, r1

	// Inital OSCCAL of half its maximum
	OSCCAL = (0x7F / 2);
     fde:	8f e3       	ldi	r24, 0x3F	; 63
     fe0:	80 93 66 00 	sts	0x0066, r24

	// Save the SREG
	SREG_Backup = SREG;
     fe4:	7f b7       	in	r23, 0x3f	; 63
    
	// Disable all timer 1 interrupts
	TIMSK1 = 0;
     fe6:	10 92 6f 00 	sts	0x006F, r1
        
	// Set timer 2 to asyncronous mode (32.768KHz crystal)
	ASSR   = (1 << AS2);
     fea:	88 e0       	ldi	r24, 0x08	; 8
     fec:	80 93 b6 00 	sts	0x00B6, r24
        
	// Timer 2 overflow interrupt enable
	TIMSK2 = (1 << TOIE2);
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	80 93 70 00 	sts	0x0070, r24

	// Enable interrupts
	sei();
     ff6:	78 94       	sei

	// Start both counters with no prescaling
	TCCR1B = (1 << CS10);
     ff8:	80 93 81 00 	sts	0x0081, r24
	TCCR2A = (1 << CS20);
     ffc:	80 93 b0 00 	sts	0x00B0, r24
	 	 
	// Previous OSCCAL value of 0
	PrevOSCALValues[0] = 0;

	// Wait until timer 2's external 32.768KHz crystal is stable
	while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB) | (1 << OCR2UB)));
    1000:	80 91 b6 00 	lds	r24, 0x00B6
    1004:	99 27       	eor	r25, r25
    1006:	87 70       	andi	r24, 0x07	; 7
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	89 2b       	or	r24, r25
    100c:	c9 f7       	brne	.-14     	; 0x1000 <OSCCAL_Calibrate+0x34>
    
	// Clear the timer values
	TCNT1  = 0;
    100e:	10 92 85 00 	sts	0x0085, r1
    1012:	10 92 84 00 	sts	0x0084, r1
	TCNT2  = 0;
    1016:	10 92 b2 00 	sts	0x00B2, r1
    101a:	3e e3       	ldi	r19, 0x3E	; 62
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	e9 e9       	ldi	r30, 0x99	; 153
    1024:	f9 ec       	ldi	r31, 0xC9	; 201
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1026:	cf 01       	movw	r24, r30
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <OSCCAL_Calibrate+0x5c>
    
	while (LoopCount--)
	{
		// Let it take a few readings (28ms, approx 4 readings)
		_delay_ms(28);

		PrevOSCALValues[3] = PrevOSCALValues[2];
		PrevOSCALValues[2] = PrevOSCALValues[1];
		PrevOSCALValues[1] = PrevOSCALValues[0];
		PrevOSCALValues[0] = OSCCAL;
    102c:	40 91 66 00 	lds	r20, 0x0066
        
		if (ActualCount > OSCCAL_TARGETCOUNT)       // Clock is running too fast
    1030:	80 91 04 01 	lds	r24, 0x0104
    1034:	90 91 05 01 	lds	r25, 0x0105
    1038:	81 50       	subi	r24, 0x01	; 1
    103a:	91 4e       	sbci	r25, 0xE1	; 225
    103c:	20 f0       	brcs	.+8      	; 0x1046 <OSCCAL_Calibrate+0x7a>
			OSCCAL--;
    103e:	80 91 66 00 	lds	r24, 0x0066
    1042:	81 50       	subi	r24, 0x01	; 1
    1044:	0a c0       	rjmp	.+20     	; 0x105a <OSCCAL_Calibrate+0x8e>
		else if (ActualCount < OSCCAL_TARGETCOUNT) // Clock is running too slow
    1046:	80 91 04 01 	lds	r24, 0x0104
    104a:	90 91 05 01 	lds	r25, 0x0105
    104e:	80 50       	subi	r24, 0x00	; 0
    1050:	91 4e       	sbci	r25, 0xE1	; 225
    1052:	28 f4       	brcc	.+10     	; 0x105e <OSCCAL_Calibrate+0x92>
			OSCCAL++;
    1054:	80 91 66 00 	lds	r24, 0x0066
    1058:	8f 5f       	subi	r24, 0xFF	; 255
    105a:	80 93 66 00 	sts	0x0066, r24
		
		// When the routine finds the closest value for the given target count,
		// it will cause the OSCCAL to hover around the closest two values.
		// If the current value is the same as several loops previous, exit the
		// routine as the best value has been found.
		if ((OSCCAL == PrevOSCALValues[1]) && (OSCCAL == PrevOSCALValues[3]))
    105e:	80 91 66 00 	lds	r24, 0x0066
    1062:	82 17       	cp	r24, r18
    1064:	21 f4       	brne	.+8      	; 0x106e <OSCCAL_Calibrate+0xa2>
    1066:	80 91 66 00 	lds	r24, 0x0066
    106a:	85 17       	cp	r24, r21
    106c:	39 f0       	breq	.+14     	; 0x107c <OSCCAL_Calibrate+0xb0>
    106e:	31 50       	subi	r19, 0x01	; 1
    1070:	56 2f       	mov	r21, r22
    1072:	62 2f       	mov	r22, r18
    1074:	3f 3f       	cpi	r19, 0xFF	; 255
    1076:	11 f0       	breq	.+4      	; 0x107c <OSCCAL_Calibrate+0xb0>
    1078:	24 2f       	mov	r18, r20
    107a:	d5 cf       	rjmp	.-86     	; 0x1026 <OSCCAL_Calibrate+0x5a>
		  break;
	}

	// Disable all timer interrupts
	TIMSK1 = 0;
    107c:	10 92 6f 00 	sts	0x006F, r1
	TIMSK2 = 0;
    1080:	10 92 70 00 	sts	0x0070, r1
    
	// Stop the timers
	TCCR1B = 0x00;
    1084:	10 92 81 00 	sts	0x0081, r1
	TCCR2A = 0x00;
    1088:	10 92 b0 00 	sts	0x00B0, r1

	// Turn off timer 2 asynchronous mode
	ASSR  &= ~(1 << AS2);
    108c:	80 91 b6 00 	lds	r24, 0x00B6
    1090:	87 7f       	andi	r24, 0xF7	; 247
    1092:	80 93 b6 00 	sts	0x00B6, r24

	// Restore SREG
	SREG = SREG_Backup;
    1096:	7f bf       	out	0x3f, r23	; 63
    1098:	08 95       	ret

0000109a <__vector_5>:
        
	return;
}

ISR(TIMER2_OVF_vect, ISR_BLOCK) // Occurs 32768/256 timers per second, or 128Hz
{
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	0f 92       	push	r0
    10a2:	11 24       	eor	r1, r1
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	af 93       	push	r26
    10aa:	bf 93       	push	r27
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
	// Stop timer 1 so it can be read
	TCCR1B = 0x00;
    10b0:	a1 e8       	ldi	r26, 0x81	; 129
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	1c 92       	st	X, r1
    
	// Record timer 1's value
	ActualCount = TCNT1;
    10b6:	e4 e8       	ldi	r30, 0x84	; 132
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	91 81       	ldd	r25, Z+1	; 0x01
    10be:	90 93 05 01 	sts	0x0105, r25
    10c2:	80 93 04 01 	sts	0x0104, r24
	     
	// Reset counters and restart timer 1
	TCNT1  = 0;
    10c6:	11 82       	std	Z+1, r1	; 0x01
    10c8:	10 82       	st	Z, r1
	TCNT2  = 0;
    10ca:	10 92 b2 00 	sts	0x00B2, r1
	TCCR1B = (1 << CS10);
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	8c 93       	st	X, r24
    10d2:	ff 91       	pop	r31
    10d4:	ef 91       	pop	r30
    10d6:	bf 91       	pop	r27
    10d8:	af 91       	pop	r26
    10da:	9f 91       	pop	r25
    10dc:	8f 91       	pop	r24
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	0f 90       	pop	r0
    10e4:	1f 90       	pop	r1
    10e6:	18 95       	reti

000010e8 <LCD_Init>:

// ======================================================================================

void LCD_Init(void)
{
    10e8:	8f e0       	ldi	r24, 0x0F	; 15
    10ea:	80 93 e7 00 	sts	0x00E7, r24
	// Set the initial contrast level to maximum:
	LCDCCR = 0x0F;

    // Select asynchronous clock source, enable all COM pins and enable all segment pins:
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
    10ee:	87 eb       	ldi	r24, 0xB7	; 183
    10f0:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32Hz:
    LCDFRR  = (7<<LCDCD0);    
    10f4:	87 e0       	ldi	r24, 0x07	; 7
    10f6:	80 93 e6 00 	sts	0x00E6, r24

	// Enable LCD and set low power waveform, enable start of frame interrupt:
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB) | (1<<LCDIE);
    10fa:	88 ec       	ldi	r24, 0xC8	; 200
    10fc:	80 93 e4 00 	sts	0x00E4, r24
    1100:	08 95       	ret

00001102 <LCD_puts>:
}

void LCD_puts_f(const uint8_t *FlashData)
{
	uint8_t StrBuff[LCD_TEXTBUFFER_SIZE];

	strcpy_P(StrBuff, FlashData);
	LCD_puts(StrBuff);
}

void LCD_puts(const uint8_t *Data)
{
    1102:	fc 01       	movw	r30, r24
    1104:	ac e0       	ldi	r26, 0x0C	; 12
    1106:	b1 e0       	ldi	r27, 0x01	; 1
    1108:	38 2f       	mov	r19, r24
    110a:	4f ef       	ldi	r20, 0xFF	; 255
    110c:	2e 2f       	mov	r18, r30
    110e:	23 1b       	sub	r18, r19
	uint8_t LoadB;
	
	for (LoadB = 0; LoadB < 20; LoadB++)
	{
		uint8_t CByte = *(Data++);
    1110:	91 91       	ld	r25, Z+
	
		if ((CByte >= '*') && (CByte <= 'z') && (CByte != ' '))
    1112:	89 2f       	mov	r24, r25
    1114:	8a 52       	subi	r24, 0x2A	; 42
    1116:	81 35       	cpi	r24, 0x51	; 81
    1118:	10 f4       	brcc	.+4      	; 0x111e <LCD_puts+0x1c>
		  TextBuffer[LoadB] = (CByte - '*');
    111a:	8c 93       	st	X, r24
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <LCD_puts+0x22>
		else if (CByte == 0x00)
    111e:	99 23       	and	r25, r25
    1120:	41 f0       	breq	.+16     	; 0x1132 <LCD_puts+0x30>
		  break;
		else
		  TextBuffer[LoadB] = 0xFF;		
    1122:	4c 93       	st	X, r20
    1124:	2e 2f       	mov	r18, r30
    1126:	23 1b       	sub	r18, r19
    1128:	11 96       	adiw	r26, 0x01	; 1
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	a0 32       	cpi	r26, 0x20	; 32
    112e:	b8 07       	cpc	r27, r24
    1130:	69 f7       	brne	.-38     	; 0x110c <LCD_puts+0xa>
	}

	ScrollMode  = ((LoadB > 6)? TRUE : FALSE);
    1132:	10 92 06 01 	sts	0x0106, r1
    1136:	27 30       	cpi	r18, 0x07	; 7
    1138:	18 f0       	brcs	.+6      	; 0x1140 <LCD_puts+0x3e>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	80 93 06 01 	sts	0x0106, r24
	ScrollCount = 0;
    1140:	10 92 08 01 	sts	0x0108, r1
    1144:	82 2f       	mov	r24, r18
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	3f ef       	ldi	r19, 0xFF	; 255

	for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
		TextBuffer[LoadB++] = 0xFF;
    114a:	e8 2f       	mov	r30, r24
    114c:	ff 27       	eor	r31, r31
    114e:	e4 5f       	subi	r30, 0xF4	; 244
    1150:	fe 4f       	sbci	r31, 0xFE	; 254
    1152:	30 83       	st	Z, r19
    1154:	8f 5f       	subi	r24, 0xFF	; 255
    1156:	9f 5f       	subi	r25, 0xFF	; 255
    1158:	97 30       	cpi	r25, 0x07	; 7
    115a:	b9 f7       	brne	.-18     	; 0x114a <LCD_puts+0x48>
    115c:	82 2f       	mov	r24, r18
    115e:	89 5f       	subi	r24, 0xF9	; 249
	
	TextBuffer[LoadB] = 0x00;
    1160:	e8 2f       	mov	r30, r24
    1162:	ff 27       	eor	r31, r31
    1164:	e4 5f       	subi	r30, 0xF4	; 244
    1166:	fe 4f       	sbci	r31, 0xFE	; 254
    1168:	10 82       	st	Z, r1
	StrStart   = 0;
    116a:	10 92 0a 01 	sts	0x010A, r1
	StrEnd     = LoadB;	
    116e:	80 93 0b 01 	sts	0x010B, r24
	DelayCount = LCD_DELAYCOUNT_DEFAULT;
    1172:	8a e0       	ldi	r24, 0x0A	; 10
    1174:	80 93 07 01 	sts	0x0107, r24

	UpdateLCD  = TRUE;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	80 93 09 01 	sts	0x0109, r24
    117e:	08 95       	ret

00001180 <__vector_22>:
}

static inline void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit)
{
	uint16_t SegData  = 0x00;
	uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1));

	if (Byte != 0xFF)
	  SegData = pgm_read_word(&LCD_SegTable[Byte]);	

	for (uint8_t BNib = 0; BNib < 4; BNib++)
	{
		uint8_t Mask          = 0xF0;
		uint8_t MaskedSegData = (SegData & 0x0000F);
	
		if (Digit & 0x01)
		{
			Mask = 0x0F;
			MaskedSegData <<= 4;
		}
		
		*BuffPtr = ((*BuffPtr & Mask) | MaskedSegData);

		SegData >>= 4;
		BuffPtr  += 5;
	}
}

ISR(LCD_vect, ISR_NOBLOCK)
{
    1180:	78 94       	sei
    1182:	1f 92       	push	r1
    1184:	0f 92       	push	r0
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	0f 92       	push	r0
    118a:	11 24       	eor	r1, r1
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	2f 93       	push	r18
    1196:	3f 93       	push	r19
    1198:	4f 93       	push	r20
    119a:	5f 93       	push	r21
    119c:	6f 93       	push	r22
    119e:	7f 93       	push	r23
    11a0:	8f 93       	push	r24
    11a2:	9f 93       	push	r25
    11a4:	af 93       	push	r26
    11a6:	bf 93       	push	r27
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
	if (ScrollMode)
    11ac:	80 91 06 01 	lds	r24, 0x0106
    11b0:	88 23       	and	r24, r24
    11b2:	99 f0       	breq	.+38     	; 0x11da <__vector_22+0x5a>
	{
		if (DelayCount)
    11b4:	80 91 07 01 	lds	r24, 0x0107
    11b8:	88 23       	and	r24, r24
    11ba:	21 f0       	breq	.+8      	; 0x11c4 <__vector_22+0x44>
		{
			DelayCount--;
    11bc:	81 50       	subi	r24, 0x01	; 1
    11be:	80 93 07 01 	sts	0x0107, r24
    11c2:	0b c0       	rjmp	.+22     	; 0x11da <__vector_22+0x5a>
		}
		else
		{
			if (!(ScrollCount--))
    11c4:	80 91 08 01 	lds	r24, 0x0108
    11c8:	81 50       	subi	r24, 0x01	; 1
    11ca:	80 93 08 01 	sts	0x0108, r24
    11ce:	8f 3f       	cpi	r24, 0xFF	; 255
    11d0:	21 f4       	brne	.+8      	; 0x11da <__vector_22+0x5a>
			  UpdateLCD = TRUE;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	80 93 09 01 	sts	0x0109, r24
    11d8:	05 c0       	rjmp	.+10     	; 0x11e4 <__vector_22+0x64>
		}
	}

	if (UpdateLCD)
    11da:	80 91 09 01 	lds	r24, 0x0109
    11de:	88 23       	and	r24, r24
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <__vector_22+0x64>
    11e2:	55 c0       	rjmp	.+170    	; 0x128e <__vector_22+0x10e>
	{
		for (uint8_t Character = 0; Character < 6; Character++)
		{
			uint8_t Byte = (StrStart + Character);
    11e4:	30 91 0a 01 	lds	r19, 0x010A

			if (Byte >= StrEnd)
    11e8:	e0 90 0b 01 	lds	r14, 0x010B
    11ec:	f3 2e       	mov	r15, r19
    11ee:	fe 18       	sub	r15, r14
    11f0:	13 2f       	mov	r17, r19
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	86 2f       	mov	r24, r22
    11f8:	1e 15       	cp	r17, r14
    11fa:	10 f4       	brcc	.+4      	; 0x1200 <__vector_22+0x80>
    11fc:	e1 2f       	mov	r30, r17
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <__vector_22+0x82>
    1200:	ef 2d       	mov	r30, r15
			  Byte -= StrEnd;
			
			LCD_WriteChar(TextBuffer[Byte], Character);
    1202:	ff 27       	eor	r31, r31
    1204:	e4 5f       	subi	r30, 0xF4	; 244
    1206:	fe 4f       	sbci	r31, 0xFE	; 254
    1208:	e0 81       	ld	r30, Z
    120a:	ef 3f       	cpi	r30, 0xFF	; 255
    120c:	19 f4       	brne	.+6      	; 0x1214 <__vector_22+0x94>
    120e:	40 e0       	ldi	r20, 0x00	; 0
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	07 c0       	rjmp	.+14     	; 0x1222 <__vector_22+0xa2>
    1214:	ff 27       	eor	r31, r31
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	e4 5d       	subi	r30, 0xD4	; 212
    121c:	fc 4f       	sbci	r31, 0xFC	; 252
    121e:	45 91       	lpm	r20, Z+
    1220:	54 91       	lpm	r21, Z
    1222:	86 95       	lsr	r24
    1224:	e8 2f       	mov	r30, r24
    1226:	ff 27       	eor	r31, r31
    1228:	e9 5d       	subi	r30, 0xD9	; 217
    122a:	fe 4f       	sbci	r31, 0xFE	; 254
    122c:	00 e0       	ldi	r16, 0x00	; 0
    122e:	db 01       	movw	r26, r22
    1230:	a1 70       	andi	r26, 0x01	; 1
    1232:	b0 70       	andi	r27, 0x00	; 0
    1234:	24 2f       	mov	r18, r20
    1236:	2f 70       	andi	r18, 0x0F	; 15
    1238:	10 97       	sbiw	r26, 0x00	; 0
    123a:	11 f4       	brne	.+4      	; 0x1240 <__vector_22+0xc0>
    123c:	90 ef       	ldi	r25, 0xF0	; 240
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <__vector_22+0xc6>
    1240:	22 95       	swap	r18
    1242:	20 7f       	andi	r18, 0xF0	; 240
    1244:	9f e0       	ldi	r25, 0x0F	; 15
    1246:	80 81       	ld	r24, Z
    1248:	98 23       	and	r25, r24
    124a:	92 2b       	or	r25, r18
    124c:	90 83       	st	Z, r25
    124e:	0f 5f       	subi	r16, 0xFF	; 255
    1250:	04 30       	cpi	r16, 0x04	; 4
    1252:	39 f0       	breq	.+14     	; 0x1262 <__vector_22+0xe2>
    1254:	84 e0       	ldi	r24, 0x04	; 4
    1256:	56 95       	lsr	r21
    1258:	47 95       	ror	r20
    125a:	8a 95       	dec	r24
    125c:	e1 f7       	brne	.-8      	; 0x1256 <__vector_22+0xd6>
    125e:	35 96       	adiw	r30, 0x05	; 5
    1260:	e9 cf       	rjmp	.-46     	; 0x1234 <__vector_22+0xb4>
    1262:	6f 5f       	subi	r22, 0xFF	; 255
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	1f 5f       	subi	r17, 0xFF	; 255
    1268:	f3 94       	inc	r15
    126a:	66 30       	cpi	r22, 0x06	; 6
    126c:	71 05       	cpc	r23, r1
    126e:	09 f0       	breq	.+2      	; 0x1272 <__vector_22+0xf2>
    1270:	c2 cf       	rjmp	.-124    	; 0x11f6 <__vector_22+0x76>
		}
		
		if (StrStart++ == StrEnd)
    1272:	3f 5f       	subi	r19, 0xFF	; 255
    1274:	30 93 0a 01 	sts	0x010A, r19
    1278:	31 50       	subi	r19, 0x01	; 1
    127a:	3e 15       	cp	r19, r14
    127c:	19 f4       	brne	.+6      	; 0x1284 <__vector_22+0x104>
		  StrStart = 1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 93 0a 01 	sts	0x010A, r24
		
		ScrollCount = LCD_SCROLLCOUNT_DEFAULT;
    1284:	83 e0       	ldi	r24, 0x03	; 3
    1286:	80 93 08 01 	sts	0x0108, r24
		UpdateLCD = FALSE;
    128a:	10 92 09 01 	sts	0x0109, r1
    128e:	a7 e2       	ldi	r26, 0x27	; 39
    1290:	b1 e0       	ldi	r27, 0x01	; 1
    1292:	ec ee       	ldi	r30, 0xEC	; 236
    1294:	f0 e0       	ldi	r31, 0x00	; 0
	}

	for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++)
	  *(pLCDREG + LCDChar) = SegBuffer[LCDChar];
    1296:	8d 91       	ld	r24, X+
    1298:	81 93       	st	Z+, r24
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	e0 30       	cpi	r30, 0x00	; 0
    129e:	f8 07       	cpc	r31, r24
    12a0:	d1 f7       	brne	.-12     	; 0x1296 <__vector_22+0x116>
    12a2:	ff 91       	pop	r31
    12a4:	ef 91       	pop	r30
    12a6:	bf 91       	pop	r27
    12a8:	af 91       	pop	r26
    12aa:	9f 91       	pop	r25
    12ac:	8f 91       	pop	r24
    12ae:	7f 91       	pop	r23
    12b0:	6f 91       	pop	r22
    12b2:	5f 91       	pop	r21
    12b4:	4f 91       	pop	r20
    12b6:	3f 91       	pop	r19
    12b8:	2f 91       	pop	r18
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <LCD_puts_f>:
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	64 97       	sbiw	r28, 0x14	; 20
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	8e 01       	movw	r16, r28
    12e6:	0f 5f       	subi	r16, 0xFF	; 255
    12e8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ea:	bc 01       	movw	r22, r24
    12ec:	c8 01       	movw	r24, r16
    12ee:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <strcpy_P>
    12f2:	c8 01       	movw	r24, r16
    12f4:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_puts>
    12f8:	64 96       	adiw	r28, 0x14	; 20
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	08 95       	ret

0000130e <USART_Tx>:
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_Tx(const char data)
{
    130e:	98 2f       	mov	r25, r24
    while (!(UCSRA & (1 << UDRE)));
    1310:	80 91 c0 00 	lds	r24, 0x00C0
    1314:	85 ff       	sbrs	r24, 5
    1316:	fc cf       	rjmp	.-8      	; 0x1310 <USART_Tx+0x2>
    UDR = data;
    1318:	90 93 c6 00 	sts	0x00C6, r25
    131c:	08 95       	ret

0000131e <USART_Rx>:
}

/*****************************************************************************
*
*   Function name : Usart_Rx
*
*   Returns :       char: byte received
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART
*
*****************************************************************************/
char USART_Rx(void)
{
    131e:	80 91 88 01 	lds	r24, 0x0188
    1322:	88 23       	and	r24, r24
    1324:	21 f4       	brne	.+8      	; 0x132e <USART_Rx+0x10>
    while (!(BuffElements) && !(PacketTimeOut)) {};
    1326:	80 91 8c 01 	lds	r24, 0x018C
    132a:	88 23       	and	r24, r24
    132c:	c1 f3       	breq	.-16     	; 0x131e <USART_Rx>
    return BUFF_GetBuffByte();
    132e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <BUFF_GetBuffByte>
}
    1332:	99 27       	eor	r25, r25
    1334:	08 95       	ret

00001336 <USART_Init>:
    1336:	10 92 c5 00 	sts	0x00C5, r1
    133a:	87 e0       	ldi	r24, 0x07	; 7
    133c:	80 93 c4 00 	sts	0x00C4, r24
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	80 93 c0 00 	sts	0x00C0, r24
    1346:	80 e8       	ldi	r24, 0x80	; 128
    1348:	80 93 c1 00 	sts	0x00C1, r24
    134c:	86 e0       	ldi	r24, 0x06	; 6
    134e:	80 93 c2 00 	sts	0x00C2, r24
    1352:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <BUFF_InitialiseBuffer>
    1356:	08 95       	ret

00001358 <SPI_SPIInit>:

// ======================================================================================

void SPI_SPIInit(void)
{
    1358:	e4 e6       	ldi	r30, 0x64	; 100
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8b 7f       	andi	r24, 0xFB	; 251
    1360:	80 83       	st	Z, r24
	PRR &= ~(1 << PRSPI);              // Enable the SPI system by clearing the power save register SPI disable bit

	// Master, Sample falling edge (setup rising), Fosc/16 speed (7.3MHz/16 = 467KHz)
	SPCR = ((1 << SPE) | (1 << MSTR) | (1 << CPHA) | (1 << CPOL) | (1 << SPR0));
    1362:	8d e5       	ldi	r24, 0x5D	; 93
    1364:	8c bd       	out	0x2c, r24	; 44
    1366:	08 95       	ret

00001368 <SPI_SPITransmit>:
}

uint8_t SPI_SPITransmit(const uint8_t Data)
{
    1368:	8e bd       	out	0x2e, r24	; 46
	SPDR = Data;                       // Loading a byte into the register starts the transmission
	while (!(SPSR & (1 << SPIF)));    // Wait until transmission completed
    136a:	0d b4       	in	r0, 0x2d	; 45
    136c:	07 fe       	sbrs	r0, 7
    136e:	fd cf       	rjmp	.-6      	; 0x136a <SPI_SPITransmit+0x2>
	return SPDR;
    1370:	8e b5       	in	r24, 0x2e	; 46
}
    1372:	99 27       	eor	r25, r25
    1374:	08 95       	ret

00001376 <SPI_SPITransmitWord>:

uint8_t SPI_SPITransmitWord(const uint16_t Data)
{
    1376:	9c 01       	movw	r18, r24
	SPI_SPITransmit((uint8_t)(Data >> 8));
    1378:	83 2f       	mov	r24, r19
    137a:	99 27       	eor	r25, r25
    137c:	8e bd       	out	0x2e, r24	; 46
    137e:	0d b4       	in	r0, 0x2d	; 45
    1380:	07 fe       	sbrs	r0, 7
    1382:	fd cf       	rjmp	.-6      	; 0x137e <SPI_SPITransmitWord+0x8>
    1384:	8e b5       	in	r24, 0x2e	; 46
    1386:	2e bd       	out	0x2e, r18	; 46
    1388:	0d b4       	in	r0, 0x2d	; 45
    138a:	07 fe       	sbrs	r0, 7
    138c:	fd cf       	rjmp	.-6      	; 0x1388 <SPI_SPITransmitWord+0x12>
    138e:	8e b5       	in	r24, 0x2e	; 46
	return SPI_SPITransmit((uint8_t)Data);
}
    1390:	99 27       	eor	r25, r25
    1392:	08 95       	ret

00001394 <__vector_17>:
 *  have to stop the timer tick.
 *  For all modes the USIDR contents are stored and flags are updated.
 */
ISR(USI_OVERFLOW_vect, ISR_BLOCK)
{
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	0f 92       	push	r0
    139c:	11 24       	eor	r1, r1
    139e:	8f 93       	push	r24
    13a0:	ef 93       	push	r30
    13a2:	ff 93       	push	r31
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	TIMSK0 &= ~(1<<OCIE0A);
    13a4:	ee e6       	ldi	r30, 0x6E	; 110
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	8d 7f       	andi	r24, 0xFD	; 253
    13ac:	80 83       	st	Z, r24
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
    13ae:	80 e4       	ldi	r24, 0x40	; 64
    13b0:	80 93 b9 00 	sts	0x00B9, r24
	TransferComplete = 1;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	80 93 3c 01 	sts	0x013C, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	StoredUSIDR = USIDR;
    13ba:	80 91 ba 00 	lds	r24, 0x00BA
    13be:	80 93 3b 01 	sts	0x013B, r24
    13c2:	ff 91       	pop	r31
    13c4:	ef 91       	pop	r30
    13c6:	8f 91       	pop	r24
    13c8:	0f 90       	pop	r0
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	0f 90       	pop	r0
    13ce:	1f 90       	pop	r1
    13d0:	18 95       	reti

000013d2 <USI_SPIOff>:
}

/*! \brief  Initialize USI as SPI master.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from slave to master mode.
 *  Note that the stored USIDR value is cleared.
 *
 */
void USI_SPIInitMaster()
{
	// Configure port directions.
 	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN);  // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                       // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                        // Pull-ups.
	USI_OUT_REG &= ~(1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Pull-ups.
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = USI_CONTROL_REG_FLAGS;

	// Set the compare and prescaler for the requested frequency:
	USI_SPISetSpeed();
	
	// Init driver status register.
	TransferComplete = 0;
	
	StoredUSIDR = 0;
}

void USI_SPIOff(void)
{
    13d2:	8d b1       	in	r24, 0x0d	; 13
    13d4:	8f 7a       	andi	r24, 0xAF	; 175
    13d6:	8d b9       	out	0x0d, r24	; 13
	USI_DIR_REG &= ~((1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN));                        // Inputs.
	USI_OUT_REG &= ~((1<<USI_DATAIN_PIN)  | (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN)); // Pull-ups.
    13d8:	8e b1       	in	r24, 0x0e	; 14
    13da:	8f 78       	andi	r24, 0x8F	; 143
    13dc:	8e b9       	out	0x0e, r24	; 14
	DDRF  &= ~(1 << 6);
    13de:	86 98       	cbi	0x10, 6	; 16
	PORTF &= ~(1 << 6);
    13e0:	8e 98       	cbi	0x11, 6	; 17
	
	USI_STOPUSITIMER();
    13e2:	14 bc       	out	0x24, r1	; 36
    13e4:	08 95       	ret

000013e6 <USI_SPITransmit>:
}

/*! \brief  Put one byte on bus.
 *
 *  Use this function like you would write to the SPDR register in the native SPI module.
 *  Calling this function in master mode starts a transfer, while in slave mode, a
 *  byte will be prepared for the next transfer initiated by the master device.
 *  If a transfer is in progress, this function will set the write collision flag
 *  and return without altering the data registers.
 *
 *  \returns  Value returned by slave.
 */
uint8_t USI_SPITransmit(uint8_t val)
{
    13e6:	10 92 3c 01 	sts	0x013C, r1
	// Reinit flags.
	TransferComplete = 0;

	// Put data in USI data register.
	USIDR = val;
    13ea:	80 93 ba 00 	sts	0x00BA, r24
	
	TIFR0  |= (1<<OCF0A);  // Clear compare match flag.
    13ee:	a9 9a       	sbi	0x15, 1	; 21
	TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.
    13f0:	80 91 6e 00 	lds	r24, 0x006E
    13f4:	82 60       	ori	r24, 0x02	; 2
    13f6:	80 93 6e 00 	sts	0x006E, r24

	// Clear the timer 0 value
	TCNT0 = 0;
    13fa:	16 bc       	out	0x26, r1	; 38

	while (!(TransferComplete));
    13fc:	80 91 3c 01 	lds	r24, 0x013C
    1400:	88 23       	and	r24, r24
    1402:	e1 f3       	breq	.-8      	; 0x13fc <USI_SPITransmit+0x16>

	return StoredUSIDR;
    1404:	80 91 3b 01 	lds	r24, 0x013B
}
    1408:	99 27       	eor	r25, r25
    140a:	08 95       	ret

0000140c <USI_SPITransmitWord>:

uint8_t USI_SPITransmitWord(const uint16_t val )
{
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	8c 01       	movw	r16, r24
	USI_SPITransmit((uint8_t)(val >> 8));
    1412:	81 2f       	mov	r24, r17
    1414:	99 27       	eor	r25, r25
    1416:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
	return USI_SPITransmit((uint8_t)val);
    141a:	80 2f       	mov	r24, r16
    141c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
}
    1420:	99 27       	eor	r25, r25
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	08 95       	ret

00001428 <USI_SPISetSpeed>:

void USI_SPIToggleClock(void)
{
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);	
}

void USI_SPISetSpeed()
{
    1428:	a2 e0       	ldi	r26, 0x02	; 2
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
    1430:	80 2d       	mov	r24, r0
    1432:	29 e9       	ldi	r18, 0x99	; 153
    1434:	33 e0       	ldi	r19, 0x03	; 3
    1436:	f9 01       	movw	r30, r18
    1438:	31 97       	sbiw	r30, 0x01	; 1
	uint8_t StoredIndex = eeprom_read_byte(&EEPROMVars.SCKDuration);

	if (StoredIndex = 0xFF) // Blank EEPROM protection
	  StoredIndex = (USI_PRESET_SPEEDS - 1);

	for (uint8_t MatchIndex = 0; MatchIndex < USI_PRESET_SPEEDS; MatchIndex++)
	{
		if ((pgm_read_byte(&USIPSValues[MatchIndex][0]) == StoredIndex))
    143a:	84 91       	lpm	r24, Z
    143c:	83 30       	cpi	r24, 0x03	; 3
    143e:	31 f4       	brne	.+12     	; 0x144c <USI_SPISetSpeed+0x24>
		{
			// Init Output Compare Register.
			OCR0A = pgm_read_byte(&USIPSValues[MatchIndex][1]);
    1440:	f9 01       	movw	r30, r18
    1442:	84 91       	lpm	r24, Z
    1444:	87 bd       	out	0x27, r24	; 39

			// Enable 'Clear Timer on Compare match' and set prescaler, which starts the timer
			TCCR0A = ((1<<WGM01) | TC0_PS_1);
    1446:	89 e0       	ldi	r24, 0x09	; 9
    1448:	84 bd       	out	0x24, r24	; 36
    144a:	08 95       	ret
    144c:	32 96       	adiw	r30, 0x02	; 2
    144e:	2e 5f       	subi	r18, 0xFE	; 254
    1450:	3f 4f       	sbci	r19, 0xFF	; 255
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	e0 3a       	cpi	r30, 0xA0	; 160
    1456:	f8 07       	cpc	r31, r24
    1458:	81 f7       	brne	.-32     	; 0x143a <USI_SPISetSpeed+0x12>
    145a:	08 95       	ret

0000145c <USI_SPIInitMaster>:
    145c:	8d b1       	in	r24, 0x0d	; 13
    145e:	80 65       	ori	r24, 0x50	; 80
    1460:	8d b9       	out	0x0d, r24	; 13
    1462:	6d 98       	cbi	0x0d, 5	; 13
    1464:	75 9a       	sbi	0x0e, 5	; 14
    1466:	76 98       	cbi	0x0e, 6	; 14
    1468:	8a e5       	ldi	r24, 0x5A	; 90
    146a:	80 93 b8 00 	sts	0x00B8, r24
    146e:	0e 94 14 0a 	call	0x1428	; 0x1428 <USI_SPISetSpeed>
    1472:	10 92 3c 01 	sts	0x013C, r1
    1476:	10 92 3b 01 	sts	0x013B, r1
    147a:	08 95       	ret

0000147c <USI_SPIToggleClock>:
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MAIN_Delay1MS>
    1486:	08 eb       	ldi	r16, 0xB8	; 184
    1488:	10 e0       	ldi	r17, 0x00	; 0
    148a:	f8 01       	movw	r30, r16
    148c:	80 81       	ld	r24, Z
    148e:	81 60       	ori	r24, 0x01	; 1
    1490:	80 83       	st	Z, r24
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MAIN_Delay1MS>
    1498:	f8 01       	movw	r30, r16
    149a:	80 81       	ld	r24, Z
    149c:	81 60       	ori	r24, 0x01	; 1
    149e:	80 83       	st	Z, r24
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MAIN_Delay1MS>
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	08 95       	ret

000014ac <DF_EnableDataflash>:
	DF_WaitWhileBusy();
}

void DF_EnableDataflash(const uint8_t Enabled)
{
    14ac:	90 91 47 01 	lds	r25, 0x0147
	if (Enabled == TRUE)
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	31 f4       	brne	.+12     	; 0x14c0 <DF_EnableDataflash+0x14>
	{
		if (DataflashInfo.UseExernalDF == TRUE)
    14b4:	91 30       	cpi	r25, 0x01	; 1
    14b6:	11 f4       	brne	.+4      	; 0x14bc <DF_EnableDataflash+0x10>
		  MAIN_ResetCSLine(MAIN_RESETCS_EXTDFACTIVE);
    14b8:	82 e0       	ldi	r24, 0x02	; 2
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <DF_EnableDataflash+0x1a>
		else
		  PORTB &= ~(1 << 0);
    14bc:	28 98       	cbi	0x05, 0	; 5
    14be:	08 95       	ret
	}
	else
	{
		if (DataflashInfo.UseExernalDF == TRUE)
    14c0:	91 30       	cpi	r25, 0x01	; 1
    14c2:	21 f4       	brne	.+8      	; 0x14cc <DF_EnableDataflash+0x20>
		  MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE);
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	0e 94 66 02 	call	0x4cc	; 0x4cc <MAIN_ResetCSLine>
    14ca:	08 95       	ret
		else
		  PORTB |= (1 << 0);
    14cc:	28 9a       	sbi	0x05, 0	; 5
    14ce:	08 95       	ret

000014d0 <DF_ReadBufferByte>:
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	7c 01       	movw	r14, r24
    14da:	00 91 00 01 	lds	r16, 0x0100
    14de:	10 91 01 01 	lds	r17, 0x0101
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    14ee:	84 e5       	ldi	r24, 0x54	; 84
    14f0:	f8 01       	movw	r30, r16
    14f2:	09 95       	icall
    14f4:	8f 2d       	mov	r24, r15
    14f6:	99 27       	eor	r25, r25
    14f8:	f8 01       	movw	r30, r16
    14fa:	09 95       	icall
    14fc:	8e 2d       	mov	r24, r14
    14fe:	f8 01       	movw	r30, r16
    1500:	09 95       	icall
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	f8 01       	movw	r30, r16
    1506:	09 95       	icall
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	f8 01       	movw	r30, r16
    150c:	09 95       	icall
    150e:	99 27       	eor	r25, r25
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	ff 90       	pop	r15
    1516:	ef 90       	pop	r14
    1518:	08 95       	ret

0000151a <DF_ContinuousReadEnable>:
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	8c 01       	movw	r16, r24
    1528:	7b 01       	movw	r14, r22
    152a:	c0 91 00 01 	lds	r28, 0x0100
    152e:	d0 91 01 01 	lds	r29, 0x0101
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    153e:	88 e6       	ldi	r24, 0x68	; 104
    1540:	fe 01       	movw	r30, r28
    1542:	09 95       	icall
    1544:	8a b5       	in	r24, 0x2a	; 42
    1546:	98 01       	movw	r18, r16
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DF_ContinuousReadEnable+0x34>
    154a:	36 95       	lsr	r19
    154c:	27 95       	ror	r18
    154e:	8a 95       	dec	r24
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DF_ContinuousReadEnable+0x30>
    1552:	c9 01       	movw	r24, r18
    1554:	fe 01       	movw	r30, r28
    1556:	09 95       	icall
    1558:	8b b5       	in	r24, 0x2b	; 43
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DF_ContinuousReadEnable+0x46>
    155c:	00 0f       	add	r16, r16
    155e:	11 1f       	adc	r17, r17
    1560:	8a 95       	dec	r24
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DF_ContinuousReadEnable+0x42>
    1564:	8f 2d       	mov	r24, r15
    1566:	99 27       	eor	r25, r25
    1568:	80 0f       	add	r24, r16
    156a:	fe 01       	movw	r30, r28
    156c:	09 95       	icall
    156e:	8e 2d       	mov	r24, r14
    1570:	fe 01       	movw	r30, r28
    1572:	09 95       	icall
    1574:	00 e0       	ldi	r16, 0x00	; 0
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	fe 01       	movw	r30, r28
    157a:	09 95       	icall
    157c:	0f 5f       	subi	r16, 0xFF	; 255
    157e:	04 30       	cpi	r16, 0x04	; 4
    1580:	d1 f7       	brne	.-12     	; 0x1576 <DF_ContinuousReadEnable+0x5c>
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	08 95       	ret

00001590 <DF_BufferWriteEnable>:
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	7c 01       	movw	r14, r24
    159a:	00 91 00 01 	lds	r16, 0x0100
    159e:	10 91 01 01 	lds	r17, 0x0101
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    15ae:	84 e8       	ldi	r24, 0x84	; 132
    15b0:	f8 01       	movw	r30, r16
    15b2:	09 95       	icall
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	f8 01       	movw	r30, r16
    15b8:	09 95       	icall
    15ba:	8f 2d       	mov	r24, r15
    15bc:	99 27       	eor	r25, r25
    15be:	f8 01       	movw	r30, r16
    15c0:	09 95       	icall
    15c2:	8e 2d       	mov	r24, r14
    15c4:	f8 01       	movw	r30, r16
    15c6:	09 95       	icall
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	ff 90       	pop	r15
    15ce:	ef 90       	pop	r14
    15d0:	08 95       	ret

000015d2 <DF_WaitWhileBusy>:
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	c0 91 00 01 	lds	r28, 0x0100
    15da:	d0 91 01 01 	lds	r29, 0x0101
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    15ea:	87 e5       	ldi	r24, 0x57	; 87
    15ec:	fe 01       	movw	r30, r28
    15ee:	09 95       	icall
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	fe 01       	movw	r30, r28
    15f4:	09 95       	icall
    15f6:	87 ff       	sbrs	r24, 7
    15f8:	fb cf       	rjmp	.-10     	; 0x15f0 <DF_WaitWhileBusy+0x1e>
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	08 95       	ret

00001600 <DF_EraseBlock>:
    1600:	ef 92       	push	r14
    1602:	ff 92       	push	r15
    1604:	0f 93       	push	r16
    1606:	1f 93       	push	r17
    1608:	7c 01       	movw	r14, r24
    160a:	00 91 00 01 	lds	r16, 0x0100
    160e:	10 91 01 01 	lds	r17, 0x0101
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    161e:	80 e5       	ldi	r24, 0x50	; 80
    1620:	f8 01       	movw	r30, r16
    1622:	09 95       	icall
    1624:	8f 2d       	mov	r24, r15
    1626:	99 27       	eor	r25, r25
    1628:	f8 01       	movw	r30, r16
    162a:	09 95       	icall
    162c:	8e 2d       	mov	r24, r14
    162e:	f8 01       	movw	r30, r16
    1630:	09 95       	icall
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	f8 01       	movw	r30, r16
    1636:	09 95       	icall
    1638:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DF_WaitWhileBusy>
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	08 95       	ret

00001646 <DF_CopyFlashPageToBuffer>:
    1646:	ef 92       	push	r14
    1648:	ff 92       	push	r15
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	8c 01       	movw	r16, r24
    1650:	e0 90 00 01 	lds	r14, 0x0100
    1654:	f0 90 01 01 	lds	r15, 0x0101
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    1664:	83 e5       	ldi	r24, 0x53	; 83
    1666:	f7 01       	movw	r30, r14
    1668:	09 95       	icall
    166a:	8a b5       	in	r24, 0x2a	; 42
    166c:	98 01       	movw	r18, r16
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DF_CopyFlashPageToBuffer+0x2e>
    1670:	36 95       	lsr	r19
    1672:	27 95       	ror	r18
    1674:	8a 95       	dec	r24
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DF_CopyFlashPageToBuffer+0x2a>
    1678:	c9 01       	movw	r24, r18
    167a:	f7 01       	movw	r30, r14
    167c:	09 95       	icall
    167e:	8b b5       	in	r24, 0x2b	; 43
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DF_CopyFlashPageToBuffer+0x40>
    1682:	00 0f       	add	r16, r16
    1684:	11 1f       	adc	r17, r17
    1686:	8a 95       	dec	r24
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DF_CopyFlashPageToBuffer+0x3c>
    168a:	80 2f       	mov	r24, r16
    168c:	f7 01       	movw	r30, r14
    168e:	09 95       	icall
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	f7 01       	movw	r30, r14
    1694:	09 95       	icall
    1696:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DF_WaitWhileBusy>
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	08 95       	ret

000016a4 <DF_CopyBufferToFlashPage>:
    16a4:	ef 92       	push	r14
    16a6:	ff 92       	push	r15
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	8c 01       	movw	r16, r24
    16ae:	e0 90 00 01 	lds	r14, 0x0100
    16b2:	f0 90 01 01 	lds	r15, 0x0101
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    16c2:	83 e8       	ldi	r24, 0x83	; 131
    16c4:	f7 01       	movw	r30, r14
    16c6:	09 95       	icall
    16c8:	8a b5       	in	r24, 0x2a	; 42
    16ca:	98 01       	movw	r18, r16
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <DF_CopyBufferToFlashPage+0x2e>
    16ce:	36 95       	lsr	r19
    16d0:	27 95       	ror	r18
    16d2:	8a 95       	dec	r24
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <DF_CopyBufferToFlashPage+0x2a>
    16d6:	c9 01       	movw	r24, r18
    16d8:	f7 01       	movw	r30, r14
    16da:	09 95       	icall
    16dc:	8b b5       	in	r24, 0x2b	; 43
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <DF_CopyBufferToFlashPage+0x40>
    16e0:	00 0f       	add	r16, r16
    16e2:	11 1f       	adc	r17, r17
    16e4:	8a 95       	dec	r24
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <DF_CopyBufferToFlashPage+0x3c>
    16e8:	80 2f       	mov	r24, r16
    16ea:	f7 01       	movw	r30, r14
    16ec:	09 95       	icall
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	f7 01       	movw	r30, r14
    16f2:	09 95       	icall
    16f4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DF_WaitWhileBusy>
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	08 95       	ret

00001702 <DF_GetChipCharacteristics>:
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	00 91 00 01 	lds	r16, 0x0100
    170a:	10 91 01 01 	lds	r17, 0x0101
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    171a:	87 e5       	ldi	r24, 0x57	; 87
    171c:	f8 01       	movw	r30, r16
    171e:	09 95       	icall
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	f8 01       	movw	r30, r16
    1724:	09 95       	icall
    1726:	99 27       	eor	r25, r25
    1728:	88 73       	andi	r24, 0x38	; 56
    172a:	90 70       	andi	r25, 0x00	; 0
    172c:	63 e0       	ldi	r22, 0x03	; 3
    172e:	96 95       	lsr	r25
    1730:	87 95       	ror	r24
    1732:	6a 95       	dec	r22
    1734:	e1 f7       	brne	.-8      	; 0x172e <DF_GetChipCharacteristics+0x2c>
    1736:	fc 01       	movw	r30, r24
    1738:	e0 56       	subi	r30, 0x60	; 96
    173a:	fc 4f       	sbci	r31, 0xFC	; 252
    173c:	e4 91       	lpm	r30, Z
    173e:	4e 2f       	mov	r20, r30
    1740:	55 27       	eor	r21, r21
    1742:	50 93 3e 01 	sts	0x013E, r21
    1746:	40 93 3d 01 	sts	0x013D, r20
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	fc 01       	movw	r30, r24
    1750:	e8 55       	subi	r30, 0x58	; 88
    1752:	fc 4f       	sbci	r31, 0xFC	; 252
    1754:	25 91       	lpm	r18, Z+
    1756:	34 91       	lpm	r19, Z
    1758:	30 93 40 01 	sts	0x0140, r19
    175c:	20 93 3f 01 	sts	0x013F, r18
    1760:	88 54       	subi	r24, 0x48	; 72
    1762:	9c 4f       	sbci	r25, 0xFC	; 252
    1764:	fc 01       	movw	r30, r24
    1766:	25 91       	lpm	r18, Z+
    1768:	34 91       	lpm	r19, Z
    176a:	30 93 42 01 	sts	0x0142, r19
    176e:	20 93 41 01 	sts	0x0141, r18
    1772:	80 e1       	ldi	r24, 0x10	; 16
    1774:	84 1b       	sub	r24, r20
    1776:	8a bd       	out	0x2a, r24	; 42
    1778:	48 50       	subi	r20, 0x08	; 8
    177a:	4b bd       	out	0x2b, r20	; 43
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	08 95       	ret

00001782 <DF_CheckCorrectOnboardChip>:
    1782:	0e 94 81 0b 	call	0x1702	; 0x1702 <DF_GetChipCharacteristics>
    1786:	80 91 41 01 	lds	r24, 0x0141
    178a:	90 91 42 01 	lds	r25, 0x0142
    178e:	80 50       	subi	r24, 0x00	; 0
    1790:	98 40       	sbci	r25, 0x08	; 8
    1792:	19 f4       	brne	.+6      	; 0x179a <DF_CheckCorrectOnboardChip+0x18>
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	08 95       	ret
    179a:	80 91 64 00 	lds	r24, 0x0064
    179e:	84 60       	ori	r24, 0x04	; 4
    17a0:	80 93 64 00 	sts	0x0064, r24
    17a4:	88 ec       	ldi	r24, 0xC8	; 200
    17a6:	93 e0       	ldi	r25, 0x03	; 3
    17a8:	0e 94 c3 03 	call	0x786	; 0x786 <MAIN_ShowError>
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	08 95       	ret

000017b2 <BUFF_InitialiseBuffer>:

// ======================================================================================

void BUFF_InitialiseBuffer(void)
{
    17b2:	10 92 89 01 	sts	0x0189, r1
	InPos  = 0;                            // Set up the IN counter to the start of the buffer
	OutPos = 0;                            // Set up the OUT counter to the start of the buffer
    17b6:	10 92 8a 01 	sts	0x018A, r1

	BuffElements = 0;                      // Reset the buffer elements counter
    17ba:	10 92 88 01 	sts	0x0188, r1
    17be:	08 95       	ret

000017c0 <BUFF_GetBuffByte>:
}

uint8_t BUFF_GetBuffByte(void)
{
    17c0:	80 91 88 01 	lds	r24, 0x0188
    17c4:	88 23       	and	r24, r24
    17c6:	19 f4       	brne	.+6      	; 0x17ce <BUFF_GetBuffByte+0xe>
	if (!(BuffElements))                   // No elements in the buffer
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	08 95       	ret
	  return 0;

	uint8_t RetrievedData = RingBuffer[OutPos++]; // Grab the stored byte into a temp variable
    17ce:	80 91 8a 01 	lds	r24, 0x018A
    17d2:	e8 2f       	mov	r30, r24
    17d4:	ff 27       	eor	r31, r31
    17d6:	e8 5b       	subi	r30, 0xB8	; 184
    17d8:	fe 4f       	sbci	r31, 0xFE	; 254
    17da:	e0 81       	ld	r30, Z
    17dc:	8f 5f       	subi	r24, 0xFF	; 255
    17de:	80 93 8a 01 	sts	0x018A, r24
	BuffElements--;                        // Decrement the total elements variable
    17e2:	80 91 88 01 	lds	r24, 0x0188
    17e6:	81 50       	subi	r24, 0x01	; 1
    17e8:	80 93 88 01 	sts	0x0188, r24
	
	if (OutPos == BUFF_BUFFLEN)
    17ec:	80 91 8a 01 	lds	r24, 0x018A
    17f0:	80 34       	cpi	r24, 0x40	; 64
    17f2:	11 f4       	brne	.+4      	; 0x17f8 <BUFF_GetBuffByte+0x38>
	  OutPos = 0;                        // Wrap pointer if end of array reached
    17f4:	10 92 8a 01 	sts	0x018A, r1
		
	return RetrievedData;                 // Return the retrieved data
    17f8:	8e 2f       	mov	r24, r30
    17fa:	99 27       	eor	r25, r25
}
    17fc:	08 95       	ret

000017fe <__vector_13>:
    17fe:	1f 92       	push	r1
    1800:	0f 92       	push	r0
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	0f 92       	push	r0
    1806:	11 24       	eor	r1, r1
    1808:	2f 93       	push	r18
    180a:	3f 93       	push	r19
    180c:	4f 93       	push	r20
    180e:	5f 93       	push	r21
    1810:	6f 93       	push	r22
    1812:	7f 93       	push	r23
    1814:	8f 93       	push	r24
    1816:	9f 93       	push	r25
    1818:	af 93       	push	r26
    181a:	bf 93       	push	r27
    181c:	ef 93       	push	r30
    181e:	ff 93       	push	r31
    1820:	80 91 88 01 	lds	r24, 0x0188
    1824:	80 34       	cpi	r24, 0x40	; 64
    1826:	21 f4       	brne	.+8      	; 0x1830 <__vector_13+0x32>
    1828:	88 ed       	ldi	r24, 0xD8	; 216
    182a:	93 e0       	ldi	r25, 0x03	; 3
    182c:	0e 94 cc 04 	call	0x998	; 0x998 <MAIN_CrashProgram>
    1830:	80 91 89 01 	lds	r24, 0x0189
    1834:	e8 2f       	mov	r30, r24
    1836:	ff 27       	eor	r31, r31
    1838:	90 91 c6 00 	lds	r25, 0x00C6
    183c:	e8 5b       	subi	r30, 0xB8	; 184
    183e:	fe 4f       	sbci	r31, 0xFE	; 254
    1840:	90 83       	st	Z, r25
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	80 93 89 01 	sts	0x0189, r24
    1848:	80 91 88 01 	lds	r24, 0x0188
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	80 93 88 01 	sts	0x0188, r24
    1852:	80 91 89 01 	lds	r24, 0x0189
    1856:	80 34       	cpi	r24, 0x40	; 64
    1858:	11 f4       	brne	.+4      	; 0x185e <__vector_13+0x60>
    185a:	10 92 89 01 	sts	0x0189, r1
    185e:	ff 91       	pop	r31
    1860:	ef 91       	pop	r30
    1862:	bf 91       	pop	r27
    1864:	af 91       	pop	r26
    1866:	9f 91       	pop	r25
    1868:	8f 91       	pop	r24
    186a:	7f 91       	pop	r23
    186c:	6f 91       	pop	r22
    186e:	5f 91       	pop	r21
    1870:	4f 91       	pop	r20
    1872:	3f 91       	pop	r19
    1874:	2f 91       	pop	r18
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	0f 90       	pop	r0
    187c:	1f 90       	pop	r1
    187e:	18 95       	reti

00001880 <TOUT_SetupSleepTimer>:

// ======================================================================================

void TOUT_SetupSleepTimer(void)
{
    1880:	ab e8       	ldi	r26, 0x8B	; 139
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
    1888:	80 2d       	mov	r24, r0
	uint8_t NewTicksIndex = eeprom_read_byte(&EEPROMVars.AutoSleepValIndex);
    188a:	48 2f       	mov	r20, r24

	if (NewTicksIndex == 0xFF) // Blank EEPROM protection
    188c:	8f 3f       	cpi	r24, 0xFF	; 255
    188e:	09 f4       	brne	.+2      	; 0x1892 <TOUT_SetupSleepTimer+0x12>
    1890:	44 e0       	ldi	r20, 0x04	; 4
	  NewTicksIndex = 4;

	TIMSK1 = (1 << TOIE1);
    1892:	51 e0       	ldi	r21, 0x01	; 1
    1894:	50 93 6f 00 	sts	0x006F, r21
	TicksBeforeAutoSleep = ((pgm_read_byte(&AutoSleepTOValues[NewTicksIndex]) << 1) * 5); // ((x << 1) * 5) == (x * 10)
    1898:	e4 2f       	mov	r30, r20
    189a:	ff 27       	eor	r31, r31
    189c:	ef 51       	subi	r30, 0x1F	; 31
    189e:	fc 4f       	sbci	r31, 0xFC	; 252
    18a0:	e4 91       	lpm	r30, Z
    18a2:	8e 2f       	mov	r24, r30
    18a4:	99 27       	eor	r25, r25
    18a6:	9c 01       	movw	r18, r24
    18a8:	73 e0       	ldi	r23, 0x03	; 3
    18aa:	22 0f       	add	r18, r18
    18ac:	33 1f       	adc	r19, r19
    18ae:	7a 95       	dec	r23
    18b0:	e1 f7       	brne	.-8      	; 0x18aa <TOUT_SetupSleepTimer+0x2a>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	28 0f       	add	r18, r24
    18b8:	39 1f       	adc	r19, r25
    18ba:	30 93 90 01 	sts	0x0190, r19
    18be:	20 93 8f 01 	sts	0x018F, r18

	TIMEOUT_SLEEP_TIMEOUT_RESET();
    18c2:	10 92 8e 01 	sts	0x018E, r1
    18c6:	10 92 8d 01 	sts	0x018D, r1
    18ca:	10 92 85 00 	sts	0x0085, r1
    18ce:	10 92 84 00 	sts	0x0084, r1
	
	if (NewTicksIndex)
    18d2:	44 23       	and	r20, r20
    18d4:	19 f0       	breq	.+6      	; 0x18dc <TOUT_SetupSleepTimer+0x5c>
	  TIMEOUT_SLEEP_TIMER_ON();
    18d6:	50 93 81 00 	sts	0x0081, r21
    18da:	08 95       	ret
	else
	  TIMEOUT_SLEEP_TIMER_OFF();
    18dc:	10 92 81 00 	sts	0x0081, r1
    18e0:	08 95       	ret

000018e2 <__vector_9>:
    18e2:	78 94       	sei
    18e4:	1f 92       	push	r1
    18e6:	0f 92       	push	r0
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	0f 92       	push	r0
    18ec:	11 24       	eor	r1, r1
    18ee:	2f 93       	push	r18
    18f0:	3f 93       	push	r19
    18f2:	4f 93       	push	r20
    18f4:	5f 93       	push	r21
    18f6:	6f 93       	push	r22
    18f8:	7f 93       	push	r23
    18fa:	8f 93       	push	r24
    18fc:	9f 93       	push	r25
    18fe:	af 93       	push	r26
    1900:	bf 93       	push	r27
    1902:	ef 93       	push	r30
    1904:	ff 93       	push	r31
    1906:	80 91 8d 01 	lds	r24, 0x018D
    190a:	90 91 8e 01 	lds	r25, 0x018E
    190e:	20 91 8f 01 	lds	r18, 0x018F
    1912:	30 91 90 01 	lds	r19, 0x0190
    1916:	01 96       	adiw	r24, 0x01	; 1
    1918:	90 93 8e 01 	sts	0x018E, r25
    191c:	80 93 8d 01 	sts	0x018D, r24
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	82 17       	cp	r24, r18
    1924:	93 07       	cpc	r25, r19
    1926:	31 f4       	brne	.+12     	; 0x1934 <__vector_9+0x52>
    1928:	10 92 81 00 	sts	0x0081, r1
    192c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <FUNCSleepMode>
    1930:	0e 94 40 0c 	call	0x1880	; 0x1880 <TOUT_SetupSleepTimer>
    1934:	ff 91       	pop	r31
    1936:	ef 91       	pop	r30
    1938:	bf 91       	pop	r27
    193a:	af 91       	pop	r26
    193c:	9f 91       	pop	r25
    193e:	8f 91       	pop	r24
    1940:	7f 91       	pop	r23
    1942:	6f 91       	pop	r22
    1944:	5f 91       	pop	r21
    1946:	4f 91       	pop	r20
    1948:	3f 91       	pop	r19
    194a:	2f 91       	pop	r18
    194c:	0f 90       	pop	r0
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	0f 90       	pop	r0
    1952:	1f 90       	pop	r1
    1954:	18 95       	reti

00001956 <__vector_4>:
    1956:	78 94       	sei
    1958:	1f 92       	push	r1
    195a:	0f 92       	push	r0
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	0f 92       	push	r0
    1960:	11 24       	eor	r1, r1
    1962:	2f 93       	push	r18
    1964:	3f 93       	push	r19
    1966:	4f 93       	push	r20
    1968:	5f 93       	push	r21
    196a:	6f 93       	push	r22
    196c:	7f 93       	push	r23
    196e:	8f 93       	push	r24
    1970:	9f 93       	push	r25
    1972:	af 93       	push	r26
    1974:	bf 93       	push	r27
    1976:	ef 93       	push	r30
    1978:	ff 93       	push	r31
    197a:	80 91 8b 01 	lds	r24, 0x018B
    197e:	8f 5f       	subi	r24, 0xFF	; 255
    1980:	80 93 8b 01 	sts	0x018B, r24
    1984:	80 91 8b 01 	lds	r24, 0x018B
    1988:	87 39       	cpi	r24, 0x97	; 151
    198a:	29 f4       	brne	.+10     	; 0x1996 <__vector_4+0x40>
    198c:	10 92 8b 01 	sts	0x018B, r1
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	80 93 8c 01 	sts	0x018C, r24
    1996:	80 91 c0 00 	lds	r24, 0x00C0
    199a:	83 ff       	sbrs	r24, 3
    199c:	03 c0       	rjmp	.+6      	; 0x19a4 <__vector_4+0x4e>
    199e:	80 ef       	ldi	r24, 0xF0	; 240
    19a0:	93 e0       	ldi	r25, 0x03	; 3
    19a2:	06 c0       	rjmp	.+12     	; 0x19b0 <__vector_4+0x5a>
    19a4:	80 91 c0 00 	lds	r24, 0x00C0
    19a8:	84 ff       	sbrs	r24, 4
    19aa:	04 c0       	rjmp	.+8      	; 0x19b4 <__vector_4+0x5e>
    19ac:	86 ee       	ldi	r24, 0xE6	; 230
    19ae:	93 e0       	ldi	r25, 0x03	; 3
    19b0:	0e 94 cc 04 	call	0x998	; 0x998 <MAIN_CrashProgram>
    19b4:	ff 91       	pop	r31
    19b6:	ef 91       	pop	r30
    19b8:	bf 91       	pop	r27
    19ba:	af 91       	pop	r26
    19bc:	9f 91       	pop	r25
    19be:	8f 91       	pop	r24
    19c0:	7f 91       	pop	r23
    19c2:	6f 91       	pop	r22
    19c4:	5f 91       	pop	r21
    19c6:	4f 91       	pop	r20
    19c8:	3f 91       	pop	r19
    19ca:	2f 91       	pop	r18
    19cc:	0f 90       	pop	r0
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	0f 90       	pop	r0
    19d2:	1f 90       	pop	r1
    19d4:	18 95       	reti

000019d6 <PD_SetupDFAddressCounters>:
	}
}

void PD_SetupDFAddressCounters(void)
{
    19d6:	ef 92       	push	r14
    19d8:	ff 92       	push	r15
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
	uint32_t StartAddress = CurrAddress;
    19de:	20 91 a9 02 	lds	r18, 0x02A9
    19e2:	30 91 aa 02 	lds	r19, 0x02AA
    19e6:	40 91 ab 02 	lds	r20, 0x02AB
    19ea:	50 91 ac 02 	lds	r21, 0x02AC

	DataflashInfo.CurrPageAddress = 0;
    19ee:	10 92 44 01 	sts	0x0144, r1
    19f2:	10 92 43 01 	sts	0x0143, r1

	while (StartAddress > DataflashInfo.PageSize)      // This loop is the equivalent of a DIV and a MOD
    19f6:	80 91 3f 01 	lds	r24, 0x013F
    19fa:	90 91 40 01 	lds	r25, 0x0140
    19fe:	aa 27       	eor	r26, r26
    1a00:	bb 27       	eor	r27, r27
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	ee 24       	eor	r14, r14
    1a08:	ff 24       	eor	r15, r15
    1a0a:	87 01       	movw	r16, r14
    1a0c:	e8 1a       	sub	r14, r24
    1a0e:	f9 0a       	sbc	r15, r25
    1a10:	0a 0b       	sbc	r16, r26
    1a12:	1b 0b       	sbc	r17, r27
    1a14:	06 c0       	rjmp	.+12     	; 0x1a22 <PD_SetupDFAddressCounters+0x4c>
    1a16:	2e 0d       	add	r18, r14
    1a18:	3f 1d       	adc	r19, r15
    1a1a:	40 1f       	adc	r20, r16
    1a1c:	51 1f       	adc	r21, r17
    1a1e:	6f 5f       	subi	r22, 0xFF	; 255
    1a20:	7f 4f       	sbci	r23, 0xFF	; 255
    1a22:	82 17       	cp	r24, r18
    1a24:	93 07       	cpc	r25, r19
    1a26:	a4 07       	cpc	r26, r20
    1a28:	b5 07       	cpc	r27, r21
    1a2a:	a8 f3       	brcs	.-22     	; 0x1a16 <PD_SetupDFAddressCounters+0x40>
    1a2c:	70 93 44 01 	sts	0x0144, r23
    1a30:	60 93 43 01 	sts	0x0143, r22
	{
		StartAddress -= DataflashInfo.PageSize;         // Subtract one page's worth of bytes from the desired address
		DataflashInfo.CurrPageAddress++;
	}
	
	DataflashInfo.CurrBuffByte = (uint16_t)StartAddress; // The buffer byte is the remainder
    1a34:	30 93 46 01 	sts	0x0146, r19
    1a38:	20 93 45 01 	sts	0x0145, r18
    1a3c:	1f 91       	pop	r17
    1a3e:	0f 91       	pop	r16
    1a40:	ff 90       	pop	r15
    1a42:	ef 90       	pop	r14
    1a44:	08 95       	ret

00001a46 <PD_StoreDataflashByte>:
}

void PD_StoreDataflashByte(const uint8_t Data)
{
    1a46:	1f 93       	push	r17
    1a48:	18 2f       	mov	r17, r24
	if (DataflashInfo.CurrBuffByte == DataflashInfo.PageSize)
    1a4a:	20 91 45 01 	lds	r18, 0x0145
    1a4e:	30 91 46 01 	lds	r19, 0x0146
    1a52:	80 91 3f 01 	lds	r24, 0x013F
    1a56:	90 91 40 01 	lds	r25, 0x0140
    1a5a:	28 17       	cp	r18, r24
    1a5c:	39 07       	cpc	r19, r25
    1a5e:	a1 f4       	brne	.+40     	; 0x1a88 <PD_StoreDataflashByte+0x42>
	{
		DF_CopyBufferToFlashPage(DataflashInfo.CurrPageAddress++);
    1a60:	80 91 43 01 	lds	r24, 0x0143
    1a64:	90 91 44 01 	lds	r25, 0x0144
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	90 93 44 01 	sts	0x0144, r25
    1a6e:	80 93 43 01 	sts	0x0143, r24
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <DF_BufferWriteEnable>
		DataflashInfo.CurrBuffByte = 0;
    1a80:	10 92 46 01 	sts	0x0146, r1
    1a84:	10 92 45 01 	sts	0x0145, r1
	}
	
	USI_SPITransmit(Data);                                 // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    1a88:	81 2f       	mov	r24, r17
    1a8a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
	DataflashInfo.CurrBuffByte++;
    1a8e:	80 91 45 01 	lds	r24, 0x0145
    1a92:	90 91 46 01 	lds	r25, 0x0146
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	90 93 46 01 	sts	0x0146, r25
    1a9c:	80 93 45 01 	sts	0x0145, r24
    1aa0:	1f 91       	pop	r17
    1aa2:	08 95       	ret

00001aa4 <PD_InterpretAVRISPPacket>:
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	80 91 91 01 	lds	r24, 0x0191
    1ab0:	86 31       	cpi	r24, 0x16	; 22
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <PD_InterpretAVRISPPacket+0x12>
    1ab4:	f1 c0       	rjmp	.+482    	; 0x1c98 <PD_InterpretAVRISPPacket+0x1f4>
    1ab6:	87 31       	cpi	r24, 0x17	; 23
    1ab8:	90 f4       	brcc	.+36     	; 0x1ade <PD_InterpretAVRISPPacket+0x3a>
    1aba:	82 31       	cpi	r24, 0x12	; 18
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <PD_InterpretAVRISPPacket+0x1c>
    1abe:	65 c0       	rjmp	.+202    	; 0x1b8a <PD_InterpretAVRISPPacket+0xe6>
    1ac0:	83 31       	cpi	r24, 0x13	; 19
    1ac2:	30 f4       	brcc	.+12     	; 0x1ad0 <PD_InterpretAVRISPPacket+0x2c>
    1ac4:	80 31       	cpi	r24, 0x10	; 16
    1ac6:	01 f1       	breq	.+64     	; 0x1b08 <PD_InterpretAVRISPPacket+0x64>
    1ac8:	81 31       	cpi	r24, 0x11	; 17
    1aca:	09 f0       	breq	.+2      	; 0x1ace <PD_InterpretAVRISPPacket+0x2a>
    1acc:	2f c1       	rjmp	.+606    	; 0x1d2c <PD_InterpretAVRISPPacket+0x288>
    1ace:	41 c0       	rjmp	.+130    	; 0x1b52 <PD_InterpretAVRISPPacket+0xae>
    1ad0:	84 31       	cpi	r24, 0x14	; 20
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <PD_InterpretAVRISPPacket+0x32>
    1ad4:	8b c0       	rjmp	.+278    	; 0x1bec <PD_InterpretAVRISPPacket+0x148>
    1ad6:	85 31       	cpi	r24, 0x15	; 21
    1ad8:	08 f0       	brcs	.+2      	; 0x1adc <PD_InterpretAVRISPPacket+0x38>
    1ada:	ab c0       	rjmp	.+342    	; 0x1c32 <PD_InterpretAVRISPPacket+0x18e>
    1adc:	80 c0       	rjmp	.+256    	; 0x1bde <PD_InterpretAVRISPPacket+0x13a>
    1ade:	89 31       	cpi	r24, 0x19	; 25
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <PD_InterpretAVRISPPacket+0x40>
    1ae2:	72 c0       	rjmp	.+228    	; 0x1bc8 <PD_InterpretAVRISPPacket+0x124>
    1ae4:	8a 31       	cpi	r24, 0x1A	; 26
    1ae6:	38 f4       	brcc	.+14     	; 0x1af6 <PD_InterpretAVRISPPacket+0x52>
    1ae8:	87 31       	cpi	r24, 0x17	; 23
    1aea:	09 f4       	brne	.+2      	; 0x1aee <PD_InterpretAVRISPPacket+0x4a>
    1aec:	6d c0       	rjmp	.+218    	; 0x1bc8 <PD_InterpretAVRISPPacket+0x124>
    1aee:	88 31       	cpi	r24, 0x18	; 24
    1af0:	09 f0       	breq	.+2      	; 0x1af4 <PD_InterpretAVRISPPacket+0x50>
    1af2:	1c c1       	rjmp	.+568    	; 0x1d2c <PD_InterpretAVRISPPacket+0x288>
    1af4:	5b c0       	rjmp	.+182    	; 0x1bac <PD_InterpretAVRISPPacket+0x108>
    1af6:	8b 31       	cpi	r24, 0x1B	; 27
    1af8:	f1 f1       	breq	.+124    	; 0x1b76 <PD_InterpretAVRISPPacket+0xd2>
    1afa:	8b 31       	cpi	r24, 0x1B	; 27
    1afc:	08 f4       	brcc	.+2      	; 0x1b00 <PD_InterpretAVRISPPacket+0x5c>
    1afe:	56 c0       	rjmp	.+172    	; 0x1bac <PD_InterpretAVRISPPacket+0x108>
    1b00:	8c 31       	cpi	r24, 0x1C	; 28
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <PD_InterpretAVRISPPacket+0x62>
    1b04:	13 c1       	rjmp	.+550    	; 0x1d2c <PD_InterpretAVRISPPacket+0x288>
    1b06:	52 c0       	rjmp	.+164    	; 0x1bac <PD_InterpretAVRISPPacket+0x108>
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	90 93 a7 02 	sts	0x02A7, r25
    1b10:	80 93 a6 02 	sts	0x02A6, r24
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    1b1a:	0e 94 81 0b 	call	0x1702	; 0x1702 <DF_GetChipCharacteristics>
    1b1e:	80 91 3d 01 	lds	r24, 0x013D
    1b22:	90 91 3e 01 	lds	r25, 0x013E
    1b26:	89 2b       	or	r24, r25
    1b28:	59 f0       	breq	.+22     	; 0x1b40 <PD_InterpretAVRISPPacket+0x9c>
    1b2a:	89 ef       	ldi	r24, 0xF9	; 249
    1b2c:	93 e0       	ldi	r25, 0x03	; 3
    1b2e:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	80 93 a8 02 	sts	0x02A8, r24
    1b38:	81 b3       	in	r24, 0x11	; 17
    1b3a:	8f 7c       	andi	r24, 0xCF	; 207
    1b3c:	80 62       	ori	r24, 0x20	; 32
    1b3e:	17 c0       	rjmp	.+46     	; 0x1b6e <PD_InterpretAVRISPPacket+0xca>
    1b40:	88 ec       	ldi	r24, 0xC8	; 200
    1b42:	93 e0       	ldi	r25, 0x03	; 3
    1b44:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    1b4e:	80 ec       	ldi	r24, 0xC0	; 192
    1b50:	f4 c0       	rjmp	.+488    	; 0x1d3a <PD_InterpretAVRISPPacket+0x296>
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	90 93 a7 02 	sts	0x02A7, r25
    1b5a:	80 93 a6 02 	sts	0x02A6, r24
    1b5e:	10 92 a8 02 	sts	0x02A8, r1
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    1b68:	81 b3       	in	r24, 0x11	; 17
    1b6a:	8f 7c       	andi	r24, 0xCF	; 207
    1b6c:	80 61       	ori	r24, 0x10	; 16
    1b6e:	81 bb       	out	0x11, r24	; 17
    1b70:	10 92 92 01 	sts	0x0192, r1
    1b74:	e4 c0       	rjmp	.+456    	; 0x1d3e <PD_InterpretAVRISPPacket+0x29a>
    1b76:	84 e0       	ldi	r24, 0x04	; 4
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	90 93 a7 02 	sts	0x02A7, r25
    1b7e:	80 93 a6 02 	sts	0x02A6, r24
    1b82:	10 92 92 01 	sts	0x0192, r1
    1b86:	82 e0       	ldi	r24, 0x02	; 2
    1b88:	1a c0       	rjmp	.+52     	; 0x1bbe <PD_InterpretAVRISPPacket+0x11a>
    1b8a:	82 e0       	ldi	r24, 0x02	; 2
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	90 93 a7 02 	sts	0x02A7, r25
    1b92:	80 93 a6 02 	sts	0x02A6, r24
    1b96:	10 92 92 01 	sts	0x0192, r1
    1b9a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <V2P_SendPacket>
    1b9e:	87 ea       	ldi	r24, 0xA7	; 167
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
    1ba6:	c0 e0       	ldi	r28, 0x00	; 0
    1ba8:	d0 e0       	ldi	r29, 0x00	; 0
    1baa:	d0 c0       	rjmp	.+416    	; 0x1d4c <PD_InterpretAVRISPPacket+0x2a8>
    1bac:	84 e0       	ldi	r24, 0x04	; 4
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	90 93 a7 02 	sts	0x02A7, r25
    1bb4:	80 93 a6 02 	sts	0x02A6, r24
    1bb8:	10 92 92 01 	sts	0x0192, r1
    1bbc:	8f ef       	ldi	r24, 0xFF	; 255
    1bbe:	80 93 93 01 	sts	0x0193, r24
    1bc2:	10 92 94 01 	sts	0x0194, r1
    1bc6:	bb c0       	rjmp	.+374    	; 0x1d3e <PD_InterpretAVRISPPacket+0x29a>
    1bc8:	83 e0       	ldi	r24, 0x03	; 3
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	90 93 a7 02 	sts	0x02A7, r25
    1bd0:	80 93 a6 02 	sts	0x02A6, r24
    1bd4:	10 92 92 01 	sts	0x0192, r1
    1bd8:	10 92 93 01 	sts	0x0193, r1
    1bdc:	b0 c0       	rjmp	.+352    	; 0x1d3e <PD_InterpretAVRISPPacket+0x29a>
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	90 93 a7 02 	sts	0x02A7, r25
    1be6:	80 93 a6 02 	sts	0x02A6, r24
    1bea:	c2 cf       	rjmp	.-124    	; 0x1b70 <PD_InterpretAVRISPPacket+0xcc>
    1bec:	20 91 92 01 	lds	r18, 0x0192
    1bf0:	33 27       	eor	r19, r19
    1bf2:	32 2f       	mov	r19, r18
    1bf4:	22 27       	eor	r18, r18
    1bf6:	80 91 93 01 	lds	r24, 0x0193
    1bfa:	99 27       	eor	r25, r25
    1bfc:	28 2b       	or	r18, r24
    1bfe:	39 2b       	or	r19, r25
    1c00:	f9 01       	movw	r30, r18
    1c02:	33 96       	adiw	r30, 0x03	; 3
    1c04:	f0 93 a7 02 	sts	0x02A7, r31
    1c08:	e0 93 a6 02 	sts	0x02A6, r30
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a2 e9       	ldi	r26, 0x92	; 146
    1c12:	b1 e0       	ldi	r27, 0x01	; 1
    1c14:	2f 5f       	subi	r18, 0xFF	; 255
    1c16:	3f 4f       	sbci	r19, 0xFF	; 255
    1c18:	4f ef       	ldi	r20, 0xFF	; 255
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <PD_InterpretAVRISPPacket+0x17c>
    1c1c:	4d 93       	st	X+, r20
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	82 17       	cp	r24, r18
    1c22:	93 07       	cpc	r25, r19
    1c24:	d8 f3       	brcs	.-10     	; 0x1c1c <PD_InterpretAVRISPPacket+0x178>
    1c26:	10 92 92 01 	sts	0x0192, r1
    1c2a:	e0 57       	subi	r30, 0x70	; 112
    1c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c2e:	10 82       	st	Z, r1
    1c30:	86 c0       	rjmp	.+268    	; 0x1d3e <PD_InterpretAVRISPPacket+0x29a>
    1c32:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <PD_SetupDFAddressCounters>
    1c36:	80 91 43 01 	lds	r24, 0x0143
    1c3a:	90 91 44 01 	lds	r25, 0x0144
    1c3e:	0e 94 23 0b 	call	0x1646	; 0x1646 <DF_CopyFlashPageToBuffer>
    1c42:	80 91 45 01 	lds	r24, 0x0145
    1c46:	90 91 46 01 	lds	r25, 0x0146
    1c4a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <DF_BufferWriteEnable>
    1c4e:	80 91 92 01 	lds	r24, 0x0192
    1c52:	99 27       	eor	r25, r25
    1c54:	d8 2f       	mov	r29, r24
    1c56:	cc 27       	eor	r28, r28
    1c58:	80 91 93 01 	lds	r24, 0x0193
    1c5c:	99 27       	eor	r25, r25
    1c5e:	c8 2b       	or	r28, r24
    1c60:	d9 2b       	or	r29, r25
    1c62:	01 e9       	ldi	r16, 0x91	; 145
    1c64:	11 e0       	ldi	r17, 0x01	; 1
    1c66:	11 c0       	rjmp	.+34     	; 0x1c8a <PD_InterpretAVRISPPacket+0x1e6>
    1c68:	f8 01       	movw	r30, r16
    1c6a:	82 85       	ldd	r24, Z+10	; 0x0a
    1c6c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <PD_StoreDataflashByte>
    1c70:	80 91 45 01 	lds	r24, 0x0145
    1c74:	90 91 46 01 	lds	r25, 0x0146
    1c78:	01 96       	adiw	r24, 0x01	; 1
    1c7a:	90 93 46 01 	sts	0x0146, r25
    1c7e:	80 93 45 01 	sts	0x0145, r24
    1c82:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <V2P_IncrementCurrAddress>
    1c86:	0f 5f       	subi	r16, 0xFF	; 255
    1c88:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	8f 56       	subi	r24, 0x6F	; 111
    1c8e:	9e 4f       	sbci	r25, 0xFE	; 254
    1c90:	08 17       	cp	r16, r24
    1c92:	19 07       	cpc	r17, r25
    1c94:	49 f7       	brne	.-46     	; 0x1c68 <PD_InterpretAVRISPPacket+0x1c4>
    1c96:	6c cf       	rjmp	.-296    	; 0x1b70 <PD_InterpretAVRISPPacket+0xcc>
    1c98:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <PD_SetupDFAddressCounters>
    1c9c:	80 91 43 01 	lds	r24, 0x0143
    1ca0:	90 91 44 01 	lds	r25, 0x0144
    1ca4:	0e 94 23 0b 	call	0x1646	; 0x1646 <DF_CopyFlashPageToBuffer>
    1ca8:	80 91 92 01 	lds	r24, 0x0192
    1cac:	99 27       	eor	r25, r25
    1cae:	d8 2f       	mov	r29, r24
    1cb0:	cc 27       	eor	r28, r28
    1cb2:	80 91 93 01 	lds	r24, 0x0193
    1cb6:	99 27       	eor	r25, r25
    1cb8:	c8 2b       	or	r28, r24
    1cba:	d9 2b       	or	r29, r25
    1cbc:	01 e9       	ldi	r16, 0x91	; 145
    1cbe:	11 e0       	ldi	r17, 0x01	; 1
    1cc0:	25 c0       	rjmp	.+74     	; 0x1d0c <PD_InterpretAVRISPPacket+0x268>
    1cc2:	20 91 45 01 	lds	r18, 0x0145
    1cc6:	30 91 46 01 	lds	r19, 0x0146
    1cca:	80 91 3f 01 	lds	r24, 0x013F
    1cce:	90 91 40 01 	lds	r25, 0x0140
    1cd2:	28 17       	cp	r18, r24
    1cd4:	39 07       	cpc	r19, r25
    1cd6:	41 f4       	brne	.+16     	; 0x1ce8 <PD_InterpretAVRISPPacket+0x244>
    1cd8:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <PD_SetupDFAddressCounters>
    1cdc:	80 91 43 01 	lds	r24, 0x0143
    1ce0:	90 91 44 01 	lds	r25, 0x0144
    1ce4:	0e 94 23 0b 	call	0x1646	; 0x1646 <DF_CopyFlashPageToBuffer>
    1ce8:	80 91 45 01 	lds	r24, 0x0145
    1cec:	90 91 46 01 	lds	r25, 0x0146
    1cf0:	01 96       	adiw	r24, 0x01	; 1
    1cf2:	90 93 46 01 	sts	0x0146, r25
    1cf6:	80 93 45 01 	sts	0x0145, r24
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <DF_ReadBufferByte>
    1d00:	f8 01       	movw	r30, r16
    1d02:	82 83       	std	Z+2, r24	; 0x02
    1d04:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <V2P_IncrementCurrAddress>
    1d08:	0f 5f       	subi	r16, 0xFF	; 255
    1d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	8f 56       	subi	r24, 0x6F	; 111
    1d10:	9e 4f       	sbci	r25, 0xFE	; 254
    1d12:	08 17       	cp	r16, r24
    1d14:	19 07       	cpc	r17, r25
    1d16:	a9 f6       	brne	.-86     	; 0x1cc2 <PD_InterpretAVRISPPacket+0x21e>
    1d18:	23 96       	adiw	r28, 0x03	; 3
    1d1a:	d0 93 a7 02 	sts	0x02A7, r29
    1d1e:	c0 93 a6 02 	sts	0x02A6, r28
    1d22:	10 92 92 01 	sts	0x0192, r1
    1d26:	f8 01       	movw	r30, r16
    1d28:	12 82       	std	Z+2, r1	; 0x02
    1d2a:	09 c0       	rjmp	.+18     	; 0x1d3e <PD_InterpretAVRISPPacket+0x29a>
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	90 93 a7 02 	sts	0x02A7, r25
    1d34:	80 93 a6 02 	sts	0x02A6, r24
    1d38:	89 ec       	ldi	r24, 0xC9	; 201
    1d3a:	80 93 92 01 	sts	0x0192, r24
    1d3e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <V2P_SendPacket>
    1d42:	14 c0       	rjmp	.+40     	; 0x1d6c <PD_InterpretAVRISPPacket+0x2c8>
    1d44:	ce 01       	movw	r24, r28
    1d46:	0e 94 00 0b 	call	0x1600	; 0x1600 <DF_EraseBlock>
    1d4a:	21 96       	adiw	r28, 0x01	; 1
    1d4c:	80 91 41 01 	lds	r24, 0x0141
    1d50:	90 91 42 01 	lds	r25, 0x0142
    1d54:	23 e0       	ldi	r18, 0x03	; 3
    1d56:	96 95       	lsr	r25
    1d58:	87 95       	ror	r24
    1d5a:	2a 95       	dec	r18
    1d5c:	e1 f7       	brne	.-8      	; 0x1d56 <PD_InterpretAVRISPPacket+0x2b2>
    1d5e:	c8 17       	cp	r28, r24
    1d60:	d9 07       	cpc	r29, r25
    1d62:	80 f3       	brcs	.-32     	; 0x1d44 <PD_InterpretAVRISPPacket+0x2a0>
    1d64:	89 ef       	ldi	r24, 0xF9	; 249
    1d66:	93 e0       	ldi	r25, 0x03	; 3
    1d68:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	1f 91       	pop	r17
    1d72:	0f 91       	pop	r16
    1d74:	08 95       	ret

00001d76 <V2P_GetChecksum>:
	SequenceNum++;
}

uint8_t V2P_GetChecksum()
{
    1d76:	90 91 a4 02 	lds	r25, 0x02A4
    1d7a:	8b e1       	ldi	r24, 0x1B	; 27
    1d7c:	98 27       	eor	r25, r24
	uint8_t CheckSumByte;
	
	/* Checksum for the V2 protocol is comprised of an XOR of all the packet 
      bytes, including the start, sequence number, size and token bytes.    */
	
	CheckSumByte  = AICB_MESSAGE_START;
	CheckSumByte ^= SequenceNum;
	CheckSumByte ^= (uint8_t)(MessageSize >> 8);
    1d7e:	40 91 a6 02 	lds	r20, 0x02A6
    1d82:	50 91 a7 02 	lds	r21, 0x02A7
    1d86:	94 27       	eor	r25, r20
	CheckSumByte ^= (uint8_t)(MessageSize & 0xFF);
    1d88:	25 2f       	mov	r18, r21
    1d8a:	33 27       	eor	r19, r19
    1d8c:	8e e0       	ldi	r24, 0x0E	; 14
    1d8e:	82 27       	eor	r24, r18
	CheckSumByte ^= AICB_TOKEN;
    1d90:	98 27       	eor	r25, r24
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	e1 e9       	ldi	r30, 0x91	; 145
    1d98:	f1 e0       	ldi	r31, 0x01	; 1
    1d9a:	04 c0       	rjmp	.+8      	; 0x1da4 <V2P_GetChecksum+0x2e>
	
	for (uint16_t CByteIndex = 0; CByteIndex < MessageSize; CByteIndex++)
	   CheckSumByte ^= PacketBytes[CByteIndex];
    1d9c:	81 91       	ld	r24, Z+
    1d9e:	98 27       	eor	r25, r24
    1da0:	2f 5f       	subi	r18, 0xFF	; 255
    1da2:	3f 4f       	sbci	r19, 0xFF	; 255
    1da4:	24 17       	cp	r18, r20
    1da6:	35 07       	cpc	r19, r21
    1da8:	c9 f7       	brne	.-14     	; 0x1d9c <V2P_GetChecksum+0x26>

	return CheckSumByte;
}
    1daa:	89 2f       	mov	r24, r25
    1dac:	99 27       	eor	r25, r25
    1dae:	08 95       	ret

00001db0 <V2P_IncrementCurrAddress>:

void V2P_GetSetParamater(void)
{
	uint8_t Param_Name = PacketBytes[1];    // Save the parameter number

	MessageSize = 3;                        // Set the default response message size to 3 bytes     
	PacketBytes[1] = AICB_STATUS_CMD_OK;    // Set the default response to OK

	switch (Param_Name)                     // Switch based on the recieved parameter byte
	{
		case AICB_PARAM_BUILD_NUMBER_LOW:
			PacketBytes[2] = VERSION_MINOR;

			break;
		case AICB_PARAM_BUILD_NUMBER_HIGH:
			PacketBytes[2] = VERSION_MAJOR;

			break;
		case AICB_PARAM_HARDWARE_VERSION:
			PacketBytes[2] = V2P_HW_VERSION;

			break;
		case AICB_PARAM_SW_MAJOR:
			PacketBytes[2] = V2P_SW_VERSION_MAJOR;

			break;
		case AICB_PARAM_SW_MINOR:
			PacketBytes[2] = ((eeprom_read_byte(&EEPROMVars.FirmVerMinor) == 0xFF)? V2P_SW_VERSION_MINOR_DEFAULT : eeprom_read_byte(&EEPROMVars.FirmVerMinor));

			break;
		case AICB_PARAM_CONTROLLER_INIT:
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
			{
				PacketBytes[2] = Param_ControllerInit;
			}
			else
			{
				MessageSize = 2;
				Param_ControllerInit = PacketBytes[2];
			}
			
			break;
		case AICB_PARAM_SCK_DURATION:
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.SCKDuration);
			}
			else
			{
				MessageSize = 2;
				eeprom_write_byte(&EEPROMVars.SCKDuration, PacketBytes[2]);
				USI_SPISetSpeed();          // Re-Initialise the USI system with the new frequency
			}
					
			break;
		case AICB_PARAM_RESET_POLARITY:
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.ResetPolarity);		
			}
			else
			{
				MessageSize = 2;
				eeprom_write_byte(&EEPROMVars.ResetPolarity, PacketBytes[2]);
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Change takes effect immediatly
			}
			
			break;
		case AICB_PARAM_OSC_PSCALE:
		case AICB_PARAM_OSC_CMATCH:
		case AICB_PARAM_TOPCARD_DETECT:
			/* Despite not supporting these parameters (STK500 only), the AVR Studio programmer
			   sends them occasionally. A OK must be returned or the sequence will fail.        */
		
			if (PacketBytes[0] == AICB_CMD_GET_PARAMETER)
			  PacketBytes[2] = 0;             // If the command is a read, return a 0 for both parameters
			else
			  MessageSize = 2;                // Otherwise just send back an OK if the command is a set		
			
			break;
		default:                             // Unrecognised parameter
			MessageSize = 2;
			PacketBytes[1] = AICB_STATUS_CMD_FAILED;			
	}
	
	V2P_SendPacket();
}

void V2P_IncrementCurrAddress(void)
{
    1db0:	80 91 a9 02 	lds	r24, 0x02A9
    1db4:	90 91 aa 02 	lds	r25, 0x02AA
    1db8:	a0 91 ab 02 	lds	r26, 0x02AB
    1dbc:	b0 91 ac 02 	lds	r27, 0x02AC
    1dc0:	01 96       	adiw	r24, 0x01	; 1
    1dc2:	a1 1d       	adc	r26, r1
    1dc4:	b1 1d       	adc	r27, r1
    1dc6:	80 93 a9 02 	sts	0x02A9, r24
    1dca:	90 93 aa 02 	sts	0x02AA, r25
    1dce:	a0 93 ab 02 	sts	0x02AB, r26
    1dd2:	b0 93 ac 02 	sts	0x02AC, r27
    1dd6:	08 95       	ret

00001dd8 <V2P_CheckForExtendedAddress>:
	// Incrementing a 32-bit unsigned variable takes a lot of code. Because much of the code is
	// not very time critical (much of it is waiting for the hardware), I've chosen to waste
	// a few extra cycles per increment and save a good 60 bytes or so of code space by putting
	// the increment inside a function.

	CurrAddress++;
}

void V2P_CheckForExtendedAddress(void)
{
    1dd8:	80 91 a9 02 	lds	r24, 0x02A9
    1ddc:	90 91 aa 02 	lds	r25, 0x02AA
    1de0:	a0 91 ab 02 	lds	r26, 0x02AB
    1de4:	b0 91 ac 02 	lds	r27, 0x02AC
    1de8:	b7 ff       	sbrs	r27, 7
    1dea:	1e c0       	rjmp	.+60     	; 0x1e28 <V2P_CheckForExtendedAddress+0x50>
	if (CurrAddress & V2P_LOAD_EXTENDED_ADDR_FLAG)     // MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
	{
		USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);   // Load extended address command
    1dec:	8d e4       	ldi	r24, 0x4D	; 77
    1dee:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
		USI_SPITransmit((CurrAddress & V2P_LOAD_EXTENDED_ADDR_MASK) >> V2P_LOAD_EXTENDED_ADDR_SHIFT);
    1df8:	80 91 ab 02 	lds	r24, 0x02AB
    1dfc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
		
		CurrAddress &= ~(V2P_LOAD_EXTENDED_ADDR_FLAG); // Clear the flag
    1e06:	80 91 a9 02 	lds	r24, 0x02A9
    1e0a:	90 91 aa 02 	lds	r25, 0x02AA
    1e0e:	a0 91 ab 02 	lds	r26, 0x02AB
    1e12:	b0 91 ac 02 	lds	r27, 0x02AC
    1e16:	bf 77       	andi	r27, 0x7F	; 127
    1e18:	80 93 a9 02 	sts	0x02A9, r24
    1e1c:	90 93 aa 02 	sts	0x02AA, r25
    1e20:	a0 93 ab 02 	sts	0x02AB, r26
    1e24:	b0 93 ac 02 	sts	0x02AC, r27
    1e28:	08 95       	ret

00001e2a <V2P_SendPacket>:
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	8b e1       	ldi	r24, 0x1B	; 27
    1e34:	0e 94 87 09 	call	0x130e	; 0x130e <USART_Tx>
    1e38:	80 91 a4 02 	lds	r24, 0x02A4
    1e3c:	0e 94 87 09 	call	0x130e	; 0x130e <USART_Tx>
    1e40:	80 91 a7 02 	lds	r24, 0x02A7
    1e44:	0e 94 87 09 	call	0x130e	; 0x130e <USART_Tx>
    1e48:	80 91 a6 02 	lds	r24, 0x02A6
    1e4c:	0e 94 87 09 	call	0x130e	; 0x130e <USART_Tx>
    1e50:	8e e0       	ldi	r24, 0x0E	; 14
    1e52:	0e 94 87 09 	call	0x130e	; 0x130e <USART_Tx>
    1e56:	c0 e0       	ldi	r28, 0x00	; 0
    1e58:	d0 e0       	ldi	r29, 0x00	; 0
    1e5a:	01 e9       	ldi	r16, 0x91	; 145
    1e5c:	11 e0       	ldi	r17, 0x01	; 1
    1e5e:	06 c0       	rjmp	.+12     	; 0x1e6c <V2P_SendPacket+0x42>
    1e60:	f8 01       	movw	r30, r16
    1e62:	81 91       	ld	r24, Z+
    1e64:	8f 01       	movw	r16, r30
    1e66:	0e 94 87 09 	call	0x130e	; 0x130e <USART_Tx>
    1e6a:	21 96       	adiw	r28, 0x01	; 1
    1e6c:	80 91 a6 02 	lds	r24, 0x02A6
    1e70:	90 91 a7 02 	lds	r25, 0x02A7
    1e74:	c8 17       	cp	r28, r24
    1e76:	d9 07       	cpc	r29, r25
    1e78:	98 f3       	brcs	.-26     	; 0x1e60 <V2P_SendPacket+0x36>
    1e7a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <V2P_GetChecksum>
    1e7e:	0e 94 87 09 	call	0x130e	; 0x130e <USART_Tx>
    1e82:	80 91 a4 02 	lds	r24, 0x02A4
    1e86:	90 91 a5 02 	lds	r25, 0x02A5
    1e8a:	01 96       	adiw	r24, 0x01	; 1
    1e8c:	90 93 a5 02 	sts	0x02A5, r25
    1e90:	80 93 a4 02 	sts	0x02A4, r24
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	1f 91       	pop	r17
    1e9a:	0f 91       	pop	r16
    1e9c:	08 95       	ret

00001e9e <V2P_GetSetParamater>:
    1e9e:	20 91 92 01 	lds	r18, 0x0192
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	90 93 a7 02 	sts	0x02A7, r25
    1eaa:	80 93 a6 02 	sts	0x02A6, r24
    1eae:	10 92 92 01 	sts	0x0192, r1
    1eb2:	28 39       	cpi	r18, 0x98	; 152
    1eb4:	98 f4       	brcc	.+38     	; 0x1edc <V2P_GetSetParamater+0x3e>
    1eb6:	26 39       	cpi	r18, 0x96	; 150
    1eb8:	08 f0       	brcs	.+2      	; 0x1ebc <V2P_GetSetParamater+0x1e>
    1eba:	73 c0       	rjmp	.+230    	; 0x1fa2 <V2P_GetSetParamater+0x104>
    1ebc:	20 39       	cpi	r18, 0x90	; 144
    1ebe:	21 f1       	breq	.+72     	; 0x1f08 <V2P_GetSetParamater+0x6a>
    1ec0:	21 39       	cpi	r18, 0x91	; 145
    1ec2:	30 f4       	brcc	.+12     	; 0x1ed0 <V2P_GetSetParamater+0x32>
    1ec4:	20 38       	cpi	r18, 0x80	; 128
    1ec6:	d1 f0       	breq	.+52     	; 0x1efc <V2P_GetSetParamater+0x5e>
    1ec8:	21 38       	cpi	r18, 0x81	; 129
    1eca:	09 f0       	breq	.+2      	; 0x1ece <V2P_GetSetParamater+0x30>
    1ecc:	78 c0       	rjmp	.+240    	; 0x1fbe <V2P_GetSetParamater+0x120>
    1ece:	18 c0       	rjmp	.+48     	; 0x1f00 <V2P_GetSetParamater+0x62>
    1ed0:	21 39       	cpi	r18, 0x91	; 145
    1ed2:	d1 f0       	breq	.+52     	; 0x1f08 <V2P_GetSetParamater+0x6a>
    1ed4:	22 39       	cpi	r18, 0x92	; 146
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <V2P_GetSetParamater+0x3c>
    1ed8:	72 c0       	rjmp	.+228    	; 0x1fbe <V2P_GetSetParamater+0x120>
    1eda:	18 c0       	rjmp	.+48     	; 0x1f0c <V2P_GetSetParamater+0x6e>
    1edc:	2a 39       	cpi	r18, 0x9A	; 154
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <V2P_GetSetParamater+0x44>
    1ee0:	60 c0       	rjmp	.+192    	; 0x1fa2 <V2P_GetSetParamater+0x104>
    1ee2:	2b 39       	cpi	r18, 0x9B	; 155
    1ee4:	20 f4       	brcc	.+8      	; 0x1eee <V2P_GetSetParamater+0x50>
    1ee6:	28 39       	cpi	r18, 0x98	; 152
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <V2P_GetSetParamater+0x4e>
    1eea:	69 c0       	rjmp	.+210    	; 0x1fbe <V2P_GetSetParamater+0x120>
    1eec:	2d c0       	rjmp	.+90     	; 0x1f48 <V2P_GetSetParamater+0xaa>
    1eee:	2e 39       	cpi	r18, 0x9E	; 158
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <V2P_GetSetParamater+0x56>
    1ef2:	3e c0       	rjmp	.+124    	; 0x1f70 <V2P_GetSetParamater+0xd2>
    1ef4:	2f 39       	cpi	r18, 0x9F	; 159
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <V2P_GetSetParamater+0x5c>
    1ef8:	62 c0       	rjmp	.+196    	; 0x1fbe <V2P_GetSetParamater+0x120>
    1efa:	14 c0       	rjmp	.+40     	; 0x1f24 <V2P_GetSetParamater+0x86>
    1efc:	84 e0       	ldi	r24, 0x04	; 4
    1efe:	01 c0       	rjmp	.+2      	; 0x1f02 <V2P_GetSetParamater+0x64>
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	80 93 93 01 	sts	0x0193, r24
    1f06:	64 c0       	rjmp	.+200    	; 0x1fd0 <V2P_GetSetParamater+0x132>
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	fb cf       	rjmp	.-10     	; 0x1f02 <V2P_GetSetParamater+0x64>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1f0c:	2a e8       	ldi	r18, 0x8A	; 138
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	d9 01       	movw	r26, r18
    1f12:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
    1f16:	80 2d       	mov	r24, r0
    1f18:	8f 3f       	cpi	r24, 0xFF	; 255
    1f1a:	11 f4       	brne	.+4      	; 0x1f20 <V2P_GetSetParamater+0x82>
    1f1c:	87 e0       	ldi	r24, 0x07	; 7
    1f1e:	f1 cf       	rjmp	.-30     	; 0x1f02 <V2P_GetSetParamater+0x64>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1f20:	d9 01       	movw	r26, r18
    1f22:	2c c0       	rjmp	.+88     	; 0x1f7c <V2P_GetSetParamater+0xde>
    1f24:	80 91 91 01 	lds	r24, 0x0191
    1f28:	83 30       	cpi	r24, 0x03	; 3
    1f2a:	19 f4       	brne	.+6      	; 0x1f32 <V2P_GetSetParamater+0x94>
    1f2c:	80 91 ad 02 	lds	r24, 0x02AD
    1f30:	e8 cf       	rjmp	.-48     	; 0x1f02 <V2P_GetSetParamater+0x64>
    1f32:	82 e0       	ldi	r24, 0x02	; 2
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	90 93 a7 02 	sts	0x02A7, r25
    1f3a:	80 93 a6 02 	sts	0x02A6, r24
    1f3e:	80 91 93 01 	lds	r24, 0x0193
    1f42:	80 93 ad 02 	sts	0x02AD, r24
    1f46:	44 c0       	rjmp	.+136    	; 0x1fd0 <V2P_GetSetParamater+0x132>
    1f48:	80 91 91 01 	lds	r24, 0x0191
    1f4c:	a2 e0       	ldi	r26, 0x02	; 2
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	83 30       	cpi	r24, 0x03	; 3
    1f52:	a1 f0       	breq	.+40     	; 0x1f7c <V2P_GetSetParamater+0xde>
    1f54:	82 e0       	ldi	r24, 0x02	; 2
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	90 93 a7 02 	sts	0x02A7, r25
    1f5c:	80 93 a6 02 	sts	0x02A6, r24

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    1f60:	80 91 93 01 	lds	r24, 0x0193
    1f64:	08 2e       	mov	r0, r24
    1f66:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
    1f6a:	0e 94 14 0a 	call	0x1428	; 0x1428 <USI_SPISetSpeed>
    1f6e:	30 c0       	rjmp	.+96     	; 0x1fd0 <V2P_GetSetParamater+0x132>
    1f70:	80 91 91 01 	lds	r24, 0x0191
    1f74:	a1 e0       	ldi	r26, 0x01	; 1
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	83 30       	cpi	r24, 0x03	; 3
    1f7a:	21 f4       	brne	.+8      	; 0x1f84 <V2P_GetSetParamater+0xe6>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1f7c:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
    1f80:	80 2d       	mov	r24, r0
    1f82:	bf cf       	rjmp	.-130    	; 0x1f02 <V2P_GetSetParamater+0x64>
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	90 93 a7 02 	sts	0x02A7, r25
    1f8c:	80 93 a6 02 	sts	0x02A6, r24

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    1f90:	80 91 93 01 	lds	r24, 0x0193
    1f94:	08 2e       	mov	r0, r24
    1f96:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	0e 94 66 02 	call	0x4cc	; 0x4cc <MAIN_ResetCSLine>
    1fa0:	17 c0       	rjmp	.+46     	; 0x1fd0 <V2P_GetSetParamater+0x132>
    1fa2:	80 91 91 01 	lds	r24, 0x0191
    1fa6:	83 30       	cpi	r24, 0x03	; 3
    1fa8:	19 f4       	brne	.+6      	; 0x1fb0 <V2P_GetSetParamater+0x112>
    1faa:	10 92 93 01 	sts	0x0193, r1
    1fae:	10 c0       	rjmp	.+32     	; 0x1fd0 <V2P_GetSetParamater+0x132>
    1fb0:	82 e0       	ldi	r24, 0x02	; 2
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	90 93 a7 02 	sts	0x02A7, r25
    1fb8:	80 93 a6 02 	sts	0x02A6, r24
    1fbc:	09 c0       	rjmp	.+18     	; 0x1fd0 <V2P_GetSetParamater+0x132>
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	90 93 a7 02 	sts	0x02A7, r25
    1fc6:	80 93 a6 02 	sts	0x02A6, r24
    1fca:	80 ec       	ldi	r24, 0xC0	; 192
    1fcc:	80 93 92 01 	sts	0x0192, r24
    1fd0:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <V2P_SendPacket>
    1fd4:	08 95       	ret

00001fd6 <V2P_RunStateMachine>:
    1fd6:	cf 92       	push	r12
    1fd8:	df 92       	push	r13
    1fda:	ef 92       	push	r14
    1fdc:	ff 92       	push	r15
    1fde:	0f 93       	push	r16
    1fe0:	1f 93       	push	r17
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	6c 01       	movw	r12, r24
    1fe8:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <BUFF_InitialiseBuffer>
    1fec:	10 92 81 00 	sts	0x0081, r1
    1ff0:	10 92 a8 02 	sts	0x02A8, r1
    1ff4:	10 92 a9 02 	sts	0x02A9, r1
    1ff8:	10 92 aa 02 	sts	0x02AA, r1
    1ffc:	10 92 ab 02 	sts	0x02AB, r1
    2000:	10 92 ac 02 	sts	0x02AC, r1
    2004:	10 e0       	ldi	r17, 0x00	; 0
    2006:	73 c0       	rjmp	.+230    	; 0x20ee <V2P_RunStateMachine+0x118>
    2008:	12 e0       	ldi	r17, 0x02	; 2
    200a:	01 c0       	rjmp	.+2      	; 0x200e <V2P_RunStateMachine+0x38>
    200c:	19 e0       	ldi	r17, 0x09	; 9
    200e:	80 91 8c 01 	lds	r24, 0x018C
    2012:	81 30       	cpi	r24, 0x01	; 1
    2014:	09 f4       	brne	.+2      	; 0x2018 <V2P_RunStateMachine+0x42>
    2016:	0e c1       	rjmp	.+540    	; 0x2234 <V2P_RunStateMachine+0x25e>
    2018:	11 23       	and	r17, r17
    201a:	81 f1       	breq	.+96     	; 0x207c <V2P_RunStateMachine+0xa6>
    201c:	10 92 8c 01 	sts	0x018C, r1
    2020:	10 92 8b 01 	sts	0x018B, r1
    2024:	10 92 b2 00 	sts	0x00B2, r1
    2028:	80 ef       	ldi	r24, 0xF0	; 240
    202a:	80 93 b3 00 	sts	0x00B3, r24
    202e:	82 e0       	ldi	r24, 0x02	; 2
    2030:	80 93 70 00 	sts	0x0070, r24
    2034:	8f e0       	ldi	r24, 0x0F	; 15
    2036:	80 93 b0 00 	sts	0x00B0, r24
    203a:	15 30       	cpi	r17, 0x05	; 5
    203c:	09 f4       	brne	.+2      	; 0x2040 <V2P_RunStateMachine+0x6a>
    203e:	5a c0       	rjmp	.+180    	; 0x20f4 <V2P_RunStateMachine+0x11e>
    2040:	16 30       	cpi	r17, 0x06	; 6
    2042:	70 f4       	brcc	.+28     	; 0x2060 <V2P_RunStateMachine+0x8a>
    2044:	12 30       	cpi	r17, 0x02	; 2
    2046:	69 f1       	breq	.+90     	; 0x20a2 <V2P_RunStateMachine+0xcc>
    2048:	13 30       	cpi	r17, 0x03	; 3
    204a:	28 f4       	brcc	.+10     	; 0x2056 <V2P_RunStateMachine+0x80>
    204c:	11 23       	and	r17, r17
    204e:	b1 f0       	breq	.+44     	; 0x207c <V2P_RunStateMachine+0xa6>
    2050:	11 30       	cpi	r17, 0x01	; 1
    2052:	e9 f6       	brne	.-70     	; 0x200e <V2P_RunStateMachine+0x38>
    2054:	20 c0       	rjmp	.+64     	; 0x2096 <V2P_RunStateMachine+0xc0>
    2056:	13 30       	cpi	r17, 0x03	; 3
    2058:	69 f1       	breq	.+90     	; 0x20b4 <V2P_RunStateMachine+0xde>
    205a:	14 30       	cpi	r17, 0x04	; 4
    205c:	c1 f6       	brne	.-80     	; 0x200e <V2P_RunStateMachine+0x38>
    205e:	35 c0       	rjmp	.+106    	; 0x20ca <V2P_RunStateMachine+0xf4>
    2060:	18 30       	cpi	r17, 0x08	; 8
    2062:	09 f4       	brne	.+2      	; 0x2066 <V2P_RunStateMachine+0x90>
    2064:	f4 c0       	rjmp	.+488    	; 0x224e <V2P_RunStateMachine+0x278>
    2066:	19 30       	cpi	r17, 0x09	; 9
    2068:	30 f4       	brcc	.+12     	; 0x2076 <V2P_RunStateMachine+0xa0>
    206a:	16 30       	cpi	r17, 0x06	; 6
    206c:	09 f4       	brne	.+2      	; 0x2070 <V2P_RunStateMachine+0x9a>
    206e:	49 c0       	rjmp	.+146    	; 0x2102 <V2P_RunStateMachine+0x12c>
    2070:	17 30       	cpi	r17, 0x07	; 7
    2072:	69 f6       	brne	.-102    	; 0x200e <V2P_RunStateMachine+0x38>
    2074:	57 c0       	rjmp	.+174    	; 0x2124 <V2P_RunStateMachine+0x14e>
    2076:	1c 30       	cpi	r17, 0x0C	; 12
    2078:	50 f6       	brcc	.-108    	; 0x200e <V2P_RunStateMachine+0x38>
    207a:	d6 c0       	rjmp	.+428    	; 0x2228 <V2P_RunStateMachine+0x252>
    207c:	80 91 88 01 	lds	r24, 0x0188
    2080:	81 11       	cpse	r24, r1
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	18 2f       	mov	r17, r24
    2086:	f2 9b       	sbis	0x1e, 2	; 30
    2088:	c2 cf       	rjmp	.-124    	; 0x200e <V2P_RunStateMachine+0x38>
    208a:	80 91 a8 02 	lds	r24, 0x02A8
    208e:	88 23       	and	r24, r24
    2090:	09 f0       	breq	.+2      	; 0x2094 <V2P_RunStateMachine+0xbe>
    2092:	bd cf       	rjmp	.-134    	; 0x200e <V2P_RunStateMachine+0x38>
    2094:	e6 c0       	rjmp	.+460    	; 0x2262 <V2P_RunStateMachine+0x28c>
    2096:	0e 94 8f 09 	call	0x131e	; 0x131e <USART_Rx>
    209a:	8b 31       	cpi	r24, 0x1B	; 27
    209c:	09 f0       	breq	.+2      	; 0x20a0 <V2P_RunStateMachine+0xca>
    209e:	b6 cf       	rjmp	.-148    	; 0x200c <V2P_RunStateMachine+0x36>
    20a0:	b3 cf       	rjmp	.-154    	; 0x2008 <V2P_RunStateMachine+0x32>
    20a2:	0e 94 8f 09 	call	0x131e	; 0x131e <USART_Rx>
    20a6:	99 27       	eor	r25, r25
    20a8:	90 93 a5 02 	sts	0x02A5, r25
    20ac:	80 93 a4 02 	sts	0x02A4, r24
    20b0:	13 e0       	ldi	r17, 0x03	; 3
    20b2:	ad cf       	rjmp	.-166    	; 0x200e <V2P_RunStateMachine+0x38>
    20b4:	0e 94 8f 09 	call	0x131e	; 0x131e <USART_Rx>
    20b8:	99 27       	eor	r25, r25
    20ba:	98 2f       	mov	r25, r24
    20bc:	88 27       	eor	r24, r24
    20be:	90 93 a7 02 	sts	0x02A7, r25
    20c2:	80 93 a6 02 	sts	0x02A6, r24
    20c6:	14 e0       	ldi	r17, 0x04	; 4
    20c8:	a2 cf       	rjmp	.-188    	; 0x200e <V2P_RunStateMachine+0x38>
    20ca:	00 91 a6 02 	lds	r16, 0x02A6
    20ce:	10 91 a7 02 	lds	r17, 0x02A7
    20d2:	0e 94 8f 09 	call	0x131e	; 0x131e <USART_Rx>
    20d6:	99 27       	eor	r25, r25
    20d8:	80 2b       	or	r24, r16
    20da:	91 2b       	or	r25, r17
    20dc:	90 93 a7 02 	sts	0x02A7, r25
    20e0:	80 93 a6 02 	sts	0x02A6, r24
    20e4:	83 51       	subi	r24, 0x13	; 19
    20e6:	91 40       	sbci	r25, 0x01	; 1
    20e8:	08 f0       	brcs	.+2      	; 0x20ec <V2P_RunStateMachine+0x116>
    20ea:	90 cf       	rjmp	.-224    	; 0x200c <V2P_RunStateMachine+0x36>
    20ec:	15 e0       	ldi	r17, 0x05	; 5
    20ee:	c0 e0       	ldi	r28, 0x00	; 0
    20f0:	d0 e0       	ldi	r29, 0x00	; 0
    20f2:	8d cf       	rjmp	.-230    	; 0x200e <V2P_RunStateMachine+0x38>
    20f4:	0e 94 8f 09 	call	0x131e	; 0x131e <USART_Rx>
    20f8:	8e 30       	cpi	r24, 0x0E	; 14
    20fa:	09 f0       	breq	.+2      	; 0x20fe <V2P_RunStateMachine+0x128>
    20fc:	87 cf       	rjmp	.-242    	; 0x200c <V2P_RunStateMachine+0x36>
    20fe:	16 e0       	ldi	r17, 0x06	; 6
    2100:	86 cf       	rjmp	.-244    	; 0x200e <V2P_RunStateMachine+0x38>
    2102:	80 91 a6 02 	lds	r24, 0x02A6
    2106:	90 91 a7 02 	lds	r25, 0x02A7
    210a:	c8 17       	cp	r28, r24
    210c:	d9 07       	cpc	r29, r25
    210e:	11 f4       	brne	.+4      	; 0x2114 <V2P_RunStateMachine+0x13e>
    2110:	17 e0       	ldi	r17, 0x07	; 7
    2112:	7d cf       	rjmp	.-262    	; 0x200e <V2P_RunStateMachine+0x38>
    2114:	0e 94 8f 09 	call	0x131e	; 0x131e <USART_Rx>
    2118:	fe 01       	movw	r30, r28
    211a:	ef 56       	subi	r30, 0x6F	; 111
    211c:	fe 4f       	sbci	r31, 0xFE	; 254
    211e:	80 83       	st	Z, r24
    2120:	21 96       	adiw	r28, 0x01	; 1
    2122:	75 cf       	rjmp	.-278    	; 0x200e <V2P_RunStateMachine+0x38>
    2124:	80 91 8c 01 	lds	r24, 0x018C
    2128:	88 23       	and	r24, r24
    212a:	09 f0       	breq	.+2      	; 0x212e <V2P_RunStateMachine+0x158>
    212c:	70 cf       	rjmp	.-288    	; 0x200e <V2P_RunStateMachine+0x38>
    212e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <V2P_GetChecksum>
    2132:	18 2f       	mov	r17, r24
    2134:	0e 94 8f 09 	call	0x131e	; 0x131e <USART_Rx>
    2138:	18 17       	cp	r17, r24
    213a:	11 f0       	breq	.+4      	; 0x2140 <V2P_RunStateMachine+0x16a>
    213c:	1b e0       	ldi	r17, 0x0B	; 11
    213e:	67 cf       	rjmp	.-306    	; 0x200e <V2P_RunStateMachine+0x38>
    2140:	80 91 91 01 	lds	r24, 0x0191
    2144:	84 30       	cpi	r24, 0x04	; 4
    2146:	38 f4       	brcc	.+14     	; 0x2156 <V2P_RunStateMachine+0x180>
    2148:	82 30       	cpi	r24, 0x02	; 2
    214a:	08 f0       	brcs	.+2      	; 0x214e <V2P_RunStateMachine+0x178>
    214c:	66 c0       	rjmp	.+204    	; 0x221a <V2P_RunStateMachine+0x244>
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	09 f0       	breq	.+2      	; 0x2154 <V2P_RunStateMachine+0x17e>
    2152:	66 c0       	rjmp	.+204    	; 0x2220 <V2P_RunStateMachine+0x24a>
    2154:	06 c0       	rjmp	.+12     	; 0x2162 <V2P_RunStateMachine+0x18c>
    2156:	86 30       	cpi	r24, 0x06	; 6
    2158:	01 f1       	breq	.+64     	; 0x219a <V2P_RunStateMachine+0x1c4>
    215a:	87 30       	cpi	r24, 0x07	; 7
    215c:	09 f0       	breq	.+2      	; 0x2160 <V2P_RunStateMachine+0x18a>
    215e:	60 c0       	rjmp	.+192    	; 0x2220 <V2P_RunStateMachine+0x24a>
    2160:	12 c0       	rjmp	.+36     	; 0x2186 <V2P_RunStateMachine+0x1b0>
    2162:	8b e0       	ldi	r24, 0x0B	; 11
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	90 93 a7 02 	sts	0x02A7, r25
    216a:	80 93 a6 02 	sts	0x02A6, r24
    216e:	ea e0       	ldi	r30, 0x0A	; 10
    2170:	f4 e0       	ldi	r31, 0x04	; 4
    2172:	a1 e9       	ldi	r26, 0x91	; 145
    2174:	b1 e0       	ldi	r27, 0x01	; 1
    2176:	84 91       	lpm	r24, Z
    2178:	8d 93       	st	X+, r24
    217a:	31 96       	adiw	r30, 0x01	; 1
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	ac 39       	cpi	r26, 0x9C	; 156
    2180:	b8 07       	cpc	r27, r24
    2182:	c9 f7       	brne	.-14     	; 0x2176 <V2P_RunStateMachine+0x1a0>
    2184:	47 c0       	rjmp	.+142    	; 0x2214 <V2P_RunStateMachine+0x23e>
    2186:	82 e0       	ldi	r24, 0x02	; 2
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	90 93 a7 02 	sts	0x02A7, r25
    218e:	80 93 a6 02 	sts	0x02A6, r24
    2192:	80 ec       	ldi	r24, 0xC0	; 192
    2194:	80 93 92 01 	sts	0x0192, r24
    2198:	3d c0       	rjmp	.+122    	; 0x2214 <V2P_RunStateMachine+0x23e>
    219a:	82 e0       	ldi	r24, 0x02	; 2
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	90 93 a7 02 	sts	0x02A7, r25
    21a2:	80 93 a6 02 	sts	0x02A6, r24
    21a6:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <V2P_CheckForExtendedAddress>
    21aa:	e0 90 94 01 	lds	r14, 0x0194
    21ae:	ff 24       	eor	r15, r15
    21b0:	00 27       	eor	r16, r16
    21b2:	11 27       	eor	r17, r17
    21b4:	10 2f       	mov	r17, r16
    21b6:	0f 2d       	mov	r16, r15
    21b8:	fe 2c       	mov	r15, r14
    21ba:	ee 24       	eor	r14, r14
    21bc:	20 91 92 01 	lds	r18, 0x0192
    21c0:	33 27       	eor	r19, r19
    21c2:	44 27       	eor	r20, r20
    21c4:	55 27       	eor	r21, r21
    21c6:	52 2f       	mov	r21, r18
    21c8:	44 27       	eor	r20, r20
    21ca:	33 27       	eor	r19, r19
    21cc:	22 27       	eor	r18, r18
    21ce:	80 91 93 01 	lds	r24, 0x0193
    21d2:	99 27       	eor	r25, r25
    21d4:	aa 27       	eor	r26, r26
    21d6:	bb 27       	eor	r27, r27
    21d8:	dc 01       	movw	r26, r24
    21da:	99 27       	eor	r25, r25
    21dc:	88 27       	eor	r24, r24
    21de:	28 2b       	or	r18, r24
    21e0:	39 2b       	or	r19, r25
    21e2:	4a 2b       	or	r20, r26
    21e4:	5b 2b       	or	r21, r27
    21e6:	80 91 95 01 	lds	r24, 0x0195
    21ea:	99 27       	eor	r25, r25
    21ec:	aa 27       	eor	r26, r26
    21ee:	bb 27       	eor	r27, r27
    21f0:	28 2b       	or	r18, r24
    21f2:	39 2b       	or	r19, r25
    21f4:	4a 2b       	or	r20, r26
    21f6:	5b 2b       	or	r21, r27
    21f8:	e2 2a       	or	r14, r18
    21fa:	f3 2a       	or	r15, r19
    21fc:	04 2b       	or	r16, r20
    21fe:	15 2b       	or	r17, r21
    2200:	e0 92 a9 02 	sts	0x02A9, r14
    2204:	f0 92 aa 02 	sts	0x02AA, r15
    2208:	00 93 ab 02 	sts	0x02AB, r16
    220c:	10 93 ac 02 	sts	0x02AC, r17
    2210:	10 92 92 01 	sts	0x0192, r1
    2214:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <V2P_SendPacket>
    2218:	05 c0       	rjmp	.+10     	; 0x2224 <V2P_RunStateMachine+0x24e>
    221a:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <V2P_GetSetParamater>
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <V2P_RunStateMachine+0x24e>
    2220:	f6 01       	movw	r30, r12
    2222:	09 95       	icall
    2224:	18 e0       	ldi	r17, 0x08	; 8
    2226:	f3 ce       	rjmp	.-538    	; 0x200e <V2P_RunStateMachine+0x38>
    2228:	1b 30       	cpi	r17, 0x0B	; 11
    222a:	11 f4       	brne	.+4      	; 0x2230 <V2P_RunStateMachine+0x25a>
    222c:	81 ec       	ldi	r24, 0xC1	; 193
    222e:	05 c0       	rjmp	.+10     	; 0x223a <V2P_RunStateMachine+0x264>
    2230:	1a 30       	cpi	r17, 0x0A	; 10
    2232:	11 f4       	brne	.+4      	; 0x2238 <V2P_RunStateMachine+0x262>
    2234:	80 e8       	ldi	r24, 0x80	; 128
    2236:	01 c0       	rjmp	.+2      	; 0x223a <V2P_RunStateMachine+0x264>
    2238:	80 ec       	ldi	r24, 0xC0	; 192
    223a:	80 93 92 01 	sts	0x0192, r24
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	90 93 a7 02 	sts	0x02A7, r25
    2246:	80 93 a6 02 	sts	0x02A6, r24
    224a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <V2P_SendPacket>
    224e:	10 92 8c 01 	sts	0x018C, r1
    2252:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <BUFF_InitialiseBuffer>
    2256:	10 92 b0 00 	sts	0x00B0, r1
    225a:	10 92 70 00 	sts	0x0070, r1
    225e:	10 e0       	ldi	r17, 0x00	; 0
    2260:	d6 ce       	rjmp	.-596    	; 0x200e <V2P_RunStateMachine+0x38>
    2262:	80 e8       	ldi	r24, 0x80	; 128
    2264:	80 93 61 00 	sts	0x0061, r24
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	80 93 61 00 	sts	0x0061, r24
    226e:	10 92 c1 00 	sts	0x00C1, r1
    2272:	0e 94 40 0c 	call	0x1880	; 0x1880 <TOUT_SetupSleepTimer>
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	1f 91       	pop	r17
    227c:	0f 91       	pop	r16
    227e:	ff 90       	pop	r15
    2280:	ef 90       	pop	r14
    2282:	df 90       	pop	r13
    2284:	cf 90       	pop	r12
    2286:	08 95       	ret

00002288 <ISPCC_PollForProgComplete>:
	}
}

void ISPCC_PollForProgComplete(const uint8_t PollData, uint16_t PollAddr)
{
    2288:	1f 93       	push	r17
    228a:	cf 93       	push	r28
    228c:	df 93       	push	r29
    228e:	eb 01       	movw	r28, r22
	uint8_t PollType;
	uint8_t ProgCommand;

	if (PollData & ISPCC_PROG_MODE_PAGE)
    2290:	99 27       	eor	r25, r25
    2292:	80 ff       	sbrs	r24, 0
    2294:	08 c0       	rjmp	.+16     	; 0x22a6 <ISPCC_PollForProgComplete+0x1e>
	   PollType = ((PollData & ISPCC_PAGE_POLLTYPE_MASK) >> ISPCC_PAGE_POLLTYPE_MASKSHIFT);
    2296:	80 77       	andi	r24, 0x70	; 112
    2298:	90 70       	andi	r25, 0x00	; 0
    229a:	34 e0       	ldi	r19, 0x04	; 4
    229c:	95 95       	asr	r25
    229e:	87 95       	ror	r24
    22a0:	3a 95       	dec	r19
    22a2:	e1 f7       	brne	.-8      	; 0x229c <ISPCC_PollForProgComplete+0x14>
    22a4:	04 c0       	rjmp	.+8      	; 0x22ae <ISPCC_PollForProgComplete+0x26>
	else
	   PollType = ((PollData & ISPCC_WORD_POLLTYPE_MASK) >> ISPCC_WORD_POLLTYPE_MASKSHIFT);	
    22a6:	8e 70       	andi	r24, 0x0E	; 14
    22a8:	90 70       	andi	r25, 0x00	; 0
    22aa:	95 95       	asr	r25
    22ac:	87 95       	ror	r24

	switch (PollType & ISPCC_POLLTYPE_MASK)
    22ae:	99 27       	eor	r25, r25
    22b0:	87 70       	andi	r24, 0x07	; 7
    22b2:	90 70       	andi	r25, 0x00	; 0
    22b4:	82 30       	cpi	r24, 0x02	; 2
    22b6:	91 05       	cpc	r25, r1
    22b8:	19 f0       	breq	.+6      	; 0x22c0 <ISPCC_PollForProgComplete+0x38>
    22ba:	04 97       	sbiw	r24, 0x04	; 4
    22bc:	41 f5       	brne	.+80     	; 0x230e <ISPCC_PollForProgComplete+0x86>
    22be:	1c c0       	rjmp	.+56     	; 0x22f8 <ISPCC_PollForProgComplete+0x70>
	{
		case ISPCC_POLLTYPE_DATA:
			ProgCommand = PacketBytes[7];
    22c0:	10 91 98 01 	lds	r17, 0x0198
			
			if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP) // Flash uses word addresses
    22c4:	80 91 91 01 	lds	r24, 0x0191
    22c8:	83 31       	cpi	r24, 0x13	; 19
    22ca:	41 f4       	brne	.+16     	; 0x22dc <ISPCC_PollForProgComplete+0x54>
			{
				ProgCommand  |= ((PollAddr & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ);
    22cc:	c0 ff       	sbrs	r28, 0
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <ISPCC_PollForProgComplete+0x4c>
    22d0:	88 e0       	ldi	r24, 0x08	; 8
    22d2:	01 c0       	rjmp	.+2      	; 0x22d6 <ISPCC_PollForProgComplete+0x4e>
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	18 2b       	or	r17, r24
				PollAddr    >>= 1;
    22d8:	d6 95       	lsr	r29
    22da:	c7 95       	ror	r28
			}

			do
			{
				USI_SPITransmit(ProgCommand);
    22dc:	81 2f       	mov	r24, r17
    22de:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
				USI_SPITransmitWord(PollAddr);
    22e2:	ce 01       	movw	r24, r28
    22e4:	0e 94 06 0a 	call	0x140c	; 0x140c <USI_SPITransmitWord>
			}
			while (USI_SPITransmit(0x00) == PacketBytes[8]);
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    22ee:	90 91 99 01 	lds	r25, 0x0199
    22f2:	89 17       	cp	r24, r25
    22f4:	81 f4       	brne	.+32     	; 0x2316 <ISPCC_PollForProgComplete+0x8e>
    22f6:	f2 cf       	rjmp	.-28     	; 0x22dc <ISPCC_PollForProgComplete+0x54>
						
			break;
		case ISPCC_POLLTYPE_READY:
			do
			   USI_SPITransmitWord(0xF000);
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 ef       	ldi	r25, 0xF0	; 240
    22fc:	0e 94 06 0a 	call	0x140c	; 0x140c <USI_SPITransmitWord>
			while (USI_SPITransmitWord(0x0000) & ISPCC_POLL_BUSYFLAG);
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	0e 94 06 0a 	call	0x140c	; 0x140c <USI_SPITransmitWord>
    2308:	80 ff       	sbrs	r24, 0
    230a:	05 c0       	rjmp	.+10     	; 0x2316 <ISPCC_PollForProgComplete+0x8e>
    230c:	f5 cf       	rjmp	.-22     	; 0x22f8 <ISPCC_PollForProgComplete+0x70>

			break;
		default:                                      // Default is Wait polling
			MAIN_Delay1MS(PacketBytes[4]);	
    230e:	80 91 95 01 	lds	r24, 0x0195
    2312:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MAIN_Delay1MS>
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	1f 91       	pop	r17
    231c:	08 95       	ret

0000231e <ISPCC_ProgramChip>:
    231e:	4f 92       	push	r4
    2320:	5f 92       	push	r5
    2322:	6f 92       	push	r6
    2324:	7f 92       	push	r7
    2326:	8f 92       	push	r8
    2328:	9f 92       	push	r9
    232a:	af 92       	push	r10
    232c:	bf 92       	push	r11
    232e:	cf 92       	push	r12
    2330:	df 92       	push	r13
    2332:	ef 92       	push	r14
    2334:	ff 92       	push	r15
    2336:	0f 93       	push	r16
    2338:	1f 93       	push	r17
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	b0 90 94 01 	lds	r11, 0x0194
    2342:	a0 90 96 01 	lds	r10, 0x0196
    2346:	40 90 a9 02 	lds	r4, 0x02A9
    234a:	50 90 aa 02 	lds	r5, 0x02AA
    234e:	60 90 ab 02 	lds	r6, 0x02AB
    2352:	70 90 ac 02 	lds	r7, 0x02AC
    2356:	80 91 92 01 	lds	r24, 0x0192
    235a:	99 27       	eor	r25, r25
    235c:	98 2e       	mov	r9, r24
    235e:	88 24       	eor	r8, r8
    2360:	80 91 93 01 	lds	r24, 0x0193
    2364:	99 27       	eor	r25, r25
    2366:	88 2a       	or	r8, r24
    2368:	99 2a       	or	r9, r25
    236a:	e0 90 91 01 	lds	r14, 0x0191
    236e:	b0 fc       	sbrc	r11, 0
    2370:	09 c0       	rjmp	.+18     	; 0x2384 <ISPCC_ProgramChip+0x66>
    2372:	c0 e0       	ldi	r28, 0x00	; 0
    2374:	d0 e0       	ldi	r29, 0x00	; 0
    2376:	cc 24       	eor	r12, r12
    2378:	dd 24       	eor	r13, r13
    237a:	7b e9       	ldi	r23, 0x9B	; 155
    237c:	67 2e       	mov	r6, r23
    237e:	71 e0       	ldi	r23, 0x01	; 1
    2380:	77 2e       	mov	r7, r23
    2382:	ac c0       	rjmp	.+344    	; 0x24dc <ISPCC_ProgramChip+0x1be>
    2384:	c0 e0       	ldi	r28, 0x00	; 0
    2386:	d0 e0       	ldi	r29, 0x00	; 0
    2388:	00 e0       	ldi	r16, 0x00	; 0
    238a:	10 e0       	ldi	r17, 0x00	; 0
    238c:	6b e9       	ldi	r22, 0x9B	; 155
    238e:	c6 2e       	mov	r12, r22
    2390:	61 e0       	ldi	r22, 0x01	; 1
    2392:	d6 2e       	mov	r13, r22
    2394:	41 c0       	rjmp	.+130    	; 0x2418 <ISPCC_ProgramChip+0xfa>
    2396:	f6 01       	movw	r30, r12
    2398:	f0 80       	ld	r15, Z
    239a:	f3 e1       	ldi	r31, 0x13	; 19
    239c:	ef 16       	cp	r14, r31
    239e:	39 f4       	brne	.+14     	; 0x23ae <ISPCC_ProgramChip+0x90>
    23a0:	00 ff       	sbrs	r16, 0
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <ISPCC_ProgramChip+0x8a>
    23a4:	88 e0       	ldi	r24, 0x08	; 8
    23a6:	01 c0       	rjmp	.+2      	; 0x23aa <ISPCC_ProgramChip+0x8c>
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	8a 29       	or	r24, r10
    23ac:	01 c0       	rjmp	.+2      	; 0x23b0 <ISPCC_ProgramChip+0x92>
    23ae:	8a 2d       	mov	r24, r10
    23b0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    23b4:	80 91 a9 02 	lds	r24, 0x02A9
    23b8:	90 91 aa 02 	lds	r25, 0x02AA
    23bc:	0e 94 06 0a 	call	0x140c	; 0x140c <USI_SPITransmitWord>
    23c0:	8f 2d       	mov	r24, r15
    23c2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    23c6:	20 97       	sbiw	r28, 0x00	; 0
    23c8:	d9 f4       	brne	.+54     	; 0x2400 <ISPCC_ProgramChip+0xe2>
    23ca:	80 91 99 01 	lds	r24, 0x0199
    23ce:	8f 15       	cp	r24, r15
    23d0:	b9 f0       	breq	.+46     	; 0x2400 <ISPCC_ProgramChip+0xe2>
    23d2:	83 e1       	ldi	r24, 0x13	; 19
    23d4:	e8 16       	cp	r14, r24
    23d6:	49 f0       	breq	.+18     	; 0x23ea <ISPCC_ProgramChip+0xcc>
    23d8:	e5 e1       	ldi	r30, 0x15	; 21
    23da:	ee 16       	cp	r14, r30
    23dc:	89 f4       	brne	.+34     	; 0x2400 <ISPCC_ProgramChip+0xe2>
    23de:	80 91 9a 01 	lds	r24, 0x019A
    23e2:	8f 15       	cp	r24, r15
    23e4:	09 f0       	breq	.+2      	; 0x23e8 <ISPCC_ProgramChip+0xca>
    23e6:	7f c0       	rjmp	.+254    	; 0x24e6 <ISPCC_ProgramChip+0x1c8>
    23e8:	0b c0       	rjmp	.+22     	; 0x2400 <ISPCC_ProgramChip+0xe2>
    23ea:	c0 91 a9 02 	lds	r28, 0x02A9
    23ee:	d0 91 aa 02 	lds	r29, 0x02AA
    23f2:	cc 0f       	add	r28, r28
    23f4:	dd 1f       	adc	r29, r29
    23f6:	c8 01       	movw	r24, r16
    23f8:	81 70       	andi	r24, 0x01	; 1
    23fa:	90 70       	andi	r25, 0x00	; 0
    23fc:	c8 0f       	add	r28, r24
    23fe:	d9 1f       	adc	r29, r25
    2400:	00 fd       	sbrc	r16, 0
    2402:	03 c0       	rjmp	.+6      	; 0x240a <ISPCC_ProgramChip+0xec>
    2404:	f5 e1       	ldi	r31, 0x15	; 21
    2406:	ef 16       	cp	r14, r31
    2408:	11 f4       	brne	.+4      	; 0x240e <ISPCC_ProgramChip+0xf0>
    240a:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <V2P_IncrementCurrAddress>
    240e:	0f 5f       	subi	r16, 0xFF	; 255
    2410:	1f 4f       	sbci	r17, 0xFF	; 255
    2412:	08 94       	sec
    2414:	c1 1c       	adc	r12, r1
    2416:	d1 1c       	adc	r13, r1
    2418:	08 15       	cp	r16, r8
    241a:	19 05       	cpc	r17, r9
    241c:	09 f0       	breq	.+2      	; 0x2420 <ISPCC_ProgramChip+0x102>
    241e:	bb cf       	rjmp	.-138    	; 0x2396 <ISPCC_ProgramChip+0x78>
    2420:	b7 fe       	sbrs	r11, 7
    2422:	6c c0       	rjmp	.+216    	; 0x24fc <ISPCC_ProgramChip+0x1de>
    2424:	80 91 97 01 	lds	r24, 0x0197
    2428:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    242c:	c2 01       	movw	r24, r4
    242e:	0e 94 06 0a 	call	0x140c	; 0x140c <USI_SPITransmitWord>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    2438:	20 97       	sbiw	r28, 0x00	; 0
    243a:	11 f0       	breq	.+4      	; 0x2440 <ISPCC_ProgramChip+0x122>
    243c:	8b 2d       	mov	r24, r11
    243e:	03 c0       	rjmp	.+6      	; 0x2446 <ISPCC_ProgramChip+0x128>
    2440:	8b 2d       	mov	r24, r11
    2442:	8f 78       	andi	r24, 0x8F	; 143
    2444:	80 61       	ori	r24, 0x10	; 16
    2446:	be 01       	movw	r22, r28
    2448:	0e 94 44 11 	call	0x2288	; 0x2288 <ISPCC_PollForProgComplete>
    244c:	57 c0       	rjmp	.+174    	; 0x24fc <ISPCC_ProgramChip+0x1de>
    244e:	f3 01       	movw	r30, r6
    2450:	10 81       	ld	r17, Z
    2452:	f3 e1       	ldi	r31, 0x13	; 19
    2454:	ef 16       	cp	r14, r31
    2456:	39 f4       	brne	.+14     	; 0x2466 <ISPCC_ProgramChip+0x148>
    2458:	c0 fe       	sbrs	r12, 0
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <ISPCC_ProgramChip+0x142>
    245c:	88 e0       	ldi	r24, 0x08	; 8
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <ISPCC_ProgramChip+0x144>
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	8a 29       	or	r24, r10
    2464:	01 c0       	rjmp	.+2      	; 0x2468 <ISPCC_ProgramChip+0x14a>
    2466:	8a 2d       	mov	r24, r10
    2468:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    246c:	80 91 a9 02 	lds	r24, 0x02A9
    2470:	90 91 aa 02 	lds	r25, 0x02AA
    2474:	0e 94 06 0a 	call	0x140c	; 0x140c <USI_SPITransmitWord>
    2478:	81 2f       	mov	r24, r17
    247a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    247e:	80 91 99 01 	lds	r24, 0x0199
    2482:	81 17       	cp	r24, r17
    2484:	b9 f0       	breq	.+46     	; 0x24b4 <ISPCC_ProgramChip+0x196>
    2486:	83 e1       	ldi	r24, 0x13	; 19
    2488:	e8 16       	cp	r14, r24
    248a:	41 f0       	breq	.+16     	; 0x249c <ISPCC_ProgramChip+0x17e>
    248c:	e5 e1       	ldi	r30, 0x15	; 21
    248e:	ee 16       	cp	r14, r30
    2490:	89 f4       	brne	.+34     	; 0x24b4 <ISPCC_ProgramChip+0x196>
    2492:	80 91 9a 01 	lds	r24, 0x019A
    2496:	81 17       	cp	r24, r17
    2498:	59 f5       	brne	.+86     	; 0x24f0 <ISPCC_ProgramChip+0x1d2>
    249a:	0c c0       	rjmp	.+24     	; 0x24b4 <ISPCC_ProgramChip+0x196>
    249c:	c0 91 a9 02 	lds	r28, 0x02A9
    24a0:	d0 91 aa 02 	lds	r29, 0x02AA
    24a4:	cc 0f       	add	r28, r28
    24a6:	dd 1f       	adc	r29, r29
    24a8:	c6 01       	movw	r24, r12
    24aa:	81 70       	andi	r24, 0x01	; 1
    24ac:	90 70       	andi	r25, 0x00	; 0
    24ae:	c8 0f       	add	r28, r24
    24b0:	d9 1f       	adc	r29, r25
    24b2:	22 c0       	rjmp	.+68     	; 0x24f8 <ISPCC_ProgramChip+0x1da>
    24b4:	1b 2d       	mov	r17, r11
    24b6:	11 7f       	andi	r17, 0xF1	; 241
    24b8:	12 60       	ori	r17, 0x02	; 2
    24ba:	c0 fc       	sbrc	r12, 0
    24bc:	03 c0       	rjmp	.+6      	; 0x24c4 <ISPCC_ProgramChip+0x1a6>
    24be:	f5 e1       	ldi	r31, 0x15	; 21
    24c0:	ef 16       	cp	r14, r31
    24c2:	11 f4       	brne	.+4      	; 0x24c8 <ISPCC_ProgramChip+0x1aa>
    24c4:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <V2P_IncrementCurrAddress>
    24c8:	be 01       	movw	r22, r28
    24ca:	81 2f       	mov	r24, r17
    24cc:	0e 94 44 11 	call	0x2288	; 0x2288 <ISPCC_PollForProgComplete>
    24d0:	08 94       	sec
    24d2:	c1 1c       	adc	r12, r1
    24d4:	d1 1c       	adc	r13, r1
    24d6:	08 94       	sec
    24d8:	61 1c       	adc	r6, r1
    24da:	71 1c       	adc	r7, r1
    24dc:	c8 14       	cp	r12, r8
    24de:	d9 04       	cpc	r13, r9
    24e0:	09 f0       	breq	.+2      	; 0x24e4 <ISPCC_ProgramChip+0x1c6>
    24e2:	b5 cf       	rjmp	.-150    	; 0x244e <ISPCC_ProgramChip+0x130>
    24e4:	0b c0       	rjmp	.+22     	; 0x24fc <ISPCC_ProgramChip+0x1de>
    24e6:	c0 91 a9 02 	lds	r28, 0x02A9
    24ea:	d0 91 aa 02 	lds	r29, 0x02AA
    24ee:	88 cf       	rjmp	.-240    	; 0x2400 <ISPCC_ProgramChip+0xe2>
    24f0:	c0 91 a9 02 	lds	r28, 0x02A9
    24f4:	d0 91 aa 02 	lds	r29, 0x02AA
    24f8:	1b 2d       	mov	r17, r11
    24fa:	df cf       	rjmp	.-66     	; 0x24ba <ISPCC_ProgramChip+0x19c>
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	ff 90       	pop	r15
    2506:	ef 90       	pop	r14
    2508:	df 90       	pop	r13
    250a:	cf 90       	pop	r12
    250c:	bf 90       	pop	r11
    250e:	af 90       	pop	r10
    2510:	9f 90       	pop	r9
    2512:	8f 90       	pop	r8
    2514:	7f 90       	pop	r7
    2516:	6f 90       	pop	r6
    2518:	5f 90       	pop	r5
    251a:	4f 90       	pop	r4
    251c:	08 95       	ret

0000251e <ISPCC_EnterChipProgrammingMode>:
    251e:	ff 92       	push	r15
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	00 91 96 01 	lds	r16, 0x0196
    2528:	10 91 95 01 	lds	r17, 0x0195
    252c:	81 b3       	in	r24, 0x11	; 17
    252e:	8f 7c       	andi	r24, 0xCF	; 207
    2530:	80 63       	ori	r24, 0x30	; 48
    2532:	81 bb       	out	0x11, r24	; 17
    2534:	80 91 93 01 	lds	r24, 0x0193
    2538:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MAIN_Delay1MS>
    253c:	81 2f       	mov	r24, r17
    253e:	81 50       	subi	r24, 0x01	; 1
    2540:	84 36       	cpi	r24, 0x64	; 100
    2542:	08 f4       	brcc	.+2      	; 0x2546 <ISPCC_EnterChipProgrammingMode+0x28>
    2544:	40 c0       	rjmp	.+128    	; 0x25c6 <ISPCC_EnterChipProgrammingMode+0xa8>
    2546:	18 e1       	ldi	r17, 0x18	; 24
    2548:	3e c0       	rjmp	.+124    	; 0x25c6 <ISPCC_EnterChipProgrammingMode+0xa8>
    254a:	80 91 99 01 	lds	r24, 0x0199
    254e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    2552:	80 2f       	mov	r24, r16
    2554:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MAIN_Delay1MS>
    2558:	80 91 9a 01 	lds	r24, 0x019A
    255c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    2560:	80 2f       	mov	r24, r16
    2562:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MAIN_Delay1MS>
    2566:	80 91 9b 01 	lds	r24, 0x019B
    256a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    256e:	f8 2e       	mov	r15, r24
    2570:	80 2f       	mov	r24, r16
    2572:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MAIN_Delay1MS>
    2576:	80 91 98 01 	lds	r24, 0x0198
    257a:	83 30       	cpi	r24, 0x03	; 3
    257c:	29 f4       	brne	.+10     	; 0x2588 <ISPCC_EnterChipProgrammingMode+0x6a>
    257e:	80 91 9c 01 	lds	r24, 0x019C
    2582:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    2586:	05 c0       	rjmp	.+10     	; 0x2592 <ISPCC_EnterChipProgrammingMode+0x74>
    2588:	80 91 9c 01 	lds	r24, 0x019C
    258c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    2590:	f8 2e       	mov	r15, r24
    2592:	80 91 98 01 	lds	r24, 0x0198
    2596:	88 23       	and	r24, r24
    2598:	21 f0       	breq	.+8      	; 0x25a2 <ISPCC_EnterChipProgrammingMode+0x84>
    259a:	80 91 97 01 	lds	r24, 0x0197
    259e:	f8 16       	cp	r15, r24
    25a0:	69 f4       	brne	.+26     	; 0x25bc <ISPCC_EnterChipProgrammingMode+0x9e>
    25a2:	80 2f       	mov	r24, r16
    25a4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MAIN_Delay1MS>
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	80 93 a8 02 	sts	0x02A8, r24
    25ae:	81 b3       	in	r24, 0x11	; 17
    25b0:	8f 7c       	andi	r24, 0xCF	; 207
    25b2:	80 62       	ori	r24, 0x20	; 32
    25b4:	81 bb       	out	0x11, r24	; 17
    25b6:	10 92 92 01 	sts	0x0192, r1
    25ba:	0e c0       	rjmp	.+28     	; 0x25d8 <ISPCC_EnterChipProgrammingMode+0xba>
    25bc:	80 2f       	mov	r24, r16
    25be:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MAIN_Delay1MS>
    25c2:	0e 94 3e 0a 	call	0x147c	; 0x147c <USI_SPIToggleClock>
    25c6:	11 50       	subi	r17, 0x01	; 1
    25c8:	00 f6       	brcc	.-128    	; 0x254a <ISPCC_EnterChipProgrammingMode+0x2c>
    25ca:	81 b3       	in	r24, 0x11	; 17
    25cc:	8f 7c       	andi	r24, 0xCF	; 207
    25ce:	80 61       	ori	r24, 0x10	; 16
    25d0:	81 bb       	out	0x11, r24	; 17
    25d2:	80 ec       	ldi	r24, 0xC0	; 192
    25d4:	80 93 92 01 	sts	0x0192, r24
    25d8:	1f 91       	pop	r17
    25da:	0f 91       	pop	r16
    25dc:	ff 90       	pop	r15
    25de:	08 95       	ret

000025e0 <AICI_InterpretPacket>:

// ======================================================================================

void AICI_InterpretPacket(void)
{
    25e0:	df 92       	push	r13
    25e2:	ef 92       	push	r14
    25e4:	ff 92       	push	r15
    25e6:	0f 93       	push	r16
    25e8:	1f 93       	push	r17
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
	switch (PacketBytes[0])
    25ee:	80 91 91 01 	lds	r24, 0x0191
    25f2:	86 31       	cpi	r24, 0x16	; 22
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <AICI_InterpretPacket+0x18>
    25f6:	e5 c0       	rjmp	.+458    	; 0x27c2 <AICI_InterpretPacket+0x1e2>
    25f8:	87 31       	cpi	r24, 0x17	; 23
    25fa:	78 f4       	brcc	.+30     	; 0x261a <AICI_InterpretPacket+0x3a>
    25fc:	82 31       	cpi	r24, 0x12	; 18
    25fe:	09 f4       	brne	.+2      	; 0x2602 <AICI_InterpretPacket+0x22>
    2600:	52 c0       	rjmp	.+164    	; 0x26a6 <AICI_InterpretPacket+0xc6>
    2602:	83 31       	cpi	r24, 0x13	; 19
    2604:	30 f4       	brcc	.+12     	; 0x2612 <AICI_InterpretPacket+0x32>
    2606:	80 31       	cpi	r24, 0x10	; 16
    2608:	d9 f0       	breq	.+54     	; 0x2640 <AICI_InterpretPacket+0x60>
    260a:	81 31       	cpi	r24, 0x11	; 17
    260c:	09 f0       	breq	.+2      	; 0x2610 <AICI_InterpretPacket+0x30>
    260e:	2c c1       	rjmp	.+600    	; 0x2868 <AICI_InterpretPacket+0x288>
    2610:	30 c0       	rjmp	.+96     	; 0x2672 <AICI_InterpretPacket+0x92>
    2612:	84 31       	cpi	r24, 0x14	; 20
    2614:	09 f0       	breq	.+2      	; 0x2618 <AICI_InterpretPacket+0x38>
    2616:	1d c1       	rjmp	.+570    	; 0x2852 <AICI_InterpretPacket+0x272>
    2618:	d4 c0       	rjmp	.+424    	; 0x27c2 <AICI_InterpretPacket+0x1e2>
    261a:	89 31       	cpi	r24, 0x19	; 25
    261c:	09 f4       	brne	.+2      	; 0x2620 <AICI_InterpretPacket+0x40>
    261e:	bd c0       	rjmp	.+378    	; 0x279a <AICI_InterpretPacket+0x1ba>
    2620:	8a 31       	cpi	r24, 0x1A	; 26
    2622:	38 f4       	brcc	.+14     	; 0x2632 <AICI_InterpretPacket+0x52>
    2624:	87 31       	cpi	r24, 0x17	; 23
    2626:	09 f4       	brne	.+2      	; 0x262a <AICI_InterpretPacket+0x4a>
    2628:	b8 c0       	rjmp	.+368    	; 0x279a <AICI_InterpretPacket+0x1ba>
    262a:	88 31       	cpi	r24, 0x18	; 24
    262c:	09 f0       	breq	.+2      	; 0x2630 <AICI_InterpretPacket+0x50>
    262e:	1c c1       	rjmp	.+568    	; 0x2868 <AICI_InterpretPacket+0x288>
    2630:	95 c0       	rjmp	.+298    	; 0x275c <AICI_InterpretPacket+0x17c>
    2632:	8d 31       	cpi	r24, 0x1D	; 29
    2634:	08 f4       	brcc	.+2      	; 0x2638 <AICI_InterpretPacket+0x58>
    2636:	92 c0       	rjmp	.+292    	; 0x275c <AICI_InterpretPacket+0x17c>
    2638:	8d 31       	cpi	r24, 0x1D	; 29
    263a:	09 f0       	breq	.+2      	; 0x263e <AICI_InterpretPacket+0x5e>
    263c:	15 c1       	rjmp	.+554    	; 0x2868 <AICI_InterpretPacket+0x288>
    263e:	56 c0       	rjmp	.+172    	; 0x26ec <AICI_InterpretPacket+0x10c>
	{
		case AICB_CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
    2640:	82 e0       	ldi	r24, 0x02	; 2
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	90 93 a7 02 	sts	0x02A7, r25
    2648:	80 93 a6 02 	sts	0x02A6, r24
			
			USI_SPIInitMaster();
    264c:	0e 94 2e 0a 	call	0x145c	; 0x145c <USI_SPIInitMaster>

			MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);  // Pull the slave AVR's RESET line to active
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	0e 94 66 02 	call	0x4cc	; 0x4cc <MAIN_ResetCSLine>
			ISPCC_EnterChipProgrammingMode();       // Run the Enter Programming Mode routine
    2656:	0e 94 8f 12 	call	0x251e	; 0x251e <ISPCC_EnterChipProgrammingMode>

			if (InProgrammingMode)
    265a:	80 91 a8 02 	lds	r24, 0x02A8
    265e:	88 23       	and	r24, r24
    2660:	19 f0       	breq	.+6      	; 0x2668 <AICI_InterpretPacket+0x88>
			   LCD_puts_f(AVRISPModeMessage);
    2662:	86 e3       	ldi	r24, 0x36	; 54
    2664:	94 e0       	ldi	r25, 0x04	; 4
    2666:	02 c0       	rjmp	.+4      	; 0x266c <AICI_InterpretPacket+0x8c>
			else
			   LCD_puts_f(SyncErrorMessage);
    2668:	8b e2       	ldi	r24, 0x2B	; 43
    266a:	94 e0       	ldi	r25, 0x04	; 4
    266c:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
    2670:	04 c1       	rjmp	.+520    	; 0x287a <AICI_InterpretPacket+0x29a>
			
			break;
		case AICB_CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;
    2672:	82 e0       	ldi	r24, 0x02	; 2
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	90 93 a7 02 	sts	0x02A7, r25
    267a:	80 93 a6 02 	sts	0x02A6, r24

			MAIN_Delay1MS(PacketBytes[1]);           // Wait for the "PreDelay" amount specified in the packet
    267e:	80 91 92 01 	lds	r24, 0x0192
    2682:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MAIN_Delay1MS>
			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Non programming mode = green status led
    2686:	81 b3       	in	r24, 0x11	; 17
    2688:	8f 7c       	andi	r24, 0xCF	; 207
    268a:	80 61       	ori	r24, 0x10	; 16
    268c:	81 bb       	out	0x11, r24	; 17
			InProgrammingMode = FALSE;
    268e:	10 92 a8 02 	sts	0x02A8, r1
			MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	0e 94 66 02 	call	0x4cc	; 0x4cc <MAIN_ResetCSLine>
			MAIN_Delay1MS(PacketBytes[2]);           // Wait for the "PostDelay" amount specified in the packet
    2698:	80 91 93 01 	lds	r24, 0x0193
    269c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MAIN_Delay1MS>
			
			USI_SPIOff();
    26a0:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <USI_SPIOff>
    26a4:	de c0       	rjmp	.+444    	; 0x2862 <AICI_InterpretPacket+0x282>

			PacketBytes[1] = AICB_STATUS_CMD_OK;     // Return OK

			break;
		case AICB_CMD_CHIP_ERASE_ISP:
			MessageSize = 2;
    26a6:	82 e0       	ldi	r24, 0x02	; 2
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	90 93 a7 02 	sts	0x02A7, r25
    26ae:	80 93 a6 02 	sts	0x02A6, r24
    26b2:	c4 e9       	ldi	r28, 0x94	; 148
    26b4:	d1 e0       	ldi	r29, 0x01	; 1
			
			for (uint8_t PacketB = 3; PacketB <= 6; PacketB++) // Send the erase commands to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    26b6:	89 91       	ld	r24, Y+
    26b8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	c8 39       	cpi	r28, 0x98	; 152
    26c0:	d8 07       	cpc	r29, r24
    26c2:	c9 f7       	brne	.-14     	; 0x26b6 <AICI_InterpretPacket+0xd6>

			if (PacketBytes[2])                       // Poll mode, value of 1 indicates a busy flag wait
    26c4:	80 91 93 01 	lds	r24, 0x0193
    26c8:	88 23       	and	r24, r24
    26ca:	59 f0       	breq	.+22     	; 0x26e2 <AICI_InterpretPacket+0x102>
			{
				do
					USI_SPITransmitWord(0xF000);
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	90 ef       	ldi	r25, 0xF0	; 240
    26d0:	0e 94 06 0a 	call	0x140c	; 0x140c <USI_SPITransmitWord>
				while (USI_SPITransmitWord(0x0000) & 0x01);
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 06 0a 	call	0x140c	; 0x140c <USI_SPITransmitWord>
    26dc:	80 ff       	sbrs	r24, 0
    26de:	c1 c0       	rjmp	.+386    	; 0x2862 <AICI_InterpretPacket+0x282>
    26e0:	f5 cf       	rjmp	.-22     	; 0x26cc <AICI_InterpretPacket+0xec>
			}
			else                                      // Poll mode flag of 0 indicates a predefined delay
			{
				MAIN_Delay1MS(PacketBytes[1]);         // Wait the specified interval to ensure erase complete
    26e2:	80 91 92 01 	lds	r24, 0x0192
    26e6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MAIN_Delay1MS>
    26ea:	bb c0       	rjmp	.+374    	; 0x2862 <AICI_InterpretPacket+0x282>
			}
			
			PacketBytes[1] = AICB_STATUS_CMD_OK;       // Always return OK
			
			break;
		case AICB_CMD_SPI_MULTI:
				MessageSize = (3 + PacketBytes[2]);    // Number of recieved bytes, plus two OKs and the command byte
    26ec:	f0 90 93 01 	lds	r15, 0x0193
    26f0:	8f 2d       	mov	r24, r15
    26f2:	99 27       	eor	r25, r25
    26f4:	03 96       	adiw	r24, 0x03	; 3
    26f6:	90 93 a7 02 	sts	0x02A7, r25
    26fa:	80 93 a6 02 	sts	0x02A6, r24
		
				uint8_t TxBytes      = PacketBytes[1]; // \. The packet data is overwritten during the transfer. Because
    26fe:	d0 90 92 01 	lds	r13, 0x0192
				uint8_t RxStartByte  = PacketBytes[2]; // |  of this each data byte must be stored into temp variables
				uint8_t RxBytes      = PacketBytes[3]; // /  so that their contents are not lost.
    2702:	e0 90 94 01 	lds	r14, 0x0194
    2706:	11 e0       	ldi	r17, 0x01	; 1
    2708:	01 e0       	ldi	r16, 0x01	; 1
    270a:	12 c0       	rjmp	.+36     	; 0x2730 <AICI_InterpretPacket+0x150>
				uint8_t RxByteNum    = 1;
				uint8_t TxByteNum    = 1;
				uint8_t RecievedByte = 0;

				while (TxByteNum++ < TxBytes)          // Still bytes to transfer
    270c:	0f 5f       	subi	r16, 0xFF	; 255
				{
					RecievedByte = USI_SPITransmit(PacketBytes[3 + TxByteNum]); // Transmit the byte, store the answer
    270e:	e0 2f       	mov	r30, r16
    2710:	ff 27       	eor	r31, r31
    2712:	ef 56       	subi	r30, 0x6F	; 111
    2714:	fe 4f       	sbci	r31, 0xFE	; 254
    2716:	83 81       	ldd	r24, Z+3	; 0x03
    2718:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>

					if ((TxByteNum >= RxStartByte) && (RxByteNum < RxBytes))
    271c:	0f 15       	cp	r16, r15
    271e:	40 f0       	brcs	.+16     	; 0x2730 <AICI_InterpretPacket+0x150>
    2720:	1e 15       	cp	r17, r14
    2722:	30 f4       	brcc	.+12     	; 0x2730 <AICI_InterpretPacket+0x150>
					   PacketBytes[2 + RxByteNum++] = RecievedByte;
    2724:	e1 2f       	mov	r30, r17
    2726:	ff 27       	eor	r31, r31
    2728:	ef 56       	subi	r30, 0x6F	; 111
    272a:	fe 4f       	sbci	r31, 0xFE	; 254
    272c:	82 83       	std	Z+2, r24	; 0x02
    272e:	1f 5f       	subi	r17, 0xFF	; 255
    2730:	0d 15       	cp	r16, r13
    2732:	60 f3       	brcs	.-40     	; 0x270c <AICI_InterpretPacket+0x12c>
    2734:	06 c0       	rjmp	.+12     	; 0x2742 <AICI_InterpretPacket+0x162>
				}

				while (RxByteNum++ < RxBytes)                         // Still more bytes to recieve
				   PacketBytes[2 + RxByteNum] = USI_SPITransmit(0x00); // its answer to be recorded (or more bytes than sent need responses), send dummy bytes to fetch the response(s)
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    273c:	cf 56       	subi	r28, 0x6F	; 111
    273e:	de 4f       	sbci	r29, 0xFE	; 254
    2740:	8a 83       	std	Y+2, r24	; 0x02
    2742:	1f 5f       	subi	r17, 0xFF	; 255
    2744:	81 2f       	mov	r24, r17
    2746:	81 50       	subi	r24, 0x01	; 1
    2748:	c1 2f       	mov	r28, r17
    274a:	dd 27       	eor	r29, r29
    274c:	8e 15       	cp	r24, r14
    274e:	98 f3       	brcs	.-26     	; 0x2736 <AICI_InterpretPacket+0x156>

				PacketBytes[1]             = AICB_STATUS_CMD_OK; // Data should be encompassed
    2750:	10 92 92 01 	sts	0x0192, r1
				PacketBytes[3 + RxByteNum] = AICB_STATUS_CMD_OK; //  by STATS_CMD_OKs
    2754:	cf 56       	subi	r28, 0x6F	; 111
    2756:	de 4f       	sbci	r29, 0xFE	; 254
    2758:	1b 82       	std	Y+3, r1	; 0x03
    275a:	8f c0       	rjmp	.+286    	; 0x287a <AICI_InterpretPacket+0x29a>

				break;
		case AICB_CMD_READ_SIGNATURE_ISP:
		case AICB_CMD_READ_FUSE_ISP:
		case AICB_CMD_READ_LOCK_ISP:
		case AICB_CMD_READ_OSCCAL_ISP:
			MessageSize = 4;
    275c:	84 e0       	ldi	r24, 0x04	; 4
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	90 93 a7 02 	sts	0x02A7, r25
    2764:	80 93 a6 02 	sts	0x02A6, r24
    2768:	c1 e0       	ldi	r28, 0x01	; 1
    276a:	d0 e0       	ldi	r29, 0x00	; 0
    276c:	03 e9       	ldi	r16, 0x93	; 147
    276e:	11 e0       	ldi	r17, 0x01	; 1
	
			for (uint8_t ByteNum = 1; ByteNum <= 4; ByteNum++)
			{
				uint8_t Response = USI_SPITransmit(PacketBytes[1 + ByteNum]); // Transmit the four signature request bytes
    2770:	f8 01       	movw	r30, r16
    2772:	81 91       	ld	r24, Z+
    2774:	8f 01       	movw	r16, r30
    2776:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    277a:	98 2f       	mov	r25, r24

				if (ByteNum == PacketBytes[1])         // If the current byte is the requested signature byte, save the reponse in the packet
    277c:	80 91 92 01 	lds	r24, 0x0192
    2780:	8c 17       	cp	r24, r28
    2782:	11 f4       	brne	.+4      	; 0x2788 <AICI_InterpretPacket+0x1a8>
					PacketBytes[2] = Response;
    2784:	90 93 93 01 	sts	0x0193, r25
    2788:	21 96       	adiw	r28, 0x01	; 1
    278a:	c5 30       	cpi	r28, 0x05	; 5
    278c:	d1 05       	cpc	r29, r1
    278e:	81 f7       	brne	.-32     	; 0x2770 <AICI_InterpretPacket+0x190>
			}

			PacketBytes[1] = AICB_STATUS_CMD_OK;       // Data byte is encased in CMD_OKs
    2790:	10 92 92 01 	sts	0x0192, r1
			PacketBytes[3] = AICB_STATUS_CMD_OK;       // Data byte is encased in CMD_OKs
    2794:	10 92 94 01 	sts	0x0194, r1
    2798:	70 c0       	rjmp	.+224    	; 0x287a <AICI_InterpretPacket+0x29a>

			break;
		case AICB_CMD_PROGRAM_FUSE_ISP:
		case AICB_CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;
    279a:	83 e0       	ldi	r24, 0x03	; 3
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	90 93 a7 02 	sts	0x02A7, r25
    27a2:	80 93 a6 02 	sts	0x02A6, r24
    27a6:	c2 e9       	ldi	r28, 0x92	; 146
    27a8:	d1 e0       	ldi	r29, 0x01	; 1
			
			for (uint8_t PacketB = 1; PacketB <= 4; PacketB++) // Send the lock-byte values to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    27aa:	89 91       	ld	r24, Y+
    27ac:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    27b0:	f1 e0       	ldi	r31, 0x01	; 1
    27b2:	c6 39       	cpi	r28, 0x96	; 150
    27b4:	df 07       	cpc	r29, r31
    27b6:	c9 f7       	brne	.-14     	; 0x27aa <AICI_InterpretPacket+0x1ca>

			PacketBytes[1] = AICB_STATUS_CMD_OK;       // Two CMD_OKs are always returned
    27b8:	10 92 92 01 	sts	0x0192, r1
			PacketBytes[2] = AICB_STATUS_CMD_OK;       // Two CMD_OKs are always returned
    27bc:	10 92 93 01 	sts	0x0193, r1
    27c0:	5c c0       	rjmp	.+184    	; 0x287a <AICI_InterpretPacket+0x29a>

			break;
		case AICB_CMD_READ_FLASH_ISP:
		case AICB_CMD_READ_EEPROM_ISP:
			MessageSize = 0;                           // Here to prevent compiler from complaining if a var dec appears straight after a case

			uint8_t  ReadCommand = PacketBytes[3];
    27c2:	d0 90 94 01 	lds	r13, 0x0194
			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8) // Load in the number of bytes that is to
			                     | PacketBytes[2];                 // be read into a temp variable (MSB first)
    27c6:	80 91 92 01 	lds	r24, 0x0192
    27ca:	99 27       	eor	r25, r25
    27cc:	d8 2f       	mov	r29, r24
    27ce:	cc 27       	eor	r28, r28
    27d0:	80 91 93 01 	lds	r24, 0x0193
    27d4:	99 27       	eor	r25, r25
    27d6:	c8 2b       	or	r28, r24
    27d8:	d9 2b       	or	r29, r25

			MessageSize = BytesToRead + 3;
    27da:	23 96       	adiw	r28, 0x03	; 3
    27dc:	d0 93 a7 02 	sts	0x02A7, r29
    27e0:	c0 93 a6 02 	sts	0x02A6, r28
    27e4:	23 97       	sbiw	r28, 0x03	; 3
    27e6:	00 e0       	ldi	r16, 0x00	; 0
    27e8:	10 e0       	ldi	r17, 0x00	; 0
    27ea:	83 e9       	ldi	r24, 0x93	; 147
    27ec:	e8 2e       	mov	r14, r24
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	f8 2e       	mov	r15, r24
    27f2:	26 c0       	rjmp	.+76     	; 0x2840 <AICI_InterpretPacket+0x260>

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
				if (PacketBytes[0] == AICB_CMD_READ_FLASH_ISP)  // Flash read mode - word addresses so MSB/LSB masking nessesary
    27f4:	80 91 91 01 	lds	r24, 0x0191
    27f8:	84 31       	cpi	r24, 0x14	; 20
    27fa:	39 f4       	brne	.+14     	; 0x280a <AICI_InterpretPacket+0x22a>
				{
					USI_SPITransmit(ReadCommand | ((ReadByte & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ));
    27fc:	00 ff       	sbrs	r16, 0
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <AICI_InterpretPacket+0x224>
    2800:	88 e0       	ldi	r24, 0x08	; 8
    2802:	01 c0       	rjmp	.+2      	; 0x2806 <AICI_InterpretPacket+0x226>
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	8d 29       	or	r24, r13
    2808:	01 c0       	rjmp	.+2      	; 0x280c <AICI_InterpretPacket+0x22c>
				}
				else                                       // EEPROM read mode, address is in bytes and so no masking nessesary
				{
					USI_SPITransmit(ReadCommand);
    280a:	8d 2d       	mov	r24, r13
    280c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
				}
				
				USI_SPITransmitWord(CurrAddress);          // Transmit the current address to the slave AVR
    2810:	80 91 a9 02 	lds	r24, 0x02A9
    2814:	90 91 aa 02 	lds	r25, 0x02AA
    2818:	0e 94 06 0a 	call	0x140c	; 0x140c <USI_SPITransmitWord>

				PacketBytes[2 + ReadByte] = USI_SPITransmit(0x00); // Read in the byte stored at the requested location
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    2822:	f7 01       	movw	r30, r14
    2824:	80 83       	st	Z, r24

				if ((ReadByte & 0x01) || (PacketBytes[0] == AICB_CMD_READ_EEPROM_ISP)) // Flash addresses are given in words; only increment on the odd byte if reading the flash.
    2826:	00 fd       	sbrc	r16, 0
    2828:	04 c0       	rjmp	.+8      	; 0x2832 <AICI_InterpretPacket+0x252>
    282a:	80 91 91 01 	lds	r24, 0x0191
    282e:	86 31       	cpi	r24, 0x16	; 22
    2830:	11 f4       	brne	.+4      	; 0x2836 <AICI_InterpretPacket+0x256>
				{
					V2P_IncrementCurrAddress();             // Increment the address counter
    2832:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <V2P_IncrementCurrAddress>
    2836:	0f 5f       	subi	r16, 0xFF	; 255
    2838:	1f 4f       	sbci	r17, 0xFF	; 255
    283a:	08 94       	sec
    283c:	e1 1c       	adc	r14, r1
    283e:	f1 1c       	adc	r15, r1
    2840:	0c 17       	cp	r16, r28
    2842:	1d 07       	cpc	r17, r29
    2844:	b9 f6       	brne	.-82     	; 0x27f4 <AICI_InterpretPacket+0x214>
				}
				else
				{
					if ((CurrAddress & 0x00FF0000) & !(CurrAddress & 0x0000FFFF))
					{
						CurrAddress |= (1UL << 31);        // Set MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
						V2P_CheckForExtendedAddress();
					}
				}
			}
			
			PacketBytes[1]               = AICB_STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    2846:	10 92 92 01 	sts	0x0192, r1
			PacketBytes[2 + BytesToRead] = AICB_STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    284a:	cf 56       	subi	r28, 0x6F	; 111
    284c:	de 4f       	sbci	r29, 0xFE	; 254
    284e:	1a 82       	std	Y+2, r1	; 0x02
    2850:	14 c0       	rjmp	.+40     	; 0x287a <AICI_InterpretPacket+0x29a>

			break;
		case AICB_CMD_PROGRAM_FLASH_ISP:
		case AICB_CMD_PROGRAM_EEPROM_ISP:
			ISPCC_ProgramChip();                         // Program the bytes into the chip
    2852:	0e 94 8f 11 	call	0x231e	; 0x231e <ISPCC_ProgramChip>
			
			MessageSize = 2;
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	90 93 a7 02 	sts	0x02A7, r25
    285e:	80 93 a6 02 	sts	0x02A6, r24

			PacketBytes[1] = AICB_STATUS_CMD_OK;
    2862:	10 92 92 01 	sts	0x0192, r1
    2866:	09 c0       	rjmp	.+18     	; 0x287a <AICI_InterpretPacket+0x29a>
			
			break;
		default:                                        // Unknown command, return error
			MessageSize = 1;
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	90 93 a7 02 	sts	0x02A7, r25
    2870:	80 93 a6 02 	sts	0x02A6, r24
			
			PacketBytes[1] = AICB_STATUS_CMD_UNKNOWN;
    2874:	89 ec       	ldi	r24, 0xC9	; 201
    2876:	80 93 92 01 	sts	0x0192, r24
	}

	V2P_SendPacket();                                    // Send the response packet
    287a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <V2P_SendPacket>
    287e:	df 91       	pop	r29
    2880:	cf 91       	pop	r28
    2882:	1f 91       	pop	r17
    2884:	0f 91       	pop	r16
    2886:	ff 90       	pop	r15
    2888:	ef 90       	pop	r14
    288a:	df 90       	pop	r13
    288c:	08 95       	ret

0000288e <PM_SetupDFAddressCounters>:
	  return ProgDataSize;
}

void PM_SetupDFAddressCounters(const uint8_t Type)
{
    288e:	80 93 02 01 	sts	0x0102, r24
	uint32_t StartAddress;
	
	MemoryType  = Type;
	GPageLength = 0;
    2892:	10 92 b0 02 	sts	0x02B0, r1
    2896:	10 92 af 02 	sts	0x02AF, r1
    289a:	20 91 a9 02 	lds	r18, 0x02A9
    289e:	30 91 aa 02 	lds	r19, 0x02AA
    28a2:	40 91 ab 02 	lds	r20, 0x02AB
    28a6:	50 91 ac 02 	lds	r21, 0x02AC

	if (Type == TYPE_FLASH)                                             // Type 1 = Flash
    28aa:	81 30       	cpi	r24, 0x01	; 1
    28ac:	39 f4       	brne	.+14     	; 0x28bc <PM_SetupDFAddressCounters+0x2e>
	  StartAddress = (CurrAddress << 1);                                // Convert flash word address to byte address
    28ae:	da 01       	movw	r26, r20
    28b0:	c9 01       	movw	r24, r18
    28b2:	88 0f       	add	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	aa 1f       	adc	r26, r26
    28b8:	bb 1f       	adc	r27, r27
    28ba:	06 c0       	rjmp	.+12     	; 0x28c8 <PM_SetupDFAddressCounters+0x3a>
	else
	  StartAddress = CurrAddress + PM_EEPROM_OFFSET;                    // EEPROM uses byte addresses, and starts at the 257th kilobyte in Dataflash
    28bc:	da 01       	movw	r26, r20
    28be:	c9 01       	movw	r24, r18
    28c0:	80 50       	subi	r24, 0x00	; 0
    28c2:	9c 4f       	sbci	r25, 0xFC	; 252
    28c4:	ab 4f       	sbci	r26, 0xFB	; 251
    28c6:	bf 4f       	sbci	r27, 0xFF	; 255
	
	DataflashInfo.CurrPageAddress = 0;
    28c8:	10 92 44 01 	sts	0x0144, r1
    28cc:	10 92 43 01 	sts	0x0143, r1
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	06 c0       	rjmp	.+12     	; 0x28e2 <PM_SetupDFAddressCounters+0x54>

	while (StartAddress >= DF_INTERNALDF_BUFFBYTES)                     // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DF_INTERNALDF_BUFFBYTES;                        // Subtract one page's worth of bytes from the desired address
    28d6:	88 50       	subi	r24, 0x08	; 8
    28d8:	91 40       	sbci	r25, 0x01	; 1
    28da:	a0 40       	sbci	r26, 0x00	; 0
    28dc:	b0 40       	sbci	r27, 0x00	; 0
    28de:	2f 5f       	subi	r18, 0xFF	; 255
    28e0:	3f 4f       	sbci	r19, 0xFF	; 255
    28e2:	88 30       	cpi	r24, 0x08	; 8
    28e4:	41 e0       	ldi	r20, 0x01	; 1
    28e6:	94 07       	cpc	r25, r20
    28e8:	40 e0       	ldi	r20, 0x00	; 0
    28ea:	a4 07       	cpc	r26, r20
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	b4 07       	cpc	r27, r20
    28f0:	90 f7       	brcc	.-28     	; 0x28d6 <PM_SetupDFAddressCounters+0x48>
    28f2:	30 93 44 01 	sts	0x0144, r19
    28f6:	20 93 43 01 	sts	0x0143, r18
		DataflashInfo.CurrPageAddress++;
	}
	
	DataflashInfo.CurrBuffByte = (uint16_t)StartAddress;                // The buffer byte is the remainder
    28fa:	90 93 46 01 	sts	0x0146, r25
    28fe:	80 93 45 01 	sts	0x0145, r24
    2902:	08 95       	ret

00002904 <PM_CheckEndOfFuseLockData>:
}

void PM_StoreProgramByte(const uint8_t Data)
{
	if (DataflashInfo.CurrBuffByte == DF_INTERNALDF_BUFFBYTES)          // Finished current dataflash buffer page; write it to dataflash and get ready for the next one
	{
		DF_CopyBufferToFlashPage(DataflashInfo.CurrPageAddress++);
		DF_BufferWriteEnable(0);
		DataflashInfo.CurrBuffByte = 0;
	}
	
	SPI_SPITransmit(Data);                                              // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
	DataflashInfo.CurrBuffByte++;
	GPageLength++;
}

void PM_InterpretAVRISPPacket(void)
{
	uint8_t* EEPROMAddress;

	switch (PacketBytes[0])
	{
		case AICB_CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
						
			for (uint8_t PacketB = 0; PacketB <= 11; PacketB++)         // Save the enter programming mode command bytes
			  eeprom_write_byte(&EEPROMVars.EnterProgMode[PacketB], PacketBytes[PacketB]);
			
			InProgrammingMode = TRUE;                                   // Set the flag, prevent the user from exiting the V2P state machine			
			CurrentMode = PM_NO_SETUP;                                  // Clear the current mode variable

			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = AICB_STATUS_CMD_OK;

			break;			
		case AICB_CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;

			PM_CheckEndOfFuseLockData();                                // Check for remaining bytes to be stored and general cleanup
			
			InProgrammingMode = FALSE;                                  // Clear the flag, allow the user to exit the V2P state machine

			DF_EnableDataflash(FALSE);

			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
			PacketBytes[1] = AICB_STATUS_CMD_OK;

			break;
		case AICB_CMD_READ_SIGNATURE_ISP:
			MessageSize = 4;

			PacketBytes[1] = AICB_STATUS_CMD_OK;                        // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x01;                                      // Signature bytes all return "01" in storage mode
			PacketBytes[3] = AICB_STATUS_CMD_OK;                        // Data byte is encased in CMD_OKs

			break;
		case AICB_CMD_CHIP_ERASE_ISP:
			MessageSize = 2;

			for (uint8_t PacketB = 1; PacketB < 7; PacketB++)           // Save the erase chip command bytes to EEPROM
			  eeprom_write_byte(&EEPROMVars.EraseChip[PacketB], PacketBytes[PacketB]);

			for (uint8_t Byte = 0; Byte < 4; Byte++)                    // Clear the program and EEPROM size counters
			{
				eeprom_write_byte(&EEPROMVars.DataSize[Byte], 0x00);
				eeprom_write_byte(&EEPROMVars.EEPROMSize[Byte], 0x00);
			}
						
			eeprom_write_byte(&EEPROMVars.EraseCmdStored, TRUE);
			
			PacketBytes[1] = AICB_STATUS_CMD_OK;
			
			break;
		case AICB_CMD_READ_OSCCAL_ISP:
			MessageSize = 4;

			PacketBytes[1] = AICB_STATUS_CMD_OK;                        // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x00;                                      // Return 0x00 for the OSCCAL byte
			PacketBytes[3] = AICB_STATUS_CMD_OK;                        // Data byte is encased in CMD_OKs

			break;
		case AICB_CMD_PROGRAM_FUSE_ISP:
		case AICB_CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;

			if (CurrentMode != PM_LOCKFUSEBITS_WRITE)                   // First lock or fuse byte being written, set the EEPROM pointer
			{
				CurrentMode   = PM_LOCKFUSEBITS_WRITE;
				DataflashInfo.CurrBuffByte  = 0;                        // CurrBuffByte is used to store the total fuse/lock bytes written
			}

			if (PacketBytes[0] == AICB_CMD_PROGRAM_FUSE_ISP)
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.FuseBytes + (DataflashInfo.CurrBuffByte << 2));
				MemoryType    = TYPE_FUSE;
			}
			else
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.LockBytes + (DataflashInfo.CurrBuffByte << 2));
				MemoryType    = TYPE_LOCK;
			}				
			
			if (DataflashInfo.CurrBuffByte < PM_MAX_FUSELOCKBITS)
			{
				for (uint8_t FLByte = 1; FLByte < 5; FLByte++)
				{
					eeprom_write_byte(EEPROMAddress, PacketBytes[FLByte]);
					EEPROMAddress++;
				}

				DataflashInfo.CurrBuffByte++;                           // Increment the total fuse/lock bytes written counter
			}
			
			PacketBytes[1] = AICB_STATUS_CMD_OK;                        // Two CMD_OKs are always returned
			PacketBytes[2] = AICB_STATUS_CMD_OK;                        // Two CMD_OKs are always returned

			break;
		case AICB_CMD_READ_FUSE_ISP:
		case AICB_CMD_READ_LOCK_ISP:
			MessageSize = 4;
	
			if (CurrentMode != PM_LOCKFUSEBITS_READ)                    // First lock or fuse byte being read, set the EEPROM pointer
			{
				PM_CheckEndOfFuseLockData();                            // Check for remaining bytes to be stored and general cleanup
				
				DataflashInfo.CurrBuffByte = 0;
				CurrentMode  = PM_LOCKFUSEBITS_READ;
			}
			
			if (DataflashInfo.CurrBuffByte > eeprom_read_byte((PacketBytes[0] == AICB_CMD_READ_FUSE_ISP)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes))  // Trying to read more fuse/lock bytes than are stored in memory
			{
				PacketBytes[2] = 0xFF;                                  // Return 0xFF for the fuse/lock byte
			}
			else
			{
				PacketBytes[2] = eeprom_read_byte((uint8_t*)(((PacketBytes[0] == AICB_CMD_READ_FUSE_ISP)? &EEPROMVars.FuseBytes : &EEPROMVars.LockBytes) // Starting location
									                         + (DataflashInfo.CurrBuffByte << 2) + (PacketBytes[1] - 1)));                               // The start position of the actual fuse/lock byte to read (4 bytes each));
			}

			DataflashInfo.CurrBuffByte++;

			PacketBytes[1] = AICB_STATUS_CMD_OK;                        // Data byte is encased in CMD_OKs
			PacketBytes[3] = AICB_STATUS_CMD_OK;                        // Data byte is encased in CMD_OKs

			break;
		case AICB_CMD_PROGRAM_FLASH_ISP:
		case AICB_CMD_PROGRAM_EEPROM_ISP:
			MessageSize = 2;

			if (CurrentMode != PM_DATAFLASH_WRITE)                      // First programming packet
			{
				if (PacketBytes[0] == AICB_CMD_PROGRAM_FLASH_ISP)       // Flash programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram; // Set the eeprom address to the Program command bytes location
					PM_SetupDFAddressCounters(TYPE_FLASH);
				}
				else                                                    // EEPROM programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;  // Set the eeprom address to the EEPROM command bytes location
					PM_SetupDFAddressCounters(TYPE_EEPROM);
				}
				
				DF_BufferWriteEnable(DataflashInfo.CurrBuffByte);
				CurrentMode = PM_DATAFLASH_WRITE;
				
				for (uint8_t B = 1; B < 10; B++)                        // Save the command bytes
				{
					eeprom_write_byte(EEPROMAddress, PacketBytes[B]);
					EEPROMAddress++;
				}
			}

			uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
			                      | PacketBytes[2];

			for (uint16_t CurrByte = 0; CurrByte < BytesToWrite; CurrByte++)
			  PM_StoreProgramByte(PacketBytes[10 + CurrByte]);

			if (!(GPageLength & PM_PAGELENGTH_FOUNDBIT) && (PacketBytes[3] & ISPCC_PROG_MODE_PAGEDONE) && GPageLength)
			{
				eeprom_write_word(((MemoryType == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength), GPageLength);
		
				GPageLength |= PM_PAGELENGTH_FOUNDBIT;                  // Bit 15 is used to indicate if the length has been found
			}

			PacketBytes[1] = AICB_STATUS_CMD_OK;
		
			break;
		case AICB_CMD_READ_FLASH_ISP:
		case AICB_CMD_READ_EEPROM_ISP:	
			if (CurrentMode != PM_DATAFLASH_READ)
			{
				PM_CheckEndOfFuseLockData();                            // Check for remaining bytes to be stored and general cleanup
				
				PM_SetupDFAddressCounters((PacketBytes[0] == AICB_CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);
				DF_ContinuousReadEnable(DataflashInfo.CurrPageAddress, DataflashInfo.CurrBuffByte);
				
				CurrentMode = PM_DATAFLASH_READ;
				CurrAddress = 0;
			}

			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8)      // \. Load in the number of bytes that is to
			                     | PacketBytes[2];                      // /  be read into a temp variable (MSB first)
						
			uint16_t BytesInMem  = PM_GetStoredDataSize((PacketBytes[0] == AICB_CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
			   PacketBytes[2 + ReadByte] = ((CurrAddress < BytesInMem)? SPI_SPITransmit(0x00) : 0xFF); // Read in the next dataflash byte if present
			   V2P_IncrementCurrAddress();
			}
			
			MessageSize = BytesToRead + 3;

			PacketBytes[1]               = AICB_STATUS_CMD_OK;          // Return data should be encompassed in STATUS_CMD_OKs
			PacketBytes[2 + BytesToRead] = AICB_STATUS_CMD_OK;          // Return data should be encompassed in STATUS_CMD_OKs
		
			break;
		default:
			MessageSize = 1;
			
			PacketBytes[1] = AICB_STATUS_CMD_UNKNOWN;
	}

	V2P_SendPacket();                                                   // Send the response packet
}

void PM_CheckEndOfFuseLockData(void)
{
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	24 97       	sbiw	r28, 0x04	; 4
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
	if (CurrentMode == PM_DATAFLASH_WRITE)
    2918:	80 91 ae 02 	lds	r24, 0x02AE
    291c:	81 30       	cpi	r24, 0x01	; 1
    291e:	09 f0       	breq	.+2      	; 0x2922 <PM_CheckEndOfFuseLockData+0x1e>
    2920:	40 c0       	rjmp	.+128    	; 0x29a2 <PM_CheckEndOfFuseLockData+0x9e>
	{
		if (DataflashInfo.CurrBuffByte)                                 // Data in the dataflash buffer, pending to be written
    2922:	80 91 45 01 	lds	r24, 0x0145
    2926:	90 91 46 01 	lds	r25, 0x0146
    292a:	89 2b       	or	r24, r25
    292c:	31 f0       	breq	.+12     	; 0x293a <PM_CheckEndOfFuseLockData+0x36>
		  DF_CopyBufferToFlashPage(DataflashInfo.CurrPageAddress);      // Save the remaining buffer bytes
    292e:	80 91 43 01 	lds	r24, 0x0143
    2932:	90 91 44 01 	lds	r25, 0x0144
    2936:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DF_CopyBufferToFlashPage>

		uint32_t DataSize = ((DataflashInfo.CurrPageAddress * DF_INTERNALDF_BUFFBYTES) + DataflashInfo.CurrBuffByte);
    293a:	20 91 43 01 	lds	r18, 0x0143
    293e:	30 91 44 01 	lds	r19, 0x0144
    2942:	88 e0       	ldi	r24, 0x08	; 8
    2944:	91 e0       	ldi	r25, 0x01	; 1
    2946:	ac 01       	movw	r20, r24
    2948:	24 9f       	mul	r18, r20
    294a:	c0 01       	movw	r24, r0
    294c:	25 9f       	mul	r18, r21
    294e:	90 0d       	add	r25, r0
    2950:	34 9f       	mul	r19, r20
    2952:	90 0d       	add	r25, r0
    2954:	11 24       	eor	r1, r1
    2956:	20 91 45 01 	lds	r18, 0x0145
    295a:	30 91 46 01 	lds	r19, 0x0146
    295e:	82 0f       	add	r24, r18
    2960:	93 1f       	adc	r25, r19
    2962:	9c 01       	movw	r18, r24
    2964:	44 27       	eor	r20, r20
    2966:	55 27       	eor	r21, r21
    2968:	29 83       	std	Y+1, r18	; 0x01
    296a:	3a 83       	std	Y+2, r19	; 0x02
    296c:	4b 83       	std	Y+3, r20	; 0x03
    296e:	5c 83       	std	Y+4, r21	; 0x04

		if (MemoryType == TYPE_FLASH)
    2970:	80 91 02 01 	lds	r24, 0x0102
    2974:	fe 01       	movw	r30, r28
    2976:	31 96       	adiw	r30, 0x01	; 1
    2978:	81 30       	cpi	r24, 0x01	; 1
    297a:	21 f4       	brne	.+8      	; 0x2984 <PM_CheckEndOfFuseLockData+0x80>
            {
              uint8_t len;
              len = (uint8_t) n;

              asm volatile (
    297c:	84 e0       	ldi	r24, 0x04	; 4
    297e:	af e1       	ldi	r26, 0x1F	; 31
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	0b c0       	rjmp	.+22     	; 0x299a <PM_CheckEndOfFuseLockData+0x96>
		{
			eeprom_write_block((const void*)&DataSize, (void*)&EEPROMVars.DataSize, sizeof(uint32_t));
		}
		else
		{
			DataSize -= PM_EEPROM_OFFSET;                               // Remove DataFlash EEPROM start offset
    2984:	20 50       	subi	r18, 0x00	; 0
    2986:	34 40       	sbci	r19, 0x04	; 4
    2988:	44 40       	sbci	r20, 0x04	; 4
    298a:	50 40       	sbci	r21, 0x00	; 0
    298c:	29 83       	std	Y+1, r18	; 0x01
    298e:	3a 83       	std	Y+2, r19	; 0x02
    2990:	4b 83       	std	Y+3, r20	; 0x03
    2992:	5c 83       	std	Y+4, r21	; 0x04
            {
              uint8_t len;
              len = (uint8_t) n;

              asm volatile (
    2994:	84 e0       	ldi	r24, 0x04	; 4
    2996:	a3 e2       	ldi	r26, 0x23	; 35
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	18 2e       	mov	r1, r24
    299c:	0e 94 b7 1a 	call	0x356e	; 0x356e <__eeprom_write_block_1F2021>
    29a0:	12 c0       	rjmp	.+36     	; 0x29c6 <PM_CheckEndOfFuseLockData+0xc2>
			eeprom_write_block((const void*)&DataSize, (void*)&EEPROMVars.EEPROMSize, sizeof(uint32_t));
		}
	}
	else if (CurrentMode == PM_LOCKFUSEBITS_WRITE)
    29a2:	83 30       	cpi	r24, 0x03	; 3
    29a4:	81 f4       	brne	.+32     	; 0x29c6 <PM_CheckEndOfFuseLockData+0xc2>
	{
		// CurrBuffByte stores the total number of fuse/lock bytes written in this case:
		eeprom_write_byte(((MemoryType == TYPE_FUSE)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes), DataflashInfo.CurrBuffByte);
    29a6:	20 91 45 01 	lds	r18, 0x0145
    29aa:	30 91 46 01 	lds	r19, 0x0146
    29ae:	80 91 02 01 	lds	r24, 0x0102
    29b2:	82 30       	cpi	r24, 0x02	; 2
    29b4:	19 f4       	brne	.+6      	; 0x29bc <PM_CheckEndOfFuseLockData+0xb8>
    29b6:	a3 e3       	ldi	r26, 0x33	; 51
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <PM_CheckEndOfFuseLockData+0xbc>
    29bc:	a4 e3       	ldi	r26, 0x34	; 52
    29be:	b0 e0       	ldi	r27, 0x00	; 0

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    29c0:	02 2e       	mov	r0, r18
    29c2:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
    29c6:	24 96       	adiw	r28, 0x04	; 4
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	df 91       	pop	r29
    29d4:	cf 91       	pop	r28
    29d6:	08 95       	ret

000029d8 <PM_GetStoredDataSize>:
    29d8:	cf 93       	push	r28
    29da:	df 93       	push	r29
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	24 97       	sbiw	r28, 0x04	; 4
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	81 30       	cpi	r24, 0x01	; 1
    29ee:	19 f4       	brne	.+6      	; 0x29f6 <PM_GetStoredDataSize+0x1e>
    29f0:	af e1       	ldi	r26, 0x1F	; 31
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <PM_GetStoredDataSize+0x22>
    29f6:	a3 e2       	ldi	r26, 0x23	; 35
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 

              asm volatile (
    29fa:	84 e0       	ldi	r24, 0x04	; 4
    29fc:	fe 01       	movw	r30, r28
    29fe:	31 96       	adiw	r30, 0x01	; 1
    2a00:	18 2e       	mov	r1, r24
    2a02:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__eeprom_read_block_1F2021>
    2a06:	69 81       	ldd	r22, Y+1	; 0x01
    2a08:	7a 81       	ldd	r23, Y+2	; 0x02
    2a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0e:	6f 3f       	cpi	r22, 0xFF	; 255
    2a10:	2f ef       	ldi	r18, 0xFF	; 255
    2a12:	72 07       	cpc	r23, r18
    2a14:	2f ef       	ldi	r18, 0xFF	; 255
    2a16:	82 07       	cpc	r24, r18
    2a18:	2f ef       	ldi	r18, 0xFF	; 255
    2a1a:	92 07       	cpc	r25, r18
    2a1c:	21 f4       	brne	.+8      	; 0x2a26 <PM_GetStoredDataSize+0x4e>
    2a1e:	60 e0       	ldi	r22, 0x00	; 0
    2a20:	70 e0       	ldi	r23, 0x00	; 0
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	24 96       	adiw	r28, 0x04	; 4
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	08 95       	ret

00002a38 <PM_StoreProgramByte>:
    2a38:	1f 93       	push	r17
    2a3a:	18 2f       	mov	r17, r24
    2a3c:	80 91 45 01 	lds	r24, 0x0145
    2a40:	90 91 46 01 	lds	r25, 0x0146
    2a44:	88 50       	subi	r24, 0x08	; 8
    2a46:	91 40       	sbci	r25, 0x01	; 1
    2a48:	a1 f4       	brne	.+40     	; 0x2a72 <PM_StoreProgramByte+0x3a>
    2a4a:	80 91 43 01 	lds	r24, 0x0143
    2a4e:	90 91 44 01 	lds	r25, 0x0144
    2a52:	01 96       	adiw	r24, 0x01	; 1
    2a54:	90 93 44 01 	sts	0x0144, r25
    2a58:	80 93 43 01 	sts	0x0143, r24
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <DF_CopyBufferToFlashPage>
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 94 c8 0a 	call	0x1590	; 0x1590 <DF_BufferWriteEnable>
    2a6a:	10 92 46 01 	sts	0x0146, r1
    2a6e:	10 92 45 01 	sts	0x0145, r1
    2a72:	81 2f       	mov	r24, r17
    2a74:	0e 94 b4 09 	call	0x1368	; 0x1368 <SPI_SPITransmit>
    2a78:	80 91 45 01 	lds	r24, 0x0145
    2a7c:	90 91 46 01 	lds	r25, 0x0146
    2a80:	01 96       	adiw	r24, 0x01	; 1
    2a82:	90 93 46 01 	sts	0x0146, r25
    2a86:	80 93 45 01 	sts	0x0145, r24
    2a8a:	80 91 af 02 	lds	r24, 0x02AF
    2a8e:	90 91 b0 02 	lds	r25, 0x02B0
    2a92:	01 96       	adiw	r24, 0x01	; 1
    2a94:	90 93 b0 02 	sts	0x02B0, r25
    2a98:	80 93 af 02 	sts	0x02AF, r24
    2a9c:	1f 91       	pop	r17
    2a9e:	08 95       	ret

00002aa0 <PM_SendFuseLockBytes>:
	}
}

void PM_SendFuseLockBytes(const uint8_t Type)
{
    2aa0:	ef 92       	push	r14
    2aa2:	ff 92       	push	r15
    2aa4:	0f 93       	push	r16
    2aa6:	1f 93       	push	r17
    2aa8:	cf 93       	push	r28
    2aaa:	df 93       	push	r29
	uint8_t  TotalBytes;
	uint8_t* EEPROMAddress;

	if (Type == TYPE_FUSE)
    2aac:	82 30       	cpi	r24, 0x02	; 2
    2aae:	59 f4       	brne	.+22     	; 0x2ac6 <PM_SendFuseLockBytes+0x26>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2ab0:	43 e3       	ldi	r20, 0x33	; 51
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	da 01       	movw	r26, r20
    2ab6:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
    2aba:	80 2d       	mov	r24, r0
	{
		TotalBytes    = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
    2abc:	18 2f       	mov	r17, r24
    2abe:	62 e0       	ldi	r22, 0x02	; 2
    2ac0:	e6 2e       	mov	r14, r22
    2ac2:	f1 2c       	mov	r15, r1
    2ac4:	0a c0       	rjmp	.+20     	; 0x2ada <PM_SendFuseLockBytes+0x3a>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2ac6:	44 e3       	ldi	r20, 0x34	; 52
    2ac8:	50 e0       	ldi	r21, 0x00	; 0
    2aca:	da 01       	movw	r26, r20
    2acc:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
    2ad0:	80 2d       	mov	r24, r0
		EEPROMAddress = EEPROMVars.FuseBytes;
	}
	else
	{
		TotalBytes    = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
    2ad2:	18 2f       	mov	r17, r24
    2ad4:	39 e2       	ldi	r19, 0x29	; 41
    2ad6:	e3 2e       	mov	r14, r19
    2ad8:	f1 2c       	mov	r15, r1
    2ada:	e4 0e       	add	r14, r20
    2adc:	f5 1e       	adc	r15, r21
    2ade:	15 c0       	rjmp	.+42     	; 0x2b0a <PM_SendFuseLockBytes+0x6a>
    2ae0:	e7 01       	movw	r28, r14
    2ae2:	00 e0       	ldi	r16, 0x00	; 0
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2ae4:	de 01       	movw	r26, r28
    2ae6:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
    2aea:	80 2d       	mov	r24, r0
		EEPROMAddress = EEPROMVars.LockBytes;	
	}

	while (TotalBytes--)                                                // Write each of the fuse/lock bytes stored in memory to the slave AVR
	{
		for (uint8_t CommandByte = 0; CommandByte < 4; CommandByte++)   // Write each individual command byte
		{
			USI_SPITransmit(eeprom_read_byte(EEPROMAddress));
    2aec:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
			EEPROMAddress++;
    2af0:	21 96       	adiw	r28, 0x01	; 1
    2af2:	0f 5f       	subi	r16, 0xFF	; 255
    2af4:	04 30       	cpi	r16, 0x04	; 4
    2af6:	b1 f7       	brne	.-20     	; 0x2ae4 <PM_SendFuseLockBytes+0x44>
    2af8:	84 e0       	ldi	r24, 0x04	; 4
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	e8 0e       	add	r14, r24
    2afe:	f9 1e       	adc	r15, r25
		}
		
		// Add some delay before programming next byte, if there is one:
		if (TotalBytes)
    2b00:	11 23       	and	r17, r17
    2b02:	19 f0       	breq	.+6      	; 0x2b0a <PM_SendFuseLockBytes+0x6a>
		  MAIN_Delay10MS(5);
    2b04:	85 e0       	ldi	r24, 0x05	; 5
    2b06:	0e 94 52 02 	call	0x4a4	; 0x4a4 <MAIN_Delay10MS>
    2b0a:	11 50       	subi	r17, 0x01	; 1
    2b0c:	48 f7       	brcc	.-46     	; 0x2ae0 <PM_SendFuseLockBytes+0x40>
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	1f 91       	pop	r17
    2b14:	0f 91       	pop	r16
    2b16:	ff 90       	pop	r15
    2b18:	ef 90       	pop	r14
    2b1a:	08 95       	ret

00002b1c <PM_SendEraseCommand>:
	}
}

void PM_SendEraseCommand(void)
{			
    2b1c:	cf 93       	push	r28
    2b1e:	df 93       	push	r29
    2b20:	cb e1       	ldi	r28, 0x1B	; 27
    2b22:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2b24:	de 01       	movw	r26, r28
    2b26:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
    2b2a:	80 2d       	mov	r24, r0
	for (uint8_t B = 3; B < 7 ; B++)                                    // Read out the erase chip command bytes
	  USI_SPITransmit(eeprom_read_byte(&EEPROMVars.EraseChip[B]));      // Send the erase chip commands
    2b2c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
    2b30:	21 96       	adiw	r28, 0x01	; 1
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	cf 31       	cpi	r28, 0x1F	; 31
    2b36:	d8 07       	cpc	r29, r24
    2b38:	a9 f7       	brne	.-22     	; 0x2b24 <PM_SendEraseCommand+0x8>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2b3a:	25 97       	sbiw	r28, 0x05	; 5
    2b3c:	de 01       	movw	r26, r28
    2b3e:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
    2b42:	80 2d       	mov	r24, r0
    2b44:	25 96       	adiw	r28, 0x05	; 5
			
	if (eeprom_read_byte(&EEPROMVars.EraseChip[2]))                     // Value of 1 indicates a busy flag test
    2b46:	88 23       	and	r24, r24
    2b48:	59 f0       	breq	.+22     	; 0x2b60 <PM_SendEraseCommand+0x44>
	{
		do
		  USI_SPITransmitWord(0xF000);
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	90 ef       	ldi	r25, 0xF0	; 240
    2b4e:	0e 94 06 0a 	call	0x140c	; 0x140c <USI_SPITransmitWord>
		while (USI_SPITransmitWord(0x0000) & 0x01);
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	0e 94 06 0a 	call	0x140c	; 0x140c <USI_SPITransmitWord>
    2b5a:	80 ff       	sbrs	r24, 0
    2b5c:	08 c0       	rjmp	.+16     	; 0x2b6e <PM_SendEraseCommand+0x52>
    2b5e:	f5 cf       	rjmp	.-22     	; 0x2b4a <PM_SendEraseCommand+0x2e>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2b60:	26 97       	sbiw	r28, 0x06	; 6
    2b62:	de 01       	movw	r26, r28
    2b64:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
    2b68:	80 2d       	mov	r24, r0
	}
	else                                                                // Cleared flag means use a predefined delay
	{		
		MAIN_Delay1MS(eeprom_read_byte(&EEPROMVars.EraseChip[1]));      // Wait the erase delay
    2b6a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <MAIN_Delay1MS>
    2b6e:	df 91       	pop	r29
    2b70:	cf 91       	pop	r28
    2b72:	08 95       	ret

00002b74 <PM_CreateProgrammingPackets>:
	}
}

void PM_CreateProgrammingPackets(const uint8_t Type)
{			
    2b74:	3f 92       	push	r3
    2b76:	4f 92       	push	r4
    2b78:	5f 92       	push	r5
    2b7a:	6f 92       	push	r6
    2b7c:	7f 92       	push	r7
    2b7e:	8f 92       	push	r8
    2b80:	9f 92       	push	r9
    2b82:	af 92       	push	r10
    2b84:	bf 92       	push	r11
    2b86:	cf 92       	push	r12
    2b88:	df 92       	push	r13
    2b8a:	ef 92       	push	r14
    2b8c:	ff 92       	push	r15
    2b8e:	0f 93       	push	r16
    2b90:	1f 93       	push	r17
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	18 2f       	mov	r17, r24
	uint32_t BytesRead       = 0;
	uint32_t BytesToRead     = PM_GetStoredDataSize(Type);              // Get the byte size of the stored program
    2b98:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <PM_GetStoredDataSize>
    2b9c:	2b 01       	movw	r4, r22
    2b9e:	3c 01       	movw	r6, r24
	uint16_t BytesPerProgram;
	uint16_t PageLength      = eeprom_read_word((Type == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength);
    2ba0:	11 30       	cpi	r17, 0x01	; 1
    2ba2:	09 f0       	breq	.+2      	; 0x2ba6 <PM_CreateProgrammingPackets+0x32>
    2ba4:	e6 c0       	rjmp	.+460    	; 0x2d72 <PM_CreateProgrammingPackets+0x1fe>
eeprom_read_word (const uint16_t *addr)
{
  uint16_t result;

  asm ( 
    2ba6:	a5 e8       	ldi	r26, 0x85	; 133
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__eeprom_read_word_1F2021>
    2bae:	4f 01       	movw	r8, r30
	uint8_t  ContinuedPage   = FALSE;
	uint8_t* EEPROMAddress;

	CurrAddress = 0;
    2bb0:	10 92 a9 02 	sts	0x02A9, r1
    2bb4:	10 92 aa 02 	sts	0x02AA, r1
    2bb8:	10 92 ab 02 	sts	0x02AB, r1
    2bbc:	10 92 ac 02 	sts	0x02AC, r1

	if (Type == TYPE_FLASH)
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram;             // Set the EEPROM pointer to the write flash command bytes location
		DF_ContinuousReadEnable(0, 0);
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	70 e0       	ldi	r23, 0x00	; 0
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	0e 94 8d 0a 	call	0x151a	; 0x151a <DF_ContinuousReadEnable>
		PacketBytes[0] = AICB_CMD_PROGRAM_FLASH_ISP;
    2bcc:	83 e1       	ldi	r24, 0x13	; 19
    2bce:	80 93 91 01 	sts	0x0191, r24
    2bd2:	03 e0       	ldi	r16, 0x03	; 3
    2bd4:	10 e0       	ldi	r17, 0x00	; 0
	}
	else
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;              // Set the EEPROM pointer to the write EEPROM command bytes location
		DF_ContinuousReadEnable(PM_EEPROM_OFFSET / DF_INTERNALDF_BUFFBYTES, PM_EEPROM_OFFSET % DF_INTERNALDF_BUFFBYTES); // Start read from the EEPROM offset location
		PacketBytes[0] = AICB_CMD_PROGRAM_EEPROM_ISP;
	}

	// DEBUG:
	USART_ENABLE(1,0);
    2bd6:	87 ea       	ldi	r24, 0xA7	; 167
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	0e 94 66 09 	call	0x12cc	; 0x12cc <LCD_puts_f>
    2bde:	0e 94 e6 07 	call	0xfcc	; 0xfcc <OSCCAL_Calibrate>
    2be2:	80 91 c1 00 	lds	r24, 0x00C1
    2be6:	80 78       	andi	r24, 0x80	; 128
    2be8:	88 60       	ori	r24, 0x08	; 8
    2bea:	80 93 c1 00 	sts	0x00C1, r24
    2bee:	c1 e9       	ldi	r28, 0x91	; 145
    2bf0:	d1 e0       	ldi	r29, 0x01	; 1

	for (uint8_t B = 0; B < 9 ; B++)                                    // Load in the write data command bytes
	{
		EEPROMAddress++;                                                // Increment the EEPROM location counter
    2bf2:	0f 5f       	subi	r16, 0xFF	; 255
    2bf4:	1f 4f       	sbci	r17, 0xFF	; 255
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2bf6:	d8 01       	movw	r26, r16
    2bf8:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
    2bfc:	80 2d       	mov	r24, r0
		PacketBytes[B] = eeprom_read_byte(EEPROMAddress);               // Synthesise a write packet header
    2bfe:	99 27       	eor	r25, r25
    2c00:	89 93       	st	Y+, r24

		USART_Tx(PacketBytes[B]);
    2c02:	0e 94 87 09 	call	0x130e	; 0x130e <USART_Tx>
    2c06:	f1 e0       	ldi	r31, 0x01	; 1
    2c08:	ca 39       	cpi	r28, 0x9A	; 154
    2c0a:	df 07       	cpc	r29, r31
    2c0c:	91 f7       	brne	.-28     	; 0x2bf2 <PM_CreateProgrammingPackets+0x7e>
	}
	
	BytesPerProgram = ((uint16_t)PacketBytes[1] << 8)
    2c0e:	80 91 92 01 	lds	r24, 0x0192
    2c12:	99 27       	eor	r25, r25
    2c14:	d8 2f       	mov	r29, r24
    2c16:	cc 27       	eor	r28, r28
    2c18:	80 91 93 01 	lds	r24, 0x0193
    2c1c:	99 27       	eor	r25, r25
    2c1e:	c8 2b       	or	r28, r24
    2c20:	d9 2b       	or	r29, r25
    2c22:	aa 24       	eor	r10, r10
    2c24:	bb 24       	eor	r11, r11
    2c26:	65 01       	movw	r12, r10
    2c28:	33 24       	eor	r3, r3
    2c2a:	9c c0       	rjmp	.+312    	; 0x2d64 <PM_CreateProgrammingPackets+0x1f0>
	                | PacketBytes[2];

	while (BytesRead < BytesToRead)
	{
		if (PacketBytes[3] & ISPCC_PROG_MODE_PAGE)
    2c2c:	80 91 94 01 	lds	r24, 0x0194
    2c30:	80 ff       	sbrs	r24, 0
    2c32:	4b c0       	rjmp	.+150    	; 0x2cca <PM_CreateProgrammingPackets+0x156>
		{
			if (PageLength > 160)                                       // Max 160 bytes at a time
    2c34:	91 ea       	ldi	r25, 0xA1	; 161
    2c36:	89 16       	cp	r8, r25
    2c38:	91 04       	cpc	r9, r1
    2c3a:	18 f4       	brcc	.+6      	; 0x2c42 <PM_CreateProgrammingPackets+0xce>
    2c3c:	01 e9       	ldi	r16, 0x91	; 145
    2c3e:	11 e0       	ldi	r17, 0x01	; 1
    2c40:	2f c0       	rjmp	.+94     	; 0x2ca0 <PM_CreateProgrammingPackets+0x12c>
			{
				if (!(ContinuedPage))                                   // Start of a new page, program in the first 150 bytes
    2c42:	33 20       	and	r3, r3
    2c44:	41 f4       	brne	.+16     	; 0x2c56 <PM_CreateProgrammingPackets+0xe2>
				{
					BytesPerProgram = 160;
					PacketBytes[3] &= ~ISPCC_PROG_MODE_PAGEDONE;		
    2c46:	8f 77       	andi	r24, 0x7F	; 127
    2c48:	80 93 94 01 	sts	0x0194, r24
    2c4c:	c0 ea       	ldi	r28, 0xA0	; 160
    2c4e:	d0 e0       	ldi	r29, 0x00	; 0
    2c50:	11 e0       	ldi	r17, 0x01	; 1
    2c52:	31 2e       	mov	r3, r17
    2c54:	07 c0       	rjmp	.+14     	; 0x2c64 <PM_CreateProgrammingPackets+0xf0>
					ContinuedPage   = TRUE;
				}
				else                                                    // Middle of a page, program in the remainder
				{
					BytesPerProgram = PageLength - 160;
    2c56:	e4 01       	movw	r28, r8
    2c58:	c0 5a       	subi	r28, 0xA0	; 160
    2c5a:	d0 40       	sbci	r29, 0x00	; 0
					PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
    2c5c:	80 68       	ori	r24, 0x80	; 128
    2c5e:	80 93 94 01 	sts	0x0194, r24
    2c62:	33 24       	eor	r3, r3
    2c64:	01 e9       	ldi	r16, 0x91	; 145
    2c66:	11 e0       	ldi	r17, 0x01	; 1
    2c68:	07 c0       	rjmp	.+14     	; 0x2c78 <PM_CreateProgrammingPackets+0x104>
					ContinuedPage   = FALSE;
				}
				
				for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
				  PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);    // Load in the page				
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	0e 94 b4 09 	call	0x1368	; 0x1368 <SPI_SPITransmit>
    2c70:	f8 01       	movw	r30, r16
    2c72:	82 87       	std	Z+10, r24	; 0x0a
    2c74:	0f 5f       	subi	r16, 0xFF	; 255
    2c76:	1f 4f       	sbci	r17, 0xFF	; 255
    2c78:	ce 01       	movw	r24, r28
    2c7a:	8f 56       	subi	r24, 0x6F	; 111
    2c7c:	9e 4f       	sbci	r25, 0xFE	; 254
    2c7e:	08 17       	cp	r16, r24
    2c80:	19 07       	cpc	r17, r25
    2c82:	99 f7       	brne	.-26     	; 0x2c6a <PM_CreateProgrammingPackets+0xf6>

				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);
    2c84:	8d 2f       	mov	r24, r29
    2c86:	99 27       	eor	r25, r25
    2c88:	80 93 92 01 	sts	0x0192, r24
				PacketBytes[2] = (uint8_t)(BytesPerProgram);
    2c8c:	c0 93 93 01 	sts	0x0193, r28
    2c90:	41 c0       	rjmp	.+130    	; 0x2d14 <PM_CreateProgrammingPackets+0x1a0>

				BytesRead += BytesPerProgram;                           // Increment the counter
			}
			else
			{
				for (uint16_t LoadB = 0; LoadB < PageLength; LoadB++)
				  PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);    // Load in the page
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	0e 94 b4 09 	call	0x1368	; 0x1368 <SPI_SPITransmit>
    2c98:	f8 01       	movw	r30, r16
    2c9a:	82 87       	std	Z+10, r24	; 0x0a
    2c9c:	0f 5f       	subi	r16, 0xFF	; 255
    2c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca0:	c4 01       	movw	r24, r8
    2ca2:	8f 56       	subi	r24, 0x6F	; 111
    2ca4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ca6:	08 17       	cp	r16, r24
    2ca8:	19 07       	cpc	r17, r25
    2caa:	99 f7       	brne	.-26     	; 0x2c92 <PM_CreateProgrammingPackets+0x11e>
			
				PacketBytes[1]  = (uint8_t)(PageLength >> 8);
    2cac:	89 2d       	mov	r24, r9
    2cae:	99 27       	eor	r25, r25
    2cb0:	80 93 92 01 	sts	0x0192, r24
				PacketBytes[2]  = (uint8_t)(PageLength);
    2cb4:	80 92 93 01 	sts	0x0193, r8
				PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
    2cb8:	80 91 94 01 	lds	r24, 0x0194
    2cbc:	80 68       	ori	r24, 0x80	; 128
    2cbe:	80 93 94 01 	sts	0x0194, r24

				BytesRead += PageLength;                                // Increment the counter
    2cc2:	c4 01       	movw	r24, r8
    2cc4:	aa 27       	eor	r26, r26
    2cc6:	bb 27       	eor	r27, r27
    2cc8:	28 c0       	rjmp	.+80     	; 0x2d1a <PM_CreateProgrammingPackets+0x1a6>
			}
		}
		else
		{
			if ((BytesRead + BytesPerProgram) > BytesToRead)            // Less than a whole BytesPerProgram left of data to write
    2cca:	ce 01       	movw	r24, r28
    2ccc:	aa 27       	eor	r26, r26
    2cce:	bb 27       	eor	r27, r27
    2cd0:	8a 0d       	add	r24, r10
    2cd2:	9b 1d       	adc	r25, r11
    2cd4:	ac 1d       	adc	r26, r12
    2cd6:	bd 1d       	adc	r27, r13
    2cd8:	48 16       	cp	r4, r24
    2cda:	59 06       	cpc	r5, r25
    2cdc:	6a 06       	cpc	r6, r26
    2cde:	7b 06       	cpc	r7, r27
    2ce0:	48 f4       	brcc	.+18     	; 0x2cf4 <PM_CreateProgrammingPackets+0x180>
			{
				BytesPerProgram = BytesToRead - BytesRead;              // Next lot of bytes will be the remaining data length
    2ce2:	e2 01       	movw	r28, r4
    2ce4:	ca 19       	sub	r28, r10
    2ce6:	db 09       	sbc	r29, r11
				PacketBytes[1]  = (uint8_t)(BytesPerProgram >> 8);       // \. Save the new length
    2ce8:	8d 2f       	mov	r24, r29
    2cea:	99 27       	eor	r25, r25
    2cec:	80 93 92 01 	sts	0x0192, r24
				PacketBytes[2]  = (uint8_t)(BytesPerProgram);            // /  into the data packet
    2cf0:	c0 93 93 01 	sts	0x0193, r28
    2cf4:	01 e9       	ldi	r16, 0x91	; 145
    2cf6:	11 e0       	ldi	r17, 0x01	; 1
    2cf8:	07 c0       	rjmp	.+14     	; 0x2d08 <PM_CreateProgrammingPackets+0x194>
			}

			for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
			  PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);          // Load in the page
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	0e 94 b4 09 	call	0x1368	; 0x1368 <SPI_SPITransmit>
    2d00:	f8 01       	movw	r30, r16
    2d02:	82 87       	std	Z+10, r24	; 0x0a
    2d04:	0f 5f       	subi	r16, 0xFF	; 255
    2d06:	1f 4f       	sbci	r17, 0xFF	; 255
    2d08:	ce 01       	movw	r24, r28
    2d0a:	8f 56       	subi	r24, 0x6F	; 111
    2d0c:	9e 4f       	sbci	r25, 0xFE	; 254
    2d0e:	08 17       	cp	r16, r24
    2d10:	19 07       	cpc	r17, r25
    2d12:	99 f7       	brne	.-26     	; 0x2cfa <PM_CreateProgrammingPackets+0x186>
		
			BytesRead += BytesPerProgram;                               // Increment the counter
    2d14:	ce 01       	movw	r24, r28
    2d16:	aa 27       	eor	r26, r26
    2d18:	bb 27       	eor	r27, r27
    2d1a:	a8 0e       	add	r10, r24
    2d1c:	b9 1e       	adc	r11, r25
    2d1e:	ca 1e       	adc	r12, r26
    2d20:	db 1e       	adc	r13, r27
		}
	
		if (!(BytesRead & 0xFFFF) && (BytesRead & 0x00FF0000))          // Extended address required
    2d22:	a1 14       	cp	r10, r1
    2d24:	b1 04       	cpc	r11, r1
    2d26:	e1 f4       	brne	.+56     	; 0x2d60 <PM_CreateProgrammingPackets+0x1ec>
    2d28:	e1 2c       	mov	r14, r1
    2d2a:	f1 2c       	mov	r15, r1
    2d2c:	ef ef       	ldi	r30, 0xFF	; 255
    2d2e:	0e 2f       	mov	r16, r30
    2d30:	11 2d       	mov	r17, r1
    2d32:	ea 20       	and	r14, r10
    2d34:	fb 20       	and	r15, r11
    2d36:	0c 21       	and	r16, r12
    2d38:	1d 21       	and	r17, r13
    2d3a:	e1 14       	cp	r14, r1
    2d3c:	f1 04       	cpc	r15, r1
    2d3e:	01 05       	cpc	r16, r1
    2d40:	11 05       	cpc	r17, r1
    2d42:	71 f0       	breq	.+28     	; 0x2d60 <PM_CreateProgrammingPackets+0x1ec>
		{
			USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);                // Load extended address command
    2d44:	8d e4       	ldi	r24, 0x4D	; 77
    2d46:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
			USI_SPITransmit(0x00);
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
			USI_SPITransmit((BytesRead & 0x00FF0000) >> 16);            // The 3rd byte of the long holds the extended address
    2d50:	c8 01       	movw	r24, r16
    2d52:	aa 27       	eor	r26, r26
    2d54:	bb 27       	eor	r27, r27
    2d56:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
			USI_SPITransmit(0x00);
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <USI_SPITransmit>
		}

		ISPCC_ProgramChip();                                            // Start the program cycle
    2d60:	0e 94 8f 11 	call	0x231e	; 0x231e <ISPCC_ProgramChip>
    2d64:	a4 14       	cp	r10, r4
    2d66:	b5 04       	cpc	r11, r5
    2d68:	c6 04       	cpc	r12, r6
    2d6a:	d7 04       	cpc	r13, r7
    2d6c:	08 f4       	brcc	.+2      	; 0x2d70 <PM_CreateProgrammingPackets+0x1fc>
    2d6e:	5e cf       	rjmp	.-324    	; 0x2c2c <PM_CreateProgrammingPackets+0xb8>
    2d70:	19 c0       	rjmp	.+50     	; 0x2da4 <PM_CreateProgrammingPackets+0x230>
eeprom_read_word (const uint16_t *addr)
{
  uint16_t result;

  asm ( 
    2d72:	a7 e8       	ldi	r26, 0x87	; 135
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__eeprom_read_word_1F2021>
    2d7a:	4f 01       	movw	r8, r30
    2d7c:	10 92 a9 02 	sts	0x02A9, r1
    2d80:	10 92 aa 02 	sts	0x02AA, r1
    2d84:	10 92 ab 02 	sts	0x02AB, r1
    2d88:	10 92 ac 02 	sts	0x02AC, r1
    2d8c:	60 ee       	ldi	r22, 0xE0	; 224
    2d8e:	70 e0       	ldi	r23, 0x00	; 0
    2d90:	84 ee       	ldi	r24, 0xE4	; 228
    2d92:	93 e0       	ldi	r25, 0x03	; 3
    2d94:	0e 94 8d 0a 	call	0x151a	; 0x151a <DF_ContinuousReadEnable>
    2d98:	85 e1       	ldi	r24, 0x15	; 21
    2d9a:	80 93 91 01 	sts	0x0191, r24
    2d9e:	0d e0       	ldi	r16, 0x0D	; 13
    2da0:	10 e0       	ldi	r17, 0x00	; 0
    2da2:	19 cf       	rjmp	.-462    	; 0x2bd6 <PM_CreateProgrammingPackets+0x62>
    2da4:	df 91       	pop	r29
    2da6:	cf 91       	pop	r28
    2da8:	1f 91       	pop	r17
    2daa:	0f 91       	pop	r16
    2dac:	ff 90       	pop	r15
    2dae:	ef 90       	pop	r14
    2db0:	df 90       	pop	r13
    2db2:	cf 90       	pop	r12
    2db4:	bf 90       	pop	r11
    2db6:	af 90       	pop	r10
    2db8:	9f 90       	pop	r9
    2dba:	8f 90       	pop	r8
    2dbc:	7f 90       	pop	r7
    2dbe:	6f 90       	pop	r6
    2dc0:	5f 90       	pop	r5
    2dc2:	4f 90       	pop	r4
    2dc4:	3f 90       	pop	r3
    2dc6:	08 95       	ret

00002dc8 <PM_ShowStoredItemSizes>:
	}
}

void PM_ShowStoredItemSizes(void)
{
    2dc8:	1f 93       	push	r17
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	2e 97       	sbiw	r28, 0x0e	; 14
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[14];
	uint8_t ItemInfoIndex = 0;
	uint8_t TempB;
	
	JoyStatus = 1;
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	8e bb       	out	0x1e, r24	; 30
    2de2:	10 e0       	ldi	r17, 0x00	; 0
	
	for (;;)
	{
		if (JoyStatus)
    2de4:	8e b3       	in	r24, 0x1e	; 30
    2de6:	88 23       	and	r24, r24
    2de8:	e9 f3       	breq	.-6      	; 0x2de4 <PM_ShowStoredItemSizes+0x1c>
		{
			if (JoyStatus & JOY_UP)
    2dea:	f6 9b       	sbis	0x1e, 6	; 30
    2dec:	04 c0       	rjmp	.+8      	; 0x2df6 <PM_ShowStoredItemSizes+0x2e>
			  (ItemInfoIndex == 0)? ItemInfoIndex = 3 : ItemInfoIndex--;
    2dee:	11 23       	and	r17, r17
    2df0:	81 f1       	breq	.+96     	; 0x2e52 <PM_ShowStoredItemSizes+0x8a>
    2df2:	11 50       	subi	r17, 0x01	; 1
    2df4:	0a c0       	rjmp	.+20     	; 0x2e0a <PM_ShowStoredItemSizes+0x42>
			else if (JoyStatus & JOY_DOWN)
    2df6:	f7 9b       	sbis	0x1e, 7	; 30
    2df8:	06 c0       	rjmp	.+12     	; 0x2e06 <PM_ShowStoredItemSizes+0x3e>
			  (ItemInfoIndex == 3)? ItemInfoIndex = 0 : ItemInfoIndex++;
    2dfa:	13 30       	cpi	r17, 0x03	; 3
    2dfc:	11 f4       	brne	.+4      	; 0x2e02 <PM_ShowStoredItemSizes+0x3a>
    2dfe:	10 e0       	ldi	r17, 0x00	; 0
    2e00:	0d c0       	rjmp	.+26     	; 0x2e1c <PM_ShowStoredItemSizes+0x54>
    2e02:	1f 5f       	subi	r17, 0xFF	; 255
    2e04:	02 c0       	rjmp	.+4      	; 0x2e0a <PM_ShowStoredItemSizes+0x42>
			else if (JoyStatus & JOY_LEFT)
    2e06:	f2 99       	sbic	0x1e, 2	; 30
    2e08:	49 c0       	rjmp	.+146    	; 0x2e9c <PM_ShowStoredItemSizes+0xd4>
			  return;
		
			switch (ItemInfoIndex)
    2e0a:	11 30       	cpi	r17, 0x01	; 1
    2e0c:	79 f0       	breq	.+30     	; 0x2e2c <PM_ShowStoredItemSizes+0x64>
    2e0e:	11 30       	cpi	r17, 0x01	; 1
    2e10:	28 f0       	brcs	.+10     	; 0x2e1c <PM_ShowStoredItemSizes+0x54>
    2e12:	12 30       	cpi	r17, 0x02	; 2
    2e14:	a9 f0       	breq	.+42     	; 0x2e40 <PM_ShowStoredItemSizes+0x78>
    2e16:	13 30       	cpi	r17, 0x03	; 3
    2e18:	d1 f5       	brne	.+116    	; 0x2e8e <PM_ShowStoredItemSizes+0xc6>
    2e1a:	1c c0       	rjmp	.+56     	; 0x2e54 <PM_ShowStoredItemSizes+0x8c>
			{
				case 0:
					strcpy_P(Buffer, PSTR("DATA-"));
    2e1c:	68 e5       	ldi	r22, 0x58	; 88
    2e1e:	74 e0       	ldi	r23, 0x04	; 4
    2e20:	ce 01       	movw	r24, r28
    2e22:	01 96       	adiw	r24, 0x01	; 1
    2e24:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_FLASH), &Buffer[5], 10);
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	07 c0       	rjmp	.+14     	; 0x2e3a <PM_ShowStoredItemSizes+0x72>
					break;
				case 1:
					strcpy_P(Buffer, PSTR("EPRM-"));
    2e2c:	62 e5       	ldi	r22, 0x52	; 82
    2e2e:	74 e0       	ldi	r23, 0x04	; 4
    2e30:	ce 01       	movw	r24, r28
    2e32:	01 96       	adiw	r24, 0x01	; 1
    2e34:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_EEPROM), &Buffer[5], 10);
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <PM_GetStoredDataSize>
    2e3e:	20 c0       	rjmp	.+64     	; 0x2e80 <PM_ShowStoredItemSizes+0xb8>
					break;
				case 2:
					strcpy_P(Buffer, PSTR("FUSE-"));
    2e40:	6c e4       	ldi	r22, 0x4C	; 76
    2e42:	74 e0       	ldi	r23, 0x04	; 4
    2e44:	ce 01       	movw	r24, r28
    2e46:	01 96       	adiw	r24, 0x01	; 1
    2e48:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <strcpy_P>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2e4c:	a3 e3       	ldi	r26, 0x33	; 51
    2e4e:	b0 e0       	ldi	r27, 0x00	; 0
    2e50:	09 c0       	rjmp	.+18     	; 0x2e64 <PM_ShowStoredItemSizes+0x9c>
					TempB = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
					ultoa(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5], 10);
					break;
    2e52:	13 e0       	ldi	r17, 0x03	; 3
				case 3:
					strcpy_P(Buffer, PSTR("LOCK-"));
    2e54:	66 e4       	ldi	r22, 0x46	; 70
    2e56:	74 e0       	ldi	r23, 0x04	; 4
    2e58:	ce 01       	movw	r24, r28
    2e5a:	01 96       	adiw	r24, 0x01	; 1
    2e5c:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <strcpy_P>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2e60:	a4 e3       	ldi	r26, 0x34	; 52
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
    2e68:	80 2d       	mov	r24, r0
					TempB = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
					ultoa(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5], 10);
    2e6a:	8f 3f       	cpi	r24, 0xFF	; 255
    2e6c:	29 f4       	brne	.+10     	; 0x2e78 <PM_ShowStoredItemSizes+0xb0>
    2e6e:	60 e0       	ldi	r22, 0x00	; 0
    2e70:	70 e0       	ldi	r23, 0x00	; 0
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	04 c0       	rjmp	.+8      	; 0x2e80 <PM_ShowStoredItemSizes+0xb8>
    2e78:	68 2f       	mov	r22, r24
    2e7a:	77 27       	eor	r23, r23
    2e7c:	88 27       	eor	r24, r24
    2e7e:	99 27       	eor	r25, r25
    2e80:	2a e0       	ldi	r18, 0x0A	; 10
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	ae 01       	movw	r20, r28
    2e86:	4a 5f       	subi	r20, 0xFA	; 250
    2e88:	5f 4f       	sbci	r21, 0xFF	; 255
    2e8a:	0e 94 5f 1a 	call	0x34be	; 0x34be <ultoa>
			}
	
			LCD_puts(Buffer);
    2e8e:	ce 01       	movw	r24, r28
    2e90:	01 96       	adiw	r24, 0x01	; 1
    2e92:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_puts>

			MAIN_WaitForJoyRelease();
    2e96:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
    2e9a:	a4 cf       	rjmp	.-184    	; 0x2de4 <PM_ShowStoredItemSizes+0x1c>
    2e9c:	2e 96       	adiw	r28, 0x0e	; 14
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	de bf       	out	0x3e, r29	; 62
    2ea4:	0f be       	out	0x3f, r0	; 63
    2ea6:	cd bf       	out	0x3d, r28	; 61
    2ea8:	df 91       	pop	r29
    2eaa:	cf 91       	pop	r28
    2eac:	1f 91       	pop	r17
    2eae:	08 95       	ret

00002eb0 <PM_InterpretAVRISPPacket>:
    2eb0:	ef 92       	push	r14
    2eb2:	ff 92       	push	r15
    2eb4:	0f 93       	push	r16
    2eb6:	1f 93       	push	r17
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	20 91 91 01 	lds	r18, 0x0191
    2ec0:	26 31       	cpi	r18, 0x16	; 22
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <PM_InterpretAVRISPPacket+0x16>
    2ec4:	ae c1       	rjmp	.+860    	; 0x3222 <PM_InterpretAVRISPPacket+0x372>
    2ec6:	27 31       	cpi	r18, 0x17	; 23
    2ec8:	78 f4       	brcc	.+30     	; 0x2ee8 <PM_InterpretAVRISPPacket+0x38>
    2eca:	22 31       	cpi	r18, 0x12	; 18
    2ecc:	09 f4       	brne	.+2      	; 0x2ed0 <PM_InterpretAVRISPPacket+0x20>
    2ece:	5f c0       	rjmp	.+190    	; 0x2f8e <PM_InterpretAVRISPPacket+0xde>
    2ed0:	23 31       	cpi	r18, 0x13	; 19
    2ed2:	30 f4       	brcc	.+12     	; 0x2ee0 <PM_InterpretAVRISPPacket+0x30>
    2ed4:	20 31       	cpi	r18, 0x10	; 16
    2ed6:	e9 f0       	breq	.+58     	; 0x2f12 <PM_InterpretAVRISPPacket+0x62>
    2ed8:	21 31       	cpi	r18, 0x11	; 17
    2eda:	09 f0       	breq	.+2      	; 0x2ede <PM_InterpretAVRISPPacket+0x2e>
    2edc:	08 c2       	rjmp	.+1040   	; 0x32ee <PM_InterpretAVRISPPacket+0x43e>
    2ede:	37 c0       	rjmp	.+110    	; 0x2f4e <PM_InterpretAVRISPPacket+0x9e>
    2ee0:	24 31       	cpi	r18, 0x14	; 20
    2ee2:	09 f0       	breq	.+2      	; 0x2ee6 <PM_InterpretAVRISPPacket+0x36>
    2ee4:	35 c1       	rjmp	.+618    	; 0x3150 <PM_InterpretAVRISPPacket+0x2a0>
    2ee6:	9d c1       	rjmp	.+826    	; 0x3222 <PM_InterpretAVRISPPacket+0x372>
    2ee8:	29 31       	cpi	r18, 0x19	; 25
    2eea:	09 f4       	brne	.+2      	; 0x2eee <PM_InterpretAVRISPPacket+0x3e>
    2eec:	8c c0       	rjmp	.+280    	; 0x3006 <PM_InterpretAVRISPPacket+0x156>
    2eee:	2a 31       	cpi	r18, 0x1A	; 26
    2ef0:	38 f4       	brcc	.+14     	; 0x2f00 <PM_InterpretAVRISPPacket+0x50>
    2ef2:	27 31       	cpi	r18, 0x17	; 23
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <PM_InterpretAVRISPPacket+0x48>
    2ef6:	87 c0       	rjmp	.+270    	; 0x3006 <PM_InterpretAVRISPPacket+0x156>
    2ef8:	28 31       	cpi	r18, 0x18	; 24
    2efa:	09 f0       	breq	.+2      	; 0x2efe <PM_InterpretAVRISPPacket+0x4e>
    2efc:	f8 c1       	rjmp	.+1008   	; 0x32ee <PM_InterpretAVRISPPacket+0x43e>
    2efe:	d6 c0       	rjmp	.+428    	; 0x30ac <PM_InterpretAVRISPPacket+0x1fc>
    2f00:	2b 31       	cpi	r18, 0x1B	; 27
    2f02:	c9 f1       	breq	.+114    	; 0x2f76 <PM_InterpretAVRISPPacket+0xc6>
    2f04:	2b 31       	cpi	r18, 0x1B	; 27
    2f06:	08 f4       	brcc	.+2      	; 0x2f0a <PM_InterpretAVRISPPacket+0x5a>
    2f08:	d1 c0       	rjmp	.+418    	; 0x30ac <PM_InterpretAVRISPPacket+0x1fc>
    2f0a:	2c 31       	cpi	r18, 0x1C	; 28
    2f0c:	09 f0       	breq	.+2      	; 0x2f10 <PM_InterpretAVRISPPacket+0x60>
    2f0e:	ef c1       	rjmp	.+990    	; 0x32ee <PM_InterpretAVRISPPacket+0x43e>
    2f10:	6d c0       	rjmp	.+218    	; 0x2fec <PM_InterpretAVRISPPacket+0x13c>
    2f12:	82 e0       	ldi	r24, 0x02	; 2
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	90 93 a7 02 	sts	0x02A7, r25
    2f1a:	80 93 a6 02 	sts	0x02A6, r24
    2f1e:	e1 e9       	ldi	r30, 0x91	; 145
    2f20:	f1 e0       	ldi	r31, 0x01	; 1
    2f22:	27 e2       	ldi	r18, 0x27	; 39
    2f24:	30 e0       	ldi	r19, 0x00	; 0

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    2f26:	81 91       	ld	r24, Z+
    2f28:	d9 01       	movw	r26, r18
    2f2a:	08 2e       	mov	r0, r24
    2f2c:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
    2f30:	2f 5f       	subi	r18, 0xFF	; 255
    2f32:	3f 4f       	sbci	r19, 0xFF	; 255
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	ed 39       	cpi	r30, 0x9D	; 157
    2f38:	f8 07       	cpc	r31, r24
    2f3a:	a9 f7       	brne	.-22     	; 0x2f26 <PM_InterpretAVRISPPacket+0x76>
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	80 93 a8 02 	sts	0x02A8, r24
    2f42:	10 92 ae 02 	sts	0x02AE, r1
    2f46:	81 b3       	in	r24, 0x11	; 17
    2f48:	8f 7c       	andi	r24, 0xCF	; 207
    2f4a:	80 62       	ori	r24, 0x20	; 32
    2f4c:	10 c0       	rjmp	.+32     	; 0x2f6e <PM_InterpretAVRISPPacket+0xbe>
    2f4e:	82 e0       	ldi	r24, 0x02	; 2
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	90 93 a7 02 	sts	0x02A7, r25
    2f56:	80 93 a6 02 	sts	0x02A6, r24
    2f5a:	0e 94 82 14 	call	0x2904	; 0x2904 <PM_CheckEndOfFuseLockData>
    2f5e:	10 92 a8 02 	sts	0x02A8, r1
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    2f68:	81 b3       	in	r24, 0x11	; 17
    2f6a:	8f 7c       	andi	r24, 0xCF	; 207
    2f6c:	80 61       	ori	r24, 0x10	; 16
    2f6e:	81 bb       	out	0x11, r24	; 17
    2f70:	10 92 92 01 	sts	0x0192, r1
    2f74:	c5 c1       	rjmp	.+906    	; 0x3300 <PM_InterpretAVRISPPacket+0x450>
    2f76:	84 e0       	ldi	r24, 0x04	; 4
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	90 93 a7 02 	sts	0x02A7, r25
    2f7e:	80 93 a6 02 	sts	0x02A6, r24
    2f82:	10 92 92 01 	sts	0x0192, r1
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	80 93 93 01 	sts	0x0193, r24
    2f8c:	39 c0       	rjmp	.+114    	; 0x3000 <PM_InterpretAVRISPPacket+0x150>
    2f8e:	82 e0       	ldi	r24, 0x02	; 2
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	90 93 a7 02 	sts	0x02A7, r25
    2f96:	80 93 a6 02 	sts	0x02A6, r24
    2f9a:	e2 e9       	ldi	r30, 0x92	; 146
    2f9c:	f1 e0       	ldi	r31, 0x01	; 1
    2f9e:	29 e1       	ldi	r18, 0x19	; 25
    2fa0:	30 e0       	ldi	r19, 0x00	; 0

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    2fa2:	81 91       	ld	r24, Z+
    2fa4:	d9 01       	movw	r26, r18
    2fa6:	08 2e       	mov	r0, r24
    2fa8:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
    2fac:	2f 5f       	subi	r18, 0xFF	; 255
    2fae:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb0:	91 e0       	ldi	r25, 0x01	; 1
    2fb2:	e8 39       	cpi	r30, 0x98	; 152
    2fb4:	f9 07       	cpc	r31, r25
    2fb6:	a9 f7       	brne	.-22     	; 0x2fa2 <PM_InterpretAVRISPPacket+0xf2>
    2fb8:	2f e1       	ldi	r18, 0x1F	; 31
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	80 e0       	ldi	r24, 0x00	; 0

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    2fbe:	d9 01       	movw	r26, r18
    2fc0:	08 2e       	mov	r0, r24
    2fc2:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
    2fc6:	d9 01       	movw	r26, r18
    2fc8:	14 96       	adiw	r26, 0x04	; 4
    2fca:	08 2e       	mov	r0, r24
    2fcc:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
    2fd0:	2f 5f       	subi	r18, 0xFF	; 255
    2fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd4:	e0 e0       	ldi	r30, 0x00	; 0
    2fd6:	23 32       	cpi	r18, 0x23	; 35
    2fd8:	3e 07       	cpc	r19, r30
    2fda:	89 f7       	brne	.-30     	; 0x2fbe <PM_InterpretAVRISPPacket+0x10e>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	2c 50       	subi	r18, 0x0C	; 12
    2fe0:	30 40       	sbci	r19, 0x00	; 0
    2fe2:	d9 01       	movw	r26, r18
    2fe4:	08 2e       	mov	r0, r24
    2fe6:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
    2fea:	c2 cf       	rjmp	.-124    	; 0x2f70 <PM_InterpretAVRISPPacket+0xc0>
    2fec:	84 e0       	ldi	r24, 0x04	; 4
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	90 93 a7 02 	sts	0x02A7, r25
    2ff4:	80 93 a6 02 	sts	0x02A6, r24
    2ff8:	10 92 92 01 	sts	0x0192, r1
    2ffc:	10 92 93 01 	sts	0x0193, r1
    3000:	10 92 94 01 	sts	0x0194, r1
    3004:	7d c1       	rjmp	.+762    	; 0x3300 <PM_InterpretAVRISPPacket+0x450>
    3006:	83 e0       	ldi	r24, 0x03	; 3
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	90 93 a7 02 	sts	0x02A7, r25
    300e:	80 93 a6 02 	sts	0x02A6, r24
    3012:	80 91 ae 02 	lds	r24, 0x02AE
    3016:	83 30       	cpi	r24, 0x03	; 3
    3018:	39 f0       	breq	.+14     	; 0x3028 <PM_InterpretAVRISPPacket+0x178>
    301a:	83 e0       	ldi	r24, 0x03	; 3
    301c:	80 93 ae 02 	sts	0x02AE, r24
    3020:	10 92 46 01 	sts	0x0146, r1
    3024:	10 92 45 01 	sts	0x0145, r1
    3028:	40 91 45 01 	lds	r20, 0x0145
    302c:	50 91 46 01 	lds	r21, 0x0146
    3030:	27 31       	cpi	r18, 0x17	; 23
    3032:	69 f4       	brne	.+26     	; 0x304e <PM_InterpretAVRISPPacket+0x19e>
    3034:	80 ea       	ldi	r24, 0xA0	; 160
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	48 9f       	mul	r20, r24
    303a:	90 01       	movw	r18, r0
    303c:	49 9f       	mul	r20, r25
    303e:	30 0d       	add	r19, r0
    3040:	58 9f       	mul	r21, r24
    3042:	30 0d       	add	r19, r0
    3044:	11 24       	eor	r1, r1
    3046:	2b 5c       	subi	r18, 0xCB	; 203
    3048:	3f 4f       	sbci	r19, 0xFF	; 255
    304a:	82 e0       	ldi	r24, 0x02	; 2
    304c:	0c c0       	rjmp	.+24     	; 0x3066 <PM_InterpretAVRISPPacket+0x1b6>
    304e:	80 ea       	ldi	r24, 0xA0	; 160
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	48 9f       	mul	r20, r24
    3054:	90 01       	movw	r18, r0
    3056:	49 9f       	mul	r20, r25
    3058:	30 0d       	add	r19, r0
    305a:	58 9f       	mul	r21, r24
    305c:	30 0d       	add	r19, r0
    305e:	11 24       	eor	r1, r1
    3060:	23 5a       	subi	r18, 0xA3	; 163
    3062:	3f 4f       	sbci	r19, 0xFF	; 255
    3064:	83 e0       	ldi	r24, 0x03	; 3
    3066:	80 93 02 01 	sts	0x0102, r24
    306a:	80 91 45 01 	lds	r24, 0x0145
    306e:	90 91 46 01 	lds	r25, 0x0146
    3072:	0a 97       	sbiw	r24, 0x0a	; 10
    3074:	b0 f4       	brcc	.+44     	; 0x30a2 <PM_InterpretAVRISPPacket+0x1f2>
    3076:	e2 e9       	ldi	r30, 0x92	; 146
    3078:	f1 e0       	ldi	r31, 0x01	; 1

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    307a:	81 91       	ld	r24, Z+
    307c:	d9 01       	movw	r26, r18
    307e:	08 2e       	mov	r0, r24
    3080:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
    3084:	2f 5f       	subi	r18, 0xFF	; 255
    3086:	3f 4f       	sbci	r19, 0xFF	; 255
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	e6 39       	cpi	r30, 0x96	; 150
    308c:	f8 07       	cpc	r31, r24
    308e:	a9 f7       	brne	.-22     	; 0x307a <PM_InterpretAVRISPPacket+0x1ca>
    3090:	80 91 45 01 	lds	r24, 0x0145
    3094:	90 91 46 01 	lds	r25, 0x0146
    3098:	01 96       	adiw	r24, 0x01	; 1
    309a:	90 93 46 01 	sts	0x0146, r25
    309e:	80 93 45 01 	sts	0x0145, r24
    30a2:	10 92 92 01 	sts	0x0192, r1
    30a6:	10 92 93 01 	sts	0x0193, r1
    30aa:	2a c1       	rjmp	.+596    	; 0x3300 <PM_InterpretAVRISPPacket+0x450>
    30ac:	84 e0       	ldi	r24, 0x04	; 4
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	90 93 a7 02 	sts	0x02A7, r25
    30b4:	80 93 a6 02 	sts	0x02A6, r24
    30b8:	80 91 ae 02 	lds	r24, 0x02AE
    30bc:	84 30       	cpi	r24, 0x04	; 4
    30be:	49 f0       	breq	.+18     	; 0x30d2 <PM_InterpretAVRISPPacket+0x222>
    30c0:	0e 94 82 14 	call	0x2904	; 0x2904 <PM_CheckEndOfFuseLockData>
    30c4:	10 92 46 01 	sts	0x0146, r1
    30c8:	10 92 45 01 	sts	0x0145, r1
    30cc:	84 e0       	ldi	r24, 0x04	; 4
    30ce:	80 93 ae 02 	sts	0x02AE, r24
    30d2:	40 91 45 01 	lds	r20, 0x0145
    30d6:	50 91 46 01 	lds	r21, 0x0146
    30da:	20 91 91 01 	lds	r18, 0x0191
    30de:	28 31       	cpi	r18, 0x18	; 24
    30e0:	19 f0       	breq	.+6      	; 0x30e8 <PM_InterpretAVRISPPacket+0x238>
    30e2:	a4 e3       	ldi	r26, 0x34	; 52
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <PM_InterpretAVRISPPacket+0x23c>
    30e8:	a3 e3       	ldi	r26, 0x33	; 51
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    30ec:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
    30f0:	80 2d       	mov	r24, r0
    30f2:	99 27       	eor	r25, r25
    30f4:	84 17       	cp	r24, r20
    30f6:	95 07       	cpc	r25, r21
    30f8:	10 f4       	brcc	.+4      	; 0x30fe <PM_InterpretAVRISPPacket+0x24e>
    30fa:	8f ef       	ldi	r24, 0xFF	; 255
    30fc:	1e c0       	rjmp	.+60     	; 0x313a <PM_InterpretAVRISPPacket+0x28a>
    30fe:	28 31       	cpi	r18, 0x18	; 24
    3100:	19 f4       	brne	.+6      	; 0x3108 <PM_InterpretAVRISPPacket+0x258>
    3102:	25 e3       	ldi	r18, 0x35	; 53
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	02 c0       	rjmp	.+4      	; 0x310c <PM_InterpretAVRISPPacket+0x25c>
    3108:	2d e5       	ldi	r18, 0x5D	; 93
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	80 ea       	ldi	r24, 0xA0	; 160
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	48 9f       	mul	r20, r24
    3112:	d0 01       	movw	r26, r0
    3114:	49 9f       	mul	r20, r25
    3116:	b0 0d       	add	r27, r0
    3118:	58 9f       	mul	r21, r24
    311a:	b0 0d       	add	r27, r0
    311c:	11 24       	eor	r1, r1
    311e:	a2 0f       	add	r26, r18
    3120:	b3 1f       	adc	r27, r19
    3122:	80 91 92 01 	lds	r24, 0x0192
    3126:	28 e2       	ldi	r18, 0x28	; 40
    3128:	82 9f       	mul	r24, r18
    312a:	c0 01       	movw	r24, r0
    312c:	11 24       	eor	r1, r1
    312e:	a8 0f       	add	r26, r24
    3130:	b9 1f       	adc	r27, r25
    3132:	98 97       	sbiw	r26, 0x28	; 40
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    3134:	0e 94 94 1a 	call	0x3528	; 0x3528 <__eeprom_read_byte_1F2021>
    3138:	80 2d       	mov	r24, r0
    313a:	80 93 93 01 	sts	0x0193, r24
    313e:	4f 5f       	subi	r20, 0xFF	; 255
    3140:	5f 4f       	sbci	r21, 0xFF	; 255
    3142:	50 93 46 01 	sts	0x0146, r21
    3146:	40 93 45 01 	sts	0x0145, r20
    314a:	10 92 92 01 	sts	0x0192, r1
    314e:	58 cf       	rjmp	.-336    	; 0x3000 <PM_InterpretAVRISPPacket+0x150>
    3150:	82 e0       	ldi	r24, 0x02	; 2
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	90 93 a7 02 	sts	0x02A7, r25
    3158:	80 93 a6 02 	sts	0x02A6, r24
    315c:	80 91 ae 02 	lds	r24, 0x02AE
    3160:	81 30       	cpi	r24, 0x01	; 1
    3162:	11 f1       	breq	.+68     	; 0x31a8 <PM_InterpretAVRISPPacket+0x2f8>
    3164:	23 31       	cpi	r18, 0x13	; 19
    3166:	31 f4       	brne	.+12     	; 0x3174 <PM_InterpretAVRISPPacket+0x2c4>
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	0e 94 47 14 	call	0x288e	; 0x288e <PM_SetupDFAddressCounters>
    316e:	c3 e0       	ldi	r28, 0x03	; 3
    3170:	d0 e0       	ldi	r29, 0x00	; 0
    3172:	05 c0       	rjmp	.+10     	; 0x317e <PM_InterpretAVRISPPacket+0x2ce>
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	0e 94 47 14 	call	0x288e	; 0x288e <PM_SetupDFAddressCounters>
    317a:	cd e0       	ldi	r28, 0x0D	; 13
    317c:	d0 e0       	ldi	r29, 0x00	; 0
    317e:	80 91 45 01 	lds	r24, 0x0145
    3182:	90 91 46 01 	lds	r25, 0x0146
    3186:	0e 94 c8 0a 	call	0x1590	; 0x1590 <DF_BufferWriteEnable>
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	80 93 ae 02 	sts	0x02AE, r24
    3190:	e2 e9       	ldi	r30, 0x92	; 146
    3192:	f1 e0       	ldi	r31, 0x01	; 1

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    3194:	81 91       	ld	r24, Z+
    3196:	de 01       	movw	r26, r28
    3198:	08 2e       	mov	r0, r24
    319a:	0e 94 a6 1a 	call	0x354c	; 0x354c <__eeprom_write_byte_1F2021>
    319e:	21 96       	adiw	r28, 0x01	; 1
    31a0:	91 e0       	ldi	r25, 0x01	; 1
    31a2:	eb 39       	cpi	r30, 0x9B	; 155
    31a4:	f9 07       	cpc	r31, r25
    31a6:	b1 f7       	brne	.-20     	; 0x3194 <PM_InterpretAVRISPPacket+0x2e4>
    31a8:	80 91 92 01 	lds	r24, 0x0192
    31ac:	99 27       	eor	r25, r25
    31ae:	d8 2f       	mov	r29, r24
    31b0:	cc 27       	eor	r28, r28
    31b2:	80 91 93 01 	lds	r24, 0x0193
    31b6:	99 27       	eor	r25, r25
    31b8:	c8 2b       	or	r28, r24
    31ba:	d9 2b       	or	r29, r25
    31bc:	01 e9       	ldi	r16, 0x91	; 145
    31be:	11 e0       	ldi	r17, 0x01	; 1
    31c0:	06 c0       	rjmp	.+12     	; 0x31ce <PM_InterpretAVRISPPacket+0x31e>
    31c2:	f8 01       	movw	r30, r16
    31c4:	82 85       	ldd	r24, Z+10	; 0x0a
    31c6:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <PM_StoreProgramByte>
    31ca:	0f 5f       	subi	r16, 0xFF	; 255
    31cc:	1f 4f       	sbci	r17, 0xFF	; 255
    31ce:	ce 01       	movw	r24, r28
    31d0:	8f 56       	subi	r24, 0x6F	; 111
    31d2:	9e 4f       	sbci	r25, 0xFE	; 254
    31d4:	08 17       	cp	r16, r24
    31d6:	19 07       	cpc	r17, r25
    31d8:	a1 f7       	brne	.-24     	; 0x31c2 <PM_InterpretAVRISPPacket+0x312>
    31da:	20 91 af 02 	lds	r18, 0x02AF
    31de:	30 91 b0 02 	lds	r19, 0x02B0
    31e2:	37 fd       	sbrc	r19, 7
    31e4:	c5 ce       	rjmp	.-630    	; 0x2f70 <PM_InterpretAVRISPPacket+0xc0>
    31e6:	80 91 94 01 	lds	r24, 0x0194
    31ea:	87 ff       	sbrs	r24, 7
    31ec:	c1 ce       	rjmp	.-638    	; 0x2f70 <PM_InterpretAVRISPPacket+0xc0>
    31ee:	21 15       	cp	r18, r1
    31f0:	31 05       	cpc	r19, r1
    31f2:	09 f4       	brne	.+2      	; 0x31f6 <PM_InterpretAVRISPPacket+0x346>
    31f4:	bd ce       	rjmp	.-646    	; 0x2f70 <PM_InterpretAVRISPPacket+0xc0>
    31f6:	80 91 02 01 	lds	r24, 0x0102
    31fa:	81 30       	cpi	r24, 0x01	; 1
    31fc:	19 f4       	brne	.+6      	; 0x3204 <PM_InterpretAVRISPPacket+0x354>
    31fe:	a5 e8       	ldi	r26, 0x85	; 133
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	02 c0       	rjmp	.+4      	; 0x3208 <PM_InterpretAVRISPPacket+0x358>
    3204:	a7 e8       	ldi	r26, 0x87	; 135
    3206:	b0 e0       	ldi	r27, 0x00	; 0

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
  asm volatile (
    3208:	09 01       	movw	r0, r18
    320a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__eeprom_write_word_1F2021>
    320e:	80 91 af 02 	lds	r24, 0x02AF
    3212:	90 91 b0 02 	lds	r25, 0x02B0
    3216:	90 68       	ori	r25, 0x80	; 128
    3218:	90 93 b0 02 	sts	0x02B0, r25
    321c:	80 93 af 02 	sts	0x02AF, r24
    3220:	a7 ce       	rjmp	.-690    	; 0x2f70 <PM_InterpretAVRISPPacket+0xc0>
    3222:	80 91 ae 02 	lds	r24, 0x02AE
    3226:	82 30       	cpi	r24, 0x02	; 2
    3228:	01 f1       	breq	.+64     	; 0x326a <PM_InterpretAVRISPPacket+0x3ba>
    322a:	0e 94 82 14 	call	0x2904	; 0x2904 <PM_CheckEndOfFuseLockData>
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	80 91 91 01 	lds	r24, 0x0191
    3234:	84 31       	cpi	r24, 0x14	; 20
    3236:	09 f4       	brne	.+2      	; 0x323a <PM_InterpretAVRISPPacket+0x38a>
    3238:	91 e0       	ldi	r25, 0x01	; 1
    323a:	89 2f       	mov	r24, r25
    323c:	0e 94 47 14 	call	0x288e	; 0x288e <PM_SetupDFAddressCounters>
    3240:	60 91 45 01 	lds	r22, 0x0145
    3244:	70 91 46 01 	lds	r23, 0x0146
    3248:	80 91 43 01 	lds	r24, 0x0143
    324c:	90 91 44 01 	lds	r25, 0x0144
    3250:	0e 94 8d 0a 	call	0x151a	; 0x151a <DF_ContinuousReadEnable>
    3254:	82 e0       	ldi	r24, 0x02	; 2
    3256:	80 93 ae 02 	sts	0x02AE, r24
    325a:	10 92 a9 02 	sts	0x02A9, r1
    325e:	10 92 aa 02 	sts	0x02AA, r1
    3262:	10 92 ab 02 	sts	0x02AB, r1
    3266:	10 92 ac 02 	sts	0x02AC, r1
    326a:	80 91 92 01 	lds	r24, 0x0192
    326e:	99 27       	eor	r25, r25
    3270:	d8 2f       	mov	r29, r24
    3272:	cc 27       	eor	r28, r28
    3274:	80 91 93 01 	lds	r24, 0x0193
    3278:	99 27       	eor	r25, r25
    327a:	c8 2b       	or	r28, r24
    327c:	d9 2b       	or	r29, r25
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	80 91 91 01 	lds	r24, 0x0191
    3284:	84 31       	cpi	r24, 0x14	; 20
    3286:	09 f4       	brne	.+2      	; 0x328a <PM_InterpretAVRISPPacket+0x3da>
    3288:	91 e0       	ldi	r25, 0x01	; 1
    328a:	89 2f       	mov	r24, r25
    328c:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <PM_GetStoredDataSize>
    3290:	7b 01       	movw	r14, r22
    3292:	01 e9       	ldi	r16, 0x91	; 145
    3294:	11 e0       	ldi	r17, 0x01	; 1
    3296:	1b c0       	rjmp	.+54     	; 0x32ce <PM_InterpretAVRISPPacket+0x41e>
    3298:	97 01       	movw	r18, r14
    329a:	44 27       	eor	r20, r20
    329c:	55 27       	eor	r21, r21
    329e:	80 91 a9 02 	lds	r24, 0x02A9
    32a2:	90 91 aa 02 	lds	r25, 0x02AA
    32a6:	a0 91 ab 02 	lds	r26, 0x02AB
    32aa:	b0 91 ac 02 	lds	r27, 0x02AC
    32ae:	82 17       	cp	r24, r18
    32b0:	93 07       	cpc	r25, r19
    32b2:	a4 07       	cpc	r26, r20
    32b4:	b5 07       	cpc	r27, r21
    32b6:	10 f0       	brcs	.+4      	; 0x32bc <PM_InterpretAVRISPPacket+0x40c>
    32b8:	8f ef       	ldi	r24, 0xFF	; 255
    32ba:	03 c0       	rjmp	.+6      	; 0x32c2 <PM_InterpretAVRISPPacket+0x412>
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	0e 94 b4 09 	call	0x1368	; 0x1368 <SPI_SPITransmit>
    32c2:	f8 01       	movw	r30, r16
    32c4:	82 83       	std	Z+2, r24	; 0x02
    32c6:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <V2P_IncrementCurrAddress>
    32ca:	0f 5f       	subi	r16, 0xFF	; 255
    32cc:	1f 4f       	sbci	r17, 0xFF	; 255
    32ce:	ce 01       	movw	r24, r28
    32d0:	8f 56       	subi	r24, 0x6F	; 111
    32d2:	9e 4f       	sbci	r25, 0xFE	; 254
    32d4:	08 17       	cp	r16, r24
    32d6:	19 07       	cpc	r17, r25
    32d8:	f9 f6       	brne	.-66     	; 0x3298 <PM_InterpretAVRISPPacket+0x3e8>
    32da:	23 96       	adiw	r28, 0x03	; 3
    32dc:	d0 93 a7 02 	sts	0x02A7, r29
    32e0:	c0 93 a6 02 	sts	0x02A6, r28
    32e4:	10 92 92 01 	sts	0x0192, r1
    32e8:	f8 01       	movw	r30, r16
    32ea:	12 82       	std	Z+2, r1	; 0x02
    32ec:	09 c0       	rjmp	.+18     	; 0x3300 <PM_InterpretAVRISPPacket+0x450>
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	90 93 a7 02 	sts	0x02A7, r25
    32f6:	80 93 a6 02 	sts	0x02A6, r24
    32fa:	89 ec       	ldi	r24, 0xC9	; 201
    32fc:	80 93 92 01 	sts	0x0192, r24
    3300:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <V2P_SendPacket>
    3304:	df 91       	pop	r29
    3306:	cf 91       	pop	r28
    3308:	1f 91       	pop	r17
    330a:	0f 91       	pop	r16
    330c:	ff 90       	pop	r15
    330e:	ef 90       	pop	r14
    3310:	08 95       	ret

00003312 <TM_FindNextTag>:
	DF_EnableDataflash(FALSE);
}

void TM_FindNextTag(void)
{
    3312:	cf 92       	push	r12
    3314:	df 92       	push	r13
    3316:	ef 92       	push	r14
    3318:	ff 92       	push	r15
    331a:	0f 93       	push	r16
    331c:	1f 93       	push	r17
    331e:	cf 93       	push	r28
    3320:	df 93       	push	r29
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	69 97       	sbiw	r28, 0x19	; 25
    3328:	0f b6       	in	r0, 0x3f	; 63
    332a:	f8 94       	cli
    332c:	de bf       	out	0x3e, r29	; 62
    332e:	0f be       	out	0x3f, r0	; 63
    3330:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Buffer[21];
	uint8_t  HeadBuff[4]      = BT_TAGHEADER;
    3332:	80 e4       	ldi	r24, 0x40	; 64
    3334:	89 83       	std	Y+1, r24	; 0x01
    3336:	88 e2       	ldi	r24, 0x28	; 40
    3338:	8a 83       	std	Y+2, r24	; 0x02
    333a:	83 e2       	ldi	r24, 0x23	; 35
    333c:	8b 83       	std	Y+3, r24	; 0x03
    333e:	89 e2       	ldi	r24, 0x29	; 41
    3340:	8c 83       	std	Y+4, r24	; 0x04
	uint32_t ProgDataSize     = PM_GetStoredDataSize(TYPE_FLASH);
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <PM_GetStoredDataSize>
    3348:	6b 01       	movw	r12, r22
    334a:	7c 01       	movw	r14, r24
	uint8_t  TotalOkHeadBytes = 0;
	uint8_t  TagByte;
	uint8_t  BytesRead;
	
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);    // Orange = busy
    334c:	81 b3       	in	r24, 0x11	; 17
    334e:	8f 7c       	andi	r24, 0xCF	; 207
    3350:	80 63       	ori	r24, 0x30	; 48
    3352:	81 bb       	out	0x11, r24	; 17

	while (DFPos < ProgDataSize)
	{
		BytesRead = 1;
		
		TagByte = SPI_SPITransmit(0x00);       // Get next byte from dataflash
		if (TagByte == HeadBuff[TotalOkHeadBytes++])
		{
			if (TotalOkHeadBytes == 4)
			{
				uint8_t HB;
			
				for (HB = 0; HB < 20; HB++)
				{
					TagByte = SPI_SPITransmit(0x00);
					Buffer[HB] = TagByte;
					
					if (TagByte == 0x00)
					  break;
				}
				
				Buffer[20] = '\0';             // Make sure string is null-terminated

				TagExists = TRUE;
				BytesRead = (HB + 2);

				LCD_puts(Buffer);
				MAIN_SETSTATUSLED(MAIN_STATLED_GREEN); // Green = ready
				return;
			}
		}
		else
		{
			TotalOkHeadBytes = ((TagByte == HeadBuff[0])? 1 : 0);
    3354:	09 81       	ldd	r16, Y+1	; 0x01
    3356:	10 e0       	ldi	r17, 0x00	; 0
    3358:	42 c0       	rjmp	.+132    	; 0x33de <TM_FindNextTag+0xcc>
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	0e 94 b4 09 	call	0x1368	; 0x1368 <SPI_SPITransmit>
    3360:	98 2f       	mov	r25, r24
    3362:	fe 01       	movw	r30, r28
    3364:	e1 0f       	add	r30, r17
    3366:	f1 1d       	adc	r31, r1
    3368:	81 81       	ldd	r24, Z+1	; 0x01
    336a:	98 17       	cp	r25, r24
    336c:	09 f5       	brne	.+66     	; 0x33b0 <TM_FindNextTag+0x9e>
    336e:	1f 5f       	subi	r17, 0xFF	; 255
    3370:	14 30       	cpi	r17, 0x04	; 4
    3372:	11 f5       	brne	.+68     	; 0x33b8 <TM_FindNextTag+0xa6>
    3374:	8e 01       	movw	r16, r28
    3376:	0b 5f       	subi	r16, 0xFB	; 251
    3378:	1f 4f       	sbci	r17, 0xFF	; 255
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	0e 94 b4 09 	call	0x1368	; 0x1368 <SPI_SPITransmit>
    3380:	f8 01       	movw	r30, r16
    3382:	80 83       	st	Z, r24
    3384:	88 23       	and	r24, r24
    3386:	39 f0       	breq	.+14     	; 0x3396 <TM_FindNextTag+0x84>
    3388:	0f 5f       	subi	r16, 0xFF	; 255
    338a:	1f 4f       	sbci	r17, 0xFF	; 255
    338c:	ce 01       	movw	r24, r28
    338e:	49 96       	adiw	r24, 0x19	; 25
    3390:	08 17       	cp	r16, r24
    3392:	19 07       	cpc	r17, r25
    3394:	91 f7       	brne	.-28     	; 0x337a <TM_FindNextTag+0x68>
    3396:	19 8e       	std	Y+25, r1	; 0x19
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	80 93 b1 02 	sts	0x02B1, r24
    339e:	ce 01       	movw	r24, r28
    33a0:	05 96       	adiw	r24, 0x05	; 5
    33a2:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_puts>
    33a6:	81 b3       	in	r24, 0x11	; 17
    33a8:	8f 7c       	andi	r24, 0xCF	; 207
    33aa:	80 61       	ori	r24, 0x10	; 16
    33ac:	81 bb       	out	0x11, r24	; 17
    33ae:	42 c0       	rjmp	.+132    	; 0x3434 <TM_FindNextTag+0x122>
    33b0:	10 e0       	ldi	r17, 0x00	; 0
    33b2:	90 17       	cp	r25, r16
    33b4:	09 f4       	brne	.+2      	; 0x33b8 <TM_FindNextTag+0xa6>
    33b6:	11 e0       	ldi	r17, 0x01	; 1
		}

		DFPos += BytesRead;
    33b8:	80 91 b2 02 	lds	r24, 0x02B2
    33bc:	90 91 b3 02 	lds	r25, 0x02B3
    33c0:	a0 91 b4 02 	lds	r26, 0x02B4
    33c4:	b0 91 b5 02 	lds	r27, 0x02B5
    33c8:	01 96       	adiw	r24, 0x01	; 1
    33ca:	a1 1d       	adc	r26, r1
    33cc:	b1 1d       	adc	r27, r1
    33ce:	80 93 b2 02 	sts	0x02B2, r24
    33d2:	90 93 b3 02 	sts	0x02B3, r25
    33d6:	a0 93 b4 02 	sts	0x02B4, r26
    33da:	b0 93 b5 02 	sts	0x02B5, r27
    33de:	80 91 b2 02 	lds	r24, 0x02B2
    33e2:	90 91 b3 02 	lds	r25, 0x02B3
    33e6:	a0 91 b4 02 	lds	r26, 0x02B4
    33ea:	b0 91 b5 02 	lds	r27, 0x02B5
    33ee:	8c 15       	cp	r24, r12
    33f0:	9d 05       	cpc	r25, r13
    33f2:	ae 05       	cpc	r26, r14
    33f4:	bf 05       	cpc	r27, r15
    33f6:	08 f4       	brcc	.+2      	; 0x33fa <TM_FindNextTag+0xe8>
    33f8:	b0 cf       	rjmp	.-160    	; 0x335a <TM_FindNextTag+0x48>
	}
	
	DF_ContinuousReadEnable(0, 0);
    33fa:	60 e0       	ldi	r22, 0x00	; 0
    33fc:	70 e0       	ldi	r23, 0x00	; 0
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	0e 94 8d 0a 	call	0x151a	; 0x151a <DF_ContinuousReadEnable>
	DFPos = 0;
    3406:	10 92 b2 02 	sts	0x02B2, r1
    340a:	10 92 b3 02 	sts	0x02B3, r1
    340e:	10 92 b4 02 	sts	0x02B4, r1
    3412:	10 92 b5 02 	sts	0x02B5, r1
	
	if (TagExists == FALSE)
    3416:	80 91 b1 02 	lds	r24, 0x02B1
    341a:	88 23       	and	r24, r24
    341c:	49 f4       	brne	.+18     	; 0x3430 <TM_FindNextTag+0x11e>
	{
		MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);  // Green = ready
    341e:	81 b3       	in	r24, 0x11	; 17
    3420:	8f 7c       	andi	r24, 0xCF	; 207
    3422:	80 61       	ori	r24, 0x10	; 16
    3424:	81 bb       	out	0x11, r24	; 17
		MAIN_ShowError(PSTR("NO TAGS"));
    3426:	8e e5       	ldi	r24, 0x5E	; 94
    3428:	94 e0       	ldi	r25, 0x04	; 4
    342a:	0e 94 c3 03 	call	0x786	; 0x786 <MAIN_ShowError>
    342e:	02 c0       	rjmp	.+4      	; 0x3434 <TM_FindNextTag+0x122>
	}
	else
	{
		/* The following line _is_ recursion, but the function will only ever call itself
		   a maximum of one time. The function will call itself upon skipping from the last
		   tag stored in the program data to the first; to guard against infinite recursion
		   if no tags are present, the system will error out if the TagExists flag is empty
		   after a full data read. Once a tag has been read and displayed onto the LCD, the
           function returns to the main tag handling routine.                               */
		TM_FindNextTag();
    3430:	0e 94 89 19 	call	0x3312	; 0x3312 <TM_FindNextTag>
    3434:	69 96       	adiw	r28, 0x19	; 25
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	df 91       	pop	r29
    3442:	cf 91       	pop	r28
    3444:	1f 91       	pop	r17
    3446:	0f 91       	pop	r16
    3448:	ff 90       	pop	r15
    344a:	ef 90       	pop	r14
    344c:	df 90       	pop	r13
    344e:	cf 90       	pop	r12
    3450:	08 95       	ret

00003452 <TM_ShowTags>:
    3452:	60 e0       	ldi	r22, 0x00	; 0
    3454:	70 e0       	ldi	r23, 0x00	; 0
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	0e 94 8d 0a 	call	0x151a	; 0x151a <DF_ContinuousReadEnable>
    345e:	10 92 b1 02 	sts	0x02B1, r1
    3462:	10 92 b2 02 	sts	0x02B2, r1
    3466:	10 92 b3 02 	sts	0x02B3, r1
    346a:	10 92 b4 02 	sts	0x02B4, r1
    346e:	10 92 b5 02 	sts	0x02B5, r1
    3472:	0e 94 89 19 	call	0x3312	; 0x3312 <TM_FindNextTag>
    3476:	80 91 b1 02 	lds	r24, 0x02B1
    347a:	88 23       	and	r24, r24
    347c:	71 f0       	breq	.+28     	; 0x349a <TM_ShowTags+0x48>
    347e:	8e b3       	in	r24, 0x1e	; 30
    3480:	88 23       	and	r24, r24
    3482:	e9 f3       	breq	.-6      	; 0x347e <TM_ShowTags+0x2c>
    3484:	f7 9b       	sbis	0x1e, 7	; 30
    3486:	03 c0       	rjmp	.+6      	; 0x348e <TM_ShowTags+0x3c>
    3488:	0e 94 89 19 	call	0x3312	; 0x3312 <TM_FindNextTag>
    348c:	02 c0       	rjmp	.+4      	; 0x3492 <TM_ShowTags+0x40>
    348e:	f2 99       	sbic	0x1e, 2	; 30
    3490:	03 c0       	rjmp	.+6      	; 0x3498 <TM_ShowTags+0x46>
    3492:	0e 94 8d 02 	call	0x51a	; 0x51a <MAIN_WaitForJoyRelease>
    3496:	f3 cf       	rjmp	.-26     	; 0x347e <TM_ShowTags+0x2c>
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <DF_EnableDataflash>
    349e:	08 95       	ret

000034a0 <__vector_2>:
.global PCINT0_vect             ; Pin change 0 (joystick)
.global PCINT1_vect             ; Pin change 1 (joystick)

PCINT0_vect:
  jmp PCINT1_vect
    34a0:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_3>

000034a4 <__vector_10>:

.global TIMER0_COMP_vect             ; Timer 0 compare

TIMER0_COMP_vect:
  push r24
    34a4:	8f 93       	push	r24
  ldi r24, (USI_CONTROL_REG_FLAGS | (1<<USITC))
    34a6:	8b e5       	ldi	r24, 0x5B	; 91
  sts _SFR_MEM_ADDR(USICR), r24
    34a8:	80 93 b8 00 	sts	0x00B8, r24
  pop r24
    34ac:	8f 91       	pop	r24
  reti
    34ae:	18 95       	reti

000034b0 <strcpy_P>:
    34b0:	fb 01       	movw	r30, r22
    34b2:	dc 01       	movw	r26, r24
    34b4:	05 90       	lpm	r0, Z+
    34b6:	0d 92       	st	X+, r0
    34b8:	00 20       	and	r0, r0
    34ba:	e1 f7       	brne	.-8      	; 0x34b4 <strcpy_P+0x4>
    34bc:	08 95       	ret

000034be <ultoa>:
    34be:	fa 01       	movw	r30, r20
    34c0:	cf 93       	push	r28
    34c2:	ff 93       	push	r31
    34c4:	ef 93       	push	r30
    34c6:	22 30       	cpi	r18, 0x02	; 2
    34c8:	cc f0       	brlt	.+50     	; 0x34fc <ultoa+0x3e>
    34ca:	25 32       	cpi	r18, 0x25	; 37
    34cc:	bc f4       	brge	.+46     	; 0x34fc <ultoa+0x3e>
    34ce:	c2 2f       	mov	r28, r18
    34d0:	2c 2f       	mov	r18, r28
    34d2:	33 27       	eor	r19, r19
    34d4:	44 27       	eor	r20, r20
    34d6:	55 27       	eor	r21, r21
    34d8:	ff 93       	push	r31
    34da:	ef 93       	push	r30
    34dc:	0e 94 bc 1a 	call	0x3578	; 0x3578 <__udivmodsi4>
    34e0:	ef 91       	pop	r30
    34e2:	ff 91       	pop	r31
    34e4:	60 5d       	subi	r22, 0xD0	; 208
    34e6:	6a 33       	cpi	r22, 0x3A	; 58
    34e8:	0c f0       	brlt	.+2      	; 0x34ec <ultoa+0x2e>
    34ea:	69 5d       	subi	r22, 0xD9	; 217
    34ec:	61 93       	st	Z+, r22
    34ee:	b9 01       	movw	r22, r18
    34f0:	ca 01       	movw	r24, r20
    34f2:	60 50       	subi	r22, 0x00	; 0
    34f4:	70 40       	sbci	r23, 0x00	; 0
    34f6:	80 40       	sbci	r24, 0x00	; 0
    34f8:	90 40       	sbci	r25, 0x00	; 0
    34fa:	51 f7       	brne	.-44     	; 0x34d0 <ultoa+0x12>
    34fc:	10 82       	st	Z, r1
    34fe:	8f 91       	pop	r24
    3500:	9f 91       	pop	r25
    3502:	cf 91       	pop	r28
    3504:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <strrev>

00003508 <strrev>:
    3508:	dc 01       	movw	r26, r24
    350a:	fc 01       	movw	r30, r24
    350c:	01 90       	ld	r0, Z+
    350e:	00 20       	and	r0, r0
    3510:	e9 f7       	brne	.-6      	; 0x350c <strrev+0x4>
    3512:	32 97       	sbiw	r30, 0x02	; 2
    3514:	ae 17       	cp	r26, r30
    3516:	bf 07       	cpc	r27, r31
    3518:	30 f4       	brcc	.+12     	; 0x3526 <strrev+0x1e>
    351a:	7c 91       	ld	r23, X
    351c:	60 81       	ld	r22, Z
    351e:	70 83       	st	Z, r23
    3520:	31 97       	sbiw	r30, 0x01	; 1
    3522:	6d 93       	st	X+, r22
    3524:	f7 cf       	rjmp	.-18     	; 0x3514 <strrev+0xc>
    3526:	08 95       	ret

00003528 <__eeprom_read_byte_1F2021>:
    3528:	f9 99       	sbic	0x1f, 1	; 31
    352a:	fe cf       	rjmp	.-4      	; 0x3528 <__eeprom_read_byte_1F2021>
    352c:	b2 bd       	out	0x22, r27	; 34
    352e:	a1 bd       	out	0x21, r26	; 33
    3530:	f8 9a       	sbi	0x1f, 0	; 31
    3532:	11 96       	adiw	r26, 0x01	; 1
    3534:	00 b4       	in	r0, 0x20	; 32
    3536:	08 95       	ret

00003538 <__eeprom_read_block_1F2021>:
    3538:	f7 df       	rcall	.-18     	; 0x3528 <__eeprom_read_byte_1F2021>
    353a:	01 92       	st	Z+, r0
    353c:	1a 94       	dec	r1
    353e:	e1 f7       	brne	.-8      	; 0x3538 <__eeprom_read_block_1F2021>
    3540:	08 95       	ret

00003542 <__eeprom_read_word_1F2021>:
    3542:	f2 df       	rcall	.-28     	; 0x3528 <__eeprom_read_byte_1F2021>
    3544:	e0 2d       	mov	r30, r0
    3546:	f0 df       	rcall	.-32     	; 0x3528 <__eeprom_read_byte_1F2021>
    3548:	f0 2d       	mov	r31, r0
    354a:	08 95       	ret

0000354c <__eeprom_write_byte_1F2021>:
    354c:	f9 99       	sbic	0x1f, 1	; 31
    354e:	fe cf       	rjmp	.-4      	; 0x354c <__eeprom_write_byte_1F2021>
    3550:	b2 bd       	out	0x22, r27	; 34
    3552:	a1 bd       	out	0x21, r26	; 33
    3554:	00 bc       	out	0x20, r0	; 32
    3556:	11 96       	adiw	r26, 0x01	; 1
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	f8 94       	cli
    355c:	fa 9a       	sbi	0x1f, 2	; 31
    355e:	f9 9a       	sbi	0x1f, 1	; 31
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	08 95       	ret

00003564 <__eeprom_write_word_1F2021>:
    3564:	f3 df       	rcall	.-26     	; 0x354c <__eeprom_write_byte_1F2021>
    3566:	01 2c       	mov	r0, r1
    3568:	f1 df       	rcall	.-30     	; 0x354c <__eeprom_write_byte_1F2021>
    356a:	11 24       	eor	r1, r1
    356c:	08 95       	ret

0000356e <__eeprom_write_block_1F2021>:
    356e:	01 90       	ld	r0, Z+
    3570:	ed df       	rcall	.-38     	; 0x354c <__eeprom_write_byte_1F2021>
    3572:	1a 94       	dec	r1
    3574:	e1 f7       	brne	.-8      	; 0x356e <__eeprom_write_block_1F2021>
    3576:	08 95       	ret

00003578 <__udivmodsi4>:
    3578:	a1 e2       	ldi	r26, 0x21	; 33
    357a:	1a 2e       	mov	r1, r26
    357c:	aa 1b       	sub	r26, r26
    357e:	bb 1b       	sub	r27, r27
    3580:	fd 01       	movw	r30, r26
    3582:	0d c0       	rjmp	.+26     	; 0x359e <__udivmodsi4_ep>

00003584 <__udivmodsi4_loop>:
    3584:	aa 1f       	adc	r26, r26
    3586:	bb 1f       	adc	r27, r27
    3588:	ee 1f       	adc	r30, r30
    358a:	ff 1f       	adc	r31, r31
    358c:	a2 17       	cp	r26, r18
    358e:	b3 07       	cpc	r27, r19
    3590:	e4 07       	cpc	r30, r20
    3592:	f5 07       	cpc	r31, r21
    3594:	20 f0       	brcs	.+8      	; 0x359e <__udivmodsi4_ep>
    3596:	a2 1b       	sub	r26, r18
    3598:	b3 0b       	sbc	r27, r19
    359a:	e4 0b       	sbc	r30, r20
    359c:	f5 0b       	sbc	r31, r21

0000359e <__udivmodsi4_ep>:
    359e:	66 1f       	adc	r22, r22
    35a0:	77 1f       	adc	r23, r23
    35a2:	88 1f       	adc	r24, r24
    35a4:	99 1f       	adc	r25, r25
    35a6:	1a 94       	dec	r1
    35a8:	69 f7       	brne	.-38     	; 0x3584 <__udivmodsi4_loop>
    35aa:	60 95       	com	r22
    35ac:	70 95       	com	r23
    35ae:	80 95       	com	r24
    35b0:	90 95       	com	r25
    35b2:	9b 01       	movw	r18, r22
    35b4:	ac 01       	movw	r20, r24
    35b6:	bd 01       	movw	r22, r26
    35b8:	cf 01       	movw	r24, r30
    35ba:	08 95       	ret

000035bc <_exit>:
    35bc:	ff cf       	rjmp	.-2      	; 0x35bc <_exit>
