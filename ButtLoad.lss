
ButtLoad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00003348  000033fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003348  00000000  00000000  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b0  00800104  00800104  00003400  2**0
                  ALLOC
  3 .noinit       00000000  008002b4  008002b4  00003487  2**0
                  CONTENTS
  4 .eeprom       00000087  00810000  00810000  00003400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .stab         00000084  00000000  00000000  00003488  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000078  00000000  00000000  0000350c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 0000012c  00000000  00000000  00003584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000dcd  00000000  00000000  000036b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003ff2  00000000  00000000  0000447d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001010  00000000  00000000  0000846f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000032a6  00000000  00000000  0000947f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000010fa  00000000  00000000  0000c725  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 01 	jmp	0x3fa <__init>
       4:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
       8:	0c 94 f7 18 	jmp	0x31ee <__vector_2>
       c:	0c 94 7b 03 	jmp	0x6f6 <__vector_3>
      10:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      14:	0c 94 fc 06 	jmp	0xdf8 <__vector_5>
      18:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      1c:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      20:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      24:	0c 94 0f 0b 	jmp	0x161e <__vector_9>
      28:	0c 94 f9 18 	jmp	0x31f2 <__vector_10>
      2c:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      30:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      34:	0c 94 5e 08 	jmp	0x10bc <__vector_13>
      38:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      3c:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      40:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      44:	0c 94 a3 08 	jmp	0x1146 <__vector_17>
      48:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      4c:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      50:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      54:	0c 94 18 02 	jmp	0x430 <__bad_interrupt>
      58:	0c 94 b9 07 	jmp	0xf72 <__vector_22>

0000005c <SIFOOptionPtrs>:
      5c:	6f 00 60 00                                         o.`.

00000060 <SIFO_Tags>:
      60:	56 49 45 57 20 44 41 54 41 20 54 41 47 53 00        VIEW DATA TAGS.

0000006f <SIFO_Size>:
      6f:	53 54 4f 52 41 47 45 20 53 49 5a 45 53 00           STORAGE SIZES.

0000007d <USIPSNamePtrs>:
      7d:	a3 00 99 00 8f 00 85 00                             ........

00000085 <USI_Speed3>:
      85:	32 31 30 36 35 31 20 48 5a 00                       210651 HZ.

0000008f <USI_Speed2>:
      8f:	31 31 33 34 32 37 20 48 5a 00                       113427 HZ.

00000099 <USI_Speed1>:
      99:	20 38 36 37 33 38 20 48 5a 00                        86738 HZ.

000000a3 <USI_Speed0>:
      a3:	20 35 37 31 35 33 20 48 5a 00                        57153 HZ.

000000ad <ProgOptions>:
      ad:	16 01 0a 01 fa 00 ea 00 da 00 c6 00 bb 00           ..............

000000bb <PRG_C>:
      bb:	45 52 41 53 45 20 4f 4e 4c 59 00                    ERASE ONLY.

000000c6 <PRG_FL>:
      c6:	46 55 53 45 20 41 4e 44 20 4c 4f 43 4b 20 42 59     FUSE AND LOCK BY
      d6:	54 45 53 00                                         TES.

000000da <PRG_L>:
      da:	4c 4f 43 4b 20 42 59 54 45 53 20 4f 4e 4c 59 00     LOCK BYTES ONLY.

000000ea <PRG_F>:
      ea:	46 55 53 45 20 42 59 54 45 53 20 4f 4e 4c 59 00     FUSE BYTES ONLY.

000000fa <PRG_DE>:
      fa:	44 41 54 41 20 41 4e 44 20 45 45 50 52 4f 4d 00     DATA AND EEPROM.

0000010a <PRG_E>:
     10a:	45 45 50 52 4f 4d 20 4f 4e 4c 59 00                 EEPROM ONLY.

00000116 <PRG_D>:
     116:	44 41 54 41 20 4f 4e 4c 59 00                       DATA ONLY.

00000120 <SettingFunctionPtrs>:
     120:	94 05 e7 05 59 05 8d 06                             ....Y...

00000128 <SettingFunctionNames>:
     128:	5e 01 50 01 43 01 30 01                             ^.P.C.0.

00000130 <SFunc_GOBOOTLOADER>:
     130:	4a 55 4d 50 20 54 4f 20 42 4f 4f 54 4c 4f 41 44     JUMP TO BOOTLOAD
     140:	45 52 00                                            ER.

00000143 <SFunc_CLEARMEM>:
     143:	43 4c 45 41 52 20 4d 45 4d 4f 52 59 00              CLEAR MEMORY.

00000150 <SFunc_SETSPISPEED>:
     150:	53 45 54 20 53 50 49 20 53 50 45 45 44 00           SET SPI SPEED.

0000015e <SFunc_SETCONTRAST>:
     15e:	53 45 54 20 43 4f 4e 54 52 41 53 54 00              SET CONTRAST.

0000016b <MainFunctionPtrs>:
     16b:	cc 03 33 05 fe 03 d9 03 35 06 97 03 21 06           ..3.....5...!.

00000179 <MainFunctionNames>:
     179:	d5 01 ca 01 be 01 aa 01 9b 01 92 01 87 01           ..............

00000187 <Func_SLEEP>:
     187:	53 4c 45 45 50 20 4d 4f 44 45 00                    SLEEP MODE.

00000192 <Func_SETTINGS>:
     192:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

0000019b <Func_PRGMSTOREINFO>:
     19b:	44 41 54 41 53 54 4f 52 45 20 49 4e 46 4f 00        DATASTORE INFO.

000001aa <Func_PRGMDATAFLASH>:
     1aa:	44 41 54 41 46 4c 41 53 48 20 50 52 47 4d 20 4d     DATAFLASH PRGM M
     1ba:	4f 44 45 00                                         ODE.

000001be <Func_PRGMAVR>:
     1be:	50 52 4f 47 52 41 4d 20 41 56 52 00                 PROGRAM AVR.

000001ca <Func_STOREPRGM>:
     1ca:	53 54 4f 52 45 20 50 52 47 4d 00                    STORE PRGM.

000001d5 <Func_ISPPRGM>:
     1d5:	41 56 52 49 53 50 20 4d 4f 44 45 00                 AVRISP MODE.

000001e1 <AboutTextPtrs>:
     1e1:	0c 02 07 02 f8 01 e9 01                             ........

000001e9 <CopyRight>:
     1e9:	3c 43 3e 20 32 30 30 36 20 2d 20 47 50 4c 00        <C> 2006 - GPL.

000001f8 <AuthorName>:
     1f8:	42 59 20 44 45 41 4e 20 43 41 4d 45 52 41 00        BY DEAN CAMERA.

00000207 <VersionInfo>:
     207:	56 31 2d 33 00                                      V1-3.

0000020c <ProgrammerName>:
     20c:	42 55 54 54 4c 4f 41 44 00                          BUTTLOAD.

00000215 <WaitText>:
     215:	2a 57 41 49 54 2a 00                                *WAIT*.

0000021c <BUTTTAG_Author>:
     21c:	40 28 23 29 42 59 20 44 45 41 4e 20 43 41 4d 45     @(#)BY DEAN CAME
     22c:	52 41 00                                            RA.

0000022f <BUTTTAG_Name>:
     22f:	40 28 23 29 42 55 54 54 4c 4f 41 44 20 41 56 52     @(#)BUTTLOAD AVR
     23f:	49 53 50 00                                         ISP.

00000243 <__c.14>:
     243:	50 52 47 3e 20 00                                   PRG> .

00000249 <__c.13>:
     249:	42 41 44 49 53 52 00                                BADISR.

00000250 <__c.6>:
     250:	4e 4f 20 45 52 41 53 45 20 43 4d 44 00              NO ERASE CMD.

0000025d <__c.7>:
     25d:	4e 4f 20 44 41 54 41 00                             NO DATA.

00000265 <__c.8>:
     265:	4e 4f 20 45 45 50 52 4f 4d 00                       NO EEPROM.

0000026f <__c.9>:
     26f:	4e 4f 20 46 55 53 45 20 42 59 54 45 53 00           NO FUSE BYTES.

0000027d <__c.10>:
     27d:	4e 4f 20 4c 4f 43 4b 20 42 59 54 45 53 00           NO LOCK BYTES.

0000028b <__c.11>:
     28b:	50 52 4f 47 52 41 4d 4d 49 4e 47 20 44 4f 4e 45     PROGRAMMING DONE
	...

0000029c <__c.12>:
     29c:	46 41 49 4c 45 44 00                                FAILED.

000002a3 <__c.5>:
     2a3:	2a 53 54 4f 52 41 47 45 20 4d 4f 44 45 2a 00        *STORAGE MODE*.

000002b2 <__c.2>:
     2b2:	43 4f 4e 46 49 52 4d 00                             CONFIRM.

000002ba <__c.3>:
     2ba:	3c 4e 20 59 3e 00                                   <N Y>.

000002c0 <__c.4>:
     2c0:	4d 45 4d 20 43 4c 45 41 52 45 44 00                 MEM CLEARED.

000002cc <__c.1>:
     2cc:	4e 4f 20 53 54 4f 52 45 44 20 50 52 47 4d 00        NO STORED PRGM.

000002db <__c.0>:
     2db:	2a 4a 54 41 47 20 4f 4e 2a 00                       *JTAG ON*.

000002e5 <LCD_SegTable>:
     2e5:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
     2f5:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
     305:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
     315:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
     325:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
     335:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
     345:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

00000351 <USIPSValues>:
     351:	03 80 02 54 01 40 00 22                             ...T.@."

00000359 <DataFlashError>:
     359:	44 41 54 41 46 4c 41 53 48 20 45 52 52 4f 52 00     DATAFLASH ERROR.

00000369 <DF_Pages>:
     369:	00 01 00 02 00 04 00 08 00 10 00 10 00 20 00 20     ............. . 

00000379 <DF_PageSize>:
     379:	08 01 08 01 08 01 08 01 08 01 10 02 10 02 20 04     .............. .

00000389 <DF_PageBits>:
     389:	09 09 09 09 09 0a 0a 0b                             ........

00000391 <__c.0>:
     391:	42 55 46 46 20 4f 56 45 52 46 4c 4f 57 00           BUFF OVERFLOW.

0000039f <DataFlashProgMode>:
     39f:	2a 44 41 54 41 46 4c 41 53 48 20 4d 4f 44 45 2a     *DATAFLASH MODE*
	...

000003b0 <SignonResponse>:
     3b0:	01 00 08 41 56 52 49 53 50 5f 32                    ...AVRISP_2

000003bb <VersionData>:
     3bb:	02 02 04                                            ...

000003be <SyncErrorMessage>:
     3be:	53 59 4e 43 20 45 52 52 4f 52 00                    SYNC ERROR.

000003c9 <AVRISPModeMessage>:
     3c9:	2a 41 54 41 56 52 49 53 50 20 4d 4f 44 45 2a 00     *ATAVRISP MODE*.

000003d9 <__c.0>:
     3d9:	44 41 54 41 2d 00                                   DATA-.

000003df <__c.1>:
     3df:	45 50 52 4d 2d 00                                   EPRM-.

000003e5 <__c.2>:
     3e5:	46 55 53 45 2d 00                                   FUSE-.

000003eb <__c.3>:
     3eb:	4c 4f 43 4b 2d 00                                   LOCK-.

000003f1 <__c.0>:
     3f1:	4e 4f 20 54 41 47 53 00 00                          NO TAGS..

000003fa <__init>:
     3fa:	11 24       	eor	r1, r1
     3fc:	1f be       	out	0x3f, r1	; 63
     3fe:	cf ef       	ldi	r28, 0xFF	; 255
     400:	d4 e0       	ldi	r29, 0x04	; 4
     402:	de bf       	out	0x3e, r29	; 62
     404:	cd bf       	out	0x3d, r28	; 61

00000406 <__do_copy_data>:
     406:	11 e0       	ldi	r17, 0x01	; 1
     408:	a0 e0       	ldi	r26, 0x00	; 0
     40a:	b1 e0       	ldi	r27, 0x01	; 1
     40c:	e8 e4       	ldi	r30, 0x48	; 72
     40e:	f3 e3       	ldi	r31, 0x33	; 51
     410:	02 c0       	rjmp	.+4      	; 0x416 <.do_copy_data_start>

00000412 <.do_copy_data_loop>:
     412:	05 90       	lpm	r0, Z+
     414:	0d 92       	st	X+, r0

00000416 <.do_copy_data_start>:
     416:	a4 30       	cpi	r26, 0x04	; 4
     418:	b1 07       	cpc	r27, r17
     41a:	d9 f7       	brne	.-10     	; 0x412 <.do_copy_data_loop>

0000041c <__do_clear_bss>:
     41c:	12 e0       	ldi	r17, 0x02	; 2
     41e:	a4 e0       	ldi	r26, 0x04	; 4
     420:	b1 e0       	ldi	r27, 0x01	; 1
     422:	01 c0       	rjmp	.+2      	; 0x426 <.do_clear_bss_start>

00000424 <.do_clear_bss_loop>:
     424:	1d 92       	st	X+, r1

00000426 <.do_clear_bss_start>:
     426:	a4 3b       	cpi	r26, 0xB4	; 180
     428:	b1 07       	cpc	r27, r17
     42a:	e1 f7       	brne	.-8      	; 0x424 <.do_clear_bss_loop>
     42c:	0c 94 5e 02 	jmp	0x4bc <main>

00000430 <__bad_interrupt>:
     430:	0c 94 92 03 	jmp	0x724 <__vector_default>

00000434 <MAIN_Delay10MS>:

// ======================================================================================

void MAIN_Delay10MS(uint8_t loops)
{
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     438:	28 2f       	mov	r18, r24
     43a:	21 50       	subi	r18, 0x01	; 1
     43c:	2f 3f       	cpi	r18, 0xFF	; 255
     43e:	49 f0       	breq	.+18     	; 0x452 <MAIN_Delay10MS+0x1e>
     440:	a0 e0       	ldi	r26, 0x00	; 0
     442:	b8 e4       	ldi	r27, 0x48	; 72
     444:	c0 e0       	ldi	r28, 0x00	; 0
     446:	d0 e0       	ldi	r29, 0x00	; 0
     448:	cd 01       	movw	r24, r26
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <MAIN_Delay10MS+0x16>
     44e:	21 50       	subi	r18, 0x01	; 1
     450:	d8 f7       	brcc	.-10     	; 0x448 <MAIN_Delay10MS+0x14>
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <MAIN_WaitForJoyRelease>:
  /* Prevents the use of floating point libraries. Delaying in groups of
     10ms increases accuracy by reducing the time overhead for each loop
     interation of the while.                                            */

	while (loops--)
	  _delay_ms(10);
}

void MAIN_Delay1MS(uint8_t loops)
{
  /* Prevents the use of floating point libraries. Less accurate than the
     Delay10MS routine, but nessesary for many commands. The overhead required
     to call the routine is substantially less than the overhead required to
     calculate the float at compile time, so this actually saves execution time. */

	while (loops--)
	  _delay_ms(1);
}

void MAIN_ResetCSLine(uint8_t ActiveInactive)
{
  /* ActiveInactive controls the /Reset line to an AVR device or external dataflash
     /CS line. If the reset polarity parameter is a 0 then interfacing with AT89
	 devices which has an active high reset. Pins are tristated when inactive.      */
	
	switch (ActiveInactive)
	{
		case MAIN_RESETCS_ACTIVE:   // The target RESET line may be either active high or low.
			DDRF |= (1 << 6);
		
			if (!(eeprom_read_byte(&EEPROMVars.ResetPolarity))) // Translate to correct logic level for target device type
			  PORTF |=  (1 << 6);
			else
			  PORTF &= ~(1 << 6);
		
			break;
		case MAIN_RESETCS_EXTDFACTIVE: // Dataflashes are always active low.
			DDRF  |=  (1 << 6);
			PORTF &= ~(1 << 6);
			
			break;
		case MAIN_RESETCS_INACTIVE: // Both modes tristate the pins when inactive.
			DDRF  &= ~(1 << 6);
			PORTF &= ~(1 << 6);
	}
}

void MAIN_WaitForJoyRelease(void)
{
	while (1)
	{
		while (JoyStatus) {};                   // Wait until joystick released
     458:	8e b3       	in	r24, 0x1e	; 30
     45a:	88 23       	and	r24, r24
     45c:	e9 f7       	brne	.-6      	; 0x458 <MAIN_WaitForJoyRelease>

		MAIN_Delay10MS(1);
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	0e 94 1a 02 	call	0x434 <MAIN_Delay10MS>

		if (!(JoyStatus))                       // Joystick still released (not bouncing), return
     464:	8e b3       	in	r24, 0x1e	; 30
     466:	88 23       	and	r24, r24
     468:	b9 f7       	brne	.-18     	; 0x458 <MAIN_WaitForJoyRelease>
     46a:	08 95       	ret

0000046c <FUNCShowAbout>:
		  return;
	}
}

void MAIN_IntToStr(uint16_t IntV, uint8_t* Buff)
{
	// Shows leading zeros, unlike itoa.

	uint8_t Temp = 0;
	
	while (IntV >= 100)
	{
		Temp++;
		IntV -= 100;
	}

	*(Buff++) = '0' + Temp;
	
	Temp = 0;
	
	while (IntV >= 10)
	{
		Temp++;
		IntV -= 10;
	}
		
	*(Buff++) = '0' + Temp;
	*(Buff++) = '0' + IntV;
	*(Buff)   = '\0';
}

void MAIN_ShowProgType(uint8_t Letter)
{
	uint8_t ProgTypeBuffer[7];

	strcpy_P(ProgTypeBuffer, PSTR("PRG> "));
	ProgTypeBuffer[5] = Letter;
	ProgTypeBuffer[6] = '\0';
	
	LCD_puts(ProgTypeBuffer);
}

void MAIN_ShowError(const uint8_t *pFlashStr)
{
	uint8_t ErrorBuff[LCD_TEXTBUFFER_SIZE];       // New buffer, LCD text buffer size
	
	ErrorBuff[0] = 'E';
	ErrorBuff[1] = '>';

	strcpy_P(&ErrorBuff[2], pFlashStr);       // WARNING: If error text is larger than (TEXTBUFFER_SIZE - 2),
	                                          // this will overflow the buffer and probably crash the micro!
	LCD_puts(ErrorBuff);
	
	MAIN_WaitForJoyRelease();
	while (!(JoyStatus & JOY_PRESS)) {};
	MAIN_WaitForJoyRelease();
}

// ======================================================================================

ISR(PCINT1_vect, ISR_NOBLOCK)                 // Joystick routine; PCINT0_vect is bound to this also via JoystickInterrupt.S
{
	JoyStatus = (~PINB & JOY_BMASK)
	          | (~PINE & JOY_EMASK);
}

ISR(BADISR_vect, ISR_NAKED)                   // Bad ISR routine; should never be called, here for safety
{
	MAIN_ShowError(PSTR("BADISR"));
	while (1) {};
}

// ======================================================================================

void FUNCChangeSettings(void)
{
	uint8_t CurrSFunc = 0;
	
	JoyStatus = 1;

	while (1)
	{
		if (JoyStatus)                         // Joystick is in the non-center position
		{
			if (JoyStatus & JOY_UP)            // Previous function
			  (CurrSFunc == 0)? CurrSFunc = 3 : CurrSFunc--;
			else if (JoyStatus & JOY_DOWN)     // Next function
			  (CurrSFunc == 3)? CurrSFunc = 0 : CurrSFunc++;
			else if (JoyStatus & JOY_PRESS)    // Select current function
			  ((FuncPtr)pgm_read_word(&SettingFunctionPtrs[CurrSFunc]))(); // Run associated function
			else if (JoyStatus & JOY_LEFT)
			  return;
		
			// Show current function onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&SettingFunctionNames[CurrSFunc]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCShowAbout(void)
{
     46c:	cf 93       	push	r28
	uint8_t InfoNum = 0;
     46e:	c0 e0       	ldi	r28, 0x00	; 0
	
	JoyStatus = 1;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	8e bb       	out	0x1e, r24	; 30
			
	while (1)
	{
		if (JoyStatus)
     474:	8e b3       	in	r24, 0x1e	; 30
     476:	88 23       	and	r24, r24
     478:	e9 f3       	breq	.-6      	; 0x474 <FUNCShowAbout+0x8>
		{
			if (JoyStatus & JOY_UP)
     47a:	f6 9b       	sbis	0x1e, 6	; 30
     47c:	06 c0       	rjmp	.+12     	; 0x48a <FUNCShowAbout+0x1e>
			  (InfoNum == 0)? InfoNum = 3 : InfoNum--;
     47e:	cc 23       	and	r28, r28
     480:	11 f4       	brne	.+4      	; 0x486 <FUNCShowAbout+0x1a>
     482:	c3 e0       	ldi	r28, 0x03	; 3
     484:	0c c0       	rjmp	.+24     	; 0x49e <FUNCShowAbout+0x32>
     486:	c1 50       	subi	r28, 0x01	; 1
     488:	0a c0       	rjmp	.+20     	; 0x49e <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_DOWN)
     48a:	f7 9b       	sbis	0x1e, 7	; 30
     48c:	06 c0       	rjmp	.+12     	; 0x49a <FUNCShowAbout+0x2e>
			  (InfoNum == 3)? InfoNum = 0 : InfoNum++;
     48e:	c3 30       	cpi	r28, 0x03	; 3
     490:	11 f4       	brne	.+4      	; 0x496 <FUNCShowAbout+0x2a>
     492:	c0 e0       	ldi	r28, 0x00	; 0
     494:	04 c0       	rjmp	.+8      	; 0x49e <FUNCShowAbout+0x32>
     496:	cf 5f       	subi	r28, 0xFF	; 255
     498:	02 c0       	rjmp	.+4      	; 0x49e <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_LEFT)
     49a:	f2 99       	sbic	0x1e, 2	; 30
     49c:	0d c0       	rjmp	.+26     	; 0x4b8 <FUNCShowAbout+0x4c>
			  return;

			LCD_puts_f((uint8_t*)pgm_read_word(&AboutTextPtrs[InfoNum]));
     49e:	ec 2f       	mov	r30, r28
     4a0:	ff 27       	eor	r31, r31
     4a2:	ee 0f       	add	r30, r30
     4a4:	ff 1f       	adc	r31, r31
     4a6:	ef 51       	subi	r30, 0x1F	; 31
     4a8:	fe 4f       	sbci	r31, 0xFE	; 254
     4aa:	85 91       	lpm	r24, Z+
     4ac:	94 91       	lpm	r25, Z
     4ae:	0e 94 70 07 	call	0xee0 <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     4b2:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     4b6:	de cf       	rjmp	.-68     	; 0x474 <FUNCShowAbout+0x8>
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <main>:
     4bc:	cf ef       	ldi	r28, 0xFF	; 255
     4be:	d4 e0       	ldi	r29, 0x04	; 4
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	cd bf       	out	0x3d, r28	; 61
     4c4:	c0 e0       	ldi	r28, 0x00	; 0
     4c6:	80 e8       	ldi	r24, 0x80	; 128
     4c8:	85 bf       	out	0x35, r24	; 53
     4ca:	85 bf       	out	0x35, r24	; 53
     4cc:	80 bf       	out	0x30, r24	; 48
     4ce:	85 e0       	ldi	r24, 0x05	; 5
     4d0:	80 93 64 00 	sts	0x0064, r24
     4d4:	80 e3       	ldi	r24, 0x30	; 48
     4d6:	80 bb       	out	0x10, r24	; 16
     4d8:	87 e2       	ldi	r24, 0x27	; 39
     4da:	84 b9       	out	0x04, r24	; 4
     4dc:	8f ed       	ldi	r24, 0xDF	; 223
     4de:	85 b9       	out	0x05, r24	; 5
     4e0:	8c e0       	ldi	r24, 0x0C	; 12
     4e2:	8e b9       	out	0x0e, r24	; 14
     4e4:	80 93 6b 00 	sts	0x006B, r24
     4e8:	80 ed       	ldi	r24, 0xD0	; 208
     4ea:	80 93 6c 00 	sts	0x006C, r24
     4ee:	80 ec       	ldi	r24, 0xC0	; 192
     4f0:	8d bb       	out	0x1d, r24	; 29
     4f2:	8c bb       	out	0x1c, r24	; 28
     4f4:	81 b3       	in	r24, 0x11	; 17
     4f6:	8f 7c       	andi	r24, 0xCF	; 207
     4f8:	80 62       	ori	r24, 0x20	; 32
     4fa:	81 bb       	out	0x11, r24	; 17
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     4fc:	26 e8       	ldi	r18, 0x86	; 134
     4fe:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t result;
  asm volatile
     500:	d9 01       	movw	r26, r18
     502:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
     506:	80 2d       	mov	r24, r0
     508:	8a 37       	cpi	r24, 0x7A	; 122
     50a:	89 f0       	breq	.+34     	; 0x52e <__stack+0x2f>
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	4f ef       	ldi	r20, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     512:	dc 01       	movw	r26, r24
     514:	04 2e       	mov	r0, r20
     516:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	52 e0       	ldi	r21, 0x02	; 2
     51e:	80 30       	cpi	r24, 0x00	; 0
     520:	95 07       	cpc	r25, r21
     522:	b8 f3       	brcs	.-18     	; 0x512 <__stack+0x13>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
     524:	8a e7       	ldi	r24, 0x7A	; 122
  asm volatile (
     526:	d9 01       	movw	r26, r18
     528:	08 2e       	mov	r0, r24
     52a:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
     52e:	0e 94 1d 07 	call	0xe3a <LCD_Init>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     532:	a5 e8       	ldi	r26, 0x85	; 133
     534:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     536:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
     53a:	80 2d       	mov	r24, r0
     53c:	8f 70       	andi	r24, 0x0F	; 15
     53e:	80 93 e7 00 	sts	0x00E7, r24
     542:	78 94       	sei
     544:	85 e1       	ldi	r24, 0x15	; 21
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
     552:	81 b3       	in	r24, 0x11	; 17
     554:	80 63       	ori	r24, 0x30	; 48
     556:	81 bb       	out	0x11, r24	; 17
     558:	0e 94 2a 08 	call	0x1054 <USART_Init>
     55c:	0e 94 9b 06 	call	0xd36 <OSCCAL_Calibrate>
     560:	81 b3       	in	r24, 0x11	; 17
     562:	8f 7c       	andi	r24, 0xCF	; 207
     564:	80 61       	ori	r24, 0x10	; 16
     566:	81 bb       	out	0x11, r24	; 17
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	8e bb       	out	0x1e, r24	; 30
     56c:	80 e8       	ldi	r24, 0x80	; 128
     56e:	80 93 61 00 	sts	0x0061, r24
     572:	83 e0       	ldi	r24, 0x03	; 3
     574:	80 93 61 00 	sts	0x0061, r24
     578:	8e b3       	in	r24, 0x1e	; 30
     57a:	88 23       	and	r24, r24
     57c:	e9 f3       	breq	.-6      	; 0x578 <__stack+0x79>
     57e:	f6 9b       	sbis	0x1e, 6	; 30
     580:	06 c0       	rjmp	.+12     	; 0x58e <__stack+0x8f>
     582:	cc 23       	and	r28, r28
     584:	11 f4       	brne	.+4      	; 0x58a <__stack+0x8b>
     586:	c6 e0       	ldi	r28, 0x06	; 6
     588:	1b c0       	rjmp	.+54     	; 0x5c0 <__stack+0xc1>
     58a:	c1 50       	subi	r28, 0x01	; 1
     58c:	19 c0       	rjmp	.+50     	; 0x5c0 <__stack+0xc1>
     58e:	f7 9b       	sbis	0x1e, 7	; 30
     590:	06 c0       	rjmp	.+12     	; 0x59e <__stack+0x9f>
     592:	c6 30       	cpi	r28, 0x06	; 6
     594:	11 f4       	brne	.+4      	; 0x59a <__stack+0x9b>
     596:	c0 e0       	ldi	r28, 0x00	; 0
     598:	13 c0       	rjmp	.+38     	; 0x5c0 <__stack+0xc1>
     59a:	cf 5f       	subi	r28, 0xFF	; 255
     59c:	11 c0       	rjmp	.+34     	; 0x5c0 <__stack+0xc1>
     59e:	f4 9b       	sbis	0x1e, 4	; 30
     5a0:	0b c0       	rjmp	.+22     	; 0x5b8 <__stack+0xb9>
     5a2:	ec 2f       	mov	r30, r28
     5a4:	ff 27       	eor	r31, r31
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	e5 59       	subi	r30, 0x95	; 149
     5ac:	fe 4f       	sbci	r31, 0xFE	; 254
     5ae:	85 91       	lpm	r24, Z+
     5b0:	94 91       	lpm	r25, Z
     5b2:	fc 01       	movw	r30, r24
     5b4:	09 95       	icall
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <__stack+0xc1>
     5b8:	f3 9b       	sbis	0x1e, 3	; 30
     5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <__stack+0xc1>
     5bc:	0e 94 36 02 	call	0x46c <FUNCShowAbout>
     5c0:	ec 2f       	mov	r30, r28
     5c2:	ff 27       	eor	r31, r31
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	e7 58       	subi	r30, 0x87	; 135
     5ca:	fe 4f       	sbci	r31, 0xFE	; 254
     5cc:	85 91       	lpm	r24, Z+
     5ce:	94 91       	lpm	r25, Z
     5d0:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
     5d4:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     5d8:	cf cf       	rjmp	.-98     	; 0x578 <__stack+0x79>

000005da <MAIN_Delay1MS>:
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5de:	28 2f       	mov	r18, r24
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	2f 3f       	cpi	r18, 0xFF	; 255
     5e4:	49 f0       	breq	.+18     	; 0x5f8 <MAIN_Delay1MS+0x1e>
     5e6:	a3 e3       	ldi	r26, 0x33	; 51
     5e8:	b7 e0       	ldi	r27, 0x07	; 7
     5ea:	c0 e0       	ldi	r28, 0x00	; 0
     5ec:	d0 e0       	ldi	r29, 0x00	; 0
     5ee:	cd 01       	movw	r24, r26
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <MAIN_Delay1MS+0x16>
     5f4:	21 50       	subi	r18, 0x01	; 1
     5f6:	d8 f7       	brcc	.-10     	; 0x5ee <MAIN_Delay1MS+0x14>
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <MAIN_ResetCSLine>:
     5fe:	99 27       	eor	r25, r25
     600:	81 30       	cpi	r24, 0x01	; 1
     602:	91 05       	cpc	r25, r1
     604:	b1 f0       	breq	.+44     	; 0x632 <MAIN_ResetCSLine+0x34>
     606:	82 30       	cpi	r24, 0x02	; 2
     608:	91 05       	cpc	r25, r1
     60a:	1c f4       	brge	.+6      	; 0x612 <MAIN_ResetCSLine+0x14>
     60c:	89 2b       	or	r24, r25
     60e:	21 f0       	breq	.+8      	; 0x618 <MAIN_ResetCSLine+0x1a>
     610:	08 95       	ret
     612:	02 97       	sbiw	r24, 0x02	; 2
     614:	59 f0       	breq	.+22     	; 0x62c <MAIN_ResetCSLine+0x2e>
     616:	08 95       	ret
     618:	86 9a       	sbi	0x10, 6	; 16
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     61a:	a0 e0       	ldi	r26, 0x00	; 0
     61c:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     61e:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
     622:	80 2d       	mov	r24, r0
     624:	88 23       	and	r24, r24
     626:	19 f4       	brne	.+6      	; 0x62e <MAIN_ResetCSLine+0x30>
     628:	8e 9a       	sbi	0x11, 6	; 17
     62a:	08 95       	ret
     62c:	86 9a       	sbi	0x10, 6	; 16
     62e:	8e 98       	cbi	0x11, 6	; 17
     630:	08 95       	ret
     632:	86 98       	cbi	0x10, 6	; 16
     634:	fc cf       	rjmp	.-8      	; 0x62e <MAIN_ResetCSLine+0x30>

00000636 <MAIN_IntToStr>:
     636:	fb 01       	movw	r30, r22
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	84 36       	cpi	r24, 0x64	; 100
     63c:	91 05       	cpc	r25, r1
     63e:	20 f0       	brcs	.+8      	; 0x648 <MAIN_IntToStr+0x12>
     640:	2f 5f       	subi	r18, 0xFF	; 255
     642:	84 56       	subi	r24, 0x64	; 100
     644:	90 40       	sbci	r25, 0x00	; 0
     646:	f9 cf       	rjmp	.-14     	; 0x63a <MAIN_IntToStr+0x4>
     648:	20 5d       	subi	r18, 0xD0	; 208
     64a:	21 93       	st	Z+, r18
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	8a 30       	cpi	r24, 0x0A	; 10
     650:	91 05       	cpc	r25, r1
     652:	18 f0       	brcs	.+6      	; 0x65a <MAIN_IntToStr+0x24>
     654:	2f 5f       	subi	r18, 0xFF	; 255
     656:	0a 97       	sbiw	r24, 0x0a	; 10
     658:	fa cf       	rjmp	.-12     	; 0x64e <MAIN_IntToStr+0x18>
     65a:	20 5d       	subi	r18, 0xD0	; 208
     65c:	21 93       	st	Z+, r18
     65e:	80 5d       	subi	r24, 0xD0	; 208
     660:	81 93       	st	Z+, r24
     662:	10 82       	st	Z, r1
     664:	08 95       	ret

00000666 <MAIN_ShowProgType>:
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	27 97       	sbiw	r28, 0x07	; 7
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	18 2f       	mov	r17, r24
     67e:	63 e4       	ldi	r22, 0x43	; 67
     680:	72 e0       	ldi	r23, 0x02	; 2
     682:	ce 01       	movw	r24, r28
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	0e 94 ff 18 	call	0x31fe <strcpy_P>
     68a:	1e 83       	std	Y+6, r17	; 0x06
     68c:	1f 82       	std	Y+7, r1	; 0x07
     68e:	ce 01       	movw	r24, r28
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	0e 94 2f 07 	call	0xe5e <LCD_puts>
     696:	27 96       	adiw	r28, 0x07	; 7
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	08 95       	ret

000006aa <MAIN_ShowError>:
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
     6b2:	64 97       	sbiw	r28, 0x14	; 20
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
     6be:	25 e4       	ldi	r18, 0x45	; 69
     6c0:	29 83       	std	Y+1, r18	; 0x01
     6c2:	2e e3       	ldi	r18, 0x3E	; 62
     6c4:	2a 83       	std	Y+2, r18	; 0x02
     6c6:	bc 01       	movw	r22, r24
     6c8:	ce 01       	movw	r24, r28
     6ca:	03 96       	adiw	r24, 0x03	; 3
     6cc:	0e 94 ff 18 	call	0x31fe <strcpy_P>
     6d0:	ce 01       	movw	r24, r28
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	0e 94 2f 07 	call	0xe5e <LCD_puts>
     6d8:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     6dc:	f4 9b       	sbis	0x1e, 4	; 30
     6de:	fe cf       	rjmp	.-4      	; 0x6dc <MAIN_ShowError+0x32>
     6e0:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     6e4:	64 96       	adiw	r28, 0x14	; 20
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <__vector_3>:
     6f6:	78 94       	sei
     6f8:	1f 92       	push	r1
     6fa:	0f 92       	push	r0
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	0f 92       	push	r0
     700:	11 24       	eor	r1, r1
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	93 b1       	in	r25, 0x03	; 3
     708:	90 95       	com	r25
     70a:	90 7d       	andi	r25, 0xD0	; 208
     70c:	8c b1       	in	r24, 0x0c	; 12
     70e:	80 95       	com	r24
     710:	8c 70       	andi	r24, 0x0C	; 12
     712:	98 2b       	or	r25, r24
     714:	9e bb       	out	0x1e, r25	; 30
     716:	9f 91       	pop	r25
     718:	8f 91       	pop	r24
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <__vector_default>:
     724:	89 e4       	ldi	r24, 0x49	; 73
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	0e 94 55 03 	call	0x6aa <MAIN_ShowError>
     72c:	ff cf       	rjmp	.-2      	; 0x72c <__vector_default+0x8>

0000072e <FUNCChangeSettings>:
     72e:	cf 93       	push	r28
     730:	c0 e0       	ldi	r28, 0x00	; 0
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	8e bb       	out	0x1e, r24	; 30
     736:	8e b3       	in	r24, 0x1e	; 30
     738:	88 23       	and	r24, r24
     73a:	e9 f3       	breq	.-6      	; 0x736 <FUNCChangeSettings+0x8>
     73c:	f6 9b       	sbis	0x1e, 6	; 30
     73e:	06 c0       	rjmp	.+12     	; 0x74c <FUNCChangeSettings+0x1e>
     740:	cc 23       	and	r28, r28
     742:	11 f4       	brne	.+4      	; 0x748 <FUNCChangeSettings+0x1a>
     744:	c3 e0       	ldi	r28, 0x03	; 3
     746:	19 c0       	rjmp	.+50     	; 0x77a <FUNCChangeSettings+0x4c>
     748:	c1 50       	subi	r28, 0x01	; 1
     74a:	17 c0       	rjmp	.+46     	; 0x77a <FUNCChangeSettings+0x4c>
     74c:	f7 9b       	sbis	0x1e, 7	; 30
     74e:	06 c0       	rjmp	.+12     	; 0x75c <FUNCChangeSettings+0x2e>
     750:	c3 30       	cpi	r28, 0x03	; 3
     752:	11 f4       	brne	.+4      	; 0x758 <FUNCChangeSettings+0x2a>
     754:	c0 e0       	ldi	r28, 0x00	; 0
     756:	11 c0       	rjmp	.+34     	; 0x77a <FUNCChangeSettings+0x4c>
     758:	cf 5f       	subi	r28, 0xFF	; 255
     75a:	0f c0       	rjmp	.+30     	; 0x77a <FUNCChangeSettings+0x4c>
     75c:	f4 9b       	sbis	0x1e, 4	; 30
     75e:	0b c0       	rjmp	.+22     	; 0x776 <FUNCChangeSettings+0x48>
     760:	ec 2f       	mov	r30, r28
     762:	ff 27       	eor	r31, r31
     764:	ee 0f       	add	r30, r30
     766:	ff 1f       	adc	r31, r31
     768:	e0 5e       	subi	r30, 0xE0	; 224
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	85 91       	lpm	r24, Z+
     76e:	94 91       	lpm	r25, Z
     770:	fc 01       	movw	r30, r24
     772:	09 95       	icall
     774:	02 c0       	rjmp	.+4      	; 0x77a <FUNCChangeSettings+0x4c>
     776:	f2 99       	sbic	0x1e, 2	; 30
     778:	0d c0       	rjmp	.+26     	; 0x794 <FUNCChangeSettings+0x66>
     77a:	ec 2f       	mov	r30, r28
     77c:	ff 27       	eor	r31, r31
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	e8 5d       	subi	r30, 0xD8	; 216
     784:	fe 4f       	sbci	r31, 0xFE	; 254
     786:	85 91       	lpm	r24, Z+
     788:	94 91       	lpm	r25, Z
     78a:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
     78e:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     792:	d1 cf       	rjmp	.-94     	; 0x736 <FUNCChangeSettings+0x8>
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <FUNCAVRISPMode>:
		}
	}
}

void FUNCAVRISPMode(void)
{
	LCD_puts_f(AVRISPModeMessage);
     798:	89 ec       	ldi	r24, 0xC9	; 201
     79a:	93 e0       	ldi	r25, 0x03	; 3
     79c:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
	
	InterpretPacketRoutine = (FuncPtr)AICI_InterpretPacket;
     7a0:	83 e5       	ldi	r24, 0x53	; 83
     7a2:	91 e1       	ldi	r25, 0x11	; 17
     7a4:	90 93 03 01 	sts	0x0103, r25
     7a8:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     7ac:	0e 94 5d 0e 	call	0x1cba <V2P_RunStateMachine>
     7b0:	08 95       	ret

000007b2 <FUNCProgramDataflash>:
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     7b2:	a1 e0       	ldi	r26, 0x01	; 1
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     7b6:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
     7ba:	80 2d       	mov	r24, r0
     7bc:	0e 94 d9 08 	call	0x11b2 <USI_SPIInitMaster>
}

void FUNCProgramDataflash(void)
{
	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	UseExernalDF = TRUE;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	80 93 61 02 	sts	0x0261, r24
	DFSPIRoutinePointer = USI_SPITransmit;
     7c6:	83 ef       	ldi	r24, 0xF3	; 243
     7c8:	98 e0       	ldi	r25, 0x08	; 8
     7ca:	90 93 01 01 	sts	0x0101, r25
     7ce:	80 93 00 01 	sts	0x0100, r24
	
	LCD_puts_f(DataFlashProgMode);
     7d2:	8f e9       	ldi	r24, 0x9F	; 159
     7d4:	93 e0       	ldi	r25, 0x03	; 3
     7d6:	0e 94 70 07 	call	0xee0 <LCD_puts_f>

	InterpretPacketRoutine = PD_InterpretAVRISPPacket;
     7da:	87 e9       	ldi	r24, 0x97	; 151
     7dc:	9b e0       	ldi	r25, 0x0B	; 11
     7de:	90 93 03 01 	sts	0x0103, r25
     7e2:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     7e6:	0e 94 5d 0e 	call	0x1cba <V2P_RunStateMachine>
	   
	DF_EnableDataflash(FALSE);
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
	SPI_SPIOFF();
     7f0:	80 91 64 00 	lds	r24, 0x0064
     7f4:	84 60       	ori	r24, 0x04	; 4
     7f6:	80 93 64 00 	sts	0x0064, r24
     7fa:	08 95       	ret

000007fc <FUNCProgramAVR>:
}

void FUNCProgramAVR(void)
{
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	63 97       	sbiw	r28, 0x13	; 19
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
	uint8_t  DoneFailMessageBuff[19];
	uint8_t* EEPROMAddress;
	uint8_t  Fault = ISPCC_NO_FAULT;
     814:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t  ProgMode = 0;
     816:	10 2f       	mov	r17, r16

	SPI_SPIInit();
     818:	0e 94 84 08 	call	0x1108 <SPI_SPIInit>
	UseExernalDF = FALSE;
     81c:	00 93 61 02 	sts	0x0261, r16
	DFSPIRoutinePointer = SPI_SPITransmit;
     820:	8e e8       	ldi	r24, 0x8E	; 142
     822:	98 e0       	ldi	r25, 0x08	; 8
     824:	90 93 01 01 	sts	0x0101, r25
     828:	80 93 00 01 	sts	0x0100, r24
	
	if (!(DF_CheckCorrectOnboardChip()))
     82c:	0e 94 9f 0a 	call	0x153e <DF_CheckCorrectOnboardChip>
     830:	88 23       	and	r24, r24
     832:	09 f4       	brne	.+2      	; 0x836 <FUNCProgramAVR+0x3a>
     834:	0d c1       	rjmp	.+538    	; 0xa50 <FUNCProgramAVR+0x254>
	  return;

	MAIN_WaitForJoyRelease();
     836:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
	
	JoyStatus = 1;                            // Use an invalid joystick value to force the program to write the
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	8e bb       	out	0x1e, r24	; 30
	                                          // name of the default command onto the LCD
	while (1)
	{
		if (JoyStatus)
     83e:	8e b3       	in	r24, 0x1e	; 30
     840:	88 23       	and	r24, r24
     842:	e9 f3       	breq	.-6      	; 0x83e <FUNCProgramAVR+0x42>
		{
			if (JoyStatus & JOY_LEFT)
     844:	f2 99       	sbic	0x1e, 2	; 30
     846:	04 c1       	rjmp	.+520    	; 0xa50 <FUNCProgramAVR+0x254>
			  return;
			else if (JoyStatus & JOY_PRESS)
     848:	f4 99       	sbic	0x1e, 4	; 30
     84a:	1c c0       	rjmp	.+56     	; 0x884 <FUNCProgramAVR+0x88>
			  break;
			else if (JoyStatus & JOY_UP)
     84c:	f6 9b       	sbis	0x1e, 6	; 30
     84e:	06 c0       	rjmp	.+12     	; 0x85c <FUNCProgramAVR+0x60>
			  (ProgMode == 0)? ProgMode = 6 : ProgMode--;
     850:	11 23       	and	r17, r17
     852:	11 f4       	brne	.+4      	; 0x858 <FUNCProgramAVR+0x5c>
     854:	16 e0       	ldi	r17, 0x06	; 6
     856:	09 c0       	rjmp	.+18     	; 0x86a <FUNCProgramAVR+0x6e>
     858:	11 50       	subi	r17, 0x01	; 1
     85a:	07 c0       	rjmp	.+14     	; 0x86a <FUNCProgramAVR+0x6e>
			else if (JoyStatus & JOY_DOWN)
     85c:	f7 9b       	sbis	0x1e, 7	; 30
     85e:	05 c0       	rjmp	.+10     	; 0x86a <FUNCProgramAVR+0x6e>
			  (ProgMode == 6)? ProgMode = 0 : ProgMode++;
     860:	16 30       	cpi	r17, 0x06	; 6
     862:	11 f4       	brne	.+4      	; 0x868 <FUNCProgramAVR+0x6c>
     864:	10 e0       	ldi	r17, 0x00	; 0
     866:	01 c0       	rjmp	.+2      	; 0x86a <FUNCProgramAVR+0x6e>
     868:	1f 5f       	subi	r17, 0xFF	; 255

			LCD_puts_f((uint8_t*)pgm_read_word(&ProgOptions[ProgMode])); // Show current function onto the LCD
     86a:	e1 2f       	mov	r30, r17
     86c:	ff 27       	eor	r31, r31
     86e:	ee 0f       	add	r30, r30
     870:	ff 1f       	adc	r31, r31
     872:	e3 55       	subi	r30, 0x53	; 83
     874:	ff 4f       	sbci	r31, 0xFF	; 255
     876:	85 91       	lpm	r24, Z+
     878:	94 91       	lpm	r25, Z
     87a:	0e 94 70 07 	call	0xee0 <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     87e:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     882:	dd cf       	rjmp	.-70     	; 0x83e <FUNCProgramAVR+0x42>
		}
	}

	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);                // Orange = busy
     884:	81 b3       	in	r24, 0x11	; 17
     886:	80 63       	ori	r24, 0x30	; 48
     888:	81 bb       	out	0x11, r24	; 17
	LCD_puts_f(WaitText);
     88a:	85 e1       	ldi	r24, 0x15	; 21
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     892:	a1 e0       	ldi	r26, 0x01	; 1
     894:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     896:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
     89a:	80 2d       	mov	r24, r0
     89c:	0e 94 d9 08 	call	0x11b2 <USI_SPIInitMaster>

	USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));
	MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	0e 94 ff 02 	call	0x5fe <MAIN_ResetCSLine>
     8a6:	e2 e1       	ldi	r30, 0x12	; 18
     8a8:	f1 e0       	ldi	r31, 0x01	; 1
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	9b e0       	ldi	r25, 0x0B	; 11
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     8b0:	d9 01       	movw	r26, r18
     8b2:	ad 5d       	subi	r26, 0xDD	; 221
     8b4:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
     8b6:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
     8ba:	80 2d       	mov	r24, r0
     8bc:	81 93       	st	Z+, r24
			
	for (uint8_t PacketB = 0; PacketB <= 11; PacketB++) // Read the enter programming mode command bytes
     8be:	91 50       	subi	r25, 0x01	; 1
     8c0:	2f 5f       	subi	r18, 0xFF	; 255
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	97 ff       	sbrs	r25, 7
     8c6:	f4 cf       	rjmp	.-24     	; 0x8b0 <FUNCProgramAVR+0xb4>
	{
		PacketBytes[PacketB] = eeprom_read_byte(&EEPROMVars.EnterProgMode[PacketB]);
		EEPROMAddress++;
	}
	
	ISPCC_EnterChipProgrammingMode();    // Try to sync with the slave AVR
     8c8:	0e 94 c3 0f 	call	0x1f86 <ISPCC_EnterChipProgrammingMode>

	CurrAddress = 0;
     8cc:	10 92 09 01 	sts	0x0109, r1
     8d0:	10 92 0a 01 	sts	0x010A, r1
     8d4:	10 92 0b 01 	sts	0x010B, r1
     8d8:	10 92 0c 01 	sts	0x010C, r1

	if (PacketBytes[1] == STATUS_CMD_OK) // ISPCC_EnterChipProgrammingMode alters the PacketBytes buffer rather than returning a value
     8dc:	80 91 13 01 	lds	r24, 0x0113
     8e0:	88 23       	and	r24, r24
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <FUNCProgramAVR+0xea>
     8e4:	a0 c0       	rjmp	.+320    	; 0xa26 <FUNCProgramAVR+0x22a>
	{						
		if ((ProgMode == 6) || (ProgMode == 0) || (ProgMode == 2)) // Erase chip, or program flash mode
     8e6:	16 30       	cpi	r17, 0x06	; 6
     8e8:	21 f0       	breq	.+8      	; 0x8f2 <FUNCProgramAVR+0xf6>
     8ea:	11 23       	and	r17, r17
     8ec:	11 f0       	breq	.+4      	; 0x8f2 <FUNCProgramAVR+0xf6>
     8ee:	12 30       	cpi	r17, 0x02	; 2
     8f0:	91 f4       	brne	.+36     	; 0x916 <FUNCProgramAVR+0x11a>
		{
			MAIN_ShowProgType('C');
     8f2:	83 e4       	ldi	r24, 0x43	; 67
     8f4:	0e 94 33 03 	call	0x666 <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     8f8:	a4 e1       	ldi	r26, 0x14	; 20
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     8fc:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
     900:	80 2d       	mov	r24, r0
     902:	81 30       	cpi	r24, 0x01	; 1
     904:	31 f0       	breq	.+12     	; 0x912 <FUNCProgramAVR+0x116>
			
			if (!(eeprom_read_byte(&EEPROMVars.EraseCmdStored) == TRUE))
			{
				Fault = ISPCC_FAULT_NOERASE;
     906:	02 e0       	ldi	r16, 0x02	; 2
				MAIN_ShowError(PSTR("NO ERASE CMD"));
     908:	80 e5       	ldi	r24, 0x50	; 80
     90a:	92 e0       	ldi	r25, 0x02	; 2
     90c:	0e 94 55 03 	call	0x6aa <MAIN_ShowError>
     910:	02 c0       	rjmp	.+4      	; 0x916 <FUNCProgramAVR+0x11a>
			}
			else
			{
				PM_SendEraseCommand();
     912:	0e 94 5b 16 	call	0x2cb6 <PM_SendEraseCommand>
			}
		}

		if (((ProgMode == 0) || (ProgMode == 2)) && (Fault == ISPCC_NO_FAULT)) // Program flash
     916:	11 23       	and	r17, r17
     918:	11 f0       	breq	.+4      	; 0x91e <FUNCProgramAVR+0x122>
     91a:	12 30       	cpi	r17, 0x02	; 2
     91c:	b9 f4       	brne	.+46     	; 0x94c <FUNCProgramAVR+0x150>
     91e:	00 23       	and	r16, r16
     920:	a9 f4       	brne	.+42     	; 0x94c <FUNCProgramAVR+0x150>
		{
			MAIN_ShowProgType('D');
     922:	84 e4       	ldi	r24, 0x44	; 68
     924:	0e 94 33 03 	call	0x666 <MAIN_ShowProgType>

			if (!(PM_GetStoredDataSize(TYPE_FLASH))) // Check to make sure a program is present in memory
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	0e 94 c3 12 	call	0x2586 <PM_GetStoredDataSize>
     92e:	dc 01       	movw	r26, r24
     930:	cb 01       	movw	r24, r22
     932:	00 97       	sbiw	r24, 0x00	; 0
     934:	a1 05       	cpc	r26, r1
     936:	b1 05       	cpc	r27, r1
     938:	31 f4       	brne	.+12     	; 0x946 <FUNCProgramAVR+0x14a>
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     93a:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO DATA"));
     93c:	8d e5       	ldi	r24, 0x5D	; 93
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	0e 94 55 03 	call	0x6aa <MAIN_ShowError>
     944:	03 c0       	rjmp	.+6      	; 0x94c <FUNCProgramAVR+0x150>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_FLASH);
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 8a 16 	call	0x2d14 <PM_CreateProgrammingPackets>
			}
		}
	
		if ((ProgMode == 1) || (ProgMode == 2)) // Program EEPROM
     94c:	81 2f       	mov	r24, r17
     94e:	81 50       	subi	r24, 0x01	; 1
     950:	82 30       	cpi	r24, 0x02	; 2
     952:	a8 f4       	brcc	.+42     	; 0x97e <FUNCProgramAVR+0x182>
		{
			MAIN_ShowProgType('E');
     954:	85 e4       	ldi	r24, 0x45	; 69
     956:	0e 94 33 03 	call	0x666 <MAIN_ShowProgType>
				
			if (!(PM_GetStoredDataSize(TYPE_EEPROM))) // Check to make sure EEPROM data is present in memory
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	0e 94 c3 12 	call	0x2586 <PM_GetStoredDataSize>
     960:	dc 01       	movw	r26, r24
     962:	cb 01       	movw	r24, r22
     964:	00 97       	sbiw	r24, 0x00	; 0
     966:	a1 05       	cpc	r26, r1
     968:	b1 05       	cpc	r27, r1
     96a:	31 f4       	brne	.+12     	; 0x978 <FUNCProgramAVR+0x17c>
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     96c:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO EEPROM"));
     96e:	85 e6       	ldi	r24, 0x65	; 101
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	0e 94 55 03 	call	0x6aa <MAIN_ShowError>
     976:	03 c0       	rjmp	.+6      	; 0x97e <FUNCProgramAVR+0x182>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_EEPROM);
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	0e 94 8a 16 	call	0x2d14 <PM_CreateProgrammingPackets>
			}
		}

		if ((ProgMode == 3) || (ProgMode == 5)) // Program Fuse bytes
     97e:	13 30       	cpi	r17, 0x03	; 3
     980:	11 f0       	breq	.+4      	; 0x986 <FUNCProgramAVR+0x18a>
     982:	15 30       	cpi	r17, 0x05	; 5
     984:	99 f4       	brne	.+38     	; 0x9ac <FUNCProgramAVR+0x1b0>
		{
			MAIN_ShowProgType('F');
     986:	86 e4       	ldi	r24, 0x46	; 70
     988:	0e 94 33 03 	call	0x666 <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     98c:	af e2       	ldi	r26, 0x2F	; 47
     98e:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     990:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
     994:	80 2d       	mov	r24, r0
     996:	88 23       	and	r24, r24
     998:	31 f4       	brne	.+12     	; 0x9a6 <FUNCProgramAVR+0x1aa>
			
			if (!(eeprom_read_byte(&EEPROMVars.TotalFuseBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     99a:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO FUSE BYTES"));
     99c:	8f e6       	ldi	r24, 0x6F	; 111
     99e:	92 e0       	ldi	r25, 0x02	; 2
     9a0:	0e 94 55 03 	call	0x6aa <MAIN_ShowError>
     9a4:	03 c0       	rjmp	.+6      	; 0x9ac <FUNCProgramAVR+0x1b0>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_FUSE);
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	0e 94 2a 16 	call	0x2c54 <PM_SendFuseLockBytes>
			}
		}

		if ((ProgMode == 4) || (ProgMode == 5)) // Program Lock bytes
     9ac:	81 2f       	mov	r24, r17
     9ae:	84 50       	subi	r24, 0x04	; 4
     9b0:	82 30       	cpi	r24, 0x02	; 2
     9b2:	00 f5       	brcc	.+64     	; 0x9f4 <FUNCProgramAVR+0x1f8>
		{
			if (ProgMode == 5)                    // If fusebytes have already been written, we need to reenter programming mode to latch them
     9b4:	15 30       	cpi	r17, 0x05	; 5
     9b6:	59 f4       	brne	.+22     	; 0x9ce <FUNCProgramAVR+0x1d2>
			{
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line of the slave AVR
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	0e 94 ff 02 	call	0x5fe <MAIN_ResetCSLine>
				MAIN_Delay10MS(1);
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	0e 94 1a 02 	call	0x434 <MAIN_Delay10MS>
				MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	0e 94 ff 02 	call	0x5fe <MAIN_ResetCSLine>
				ISPCC_EnterChipProgrammingMode(); // Try to sync with the slave AVR
     9ca:	0e 94 c3 0f 	call	0x1f86 <ISPCC_EnterChipProgrammingMode>
			}

			MAIN_ShowProgType('L');
     9ce:	8c e4       	ldi	r24, 0x4C	; 76
     9d0:	0e 94 33 03 	call	0x666 <MAIN_ShowProgType>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     9d4:	a0 e3       	ldi	r26, 0x30	; 48
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     9d8:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
     9dc:	80 2d       	mov	r24, r0
     9de:	88 23       	and	r24, r24
     9e0:	31 f4       	brne	.+12     	; 0x9ee <FUNCProgramAVR+0x1f2>
		
			if (!(eeprom_read_byte(&EEPROMVars.TotalLockBytes)))
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     9e2:	03 e0       	ldi	r16, 0x03	; 3
				MAIN_ShowError(PSTR("NO LOCK BYTES"));
     9e4:	8d e7       	ldi	r24, 0x7D	; 125
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	0e 94 55 03 	call	0x6aa <MAIN_ShowError>
     9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <FUNCProgramAVR+0x1f8>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_LOCK);
     9ee:	83 e0       	ldi	r24, 0x03	; 3
     9f0:	0e 94 2a 16 	call	0x2c54 <PM_SendFuseLockBytes>
			}
		}

		strcpy_P(DoneFailMessageBuff, PSTR("PROGRAMMING DONE"));
     9f4:	6b e8       	ldi	r22, 0x8B	; 139
     9f6:	72 e0       	ldi	r23, 0x02	; 2
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	0e 94 ff 18 	call	0x31fe <strcpy_P>

		if (Fault != ISPCC_NO_FAULT)         // Takes less code to just overwrite part of the string on fail
     a00:	00 23       	and	r16, r16
     a02:	31 f0       	breq	.+12     	; 0xa10 <FUNCProgramAVR+0x214>
		  strcpy_P(&DoneFailMessageBuff[12], PSTR("FAILED"));
     a04:	6c e9       	ldi	r22, 0x9C	; 156
     a06:	72 e0       	ldi	r23, 0x02	; 2
     a08:	ce 01       	movw	r24, r28
     a0a:	0d 96       	adiw	r24, 0x0d	; 13
     a0c:	0e 94 ff 18 	call	0x31fe <strcpy_P>

		LCD_puts(DoneFailMessageBuff);
     a10:	ce 01       	movw	r24, r28
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	0e 94 2f 07 	call	0xe5e <LCD_puts>

		MAIN_Delay10MS(255);
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	0e 94 1a 02 	call	0x434 <MAIN_Delay10MS>
		MAIN_Delay10MS(100);
     a1e:	84 e6       	ldi	r24, 0x64	; 100
     a20:	0e 94 1a 02 	call	0x434 <MAIN_Delay10MS>
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <FUNCProgramAVR+0x232>
	}
	else
	{
		MAIN_ShowError(SyncErrorMessage);
     a26:	8e eb       	ldi	r24, 0xBE	; 190
     a28:	93 e0       	ldi	r25, 0x03	; 3
     a2a:	0e 94 55 03 	call	0x6aa <MAIN_ShowError>
	}
	
	MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run	
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	0e 94 ff 02 	call	0x5fe <MAIN_ResetCSLine>
	USI_SPIOff();
     a34:	0e 94 e9 08 	call	0x11d2 <USI_SPIOff>
	DF_EnableDataflash(FALSE);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
	SPI_SPIOFF();
     a3e:	80 91 64 00 	lds	r24, 0x0064
     a42:	84 60       	ori	r24, 0x04	; 4
     a44:	80 93 64 00 	sts	0x0064, r24
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Green = ready
     a48:	81 b3       	in	r24, 0x11	; 17
     a4a:	8f 7c       	andi	r24, 0xCF	; 207
     a4c:	80 61       	ori	r24, 0x10	; 16
     a4e:	81 bb       	out	0x11, r24	; 17
     a50:	63 96       	adiw	r28, 0x13	; 19
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	08 95       	ret

00000a66 <FUNCStoreProgram>:
}

void FUNCStoreProgram(void)
{
	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     a66:	8e e8       	ldi	r24, 0x8E	; 142
     a68:	98 e0       	ldi	r25, 0x08	; 8
     a6a:	90 93 01 01 	sts	0x0101, r25
     a6e:	80 93 00 01 	sts	0x0100, r24
	SPI_SPIInit();
     a72:	0e 94 84 08 	call	0x1108 <SPI_SPIInit>
	UseExernalDF = FALSE;
     a76:	10 92 61 02 	sts	0x0261, r1
	DF_EnableDataflash(TRUE);
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>

	if (!(DF_CheckCorrectOnboardChip()))
     a80:	0e 94 9f 0a 	call	0x153e <DF_CheckCorrectOnboardChip>
     a84:	88 23       	and	r24, r24
     a86:	a1 f0       	breq	.+40     	; 0xab0 <FUNCStoreProgram+0x4a>
	  return;
			
	LCD_puts_f(PSTR("*STORAGE MODE*"));
     a88:	83 ea       	ldi	r24, 0xA3	; 163
     a8a:	92 e0       	ldi	r25, 0x02	; 2
     a8c:	0e 94 70 07 	call	0xee0 <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PM_InterpretAVRISPPacket;
     a90:	8d ed       	ldi	r24, 0xDD	; 221
     a92:	93 e1       	ldi	r25, 0x13	; 19
     a94:	90 93 03 01 	sts	0x0103, r25
     a98:	80 93 02 01 	sts	0x0102, r24
	V2P_RunStateMachine();
     a9c:	0e 94 5d 0e 	call	0x1cba <V2P_RunStateMachine>
	DF_EnableDataflash(FALSE);
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
	SPI_SPIOFF();
     aa6:	80 91 64 00 	lds	r24, 0x0064
     aaa:	84 60       	ori	r24, 0x04	; 4
     aac:	80 93 64 00 	sts	0x0064, r24
     ab0:	08 95       	ret

00000ab2 <FUNCClearMem>:
}

void FUNCClearMem(void)
{
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
	LCD_puts_f(PSTR("CONFIRM"));
     ab6:	82 eb       	ldi	r24, 0xB2	; 178
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
	MAIN_Delay10MS(180);
     abe:	84 eb       	ldi	r24, 0xB4	; 180
     ac0:	0e 94 1a 02 	call	0x434 <MAIN_Delay10MS>

	LCD_puts_f(PSTR("<N Y>"));
     ac4:	8a eb       	ldi	r24, 0xBA	; 186
     ac6:	92 e0       	ldi	r25, 0x02	; 2
     ac8:	0e 94 70 07 	call	0xee0 <LCD_puts_f>

	while (1)
	{
		if (JoyStatus)
     acc:	8e b3       	in	r24, 0x1e	; 30
     ace:	88 23       	and	r24, r24
     ad0:	e9 f3       	breq	.-6      	; 0xacc <FUNCClearMem+0x1a>
		{
			if (JoyStatus & JOY_LEFT)
     ad2:	8e b3       	in	r24, 0x1e	; 30
     ad4:	99 27       	eor	r25, r25
     ad6:	ec 01       	movw	r28, r24
     ad8:	c4 70       	andi	r28, 0x04	; 4
     ada:	d0 70       	andi	r29, 0x00	; 0
     adc:	82 fd       	sbrc	r24, 2
     ade:	1a c0       	rjmp	.+52     	; 0xb14 <FUNCClearMem+0x62>
			  return;
			else if (JoyStatus & JOY_RIGHT)
     ae0:	f3 9b       	sbis	0x1e, 3	; 30
     ae2:	f4 cf       	rjmp	.-24     	; 0xacc <FUNCClearMem+0x1a>
			  break;
		}
	}

	MAIN_WaitForJoyRelease();
     ae4:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>

	LCD_puts_f(WaitText);
     ae8:	85 e1       	ldi	r24, 0x15	; 21
     aea:	92 e0       	ldi	r25, 0x02	; 2
     aec:	0e 94 70 07 	call	0xee0 <LCD_puts_f>

	for (uint16_t EAddr = 0; EAddr < 512; EAddr++)
     af0:	ce 01       	movw	r24, r28
     af2:	2f ef       	ldi	r18, 0xFF	; 255

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     af4:	dc 01       	movw	r26, r24
     af6:	02 2e       	mov	r0, r18
     af8:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	32 e0       	ldi	r19, 0x02	; 2
     b00:	80 30       	cpi	r24, 0x00	; 0
     b02:	93 07       	cpc	r25, r19
     b04:	b8 f3       	brcs	.-18     	; 0xaf4 <FUNCClearMem+0x42>
	  eeprom_write_byte((uint8_t*)EAddr, 0xFF);

	LCD_puts_f(PSTR("MEM CLEARED"));
     b06:	80 ec       	ldi	r24, 0xC0	; 192
     b08:	92 e0       	ldi	r25, 0x02	; 2
     b0a:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
	MAIN_Delay10MS(255);
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	0e 94 1a 02 	call	0x434 <MAIN_Delay10MS>
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <FUNCAutoCalib>:
}

void FUNCAutoCalib(void)
{
	LCD_puts_f(WaitText);
     b1a:	85 e1       	ldi	r24, 0x15	; 21
     b1c:	92 e0       	ldi	r25, 0x02	; 2
     b1e:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
	OSCCAL_Calibrate();
     b22:	0e 94 9b 06 	call	0xd36 <OSCCAL_Calibrate>
     b26:	08 95       	ret

00000b28 <FUNCSetContrast>:
}

void FUNCSetContrast(void)
{
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	26 97       	sbiw	r28, 0x06	; 6
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     b42:	85 e8       	ldi	r24, 0x85	; 133
     b44:	e8 2e       	mov	r14, r24
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	f8 2e       	mov	r15, r24
  uint8_t result;
  asm volatile
     b4a:	d7 01       	movw	r26, r14
     b4c:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
     b50:	80 2d       	mov	r24, r0
     b52:	18 2f       	mov	r17, r24
     b54:	1f 70       	andi	r17, 0x0F	; 15
	uint8_t Buffer[6];
	uint8_t Contrast = (eeprom_read_byte(&EEPROMVars.LCDContrast) & 0x0F); // Ranges from 0-15 so mask retuns 15 on blank EEPROM (0xFF)
	
	JoyStatus = 1;                          // Invalid value to force the LCD to update
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)
     b5a:	8e b3       	in	r24, 0x1e	; 30
     b5c:	88 23       	and	r24, r24
     b5e:	e9 f3       	breq	.-6      	; 0xb5a <FUNCSetContrast+0x32>
		{
			if (JoyStatus & JOY_UP)
     b60:	f6 9b       	sbis	0x1e, 6	; 30
     b62:	04 c0       	rjmp	.+8      	; 0xb6c <FUNCSetContrast+0x44>
			{
				if (Contrast < 15)
     b64:	1f 30       	cpi	r17, 0x0F	; 15
     b66:	78 f4       	brcc	.+30     	; 0xb86 <FUNCSetContrast+0x5e>
				  Contrast++;
     b68:	1f 5f       	subi	r17, 0xFF	; 255
     b6a:	0d c0       	rjmp	.+26     	; 0xb86 <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_DOWN)
     b6c:	f7 9b       	sbis	0x1e, 7	; 30
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <FUNCSetContrast+0x50>
			{
				if (Contrast > 1)          // Zero is non-visible, so 1 is the minimum
     b70:	12 30       	cpi	r17, 0x02	; 2
     b72:	48 f0       	brcs	.+18     	; 0xb86 <FUNCSetContrast+0x5e>
				  Contrast--;
     b74:	11 50       	subi	r17, 0x01	; 1
     b76:	07 c0       	rjmp	.+14     	; 0xb86 <FUNCSetContrast+0x5e>
			}
			else if (JoyStatus & JOY_LEFT)
     b78:	f2 9b       	sbis	0x1e, 2	; 30
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <FUNCSetContrast+0x5e>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     b7c:	d7 01       	movw	r26, r14
     b7e:	01 2e       	mov	r0, r17
     b80:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.LCDContrast, Contrast);
				return;
     b84:	18 c0       	rjmp	.+48     	; 0xbb6 <FUNCSetContrast+0x8e>
			}
					
			Buffer[0] = 'C';
     b86:	83 e4       	ldi	r24, 0x43	; 67
     b88:	89 83       	std	Y+1, r24	; 0x01
			Buffer[1] = 'T';
     b8a:	84 e5       	ldi	r24, 0x54	; 84
     b8c:	8a 83       	std	Y+2, r24	; 0x02
			Buffer[2] = ' ';
     b8e:	80 e2       	ldi	r24, 0x20	; 32
     b90:	8b 83       	std	Y+3, r24	; 0x03

			MAIN_IntToStr((uint16_t)Contrast, &Buffer[3]);
     b92:	be 01       	movw	r22, r28
     b94:	6c 5f       	subi	r22, 0xFC	; 252
     b96:	7f 4f       	sbci	r23, 0xFF	; 255
     b98:	81 2f       	mov	r24, r17
     b9a:	99 27       	eor	r25, r25
     b9c:	0e 94 1b 03 	call	0x636 <MAIN_IntToStr>
			LCD_puts(Buffer);
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 2f 07 	call	0xe5e <LCD_puts>

			LCD_CONTRAST_LEVEL(Contrast);
     ba8:	81 2f       	mov	r24, r17
     baa:	8f 70       	andi	r24, 0x0F	; 15
     bac:	80 93 e7 00 	sts	0x00E7, r24

			MAIN_WaitForJoyRelease();
     bb0:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     bb4:	d2 cf       	rjmp	.-92     	; 0xb5a <FUNCSetContrast+0x32>
     bb6:	26 96       	adiw	r28, 0x06	; 6
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	1f 91       	pop	r17
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	08 95       	ret

00000bce <FUNCSetISPSpeed>:
		}
	}
}

void FUNCSetISPSpeed(void)
{
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
	JoyStatus = 1;                         // Invalid value to force the LCD to update
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	8e bb       	out	0x1e, r24	; 30
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     bd8:	01 e0       	ldi	r16, 0x01	; 1
     bda:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t result;
  asm volatile
     bdc:	d8 01       	movw	r26, r16
     bde:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
     be2:	80 2d       	mov	r24, r0
     be4:	c8 2f       	mov	r28, r24

	uint8_t CurrSpeed = eeprom_read_byte(&EEPROMVars.SCKDuration);

	if (CurrSpeed > (USI_PRESET_SPEEDS - 1)) CurrSpeed = 0; // Protection against blank EEPROM
     be6:	84 30       	cpi	r24, 0x04	; 4
     be8:	08 f0       	brcs	.+2      	; 0xbec <FUNCSetISPSpeed+0x1e>
     bea:	c0 e0       	ldi	r28, 0x00	; 0

	while (1)
	{
		if (JoyStatus)
     bec:	8e b3       	in	r24, 0x1e	; 30
     bee:	88 23       	and	r24, r24
     bf0:	e9 f3       	breq	.-6      	; 0xbec <FUNCSetISPSpeed+0x1e>
		{
			if (JoyStatus & JOY_UP)
     bf2:	f6 9b       	sbis	0x1e, 6	; 30
     bf4:	06 c0       	rjmp	.+12     	; 0xc02 <FUNCSetISPSpeed+0x34>
			{
				(CurrSpeed == 0)? CurrSpeed = (USI_PRESET_SPEEDS - 1) : CurrSpeed--;
     bf6:	cc 23       	and	r28, r28
     bf8:	11 f4       	brne	.+4      	; 0xbfe <FUNCSetISPSpeed+0x30>
     bfa:	c3 e0       	ldi	r28, 0x03	; 3
     bfc:	11 c0       	rjmp	.+34     	; 0xc20 <FUNCSetISPSpeed+0x52>
     bfe:	c1 50       	subi	r28, 0x01	; 1
     c00:	0f c0       	rjmp	.+30     	; 0xc20 <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_DOWN)
     c02:	f7 9b       	sbis	0x1e, 7	; 30
     c04:	06 c0       	rjmp	.+12     	; 0xc12 <FUNCSetISPSpeed+0x44>
			{
				(CurrSpeed == (USI_PRESET_SPEEDS - 1))? CurrSpeed = 0 : CurrSpeed++;
     c06:	c3 30       	cpi	r28, 0x03	; 3
     c08:	11 f4       	brne	.+4      	; 0xc0e <FUNCSetISPSpeed+0x40>
     c0a:	c0 e0       	ldi	r28, 0x00	; 0
     c0c:	09 c0       	rjmp	.+18     	; 0xc20 <FUNCSetISPSpeed+0x52>
     c0e:	cf 5f       	subi	r28, 0xFF	; 255
     c10:	07 c0       	rjmp	.+14     	; 0xc20 <FUNCSetISPSpeed+0x52>
			}
			else if (JoyStatus & JOY_LEFT)
     c12:	f2 9b       	sbis	0x1e, 2	; 30
     c14:	05 c0       	rjmp	.+10     	; 0xc20 <FUNCSetISPSpeed+0x52>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
     c16:	d8 01       	movw	r26, r16
     c18:	0c 2e       	mov	r0, r28
     c1a:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
			{
				eeprom_write_byte(&EEPROMVars.SCKDuration, CurrSpeed);
				return;
     c1e:	0d c0       	rjmp	.+26     	; 0xc3a <FUNCSetISPSpeed+0x6c>
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&USIPSNamePtrs[CurrSpeed]));
     c20:	ec 2f       	mov	r30, r28
     c22:	ff 27       	eor	r31, r31
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	e3 58       	subi	r30, 0x83	; 131
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	85 91       	lpm	r24, Z+
     c2e:	94 91       	lpm	r25, Z
     c30:	0e 94 70 07 	call	0xee0 <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     c34:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     c38:	d9 cf       	rjmp	.-78     	; 0xbec <FUNCSetISPSpeed+0x1e>
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	08 95       	ret

00000c42 <FUNCSleepMode>:
		}
	}
}

void FUNCSleepMode(void)
{
	SMCR    = ((1 << SM1) | (1 << SE));   // Power down sleep mode
     c42:	85 e0       	ldi	r24, 0x05	; 5
     c44:	83 bf       	out	0x33, r24	; 51
	LCDCRA &= ~(1 << LCDEN); 
     c46:	80 91 e4 00 	lds	r24, 0x00E4
     c4a:	8f 77       	andi	r24, 0x7F	; 127
     c4c:	80 93 e4 00 	sts	0x00E4, r24
	
	while (!(JoyStatus & JOY_UP))        // Joystick interrupt wakes the micro
	  SLEEP();
     c50:	f6 99       	sbic	0x1e, 6	; 30
     c52:	03 c0       	rjmp	.+6      	; 0xc5a <FUNCSleepMode+0x18>
     c54:	88 95       	sleep
     c56:	f6 9b       	sbis	0x1e, 6	; 30
     c58:	fd cf       	rjmp	.-6      	; 0xc54 <FUNCSleepMode+0x12>
	   
	LCDCRA |= (1 << LCDEN);
     c5a:	80 91 e4 00 	lds	r24, 0x00E4
     c5e:	80 68       	ori	r24, 0x80	; 128
     c60:	80 93 e4 00 	sts	0x00E4, r24
	
	MAIN_WaitForJoyRelease();
     c64:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     c68:	08 95       	ret

00000c6a <FUNCStorageInfo>:
}

void FUNCStorageInfo(void)
{
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
	uint8_t SelectedItem = 0;
     c6e:	10 e0       	ldi	r17, 0x00	; 0

	MAIN_WaitForJoyRelease();
     c70:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>

	JoyStatus = 1;                         // Invalid value to force the LCD to update
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     c78:	8e b3       	in	r24, 0x1e	; 30
     c7a:	88 23       	and	r24, r24
     c7c:	e9 f3       	breq	.-6      	; 0xc78 <FUNCStorageInfo+0xe>
		{
			if (JoyStatus & (JOY_UP | JOY_DOWN))
     c7e:	ce b3       	in	r28, 0x1e	; 30
     c80:	c0 7c       	andi	r28, 0xC0	; 192
     c82:	19 f0       	breq	.+6      	; 0xc8a <FUNCStorageInfo+0x20>
			{
				SelectedItem ^= 1;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	18 27       	eor	r17, r24
     c88:	38 c0       	rjmp	.+112    	; 0xcfa <FUNCStorageInfo+0x90>
			}
			else if (JoyStatus & JOY_LEFT)
     c8a:	f2 99       	sbic	0x1e, 2	; 30
     c8c:	43 c0       	rjmp	.+134    	; 0xd14 <FUNCStorageInfo+0xaa>
			{
				return;
			}
			else if (JoyStatus & JOY_PRESS)
     c8e:	f4 9b       	sbis	0x1e, 4	; 30
     c90:	34 c0       	rjmp	.+104    	; 0xcfa <FUNCStorageInfo+0x90>
			{
				if (SelectedItem == 1)    // View storage tags
     c92:	11 30       	cpi	r17, 0x01	; 1
     c94:	81 f5       	brne	.+96     	; 0xcf6 <FUNCStorageInfo+0x8c>
				{
					DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     c96:	8e e8       	ldi	r24, 0x8E	; 142
     c98:	98 e0       	ldi	r25, 0x08	; 8
     c9a:	90 93 01 01 	sts	0x0101, r25
     c9e:	80 93 00 01 	sts	0x0100, r24
					SPI_SPIInit();
     ca2:	0e 94 84 08 	call	0x1108 <SPI_SPIInit>
					UseExernalDF = FALSE;
     ca6:	c0 93 61 02 	sts	0x0261, r28
					DF_EnableDataflash(TRUE);
     caa:	81 2f       	mov	r24, r17
     cac:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>

					if (DF_CheckCorrectOnboardChip())
     cb0:	0e 94 9f 0a 	call	0x153e <DF_CheckCorrectOnboardChip>
     cb4:	c8 2f       	mov	r28, r24
     cb6:	88 23       	and	r24, r24
     cb8:	41 f0       	breq	.+16     	; 0xcca <FUNCStorageInfo+0x60>
					{
						TM_ShowTags();
     cba:	0e 94 d1 18 	call	0x31a2 <TM_ShowTags>
						SPI_SPIOFF();
     cbe:	80 91 64 00 	lds	r24, 0x0064
     cc2:	84 60       	ori	r24, 0x04	; 4
     cc4:	80 93 64 00 	sts	0x0064, r24
     cc8:	18 c0       	rjmp	.+48     	; 0xcfa <FUNCStorageInfo+0x90>
					}
					else if (!(PM_GetStoredDataSize(TYPE_FLASH)))
     cca:	81 2f       	mov	r24, r17
     ccc:	0e 94 c3 12 	call	0x2586 <PM_GetStoredDataSize>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	79 f4       	brne	.+30     	; 0xcfa <FUNCStorageInfo+0x90>
					{
						DF_EnableDataflash(FALSE);
     cdc:	8c 2f       	mov	r24, r28
     cde:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
						SPI_SPIOFF();
     ce2:	80 91 64 00 	lds	r24, 0x0064
     ce6:	84 60       	ori	r24, 0x04	; 4
     ce8:	80 93 64 00 	sts	0x0064, r24

						MAIN_ShowError(PSTR("NO STORED PRGM"));
     cec:	8c ec       	ldi	r24, 0xCC	; 204
     cee:	92 e0       	ldi	r25, 0x02	; 2
     cf0:	0e 94 55 03 	call	0x6aa <MAIN_ShowError>
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <FUNCStorageInfo+0x90>
					}	
				}
				else                  // View stored data sizes
				{
					PM_ShowStoredItemSizes();
     cf6:	0e 94 ac 17 	call	0x2f58 <PM_ShowStoredItemSizes>
				}
			}
			
			LCD_puts_f((uint8_t*)pgm_read_word(&SIFOOptionPtrs[SelectedItem]));
     cfa:	e1 2f       	mov	r30, r17
     cfc:	ff 27       	eor	r31, r31
     cfe:	ee 0f       	add	r30, r30
     d00:	ff 1f       	adc	r31, r31
     d02:	e4 5a       	subi	r30, 0xA4	; 164
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	85 91       	lpm	r24, Z+
     d08:	94 91       	lpm	r25, Z
     d0a:	0e 94 70 07 	call	0xee0 <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     d0e:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
     d12:	b2 cf       	rjmp	.-156    	; 0xc78 <FUNCStorageInfo+0xe>
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	08 95       	ret

00000d1a <FUNCGoBootloader>:
		}
	}
}

void FUNCGoBootloader(void)
{
	uint8_t MD = (MCUCR & ~(1 << JTD)); // Forces compiler to use IN, AND plus two OUTs rather than two lots of IN/AND/OUTs
     d1a:	85 b7       	in	r24, 0x35	; 53
     d1c:	8f 77       	andi	r24, 0x7F	; 127
	MCUCR = MD;  // Turn on JTAG via code
     d1e:	85 bf       	out	0x35, r24	; 53
	MCUCR = MD;  // Twice as specified in datasheet        
     d20:	85 bf       	out	0x35, r24	; 53
	
	LCD_puts_f(PSTR("*JTAG ON*"));
     d22:	8b ed       	ldi	r24, 0xDB	; 219
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
	
	MAIN_WaitForJoyRelease();
     d2a:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
	
	WDTCR = ((1<<WDCE) | (1<<WDE)); // Enable Watchdog Timer to give reset after minimum timeout
     d2e:	88 e1       	ldi	r24, 0x18	; 24
     d30:	80 93 60 00 	sts	0x0060, r24
	while (1) {};                  // Eternal loop - when watchdog resets the AVR it will enter the bootloader
     d34:	ff cf       	rjmp	.-2      	; 0xd34 <FUNCGoBootloader+0x1a>

00000d36 <OSCCAL_Calibrate>:

volatile static uint16_t ActualCount;

void OSCCAL_Calibrate(void)
{
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
	uint8_t SREG_Backup;
	uint8_t LoopCount = (0x7F / 2); // Maximum range is 128, and starts from the middle, so 64 is the max number of iterations required
     d3a:	4f e3       	ldi	r20, 0x3F	; 63
	uint8_t PrevOSCALValues[2] = {};
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
   
	// Make sure all clock division is turned off (8Mhz RC clock)
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_8MHZ);
     d40:	80 e8       	ldi	r24, 0x80	; 128
     d42:	80 93 61 00 	sts	0x0061, r24
     d46:	10 92 61 00 	sts	0x0061, r1

	// Inital OSCCAL of half its maximum for speed
	OSCCAL = (0x7F / 2);
     d4a:	40 93 66 00 	sts	0x0066, r20

	// Save the SREG
	SREG_Backup = SREG;
     d4e:	5f b7       	in	r21, 0x3f	; 63
    
	// Disable all timer 1 interrupts
	TIMSK1 = 0;
     d50:	10 92 6f 00 	sts	0x006F, r1
        
	// Set timer 2 to asyncronous mode (32.768KHz crystal)
	ASSR   = (1 << AS2);
     d54:	88 e0       	ldi	r24, 0x08	; 8
     d56:	80 93 b6 00 	sts	0x00B6, r24
        
	// Timer 2 overflow interrupt enable
	TIMSK2 = (1 << TOIE2);
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	80 93 70 00 	sts	0x0070, r24

	// Enable interrupts
	sei();
     d60:	78 94       	sei

	// Start both counters with no prescaling
	TCCR1B = (1 << CS10);
     d62:	80 93 81 00 	sts	0x0081, r24
	TCCR2A = (1 << CS20);
     d66:	80 93 b0 00 	sts	0x00B0, r24
	 	 
	// Wait until timer 2's external 32.768KHz crystal is stable
	while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB) | (1 << OCR2UB)));
     d6a:	80 91 b6 00 	lds	r24, 0x00B6
     d6e:	99 27       	eor	r25, r25
     d70:	87 70       	andi	r24, 0x07	; 7
     d72:	90 70       	andi	r25, 0x00	; 0
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	c9 f7       	brne	.-14     	; 0xd6a <OSCCAL_Calibrate+0x34>
    
	// Clear the timer values
	TCNT1  = 0;
     d78:	90 93 85 00 	sts	0x0085, r25
     d7c:	80 93 84 00 	sts	0x0084, r24
	TCNT2  = 0;
     d80:	10 92 b2 00 	sts	0x00B2, r1
    
	while (LoopCount--)
	{
		// Let it take a few readings (16ms, approx 2 readings)
		_delay_ms(16);

		PrevOSCALValues[1] = PrevOSCALValues[0];
		PrevOSCALValues[0] = OSCCAL;
        
		if (ActualCount > OSCCAL_UPPERCOUNTBOUND)       // Clock is running too fast
			OSCCAL--;
		else if (ActualCount < OSCCAL_LOWERCOUNTBOUND) // Clock is running too slow
			OSCCAL++;
		else		                                     // Clock is just right
			break;
		
		// If the routine cannot find a value withing the count tollerance,
		// it will cause the OSCCAL to hover around the closest two values.
		// If the current value is the same as the two previous, exit the
		// routine as the best value has been found.
		if (OSCCAL == PrevOSCALValues[1])
		  break;
     d84:	4e e3       	ldi	r20, 0x3E	; 62
     d86:	a3 e3       	ldi	r26, 0x33	; 51
     d88:	b3 e7       	ldi	r27, 0x73	; 115
     d8a:	c0 e0       	ldi	r28, 0x00	; 0
     d8c:	d0 e0       	ldi	r29, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d8e:	cd 01       	movw	r24, r26
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <OSCCAL_Calibrate+0x5a>
     d94:	32 2f       	mov	r19, r18
     d96:	80 91 66 00 	lds	r24, 0x0066
     d9a:	28 2f       	mov	r18, r24
     d9c:	80 91 04 01 	lds	r24, 0x0104
     da0:	90 91 05 01 	lds	r25, 0x0105
     da4:	86 50       	subi	r24, 0x06	; 6
     da6:	91 4e       	sbci	r25, 0xE1	; 225
     da8:	20 f0       	brcs	.+8      	; 0xdb2 <OSCCAL_Calibrate+0x7c>
     daa:	80 91 66 00 	lds	r24, 0x0066
     dae:	81 50       	subi	r24, 0x01	; 1
     db0:	0a c0       	rjmp	.+20     	; 0xdc6 <OSCCAL_Calibrate+0x90>
     db2:	80 91 04 01 	lds	r24, 0x0104
     db6:	90 91 05 01 	lds	r25, 0x0105
     dba:	8b 5f       	subi	r24, 0xFB	; 251
     dbc:	90 4e       	sbci	r25, 0xE0	; 224
     dbe:	58 f4       	brcc	.+22     	; 0xdd6 <OSCCAL_Calibrate+0xa0>
     dc0:	80 91 66 00 	lds	r24, 0x0066
     dc4:	8f 5f       	subi	r24, 0xFF	; 255
     dc6:	80 93 66 00 	sts	0x0066, r24
     dca:	80 91 66 00 	lds	r24, 0x0066
     dce:	83 17       	cp	r24, r19
     dd0:	11 f0       	breq	.+4      	; 0xdd6 <OSCCAL_Calibrate+0xa0>
     dd2:	41 50       	subi	r20, 0x01	; 1
     dd4:	e0 f6       	brcc	.-72     	; 0xd8e <OSCCAL_Calibrate+0x58>
	}

	// Disable all timer interrupts
	TIMSK1 = 0;
     dd6:	10 92 6f 00 	sts	0x006F, r1
	TIMSK2 = 0;
     dda:	10 92 70 00 	sts	0x0070, r1
    
	// Stop the timers
	TCCR1B = 0x00;
     dde:	10 92 81 00 	sts	0x0081, r1
	TCCR2A = 0x00;
     de2:	10 92 b0 00 	sts	0x00B0, r1

	// Turn off timer 2 asynchronous mode
	ASSR  &= ~(1 << AS2);
     de6:	80 91 b6 00 	lds	r24, 0x00B6
     dea:	87 7f       	andi	r24, 0xF7	; 247
     dec:	80 93 b6 00 	sts	0x00B6, r24

	// Restore SREG
	SREG = SREG_Backup;
     df0:	5f bf       	out	0x3f, r21	; 63
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <__vector_5>:
        
	return;
}

ISR(TIMER2_OVF_vect, ISR_BLOCK) // Occurs 32768/256 timers per second, or 128Hz
{
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	0f 92       	push	r0
     e00:	11 24       	eor	r1, r1
     e02:	8f 93       	push	r24
     e04:	9f 93       	push	r25
	// Stop timer 1 so it can be read
	TCCR1B = 0x00;
     e06:	10 92 81 00 	sts	0x0081, r1
    
	// Record timer 1's value
	ActualCount = TCNT1;
     e0a:	80 91 84 00 	lds	r24, 0x0084
     e0e:	90 91 85 00 	lds	r25, 0x0085
     e12:	90 93 05 01 	sts	0x0105, r25
     e16:	80 93 04 01 	sts	0x0104, r24
	     
	// Reset counters and restart timer 1
	TCNT1  = 0;
     e1a:	10 92 85 00 	sts	0x0085, r1
     e1e:	10 92 84 00 	sts	0x0084, r1
	TCNT2  = 0;
     e22:	10 92 b2 00 	sts	0x00B2, r1
	TCCR1B = (1 << CS10);
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	80 93 81 00 	sts	0x0081, r24
     e2c:	9f 91       	pop	r25
     e2e:	8f 91       	pop	r24
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <LCD_Init>:
// ======================================================================================

void LCD_Init(void)
{
	LCDCCR = 0x0F;
     e3a:	8f e0       	ldi	r24, 0x0F	; 15
     e3c:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all segment pins.
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
     e40:	87 eb       	ldi	r24, 0xB7	; 183
     e42:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32,0 Hz
    LCDFRR  = (0<<LCDPS0) | (7<<LCDCD0);    
     e46:	87 e0       	ldi	r24, 0x07	; 7
     e48:	80 93 e6 00 	sts	0x00E6, r24

	// Enable LCD and set low power waveform
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB); 
     e4c:	80 ec       	ldi	r24, 0xC0	; 192
     e4e:	80 93 e4 00 	sts	0x00E4, r24

    //Enable LCD start of frame interrupt
    LCDCRA |= (1<<LCDIE);
     e52:	80 91 e4 00 	lds	r24, 0x00E4
     e56:	88 60       	ori	r24, 0x08	; 8
     e58:	80 93 e4 00 	sts	0x00E4, r24
     e5c:	08 95       	ret

00000e5e <LCD_puts>:
}

void LCD_puts_f(const uint8_t *FlashData)
{
	uint8_t StrBuff[LCD_TEXTBUFFER_SIZE];

	strcpy_P(StrBuff, FlashData);
	LCD_puts(StrBuff);
}

void LCD_puts(uint8_t *Data)
{
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	ec 01       	movw	r28, r24
	uint8_t LoadB;
	
	for (LoadB = 0; LoadB < 20; LoadB++)
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	3f ef       	ldi	r19, 0xFF	; 255
     e68:	ed e2       	ldi	r30, 0x2D	; 45
     e6a:	f2 e0       	ldi	r31, 0x02	; 2
     e6c:	df 01       	movw	r26, r30
	{
		uint8_t CByte = *(Data++);
     e6e:	89 91       	ld	r24, Y+
	
		if ((CByte >= '*') && (CByte <= 'z'))
     e70:	98 2f       	mov	r25, r24
     e72:	9a 52       	subi	r25, 0x2A	; 42
     e74:	91 35       	cpi	r25, 0x51	; 81
     e76:	38 f4       	brcc	.+14     	; 0xe86 <LCD_puts+0x28>
		  TextBuffer[LoadB] = ((CByte == ' ')? 0xFF : (CByte - '*'));
     e78:	80 32       	cpi	r24, 0x20	; 32
     e7a:	11 f0       	breq	.+4      	; 0xe80 <LCD_puts+0x22>
     e7c:	89 2f       	mov	r24, r25
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <LCD_puts+0x24>
     e80:	8f ef       	ldi	r24, 0xFF	; 255
     e82:	8c 93       	st	X, r24
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <LCD_puts+0x2e>
		else if (CByte == 0x00)
     e86:	88 23       	and	r24, r24
     e88:	31 f0       	breq	.+12     	; 0xe96 <LCD_puts+0x38>
		  break;
		else
		  TextBuffer[LoadB] = 0xFF;		
     e8a:	30 83       	st	Z, r19
     e8c:	2f 5f       	subi	r18, 0xFF	; 255
     e8e:	11 96       	adiw	r26, 0x01	; 1
     e90:	31 96       	adiw	r30, 0x01	; 1
     e92:	24 31       	cpi	r18, 0x14	; 20
     e94:	60 f3       	brcs	.-40     	; 0xe6e <LCD_puts+0x10>
	}

	ScrollMode  = ((LoadB > 6)? TRUE : FALSE);
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	27 30       	cpi	r18, 0x07	; 7
     e9a:	08 f0       	brcs	.+2      	; 0xe9e <LCD_puts+0x40>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	80 93 5d 02 	sts	0x025D, r24
	ScrollCount = 0;
     ea2:	10 92 2b 02 	sts	0x022B, r1
     ea6:	9f ef       	ldi	r25, 0xFF	; 255
     ea8:	86 e0       	ldi	r24, 0x06	; 6

	for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
		TextBuffer[LoadB++] = 0xFF;
     eaa:	e2 2f       	mov	r30, r18
     eac:	ff 27       	eor	r31, r31
     eae:	e3 5d       	subi	r30, 0xD3	; 211
     eb0:	fd 4f       	sbci	r31, 0xFD	; 253
     eb2:	90 83       	st	Z, r25
     eb4:	2f 5f       	subi	r18, 0xFF	; 255
     eb6:	81 50       	subi	r24, 0x01	; 1
     eb8:	87 ff       	sbrs	r24, 7
     eba:	f7 cf       	rjmp	.-18     	; 0xeaa <LCD_puts+0x4c>
	
	TextBuffer[LoadB] = 0x00;
     ebc:	e2 2f       	mov	r30, r18
     ebe:	ff 27       	eor	r31, r31
     ec0:	e3 5d       	subi	r30, 0xD3	; 211
     ec2:	fd 4f       	sbci	r31, 0xFD	; 253
     ec4:	10 82       	st	Z, r1
	StrStart   = 0;
     ec6:	10 92 2c 02 	sts	0x022C, r1
	StrEnd     = LoadB;	
     eca:	20 93 2a 02 	sts	0x022A, r18
	DelayCount = LCD_DELAYCOUNT_DEFAULT;
     ece:	8a e0       	ldi	r24, 0x0A	; 10
     ed0:	80 93 5e 02 	sts	0x025E, r24

	UpdateLCD  = TRUE;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	80 93 48 02 	sts	0x0248, r24
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <LCD_puts_f>:
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	64 97       	sbiw	r28, 0x14	; 20
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	bc 01       	movw	r22, r24
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	0e 94 ff 18 	call	0x31fe <strcpy_P>
     efe:	ce 01       	movw	r24, r28
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	0e 94 2f 07 	call	0xe5e <LCD_puts>
     f06:	64 96       	adiw	r28, 0x14	; 20
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <LCD_WriteChar>:
}

void LCD_WriteChar(uint8_t Byte, uint8_t Digit)
{
     f18:	e8 2f       	mov	r30, r24
	uint16_t SegData  = 0x00;
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1));
     f1e:	86 2f       	mov	r24, r22
     f20:	86 95       	lsr	r24
     f22:	a8 2f       	mov	r26, r24
     f24:	bb 27       	eor	r27, r27
     f26:	a7 5b       	subi	r26, 0xB7	; 183
     f28:	bd 4f       	sbci	r27, 0xFD	; 253

	if (Byte != 0xFF)
     f2a:	ef 3f       	cpi	r30, 0xFF	; 255
     f2c:	39 f0       	breq	.+14     	; 0xf3c <LCD_WriteChar+0x24>
	  SegData = pgm_read_word(&LCD_SegTable[Byte]);	
     f2e:	ff 27       	eor	r31, r31
     f30:	ee 0f       	add	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	eb 51       	subi	r30, 0x1B	; 27
     f36:	fd 4f       	sbci	r31, 0xFD	; 253
     f38:	25 91       	lpm	r18, Z+
     f3a:	34 91       	lpm	r19, Z
     f3c:	77 27       	eor	r23, r23
     f3e:	61 70       	andi	r22, 0x01	; 1
     f40:	70 70       	andi	r23, 0x00	; 0
     f42:	43 e0       	ldi	r20, 0x03	; 3

	for (uint8_t BNib = 0; BNib < 4; BNib++)
	{
		uint8_t Mask          = 0xF0;
     f44:	50 ef       	ldi	r21, 0xF0	; 240
		uint8_t MaskedSegData = (SegData & 0x0000F);
     f46:	92 2f       	mov	r25, r18
     f48:	9f 70       	andi	r25, 0x0F	; 15
	
		if (Digit & 0x01)
     f4a:	61 15       	cp	r22, r1
     f4c:	71 05       	cpc	r23, r1
     f4e:	19 f0       	breq	.+6      	; 0xf56 <LCD_WriteChar+0x3e>
		{
			Mask = 0x0F;
     f50:	5f e0       	ldi	r21, 0x0F	; 15
			MaskedSegData <<= 4;
     f52:	92 95       	swap	r25
     f54:	90 7f       	andi	r25, 0xF0	; 240
		}
		
		*BuffPtr = ((*BuffPtr & Mask) | MaskedSegData);
     f56:	8c 91       	ld	r24, X
     f58:	85 23       	and	r24, r21
     f5a:	89 2b       	or	r24, r25
     f5c:	8c 93       	st	X, r24

		SegData >>= 4;
     f5e:	84 e0       	ldi	r24, 0x04	; 4
     f60:	36 95       	lsr	r19
     f62:	27 95       	ror	r18
     f64:	8a 95       	dec	r24
     f66:	e1 f7       	brne	.-8      	; 0xf60 <LCD_WriteChar+0x48>
		BuffPtr  += 5;
     f68:	15 96       	adiw	r26, 0x05	; 5
     f6a:	41 50       	subi	r20, 0x01	; 1
     f6c:	47 ff       	sbrs	r20, 7
     f6e:	ea cf       	rjmp	.-44     	; 0xf44 <LCD_WriteChar+0x2c>
     f70:	08 95       	ret

00000f72 <__vector_22>:
	}
}

ISR(LCD_vect, ISR_NOBLOCK)
{
     f72:	78 94       	sei
     f74:	1f 92       	push	r1
     f76:	0f 92       	push	r0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	2f 93       	push	r18
     f80:	3f 93       	push	r19
     f82:	4f 93       	push	r20
     f84:	5f 93       	push	r21
     f86:	6f 93       	push	r22
     f88:	7f 93       	push	r23
     f8a:	8f 93       	push	r24
     f8c:	9f 93       	push	r25
     f8e:	af 93       	push	r26
     f90:	bf 93       	push	r27
     f92:	cf 93       	push	r28
     f94:	ef 93       	push	r30
     f96:	ff 93       	push	r31
	if (ScrollMode)
     f98:	80 91 5d 02 	lds	r24, 0x025D
     f9c:	88 23       	and	r24, r24
     f9e:	99 f0       	breq	.+38     	; 0xfc6 <__vector_22+0x54>
	{
		if (DelayCount)
     fa0:	80 91 5e 02 	lds	r24, 0x025E
     fa4:	88 23       	and	r24, r24
     fa6:	21 f0       	breq	.+8      	; 0xfb0 <__vector_22+0x3e>
		{
			DelayCount--;
     fa8:	81 50       	subi	r24, 0x01	; 1
     faa:	80 93 5e 02 	sts	0x025E, r24
     fae:	0b c0       	rjmp	.+22     	; 0xfc6 <__vector_22+0x54>
		}
		else
		{
			if (!(ScrollCount))
     fb0:	80 91 2b 02 	lds	r24, 0x022B
     fb4:	88 23       	and	r24, r24
     fb6:	21 f4       	brne	.+8      	; 0xfc0 <__vector_22+0x4e>
			  UpdateLCD = TRUE;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 48 02 	sts	0x0248, r24
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <__vector_22+0x54>
			else
			  ScrollCount--;
     fc0:	81 50       	subi	r24, 0x01	; 1
     fc2:	80 93 2b 02 	sts	0x022B, r24
		}
	}

	if (UpdateLCD)
     fc6:	80 91 48 02 	lds	r24, 0x0248
     fca:	88 23       	and	r24, r24
     fcc:	39 f1       	breq	.+78     	; 0x101c <__vector_22+0xaa>
	{
		for (uint8_t Character = 0; Character < 6; Character++)
     fce:	c0 e0       	ldi	r28, 0x00	; 0
		{
			uint8_t Byte = (StrStart + Character);
     fd0:	80 91 2c 02 	lds	r24, 0x022C
     fd4:	8c 0f       	add	r24, r28

			if (Byte >= StrEnd)
     fd6:	90 91 2a 02 	lds	r25, 0x022A
     fda:	e8 2f       	mov	r30, r24
     fdc:	ff 27       	eor	r31, r31
     fde:	89 17       	cp	r24, r25
     fe0:	10 f0       	brcs	.+4      	; 0xfe6 <__vector_22+0x74>
			  Byte = TextBuffer[Byte - StrEnd];
     fe2:	e9 1b       	sub	r30, r25
     fe4:	f1 09       	sbc	r31, r1
			else
			  Byte = TextBuffer[Byte];
     fe6:	e3 5d       	subi	r30, 0xD3	; 211
     fe8:	fd 4f       	sbci	r31, 0xFD	; 253
     fea:	80 81       	ld	r24, Z
			
			LCD_WriteChar(Byte, Character);
     fec:	6c 2f       	mov	r22, r28
     fee:	0e 94 8c 07 	call	0xf18 <LCD_WriteChar>
     ff2:	cf 5f       	subi	r28, 0xFF	; 255
     ff4:	c6 30       	cpi	r28, 0x06	; 6
     ff6:	60 f3       	brcs	.-40     	; 0xfd0 <__vector_22+0x5e>
		}
		
		if (StrStart++ == StrEnd)
     ff8:	80 91 2c 02 	lds	r24, 0x022C
     ffc:	98 2f       	mov	r25, r24
     ffe:	8f 5f       	subi	r24, 0xFF	; 255
    1000:	80 93 2c 02 	sts	0x022C, r24
    1004:	80 91 2a 02 	lds	r24, 0x022A
    1008:	98 17       	cp	r25, r24
    100a:	19 f4       	brne	.+6      	; 0x1012 <__vector_22+0xa0>
		  StrStart = 1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	80 93 2c 02 	sts	0x022C, r24
		
		ScrollCount = LCD_SCROLLCOUNT_DEFAULT;
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	80 93 2b 02 	sts	0x022B, r24
		UpdateLCD = FALSE;
    1018:	10 92 48 02 	sts	0x0248, r1
    101c:	ac ee       	ldi	r26, 0xEC	; 236
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e9 e4       	ldi	r30, 0x49	; 73
    1022:	f2 e0       	ldi	r31, 0x02	; 2
    1024:	93 e1       	ldi	r25, 0x13	; 19
	}

	for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++)
	  *(pLCDREG + LCDChar) = SegBuffer[LCDChar];
    1026:	81 91       	ld	r24, Z+
    1028:	8d 93       	st	X+, r24
    102a:	91 50       	subi	r25, 0x01	; 1
    102c:	97 ff       	sbrs	r25, 7
    102e:	fb cf       	rjmp	.-10     	; 0x1026 <__vector_22+0xb4>
    1030:	ff 91       	pop	r31
    1032:	ef 91       	pop	r30
    1034:	cf 91       	pop	r28
    1036:	bf 91       	pop	r27
    1038:	af 91       	pop	r26
    103a:	9f 91       	pop	r25
    103c:	8f 91       	pop	r24
    103e:	7f 91       	pop	r23
    1040:	6f 91       	pop	r22
    1042:	5f 91       	pop	r21
    1044:	4f 91       	pop	r20
    1046:	3f 91       	pop	r19
    1048:	2f 91       	pop	r18
    104a:	0f 90       	pop	r0
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	0f 90       	pop	r0
    1050:	1f 90       	pop	r1
    1052:	18 95       	reti

00001054 <USART_Init>:
*****************************************************************************/
void USART_Init(void)
{
    // Set baud rate
    UBRRH = (uint8_t)(USART_BAUDRATE >> 8);
    1054:	82 ec       	ldi	r24, 0xC2	; 194
    1056:	80 93 c5 00 	sts	0x00C5, r24
    UBRRL = (uint8_t)(USART_BAUDRATE);
    105a:	10 92 c4 00 	sts	0x00C4, r1

    // Double speed
	UCSRA = (USART_DOUBLESPEED << U2X);
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	80 93 c0 00 	sts	0x00C0, r24

    // Enable recieve complete interrupt
	UCSRB = (1 << RXCIE);
    1064:	80 e8       	ldi	r24, 0x80	; 128
    1066:	80 93 c1 00 	sts	0x00C1, r24
	 
    // Async. mode, 8N1
    UCSRC = (3 << UCSZ0);
    106a:	86 e0       	ldi	r24, 0x06	; 6
    106c:	80 93 c2 00 	sts	0x00C2, r24
	 
	 // Initalise ringbuffer
	BUFF_InitialiseBuffer();
    1070:	0e 94 b7 0a 	call	0x156e <BUFF_InitialiseBuffer>
    1074:	08 95       	ret

00001076 <USART_Tx>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_Tx(char data)
{
    1076:	98 2f       	mov	r25, r24
    while (!(UCSRA & (1 << UDRE)));
    1078:	80 91 c0 00 	lds	r24, 0x00C0
    107c:	85 ff       	sbrs	r24, 5
    107e:	fc cf       	rjmp	.-8      	; 0x1078 <USART_Tx+0x2>
    UDR = data;
    1080:	90 93 c6 00 	sts	0x00C6, r25
    1084:	08 95       	ret

00001086 <USART_TxString>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_TxString(char *data)
{
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	ec 01       	movw	r28, r24
	while (*data != '\0')
	  USART_Tx(*data++);
    108c:	88 81       	ld	r24, Y
    108e:	88 23       	and	r24, r24
    1090:	31 f0       	breq	.+12     	; 0x109e <USART_TxString+0x18>
    1092:	89 91       	ld	r24, Y+
    1094:	0e 94 3b 08 	call	0x1076 <USART_Tx>
    1098:	88 81       	ld	r24, Y
    109a:	88 23       	and	r24, r24
    109c:	d1 f7       	brne	.-12     	; 0x1092 <USART_TxString+0xc>
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <USART_Rx>:
}

/*****************************************************************************
*
*   Function name : Usart_Rx
*
*   Returns :       char: byte received
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART
*
*****************************************************************************/
char USART_Rx(void)
{
    while (!(BuffElements) && !(TimeOut)) {};
    10a4:	80 91 af 02 	lds	r24, 0x02AF
    10a8:	88 23       	and	r24, r24
    10aa:	21 f4       	brne	.+8      	; 0x10b4 <USART_Rx+0x10>
    10ac:	80 91 06 01 	lds	r24, 0x0106
    10b0:	88 23       	and	r24, r24
    10b2:	c1 f3       	breq	.-16     	; 0x10a4 <USART_Rx>
    return BUFF_GetBuffByte();
    10b4:	0e 94 ed 0a 	call	0x15da <BUFF_GetBuffByte>
}
    10b8:	99 27       	eor	r25, r25
    10ba:	08 95       	ret

000010bc <__vector_13>:

/*****************************************************************************
*
*   Function name : Usart_Rx Interrupt
*
*   Returns :       N/A
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART and stores it into the buffer
*
*****************************************************************************/

ISR(USART0_RX_vect, ISR_BLOCK)
{
    10bc:	1f 92       	push	r1
    10be:	0f 92       	push	r0
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	0f 92       	push	r0
    10c4:	11 24       	eor	r1, r1
    10c6:	2f 93       	push	r18
    10c8:	3f 93       	push	r19
    10ca:	4f 93       	push	r20
    10cc:	5f 93       	push	r21
    10ce:	6f 93       	push	r22
    10d0:	7f 93       	push	r23
    10d2:	8f 93       	push	r24
    10d4:	9f 93       	push	r25
    10d6:	af 93       	push	r26
    10d8:	bf 93       	push	r27
    10da:	ef 93       	push	r30
    10dc:	ff 93       	push	r31
	BUFF_StoreBuffByte(UDR);
    10de:	80 91 c6 00 	lds	r24, 0x00C6
    10e2:	0e 94 c4 0a 	call	0x1588 <BUFF_StoreBuffByte>
    10e6:	ff 91       	pop	r31
    10e8:	ef 91       	pop	r30
    10ea:	bf 91       	pop	r27
    10ec:	af 91       	pop	r26
    10ee:	9f 91       	pop	r25
    10f0:	8f 91       	pop	r24
    10f2:	7f 91       	pop	r23
    10f4:	6f 91       	pop	r22
    10f6:	5f 91       	pop	r21
    10f8:	4f 91       	pop	r20
    10fa:	3f 91       	pop	r19
    10fc:	2f 91       	pop	r18
    10fe:	0f 90       	pop	r0
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	0f 90       	pop	r0
    1104:	1f 90       	pop	r1
    1106:	18 95       	reti

00001108 <SPI_SPIInit>:
// ======================================================================================

void SPI_SPIInit(void)
{
	PRR &= ~(1 << PRSPI);              // Enable the SPI system by clearing the power save register SPI disable bit
    1108:	80 91 64 00 	lds	r24, 0x0064
    110c:	8b 7f       	andi	r24, 0xFB	; 251
    110e:	80 93 64 00 	sts	0x0064, r24

	// Master, Sample falling edge (setup rising), Fosc/2 speed (8Mhz/2 = 4MHz)
	SPSR = (1 << SPI2X);
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	8d bd       	out	0x2d, r24	; 45
	SPCR = ((1 << SPE) | (1 << MSTR) | (1 << CPHA) | (1 << CPOL));
    1116:	8c e5       	ldi	r24, 0x5C	; 92
    1118:	8c bd       	out	0x2c, r24	; 44
    111a:	08 95       	ret

0000111c <SPI_SPITransmit>:
}

uint8_t SPI_SPITransmit(uint8_t Data)
{
	SPDR = Data;                       // Loading a byte into the register starts the transmission
    111c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));    // Wait until transmission completed
    111e:	0d b4       	in	r0, 0x2d	; 45
    1120:	07 fe       	sbrs	r0, 7
    1122:	fd cf       	rjmp	.-6      	; 0x111e <SPI_SPITransmit+0x2>
	return SPDR;
    1124:	8e b5       	in	r24, 0x2e	; 46
}
    1126:	99 27       	eor	r25, r25
    1128:	08 95       	ret

0000112a <SPI_SPITransmitWord>:

uint8_t SPI_SPITransmitWord(uint16_t Data)
{
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	8c 01       	movw	r16, r24
	SPI_SPITransmit((uint8_t)(Data >> 8));
    1130:	81 2f       	mov	r24, r17
    1132:	99 27       	eor	r25, r25
    1134:	0e 94 8e 08 	call	0x111c <SPI_SPITransmit>
	return SPI_SPITransmit((uint8_t)Data);
    1138:	80 2f       	mov	r24, r16
    113a:	0e 94 8e 08 	call	0x111c <SPI_SPITransmit>
}
    113e:	99 27       	eor	r25, r25
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	08 95       	ret

00001146 <__vector_17>:
 *  have to stop the timer tick.
 *  For all modes the USIDR contents are stored and flags are updated.
 */
ISR(USI_OVERFLOW_vect, ISR_BLOCK)
{
    1146:	1f 92       	push	r1
    1148:	0f 92       	push	r0
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	0f 92       	push	r0
    114e:	11 24       	eor	r1, r1
    1150:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	TIMSK0 &= ~(1<<OCIE0A);
    1152:	80 91 6e 00 	lds	r24, 0x006E
    1156:	8d 7f       	andi	r24, 0xFD	; 253
    1158:	80 93 6e 00 	sts	0x006E, r24
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
    115c:	80 e4       	ldi	r24, 0x40	; 64
    115e:	80 93 b9 00 	sts	0x00B9, r24
	TransferComplete = 1;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	80 93 5f 02 	sts	0x025F, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
    1168:	80 91 ba 00 	lds	r24, 0x00BA
    116c:	80 93 60 02 	sts	0x0260, r24
    1170:	8f 91       	pop	r24
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	0f 90       	pop	r0
    1178:	1f 90       	pop	r1
    117a:	18 95       	reti

0000117c <USI_SPISetSpeed>:
}



/*! \brief  Initialize USI as SPI master.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from slave to master mode.
 *  Note that the stored USIDR value is cleared.
 *
 */
void USI_SPIInitMaster(char Freq)
{
	// Configure port directions.
 	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN);  // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                       // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                        // Pull-ups.
	USI_OUT_REG &= ~(1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Pull-ups.
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = USI_CONTROL_REG_FLAGS;

	// Set the compare and prescaler for the requested frequency:
	USI_SPISetSpeed(Freq);
	
	// Init driver status register.
	TransferComplete = 0;
	
	storedUSIDR = 0;
}

void USI_SPIOff( void )
{
	USI_DIR_REG &= ~((1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN));                        // Inputs.
	USI_OUT_REG &= ~((1<<USI_DATAIN_PIN)  | (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN)); // Pull-ups.
	DDRF  &= ~(1 << 6);
	PORTF &= ~(1 << 6);
	
	USI_STOPUSITIMER();
}

/*! \brief  Put one byte on bus.
 *
 *  Use this function like you would write to the SPDR register in the native SPI module.
 *  Calling this function in master mode starts a transfer, while in slave mode, a
 *  byte will be prepared for the next transfer initiated by the master device.
 *  If a transfer is in progress, this function will set the write collision flag
 *  and return without altering the data registers.
 *
 *  \returns  0 if a write collision occurred, 1 otherwise.
 */
uint8_t USI_SPITransmit( unsigned char val )
{
	// Reinit flags.
	TransferComplete = 0;

	// Put data in USI data register.
	USIDR = val;
	
	TIFR0  |= (1<<OCF0A);  // Clear compare match flag.
	TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.

	// Clear the timer 0 value
	TCNT0 = 0;

	while (!(TransferComplete));

	return storedUSIDR;
}

uint8_t USI_SPITransmitWord( unsigned int val )
{
	USI_SPITransmit((uint8_t)(val >> 8));
	return USI_SPITransmit((uint8_t)val);
}

void USI_SPIToggleClock(void)
{
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);	
}

void USI_SPISetSpeed(uint8_t Freq)
{
    117c:	48 2f       	mov	r20, r24
	for (uint8_t MatchIndex = 0; MatchIndex < USI_PRESET_SPEEDS; MatchIndex++)
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	62 e5       	ldi	r22, 0x52	; 82
    1182:	73 e0       	ldi	r23, 0x03	; 3
    1184:	9b 01       	movw	r18, r22
    1186:	21 50       	subi	r18, 0x01	; 1
    1188:	30 40       	sbci	r19, 0x00	; 0
	{
		if ((pgm_read_byte(&USIPSValues[MatchIndex][0]) == Freq) || (MatchIndex == (USI_PRESET_SPEEDS - 1)))
    118a:	f9 01       	movw	r30, r18
    118c:	84 91       	lpm	r24, Z
    118e:	84 17       	cp	r24, r20
    1190:	11 f0       	breq	.+4      	; 0x1196 <USI_SPISetSpeed+0x1a>
    1192:	93 30       	cpi	r25, 0x03	; 3
    1194:	31 f4       	brne	.+12     	; 0x11a2 <USI_SPISetSpeed+0x26>
		{
			// Init Output Compare Register.
			OCR0A = pgm_read_byte(&USIPSValues[MatchIndex][1]);
    1196:	fb 01       	movw	r30, r22
    1198:	84 91       	lpm	r24, Z
    119a:	87 bd       	out	0x27, r24	; 39

			// Enable 'Clear Timer on Compare match' and set prescaler, which starts the timer
			TCCR0A = ((1<<WGM01) | TC0_PS_1);
    119c:	89 e0       	ldi	r24, 0x09	; 9
    119e:	84 bd       	out	0x24, r24	; 36
				
			return;
    11a0:	08 95       	ret
    11a2:	9f 5f       	subi	r25, 0xFF	; 255
    11a4:	2e 5f       	subi	r18, 0xFE	; 254
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
    11a8:	6e 5f       	subi	r22, 0xFE	; 254
    11aa:	7f 4f       	sbci	r23, 0xFF	; 255
    11ac:	94 30       	cpi	r25, 0x04	; 4
    11ae:	68 f3       	brcs	.-38     	; 0x118a <USI_SPISetSpeed+0xe>
    11b0:	08 95       	ret

000011b2 <USI_SPIInitMaster>:
    11b2:	9d b1       	in	r25, 0x0d	; 13
    11b4:	90 65       	ori	r25, 0x50	; 80
    11b6:	9d b9       	out	0x0d, r25	; 13
    11b8:	6d 98       	cbi	0x0d, 5	; 13
    11ba:	75 9a       	sbi	0x0e, 5	; 14
    11bc:	76 98       	cbi	0x0e, 6	; 14
    11be:	9a e5       	ldi	r25, 0x5A	; 90
    11c0:	90 93 b8 00 	sts	0x00B8, r25
    11c4:	0e 94 be 08 	call	0x117c <USI_SPISetSpeed>
    11c8:	10 92 5f 02 	sts	0x025F, r1
    11cc:	10 92 60 02 	sts	0x0260, r1
    11d0:	08 95       	ret

000011d2 <USI_SPIOff>:
    11d2:	8d b1       	in	r24, 0x0d	; 13
    11d4:	8f 7a       	andi	r24, 0xAF	; 175
    11d6:	8d b9       	out	0x0d, r24	; 13
    11d8:	8e b1       	in	r24, 0x0e	; 14
    11da:	8f 78       	andi	r24, 0x8F	; 143
    11dc:	8e b9       	out	0x0e, r24	; 14
    11de:	86 98       	cbi	0x10, 6	; 16
    11e0:	8e 98       	cbi	0x11, 6	; 17
    11e2:	14 bc       	out	0x24, r1	; 36
    11e4:	08 95       	ret

000011e6 <USI_SPITransmit>:
    11e6:	10 92 5f 02 	sts	0x025F, r1
    11ea:	80 93 ba 00 	sts	0x00BA, r24
    11ee:	a9 9a       	sbi	0x15, 1	; 21
    11f0:	80 91 6e 00 	lds	r24, 0x006E
    11f4:	82 60       	ori	r24, 0x02	; 2
    11f6:	80 93 6e 00 	sts	0x006E, r24
    11fa:	16 bc       	out	0x26, r1	; 38
    11fc:	80 91 5f 02 	lds	r24, 0x025F
    1200:	88 23       	and	r24, r24
    1202:	e1 f3       	breq	.-8      	; 0x11fc <USI_SPITransmit+0x16>
    1204:	80 91 60 02 	lds	r24, 0x0260
    1208:	99 27       	eor	r25, r25
    120a:	08 95       	ret

0000120c <USI_SPITransmitWord>:
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	8c 01       	movw	r16, r24
    1212:	81 2f       	mov	r24, r17
    1214:	99 27       	eor	r25, r25
    1216:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    121a:	80 2f       	mov	r24, r16
    121c:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    1220:	99 27       	eor	r25, r25
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	08 95       	ret

00001228 <USI_SPIToggleClock>:
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	0e 94 ed 02 	call	0x5da <MAIN_Delay1MS>
    122e:	80 91 b8 00 	lds	r24, 0x00B8
    1232:	81 60       	ori	r24, 0x01	; 1
    1234:	80 93 b8 00 	sts	0x00B8, r24
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	0e 94 ed 02 	call	0x5da <MAIN_Delay1MS>
    123e:	80 91 b8 00 	lds	r24, 0x00B8
    1242:	81 60       	ori	r24, 0x01	; 1
    1244:	80 93 b8 00 	sts	0x00B8, r24
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	0e 94 ed 02 	call	0x5da <MAIN_Delay1MS>
    124e:	08 95       	ret

00001250 <DF_EnableDataflash>:
	while (DF_BUSY());
}

void DF_EnableDataflash(uint8_t Enabled)
{
    1250:	90 91 61 02 	lds	r25, 0x0261
	if (Enabled == TRUE)
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	31 f4       	brne	.+12     	; 0x1264 <DF_EnableDataflash+0x14>
	{
		if (UseExernalDF == TRUE)
    1258:	91 30       	cpi	r25, 0x01	; 1
    125a:	11 f4       	brne	.+4      	; 0x1260 <DF_EnableDataflash+0x10>
		  MAIN_ResetCSLine(MAIN_RESETCS_EXTDFACTIVE);
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	05 c0       	rjmp	.+10     	; 0x126a <DF_EnableDataflash+0x1a>
		else
		  PORTB &= ~(1 << 0);
    1260:	28 98       	cbi	0x05, 0	; 5
    1262:	08 95       	ret
	}
	else
	{
		if (UseExernalDF == TRUE)
    1264:	91 30       	cpi	r25, 0x01	; 1
    1266:	21 f4       	brne	.+8      	; 0x1270 <DF_EnableDataflash+0x20>
		  MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE);
    1268:	89 2f       	mov	r24, r25
    126a:	0e 94 ff 02 	call	0x5fe <MAIN_ResetCSLine>
    126e:	08 95       	ret
		else
		  PORTB |= (1 << 0);
    1270:	28 9a       	sbi	0x05, 0	; 5
    1272:	08 95       	ret

00001274 <DF_ReadBufferByte>:
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	8c 01       	movw	r16, r24
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    1286:	e0 91 00 01 	lds	r30, 0x0100
    128a:	f0 91 01 01 	lds	r31, 0x0101
    128e:	84 e5       	ldi	r24, 0x54	; 84
    1290:	09 95       	icall
    1292:	81 2f       	mov	r24, r17
    1294:	99 27       	eor	r25, r25
    1296:	e0 91 00 01 	lds	r30, 0x0100
    129a:	f0 91 01 01 	lds	r31, 0x0101
    129e:	09 95       	icall
    12a0:	e0 91 00 01 	lds	r30, 0x0100
    12a4:	f0 91 01 01 	lds	r31, 0x0101
    12a8:	80 2f       	mov	r24, r16
    12aa:	09 95       	icall
    12ac:	e0 91 00 01 	lds	r30, 0x0100
    12b0:	f0 91 01 01 	lds	r31, 0x0101
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	09 95       	icall
    12b8:	e0 91 00 01 	lds	r30, 0x0100
    12bc:	f0 91 01 01 	lds	r31, 0x0101
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	09 95       	icall
    12c4:	99 27       	eor	r25, r25
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	08 95       	ret

000012cc <DF_ContinuousReadEnable>:
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	8c 01       	movw	r16, r24
    12d6:	7b 01       	movw	r14, r22
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    12e4:	e0 91 00 01 	lds	r30, 0x0100
    12e8:	f0 91 01 01 	lds	r31, 0x0101
    12ec:	88 e6       	ldi	r24, 0x68	; 104
    12ee:	09 95       	icall
    12f0:	8a b5       	in	r24, 0x2a	; 42
    12f2:	98 01       	movw	r18, r16
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DF_ContinuousReadEnable+0x2e>
    12f6:	36 95       	lsr	r19
    12f8:	27 95       	ror	r18
    12fa:	8a 95       	dec	r24
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DF_ContinuousReadEnable+0x2a>
    12fe:	c9 01       	movw	r24, r18
    1300:	e0 91 00 01 	lds	r30, 0x0100
    1304:	f0 91 01 01 	lds	r31, 0x0101
    1308:	09 95       	icall
    130a:	8b b5       	in	r24, 0x2b	; 43
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DF_ContinuousReadEnable+0x46>
    130e:	00 0f       	add	r16, r16
    1310:	11 1f       	adc	r17, r17
    1312:	8a 95       	dec	r24
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DF_ContinuousReadEnable+0x42>
    1316:	8f 2d       	mov	r24, r15
    1318:	99 27       	eor	r25, r25
    131a:	e0 91 00 01 	lds	r30, 0x0100
    131e:	f0 91 01 01 	lds	r31, 0x0101
    1322:	80 0f       	add	r24, r16
    1324:	09 95       	icall
    1326:	e0 91 00 01 	lds	r30, 0x0100
    132a:	f0 91 01 01 	lds	r31, 0x0101
    132e:	8e 2d       	mov	r24, r14
    1330:	09 95       	icall
    1332:	03 e0       	ldi	r16, 0x03	; 3
    1334:	e0 91 00 01 	lds	r30, 0x0100
    1338:	f0 91 01 01 	lds	r31, 0x0101
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	09 95       	icall
    1340:	01 50       	subi	r16, 0x01	; 1
    1342:	07 ff       	sbrs	r16, 7
    1344:	f7 cf       	rjmp	.-18     	; 0x1334 <DF_ContinuousReadEnable+0x68>
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	08 95       	ret

00001350 <DF_BufferWriteEnable>:
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	8c 01       	movw	r16, r24
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    1362:	e0 91 00 01 	lds	r30, 0x0100
    1366:	f0 91 01 01 	lds	r31, 0x0101
    136a:	84 e8       	ldi	r24, 0x84	; 132
    136c:	09 95       	icall
    136e:	e0 91 00 01 	lds	r30, 0x0100
    1372:	f0 91 01 01 	lds	r31, 0x0101
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	09 95       	icall
    137a:	81 2f       	mov	r24, r17
    137c:	99 27       	eor	r25, r25
    137e:	e0 91 00 01 	lds	r30, 0x0100
    1382:	f0 91 01 01 	lds	r31, 0x0101
    1386:	09 95       	icall
    1388:	e0 91 00 01 	lds	r30, 0x0100
    138c:	f0 91 01 01 	lds	r31, 0x0101
    1390:	80 2f       	mov	r24, r16
    1392:	09 95       	icall
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	08 95       	ret

0000139a <DF_GetChipCharacteristics>:
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    13a6:	e0 91 00 01 	lds	r30, 0x0100
    13aa:	f0 91 01 01 	lds	r31, 0x0101
    13ae:	87 e5       	ldi	r24, 0x57	; 87
    13b0:	09 95       	icall
    13b2:	e0 91 00 01 	lds	r30, 0x0100
    13b6:	f0 91 01 01 	lds	r31, 0x0101
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	09 95       	icall
    13be:	68 2f       	mov	r22, r24
    13c0:	77 27       	eor	r23, r23
    13c2:	cb 01       	movw	r24, r22
    13c4:	88 73       	andi	r24, 0x38	; 56
    13c6:	90 70       	andi	r25, 0x00	; 0
    13c8:	33 e0       	ldi	r19, 0x03	; 3
    13ca:	95 95       	asr	r25
    13cc:	87 95       	ror	r24
    13ce:	3a 95       	dec	r19
    13d0:	e1 f7       	brne	.-8      	; 0x13ca <DF_GetChipCharacteristics+0x30>
    13d2:	99 27       	eor	r25, r25
    13d4:	fc 01       	movw	r30, r24
    13d6:	e7 57       	subi	r30, 0x77	; 119
    13d8:	fc 4f       	sbci	r31, 0xFC	; 252
    13da:	44 91       	lpm	r20, Z
    13dc:	40 93 64 02 	sts	0x0264, r20
    13e0:	9c 01       	movw	r18, r24
    13e2:	28 0f       	add	r18, r24
    13e4:	39 1f       	adc	r19, r25
    13e6:	f9 01       	movw	r30, r18
    13e8:	e7 58       	subi	r30, 0x87	; 135
    13ea:	fc 4f       	sbci	r31, 0xFC	; 252
    13ec:	85 91       	lpm	r24, Z+
    13ee:	94 91       	lpm	r25, Z
    13f0:	90 93 66 02 	sts	0x0266, r25
    13f4:	80 93 65 02 	sts	0x0265, r24
    13f8:	f9 01       	movw	r30, r18
    13fa:	e7 59       	subi	r30, 0x97	; 151
    13fc:	fc 4f       	sbci	r31, 0xFC	; 252
    13fe:	85 91       	lpm	r24, Z+
    1400:	94 91       	lpm	r25, Z
    1402:	90 93 68 02 	sts	0x0268, r25
    1406:	80 93 67 02 	sts	0x0267, r24
    140a:	80 e1       	ldi	r24, 0x10	; 16
    140c:	84 1b       	sub	r24, r20
    140e:	8a bd       	out	0x2a, r24	; 42
    1410:	48 50       	subi	r20, 0x08	; 8
    1412:	4b bd       	out	0x2b, r20	; 43
    1414:	cb 01       	movw	r24, r22
    1416:	08 95       	ret

00001418 <DF_EraseBlock>:
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	8c 01       	movw	r16, r24
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    142a:	e0 91 00 01 	lds	r30, 0x0100
    142e:	f0 91 01 01 	lds	r31, 0x0101
    1432:	80 e5       	ldi	r24, 0x50	; 80
    1434:	09 95       	icall
    1436:	81 2f       	mov	r24, r17
    1438:	99 27       	eor	r25, r25
    143a:	e0 91 00 01 	lds	r30, 0x0100
    143e:	f0 91 01 01 	lds	r31, 0x0101
    1442:	09 95       	icall
    1444:	e0 91 00 01 	lds	r30, 0x0100
    1448:	f0 91 01 01 	lds	r31, 0x0101
    144c:	80 2f       	mov	r24, r16
    144e:	09 95       	icall
    1450:	e0 91 00 01 	lds	r30, 0x0100
    1454:	f0 91 01 01 	lds	r31, 0x0101
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	09 95       	icall
    145c:	0e 94 cd 09 	call	0x139a <DF_GetChipCharacteristics>
    1460:	88 23       	and	r24, r24
    1462:	e4 f7       	brge	.-8      	; 0x145c <DF_EraseBlock+0x44>
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	08 95       	ret

0000146a <DF_CopyFlashPageToBuffer>:
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	8c 01       	movw	r16, r24
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    147c:	e0 91 00 01 	lds	r30, 0x0100
    1480:	f0 91 01 01 	lds	r31, 0x0101
    1484:	83 e5       	ldi	r24, 0x53	; 83
    1486:	09 95       	icall
    1488:	8a b5       	in	r24, 0x2a	; 42
    148a:	98 01       	movw	r18, r16
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <DF_CopyFlashPageToBuffer+0x28>
    148e:	36 95       	lsr	r19
    1490:	27 95       	ror	r18
    1492:	8a 95       	dec	r24
    1494:	e2 f7       	brpl	.-8      	; 0x148e <DF_CopyFlashPageToBuffer+0x24>
    1496:	c9 01       	movw	r24, r18
    1498:	e0 91 00 01 	lds	r30, 0x0100
    149c:	f0 91 01 01 	lds	r31, 0x0101
    14a0:	09 95       	icall
    14a2:	8b b5       	in	r24, 0x2b	; 43
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DF_CopyFlashPageToBuffer+0x40>
    14a6:	00 0f       	add	r16, r16
    14a8:	11 1f       	adc	r17, r17
    14aa:	8a 95       	dec	r24
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DF_CopyFlashPageToBuffer+0x3c>
    14ae:	e0 91 00 01 	lds	r30, 0x0100
    14b2:	f0 91 01 01 	lds	r31, 0x0101
    14b6:	80 2f       	mov	r24, r16
    14b8:	09 95       	icall
    14ba:	e0 91 00 01 	lds	r30, 0x0100
    14be:	f0 91 01 01 	lds	r31, 0x0101
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	09 95       	icall
    14c6:	0e 94 cd 09 	call	0x139a <DF_GetChipCharacteristics>
    14ca:	88 23       	and	r24, r24
    14cc:	e4 f7       	brge	.-8      	; 0x14c6 <DF_CopyFlashPageToBuffer+0x5c>
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	08 95       	ret

000014d4 <DF_CopyBufferToFlashPage>:
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	8c 01       	movw	r16, r24
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    14e6:	e0 91 00 01 	lds	r30, 0x0100
    14ea:	f0 91 01 01 	lds	r31, 0x0101
    14ee:	83 e8       	ldi	r24, 0x83	; 131
    14f0:	09 95       	icall
    14f2:	8a b5       	in	r24, 0x2a	; 42
    14f4:	98 01       	movw	r18, r16
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DF_CopyBufferToFlashPage+0x28>
    14f8:	36 95       	lsr	r19
    14fa:	27 95       	ror	r18
    14fc:	8a 95       	dec	r24
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DF_CopyBufferToFlashPage+0x24>
    1500:	c9 01       	movw	r24, r18
    1502:	e0 91 00 01 	lds	r30, 0x0100
    1506:	f0 91 01 01 	lds	r31, 0x0101
    150a:	09 95       	icall
    150c:	8b b5       	in	r24, 0x2b	; 43
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DF_CopyBufferToFlashPage+0x40>
    1510:	00 0f       	add	r16, r16
    1512:	11 1f       	adc	r17, r17
    1514:	8a 95       	dec	r24
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DF_CopyBufferToFlashPage+0x3c>
    1518:	e0 91 00 01 	lds	r30, 0x0100
    151c:	f0 91 01 01 	lds	r31, 0x0101
    1520:	80 2f       	mov	r24, r16
    1522:	09 95       	icall
    1524:	e0 91 00 01 	lds	r30, 0x0100
    1528:	f0 91 01 01 	lds	r31, 0x0101
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	09 95       	icall
    1530:	0e 94 cd 09 	call	0x139a <DF_GetChipCharacteristics>
    1534:	88 23       	and	r24, r24
    1536:	e4 f7       	brge	.-8      	; 0x1530 <DF_CopyBufferToFlashPage+0x5c>
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	08 95       	ret

0000153e <DF_CheckCorrectOnboardChip>:
    153e:	0e 94 cd 09 	call	0x139a <DF_GetChipCharacteristics>
    1542:	80 91 67 02 	lds	r24, 0x0267
    1546:	90 91 68 02 	lds	r25, 0x0268
    154a:	80 50       	subi	r24, 0x00	; 0
    154c:	98 40       	sbci	r25, 0x08	; 8
    154e:	61 f4       	brne	.+24     	; 0x1568 <DF_CheckCorrectOnboardChip+0x2a>
    1550:	80 91 64 00 	lds	r24, 0x0064
    1554:	84 60       	ori	r24, 0x04	; 4
    1556:	80 93 64 00 	sts	0x0064, r24
    155a:	89 e5       	ldi	r24, 0x59	; 89
    155c:	93 e0       	ldi	r25, 0x03	; 3
    155e:	0e 94 55 03 	call	0x6aa <MAIN_ShowError>
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	08 95       	ret
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	08 95       	ret

0000156e <BUFF_InitialiseBuffer>:

// Routines:
void BUFF_InitialiseBuffer(void)
{
	StoreLoc    = (BuffType*)&RingBuffer[0]; // Set up the IN pointer to the start of the buffer
    156e:	8b e6       	ldi	r24, 0x6B	; 107
    1570:	92 e0       	ldi	r25, 0x02	; 2
    1572:	90 93 ac 02 	sts	0x02AC, r25
    1576:	80 93 ab 02 	sts	0x02AB, r24
	RetrieveLoc = (BuffType*)&RingBuffer[0]; // Set up the OUT pointer to the start of the buffer
    157a:	90 93 ae 02 	sts	0x02AE, r25
    157e:	80 93 ad 02 	sts	0x02AD, r24

	BuffElements = 0;                     // Reset the buffer elements counter
    1582:	10 92 af 02 	sts	0x02AF, r1
    1586:	08 95       	ret

00001588 <BUFF_StoreBuffByte>:
}

void BUFF_StoreBuffByte(BuffType DataToStore)
{
    1588:	98 2f       	mov	r25, r24
	if (BuffElements == BuffLen)          // Buffer full
    158a:	80 91 af 02 	lds	r24, 0x02AF
    158e:	80 34       	cpi	r24, 0x40	; 64
    1590:	29 f4       	brne	.+10     	; 0x159c <BUFF_StoreBuffByte+0x14>
	{
		MAIN_ShowError(PSTR("BUFF OVERFLOW"));
    1592:	81 e9       	ldi	r24, 0x91	; 145
    1594:	93 e0       	ldi	r25, 0x03	; 3
    1596:	0e 94 55 03 	call	0x6aa <MAIN_ShowError>
		return;
    159a:	08 95       	ret
	}
		
	*StoreLoc = DataToStore;              // Store the data
    159c:	e0 91 ab 02 	lds	r30, 0x02AB
    15a0:	f0 91 ac 02 	lds	r31, 0x02AC
    15a4:	90 83       	st	Z, r25

	StoreLoc++;                           // Increment the IN pointer to the next element
    15a6:	40 91 ab 02 	lds	r20, 0x02AB
    15aa:	50 91 ac 02 	lds	r21, 0x02AC
    15ae:	9a 01       	movw	r18, r20
    15b0:	2f 5f       	subi	r18, 0xFF	; 255
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	30 93 ac 02 	sts	0x02AC, r19
    15b8:	20 93 ab 02 	sts	0x02AB, r18
	BuffElements++;                       // Increment the total elements variable
    15bc:	80 91 af 02 	lds	r24, 0x02AF
    15c0:	8f 5f       	subi	r24, 0xFF	; 255
    15c2:	80 93 af 02 	sts	0x02AF, r24

	if (StoreLoc == (BuffType*)&RingBuffer[BuffLen])
    15c6:	2b 5a       	subi	r18, 0xAB	; 171
    15c8:	32 40       	sbci	r19, 0x02	; 2
    15ca:	31 f4       	brne	.+12     	; 0x15d8 <BUFF_StoreBuffByte+0x50>
		StoreLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    15cc:	4f 53       	subi	r20, 0x3F	; 63
    15ce:	50 40       	sbci	r21, 0x00	; 0
    15d0:	50 93 ac 02 	sts	0x02AC, r21
    15d4:	40 93 ab 02 	sts	0x02AB, r20
    15d8:	08 95       	ret

000015da <BUFF_GetBuffByte>:
}	

BuffType BUFF_GetBuffByte(void)
{
	if (!(BuffElements))                  // No elements in the buffer
    15da:	80 91 af 02 	lds	r24, 0x02AF
    15de:	88 23       	and	r24, r24
    15e0:	19 f4       	brne	.+6      	; 0x15e8 <BUFF_GetBuffByte+0xe>
		return 0;
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	08 95       	ret

	BuffType RetrievedData = *RetrieveLoc; // Grab the stored byte into a temp variable
    15e8:	20 91 ad 02 	lds	r18, 0x02AD
    15ec:	30 91 ae 02 	lds	r19, 0x02AE
    15f0:	f9 01       	movw	r30, r18
    15f2:	91 91       	ld	r25, Z+

	RetrieveLoc++;                         // Increment the OUT pointer to the next element if flag set
    15f4:	f0 93 ae 02 	sts	0x02AE, r31
    15f8:	e0 93 ad 02 	sts	0x02AD, r30
	BuffElements--;                        // Decrement the total elements variable
    15fc:	80 91 af 02 	lds	r24, 0x02AF
    1600:	81 50       	subi	r24, 0x01	; 1
    1602:	80 93 af 02 	sts	0x02AF, r24
	
	if (RetrieveLoc == (BuffType*)&RingBuffer[BuffLen])
    1606:	eb 5a       	subi	r30, 0xAB	; 171
    1608:	f2 40       	sbci	r31, 0x02	; 2
    160a:	31 f4       	brne	.+12     	; 0x1618 <BUFF_GetBuffByte+0x3e>
		RetrieveLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    160c:	2f 53       	subi	r18, 0x3F	; 63
    160e:	30 40       	sbci	r19, 0x00	; 0
    1610:	30 93 ae 02 	sts	0x02AE, r19
    1614:	20 93 ad 02 	sts	0x02AD, r18
		
	return RetrievedData;                 // Return the retrieved data
    1618:	89 2f       	mov	r24, r25
    161a:	99 27       	eor	r25, r25
}
    161c:	08 95       	ret

0000161e <__vector_9>:
// ======================================================================================

// Timeout = ((F_CPU / 64) / (65535 * TIMEOUT_TICKSBEFORETIMEOUT)) per second
ISR(TIMER1_OVF_vect, ISR_NOBLOCK)
{
    161e:	78 94       	sei
    1620:	1f 92       	push	r1
    1622:	0f 92       	push	r0
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	0f 92       	push	r0
    1628:	11 24       	eor	r1, r1
    162a:	8f 93       	push	r24
	if (Ticks++ == TIMEOUT_TICKSBEFORETIMEOUT)
    162c:	80 91 07 01 	lds	r24, 0x0107
    1630:	8f 5f       	subi	r24, 0xFF	; 255
    1632:	80 93 07 01 	sts	0x0107, r24
    1636:	80 91 07 01 	lds	r24, 0x0107
    163a:	87 30       	cpi	r24, 0x07	; 7
    163c:	29 f4       	brne	.+10     	; 0x1648 <__vector_9+0x2a>
	{
	   Ticks   = 0;
    163e:	10 92 07 01 	sts	0x0107, r1
	   TimeOut = TRUE;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	80 93 06 01 	sts	0x0106, r24
    1648:	8f 91       	pop	r24
    164a:	0f 90       	pop	r0
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	0f 90       	pop	r0
    1650:	1f 90       	pop	r1
    1652:	18 95       	reti

00001654 <TIMEOUT_SetupTimeoutTimer>:
	}
}

// ======================================================================================

void TIMEOUT_SetupTimeoutTimer(void)
{
	TCCR1A = 0;
    1654:	10 92 80 00 	sts	0x0080, r1
	TIMEOUT_TIMER_OFF();
    1658:	10 92 81 00 	sts	0x0081, r1
    165c:	10 92 07 01 	sts	0x0107, r1
    1660:	10 92 85 00 	sts	0x0085, r1
    1664:	10 92 84 00 	sts	0x0084, r1
	TCCR1C = 0;
    1668:	10 92 82 00 	sts	0x0082, r1
	
	TIMSK1 = (1 << TOIE1); // Turn timer 1 overflow interrupt on
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	80 93 6f 00 	sts	0x006F, r24
    1672:	08 95       	ret

00001674 <PD_SetupDFAddressCounters>:
}

void PD_SetupDFAddressCounters(void)
{
	uint32_t StartAddress = CurrAddress;
    1674:	20 91 09 01 	lds	r18, 0x0109
    1678:	30 91 0a 01 	lds	r19, 0x010A
    167c:	40 91 0b 01 	lds	r20, 0x010B
    1680:	50 91 0c 01 	lds	r21, 0x010C

	CurrPageAddress = 0;
    1684:	10 92 6a 02 	sts	0x026A, r1
    1688:	10 92 69 02 	sts	0x0269, r1

	while (StartAddress > DataflashInfo.PageSize)      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DataflashInfo.PageSize;         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    168c:	80 91 65 02 	lds	r24, 0x0265
    1690:	90 91 66 02 	lds	r25, 0x0266
    1694:	aa 27       	eor	r26, r26
    1696:	bb 27       	eor	r27, r27
    1698:	82 17       	cp	r24, r18
    169a:	93 07       	cpc	r25, r19
    169c:	a4 07       	cpc	r26, r20
    169e:	b5 07       	cpc	r27, r21
    16a0:	88 f4       	brcc	.+34     	; 0x16c4 <PD_SetupDFAddressCounters+0x50>
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	28 1b       	sub	r18, r24
    16a8:	39 0b       	sbc	r19, r25
    16aa:	4a 0b       	sbc	r20, r26
    16ac:	5b 0b       	sbc	r21, r27
    16ae:	6f 5f       	subi	r22, 0xFF	; 255
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
    16b2:	82 17       	cp	r24, r18
    16b4:	93 07       	cpc	r25, r19
    16b6:	a4 07       	cpc	r26, r20
    16b8:	b5 07       	cpc	r27, r21
    16ba:	a8 f3       	brcs	.-22     	; 0x16a6 <PD_SetupDFAddressCounters+0x32>
    16bc:	70 93 6a 02 	sts	0x026A, r23
    16c0:	60 93 69 02 	sts	0x0269, r22
	}
	
	CurrBuffByte = (uint16_t)StartAddress;              // The buffer byte is the remainder
    16c4:	30 93 63 02 	sts	0x0263, r19
    16c8:	20 93 62 02 	sts	0x0262, r18
    16cc:	08 95       	ret

000016ce <PD_StoreDataflashByte>:
}

void PD_StoreDataflashByte(uint8_t Data)
{
    16ce:	cf 93       	push	r28
    16d0:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DataflashInfo.PageSize)
    16d2:	20 91 62 02 	lds	r18, 0x0262
    16d6:	30 91 63 02 	lds	r19, 0x0263
    16da:	80 91 65 02 	lds	r24, 0x0265
    16de:	90 91 66 02 	lds	r25, 0x0266
    16e2:	28 17       	cp	r18, r24
    16e4:	39 07       	cpc	r19, r25
    16e6:	a9 f4       	brne	.+42     	; 0x1712 <PD_StoreDataflashByte+0x44>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    16e8:	80 91 69 02 	lds	r24, 0x0269
    16ec:	90 91 6a 02 	lds	r25, 0x026A
    16f0:	9c 01       	movw	r18, r24
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	90 93 6a 02 	sts	0x026A, r25
    16f8:	80 93 69 02 	sts	0x0269, r24
    16fc:	c9 01       	movw	r24, r18
    16fe:	0e 94 6a 0a 	call	0x14d4 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 a8 09 	call	0x1350 <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    170a:	10 92 63 02 	sts	0x0263, r1
    170e:	10 92 62 02 	sts	0x0262, r1
	}
	
	USI_SPITransmit(Data);                                 // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    1712:	8c 2f       	mov	r24, r28
    1714:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
	CurrBuffByte++;
    1718:	80 91 62 02 	lds	r24, 0x0262
    171c:	90 91 63 02 	lds	r25, 0x0263
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	90 93 63 02 	sts	0x0263, r25
    1726:	80 93 62 02 	sts	0x0262, r24
    172a:	cf 91       	pop	r28
    172c:	08 95       	ret

0000172e <PD_InterpretAVRISPPacket>:
    172e:	df 92       	push	r13
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	dd 24       	eor	r13, r13
    173e:	80 91 12 01 	lds	r24, 0x0112
    1742:	99 27       	eor	r25, r25
    1744:	86 31       	cpi	r24, 0x16	; 22
    1746:	91 05       	cpc	r25, r1
    1748:	09 f4       	brne	.+2      	; 0x174c <PD_InterpretAVRISPPacket+0x1e>
    174a:	00 c1       	rjmp	.+512    	; 0x194c <PD_InterpretAVRISPPacket+0x21e>
    174c:	87 31       	cpi	r24, 0x17	; 23
    174e:	91 05       	cpc	r25, r1
    1750:	b4 f4       	brge	.+44     	; 0x177e <PD_InterpretAVRISPPacket+0x50>
    1752:	82 31       	cpi	r24, 0x12	; 18
    1754:	91 05       	cpc	r25, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <PD_InterpretAVRISPPacket+0x2c>
    1758:	6f c0       	rjmp	.+222    	; 0x1838 <PD_InterpretAVRISPPacket+0x10a>
    175a:	83 31       	cpi	r24, 0x13	; 19
    175c:	91 05       	cpc	r25, r1
    175e:	3c f4       	brge	.+14     	; 0x176e <PD_InterpretAVRISPPacket+0x40>
    1760:	80 31       	cpi	r24, 0x10	; 16
    1762:	91 05       	cpc	r25, r1
    1764:	31 f1       	breq	.+76     	; 0x17b2 <PD_InterpretAVRISPPacket+0x84>
    1766:	41 97       	sbiw	r24, 0x11	; 17
    1768:	09 f4       	brne	.+2      	; 0x176c <PD_InterpretAVRISPPacket+0x3e>
    176a:	46 c0       	rjmp	.+140    	; 0x17f8 <PD_InterpretAVRISPPacket+0xca>
    176c:	40 c1       	rjmp	.+640    	; 0x19ee <PD_InterpretAVRISPPacket+0x2c0>
    176e:	84 31       	cpi	r24, 0x14	; 20
    1770:	91 05       	cpc	r25, r1
    1772:	09 f4       	brne	.+2      	; 0x1776 <PD_InterpretAVRISPPacket+0x48>
    1774:	8a c0       	rjmp	.+276    	; 0x188a <PD_InterpretAVRISPPacket+0x15c>
    1776:	45 97       	sbiw	r24, 0x15	; 21
    1778:	0c f0       	brlt	.+2      	; 0x177c <PD_InterpretAVRISPPacket+0x4e>
    177a:	af c0       	rjmp	.+350    	; 0x18da <PD_InterpretAVRISPPacket+0x1ac>
    177c:	7f c0       	rjmp	.+254    	; 0x187c <PD_InterpretAVRISPPacket+0x14e>
    177e:	89 31       	cpi	r24, 0x19	; 25
    1780:	91 05       	cpc	r25, r1
    1782:	09 f4       	brne	.+2      	; 0x1786 <PD_InterpretAVRISPPacket+0x58>
    1784:	70 c0       	rjmp	.+224    	; 0x1866 <PD_InterpretAVRISPPacket+0x138>
    1786:	8a 31       	cpi	r24, 0x1A	; 26
    1788:	91 05       	cpc	r25, r1
    178a:	44 f4       	brge	.+16     	; 0x179c <PD_InterpretAVRISPPacket+0x6e>
    178c:	87 31       	cpi	r24, 0x17	; 23
    178e:	91 05       	cpc	r25, r1
    1790:	09 f4       	brne	.+2      	; 0x1794 <PD_InterpretAVRISPPacket+0x66>
    1792:	69 c0       	rjmp	.+210    	; 0x1866 <PD_InterpretAVRISPPacket+0x138>
    1794:	48 97       	sbiw	r24, 0x18	; 24
    1796:	09 f4       	brne	.+2      	; 0x179a <PD_InterpretAVRISPPacket+0x6c>
    1798:	58 c0       	rjmp	.+176    	; 0x184a <PD_InterpretAVRISPPacket+0x11c>
    179a:	29 c1       	rjmp	.+594    	; 0x19ee <PD_InterpretAVRISPPacket+0x2c0>
    179c:	8b 31       	cpi	r24, 0x1B	; 27
    179e:	91 05       	cpc	r25, r1
    17a0:	e9 f1       	breq	.+122    	; 0x181c <PD_InterpretAVRISPPacket+0xee>
    17a2:	8b 31       	cpi	r24, 0x1B	; 27
    17a4:	91 05       	cpc	r25, r1
    17a6:	0c f4       	brge	.+2      	; 0x17aa <PD_InterpretAVRISPPacket+0x7c>
    17a8:	50 c0       	rjmp	.+160    	; 0x184a <PD_InterpretAVRISPPacket+0x11c>
    17aa:	4c 97       	sbiw	r24, 0x1c	; 28
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <PD_InterpretAVRISPPacket+0x82>
    17ae:	4d c0       	rjmp	.+154    	; 0x184a <PD_InterpretAVRISPPacket+0x11c>
    17b0:	1e c1       	rjmp	.+572    	; 0x19ee <PD_InterpretAVRISPPacket+0x2c0>
    17b2:	82 e0       	ldi	r24, 0x02	; 2
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	90 93 0f 01 	sts	0x010F, r25
    17ba:	80 93 0e 01 	sts	0x010E, r24
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    17c4:	0e 94 cd 09 	call	0x139a <DF_GetChipCharacteristics>
    17c8:	80 91 64 02 	lds	r24, 0x0264
    17cc:	88 23       	and	r24, r24
    17ce:	59 f0       	breq	.+22     	; 0x17e6 <PD_InterpretAVRISPPacket+0xb8>
    17d0:	8f e9       	ldi	r24, 0x9F	; 159
    17d2:	93 e0       	ldi	r25, 0x03	; 3
    17d4:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	80 93 0d 01 	sts	0x010D, r24
    17de:	81 b3       	in	r24, 0x11	; 17
    17e0:	8f 7c       	andi	r24, 0xCF	; 207
    17e2:	80 62       	ori	r24, 0x20	; 32
    17e4:	17 c0       	rjmp	.+46     	; 0x1814 <PD_InterpretAVRISPPacket+0xe6>
    17e6:	89 e5       	ldi	r24, 0x59	; 89
    17e8:	93 e0       	ldi	r25, 0x03	; 3
    17ea:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
    17ee:	8d 2d       	mov	r24, r13
    17f0:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    17f4:	80 ec       	ldi	r24, 0xC0	; 192
    17f6:	02 c1       	rjmp	.+516    	; 0x19fc <PD_InterpretAVRISPPacket+0x2ce>
    17f8:	82 e0       	ldi	r24, 0x02	; 2
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	90 93 0f 01 	sts	0x010F, r25
    1800:	80 93 0e 01 	sts	0x010E, r24
    1804:	d0 92 0d 01 	sts	0x010D, r13
    1808:	8d 2d       	mov	r24, r13
    180a:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    180e:	81 b3       	in	r24, 0x11	; 17
    1810:	8f 7c       	andi	r24, 0xCF	; 207
    1812:	80 61       	ori	r24, 0x10	; 16
    1814:	81 bb       	out	0x11, r24	; 17
    1816:	d0 92 13 01 	sts	0x0113, r13
    181a:	f2 c0       	rjmp	.+484    	; 0x1a00 <PD_InterpretAVRISPPacket+0x2d2>
    181c:	84 e0       	ldi	r24, 0x04	; 4
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	90 93 0f 01 	sts	0x010F, r25
    1824:	80 93 0e 01 	sts	0x010E, r24
    1828:	d0 92 13 01 	sts	0x0113, r13
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	80 93 14 01 	sts	0x0114, r24
    1832:	d0 92 15 01 	sts	0x0115, r13
    1836:	e4 c0       	rjmp	.+456    	; 0x1a00 <PD_InterpretAVRISPPacket+0x2d2>
    1838:	82 e0       	ldi	r24, 0x02	; 2
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	90 93 0f 01 	sts	0x010F, r25
    1840:	80 93 0e 01 	sts	0x010E, r24
    1844:	e1 e0       	ldi	r30, 0x01	; 1
    1846:	de 2e       	mov	r13, r30
    1848:	7e c0       	rjmp	.+252    	; 0x1946 <PD_InterpretAVRISPPacket+0x218>
    184a:	84 e0       	ldi	r24, 0x04	; 4
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	90 93 0f 01 	sts	0x010F, r25
    1852:	80 93 0e 01 	sts	0x010E, r24
    1856:	10 92 13 01 	sts	0x0113, r1
    185a:	8f ef       	ldi	r24, 0xFF	; 255
    185c:	80 93 14 01 	sts	0x0114, r24
    1860:	10 92 15 01 	sts	0x0115, r1
    1864:	cd c0       	rjmp	.+410    	; 0x1a00 <PD_InterpretAVRISPPacket+0x2d2>
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	90 93 0f 01 	sts	0x010F, r25
    186e:	80 93 0e 01 	sts	0x010E, r24
    1872:	10 92 13 01 	sts	0x0113, r1
    1876:	10 92 14 01 	sts	0x0114, r1
    187a:	c2 c0       	rjmp	.+388    	; 0x1a00 <PD_InterpretAVRISPPacket+0x2d2>
    187c:	82 e0       	ldi	r24, 0x02	; 2
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	90 93 0f 01 	sts	0x010F, r25
    1884:	80 93 0e 01 	sts	0x010E, r24
    1888:	5e c0       	rjmp	.+188    	; 0x1946 <PD_InterpretAVRISPPacket+0x218>
    188a:	80 91 13 01 	lds	r24, 0x0113
    188e:	99 27       	eor	r25, r25
    1890:	98 2f       	mov	r25, r24
    1892:	88 27       	eor	r24, r24
    1894:	20 91 14 01 	lds	r18, 0x0114
    1898:	33 27       	eor	r19, r19
    189a:	82 2b       	or	r24, r18
    189c:	93 2b       	or	r25, r19
    189e:	03 96       	adiw	r24, 0x03	; 3
    18a0:	90 93 0f 01 	sts	0x010F, r25
    18a4:	80 93 0e 01 	sts	0x010E, r24
    18a8:	21 e0       	ldi	r18, 0x01	; 1
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	02 97       	sbiw	r24, 0x02	; 2
    18ae:	28 17       	cp	r18, r24
    18b0:	39 07       	cpc	r19, r25
    18b2:	48 f4       	brcc	.+18     	; 0x18c6 <PD_InterpretAVRISPPacket+0x198>
    18b4:	4f ef       	ldi	r20, 0xFF	; 255
    18b6:	e3 e1       	ldi	r30, 0x13	; 19
    18b8:	f1 e0       	ldi	r31, 0x01	; 1
    18ba:	41 93       	st	Z+, r20
    18bc:	2f 5f       	subi	r18, 0xFF	; 255
    18be:	3f 4f       	sbci	r19, 0xFF	; 255
    18c0:	28 17       	cp	r18, r24
    18c2:	39 07       	cpc	r19, r25
    18c4:	d0 f3       	brcs	.-12     	; 0x18ba <PD_InterpretAVRISPPacket+0x18c>
    18c6:	10 92 13 01 	sts	0x0113, r1
    18ca:	e0 91 0e 01 	lds	r30, 0x010E
    18ce:	f0 91 0f 01 	lds	r31, 0x010F
    18d2:	ef 5e       	subi	r30, 0xEF	; 239
    18d4:	fe 4f       	sbci	r31, 0xFE	; 254
    18d6:	10 82       	st	Z, r1
    18d8:	93 c0       	rjmp	.+294    	; 0x1a00 <PD_InterpretAVRISPPacket+0x2d2>
    18da:	0e 94 3a 0b 	call	0x1674 <PD_SetupDFAddressCounters>
    18de:	80 91 69 02 	lds	r24, 0x0269
    18e2:	90 91 6a 02 	lds	r25, 0x026A
    18e6:	0e 94 35 0a 	call	0x146a <DF_CopyFlashPageToBuffer>
    18ea:	80 91 62 02 	lds	r24, 0x0262
    18ee:	90 91 63 02 	lds	r25, 0x0263
    18f2:	0e 94 a8 09 	call	0x1350 <DF_BufferWriteEnable>
    18f6:	80 91 13 01 	lds	r24, 0x0113
    18fa:	99 27       	eor	r25, r25
    18fc:	d8 2f       	mov	r29, r24
    18fe:	cc 27       	eor	r28, r28
    1900:	80 91 14 01 	lds	r24, 0x0114
    1904:	99 27       	eor	r25, r25
    1906:	c8 2b       	or	r28, r24
    1908:	d9 2b       	or	r29, r25
    190a:	00 e0       	ldi	r16, 0x00	; 0
    190c:	10 e0       	ldi	r17, 0x00	; 0
    190e:	0c 17       	cp	r16, r28
    1910:	1d 07       	cpc	r17, r29
    1912:	c8 f4       	brcc	.+50     	; 0x1946 <PD_InterpretAVRISPPacket+0x218>
    1914:	5c e1       	ldi	r21, 0x1C	; 28
    1916:	e5 2e       	mov	r14, r21
    1918:	51 e0       	ldi	r21, 0x01	; 1
    191a:	f5 2e       	mov	r15, r21
    191c:	f7 01       	movw	r30, r14
    191e:	81 91       	ld	r24, Z+
    1920:	7f 01       	movw	r14, r30
    1922:	0e 94 67 0b 	call	0x16ce <PD_StoreDataflashByte>
    1926:	80 91 62 02 	lds	r24, 0x0262
    192a:	90 91 63 02 	lds	r25, 0x0263
    192e:	01 96       	adiw	r24, 0x01	; 1
    1930:	90 93 63 02 	sts	0x0263, r25
    1934:	80 93 62 02 	sts	0x0262, r24
    1938:	0e 94 20 0e 	call	0x1c40 <V2P_IncrementCurrAddress>
    193c:	0f 5f       	subi	r16, 0xFF	; 255
    193e:	1f 4f       	sbci	r17, 0xFF	; 255
    1940:	0c 17       	cp	r16, r28
    1942:	1d 07       	cpc	r17, r29
    1944:	58 f3       	brcs	.-42     	; 0x191c <PD_InterpretAVRISPPacket+0x1ee>
    1946:	10 92 13 01 	sts	0x0113, r1
    194a:	5a c0       	rjmp	.+180    	; 0x1a00 <PD_InterpretAVRISPPacket+0x2d2>
    194c:	0e 94 3a 0b 	call	0x1674 <PD_SetupDFAddressCounters>
    1950:	80 91 69 02 	lds	r24, 0x0269
    1954:	90 91 6a 02 	lds	r25, 0x026A
    1958:	0e 94 35 0a 	call	0x146a <DF_CopyFlashPageToBuffer>
    195c:	80 91 13 01 	lds	r24, 0x0113
    1960:	99 27       	eor	r25, r25
    1962:	d8 2f       	mov	r29, r24
    1964:	cc 27       	eor	r28, r28
    1966:	80 91 14 01 	lds	r24, 0x0114
    196a:	99 27       	eor	r25, r25
    196c:	c8 2b       	or	r28, r24
    196e:	d9 2b       	or	r29, r25
    1970:	00 e0       	ldi	r16, 0x00	; 0
    1972:	10 e0       	ldi	r17, 0x00	; 0
    1974:	0c 17       	cp	r16, r28
    1976:	1d 07       	cpc	r17, r29
    1978:	70 f5       	brcc	.+92     	; 0x19d6 <PD_InterpretAVRISPPacket+0x2a8>
    197a:	34 e1       	ldi	r19, 0x14	; 20
    197c:	e3 2e       	mov	r14, r19
    197e:	31 e0       	ldi	r19, 0x01	; 1
    1980:	f3 2e       	mov	r15, r19
    1982:	20 91 62 02 	lds	r18, 0x0262
    1986:	30 91 63 02 	lds	r19, 0x0263
    198a:	80 91 65 02 	lds	r24, 0x0265
    198e:	90 91 66 02 	lds	r25, 0x0266
    1992:	28 17       	cp	r18, r24
    1994:	39 07       	cpc	r19, r25
    1996:	41 f4       	brne	.+16     	; 0x19a8 <PD_InterpretAVRISPPacket+0x27a>
    1998:	0e 94 3a 0b 	call	0x1674 <PD_SetupDFAddressCounters>
    199c:	80 91 69 02 	lds	r24, 0x0269
    19a0:	90 91 6a 02 	lds	r25, 0x026A
    19a4:	0e 94 35 0a 	call	0x146a <DF_CopyFlashPageToBuffer>
    19a8:	80 91 62 02 	lds	r24, 0x0262
    19ac:	90 91 63 02 	lds	r25, 0x0263
    19b0:	9c 01       	movw	r18, r24
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	90 93 63 02 	sts	0x0263, r25
    19b8:	80 93 62 02 	sts	0x0262, r24
    19bc:	c9 01       	movw	r24, r18
    19be:	0e 94 3a 09 	call	0x1274 <DF_ReadBufferByte>
    19c2:	f7 01       	movw	r30, r14
    19c4:	81 93       	st	Z+, r24
    19c6:	7f 01       	movw	r14, r30
    19c8:	0e 94 20 0e 	call	0x1c40 <V2P_IncrementCurrAddress>
    19cc:	0f 5f       	subi	r16, 0xFF	; 255
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	0c 17       	cp	r16, r28
    19d2:	1d 07       	cpc	r17, r29
    19d4:	b0 f2       	brcs	.-84     	; 0x1982 <PD_InterpretAVRISPPacket+0x254>
    19d6:	23 96       	adiw	r28, 0x03	; 3
    19d8:	d0 93 0f 01 	sts	0x010F, r29
    19dc:	c0 93 0e 01 	sts	0x010E, r28
    19e0:	23 97       	sbiw	r28, 0x03	; 3
    19e2:	10 92 13 01 	sts	0x0113, r1
    19e6:	ce 5e       	subi	r28, 0xEE	; 238
    19e8:	de 4f       	sbci	r29, 0xFE	; 254
    19ea:	1a 82       	std	Y+2, r1	; 0x02
    19ec:	09 c0       	rjmp	.+18     	; 0x1a00 <PD_InterpretAVRISPPacket+0x2d2>
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	90 93 0f 01 	sts	0x010F, r25
    19f6:	80 93 0e 01 	sts	0x010E, r24
    19fa:	89 ec       	ldi	r24, 0xC9	; 201
    19fc:	80 93 13 01 	sts	0x0113, r24
    1a00:	0e 94 48 0d 	call	0x1a90 <V2P_SendPacket>
    1a04:	dd 20       	and	r13, r13
    1a06:	d9 f0       	breq	.+54     	; 0x1a3e <PD_InterpretAVRISPPacket+0x310>
    1a08:	85 e1       	ldi	r24, 0x15	; 21
    1a0a:	92 e0       	ldi	r25, 0x02	; 2
    1a0c:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
    1a10:	c0 e0       	ldi	r28, 0x00	; 0
    1a12:	d0 e0       	ldi	r29, 0x00	; 0
    1a14:	80 91 67 02 	lds	r24, 0x0267
    1a18:	90 91 68 02 	lds	r25, 0x0268
    1a1c:	23 e0       	ldi	r18, 0x03	; 3
    1a1e:	96 95       	lsr	r25
    1a20:	87 95       	ror	r24
    1a22:	2a 95       	dec	r18
    1a24:	e1 f7       	brne	.-8      	; 0x1a1e <PD_InterpretAVRISPPacket+0x2f0>
    1a26:	c8 17       	cp	r28, r24
    1a28:	d9 07       	cpc	r29, r25
    1a2a:	28 f4       	brcc	.+10     	; 0x1a36 <PD_InterpretAVRISPPacket+0x308>
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	0e 94 0c 0a 	call	0x1418 <DF_EraseBlock>
    1a32:	21 96       	adiw	r28, 0x01	; 1
    1a34:	ef cf       	rjmp	.-34     	; 0x1a14 <PD_InterpretAVRISPPacket+0x2e6>
    1a36:	8f e9       	ldi	r24, 0x9F	; 159
    1a38:	93 e0       	ldi	r25, 0x03	; 3
    1a3a:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	1f 91       	pop	r17
    1a44:	0f 91       	pop	r16
    1a46:	ff 90       	pop	r15
    1a48:	ef 90       	pop	r14
    1a4a:	df 90       	pop	r13
    1a4c:	08 95       	ret

00001a4e <V2P_GetChecksum>:
	
	/* Checksum for the V2 protocol is comprised of an XOR of all the packet 
      bytes, including the start, sequence number, size and token bytes.    */
	
	CheckSumByte  = MESSAGE_START;
    1a4e:	6b e1       	ldi	r22, 0x1B	; 27
	CheckSumByte ^= SequenceNum;
    1a50:	80 91 10 01 	lds	r24, 0x0110
    1a54:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize >> 8);
    1a56:	20 91 0e 01 	lds	r18, 0x010E
    1a5a:	30 91 0f 01 	lds	r19, 0x010F
    1a5e:	83 2f       	mov	r24, r19
    1a60:	99 27       	eor	r25, r25
    1a62:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize);
    1a64:	80 91 0e 01 	lds	r24, 0x010E
    1a68:	68 27       	eor	r22, r24
	CheckSumByte ^= TOKEN;
    1a6a:	8e e0       	ldi	r24, 0x0E	; 14
    1a6c:	68 27       	eor	r22, r24
	
	for (uint16_t CByteIndex = 0; CByteIndex < MessageSize; CByteIndex++)
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	42 17       	cp	r20, r18
    1a74:	53 07       	cpc	r21, r19
    1a76:	48 f4       	brcc	.+18     	; 0x1a8a <V2P_GetChecksum+0x3c>
    1a78:	e2 e1       	ldi	r30, 0x12	; 18
    1a7a:	f1 e0       	ldi	r31, 0x01	; 1
	   CheckSumByte ^= PacketBytes[CByteIndex];
    1a7c:	81 91       	ld	r24, Z+
    1a7e:	68 27       	eor	r22, r24
    1a80:	4f 5f       	subi	r20, 0xFF	; 255
    1a82:	5f 4f       	sbci	r21, 0xFF	; 255
    1a84:	42 17       	cp	r20, r18
    1a86:	53 07       	cpc	r21, r19
    1a88:	c8 f3       	brcs	.-14     	; 0x1a7c <V2P_GetChecksum+0x2e>

	return CheckSumByte;
}
    1a8a:	86 2f       	mov	r24, r22
    1a8c:	99 27       	eor	r25, r25
    1a8e:	08 95       	ret

00001a90 <V2P_SendPacket>:
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	8b e1       	ldi	r24, 0x1B	; 27
    1a9a:	0e 94 3b 08 	call	0x1076 <USART_Tx>
    1a9e:	80 91 10 01 	lds	r24, 0x0110
    1aa2:	0e 94 3b 08 	call	0x1076 <USART_Tx>
    1aa6:	80 91 0f 01 	lds	r24, 0x010F
    1aaa:	0e 94 3b 08 	call	0x1076 <USART_Tx>
    1aae:	80 91 0e 01 	lds	r24, 0x010E
    1ab2:	0e 94 3b 08 	call	0x1076 <USART_Tx>
    1ab6:	8e e0       	ldi	r24, 0x0E	; 14
    1ab8:	0e 94 3b 08 	call	0x1076 <USART_Tx>
    1abc:	c0 e0       	ldi	r28, 0x00	; 0
    1abe:	d0 e0       	ldi	r29, 0x00	; 0
    1ac0:	80 91 0e 01 	lds	r24, 0x010E
    1ac4:	90 91 0f 01 	lds	r25, 0x010F
    1ac8:	c8 17       	cp	r28, r24
    1aca:	d9 07       	cpc	r29, r25
    1acc:	78 f4       	brcc	.+30     	; 0x1aec <V2P_SendPacket+0x5c>
    1ace:	02 e1       	ldi	r16, 0x12	; 18
    1ad0:	11 e0       	ldi	r17, 0x01	; 1
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	81 91       	ld	r24, Z+
    1ad6:	8f 01       	movw	r16, r30
    1ad8:	0e 94 3b 08 	call	0x1076 <USART_Tx>
    1adc:	21 96       	adiw	r28, 0x01	; 1
    1ade:	80 91 0e 01 	lds	r24, 0x010E
    1ae2:	90 91 0f 01 	lds	r25, 0x010F
    1ae6:	c8 17       	cp	r28, r24
    1ae8:	d9 07       	cpc	r29, r25
    1aea:	98 f3       	brcs	.-26     	; 0x1ad2 <V2P_SendPacket+0x42>
    1aec:	0e 94 27 0d 	call	0x1a4e <V2P_GetChecksum>
    1af0:	0e 94 3b 08 	call	0x1076 <USART_Tx>
    1af4:	80 91 10 01 	lds	r24, 0x0110
    1af8:	90 91 11 01 	lds	r25, 0x0111
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	90 93 11 01 	sts	0x0111, r25
    1b02:	80 93 10 01 	sts	0x0110, r24
    1b06:	df 91       	pop	r29
    1b08:	cf 91       	pop	r28
    1b0a:	1f 91       	pop	r17
    1b0c:	0f 91       	pop	r16
    1b0e:	08 95       	ret

00001b10 <V2P_GetSetParamater>:

void V2P_GetSetParamater(void)
{
	uint8_t Param_Name = PacketBytes[1];    // Save the parameter number
    1b10:	20 91 13 01 	lds	r18, 0x0113

	MessageSize = 3;                        // Set the default response message size to 3 bytes     
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	90 93 0f 01 	sts	0x010F, r25
    1b1c:	80 93 0e 01 	sts	0x010E, r24
	PacketBytes[1] = STATUS_CMD_OK;         // Set the default response to OK
    1b20:	10 92 13 01 	sts	0x0113, r1

	switch (Param_Name)                    // Switch based on the recieved parameter byte
    1b24:	e2 2f       	mov	r30, r18
    1b26:	ff 27       	eor	r31, r31
    1b28:	e8 39       	cpi	r30, 0x98	; 152
    1b2a:	f1 05       	cpc	r31, r1
    1b2c:	ac f4       	brge	.+42     	; 0x1b58 <V2P_GetSetParamater+0x48>
    1b2e:	e6 39       	cpi	r30, 0x96	; 150
    1b30:	f1 05       	cpc	r31, r1
    1b32:	0c f0       	brlt	.+2      	; 0x1b36 <V2P_GetSetParamater+0x26>
    1b34:	6b c0       	rjmp	.+214    	; 0x1c0c <V2P_GetSetParamater+0xfc>
    1b36:	e1 38       	cpi	r30, 0x81	; 129
    1b38:	f1 05       	cpc	r31, r1
    1b3a:	f9 f0       	breq	.+62     	; 0x1b7a <V2P_GetSetParamater+0x6a>
    1b3c:	e2 38       	cpi	r30, 0x82	; 130
    1b3e:	f1 05       	cpc	r31, r1
    1b40:	24 f4       	brge	.+8      	; 0x1b4a <V2P_GetSetParamater+0x3a>
    1b42:	e0 38       	cpi	r30, 0x80	; 128
    1b44:	f1 05       	cpc	r31, r1
    1b46:	b9 f0       	breq	.+46     	; 0x1b76 <V2P_GetSetParamater+0x66>
    1b48:	6f c0       	rjmp	.+222    	; 0x1c28 <V2P_GetSetParamater+0x118>
    1b4a:	cf 01       	movw	r24, r30
    1b4c:	80 59       	subi	r24, 0x90	; 144
    1b4e:	90 40       	sbci	r25, 0x00	; 0
    1b50:	03 97       	sbiw	r24, 0x03	; 3
    1b52:	08 f0       	brcs	.+2      	; 0x1b56 <V2P_GetSetParamater+0x46>
    1b54:	69 c0       	rjmp	.+210    	; 0x1c28 <V2P_GetSetParamater+0x118>
    1b56:	13 c0       	rjmp	.+38     	; 0x1b7e <V2P_GetSetParamater+0x6e>
    1b58:	ee 39       	cpi	r30, 0x9E	; 158
    1b5a:	f1 05       	cpc	r31, r1
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <V2P_GetSetParamater+0x50>
    1b5e:	3b c0       	rjmp	.+118    	; 0x1bd6 <V2P_GetSetParamater+0xc6>
    1b60:	ef 39       	cpi	r30, 0x9F	; 159
    1b62:	f1 05       	cpc	r31, r1
    1b64:	24 f4       	brge	.+8      	; 0x1b6e <V2P_GetSetParamater+0x5e>
    1b66:	e8 39       	cpi	r30, 0x98	; 152
    1b68:	f1 05       	cpc	r31, r1
    1b6a:	f9 f0       	breq	.+62     	; 0x1baa <V2P_GetSetParamater+0x9a>
    1b6c:	5d c0       	rjmp	.+186    	; 0x1c28 <V2P_GetSetParamater+0x118>
    1b6e:	ef 39       	cpi	r30, 0x9F	; 159
    1b70:	f1 05       	cpc	r31, r1
    1b72:	49 f0       	breq	.+18     	; 0x1b86 <V2P_GetSetParamater+0x76>
    1b74:	59 c0       	rjmp	.+178    	; 0x1c28 <V2P_GetSetParamater+0x118>
	{
		case PARAM_BUILD_NUMBER_LOW:
			PacketBytes[2] = VERSION_MINOR;
    1b76:	83 e0       	ldi	r24, 0x03	; 3
    1b78:	37 c0       	rjmp	.+110    	; 0x1be8 <V2P_GetSetParamater+0xd8>

			break;
		case PARAM_BUILD_NUMBER_HIGH:
			PacketBytes[2] = VERSION_MAJOR;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	35 c0       	rjmp	.+106    	; 0x1be8 <V2P_GetSetParamater+0xd8>

			break;
		case PARAM_HARDWARE_VERSION:
		case PARAM_SW_MAJOR:
		case PARAM_SW_MINOR:
			PacketBytes[2] = pgm_read_byte(&VersionData[Param_Name - PARAM_HARDWARE_VERSION]);
    1b7e:	e5 5d       	subi	r30, 0xD5	; 213
    1b80:	fc 4f       	sbci	r31, 0xFC	; 252
    1b82:	84 91       	lpm	r24, Z
    1b84:	31 c0       	rjmp	.+98     	; 0x1be8 <V2P_GetSetParamater+0xd8>

			break;
		case PARAM_CONTROLLER_INIT:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1b86:	80 91 12 01 	lds	r24, 0x0112
    1b8a:	83 30       	cpi	r24, 0x03	; 3
    1b8c:	19 f4       	brne	.+6      	; 0x1b94 <V2P_GetSetParamater+0x84>
			{
				PacketBytes[2] = Param_ControllerInit;
    1b8e:	80 91 08 01 	lds	r24, 0x0108
    1b92:	2a c0       	rjmp	.+84     	; 0x1be8 <V2P_GetSetParamater+0xd8>
			}
			else
			{
				MessageSize = 2;
    1b94:	82 e0       	ldi	r24, 0x02	; 2
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	90 93 0f 01 	sts	0x010F, r25
    1b9c:	80 93 0e 01 	sts	0x010E, r24
				Param_ControllerInit = PacketBytes[2];
    1ba0:	80 91 14 01 	lds	r24, 0x0114
    1ba4:	80 93 08 01 	sts	0x0108, r24
			}
			
			break;
    1ba8:	48 c0       	rjmp	.+144    	; 0x1c3a <V2P_GetSetParamater+0x12a>
		case PARAM_SCK_DURATION:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1baa:	80 91 12 01 	lds	r24, 0x0112
    1bae:	a1 e0       	ldi	r26, 0x01	; 1
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	83 30       	cpi	r24, 0x03	; 3
    1bb4:	b1 f0       	breq	.+44     	; 0x1be2 <V2P_GetSetParamater+0xd2>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.SCKDuration);
			}
			else
			{
				MessageSize = 2;
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	90 93 0f 01 	sts	0x010F, r25
    1bbe:	80 93 0e 01 	sts	0x010E, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1bc2:	80 91 14 01 	lds	r24, 0x0114
  asm volatile (
    1bc6:	08 2e       	mov	r0, r24
    1bc8:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.SCKDuration, PacketBytes[2]);
				USI_SPISetSpeed(PacketBytes[2]); // Re-Initialise the USI system with the new frequency
    1bcc:	80 91 14 01 	lds	r24, 0x0114
    1bd0:	0e 94 be 08 	call	0x117c <USI_SPISetSpeed>
			}
					
			break;
    1bd4:	32 c0       	rjmp	.+100    	; 0x1c3a <V2P_GetSetParamater+0x12a>
		case PARAM_RESET_POLARITY:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1bd6:	80 91 12 01 	lds	r24, 0x0112
    1bda:	a0 e0       	ldi	r26, 0x00	; 0
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	83 30       	cpi	r24, 0x03	; 3
    1be0:	31 f4       	brne	.+12     	; 0x1bee <V2P_GetSetParamater+0xde>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1be2:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
    1be6:	80 2d       	mov	r24, r0
    1be8:	80 93 14 01 	sts	0x0114, r24
    1bec:	26 c0       	rjmp	.+76     	; 0x1c3a <V2P_GetSetParamater+0x12a>
			{
				PacketBytes[2] = eeprom_read_byte(&EEPROMVars.ResetPolarity);		
			}
			else
			{
				MessageSize = 2;
    1bee:	82 e0       	ldi	r24, 0x02	; 2
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	90 93 0f 01 	sts	0x010F, r25
    1bf6:	80 93 0e 01 	sts	0x010E, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    1bfa:	80 91 14 01 	lds	r24, 0x0114
  asm volatile (
    1bfe:	08 2e       	mov	r0, r24
    1c00:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
				eeprom_write_byte(&EEPROMVars.ResetPolarity, PacketBytes[2]);
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Change takes effect immediatly
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	0e 94 ff 02 	call	0x5fe <MAIN_ResetCSLine>
			}
			
			break;
    1c0a:	17 c0       	rjmp	.+46     	; 0x1c3a <V2P_GetSetParamater+0x12a>
		case PARAM_OSC_PSCALE:
		case PARAM_OSC_CMATCH:
			/* Despite not supporting these parameters (STK500 only), the AVR Studio programmer
			   sends them along with the SCK duration. A OK must be returned or the sequence will fail
			   and the SCK duration byte will not be sent.                                             */
		
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1c0c:	80 91 12 01 	lds	r24, 0x0112
    1c10:	83 30       	cpi	r24, 0x03	; 3
    1c12:	19 f4       	brne	.+6      	; 0x1c1a <V2P_GetSetParamater+0x10a>
			{
			   PacketBytes[2] = 0;            // If the command is a read, return a 0 for both parameters
    1c14:	10 92 14 01 	sts	0x0114, r1
    1c18:	10 c0       	rjmp	.+32     	; 0x1c3a <V2P_GetSetParamater+0x12a>
			}
			else
			{
				MessageSize = 2;              // Otherwise just send back an OK if the command is a set		
    1c1a:	82 e0       	ldi	r24, 0x02	; 2
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	90 93 0f 01 	sts	0x010F, r25
    1c22:	80 93 0e 01 	sts	0x010E, r24
			}
			
			break;
    1c26:	09 c0       	rjmp	.+18     	; 0x1c3a <V2P_GetSetParamater+0x12a>
		default:                             // Unrecognised parameter
			MessageSize = 2;
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	90 93 0f 01 	sts	0x010F, r25
    1c30:	80 93 0e 01 	sts	0x010E, r24
			PacketBytes[1] = STATUS_CMD_FAILED;			
    1c34:	80 ec       	ldi	r24, 0xC0	; 192
    1c36:	80 93 13 01 	sts	0x0113, r24
	}
	
	V2P_SendPacket();
    1c3a:	0e 94 48 0d 	call	0x1a90 <V2P_SendPacket>
    1c3e:	08 95       	ret

00001c40 <V2P_IncrementCurrAddress>:
}

void V2P_IncrementCurrAddress(void)
{
	// Incrementing a 32-bit unsigned variable takes a lot of code. Because much of the code is
	// not very time critical (much of it is waiting for the hardware), i've chosen to waste
	// a few extra cycles per increment and save a good 60 bytes or so of code space by putting
	// the incrmement inside a function.

	CurrAddress++;
    1c40:	80 91 09 01 	lds	r24, 0x0109
    1c44:	90 91 0a 01 	lds	r25, 0x010A
    1c48:	a0 91 0b 01 	lds	r26, 0x010B
    1c4c:	b0 91 0c 01 	lds	r27, 0x010C
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	a1 1d       	adc	r26, r1
    1c54:	b1 1d       	adc	r27, r1
    1c56:	80 93 09 01 	sts	0x0109, r24
    1c5a:	90 93 0a 01 	sts	0x010A, r25
    1c5e:	a0 93 0b 01 	sts	0x010B, r26
    1c62:	b0 93 0c 01 	sts	0x010C, r27
    1c66:	08 95       	ret

00001c68 <V2P_CheckForExtendedAddress>:
}

void V2P_CheckForExtendedAddress(void)
{
	if (CurrAddress & (1UL << 31))                     // MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
    1c68:	80 91 09 01 	lds	r24, 0x0109
    1c6c:	90 91 0a 01 	lds	r25, 0x010A
    1c70:	a0 91 0b 01 	lds	r26, 0x010B
    1c74:	b0 91 0c 01 	lds	r27, 0x010C
    1c78:	b7 ff       	sbrs	r27, 7
    1c7a:	1e c0       	rjmp	.+60     	; 0x1cb8 <V2P_CheckForExtendedAddress+0x50>
	{
		USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);   // Load extended address command
    1c7c:	8d e4       	ldi	r24, 0x4D	; 77
    1c7e:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
		USI_SPITransmit((CurrAddress & 0x00FF0000) >> 16); // The 3rd byte of the long holds the extended address
    1c88:	80 91 0b 01 	lds	r24, 0x010B
    1c8c:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
		
		CurrAddress &= ~(1UL << 31);                   // Clear the flag
    1c96:	80 91 09 01 	lds	r24, 0x0109
    1c9a:	90 91 0a 01 	lds	r25, 0x010A
    1c9e:	a0 91 0b 01 	lds	r26, 0x010B
    1ca2:	b0 91 0c 01 	lds	r27, 0x010C
    1ca6:	bf 77       	andi	r27, 0x7F	; 127
    1ca8:	80 93 09 01 	sts	0x0109, r24
    1cac:	90 93 0a 01 	sts	0x010A, r25
    1cb0:	a0 93 0b 01 	sts	0x010B, r26
    1cb4:	b0 93 0c 01 	sts	0x010C, r27
    1cb8:	08 95       	ret

00001cba <V2P_RunStateMachine>:
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	c0 e0       	ldi	r28, 0x00	; 0
    1cc6:	ee 24       	eor	r14, r14
    1cc8:	ff 24       	eor	r15, r15
    1cca:	80 91 c1 00 	lds	r24, 0x00C1
    1cce:	80 78       	andi	r24, 0x80	; 128
    1cd0:	88 61       	ori	r24, 0x18	; 24
    1cd2:	80 93 c1 00 	sts	0x00C1, r24
    1cd6:	85 e1       	ldi	r24, 0x15	; 21
    1cd8:	92 e0       	ldi	r25, 0x02	; 2
    1cda:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
    1cde:	0e 94 9b 06 	call	0xd36 <OSCCAL_Calibrate>
    1ce2:	0e 94 b7 0a 	call	0x156e <BUFF_InitialiseBuffer>
    1ce6:	0e 94 2a 0b 	call	0x1654 <TIMEOUT_SetupTimeoutTimer>
    1cea:	c0 93 0d 01 	sts	0x010D, r28
    1cee:	10 92 09 01 	sts	0x0109, r1
    1cf2:	10 92 0a 01 	sts	0x010A, r1
    1cf6:	10 92 0b 01 	sts	0x010B, r1
    1cfa:	10 92 0c 01 	sts	0x010C, r1
    1cfe:	80 91 06 01 	lds	r24, 0x0106
    1d02:	81 30       	cpi	r24, 0x01	; 1
    1d04:	11 f4       	brne	.+4      	; 0x1d0a <V2P_RunStateMachine+0x50>
    1d06:	c9 e0       	ldi	r28, 0x09	; 9
    1d08:	05 c0       	rjmp	.+10     	; 0x1d14 <V2P_RunStateMachine+0x5a>
    1d0a:	cc 23       	and	r28, r28
    1d0c:	19 f0       	breq	.+6      	; 0x1d14 <V2P_RunStateMachine+0x5a>
    1d0e:	83 e0       	ldi	r24, 0x03	; 3
    1d10:	80 93 81 00 	sts	0x0081, r24
    1d14:	8c 2f       	mov	r24, r28
    1d16:	99 27       	eor	r25, r25
    1d18:	84 30       	cpi	r24, 0x04	; 4
    1d1a:	91 05       	cpc	r25, r1
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <V2P_RunStateMachine+0x66>
    1d1e:	73 c0       	rjmp	.+230    	; 0x1e06 <V2P_RunStateMachine+0x14c>
    1d20:	85 30       	cpi	r24, 0x05	; 5
    1d22:	91 05       	cpc	r25, r1
    1d24:	94 f4       	brge	.+36     	; 0x1d4a <V2P_RunStateMachine+0x90>
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	91 05       	cpc	r25, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <V2P_RunStateMachine+0x74>
    1d2c:	52 c0       	rjmp	.+164    	; 0x1dd2 <V2P_RunStateMachine+0x118>
    1d2e:	82 30       	cpi	r24, 0x02	; 2
    1d30:	91 05       	cpc	r25, r1
    1d32:	1c f4       	brge	.+6      	; 0x1d3a <V2P_RunStateMachine+0x80>
    1d34:	89 2b       	or	r24, r25
    1d36:	b1 f1       	breq	.+108    	; 0x1da4 <V2P_RunStateMachine+0xea>
    1d38:	e2 cf       	rjmp	.-60     	; 0x1cfe <V2P_RunStateMachine+0x44>
    1d3a:	82 30       	cpi	r24, 0x02	; 2
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <V2P_RunStateMachine+0x88>
    1d40:	4e c0       	rjmp	.+156    	; 0x1dde <V2P_RunStateMachine+0x124>
    1d42:	03 97       	sbiw	r24, 0x03	; 3
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <V2P_RunStateMachine+0x8e>
    1d46:	54 c0       	rjmp	.+168    	; 0x1df0 <V2P_RunStateMachine+0x136>
    1d48:	da cf       	rjmp	.-76     	; 0x1cfe <V2P_RunStateMachine+0x44>
    1d4a:	87 30       	cpi	r24, 0x07	; 7
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <V2P_RunStateMachine+0x98>
    1d50:	8b c0       	rjmp	.+278    	; 0x1e68 <V2P_RunStateMachine+0x1ae>
    1d52:	88 30       	cpi	r24, 0x08	; 8
    1d54:	91 05       	cpc	r25, r1
    1d56:	44 f4       	brge	.+16     	; 0x1d68 <V2P_RunStateMachine+0xae>
    1d58:	85 30       	cpi	r24, 0x05	; 5
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <V2P_RunStateMachine+0xa6>
    1d5e:	68 c0       	rjmp	.+208    	; 0x1e30 <V2P_RunStateMachine+0x176>
    1d60:	06 97       	sbiw	r24, 0x06	; 6
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <V2P_RunStateMachine+0xac>
    1d64:	6d c0       	rjmp	.+218    	; 0x1e40 <V2P_RunStateMachine+0x186>
    1d66:	cb cf       	rjmp	.-106    	; 0x1cfe <V2P_RunStateMachine+0x44>
    1d68:	88 30       	cpi	r24, 0x08	; 8
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	79 f0       	breq	.+30     	; 0x1d8c <V2P_RunStateMachine+0xd2>
    1d6e:	09 97       	sbiw	r24, 0x09	; 9
    1d70:	31 f6       	brne	.-116    	; 0x1cfe <V2P_RunStateMachine+0x44>
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	90 93 0f 01 	sts	0x010F, r25
    1d7a:	80 93 0e 01 	sts	0x010E, r24
    1d7e:	80 ec       	ldi	r24, 0xC0	; 192
    1d80:	80 93 13 01 	sts	0x0113, r24
    1d84:	10 92 06 01 	sts	0x0106, r1
    1d88:	0e 94 48 0d 	call	0x1a90 <V2P_SendPacket>
    1d8c:	0e 94 b7 0a 	call	0x156e <BUFF_InitialiseBuffer>
    1d90:	10 92 81 00 	sts	0x0081, r1
    1d94:	10 92 07 01 	sts	0x0107, r1
    1d98:	10 92 85 00 	sts	0x0085, r1
    1d9c:	10 92 84 00 	sts	0x0084, r1
    1da0:	c0 e0       	ldi	r28, 0x00	; 0
    1da2:	ad cf       	rjmp	.-166    	; 0x1cfe <V2P_RunStateMachine+0x44>
    1da4:	80 91 af 02 	lds	r24, 0x02AF
    1da8:	81 11       	cpse	r24, r1
    1daa:	c1 e0       	ldi	r28, 0x01	; 1
    1dac:	f2 9b       	sbis	0x1e, 2	; 30
    1dae:	a7 cf       	rjmp	.-178    	; 0x1cfe <V2P_RunStateMachine+0x44>
    1db0:	80 91 0d 01 	lds	r24, 0x010D
    1db4:	88 23       	and	r24, r24
    1db6:	09 f0       	breq	.+2      	; 0x1dba <V2P_RunStateMachine+0x100>
    1db8:	a2 cf       	rjmp	.-188    	; 0x1cfe <V2P_RunStateMachine+0x44>
    1dba:	80 91 c1 00 	lds	r24, 0x00C1
    1dbe:	80 78       	andi	r24, 0x80	; 128
    1dc0:	80 93 c1 00 	sts	0x00C1, r24
    1dc4:	80 e8       	ldi	r24, 0x80	; 128
    1dc6:	80 93 61 00 	sts	0x0061, r24
    1dca:	83 e0       	ldi	r24, 0x03	; 3
    1dcc:	80 93 61 00 	sts	0x0061, r24
    1dd0:	d4 c0       	rjmp	.+424    	; 0x1f7a <V2P_RunStateMachine+0x2c0>
    1dd2:	0e 94 52 08 	call	0x10a4 <USART_Rx>
    1dd6:	8b 31       	cpi	r24, 0x1B	; 27
    1dd8:	89 f5       	brne	.+98     	; 0x1e3c <V2P_RunStateMachine+0x182>
    1dda:	c2 e0       	ldi	r28, 0x02	; 2
    1ddc:	90 cf       	rjmp	.-224    	; 0x1cfe <V2P_RunStateMachine+0x44>
    1dde:	0e 94 52 08 	call	0x10a4 <USART_Rx>
    1de2:	99 27       	eor	r25, r25
    1de4:	90 93 11 01 	sts	0x0111, r25
    1de8:	80 93 10 01 	sts	0x0110, r24
    1dec:	c3 e0       	ldi	r28, 0x03	; 3
    1dee:	87 cf       	rjmp	.-242    	; 0x1cfe <V2P_RunStateMachine+0x44>
    1df0:	0e 94 52 08 	call	0x10a4 <USART_Rx>
    1df4:	99 27       	eor	r25, r25
    1df6:	98 2f       	mov	r25, r24
    1df8:	88 27       	eor	r24, r24
    1dfa:	90 93 0f 01 	sts	0x010F, r25
    1dfe:	80 93 0e 01 	sts	0x010E, r24
    1e02:	c4 e0       	ldi	r28, 0x04	; 4
    1e04:	7c cf       	rjmp	.-264    	; 0x1cfe <V2P_RunStateMachine+0x44>
    1e06:	0e 94 52 08 	call	0x10a4 <USART_Rx>
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	33 27       	eor	r19, r19
    1e0e:	80 91 0e 01 	lds	r24, 0x010E
    1e12:	90 91 0f 01 	lds	r25, 0x010F
    1e16:	82 2b       	or	r24, r18
    1e18:	93 2b       	or	r25, r19
    1e1a:	90 93 0f 01 	sts	0x010F, r25
    1e1e:	80 93 0e 01 	sts	0x010E, r24
    1e22:	83 51       	subi	r24, 0x13	; 19
    1e24:	91 40       	sbci	r25, 0x01	; 1
    1e26:	50 f4       	brcc	.+20     	; 0x1e3c <V2P_RunStateMachine+0x182>
    1e28:	c5 e0       	ldi	r28, 0x05	; 5
    1e2a:	ee 24       	eor	r14, r14
    1e2c:	ff 24       	eor	r15, r15
    1e2e:	67 cf       	rjmp	.-306    	; 0x1cfe <V2P_RunStateMachine+0x44>
    1e30:	0e 94 52 08 	call	0x10a4 <USART_Rx>
    1e34:	8e 30       	cpi	r24, 0x0E	; 14
    1e36:	11 f4       	brne	.+4      	; 0x1e3c <V2P_RunStateMachine+0x182>
    1e38:	c6 e0       	ldi	r28, 0x06	; 6
    1e3a:	61 cf       	rjmp	.-318    	; 0x1cfe <V2P_RunStateMachine+0x44>
    1e3c:	c9 e0       	ldi	r28, 0x09	; 9
    1e3e:	5f cf       	rjmp	.-322    	; 0x1cfe <V2P_RunStateMachine+0x44>
    1e40:	80 91 0e 01 	lds	r24, 0x010E
    1e44:	90 91 0f 01 	lds	r25, 0x010F
    1e48:	e8 16       	cp	r14, r24
    1e4a:	f9 06       	cpc	r15, r25
    1e4c:	11 f4       	brne	.+4      	; 0x1e52 <V2P_RunStateMachine+0x198>
    1e4e:	c7 e0       	ldi	r28, 0x07	; 7
    1e50:	56 cf       	rjmp	.-340    	; 0x1cfe <V2P_RunStateMachine+0x44>
    1e52:	87 01       	movw	r16, r14
    1e54:	0e 5e       	subi	r16, 0xEE	; 238
    1e56:	1e 4f       	sbci	r17, 0xFE	; 254
    1e58:	08 94       	sec
    1e5a:	e1 1c       	adc	r14, r1
    1e5c:	f1 1c       	adc	r15, r1
    1e5e:	0e 94 52 08 	call	0x10a4 <USART_Rx>
    1e62:	f8 01       	movw	r30, r16
    1e64:	80 83       	st	Z, r24
    1e66:	4b cf       	rjmp	.-362    	; 0x1cfe <V2P_RunStateMachine+0x44>
    1e68:	0e 94 27 0d 	call	0x1a4e <V2P_GetChecksum>
    1e6c:	18 2f       	mov	r17, r24
    1e6e:	0e 94 52 08 	call	0x10a4 <USART_Rx>
    1e72:	18 17       	cp	r17, r24
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <V2P_RunStateMachine+0x1be>
    1e76:	74 c0       	rjmp	.+232    	; 0x1f60 <V2P_RunStateMachine+0x2a6>
    1e78:	80 91 12 01 	lds	r24, 0x0112
    1e7c:	99 27       	eor	r25, r25
    1e7e:	84 30       	cpi	r24, 0x04	; 4
    1e80:	91 05       	cpc	r25, r1
    1e82:	3c f4       	brge	.+14     	; 0x1e92 <V2P_RunStateMachine+0x1d8>
    1e84:	82 30       	cpi	r24, 0x02	; 2
    1e86:	91 05       	cpc	r25, r1
    1e88:	0c f0       	brlt	.+2      	; 0x1e8c <V2P_RunStateMachine+0x1d2>
    1e8a:	61 c0       	rjmp	.+194    	; 0x1f4e <V2P_RunStateMachine+0x294>
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	39 f0       	breq	.+14     	; 0x1e9e <V2P_RunStateMachine+0x1e4>
    1e90:	61 c0       	rjmp	.+194    	; 0x1f54 <V2P_RunStateMachine+0x29a>
    1e92:	86 30       	cpi	r24, 0x06	; 6
    1e94:	91 05       	cpc	r25, r1
    1e96:	e9 f0       	breq	.+58     	; 0x1ed2 <V2P_RunStateMachine+0x218>
    1e98:	07 97       	sbiw	r24, 0x07	; 7
    1e9a:	99 f0       	breq	.+38     	; 0x1ec2 <V2P_RunStateMachine+0x208>
    1e9c:	5b c0       	rjmp	.+182    	; 0x1f54 <V2P_RunStateMachine+0x29a>
    1e9e:	8b e0       	ldi	r24, 0x0B	; 11
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	90 93 0f 01 	sts	0x010F, r25
    1ea6:	80 93 0e 01 	sts	0x010E, r24
    1eaa:	a2 e1       	ldi	r26, 0x12	; 18
    1eac:	b1 e0       	ldi	r27, 0x01	; 1
    1eae:	e0 eb       	ldi	r30, 0xB0	; 176
    1eb0:	f3 e0       	ldi	r31, 0x03	; 3
    1eb2:	9a e0       	ldi	r25, 0x0A	; 10
    1eb4:	84 91       	lpm	r24, Z
    1eb6:	8d 93       	st	X+, r24
    1eb8:	91 50       	subi	r25, 0x01	; 1
    1eba:	31 96       	adiw	r30, 0x01	; 1
    1ebc:	97 ff       	sbrs	r25, 7
    1ebe:	fa cf       	rjmp	.-12     	; 0x1eb4 <V2P_RunStateMachine+0x1fa>
    1ec0:	58 c0       	rjmp	.+176    	; 0x1f72 <V2P_RunStateMachine+0x2b8>
    1ec2:	82 e0       	ldi	r24, 0x02	; 2
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	90 93 0f 01 	sts	0x010F, r25
    1eca:	80 93 0e 01 	sts	0x010E, r24
    1ece:	80 ec       	ldi	r24, 0xC0	; 192
    1ed0:	4e c0       	rjmp	.+156    	; 0x1f6e <V2P_RunStateMachine+0x2b4>
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	90 93 0f 01 	sts	0x010F, r25
    1eda:	80 93 0e 01 	sts	0x010E, r24
    1ede:	0e 94 34 0e 	call	0x1c68 <V2P_CheckForExtendedAddress>
    1ee2:	80 91 13 01 	lds	r24, 0x0113
    1ee6:	99 27       	eor	r25, r25
    1ee8:	aa 27       	eor	r26, r26
    1eea:	bb 27       	eor	r27, r27
    1eec:	b8 2f       	mov	r27, r24
    1eee:	aa 27       	eor	r26, r26
    1ef0:	99 27       	eor	r25, r25
    1ef2:	88 27       	eor	r24, r24
    1ef4:	20 91 14 01 	lds	r18, 0x0114
    1ef8:	33 27       	eor	r19, r19
    1efa:	44 27       	eor	r20, r20
    1efc:	55 27       	eor	r21, r21
    1efe:	a9 01       	movw	r20, r18
    1f00:	33 27       	eor	r19, r19
    1f02:	22 27       	eor	r18, r18
    1f04:	82 2b       	or	r24, r18
    1f06:	93 2b       	or	r25, r19
    1f08:	a4 2b       	or	r26, r20
    1f0a:	b5 2b       	or	r27, r21
    1f0c:	20 91 15 01 	lds	r18, 0x0115
    1f10:	33 27       	eor	r19, r19
    1f12:	44 27       	eor	r20, r20
    1f14:	55 27       	eor	r21, r21
    1f16:	54 2f       	mov	r21, r20
    1f18:	43 2f       	mov	r20, r19
    1f1a:	32 2f       	mov	r19, r18
    1f1c:	22 27       	eor	r18, r18
    1f1e:	82 2b       	or	r24, r18
    1f20:	93 2b       	or	r25, r19
    1f22:	a4 2b       	or	r26, r20
    1f24:	b5 2b       	or	r27, r21
    1f26:	20 91 16 01 	lds	r18, 0x0116
    1f2a:	33 27       	eor	r19, r19
    1f2c:	44 27       	eor	r20, r20
    1f2e:	55 27       	eor	r21, r21
    1f30:	82 2b       	or	r24, r18
    1f32:	93 2b       	or	r25, r19
    1f34:	a4 2b       	or	r26, r20
    1f36:	b5 2b       	or	r27, r21
    1f38:	80 93 09 01 	sts	0x0109, r24
    1f3c:	90 93 0a 01 	sts	0x010A, r25
    1f40:	a0 93 0b 01 	sts	0x010B, r26
    1f44:	b0 93 0c 01 	sts	0x010C, r27
    1f48:	10 92 13 01 	sts	0x0113, r1
    1f4c:	12 c0       	rjmp	.+36     	; 0x1f72 <V2P_RunStateMachine+0x2b8>
    1f4e:	0e 94 88 0d 	call	0x1b10 <V2P_GetSetParamater>
    1f52:	11 c0       	rjmp	.+34     	; 0x1f76 <V2P_RunStateMachine+0x2bc>
    1f54:	e0 91 02 01 	lds	r30, 0x0102
    1f58:	f0 91 03 01 	lds	r31, 0x0103
    1f5c:	09 95       	icall
    1f5e:	0b c0       	rjmp	.+22     	; 0x1f76 <V2P_RunStateMachine+0x2bc>
    1f60:	82 e0       	ldi	r24, 0x02	; 2
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	90 93 0f 01 	sts	0x010F, r25
    1f68:	80 93 0e 01 	sts	0x010E, r24
    1f6c:	81 ec       	ldi	r24, 0xC1	; 193
    1f6e:	80 93 13 01 	sts	0x0113, r24
    1f72:	0e 94 48 0d 	call	0x1a90 <V2P_SendPacket>
    1f76:	c8 e0       	ldi	r28, 0x08	; 8
    1f78:	c2 ce       	rjmp	.-636    	; 0x1cfe <V2P_RunStateMachine+0x44>
    1f7a:	cf 91       	pop	r28
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	ff 90       	pop	r15
    1f82:	ef 90       	pop	r14
    1f84:	08 95       	ret

00001f86 <ISPCC_EnterChipProgrammingMode>:

// ======================================================================================

void ISPCC_EnterChipProgrammingMode(void)
{
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
	uint8_t ByteDelay = PacketBytes[5];
    1f8c:	10 91 17 01 	lds	r17, 0x0117
	uint8_t Attempts  = PacketBytes[4];
    1f90:	c0 91 16 01 	lds	r28, 0x0116
	uint8_t Response;

	MAIN_Delay1MS(PacketBytes[2]);         // Wait before continuing, amount specified in the packet
    1f94:	80 91 14 01 	lds	r24, 0x0114
    1f98:	0e 94 ed 02 	call	0x5da <MAIN_Delay1MS>

	if ((!(Attempts)) || (Attempts > 100)) // if no attempts or too high a value is specified, a fixed number is chosen
    1f9c:	8c 2f       	mov	r24, r28
    1f9e:	81 50       	subi	r24, 0x01	; 1
    1fa0:	84 36       	cpi	r24, 0x64	; 100
    1fa2:	08 f0       	brcs	.+2      	; 0x1fa6 <ISPCC_EnterChipProgrammingMode+0x20>
	   Attempts = 24;
    1fa4:	c8 e1       	ldi	r28, 0x18	; 24
		
	while (Attempts--)
	{
		USI_SPITransmit(PacketBytes[8]);
		MAIN_Delay1MS(ByteDelay);
		USI_SPITransmit(PacketBytes[9]);
		MAIN_Delay1MS(ByteDelay);
			
		Response = USI_SPITransmit(PacketBytes[10]);
		MAIN_Delay1MS(ByteDelay);

		if (PacketBytes[7] == ISPCC_POLL_MODE_AVR)
		  USI_SPITransmit(PacketBytes[11]);
		else
		  Response = USI_SPITransmit(PacketBytes[11]);
				
		if (!(PacketBytes[7]) || (Response == PacketBytes[6])) // Polling disabled, or returned value matches expected poll value
		{
			MAIN_Delay1MS(ByteDelay);

			InProgrammingMode = TRUE;
			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;
			return;
		}
		
		MAIN_Delay1MS(ByteDelay);
		USI_SPIToggleClock();            // Out of sync, shift in one bit and try again
    1fa6:	c1 50       	subi	r28, 0x01	; 1
    1fa8:	cf 3f       	cpi	r28, 0xFF	; 255
    1faa:	09 f4       	brne	.+2      	; 0x1fae <ISPCC_EnterChipProgrammingMode+0x28>
    1fac:	3f c0       	rjmp	.+126    	; 0x202c <ISPCC_EnterChipProgrammingMode+0xa6>
    1fae:	80 91 1a 01 	lds	r24, 0x011A
    1fb2:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    1fb6:	81 2f       	mov	r24, r17
    1fb8:	0e 94 ed 02 	call	0x5da <MAIN_Delay1MS>
    1fbc:	80 91 1b 01 	lds	r24, 0x011B
    1fc0:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    1fc4:	81 2f       	mov	r24, r17
    1fc6:	0e 94 ed 02 	call	0x5da <MAIN_Delay1MS>
    1fca:	80 91 1c 01 	lds	r24, 0x011C
    1fce:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    1fd2:	08 2f       	mov	r16, r24
    1fd4:	81 2f       	mov	r24, r17
    1fd6:	0e 94 ed 02 	call	0x5da <MAIN_Delay1MS>
    1fda:	80 91 19 01 	lds	r24, 0x0119
    1fde:	83 30       	cpi	r24, 0x03	; 3
    1fe0:	29 f4       	brne	.+10     	; 0x1fec <ISPCC_EnterChipProgrammingMode+0x66>
    1fe2:	80 91 1d 01 	lds	r24, 0x011D
    1fe6:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    1fea:	05 c0       	rjmp	.+10     	; 0x1ff6 <ISPCC_EnterChipProgrammingMode+0x70>
    1fec:	80 91 1d 01 	lds	r24, 0x011D
    1ff0:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    1ff4:	08 2f       	mov	r16, r24
    1ff6:	80 91 19 01 	lds	r24, 0x0119
    1ffa:	88 23       	and	r24, r24
    1ffc:	21 f0       	breq	.+8      	; 0x2006 <ISPCC_EnterChipProgrammingMode+0x80>
    1ffe:	80 91 18 01 	lds	r24, 0x0118
    2002:	08 17       	cp	r16, r24
    2004:	69 f4       	brne	.+26     	; 0x2020 <ISPCC_EnterChipProgrammingMode+0x9a>
    2006:	81 2f       	mov	r24, r17
    2008:	0e 94 ed 02 	call	0x5da <MAIN_Delay1MS>
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	80 93 0d 01 	sts	0x010D, r24
    2012:	81 b3       	in	r24, 0x11	; 17
    2014:	8f 7c       	andi	r24, 0xCF	; 207
    2016:	80 62       	ori	r24, 0x20	; 32
    2018:	81 bb       	out	0x11, r24	; 17
    201a:	10 92 13 01 	sts	0x0113, r1
    201e:	0d c0       	rjmp	.+26     	; 0x203a <ISPCC_EnterChipProgrammingMode+0xb4>
    2020:	81 2f       	mov	r24, r17
    2022:	0e 94 ed 02 	call	0x5da <MAIN_Delay1MS>
    2026:	0e 94 14 09 	call	0x1228 <USI_SPIToggleClock>
    202a:	bd cf       	rjmp	.-134    	; 0x1fa6 <ISPCC_EnterChipProgrammingMode+0x20>
	}

	// If function hasn't returned by now, all the attempts have failed. Show this by
	// resetting the status leds to green (ready) and send a fail message.

	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
    202c:	81 b3       	in	r24, 0x11	; 17
    202e:	8f 7c       	andi	r24, 0xCF	; 207
    2030:	80 61       	ori	r24, 0x10	; 16
    2032:	81 bb       	out	0x11, r24	; 17
	PacketBytes[1] = STATUS_CMD_FAILED;
    2034:	80 ec       	ldi	r24, 0xC0	; 192
    2036:	80 93 13 01 	sts	0x0113, r24
    203a:	cf 91       	pop	r28
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	08 95       	ret

00002042 <ISPCC_PollForProgComplete>:
}

void ISPCC_ProgramChip(void)
{
	uint16_t PollAddress  = 0;
	uint8_t  ProgMode     = PacketBytes[3];
	uint8_t  WriteCommand = PacketBytes[5];
	uint16_t StartAddress = (uint16_t)CurrAddress;
	uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
	                      | PacketBytes[2];
	uint8_t  PollType;
	uint8_t  ByteToWrite;
			
	if (ProgMode & ISPCC_PROG_MODE_PAGE)                 // Page writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++) // Transmit the page bytes
		{
			ByteToWrite = PacketBytes[10 + WriteByte];
		
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash write mode - word addresses so MSB/LSB masking 
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else                                         // EEPROM write mode - byte addresses so no masking 
			   USI_SPITransmit(WriteCommand);

			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Only the LSW of the address should be sent
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			if (!(PollAddress))
			{
				if ((PacketBytes[8] != ByteToWrite)       // Can do polling
				   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
				{
					PollAddress = (CurrAddress & 0xFFFF); // Save the current address
				
					if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
					   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
				}
			}

			// Flash addresses are in words; only increment address on odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();
		}

		PollType = ProgMode;

		if (ProgMode & ISPCC_PROG_MODE_PAGEDONE)         // If this packet is the end of a page, we need to send the program page command
		{
			USI_SPITransmit(PacketBytes[6]);             // Send the write program memory page command
			USI_SPITransmitWord(StartAddress);           // Send the page address word
			USI_SPITransmit(0x00);

			if (!(PollAddress))                          // No polling address
			   PollType = ((ProgMode & ~ISPCC_PAGE_POLLTYPE_MASK) | ISPCC_PAGE_POLLTYPE_WAIT);

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
	else                                                 // Flash Word writing mode or EEPROM byte writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++)
		{
			ByteToWrite = PacketBytes[10 + WriteByte];

			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else
			   USI_SPITransmit(WriteCommand);					
					
			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Transmit the current address to the slave AVR
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			PollType = ProgMode;

			if ((PacketBytes[8] != ByteToWrite)           // Can do polling
			   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
			{
				PollAddress = (CurrAddress & 0xFFFF);     // Save the current address;

				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
				   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
			}
			else
			{
				PollType = ((ProgMode & ~ISPCC_WORD_POLLTYPE_MASK) | ISPCC_WORD_POLLTYPE_WAIT);
			}					

			// Flash addresses are in words; only increment address on the odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
}

void ISPCC_PollForProgComplete(uint8_t PollData, uint16_t PollAddr)
{
    2042:	1f 93       	push	r17
    2044:	cf 93       	push	r28
    2046:	df 93       	push	r29
    2048:	eb 01       	movw	r28, r22
	uint8_t PollType;
	uint8_t ProgCommand;

	if (PollData & ISPCC_PROG_MODE_PAGE)
    204a:	99 27       	eor	r25, r25
    204c:	80 ff       	sbrs	r24, 0
    204e:	08 c0       	rjmp	.+16     	; 0x2060 <ISPCC_PollForProgComplete+0x1e>
	   PollType = ((PollData & ISPCC_PAGE_POLLTYPE_MASK) >> ISPCC_PAGE_POLLTYPE_MASKSHIFT);
    2050:	80 77       	andi	r24, 0x70	; 112
    2052:	90 70       	andi	r25, 0x00	; 0
    2054:	34 e0       	ldi	r19, 0x04	; 4
    2056:	95 95       	asr	r25
    2058:	87 95       	ror	r24
    205a:	3a 95       	dec	r19
    205c:	e1 f7       	brne	.-8      	; 0x2056 <ISPCC_PollForProgComplete+0x14>
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <ISPCC_PollForProgComplete+0x26>
	else
	   PollType = ((PollData & ISPCC_WORD_POLLTYPE_MASK) >> ISPCC_WORD_POLLTYPE_MASKSHIFT);	
    2060:	8e 70       	andi	r24, 0x0E	; 14
    2062:	90 70       	andi	r25, 0x00	; 0
    2064:	95 95       	asr	r25
    2066:	87 95       	ror	r24

	switch (PollType & ISPCC_POLLTYPE_MASK)
    2068:	99 27       	eor	r25, r25
    206a:	87 70       	andi	r24, 0x07	; 7
    206c:	90 70       	andi	r25, 0x00	; 0
    206e:	82 30       	cpi	r24, 0x02	; 2
    2070:	91 05       	cpc	r25, r1
    2072:	19 f0       	breq	.+6      	; 0x207a <ISPCC_PollForProgComplete+0x38>
    2074:	04 97       	sbiw	r24, 0x04	; 4
    2076:	e1 f0       	breq	.+56     	; 0x20b0 <ISPCC_PollForProgComplete+0x6e>
    2078:	26 c0       	rjmp	.+76     	; 0x20c6 <ISPCC_PollForProgComplete+0x84>
	{
		case ISPCC_POLLTYPE_DATA:
			ProgCommand = PacketBytes[7];
    207a:	10 91 19 01 	lds	r17, 0x0119
			
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash uses word addresses
    207e:	80 91 12 01 	lds	r24, 0x0112
    2082:	83 31       	cpi	r24, 0x13	; 19
    2084:	39 f4       	brne	.+14     	; 0x2094 <ISPCC_PollForProgComplete+0x52>
			{
				ProgCommand  |= ((PollAddr & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ);
    2086:	81 2f       	mov	r24, r17
    2088:	99 27       	eor	r25, r25
    208a:	c0 fd       	sbrc	r28, 0
    208c:	88 60       	ori	r24, 0x08	; 8
    208e:	18 2f       	mov	r17, r24
				PollAddr    >>= 1;
    2090:	d6 95       	lsr	r29
    2092:	c7 95       	ror	r28
			}

			do
			{
				USI_SPITransmit(ProgCommand);
    2094:	81 2f       	mov	r24, r17
    2096:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
				USI_SPITransmitWord(PollAddr);
    209a:	ce 01       	movw	r24, r28
    209c:	0e 94 06 09 	call	0x120c <USI_SPITransmitWord>
			}
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    20a6:	90 91 1a 01 	lds	r25, 0x011A
    20aa:	89 17       	cp	r24, r25
    20ac:	99 f3       	breq	.-26     	; 0x2094 <ISPCC_PollForProgComplete+0x52>
			while (USI_SPITransmit(0x00) == PacketBytes[8]);
						
			break;
    20ae:	0f c0       	rjmp	.+30     	; 0x20ce <ISPCC_PollForProgComplete+0x8c>
		case ISPCC_POLLTYPE_READY:
			do
			   USI_SPITransmitWord(0xF000);
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 ef       	ldi	r25, 0xF0	; 240
    20b4:	0e 94 06 09 	call	0x120c <USI_SPITransmitWord>
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	0e 94 06 09 	call	0x120c <USI_SPITransmitWord>
    20c0:	80 fd       	sbrc	r24, 0
    20c2:	f6 cf       	rjmp	.-20     	; 0x20b0 <ISPCC_PollForProgComplete+0x6e>
			while (USI_SPITransmitWord(0x0000) & ISPCC_POLL_BUSYFLAG);

			break;
    20c4:	04 c0       	rjmp	.+8      	; 0x20ce <ISPCC_PollForProgComplete+0x8c>
		default:                                      // Default is Wait polling
			MAIN_Delay1MS(PacketBytes[4]);	
    20c6:	80 91 16 01 	lds	r24, 0x0116
    20ca:	0e 94 ed 02 	call	0x5da <MAIN_Delay1MS>
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	1f 91       	pop	r17
    20d4:	08 95       	ret

000020d6 <ISPCC_ProgramChip>:
    20d6:	6f 92       	push	r6
    20d8:	7f 92       	push	r7
    20da:	9f 92       	push	r9
    20dc:	af 92       	push	r10
    20de:	bf 92       	push	r11
    20e0:	cf 92       	push	r12
    20e2:	df 92       	push	r13
    20e4:	ef 92       	push	r14
    20e6:	ff 92       	push	r15
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	cf 93       	push	r28
    20ee:	df 93       	push	r29
    20f0:	00 e0       	ldi	r16, 0x00	; 0
    20f2:	10 e0       	ldi	r17, 0x00	; 0
    20f4:	90 90 15 01 	lds	r9, 0x0115
    20f8:	c0 90 17 01 	lds	r12, 0x0117
    20fc:	60 90 09 01 	lds	r6, 0x0109
    2100:	70 90 0a 01 	lds	r7, 0x010A
    2104:	80 91 13 01 	lds	r24, 0x0113
    2108:	99 27       	eor	r25, r25
    210a:	b8 2e       	mov	r11, r24
    210c:	aa 24       	eor	r10, r10
    210e:	80 91 14 01 	lds	r24, 0x0114
    2112:	99 27       	eor	r25, r25
    2114:	a8 2a       	or	r10, r24
    2116:	b9 2a       	or	r11, r25
    2118:	90 fe       	sbrs	r9, 0
    211a:	62 c0       	rjmp	.+196    	; 0x21e0 <ISPCC_ProgramChip+0x10a>
    211c:	78 01       	movw	r14, r16
    211e:	0a 15       	cp	r16, r10
    2120:	1b 05       	cpc	r17, r11
    2122:	08 f0       	brcs	.+2      	; 0x2126 <ISPCC_ProgramChip+0x50>
    2124:	46 c0       	rjmp	.+140    	; 0x21b2 <ISPCC_ProgramChip+0xdc>
    2126:	cc e1       	ldi	r28, 0x1C	; 28
    2128:	d1 e0       	ldi	r29, 0x01	; 1
    212a:	d9 90       	ld	r13, Y+
    212c:	80 91 12 01 	lds	r24, 0x0112
    2130:	83 31       	cpi	r24, 0x13	; 19
    2132:	31 f4       	brne	.+12     	; 0x2140 <ISPCC_ProgramChip+0x6a>
    2134:	8c 2d       	mov	r24, r12
    2136:	99 27       	eor	r25, r25
    2138:	e0 fe       	sbrs	r14, 0
    213a:	03 c0       	rjmp	.+6      	; 0x2142 <ISPCC_ProgramChip+0x6c>
    213c:	88 60       	ori	r24, 0x08	; 8
    213e:	01 c0       	rjmp	.+2      	; 0x2142 <ISPCC_ProgramChip+0x6c>
    2140:	8c 2d       	mov	r24, r12
    2142:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    2146:	80 91 09 01 	lds	r24, 0x0109
    214a:	90 91 0a 01 	lds	r25, 0x010A
    214e:	0e 94 06 09 	call	0x120c <USI_SPITransmitWord>
    2152:	8d 2d       	mov	r24, r13
    2154:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    2158:	01 15       	cp	r16, r1
    215a:	11 05       	cpc	r17, r1
    215c:	d9 f4       	brne	.+54     	; 0x2194 <ISPCC_ProgramChip+0xbe>
    215e:	80 91 1a 01 	lds	r24, 0x011A
    2162:	8d 15       	cp	r24, r13
    2164:	b9 f0       	breq	.+46     	; 0x2194 <ISPCC_ProgramChip+0xbe>
    2166:	90 91 12 01 	lds	r25, 0x0112
    216a:	93 31       	cpi	r25, 0x13	; 19
    216c:	31 f0       	breq	.+12     	; 0x217a <ISPCC_ProgramChip+0xa4>
    216e:	95 31       	cpi	r25, 0x15	; 21
    2170:	89 f4       	brne	.+34     	; 0x2194 <ISPCC_ProgramChip+0xbe>
    2172:	80 91 1b 01 	lds	r24, 0x011B
    2176:	8d 15       	cp	r24, r13
    2178:	69 f0       	breq	.+26     	; 0x2194 <ISPCC_ProgramChip+0xbe>
    217a:	00 91 09 01 	lds	r16, 0x0109
    217e:	10 91 0a 01 	lds	r17, 0x010A
    2182:	93 31       	cpi	r25, 0x13	; 19
    2184:	39 f4       	brne	.+14     	; 0x2194 <ISPCC_ProgramChip+0xbe>
    2186:	00 0f       	add	r16, r16
    2188:	11 1f       	adc	r17, r17
    218a:	c7 01       	movw	r24, r14
    218c:	81 70       	andi	r24, 0x01	; 1
    218e:	90 70       	andi	r25, 0x00	; 0
    2190:	08 0f       	add	r16, r24
    2192:	19 1f       	adc	r17, r25
    2194:	e0 fc       	sbrc	r14, 0
    2196:	04 c0       	rjmp	.+8      	; 0x21a0 <ISPCC_ProgramChip+0xca>
    2198:	80 91 12 01 	lds	r24, 0x0112
    219c:	85 31       	cpi	r24, 0x15	; 21
    219e:	11 f4       	brne	.+4      	; 0x21a4 <ISPCC_ProgramChip+0xce>
    21a0:	0e 94 20 0e 	call	0x1c40 <V2P_IncrementCurrAddress>
    21a4:	08 94       	sec
    21a6:	e1 1c       	adc	r14, r1
    21a8:	f1 1c       	adc	r15, r1
    21aa:	ea 14       	cp	r14, r10
    21ac:	fb 04       	cpc	r15, r11
    21ae:	08 f4       	brcc	.+2      	; 0x21b2 <ISPCC_ProgramChip+0xdc>
    21b0:	bc cf       	rjmp	.-136    	; 0x212a <ISPCC_ProgramChip+0x54>
    21b2:	c9 2d       	mov	r28, r9
    21b4:	97 fe       	sbrs	r9, 7
    21b6:	69 c0       	rjmp	.+210    	; 0x228a <ISPCC_ProgramChip+0x1b4>
    21b8:	80 91 18 01 	lds	r24, 0x0118
    21bc:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    21c0:	c3 01       	movw	r24, r6
    21c2:	0e 94 06 09 	call	0x120c <USI_SPITransmitWord>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    21cc:	01 15       	cp	r16, r1
    21ce:	11 05       	cpc	r17, r1
    21d0:	11 f4       	brne	.+4      	; 0x21d6 <ISPCC_ProgramChip+0x100>
    21d2:	cf 78       	andi	r28, 0x8F	; 143
    21d4:	c0 61       	ori	r28, 0x10	; 16
    21d6:	b8 01       	movw	r22, r16
    21d8:	8c 2f       	mov	r24, r28
    21da:	0e 94 21 10 	call	0x2042 <ISPCC_PollForProgComplete>
    21de:	55 c0       	rjmp	.+170    	; 0x228a <ISPCC_ProgramChip+0x1b4>
    21e0:	78 01       	movw	r14, r16
    21e2:	0a 15       	cp	r16, r10
    21e4:	1b 05       	cpc	r17, r11
    21e6:	08 f0       	brcs	.+2      	; 0x21ea <ISPCC_ProgramChip+0x114>
    21e8:	50 c0       	rjmp	.+160    	; 0x228a <ISPCC_ProgramChip+0x1b4>
    21ea:	5c e1       	ldi	r21, 0x1C	; 28
    21ec:	65 2e       	mov	r6, r21
    21ee:	51 e0       	ldi	r21, 0x01	; 1
    21f0:	75 2e       	mov	r7, r21
    21f2:	f3 01       	movw	r30, r6
    21f4:	d1 90       	ld	r13, Z+
    21f6:	3f 01       	movw	r6, r30
    21f8:	80 91 12 01 	lds	r24, 0x0112
    21fc:	83 31       	cpi	r24, 0x13	; 19
    21fe:	31 f4       	brne	.+12     	; 0x220c <ISPCC_ProgramChip+0x136>
    2200:	8c 2d       	mov	r24, r12
    2202:	99 27       	eor	r25, r25
    2204:	e0 fe       	sbrs	r14, 0
    2206:	03 c0       	rjmp	.+6      	; 0x220e <ISPCC_ProgramChip+0x138>
    2208:	88 60       	ori	r24, 0x08	; 8
    220a:	01 c0       	rjmp	.+2      	; 0x220e <ISPCC_ProgramChip+0x138>
    220c:	8c 2d       	mov	r24, r12
    220e:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    2212:	80 91 09 01 	lds	r24, 0x0109
    2216:	90 91 0a 01 	lds	r25, 0x010A
    221a:	0e 94 06 09 	call	0x120c <USI_SPITransmitWord>
    221e:	8d 2d       	mov	r24, r13
    2220:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    2224:	c9 2d       	mov	r28, r9
    2226:	80 91 1a 01 	lds	r24, 0x011A
    222a:	8d 15       	cp	r24, r13
    222c:	c1 f0       	breq	.+48     	; 0x225e <ISPCC_ProgramChip+0x188>
    222e:	90 91 12 01 	lds	r25, 0x0112
    2232:	93 31       	cpi	r25, 0x13	; 19
    2234:	31 f0       	breq	.+12     	; 0x2242 <ISPCC_ProgramChip+0x16c>
    2236:	95 31       	cpi	r25, 0x15	; 21
    2238:	91 f4       	brne	.+36     	; 0x225e <ISPCC_ProgramChip+0x188>
    223a:	80 91 1b 01 	lds	r24, 0x011B
    223e:	8d 15       	cp	r24, r13
    2240:	71 f0       	breq	.+28     	; 0x225e <ISPCC_ProgramChip+0x188>
    2242:	00 91 09 01 	lds	r16, 0x0109
    2246:	10 91 0a 01 	lds	r17, 0x010A
    224a:	93 31       	cpi	r25, 0x13	; 19
    224c:	59 f4       	brne	.+22     	; 0x2264 <ISPCC_ProgramChip+0x18e>
    224e:	00 0f       	add	r16, r16
    2250:	11 1f       	adc	r17, r17
    2252:	c7 01       	movw	r24, r14
    2254:	81 70       	andi	r24, 0x01	; 1
    2256:	90 70       	andi	r25, 0x00	; 0
    2258:	08 0f       	add	r16, r24
    225a:	19 1f       	adc	r17, r25
    225c:	03 c0       	rjmp	.+6      	; 0x2264 <ISPCC_ProgramChip+0x18e>
    225e:	c9 2d       	mov	r28, r9
    2260:	c1 7f       	andi	r28, 0xF1	; 241
    2262:	c2 60       	ori	r28, 0x02	; 2
    2264:	e0 fc       	sbrc	r14, 0
    2266:	04 c0       	rjmp	.+8      	; 0x2270 <ISPCC_ProgramChip+0x19a>
    2268:	80 91 12 01 	lds	r24, 0x0112
    226c:	85 31       	cpi	r24, 0x15	; 21
    226e:	11 f4       	brne	.+4      	; 0x2274 <ISPCC_ProgramChip+0x19e>
    2270:	0e 94 20 0e 	call	0x1c40 <V2P_IncrementCurrAddress>
    2274:	b8 01       	movw	r22, r16
    2276:	8c 2f       	mov	r24, r28
    2278:	0e 94 21 10 	call	0x2042 <ISPCC_PollForProgComplete>
    227c:	08 94       	sec
    227e:	e1 1c       	adc	r14, r1
    2280:	f1 1c       	adc	r15, r1
    2282:	ea 14       	cp	r14, r10
    2284:	fb 04       	cpc	r15, r11
    2286:	08 f4       	brcc	.+2      	; 0x228a <ISPCC_ProgramChip+0x1b4>
    2288:	b4 cf       	rjmp	.-152    	; 0x21f2 <ISPCC_ProgramChip+0x11c>
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	1f 91       	pop	r17
    2290:	0f 91       	pop	r16
    2292:	ff 90       	pop	r15
    2294:	ef 90       	pop	r14
    2296:	df 90       	pop	r13
    2298:	cf 90       	pop	r12
    229a:	bf 90       	pop	r11
    229c:	af 90       	pop	r10
    229e:	9f 90       	pop	r9
    22a0:	7f 90       	pop	r7
    22a2:	6f 90       	pop	r6
    22a4:	08 95       	ret

000022a6 <AICI_InterpretPacket>:

// ======================================================================================

void AICI_InterpretPacket(void)
{
    22a6:	df 92       	push	r13
    22a8:	ef 92       	push	r14
    22aa:	ff 92       	push	r15
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
	switch (PacketBytes[0])
    22b4:	80 91 12 01 	lds	r24, 0x0112
    22b8:	99 27       	eor	r25, r25
    22ba:	86 31       	cpi	r24, 0x16	; 22
    22bc:	91 05       	cpc	r25, r1
    22be:	09 f4       	brne	.+2      	; 0x22c2 <AICI_InterpretPacket+0x1c>
    22c0:	fb c0       	rjmp	.+502    	; 0x24b8 <AICI_InterpretPacket+0x212>
    22c2:	87 31       	cpi	r24, 0x17	; 23
    22c4:	91 05       	cpc	r25, r1
    22c6:	94 f4       	brge	.+36     	; 0x22ec <AICI_InterpretPacket+0x46>
    22c8:	82 31       	cpi	r24, 0x12	; 18
    22ca:	91 05       	cpc	r25, r1
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <AICI_InterpretPacket+0x2a>
    22ce:	60 c0       	rjmp	.+192    	; 0x2390 <AICI_InterpretPacket+0xea>
    22d0:	83 31       	cpi	r24, 0x13	; 19
    22d2:	91 05       	cpc	r25, r1
    22d4:	3c f4       	brge	.+14     	; 0x22e4 <AICI_InterpretPacket+0x3e>
    22d6:	80 31       	cpi	r24, 0x10	; 16
    22d8:	91 05       	cpc	r25, r1
    22da:	f9 f0       	breq	.+62     	; 0x231a <AICI_InterpretPacket+0x74>
    22dc:	41 97       	sbiw	r24, 0x11	; 17
    22de:	09 f4       	brne	.+2      	; 0x22e2 <AICI_InterpretPacket+0x3c>
    22e0:	3d c0       	rjmp	.+122    	; 0x235c <AICI_InterpretPacket+0xb6>
    22e2:	3e c1       	rjmp	.+636    	; 0x2560 <AICI_InterpretPacket+0x2ba>
    22e4:	44 97       	sbiw	r24, 0x14	; 20
    22e6:	09 f4       	brne	.+2      	; 0x22ea <AICI_InterpretPacket+0x44>
    22e8:	e7 c0       	rjmp	.+462    	; 0x24b8 <AICI_InterpretPacket+0x212>
    22ea:	2f c1       	rjmp	.+606    	; 0x254a <AICI_InterpretPacket+0x2a4>
    22ec:	89 31       	cpi	r24, 0x19	; 25
    22ee:	91 05       	cpc	r25, r1
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <AICI_InterpretPacket+0x4e>
    22f2:	cc c0       	rjmp	.+408    	; 0x248c <AICI_InterpretPacket+0x1e6>
    22f4:	8a 31       	cpi	r24, 0x1A	; 26
    22f6:	91 05       	cpc	r25, r1
    22f8:	44 f4       	brge	.+16     	; 0x230a <AICI_InterpretPacket+0x64>
    22fa:	87 31       	cpi	r24, 0x17	; 23
    22fc:	91 05       	cpc	r25, r1
    22fe:	09 f4       	brne	.+2      	; 0x2302 <AICI_InterpretPacket+0x5c>
    2300:	c5 c0       	rjmp	.+394    	; 0x248c <AICI_InterpretPacket+0x1e6>
    2302:	48 97       	sbiw	r24, 0x18	; 24
    2304:	09 f4       	brne	.+2      	; 0x2308 <AICI_InterpretPacket+0x62>
    2306:	a5 c0       	rjmp	.+330    	; 0x2452 <AICI_InterpretPacket+0x1ac>
    2308:	2b c1       	rjmp	.+598    	; 0x2560 <AICI_InterpretPacket+0x2ba>
    230a:	8d 31       	cpi	r24, 0x1D	; 29
    230c:	91 05       	cpc	r25, r1
    230e:	0c f4       	brge	.+2      	; 0x2312 <AICI_InterpretPacket+0x6c>
    2310:	a0 c0       	rjmp	.+320    	; 0x2452 <AICI_InterpretPacket+0x1ac>
    2312:	4d 97       	sbiw	r24, 0x1d	; 29
    2314:	09 f4       	brne	.+2      	; 0x2318 <AICI_InterpretPacket+0x72>
    2316:	61 c0       	rjmp	.+194    	; 0x23da <AICI_InterpretPacket+0x134>
    2318:	23 c1       	rjmp	.+582    	; 0x2560 <AICI_InterpretPacket+0x2ba>
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
    231a:	82 e0       	ldi	r24, 0x02	; 2
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	90 93 0f 01 	sts	0x010F, r25
    2322:	80 93 0e 01 	sts	0x010E, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2326:	a1 e0       	ldi	r26, 0x01	; 1
    2328:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    232a:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
    232e:	80 2d       	mov	r24, r0
    2330:	0e 94 d9 08 	call	0x11b2 <USI_SPIInitMaster>
			
			USI_SPIInitMaster(eeprom_read_byte(&EEPROMVars.SCKDuration));

			MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);  // Pull the slave AVR's RESET line to active
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	0e 94 ff 02 	call	0x5fe <MAIN_ResetCSLine>
			MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE); // Orange = Busy
    233a:	81 b3       	in	r24, 0x11	; 17
    233c:	80 63       	ori	r24, 0x30	; 48
    233e:	81 bb       	out	0x11, r24	; 17
			ISPCC_EnterChipProgrammingMode();       // Run the Enter Programming Mode routine
    2340:	0e 94 c3 0f 	call	0x1f86 <ISPCC_EnterChipProgrammingMode>

			if (InProgrammingMode)
    2344:	80 91 0d 01 	lds	r24, 0x010D
    2348:	88 23       	and	r24, r24
    234a:	19 f0       	breq	.+6      	; 0x2352 <AICI_InterpretPacket+0xac>
			   LCD_puts_f(AVRISPModeMessage);
    234c:	89 ec       	ldi	r24, 0xC9	; 201
    234e:	93 e0       	ldi	r25, 0x03	; 3
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <AICI_InterpretPacket+0xb0>
			else
			   LCD_puts_f(SyncErrorMessage);
    2352:	8e eb       	ldi	r24, 0xBE	; 190
    2354:	93 e0       	ldi	r25, 0x03	; 3
    2356:	0e 94 70 07 	call	0xee0 <LCD_puts_f>
			
			break;
    235a:	0b c1       	rjmp	.+534    	; 0x2572 <AICI_InterpretPacket+0x2cc>
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;
    235c:	82 e0       	ldi	r24, 0x02	; 2
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	90 93 0f 01 	sts	0x010F, r25
    2364:	80 93 0e 01 	sts	0x010E, r24

			MAIN_Delay1MS(PacketBytes[1]);           // Wait for the "PreDelay" amount specified in the packet
    2368:	80 91 13 01 	lds	r24, 0x0113
    236c:	0e 94 ed 02 	call	0x5da <MAIN_Delay1MS>
			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Non programming mode = green status led
    2370:	81 b3       	in	r24, 0x11	; 17
    2372:	8f 7c       	andi	r24, 0xCF	; 207
    2374:	80 61       	ori	r24, 0x10	; 16
    2376:	81 bb       	out	0x11, r24	; 17
			InProgrammingMode = FALSE;
    2378:	10 92 0d 01 	sts	0x010D, r1
			MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	0e 94 ff 02 	call	0x5fe <MAIN_ResetCSLine>
			MAIN_Delay1MS(PacketBytes[2]);           // Wait for the "PostDelay" amount specified in the packet
    2382:	80 91 14 01 	lds	r24, 0x0114
    2386:	0e 94 ed 02 	call	0x5da <MAIN_Delay1MS>
			
			USI_SPIOff();
    238a:	0e 94 e9 08 	call	0x11d2 <USI_SPIOff>
    238e:	e5 c0       	rjmp	.+458    	; 0x255a <AICI_InterpretPacket+0x2b4>

			PacketBytes[1] = STATUS_CMD_OK;      // Return OK

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;
    2390:	82 e0       	ldi	r24, 0x02	; 2
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	90 93 0f 01 	sts	0x010F, r25
    2398:	80 93 0e 01 	sts	0x010E, r24
			
			for (uint8_t PacketB = 3; PacketB <= 6; PacketB++) // Send the erase commands to the slave AVR
    239c:	c3 e0       	ldi	r28, 0x03	; 3
    239e:	05 e1       	ldi	r16, 0x15	; 21
    23a0:	11 e0       	ldi	r17, 0x01	; 1
				USI_SPITransmit(PacketBytes[PacketB]);
    23a2:	f8 01       	movw	r30, r16
    23a4:	81 91       	ld	r24, Z+
    23a6:	8f 01       	movw	r16, r30
    23a8:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    23ac:	c1 50       	subi	r28, 0x01	; 1
    23ae:	c7 ff       	sbrs	r28, 7
    23b0:	f8 cf       	rjmp	.-16     	; 0x23a2 <AICI_InterpretPacket+0xfc>

			if (PacketBytes[2])                  // Poll mode, value of 1 indicates a busy flag wait
    23b2:	80 91 14 01 	lds	r24, 0x0114
    23b6:	88 23       	and	r24, r24
    23b8:	59 f0       	breq	.+22     	; 0x23d0 <AICI_InterpretPacket+0x12a>
			{
				do
					USI_SPITransmitWord(0xF000);
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 ef       	ldi	r25, 0xF0	; 240
    23be:	0e 94 06 09 	call	0x120c <USI_SPITransmitWord>
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	0e 94 06 09 	call	0x120c <USI_SPITransmitWord>
    23ca:	80 fd       	sbrc	r24, 0
    23cc:	f6 cf       	rjmp	.-20     	; 0x23ba <AICI_InterpretPacket+0x114>
    23ce:	c5 c0       	rjmp	.+394    	; 0x255a <AICI_InterpretPacket+0x2b4>
				while (USI_SPITransmitWord(0x0000) & 0x01);
			}
			else                                // Poll mode flag of 0 indicates a predefined delay
			{
				MAIN_Delay1MS(PacketBytes[1]);   // Wait the specified interval to ensure erase complete
    23d0:	80 91 13 01 	lds	r24, 0x0113
    23d4:	0e 94 ed 02 	call	0x5da <MAIN_Delay1MS>
    23d8:	c0 c0       	rjmp	.+384    	; 0x255a <AICI_InterpretPacket+0x2b4>
			}
			
			PacketBytes[1] = STATUS_CMD_OK;      // Always return OK
			
			break;
		case CMD_SPI_MULTI:
				MessageSize = (3 + PacketBytes[2]);    // Number of recieved bytes, plus two OKs and the command byte
    23da:	e0 90 14 01 	lds	r14, 0x0114
    23de:	8e 2d       	mov	r24, r14
    23e0:	99 27       	eor	r25, r25
    23e2:	03 96       	adiw	r24, 0x03	; 3
    23e4:	90 93 0f 01 	sts	0x010F, r25
    23e8:	80 93 0e 01 	sts	0x010E, r24
		
				uint8_t TxBytes      = PacketBytes[1]; // \. The packet data is overwritten during the transfer. Because
    23ec:	00 91 13 01 	lds	r16, 0x0113
				uint8_t RxStartByte  = PacketBytes[2]; // |  of this each data byte must be stored into temp variables
				uint8_t RxBytes      = PacketBytes[3]; // /  so that their contents are not lost.
    23f0:	f0 90 15 01 	lds	r15, 0x0115
				uint8_t RxByteNum    = 1;
    23f4:	c1 e0       	ldi	r28, 0x01	; 1
				uint8_t TxByteNum    = 1;
				uint8_t RecievedByte = 0;

				while (TxByteNum++ < TxBytes)          // Still bytes to transfer
				{
					RecievedByte = USI_SPITransmit(PacketBytes[3 + TxByteNum]); // Transmit the byte, store the answer

					if ((TxByteNum >= RxStartByte) && (RxByteNum < RxBytes))
					   PacketBytes[2 + RxByteNum++] = RecievedByte;
    23f6:	12 e0       	ldi	r17, 0x02	; 2
    23f8:	c0 17       	cp	r28, r16
    23fa:	a8 f4       	brcc	.+42     	; 0x2426 <AICI_InterpretPacket+0x180>
    23fc:	e1 2f       	mov	r30, r17
    23fe:	ff 27       	eor	r31, r31
    2400:	ee 5e       	subi	r30, 0xEE	; 238
    2402:	fe 4f       	sbci	r31, 0xFE	; 254
    2404:	83 81       	ldd	r24, Z+3	; 0x03
    2406:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    240a:	1e 15       	cp	r17, r14
    240c:	40 f0       	brcs	.+16     	; 0x241e <AICI_InterpretPacket+0x178>
    240e:	cf 15       	cp	r28, r15
    2410:	30 f4       	brcc	.+12     	; 0x241e <AICI_InterpretPacket+0x178>
    2412:	ec 2f       	mov	r30, r28
    2414:	ff 27       	eor	r31, r31
    2416:	ee 5e       	subi	r30, 0xEE	; 238
    2418:	fe 4f       	sbci	r31, 0xFE	; 254
    241a:	82 83       	std	Z+2, r24	; 0x02
    241c:	cf 5f       	subi	r28, 0xFF	; 255
    241e:	81 2f       	mov	r24, r17
    2420:	1f 5f       	subi	r17, 0xFF	; 255
    2422:	80 17       	cp	r24, r16
    2424:	58 f3       	brcs	.-42     	; 0x23fc <AICI_InterpretPacket+0x156>
				}

				while (RxByteNum++ < RxBytes)                         // Still more bytes to recieve
				   PacketBytes[2 + RxByteNum] = USI_SPITransmit(0x00); // its answer to be recorded (or more bytes than sent need responses), send dummy bytes to fetch the response(s)
    2426:	8c 2f       	mov	r24, r28
    2428:	cf 5f       	subi	r28, 0xFF	; 255
    242a:	8f 15       	cp	r24, r15
    242c:	50 f4       	brcc	.+20     	; 0x2442 <AICI_InterpretPacket+0x19c>
    242e:	0c 2f       	mov	r16, r28
    2430:	11 27       	eor	r17, r17
    2432:	0e 5e       	subi	r16, 0xEE	; 238
    2434:	1e 4f       	sbci	r17, 0xFE	; 254
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    243c:	f8 01       	movw	r30, r16
    243e:	82 83       	std	Z+2, r24	; 0x02
    2440:	f2 cf       	rjmp	.-28     	; 0x2426 <AICI_InterpretPacket+0x180>

				PacketBytes[1]             = STATUS_CMD_OK; // Data should be encompassed
    2442:	10 92 13 01 	sts	0x0113, r1
				PacketBytes[3 + RxByteNum] = STATUS_CMD_OK; //  by STATS_CMD_OKs
    2446:	ec 2f       	mov	r30, r28
    2448:	ff 27       	eor	r31, r31
    244a:	ee 5e       	subi	r30, 0xEE	; 238
    244c:	fe 4f       	sbci	r31, 0xFE	; 254
    244e:	13 82       	std	Z+3, r1	; 0x03

				break;
    2450:	90 c0       	rjmp	.+288    	; 0x2572 <AICI_InterpretPacket+0x2cc>
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;
    2452:	84 e0       	ldi	r24, 0x04	; 4
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	90 93 0f 01 	sts	0x010F, r25
    245a:	80 93 0e 01 	sts	0x010E, r24
	
			for (uint8_t ByteNum = 1; ByteNum <= 4; ByteNum++)
    245e:	c1 e0       	ldi	r28, 0x01	; 1
    2460:	04 e1       	ldi	r16, 0x14	; 20
    2462:	11 e0       	ldi	r17, 0x01	; 1
			{
				uint8_t Response = USI_SPITransmit(PacketBytes[1 + ByteNum]); // Transmit the four signature request bytes
    2464:	f8 01       	movw	r30, r16
    2466:	81 91       	ld	r24, Z+
    2468:	8f 01       	movw	r16, r30
    246a:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    246e:	98 2f       	mov	r25, r24

				if (ByteNum == PacketBytes[1])         // If the current byte is the requested signature byte, save the reponse in the packet
    2470:	80 91 13 01 	lds	r24, 0x0113
    2474:	c8 17       	cp	r28, r24
    2476:	11 f4       	brne	.+4      	; 0x247c <AICI_InterpretPacket+0x1d6>
					PacketBytes[2] = Response;
    2478:	90 93 14 01 	sts	0x0114, r25
    247c:	cf 5f       	subi	r28, 0xFF	; 255
    247e:	c5 30       	cpi	r28, 0x05	; 5
    2480:	88 f3       	brcs	.-30     	; 0x2464 <AICI_InterpretPacket+0x1be>
			}

			PacketBytes[1] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    2482:	10 92 13 01 	sts	0x0113, r1
			PacketBytes[3] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    2486:	10 92 15 01 	sts	0x0115, r1

			break;
    248a:	73 c0       	rjmp	.+230    	; 0x2572 <AICI_InterpretPacket+0x2cc>
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;
    248c:	83 e0       	ldi	r24, 0x03	; 3
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	90 93 0f 01 	sts	0x010F, r25
    2494:	80 93 0e 01 	sts	0x010E, r24
    2498:	03 e1       	ldi	r16, 0x13	; 19
    249a:	11 e0       	ldi	r17, 0x01	; 1
    249c:	c3 e0       	ldi	r28, 0x03	; 3
			
			for (uint8_t PacketB = 1; PacketB <= 4; PacketB++) // Send the lock-byte values to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    249e:	f8 01       	movw	r30, r16
    24a0:	81 91       	ld	r24, Z+
    24a2:	8f 01       	movw	r16, r30
    24a4:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    24a8:	c1 50       	subi	r28, 0x01	; 1
    24aa:	c7 ff       	sbrs	r28, 7
    24ac:	f8 cf       	rjmp	.-16     	; 0x249e <AICI_InterpretPacket+0x1f8>

			PacketBytes[1] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    24ae:	10 92 13 01 	sts	0x0113, r1
			PacketBytes[2] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    24b2:	10 92 14 01 	sts	0x0114, r1

			break;
    24b6:	5d c0       	rjmp	.+186    	; 0x2572 <AICI_InterpretPacket+0x2cc>
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			MessageSize = 0;                           // Here to prevent compiler from complaining if a var dec appears straight after a case

			uint8_t  ReadCommand = PacketBytes[3];
    24b8:	d0 90 15 01 	lds	r13, 0x0115
			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8) // Load in the number of bytes that is to
    24bc:	80 91 13 01 	lds	r24, 0x0113
    24c0:	99 27       	eor	r25, r25
    24c2:	d8 2f       	mov	r29, r24
    24c4:	cc 27       	eor	r28, r28
    24c6:	80 91 14 01 	lds	r24, 0x0114
    24ca:	99 27       	eor	r25, r25
    24cc:	c8 2b       	or	r28, r24
    24ce:	d9 2b       	or	r29, r25
			                     | PacketBytes[2];                 // be read into a temp variable (MSB first)

			MessageSize = BytesToRead + 3;
    24d0:	23 96       	adiw	r28, 0x03	; 3
    24d2:	d0 93 0f 01 	sts	0x010F, r29
    24d6:	c0 93 0e 01 	sts	0x010E, r28
    24da:	23 97       	sbiw	r28, 0x03	; 3

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
    24dc:	00 e0       	ldi	r16, 0x00	; 0
    24de:	10 e0       	ldi	r17, 0x00	; 0
    24e0:	0c 17       	cp	r16, r28
    24e2:	1d 07       	cpc	r17, r29
    24e4:	60 f5       	brcc	.+88     	; 0x253e <AICI_InterpretPacket+0x298>
    24e6:	84 e1       	ldi	r24, 0x14	; 20
    24e8:	e8 2e       	mov	r14, r24
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	f8 2e       	mov	r15, r24
			{
				if (PacketBytes[0] == CMD_READ_FLASH_ISP)  // Flash read mode - word addresses so MSB/LSB masking nessesary
    24ee:	80 91 12 01 	lds	r24, 0x0112
    24f2:	84 31       	cpi	r24, 0x14	; 20
    24f4:	31 f4       	brne	.+12     	; 0x2502 <AICI_InterpretPacket+0x25c>
				{
					USI_SPITransmit(ReadCommand | ((ReadByte & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ));
    24f6:	8d 2d       	mov	r24, r13
    24f8:	99 27       	eor	r25, r25
    24fa:	00 ff       	sbrs	r16, 0
    24fc:	03 c0       	rjmp	.+6      	; 0x2504 <AICI_InterpretPacket+0x25e>
    24fe:	88 60       	ori	r24, 0x08	; 8
    2500:	01 c0       	rjmp	.+2      	; 0x2504 <AICI_InterpretPacket+0x25e>
				}
				else                                       // EEPROM read mode, address is in bytes and so no masking nessesary
				{
					USI_SPITransmit(ReadCommand);
    2502:	8d 2d       	mov	r24, r13
    2504:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
				}
				
				USI_SPITransmitWord(CurrAddress);          // Transmit the current address to the slave AVR
    2508:	80 91 09 01 	lds	r24, 0x0109
    250c:	90 91 0a 01 	lds	r25, 0x010A
    2510:	0e 94 06 09 	call	0x120c <USI_SPITransmitWord>

				PacketBytes[2 + ReadByte] = USI_SPITransmit(0x00); // Read in the byte stored at the requested location
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    251a:	f7 01       	movw	r30, r14
    251c:	80 83       	st	Z, r24

				if ((ReadByte & 0x01) || (PacketBytes[0] == CMD_READ_EEPROM_ISP)) // Flash addresses are given in words; only increment on the odd byte if reading the flash.
    251e:	00 fd       	sbrc	r16, 0
    2520:	04 c0       	rjmp	.+8      	; 0x252a <AICI_InterpretPacket+0x284>
    2522:	80 91 12 01 	lds	r24, 0x0112
    2526:	86 31       	cpi	r24, 0x16	; 22
    2528:	11 f4       	brne	.+4      	; 0x252e <AICI_InterpretPacket+0x288>
				{
					V2P_IncrementCurrAddress();             // Increment the address counter
    252a:	0e 94 20 0e 	call	0x1c40 <V2P_IncrementCurrAddress>
    252e:	0f 5f       	subi	r16, 0xFF	; 255
    2530:	1f 4f       	sbci	r17, 0xFF	; 255
    2532:	08 94       	sec
    2534:	e1 1c       	adc	r14, r1
    2536:	f1 1c       	adc	r15, r1
    2538:	0c 17       	cp	r16, r28
    253a:	1d 07       	cpc	r17, r29
    253c:	c0 f2       	brcs	.-80     	; 0x24ee <AICI_InterpretPacket+0x248>
				}
				else
				{
					if ((CurrAddress & 0x00FF0000) & !(CurrAddress & 0x0000FFFF))
					{
						CurrAddress |= (1UL << 31);        // Set MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
						V2P_CheckForExtendedAddress();
					}
				}
			}
			
			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    253e:	10 92 13 01 	sts	0x0113, r1
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    2542:	ce 5e       	subi	r28, 0xEE	; 238
    2544:	de 4f       	sbci	r29, 0xFE	; 254
    2546:	1a 82       	std	Y+2, r1	; 0x02

			break;
    2548:	14 c0       	rjmp	.+40     	; 0x2572 <AICI_InterpretPacket+0x2cc>
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPCC_ProgramChip();                          // Program the bytes into the chip
    254a:	0e 94 6b 10 	call	0x20d6 <ISPCC_ProgramChip>
			
			MessageSize = 2;
    254e:	82 e0       	ldi	r24, 0x02	; 2
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	90 93 0f 01 	sts	0x010F, r25
    2556:	80 93 0e 01 	sts	0x010E, r24

			PacketBytes[1] = STATUS_CMD_OK;
    255a:	10 92 13 01 	sts	0x0113, r1
			
			break;
    255e:	09 c0       	rjmp	.+18     	; 0x2572 <AICI_InterpretPacket+0x2cc>
		default:                                        // Unknown command, return error
			MessageSize = 1;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	90 93 0f 01 	sts	0x010F, r25
    2568:	80 93 0e 01 	sts	0x010E, r24
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
    256c:	89 ec       	ldi	r24, 0xC9	; 201
    256e:	80 93 13 01 	sts	0x0113, r24
	}

	V2P_SendPacket();                                   // Send the response packet
    2572:	0e 94 48 0d 	call	0x1a90 <V2P_SendPacket>
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	df 90       	pop	r13
    2584:	08 95       	ret

00002586 <PM_GetStoredDataSize>:

// ======================================================================================

uint32_t PM_GetStoredDataSize(uint8_t Type)
{
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	24 97       	sbiw	r28, 0x04	; 4
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
	/* This take a **LOT** of code (202 bytes), and is accessed several times throughout
	   the program, so I've put it into a seperate function to save on flash.            */

	uint32_t ProgDataSize = 0;
    259a:	19 82       	std	Y+1, r1	; 0x01
    259c:	1a 82       	std	Y+2, r1	; 0x02
    259e:	1b 82       	std	Y+3, r1	; 0x03
    25a0:	1c 82       	std	Y+4, r1	; 0x04
void 
eeprom_read_block (void *pointer_ram,
                   const void *pointer_eeprom,
                   size_t n)
{
    25a2:	fe 01       	movw	r30, r28
    25a4:	31 96       	adiw	r30, 0x01	; 1
    25a6:	81 30       	cpi	r24, 0x01	; 1
    25a8:	19 f4       	brne	.+6      	; 0x25b0 <PM_GetStoredDataSize+0x2a>
    25aa:	ab e1       	ldi	r26, 0x1B	; 27
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <PM_GetStoredDataSize+0x2e>
    25b0:	af e1       	ldi	r26, 0x1F	; 31
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
             XCALL " __eeprom_read_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "st z+,__tmp_reg__" CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                  XCALL " __eeprom_read_block_" _REG_LOCATION_SUFFIX 
                : "+x" (pointer_eeprom),
                  "=z" (pointer_ram)
                : "z"  (pointer_ram)
                : "memory");
            }
          else
            {
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 
    25b4:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    25b6:	18 2e       	mov	r1, r24
    25b8:	0e 94 62 19 	call	0x32c4 <__eeprom_read_block_1F2021>

	eeprom_read_block((void*)&ProgDataSize, (const void*)((Type == TYPE_FLASH)? &EEPROMVars.DataSize : &EEPROMVars.EEPROMSize), 4);

	if (ProgDataSize == 0xFFFFFFFF)                                      // Blank EEPROM, return a size  of 0 bytes
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	ab 81       	ldd	r26, Y+3	; 0x03
    25c2:	bc 81       	ldd	r27, Y+4	; 0x04
    25c4:	8f 5f       	subi	r24, 0xFF	; 255
    25c6:	9f 4f       	sbci	r25, 0xFF	; 255
    25c8:	af 4f       	sbci	r26, 0xFF	; 255
    25ca:	bf 4f       	sbci	r27, 0xFF	; 255
    25cc:	21 f4       	brne	.+8      	; 0x25d6 <PM_GetStoredDataSize+0x50>
	   ProgDataSize = 0x00;
    25ce:	19 82       	std	Y+1, r1	; 0x01
    25d0:	1a 82       	std	Y+2, r1	; 0x02
    25d2:	1b 82       	std	Y+3, r1	; 0x03
    25d4:	1c 82       	std	Y+4, r1	; 0x04

	return ProgDataSize;
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	9a 81       	ldd	r25, Y+2	; 0x02
    25da:	ab 81       	ldd	r26, Y+3	; 0x03
    25dc:	bc 81       	ldd	r27, Y+4	; 0x04
}
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	24 96       	adiw	r28, 0x04	; 4
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	08 95       	ret

000025f4 <PM_SetupDFAddressCounters>:

void PM_SetupDFAddressCounters(uint8_t Type)
{
	uint32_t StartAddress;
	
	MemoryType  = Type;
    25f4:	80 93 28 02 	sts	0x0228, r24
	GPageLength = 0;
    25f8:	10 92 26 02 	sts	0x0226, r1
    25fc:	10 92 25 02 	sts	0x0225, r1
    2600:	20 91 09 01 	lds	r18, 0x0109
    2604:	30 91 0a 01 	lds	r19, 0x010A
    2608:	40 91 0b 01 	lds	r20, 0x010B
    260c:	50 91 0c 01 	lds	r21, 0x010C

	if (Type == TYPE_FLASH)                                              // Type 1 = Flash
    2610:	81 30       	cpi	r24, 0x01	; 1
    2612:	39 f4       	brne	.+14     	; 0x2622 <PM_SetupDFAddressCounters+0x2e>
		StartAddress = (CurrAddress << 1);                               // Convert flash word address to byte address
    2614:	da 01       	movw	r26, r20
    2616:	c9 01       	movw	r24, r18
    2618:	88 0f       	add	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	aa 1f       	adc	r26, r26
    261e:	bb 1f       	adc	r27, r27
    2620:	06 c0       	rjmp	.+12     	; 0x262e <PM_SetupDFAddressCounters+0x3a>
	else
		StartAddress = CurrAddress + PM_EEPROM_OFFSET;                   // EEPROM uses byte addresses, and starts at the 257th kilobyte in Dataflash
    2622:	da 01       	movw	r26, r20
    2624:	c9 01       	movw	r24, r18
    2626:	80 50       	subi	r24, 0x00	; 0
    2628:	9c 4f       	sbci	r25, 0xFC	; 252
    262a:	ab 4f       	sbci	r26, 0xFB	; 251
    262c:	bf 4f       	sbci	r27, 0xFF	; 255
	
	CurrPageAddress = 0;
    262e:	10 92 6a 02 	sts	0x026A, r1
    2632:	10 92 69 02 	sts	0x0269, r1

	while (StartAddress >= DF_INTERNALDF_BUFFBYTES)                      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DF_INTERNALDF_BUFFBYTES;                         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    2636:	88 30       	cpi	r24, 0x08	; 8
    2638:	21 e0       	ldi	r18, 0x01	; 1
    263a:	92 07       	cpc	r25, r18
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	a2 07       	cpc	r26, r18
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	b2 07       	cpc	r27, r18
    2644:	a0 f0       	brcs	.+40     	; 0x266e <PM_SetupDFAddressCounters+0x7a>
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	88 50       	subi	r24, 0x08	; 8
    264c:	91 40       	sbci	r25, 0x01	; 1
    264e:	a0 40       	sbci	r26, 0x00	; 0
    2650:	b0 40       	sbci	r27, 0x00	; 0
    2652:	2f 5f       	subi	r18, 0xFF	; 255
    2654:	3f 4f       	sbci	r19, 0xFF	; 255
    2656:	88 30       	cpi	r24, 0x08	; 8
    2658:	41 e0       	ldi	r20, 0x01	; 1
    265a:	94 07       	cpc	r25, r20
    265c:	40 e0       	ldi	r20, 0x00	; 0
    265e:	a4 07       	cpc	r26, r20
    2660:	40 e0       	ldi	r20, 0x00	; 0
    2662:	b4 07       	cpc	r27, r20
    2664:	90 f7       	brcc	.-28     	; 0x264a <PM_SetupDFAddressCounters+0x56>
    2666:	30 93 6a 02 	sts	0x026A, r19
    266a:	20 93 69 02 	sts	0x0269, r18
	}
	
	CurrBuffByte = (uint16_t)StartAddress;                               // The buffer byte is the remainder
    266e:	90 93 63 02 	sts	0x0263, r25
    2672:	80 93 62 02 	sts	0x0262, r24
    2676:	08 95       	ret

00002678 <PM_StoreProgramByte>:
}

void PM_StoreProgramByte(uint8_t Data)
{
    2678:	cf 93       	push	r28
    267a:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DF_INTERNALDF_BUFFBYTES)
    267c:	80 91 62 02 	lds	r24, 0x0262
    2680:	90 91 63 02 	lds	r25, 0x0263
    2684:	88 50       	subi	r24, 0x08	; 8
    2686:	91 40       	sbci	r25, 0x01	; 1
    2688:	a9 f4       	brne	.+42     	; 0x26b4 <PM_StoreProgramByte+0x3c>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    268a:	80 91 69 02 	lds	r24, 0x0269
    268e:	90 91 6a 02 	lds	r25, 0x026A
    2692:	9c 01       	movw	r18, r24
    2694:	01 96       	adiw	r24, 0x01	; 1
    2696:	90 93 6a 02 	sts	0x026A, r25
    269a:	80 93 69 02 	sts	0x0269, r24
    269e:	c9 01       	movw	r24, r18
    26a0:	0e 94 6a 0a 	call	0x14d4 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	0e 94 a8 09 	call	0x1350 <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    26ac:	10 92 63 02 	sts	0x0263, r1
    26b0:	10 92 62 02 	sts	0x0262, r1
	}
	
	SPI_SPITransmit(Data);                                               // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    26b4:	8c 2f       	mov	r24, r28
    26b6:	0e 94 8e 08 	call	0x111c <SPI_SPITransmit>
	CurrBuffByte++;
    26ba:	80 91 62 02 	lds	r24, 0x0262
    26be:	90 91 63 02 	lds	r25, 0x0263
    26c2:	01 96       	adiw	r24, 0x01	; 1
    26c4:	90 93 63 02 	sts	0x0263, r25
    26c8:	80 93 62 02 	sts	0x0262, r24
	GPageLength++;
    26cc:	80 91 25 02 	lds	r24, 0x0225
    26d0:	90 91 26 02 	lds	r25, 0x0226
    26d4:	01 96       	adiw	r24, 0x01	; 1
    26d6:	90 93 26 02 	sts	0x0226, r25
    26da:	80 93 25 02 	sts	0x0225, r24
    26de:	cf 91       	pop	r28
    26e0:	08 95       	ret

000026e2 <PM_CheckEndOfProgramming>:
}

void PM_InterpretAVRISPPacket(void)
{
	uint8_t* EEPROMAddress;

	switch (PacketBytes[0])
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
						
			for (uint8_t PacketB = 0; PacketB <= 11; PacketB++)          // Save the enter programming mode command bytes
			  eeprom_write_byte(&EEPROMVars.EnterProgMode[PacketB], PacketBytes[PacketB]);
			
			InProgrammingMode = TRUE;                                    // Set the flag, prevent the user from exiting the V2P state machine			
			CurrentMode = PM_NO_SETUP;                                   // Clear the current mode variable

			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;

			break;			
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;

			PM_CheckEndOfProgramming();                                  // Check if the last command was a program - if so store the program length
			PM_CheckEndOfFuseLockStore();                                // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
			
			InProgrammingMode = FALSE;                                   // Clear the flag, allow the user to exit the V2P state machine

			DF_EnableDataflash(FALSE);

			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
			PacketBytes[1] = STATUS_CMD_OK;

			break;
		case CMD_READ_SIGNATURE_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x01;                                       // Signature bytes all return "01" in storage mode
			PacketBytes[3] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;

			for (uint8_t PacketB = 1; PacketB <= 6; PacketB++)          // Save the erase chip command bytes to EEPROM
			  eeprom_write_byte(&EEPROMVars.EraseChip[PacketB], PacketBytes[PacketB]);

			for (uint8_t Byte = 0; Byte < 8; Byte++)                    // Clear the program and EEPROM size counters
			{
				eeprom_write_byte(&EEPROMVars.DataSize[Byte], 0x00);
				eeprom_write_byte(&EEPROMVars.EEPROMSize[Byte], 0x00);
			}
						
			eeprom_write_byte(&EEPROMVars.EraseCmdStored, TRUE);
			
			PacketBytes[1] = STATUS_CMD_OK;
			
			break;
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x00;                                      // Return 0x00 for the OSCCAL byte
			PacketBytes[3] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs

			break;
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
			MessageSize = 4;
	
			if (CurrentMode != PM_LOCKFUSEBITS_READ)                    // First lock or fuse byte being read, set the EEPROM pointer
			{
				PM_CheckEndOfProgramming();                             // Check if the last command was a program - if so store the program length
				PM_CheckEndOfFuseLockStore();                           // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
				
				CurrBuffByte = 0;
				CurrentMode  = PM_LOCKFUSEBITS_READ;
			}
			
			if (CurrBuffByte > eeprom_read_byte((uint8_t*)((PacketBytes[0] == CMD_READ_FUSE_ISP)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes)))    // Trying to read more fuse/lock bytes than are stored in memory
			{
				PacketBytes[2] = 0xFF;                                  // Return 0xFF for the fuse/lock byte
			}
			else
			{
				PacketBytes[2] = eeprom_read_byte((uint8_t*)((PacketBytes[0] == CMD_READ_FUSE_ISP)? &EEPROMVars.FuseBytes : &EEPROMVars.LockBytes) // Starting location
									                         + (CurrBuffByte << 2) + (PacketBytes[1] - 1));                                        // The start position of the actual fuse/lock byte to read (4 bytes each));
			}

			PacketBytes[1] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs
			PacketBytes[3] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs

			CurrBuffByte++;

			break;
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;

			if (CurrentMode != PM_LOCKFUSEBITS_WRITE)                  // First lock or fuse byte being written, set the EEPROM pointer
			{
				CurrentMode   = PM_LOCKFUSEBITS_WRITE;
				CurrBuffByte  = 0;                                     // CurrBuffByte is used to store the total fuse/lock bytes written
			}

			if (PacketBytes[0] == CMD_PROGRAM_FUSE_ISP)
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.FuseBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_FUSE;
			}
			else
			{
				EEPROMAddress = (uint8_t*)(&EEPROMVars.LockBytes + (CurrBuffByte << 2));
				MemoryType    = TYPE_LOCK;
			}				
			
			if (CurrBuffByte < PM_MAX_FUSELOCKBITS)
			{
				for (uint8_t FLByte = 1; FLByte <= 4; FLByte++)
				{
					eeprom_write_byte(EEPROMAddress, PacketBytes[FLByte]);
					EEPROMAddress++;
				}

				CurrBuffByte++;                                        // Increment the total fuse/lock bytes written counter
			}
			
			PacketBytes[1] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned
			PacketBytes[2] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned

			break;
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			MessageSize = 2;

			if (CurrentMode != PM_DATAFLASH_WRITE)                     // First programming packet
			{
				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)           // Flash programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram; // Set the eeprom address to the Program command bytes location
					PM_SetupDFAddressCounters(TYPE_FLASH);
				}
				else                                                   // EEPROM programming mode
				{
					EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;  // Set the eeprom address to the EEPROM command bytes location
					PM_SetupDFAddressCounters(TYPE_EEPROM);
				}
				
				DF_BufferWriteEnable(CurrBuffByte);
				CurrentMode = PM_DATAFLASH_WRITE;
				
				for (uint8_t B = 1; B <= 9; B++)                       // Save the command bytes
				{
					eeprom_write_byte(EEPROMAddress, PacketBytes[B]);
					EEPROMAddress++;				
				}
			}

			uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
			                      | PacketBytes[2];

			for (uint16_t CurrByte = 0; CurrByte < BytesToWrite; CurrByte++)
				PM_StoreProgramByte(PacketBytes[10 + CurrByte]);

			if (!(GPageLength & PM_PAGELENGTH_FOUNDBIT) && (PacketBytes[3] & ISPCC_PROG_MODE_PAGEDONE) && GPageLength)
			{
				eeprom_write_word(((MemoryType == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength), GPageLength);
		
				GPageLength |= PM_PAGELENGTH_FOUNDBIT;                 // Bit 15 is used to indicate if the length has been found
			}

			PacketBytes[1] = STATUS_CMD_OK;
		
			break;
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:	
			if (CurrentMode != PM_DATAFLASH_READ)
			{
				PM_CheckEndOfProgramming();                           // Check if the last command was a program - if so store the program length
				PM_CheckEndOfFuseLockStore();                         // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
				
				PM_SetupDFAddressCounters((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);
				DF_ContinuousReadEnable(CurrPageAddress, CurrBuffByte);
				
				CurrentMode = PM_DATAFLASH_READ;
				CurrAddress = 0;
			}

			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8)    // \. Load in the number of bytes that is to
			                     | PacketBytes[2];                    // /  be read into a temp variable (MSB first)
						
			uint16_t BytesInMem  = PM_GetStoredDataSize((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
			   PacketBytes[2 + ReadByte] = ((CurrAddress < BytesInMem)? SPI_SPITransmit(0x00) : 0xFF); // Read in the next dataflash byte if present
			   V2P_IncrementCurrAddress();
			}
			
			MessageSize = BytesToRead + 3;

			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
		
			break;
		default:
			MessageSize = 1;
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
	}

	V2P_SendPacket();                                   // Send the response packet
}

void PM_CheckEndOfProgramming(void)
{
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	24 97       	sbiw	r28, 0x04	; 4
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
	uint8_t* EEPROMAddress;

	if (CurrentMode == PM_DATAFLASH_WRITE)
    26f6:	80 91 27 02 	lds	r24, 0x0227
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	09 f0       	breq	.+2      	; 0x2700 <PM_CheckEndOfProgramming+0x1e>
    26fe:	41 c0       	rjmp	.+130    	; 0x2782 <PM_CheckEndOfProgramming+0xa0>
	{
		if (CurrBuffByte)                               // Data in the dataflash buffer, pending to be written
    2700:	80 91 62 02 	lds	r24, 0x0262
    2704:	90 91 63 02 	lds	r25, 0x0263
    2708:	89 2b       	or	r24, r25
    270a:	31 f0       	breq	.+12     	; 0x2718 <PM_CheckEndOfProgramming+0x36>
		  DF_CopyBufferToFlashPage(CurrPageAddress);   // Save the buffer
    270c:	80 91 69 02 	lds	r24, 0x0269
    2710:	90 91 6a 02 	lds	r25, 0x026A
    2714:	0e 94 6a 0a 	call	0x14d4 <DF_CopyBufferToFlashPage>

		uint32_t DataSize = ((uint32_t)CurrPageAddress * DF_INTERNALDF_BUFFBYTES) + CurrBuffByte;
    2718:	80 91 69 02 	lds	r24, 0x0269
    271c:	90 91 6a 02 	lds	r25, 0x026A
    2720:	aa 27       	eor	r26, r26
    2722:	bb 27       	eor	r27, r27
    2724:	bc 01       	movw	r22, r24
    2726:	cd 01       	movw	r24, r26
    2728:	28 e0       	ldi	r18, 0x08	; 8
    272a:	31 e0       	ldi	r19, 0x01	; 1
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	50 e0       	ldi	r21, 0x00	; 0
    2730:	0e 94 3b 19 	call	0x3276 <__mulsi3>
    2734:	9b 01       	movw	r18, r22
    2736:	ac 01       	movw	r20, r24
    2738:	80 91 62 02 	lds	r24, 0x0262
    273c:	90 91 63 02 	lds	r25, 0x0263
    2740:	aa 27       	eor	r26, r26
    2742:	bb 27       	eor	r27, r27
    2744:	28 0f       	add	r18, r24
    2746:	39 1f       	adc	r19, r25
    2748:	4a 1f       	adc	r20, r26
    274a:	5b 1f       	adc	r21, r27
    274c:	29 83       	std	Y+1, r18	; 0x01
    274e:	3a 83       	std	Y+2, r19	; 0x02
    2750:	4b 83       	std	Y+3, r20	; 0x03
    2752:	5c 83       	std	Y+4, r21	; 0x04

		if (MemoryType == TYPE_FLASH)
    2754:	80 91 28 02 	lds	r24, 0x0228
    2758:	81 30       	cpi	r24, 0x01	; 1
    275a:	19 f4       	brne	.+6      	; 0x2762 <PM_CheckEndOfProgramming+0x80>
		{
			EEPROMAddress = (uint8_t*)&EEPROMVars.DataSize;       
    275c:	ab e1       	ldi	r26, 0x1B	; 27
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	0a c0       	rjmp	.+20     	; 0x2776 <PM_CheckEndOfProgramming+0x94>
		}
		else
		{
			EEPROMAddress = (uint8_t*)&EEPROMVars.EEPROMSize;
    2762:	af e1       	ldi	r26, 0x1F	; 31
    2764:	b0 e0       	ldi	r27, 0x00	; 0
			DataSize -= PM_EEPROM_OFFSET;                // Remove DataFlash starting offset
    2766:	20 50       	subi	r18, 0x00	; 0
    2768:	34 40       	sbci	r19, 0x04	; 4
    276a:	44 40       	sbci	r20, 0x04	; 4
    276c:	50 40       	sbci	r21, 0x00	; 0
    276e:	29 83       	std	Y+1, r18	; 0x01
    2770:	3a 83       	std	Y+2, r19	; 0x02
    2772:	4b 83       	std	Y+3, r20	; 0x03
    2774:	5c 83       	std	Y+4, r21	; 0x04
void 
eeprom_write_block (const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t n)
{
    2776:	fe 01       	movw	r30, r28
    2778:	31 96       	adiw	r30, 0x01	; 1
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      asm volatile ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
            "ld __tmp_reg__,z+" CR_TAB
             XCALL " __eeprom_write_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      /* Do nothing for compile time constant transfer size n == 0.  */
      if (n != 0)
        {
          if (n == 256)
            {
              asm volatile (
                 XCALL " __eeprom_write_block_" _REG_LOCATION_SUFFIX
               : "+x" (pointer_eeprom),
                 "=z" (pointer_ram)
               : "z"  (pointer_ram)
               : "memory" );
            }
          else
            {
              uint8_t len;
              len = (uint8_t) n;
    277a:	84 e0       	ldi	r24, 0x04	; 4

              asm volatile (
    277c:	18 2e       	mov	r1, r24
    277e:	0e 94 7d 19 	call	0x32fa <__eeprom_write_block_1F2021>
    2782:	24 96       	adiw	r28, 0x04	; 4
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	08 95       	ret

00002794 <PM_CheckEndOfFuseLockStore>:
		}

		eeprom_write_block((const void*)&DataSize, (void*)EEPROMAddress, 4);
	}
}

void PM_CheckEndOfFuseLockStore(void)
{
	if (CurrentMode == PM_LOCKFUSEBITS_WRITE)
    2794:	80 91 27 02 	lds	r24, 0x0227
    2798:	83 30       	cpi	r24, 0x03	; 3
    279a:	71 f4       	brne	.+28     	; 0x27b8 <PM_CheckEndOfFuseLockStore+0x24>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    279c:	80 91 28 02 	lds	r24, 0x0228
    27a0:	82 30       	cpi	r24, 0x02	; 2
    27a2:	19 f4       	brne	.+6      	; 0x27aa <PM_CheckEndOfFuseLockStore+0x16>
    27a4:	af e2       	ldi	r26, 0x2F	; 47
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	02 c0       	rjmp	.+4      	; 0x27ae <PM_CheckEndOfFuseLockStore+0x1a>
    27aa:	a0 e3       	ldi	r26, 0x30	; 48
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	80 91 62 02 	lds	r24, 0x0262
  asm volatile (
    27b2:	08 2e       	mov	r0, r24
    27b4:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
    27b8:	08 95       	ret

000027ba <PM_InterpretAVRISPPacket>:
    27ba:	cf 92       	push	r12
    27bc:	df 92       	push	r13
    27be:	ef 92       	push	r14
    27c0:	ff 92       	push	r15
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	40 91 12 01 	lds	r20, 0x0112
    27ce:	84 2f       	mov	r24, r20
    27d0:	99 27       	eor	r25, r25
    27d2:	86 31       	cpi	r24, 0x16	; 22
    27d4:	91 05       	cpc	r25, r1
    27d6:	09 f4       	brne	.+2      	; 0x27da <PM_InterpretAVRISPPacket+0x20>
    27d8:	b9 c1       	rjmp	.+882    	; 0x2b4c <PM_InterpretAVRISPPacket+0x392>
    27da:	87 31       	cpi	r24, 0x17	; 23
    27dc:	91 05       	cpc	r25, r1
    27de:	94 f4       	brge	.+36     	; 0x2804 <PM_InterpretAVRISPPacket+0x4a>
    27e0:	82 31       	cpi	r24, 0x12	; 18
    27e2:	91 05       	cpc	r25, r1
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <PM_InterpretAVRISPPacket+0x2e>
    27e6:	68 c0       	rjmp	.+208    	; 0x28b8 <PM_InterpretAVRISPPacket+0xfe>
    27e8:	83 31       	cpi	r24, 0x13	; 19
    27ea:	91 05       	cpc	r25, r1
    27ec:	3c f4       	brge	.+14     	; 0x27fc <PM_InterpretAVRISPPacket+0x42>
    27ee:	80 31       	cpi	r24, 0x10	; 16
    27f0:	91 05       	cpc	r25, r1
    27f2:	11 f1       	breq	.+68     	; 0x2838 <PM_InterpretAVRISPPacket+0x7e>
    27f4:	41 97       	sbiw	r24, 0x11	; 17
    27f6:	09 f4       	brne	.+2      	; 0x27fa <PM_InterpretAVRISPPacket+0x40>
    27f8:	3f c0       	rjmp	.+126    	; 0x2878 <PM_InterpretAVRISPPacket+0xbe>
    27fa:	18 c2       	rjmp	.+1072   	; 0x2c2c <PM_InterpretAVRISPPacket+0x472>
    27fc:	44 97       	sbiw	r24, 0x14	; 20
    27fe:	09 f4       	brne	.+2      	; 0x2802 <PM_InterpretAVRISPPacket+0x48>
    2800:	a5 c1       	rjmp	.+842    	; 0x2b4c <PM_InterpretAVRISPPacket+0x392>
    2802:	38 c1       	rjmp	.+624    	; 0x2a74 <PM_InterpretAVRISPPacket+0x2ba>
    2804:	89 31       	cpi	r24, 0x19	; 25
    2806:	91 05       	cpc	r25, r1
    2808:	09 f4       	brne	.+2      	; 0x280c <PM_InterpretAVRISPPacket+0x52>
    280a:	e2 c0       	rjmp	.+452    	; 0x29d0 <PM_InterpretAVRISPPacket+0x216>
    280c:	8a 31       	cpi	r24, 0x1A	; 26
    280e:	91 05       	cpc	r25, r1
    2810:	44 f4       	brge	.+16     	; 0x2822 <PM_InterpretAVRISPPacket+0x68>
    2812:	87 31       	cpi	r24, 0x17	; 23
    2814:	91 05       	cpc	r25, r1
    2816:	09 f4       	brne	.+2      	; 0x281a <PM_InterpretAVRISPPacket+0x60>
    2818:	db c0       	rjmp	.+438    	; 0x29d0 <PM_InterpretAVRISPPacket+0x216>
    281a:	48 97       	sbiw	r24, 0x18	; 24
    281c:	09 f4       	brne	.+2      	; 0x2820 <PM_InterpretAVRISPPacket+0x66>
    281e:	8b c0       	rjmp	.+278    	; 0x2936 <PM_InterpretAVRISPPacket+0x17c>
    2820:	05 c2       	rjmp	.+1034   	; 0x2c2c <PM_InterpretAVRISPPacket+0x472>
    2822:	8b 31       	cpi	r24, 0x1B	; 27
    2824:	91 05       	cpc	r25, r1
    2826:	e1 f1       	breq	.+120    	; 0x28a0 <PM_InterpretAVRISPPacket+0xe6>
    2828:	8b 31       	cpi	r24, 0x1B	; 27
    282a:	91 05       	cpc	r25, r1
    282c:	0c f4       	brge	.+2      	; 0x2830 <PM_InterpretAVRISPPacket+0x76>
    282e:	83 c0       	rjmp	.+262    	; 0x2936 <PM_InterpretAVRISPPacket+0x17c>
    2830:	4c 97       	sbiw	r24, 0x1c	; 28
    2832:	09 f4       	brne	.+2      	; 0x2836 <PM_InterpretAVRISPPacket+0x7c>
    2834:	73 c0       	rjmp	.+230    	; 0x291c <PM_InterpretAVRISPPacket+0x162>
    2836:	fa c1       	rjmp	.+1012   	; 0x2c2c <PM_InterpretAVRISPPacket+0x472>
    2838:	82 e0       	ldi	r24, 0x02	; 2
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	90 93 0f 01 	sts	0x010F, r25
    2840:	80 93 0e 01 	sts	0x010E, r24
    2844:	e2 e1       	ldi	r30, 0x12	; 18
    2846:	f1 e0       	ldi	r31, 0x01	; 1
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	9b e0       	ldi	r25, 0x0B	; 11
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    284e:	d9 01       	movw	r26, r18
    2850:	ad 5d       	subi	r26, 0xDD	; 221
    2852:	bf 4f       	sbci	r27, 0xFF	; 255
    2854:	81 91       	ld	r24, Z+
  asm volatile (
    2856:	08 2e       	mov	r0, r24
    2858:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
    285c:	91 50       	subi	r25, 0x01	; 1
    285e:	2f 5f       	subi	r18, 0xFF	; 255
    2860:	3f 4f       	sbci	r19, 0xFF	; 255
    2862:	97 ff       	sbrs	r25, 7
    2864:	f4 cf       	rjmp	.-24     	; 0x284e <PM_InterpretAVRISPPacket+0x94>
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	80 93 0d 01 	sts	0x010D, r24
    286c:	10 92 27 02 	sts	0x0227, r1
    2870:	81 b3       	in	r24, 0x11	; 17
    2872:	8f 7c       	andi	r24, 0xCF	; 207
    2874:	80 62       	ori	r24, 0x20	; 32
    2876:	12 c0       	rjmp	.+36     	; 0x289c <PM_InterpretAVRISPPacket+0xe2>
    2878:	82 e0       	ldi	r24, 0x02	; 2
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	90 93 0f 01 	sts	0x010F, r25
    2880:	80 93 0e 01 	sts	0x010E, r24
    2884:	0e 94 71 13 	call	0x26e2 <PM_CheckEndOfProgramming>
    2888:	0e 94 ca 13 	call	0x2794 <PM_CheckEndOfFuseLockStore>
    288c:	10 92 0d 01 	sts	0x010D, r1
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    2896:	81 b3       	in	r24, 0x11	; 17
    2898:	8f 7c       	andi	r24, 0xCF	; 207
    289a:	80 61       	ori	r24, 0x10	; 16
    289c:	81 bb       	out	0x11, r24	; 17
    289e:	53 c1       	rjmp	.+678    	; 0x2b46 <PM_InterpretAVRISPPacket+0x38c>
    28a0:	84 e0       	ldi	r24, 0x04	; 4
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	90 93 0f 01 	sts	0x010F, r25
    28a8:	80 93 0e 01 	sts	0x010E, r24
    28ac:	10 92 13 01 	sts	0x0113, r1
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	80 93 14 01 	sts	0x0114, r24
    28b6:	3c c0       	rjmp	.+120    	; 0x2930 <PM_InterpretAVRISPPacket+0x176>
    28b8:	82 e0       	ldi	r24, 0x02	; 2
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	90 93 0f 01 	sts	0x010F, r25
    28c0:	80 93 0e 01 	sts	0x010E, r24
    28c4:	e3 e1       	ldi	r30, 0x13	; 19
    28c6:	f1 e0       	ldi	r31, 0x01	; 1
    28c8:	21 e0       	ldi	r18, 0x01	; 1
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	95 e0       	ldi	r25, 0x05	; 5
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    28ce:	d9 01       	movw	r26, r18
    28d0:	ab 5e       	subi	r26, 0xEB	; 235
    28d2:	bf 4f       	sbci	r27, 0xFF	; 255
    28d4:	81 91       	ld	r24, Z+
  asm volatile (
    28d6:	08 2e       	mov	r0, r24
    28d8:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
    28dc:	91 50       	subi	r25, 0x01	; 1
    28de:	2f 5f       	subi	r18, 0xFF	; 255
    28e0:	3f 4f       	sbci	r19, 0xFF	; 255
    28e2:	97 ff       	sbrs	r25, 7
    28e4:	f4 cf       	rjmp	.-24     	; 0x28ce <PM_InterpretAVRISPPacket+0x114>
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	37 e0       	ldi	r19, 0x07	; 7
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    28ee:	dc 01       	movw	r26, r24
    28f0:	a5 5e       	subi	r26, 0xE5	; 229
    28f2:	bf 4f       	sbci	r27, 0xFF	; 255
  asm volatile (
    28f4:	02 2e       	mov	r0, r18
    28f6:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
    28fa:	dc 01       	movw	r26, r24
    28fc:	a1 5e       	subi	r26, 0xE1	; 225
    28fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2900:	02 2e       	mov	r0, r18
    2902:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
    2906:	31 50       	subi	r19, 0x01	; 1
    2908:	01 96       	adiw	r24, 0x01	; 1
    290a:	37 ff       	sbrs	r19, 7
    290c:	f0 cf       	rjmp	.-32     	; 0x28ee <PM_InterpretAVRISPPacket+0x134>
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    290e:	a4 e1       	ldi	r26, 0x14	; 20
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	81 e0       	ldi	r24, 0x01	; 1
  asm volatile (
    2914:	08 2e       	mov	r0, r24
    2916:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
    291a:	15 c1       	rjmp	.+554    	; 0x2b46 <PM_InterpretAVRISPPacket+0x38c>
    291c:	84 e0       	ldi	r24, 0x04	; 4
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	90 93 0f 01 	sts	0x010F, r25
    2924:	80 93 0e 01 	sts	0x010E, r24
    2928:	10 92 13 01 	sts	0x0113, r1
    292c:	10 92 14 01 	sts	0x0114, r1
    2930:	10 92 15 01 	sts	0x0115, r1
    2934:	84 c1       	rjmp	.+776    	; 0x2c3e <PM_InterpretAVRISPPacket+0x484>
    2936:	84 e0       	ldi	r24, 0x04	; 4
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	90 93 0f 01 	sts	0x010F, r25
    293e:	80 93 0e 01 	sts	0x010E, r24
    2942:	80 91 27 02 	lds	r24, 0x0227
    2946:	84 30       	cpi	r24, 0x04	; 4
    2948:	59 f0       	breq	.+22     	; 0x2960 <PM_InterpretAVRISPPacket+0x1a6>
    294a:	0e 94 71 13 	call	0x26e2 <PM_CheckEndOfProgramming>
    294e:	0e 94 ca 13 	call	0x2794 <PM_CheckEndOfFuseLockStore>
    2952:	10 92 63 02 	sts	0x0263, r1
    2956:	10 92 62 02 	sts	0x0262, r1
    295a:	84 e0       	ldi	r24, 0x04	; 4
    295c:	80 93 27 02 	sts	0x0227, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2960:	60 91 12 01 	lds	r22, 0x0112
    2964:	68 31       	cpi	r22, 0x18	; 24
    2966:	19 f4       	brne	.+6      	; 0x296e <PM_InterpretAVRISPPacket+0x1b4>
    2968:	af e2       	ldi	r26, 0x2F	; 47
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <PM_InterpretAVRISPPacket+0x1b8>
    296e:	a0 e3       	ldi	r26, 0x30	; 48
    2970:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2972:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
    2976:	80 2d       	mov	r24, r0
    2978:	99 27       	eor	r25, r25
    297a:	40 91 62 02 	lds	r20, 0x0262
    297e:	50 91 63 02 	lds	r21, 0x0263
    2982:	84 17       	cp	r24, r20
    2984:	95 07       	cpc	r25, r21
    2986:	10 f4       	brcc	.+4      	; 0x298c <PM_InterpretAVRISPPacket+0x1d2>
    2988:	8f ef       	ldi	r24, 0xFF	; 255
    298a:	15 c0       	rjmp	.+42     	; 0x29b6 <PM_InterpretAVRISPPacket+0x1fc>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    298c:	9a 01       	movw	r18, r20
    298e:	22 0f       	add	r18, r18
    2990:	33 1f       	adc	r19, r19
    2992:	22 0f       	add	r18, r18
    2994:	33 1f       	adc	r19, r19
    2996:	80 91 13 01 	lds	r24, 0x0113
    299a:	28 0f       	add	r18, r24
    299c:	31 1d       	adc	r19, r1
    299e:	68 31       	cpi	r22, 0x18	; 24
    29a0:	21 f4       	brne	.+8      	; 0x29aa <PM_InterpretAVRISPPacket+0x1f0>
    29a2:	d9 01       	movw	r26, r18
    29a4:	a0 5d       	subi	r26, 0xD0	; 208
    29a6:	bf 4f       	sbci	r27, 0xFF	; 255
    29a8:	03 c0       	rjmp	.+6      	; 0x29b0 <PM_InterpretAVRISPPacket+0x1f6>
    29aa:	d9 01       	movw	r26, r18
    29ac:	a8 5a       	subi	r26, 0xA8	; 168
    29ae:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    29b0:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
    29b4:	80 2d       	mov	r24, r0
    29b6:	80 93 14 01 	sts	0x0114, r24
    29ba:	10 92 13 01 	sts	0x0113, r1
    29be:	10 92 15 01 	sts	0x0115, r1
    29c2:	4f 5f       	subi	r20, 0xFF	; 255
    29c4:	5f 4f       	sbci	r21, 0xFF	; 255
    29c6:	50 93 63 02 	sts	0x0263, r21
    29ca:	40 93 62 02 	sts	0x0262, r20
    29ce:	37 c1       	rjmp	.+622    	; 0x2c3e <PM_InterpretAVRISPPacket+0x484>
    29d0:	83 e0       	ldi	r24, 0x03	; 3
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	90 93 0f 01 	sts	0x010F, r25
    29d8:	80 93 0e 01 	sts	0x010E, r24
    29dc:	80 91 27 02 	lds	r24, 0x0227
    29e0:	83 30       	cpi	r24, 0x03	; 3
    29e2:	39 f0       	breq	.+14     	; 0x29f2 <PM_InterpretAVRISPPacket+0x238>
    29e4:	83 e0       	ldi	r24, 0x03	; 3
    29e6:	80 93 27 02 	sts	0x0227, r24
    29ea:	10 92 63 02 	sts	0x0263, r1
    29ee:	10 92 62 02 	sts	0x0262, r1
    29f2:	20 91 62 02 	lds	r18, 0x0262
    29f6:	30 91 63 02 	lds	r19, 0x0263
    29fa:	47 31       	cpi	r20, 0x17	; 23
    29fc:	69 f4       	brne	.+26     	; 0x2a18 <PM_InterpretAVRISPPacket+0x25e>
    29fe:	80 ea       	ldi	r24, 0xA0	; 160
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	28 9f       	mul	r18, r24
    2a04:	e0 01       	movw	r28, r0
    2a06:	29 9f       	mul	r18, r25
    2a08:	d0 0d       	add	r29, r0
    2a0a:	38 9f       	mul	r19, r24
    2a0c:	d0 0d       	add	r29, r0
    2a0e:	11 24       	eor	r1, r1
    2a10:	cf 5c       	subi	r28, 0xCF	; 207
    2a12:	df 4f       	sbci	r29, 0xFF	; 255
    2a14:	82 e0       	ldi	r24, 0x02	; 2
    2a16:	0c c0       	rjmp	.+24     	; 0x2a30 <PM_InterpretAVRISPPacket+0x276>
    2a18:	80 ea       	ldi	r24, 0xA0	; 160
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	28 9f       	mul	r18, r24
    2a1e:	e0 01       	movw	r28, r0
    2a20:	29 9f       	mul	r18, r25
    2a22:	d0 0d       	add	r29, r0
    2a24:	38 9f       	mul	r19, r24
    2a26:	d0 0d       	add	r29, r0
    2a28:	11 24       	eor	r1, r1
    2a2a:	c7 5a       	subi	r28, 0xA7	; 167
    2a2c:	df 4f       	sbci	r29, 0xFF	; 255
    2a2e:	83 e0       	ldi	r24, 0x03	; 3
    2a30:	80 93 28 02 	sts	0x0228, r24
    2a34:	80 91 62 02 	lds	r24, 0x0262
    2a38:	90 91 63 02 	lds	r25, 0x0263
    2a3c:	0a 97       	sbiw	r24, 0x0a	; 10
    2a3e:	a8 f4       	brcc	.+42     	; 0x2a6a <PM_InterpretAVRISPPacket+0x2b0>
    2a40:	e3 e1       	ldi	r30, 0x13	; 19
    2a42:	f1 e0       	ldi	r31, 0x01	; 1
    2a44:	93 e0       	ldi	r25, 0x03	; 3
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2a46:	81 91       	ld	r24, Z+
  asm volatile (
    2a48:	de 01       	movw	r26, r28
    2a4a:	08 2e       	mov	r0, r24
    2a4c:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
    2a50:	21 96       	adiw	r28, 0x01	; 1
    2a52:	91 50       	subi	r25, 0x01	; 1
    2a54:	97 ff       	sbrs	r25, 7
    2a56:	f7 cf       	rjmp	.-18     	; 0x2a46 <PM_InterpretAVRISPPacket+0x28c>
    2a58:	80 91 62 02 	lds	r24, 0x0262
    2a5c:	90 91 63 02 	lds	r25, 0x0263
    2a60:	01 96       	adiw	r24, 0x01	; 1
    2a62:	90 93 63 02 	sts	0x0263, r25
    2a66:	80 93 62 02 	sts	0x0262, r24
    2a6a:	10 92 13 01 	sts	0x0113, r1
    2a6e:	10 92 14 01 	sts	0x0114, r1
    2a72:	e5 c0       	rjmp	.+458    	; 0x2c3e <PM_InterpretAVRISPPacket+0x484>
    2a74:	82 e0       	ldi	r24, 0x02	; 2
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	90 93 0f 01 	sts	0x010F, r25
    2a7c:	80 93 0e 01 	sts	0x010E, r24
    2a80:	80 91 27 02 	lds	r24, 0x0227
    2a84:	81 30       	cpi	r24, 0x01	; 1
    2a86:	01 f1       	breq	.+64     	; 0x2ac8 <PM_InterpretAVRISPPacket+0x30e>
    2a88:	43 31       	cpi	r20, 0x13	; 19
    2a8a:	21 f4       	brne	.+8      	; 0x2a94 <PM_InterpretAVRISPPacket+0x2da>
    2a8c:	c2 e0       	ldi	r28, 0x02	; 2
    2a8e:	d0 e0       	ldi	r29, 0x00	; 0
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	03 c0       	rjmp	.+6      	; 0x2a9a <PM_InterpretAVRISPPacket+0x2e0>
    2a94:	cb e0       	ldi	r28, 0x0B	; 11
    2a96:	d0 e0       	ldi	r29, 0x00	; 0
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	0e 94 fa 12 	call	0x25f4 <PM_SetupDFAddressCounters>
    2a9e:	80 91 62 02 	lds	r24, 0x0262
    2aa2:	90 91 63 02 	lds	r25, 0x0263
    2aa6:	0e 94 a8 09 	call	0x1350 <DF_BufferWriteEnable>
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	80 93 27 02 	sts	0x0227, r24
    2ab0:	e3 e1       	ldi	r30, 0x13	; 19
    2ab2:	f1 e0       	ldi	r31, 0x01	; 1
    2ab4:	98 e0       	ldi	r25, 0x08	; 8
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
    2ab6:	81 91       	ld	r24, Z+
  asm volatile (
    2ab8:	de 01       	movw	r26, r28
    2aba:	08 2e       	mov	r0, r24
    2abc:	0e 94 6c 19 	call	0x32d8 <__eeprom_write_byte_1F2021>
    2ac0:	21 96       	adiw	r28, 0x01	; 1
    2ac2:	91 50       	subi	r25, 0x01	; 1
    2ac4:	97 ff       	sbrs	r25, 7
    2ac6:	f7 cf       	rjmp	.-18     	; 0x2ab6 <PM_InterpretAVRISPPacket+0x2fc>
    2ac8:	80 91 13 01 	lds	r24, 0x0113
    2acc:	99 27       	eor	r25, r25
    2ace:	d8 2f       	mov	r29, r24
    2ad0:	cc 27       	eor	r28, r28
    2ad2:	80 91 14 01 	lds	r24, 0x0114
    2ad6:	99 27       	eor	r25, r25
    2ad8:	c8 2b       	or	r28, r24
    2ada:	d9 2b       	or	r29, r25
    2adc:	00 e0       	ldi	r16, 0x00	; 0
    2ade:	10 e0       	ldi	r17, 0x00	; 0
    2ae0:	0c 17       	cp	r16, r28
    2ae2:	1d 07       	cpc	r17, r29
    2ae4:	70 f4       	brcc	.+28     	; 0x2b02 <PM_InterpretAVRISPPacket+0x348>
    2ae6:	5c e1       	ldi	r21, 0x1C	; 28
    2ae8:	e5 2e       	mov	r14, r21
    2aea:	51 e0       	ldi	r21, 0x01	; 1
    2aec:	f5 2e       	mov	r15, r21
    2aee:	f7 01       	movw	r30, r14
    2af0:	81 91       	ld	r24, Z+
    2af2:	7f 01       	movw	r14, r30
    2af4:	0e 94 3c 13 	call	0x2678 <PM_StoreProgramByte>
    2af8:	0f 5f       	subi	r16, 0xFF	; 255
    2afa:	1f 4f       	sbci	r17, 0xFF	; 255
    2afc:	0c 17       	cp	r16, r28
    2afe:	1d 07       	cpc	r17, r29
    2b00:	b0 f3       	brcs	.-20     	; 0x2aee <PM_InterpretAVRISPPacket+0x334>
    2b02:	20 91 25 02 	lds	r18, 0x0225
    2b06:	30 91 26 02 	lds	r19, 0x0226
    2b0a:	37 fd       	sbrc	r19, 7
    2b0c:	1c c0       	rjmp	.+56     	; 0x2b46 <PM_InterpretAVRISPPacket+0x38c>
    2b0e:	80 91 15 01 	lds	r24, 0x0115
    2b12:	87 ff       	sbrs	r24, 7
    2b14:	18 c0       	rjmp	.+48     	; 0x2b46 <PM_InterpretAVRISPPacket+0x38c>
    2b16:	21 15       	cp	r18, r1
    2b18:	31 05       	cpc	r19, r1
    2b1a:	a9 f0       	breq	.+42     	; 0x2b46 <PM_InterpretAVRISPPacket+0x38c>
    Write a word \c value to EEPROM address \c addr. */

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
    2b1c:	80 91 28 02 	lds	r24, 0x0228
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	19 f4       	brne	.+6      	; 0x2b2a <PM_InterpretAVRISPPacket+0x370>
    2b24:	a1 e8       	ldi	r26, 0x81	; 129
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <PM_InterpretAVRISPPacket+0x374>
    2b2a:	a3 e8       	ldi	r26, 0x83	; 131
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
  asm volatile (
    2b2e:	09 01       	movw	r0, r18
    2b30:	0e 94 78 19 	call	0x32f0 <__eeprom_write_word_1F2021>
    2b34:	80 91 25 02 	lds	r24, 0x0225
    2b38:	90 91 26 02 	lds	r25, 0x0226
    2b3c:	90 68       	ori	r25, 0x80	; 128
    2b3e:	90 93 26 02 	sts	0x0226, r25
    2b42:	80 93 25 02 	sts	0x0225, r24
    2b46:	10 92 13 01 	sts	0x0113, r1
    2b4a:	79 c0       	rjmp	.+242    	; 0x2c3e <PM_InterpretAVRISPPacket+0x484>
    2b4c:	80 91 27 02 	lds	r24, 0x0227
    2b50:	82 30       	cpi	r24, 0x02	; 2
    2b52:	11 f1       	breq	.+68     	; 0x2b98 <PM_InterpretAVRISPPacket+0x3de>
    2b54:	0e 94 71 13 	call	0x26e2 <PM_CheckEndOfProgramming>
    2b58:	0e 94 ca 13 	call	0x2794 <PM_CheckEndOfFuseLockStore>
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	80 91 12 01 	lds	r24, 0x0112
    2b62:	84 31       	cpi	r24, 0x14	; 20
    2b64:	09 f4       	brne	.+2      	; 0x2b68 <PM_InterpretAVRISPPacket+0x3ae>
    2b66:	91 e0       	ldi	r25, 0x01	; 1
    2b68:	89 2f       	mov	r24, r25
    2b6a:	0e 94 fa 12 	call	0x25f4 <PM_SetupDFAddressCounters>
    2b6e:	60 91 62 02 	lds	r22, 0x0262
    2b72:	70 91 63 02 	lds	r23, 0x0263
    2b76:	80 91 69 02 	lds	r24, 0x0269
    2b7a:	90 91 6a 02 	lds	r25, 0x026A
    2b7e:	0e 94 66 09 	call	0x12cc <DF_ContinuousReadEnable>
    2b82:	82 e0       	ldi	r24, 0x02	; 2
    2b84:	80 93 27 02 	sts	0x0227, r24
    2b88:	10 92 09 01 	sts	0x0109, r1
    2b8c:	10 92 0a 01 	sts	0x010A, r1
    2b90:	10 92 0b 01 	sts	0x010B, r1
    2b94:	10 92 0c 01 	sts	0x010C, r1
    2b98:	80 91 13 01 	lds	r24, 0x0113
    2b9c:	99 27       	eor	r25, r25
    2b9e:	d8 2f       	mov	r29, r24
    2ba0:	cc 27       	eor	r28, r28
    2ba2:	80 91 14 01 	lds	r24, 0x0114
    2ba6:	99 27       	eor	r25, r25
    2ba8:	c8 2b       	or	r28, r24
    2baa:	d9 2b       	or	r29, r25
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	80 91 12 01 	lds	r24, 0x0112
    2bb2:	84 31       	cpi	r24, 0x14	; 20
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <PM_InterpretAVRISPPacket+0x3fe>
    2bb6:	91 e0       	ldi	r25, 0x01	; 1
    2bb8:	89 2f       	mov	r24, r25
    2bba:	0e 94 c3 12 	call	0x2586 <PM_GetStoredDataSize>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	7c 01       	movw	r14, r24
    2bc4:	00 e0       	ldi	r16, 0x00	; 0
    2bc6:	10 e0       	ldi	r17, 0x00	; 0
    2bc8:	0c 17       	cp	r16, r28
    2bca:	1d 07       	cpc	r17, r29
    2bcc:	18 f5       	brcc	.+70     	; 0x2c14 <PM_InterpretAVRISPPacket+0x45a>
    2bce:	34 e1       	ldi	r19, 0x14	; 20
    2bd0:	c3 2e       	mov	r12, r19
    2bd2:	31 e0       	ldi	r19, 0x01	; 1
    2bd4:	d3 2e       	mov	r13, r19
    2bd6:	97 01       	movw	r18, r14
    2bd8:	44 27       	eor	r20, r20
    2bda:	55 27       	eor	r21, r21
    2bdc:	80 91 09 01 	lds	r24, 0x0109
    2be0:	90 91 0a 01 	lds	r25, 0x010A
    2be4:	a0 91 0b 01 	lds	r26, 0x010B
    2be8:	b0 91 0c 01 	lds	r27, 0x010C
    2bec:	82 17       	cp	r24, r18
    2bee:	93 07       	cpc	r25, r19
    2bf0:	a4 07       	cpc	r26, r20
    2bf2:	b5 07       	cpc	r27, r21
    2bf4:	20 f4       	brcc	.+8      	; 0x2bfe <PM_InterpretAVRISPPacket+0x444>
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	0e 94 8e 08 	call	0x111c <SPI_SPITransmit>
    2bfc:	01 c0       	rjmp	.+2      	; 0x2c00 <PM_InterpretAVRISPPacket+0x446>
    2bfe:	8f ef       	ldi	r24, 0xFF	; 255
    2c00:	f6 01       	movw	r30, r12
    2c02:	81 93       	st	Z+, r24
    2c04:	6f 01       	movw	r12, r30
    2c06:	0e 94 20 0e 	call	0x1c40 <V2P_IncrementCurrAddress>
    2c0a:	0f 5f       	subi	r16, 0xFF	; 255
    2c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0e:	0c 17       	cp	r16, r28
    2c10:	1d 07       	cpc	r17, r29
    2c12:	08 f3       	brcs	.-62     	; 0x2bd6 <PM_InterpretAVRISPPacket+0x41c>
    2c14:	23 96       	adiw	r28, 0x03	; 3
    2c16:	d0 93 0f 01 	sts	0x010F, r29
    2c1a:	c0 93 0e 01 	sts	0x010E, r28
    2c1e:	23 97       	sbiw	r28, 0x03	; 3
    2c20:	10 92 13 01 	sts	0x0113, r1
    2c24:	ce 5e       	subi	r28, 0xEE	; 238
    2c26:	de 4f       	sbci	r29, 0xFE	; 254
    2c28:	1a 82       	std	Y+2, r1	; 0x02
    2c2a:	09 c0       	rjmp	.+18     	; 0x2c3e <PM_InterpretAVRISPPacket+0x484>
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	90 93 0f 01 	sts	0x010F, r25
    2c34:	80 93 0e 01 	sts	0x010E, r24
    2c38:	89 ec       	ldi	r24, 0xC9	; 201
    2c3a:	80 93 13 01 	sts	0x0113, r24
    2c3e:	0e 94 48 0d 	call	0x1a90 <V2P_SendPacket>
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	ff 90       	pop	r15
    2c4c:	ef 90       	pop	r14
    2c4e:	df 90       	pop	r13
    2c50:	cf 90       	pop	r12
    2c52:	08 95       	ret

00002c54 <PM_SendFuseLockBytes>:
	  eeprom_write_byte(((MemoryType == TYPE_FUSE)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes), CurrBuffByte); // CurrBuffByte stores the total number of fuse/lock bytes written in this case
}

void PM_SendFuseLockBytes(uint8_t Type)
{
    2c54:	0f 93       	push	r16
    2c56:	1f 93       	push	r17
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	98 2f       	mov	r25, r24
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2c5e:	82 30       	cpi	r24, 0x02	; 2
    2c60:	19 f4       	brne	.+6      	; 0x2c68 <PM_SendFuseLockBytes+0x14>
    2c62:	af e2       	ldi	r26, 0x2F	; 47
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <PM_SendFuseLockBytes+0x18>
    2c68:	a0 e3       	ldi	r26, 0x30	; 48
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2c6c:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
    2c70:	80 2d       	mov	r24, r0
    2c72:	18 2f       	mov	r17, r24
	uint8_t* EEPROMAddress;
	uint8_t  TotalBytes;
	
	TotalBytes = eeprom_read_byte((Type == TYPE_FUSE)? &EEPROMVars.TotalFuseBytes : &EEPROMVars.TotalLockBytes);

	EEPROMAddress = (uint8_t*)((Type == TYPE_FUSE)? &EEPROMVars.FuseBytes : &EEPROMVars.LockBytes); // Set the EEPROM pointer to the fuse/lock bytes start (each fuse or lock byte takes four bytes in EEPROM)
    2c74:	92 30       	cpi	r25, 0x02	; 2
    2c76:	19 f4       	brne	.+6      	; 0x2c7e <PM_SendFuseLockBytes+0x2a>
    2c78:	c1 e3       	ldi	r28, 0x31	; 49
    2c7a:	d0 e0       	ldi	r29, 0x00	; 0
    2c7c:	02 c0       	rjmp	.+4      	; 0x2c82 <PM_SendFuseLockBytes+0x2e>
    2c7e:	c9 e5       	ldi	r28, 0x59	; 89
    2c80:	d0 e0       	ldi	r29, 0x00	; 0

	while (TotalBytes--)                              // Write each of the fuse/lock bytes stored in memory to the slave AVR
	{
		for (uint8_t CommandByte = 0; CommandByte < 4; CommandByte++)      // Write each individual command byte
		{
			USI_SPITransmit(eeprom_read_byte(EEPROMAddress));
			EEPROMAddress++;
		}
		
		// Add some delay before programming next byte, if there is one:
		if (TotalBytes)
		   MAIN_Delay10MS(5);
    2c82:	11 50       	subi	r17, 0x01	; 1
    2c84:	1f 3f       	cpi	r17, 0xFF	; 255
    2c86:	91 f0       	breq	.+36     	; 0x2cac <PM_SendFuseLockBytes+0x58>
    2c88:	03 e0       	ldi	r16, 0x03	; 3
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2c8a:	de 01       	movw	r26, r28
    2c8c:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
    2c90:	80 2d       	mov	r24, r0
    2c92:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    2c96:	21 96       	adiw	r28, 0x01	; 1
    2c98:	01 50       	subi	r16, 0x01	; 1
    2c9a:	07 ff       	sbrs	r16, 7
    2c9c:	f6 cf       	rjmp	.-20     	; 0x2c8a <PM_SendFuseLockBytes+0x36>
    2c9e:	11 23       	and	r17, r17
    2ca0:	19 f0       	breq	.+6      	; 0x2ca8 <PM_SendFuseLockBytes+0x54>
    2ca2:	85 e0       	ldi	r24, 0x05	; 5
    2ca4:	0e 94 1a 02 	call	0x434 <MAIN_Delay10MS>
    2ca8:	11 50       	subi	r17, 0x01	; 1
    2caa:	70 f7       	brcc	.-36     	; 0x2c88 <PM_SendFuseLockBytes+0x34>
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	1f 91       	pop	r17
    2cb2:	0f 91       	pop	r16
    2cb4:	08 95       	ret

00002cb6 <PM_SendEraseCommand>:
	}
}

void PM_SendEraseCommand(void)
{			
    2cb6:	1f 93       	push	r17
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	c2 e0       	ldi	r28, 0x02	; 2
    2cbe:	d0 e0       	ldi	r29, 0x00	; 0
    2cc0:	13 e0       	ldi	r17, 0x03	; 3
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2cc2:	de 01       	movw	r26, r28
    2cc4:	ab 5e       	subi	r26, 0xEB	; 235
    2cc6:	bf 4f       	sbci	r27, 0xFF	; 255
  uint8_t result;
  asm volatile
    2cc8:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
    2ccc:	80 2d       	mov	r24, r0
    2cce:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
	for (uint8_t B = 2; B < 6 ; B++)                  // Read out the erase chip command bytes
    2cd2:	11 50       	subi	r17, 0x01	; 1
    2cd4:	21 96       	adiw	r28, 0x01	; 1
    2cd6:	17 ff       	sbrs	r17, 7
    2cd8:	f4 cf       	rjmp	.-24     	; 0x2cc2 <PM_SendEraseCommand+0xc>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2cda:	a6 e1       	ldi	r26, 0x16	; 22
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2cde:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
    2ce2:	80 2d       	mov	r24, r0
    2ce4:	88 23       	and	r24, r24
    2ce6:	59 f0       	breq	.+22     	; 0x2cfe <PM_SendEraseCommand+0x48>
	  USI_SPITransmit(eeprom_read_byte(&EEPROMVars.EraseChip[B])); // Send the erase chip commands
			
	if (eeprom_read_byte(&EEPROMVars.EraseChip[1]))   // Value of 1 indicates a busy flag test
	{
		do
			USI_SPITransmitWord(0xF000);
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	90 ef       	ldi	r25, 0xF0	; 240
    2cec:	0e 94 06 09 	call	0x120c <USI_SPITransmitWord>
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	0e 94 06 09 	call	0x120c <USI_SPITransmitWord>
    2cf8:	80 fd       	sbrc	r24, 0
    2cfa:	f6 cf       	rjmp	.-20     	; 0x2ce8 <PM_SendEraseCommand+0x32>
    2cfc:	07 c0       	rjmp	.+14     	; 0x2d0c <PM_SendEraseCommand+0x56>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    2cfe:	a5 e1       	ldi	r26, 0x15	; 21
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    2d02:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
    2d06:	80 2d       	mov	r24, r0
    2d08:	0e 94 ed 02 	call	0x5da <MAIN_Delay1MS>
    2d0c:	df 91       	pop	r29
    2d0e:	cf 91       	pop	r28
    2d10:	1f 91       	pop	r17
    2d12:	08 95       	ret

00002d14 <PM_CreateProgrammingPackets>:
		while (USI_SPITransmitWord(0x0000) & 0x01);
	}
	else                                              // Cleared flag means use a predefined delay
	{		
		MAIN_Delay1MS(eeprom_read_byte((uint8_t*)&EEPROMVars.EraseChip)); // Wait the erase delay
	}
}

void PM_CreateProgrammingPackets(uint8_t Type)
{			
    2d14:	3f 92       	push	r3
    2d16:	4f 92       	push	r4
    2d18:	5f 92       	push	r5
    2d1a:	6f 92       	push	r6
    2d1c:	7f 92       	push	r7
    2d1e:	8f 92       	push	r8
    2d20:	9f 92       	push	r9
    2d22:	af 92       	push	r10
    2d24:	bf 92       	push	r11
    2d26:	cf 92       	push	r12
    2d28:	df 92       	push	r13
    2d2a:	ef 92       	push	r14
    2d2c:	ff 92       	push	r15
    2d2e:	0f 93       	push	r16
    2d30:	1f 93       	push	r17
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
    2d36:	c8 2f       	mov	r28, r24
	uint32_t BytesRead       = 0;
    2d38:	aa 24       	eor	r10, r10
    2d3a:	bb 24       	eor	r11, r11
    2d3c:	65 01       	movw	r12, r10
	uint32_t BytesToRead     = PM_GetStoredDataSize(Type);      // Get the byte size of the stored program
    2d3e:	0e 94 c3 12 	call	0x2586 <PM_GetStoredDataSize>
    2d42:	2b 01       	movw	r4, r22
    2d44:	3c 01       	movw	r6, r24
	uint16_t BytesPerProgram;
	uint16_t PageLength;
	uint8_t* EEPROMAddress;
	uint8_t  ContinuedPage   = FALSE;
    2d46:	33 24       	eor	r3, r3
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \c addr. */
uint16_t
eeprom_read_word (const uint16_t *addr)
{
    2d48:	c1 30       	cpi	r28, 0x01	; 1
    2d4a:	19 f4       	brne	.+6      	; 0x2d52 <PM_CreateProgrammingPackets+0x3e>
    2d4c:	a1 e8       	ldi	r26, 0x81	; 129
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	02 c0       	rjmp	.+4      	; 0x2d56 <PM_CreateProgrammingPackets+0x42>
    2d52:	a3 e8       	ldi	r26, 0x83	; 131
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
  uint16_t result;

  asm ( 
    2d56:	0e 94 67 19 	call	0x32ce <__eeprom_read_word_1F2021>
    2d5a:	4f 01       	movw	r8, r30

	PageLength  = eeprom_read_word((uint16_t*)(Type == TYPE_FLASH)? &EEPROMVars.PageLength : &EEPROMVars.EPageLength);
	CurrAddress = 0;
    2d5c:	10 92 09 01 	sts	0x0109, r1
    2d60:	10 92 0a 01 	sts	0x010A, r1
    2d64:	10 92 0b 01 	sts	0x010B, r1
    2d68:	10 92 0c 01 	sts	0x010C, r1

	if (Type == TYPE_FLASH)
    2d6c:	c1 30       	cpi	r28, 0x01	; 1
    2d6e:	49 f4       	brne	.+18     	; 0x2d82 <PM_CreateProgrammingPackets+0x6e>
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteProgram;       // Set the EEPROM pointer to the write flash command bytes location
    2d70:	c2 e0       	ldi	r28, 0x02	; 2
    2d72:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(0, 0);
    2d74:	60 e0       	ldi	r22, 0x00	; 0
    2d76:	70 e0       	ldi	r23, 0x00	; 0
    2d78:	cb 01       	movw	r24, r22
    2d7a:	0e 94 66 09 	call	0x12cc <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_FLASH_ISP;
    2d7e:	83 e1       	ldi	r24, 0x13	; 19
    2d80:	09 c0       	rjmp	.+18     	; 0x2d94 <PM_CreateProgrammingPackets+0x80>
	}
	else
	{
		EEPROMAddress = (uint8_t*)&EEPROMVars.WriteEEPROM;        // Set the EEPROM pointer to the write EEPROM command bytes location
    2d82:	cb e0       	ldi	r28, 0x0B	; 11
    2d84:	d0 e0       	ldi	r29, 0x00	; 0
		DF_ContinuousReadEnable(PM_EEPROM_OFFSET / DF_INTERNALDF_BUFFBYTES, PM_EEPROM_OFFSET % DF_INTERNALDF_BUFFBYTES); // Start read from the EEPROM offset location
    2d86:	60 ee       	ldi	r22, 0xE0	; 224
    2d88:	70 e0       	ldi	r23, 0x00	; 0
    2d8a:	84 ee       	ldi	r24, 0xE4	; 228
    2d8c:	93 e0       	ldi	r25, 0x03	; 3
    2d8e:	0e 94 66 09 	call	0x12cc <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_EEPROM_ISP;
    2d92:	85 e1       	ldi	r24, 0x15	; 21
    2d94:	80 93 12 01 	sts	0x0112, r24
    2d98:	e3 e1       	ldi	r30, 0x13	; 19
    2d9a:	f1 e0       	ldi	r31, 0x01	; 1
    2d9c:	98 e0       	ldi	r25, 0x08	; 8
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    2d9e:	de 01       	movw	r26, r28
    2da0:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
    2da4:	80 2d       	mov	r24, r0
    2da6:	81 93       	st	Z+, r24
	}

	for (uint8_t B = 1; B <= 9 ; B++)                 // Load in the write data command bytes
	{
		PacketBytes[B] = eeprom_read_byte(EEPROMAddress); // Synthesise a write packet header
		EEPROMAddress++;                               // Increment the EEPROM location counter
    2da8:	21 96       	adiw	r28, 0x01	; 1
    2daa:	91 50       	subi	r25, 0x01	; 1
    2dac:	97 ff       	sbrs	r25, 7
    2dae:	f7 cf       	rjmp	.-18     	; 0x2d9e <PM_CreateProgrammingPackets+0x8a>
	}
	
	BytesPerProgram = ((uint16_t)PacketBytes[1] << 8)
    2db0:	80 91 13 01 	lds	r24, 0x0113
    2db4:	99 27       	eor	r25, r25
    2db6:	d8 2f       	mov	r29, r24
    2db8:	cc 27       	eor	r28, r28
    2dba:	80 91 14 01 	lds	r24, 0x0114
    2dbe:	99 27       	eor	r25, r25
    2dc0:	c8 2b       	or	r28, r24
    2dc2:	d9 2b       	or	r29, r25
	                | PacketBytes[2];

	while (BytesRead < BytesToRead)
	{
		if (PacketBytes[3] & ISPCC_PROG_MODE_PAGE)
		{
			if (PageLength > 160) // Max 160 bytes at a time
			{
				if (!(ContinuedPage))                      // Start of a new page, program in the first 150 bytes
				{
					BytesPerProgram = 160;
					PacketBytes[3] &= ~ISPCC_PROG_MODE_PAGEDONE;		
					ContinuedPage = TRUE;
				}
				else                                       // Middle of a page, program in the remainder
				{
					BytesPerProgram = PageLength - 160;
					PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
					ContinuedPage = FALSE;
				}
				
				for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page				

				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);
				PacketBytes[2] = (uint8_t)(BytesPerProgram);

				BytesRead += BytesPerProgram;                         // Increment the counter
			}
			else
			{
				for (uint16_t LoadB = 0; LoadB < PageLength; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page
			
				PacketBytes[1]  = (uint8_t)(PageLength >> 8);
				PacketBytes[2]  = (uint8_t)(PageLength);
				PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;

				BytesRead += PageLength;                            // Increment the counter
			}
		}
		else
		{
			if ((BytesRead + BytesPerProgram) > BytesToRead)        // Less than a whole BytesPerProgram left of data to write
			{
				BytesPerProgram = BytesToRead - BytesRead;          // Next lot of bytes will be the remaining data length
				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);   // \. Save the new length
				PacketBytes[2] = (uint8_t)(BytesPerProgram);        // /  into the data packet
			}

			for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
				PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);    // Load in the page
			
			BytesRead += BytesPerProgram;                           // Increment the counter
		}
	
		if (!(BytesRead & 0xFFFF) && (BytesRead & 0x00FF0000))      // Extended address required
		{
			USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);            // Load extended address command
			USI_SPITransmit(0x00);
			USI_SPITransmit((BytesRead & 0x00FF0000) >> 16);        // The 3rd byte of the long holds the extended address
			USI_SPITransmit(0x00);
		}

		ISPCC_ProgramChip();                                        // Start the program cycle
    2dc4:	a4 14       	cp	r10, r4
    2dc6:	b5 04       	cpc	r11, r5
    2dc8:	c6 04       	cpc	r12, r6
    2dca:	d7 04       	cpc	r13, r7
    2dcc:	08 f0       	brcs	.+2      	; 0x2dd0 <PM_CreateProgrammingPackets+0xbc>
    2dce:	b2 c0       	rjmp	.+356    	; 0x2f34 <PM_CreateProgrammingPackets+0x220>
    2dd0:	20 91 15 01 	lds	r18, 0x0115
    2dd4:	82 2f       	mov	r24, r18
    2dd6:	99 27       	eor	r25, r25
    2dd8:	ac 01       	movw	r20, r24
    2dda:	41 70       	andi	r20, 0x01	; 1
    2ddc:	50 70       	andi	r21, 0x00	; 0
    2dde:	80 ff       	sbrs	r24, 0
    2de0:	53 c0       	rjmp	.+166    	; 0x2e88 <PM_CreateProgrammingPackets+0x174>
    2de2:	f1 ea       	ldi	r31, 0xA1	; 161
    2de4:	8f 16       	cp	r8, r31
    2de6:	91 04       	cpc	r9, r1
    2de8:	60 f1       	brcs	.+88     	; 0x2e42 <PM_CreateProgrammingPackets+0x12e>
    2dea:	33 20       	and	r3, r3
    2dec:	41 f4       	brne	.+16     	; 0x2dfe <PM_CreateProgrammingPackets+0xea>
    2dee:	c0 ea       	ldi	r28, 0xA0	; 160
    2df0:	d0 e0       	ldi	r29, 0x00	; 0
    2df2:	2f 77       	andi	r18, 0x7F	; 127
    2df4:	20 93 15 01 	sts	0x0115, r18
    2df8:	31 e0       	ldi	r19, 0x01	; 1
    2dfa:	33 2e       	mov	r3, r19
    2dfc:	07 c0       	rjmp	.+14     	; 0x2e0c <PM_CreateProgrammingPackets+0xf8>
    2dfe:	e4 01       	movw	r28, r8
    2e00:	c0 5a       	subi	r28, 0xA0	; 160
    2e02:	d0 40       	sbci	r29, 0x00	; 0
    2e04:	20 68       	ori	r18, 0x80	; 128
    2e06:	20 93 15 01 	sts	0x0115, r18
    2e0a:	33 24       	eor	r3, r3
    2e0c:	00 e0       	ldi	r16, 0x00	; 0
    2e0e:	10 e0       	ldi	r17, 0x00	; 0
    2e10:	0c 17       	cp	r16, r28
    2e12:	1d 07       	cpc	r17, r29
    2e14:	78 f4       	brcc	.+30     	; 0x2e34 <PM_CreateProgrammingPackets+0x120>
    2e16:	2c e1       	ldi	r18, 0x1C	; 28
    2e18:	e2 2e       	mov	r14, r18
    2e1a:	21 e0       	ldi	r18, 0x01	; 1
    2e1c:	f2 2e       	mov	r15, r18
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	0e 94 8e 08 	call	0x111c <SPI_SPITransmit>
    2e24:	f7 01       	movw	r30, r14
    2e26:	81 93       	st	Z+, r24
    2e28:	7f 01       	movw	r14, r30
    2e2a:	0f 5f       	subi	r16, 0xFF	; 255
    2e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2e:	0c 17       	cp	r16, r28
    2e30:	1d 07       	cpc	r17, r29
    2e32:	a8 f3       	brcs	.-22     	; 0x2e1e <PM_CreateProgrammingPackets+0x10a>
    2e34:	8d 2f       	mov	r24, r29
    2e36:	99 27       	eor	r25, r25
    2e38:	80 93 13 01 	sts	0x0113, r24
    2e3c:	c0 93 14 01 	sts	0x0114, r28
    2e40:	4b c0       	rjmp	.+150    	; 0x2ed8 <PM_CreateProgrammingPackets+0x1c4>
    2e42:	00 e0       	ldi	r16, 0x00	; 0
    2e44:	10 e0       	ldi	r17, 0x00	; 0
    2e46:	08 15       	cp	r16, r8
    2e48:	19 05       	cpc	r17, r9
    2e4a:	78 f4       	brcc	.+30     	; 0x2e6a <PM_CreateProgrammingPackets+0x156>
    2e4c:	8c e1       	ldi	r24, 0x1C	; 28
    2e4e:	e8 2e       	mov	r14, r24
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	f8 2e       	mov	r15, r24
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	0e 94 8e 08 	call	0x111c <SPI_SPITransmit>
    2e5a:	f7 01       	movw	r30, r14
    2e5c:	81 93       	st	Z+, r24
    2e5e:	7f 01       	movw	r14, r30
    2e60:	0f 5f       	subi	r16, 0xFF	; 255
    2e62:	1f 4f       	sbci	r17, 0xFF	; 255
    2e64:	08 15       	cp	r16, r8
    2e66:	19 05       	cpc	r17, r9
    2e68:	a8 f3       	brcs	.-22     	; 0x2e54 <PM_CreateProgrammingPackets+0x140>
    2e6a:	89 2d       	mov	r24, r9
    2e6c:	99 27       	eor	r25, r25
    2e6e:	80 93 13 01 	sts	0x0113, r24
    2e72:	80 92 14 01 	sts	0x0114, r8
    2e76:	80 91 15 01 	lds	r24, 0x0115
    2e7a:	80 68       	ori	r24, 0x80	; 128
    2e7c:	80 93 15 01 	sts	0x0115, r24
    2e80:	c4 01       	movw	r24, r8
    2e82:	aa 27       	eor	r26, r26
    2e84:	bb 27       	eor	r27, r27
    2e86:	2b c0       	rjmp	.+86     	; 0x2ede <PM_CreateProgrammingPackets+0x1ca>
    2e88:	ce 01       	movw	r24, r28
    2e8a:	aa 27       	eor	r26, r26
    2e8c:	bb 27       	eor	r27, r27
    2e8e:	8a 0d       	add	r24, r10
    2e90:	9b 1d       	adc	r25, r11
    2e92:	ac 1d       	adc	r26, r12
    2e94:	bd 1d       	adc	r27, r13
    2e96:	48 16       	cp	r4, r24
    2e98:	59 06       	cpc	r5, r25
    2e9a:	6a 06       	cpc	r6, r26
    2e9c:	7b 06       	cpc	r7, r27
    2e9e:	48 f4       	brcc	.+18     	; 0x2eb2 <PM_CreateProgrammingPackets+0x19e>
    2ea0:	e2 01       	movw	r28, r4
    2ea2:	ca 19       	sub	r28, r10
    2ea4:	db 09       	sbc	r29, r11
    2ea6:	8d 2f       	mov	r24, r29
    2ea8:	99 27       	eor	r25, r25
    2eaa:	80 93 13 01 	sts	0x0113, r24
    2eae:	c0 93 14 01 	sts	0x0114, r28
    2eb2:	8a 01       	movw	r16, r20
    2eb4:	4c 17       	cp	r20, r28
    2eb6:	5d 07       	cpc	r21, r29
    2eb8:	78 f4       	brcc	.+30     	; 0x2ed8 <PM_CreateProgrammingPackets+0x1c4>
    2eba:	ac e1       	ldi	r26, 0x1C	; 28
    2ebc:	ea 2e       	mov	r14, r26
    2ebe:	a1 e0       	ldi	r26, 0x01	; 1
    2ec0:	fa 2e       	mov	r15, r26
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	0e 94 8e 08 	call	0x111c <SPI_SPITransmit>
    2ec8:	f7 01       	movw	r30, r14
    2eca:	81 93       	st	Z+, r24
    2ecc:	7f 01       	movw	r14, r30
    2ece:	0f 5f       	subi	r16, 0xFF	; 255
    2ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed2:	0c 17       	cp	r16, r28
    2ed4:	1d 07       	cpc	r17, r29
    2ed6:	a8 f3       	brcs	.-22     	; 0x2ec2 <PM_CreateProgrammingPackets+0x1ae>
    2ed8:	ce 01       	movw	r24, r28
    2eda:	aa 27       	eor	r26, r26
    2edc:	bb 27       	eor	r27, r27
    2ede:	a8 0e       	add	r10, r24
    2ee0:	b9 1e       	adc	r11, r25
    2ee2:	ca 1e       	adc	r12, r26
    2ee4:	db 1e       	adc	r13, r27
    2ee6:	a1 14       	cp	r10, r1
    2ee8:	b1 04       	cpc	r11, r1
    2eea:	e1 f4       	brne	.+56     	; 0x2f24 <PM_CreateProgrammingPackets+0x210>
    2eec:	e1 2c       	mov	r14, r1
    2eee:	f1 2c       	mov	r15, r1
    2ef0:	ff ef       	ldi	r31, 0xFF	; 255
    2ef2:	0f 2f       	mov	r16, r31
    2ef4:	11 2d       	mov	r17, r1
    2ef6:	ea 20       	and	r14, r10
    2ef8:	fb 20       	and	r15, r11
    2efa:	0c 21       	and	r16, r12
    2efc:	1d 21       	and	r17, r13
    2efe:	e1 14       	cp	r14, r1
    2f00:	f1 04       	cpc	r15, r1
    2f02:	01 05       	cpc	r16, r1
    2f04:	11 05       	cpc	r17, r1
    2f06:	71 f0       	breq	.+28     	; 0x2f24 <PM_CreateProgrammingPackets+0x210>
    2f08:	8d e4       	ldi	r24, 0x4D	; 77
    2f0a:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    2f14:	c8 01       	movw	r24, r16
    2f16:	aa 27       	eor	r26, r26
    2f18:	bb 27       	eor	r27, r27
    2f1a:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	0e 94 f3 08 	call	0x11e6 <USI_SPITransmit>
    2f24:	0e 94 6b 10 	call	0x20d6 <ISPCC_ProgramChip>
    2f28:	a4 14       	cp	r10, r4
    2f2a:	b5 04       	cpc	r11, r5
    2f2c:	c6 04       	cpc	r12, r6
    2f2e:	d7 04       	cpc	r13, r7
    2f30:	08 f4       	brcc	.+2      	; 0x2f34 <PM_CreateProgrammingPackets+0x220>
    2f32:	4e cf       	rjmp	.-356    	; 0x2dd0 <PM_CreateProgrammingPackets+0xbc>
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	1f 91       	pop	r17
    2f3a:	0f 91       	pop	r16
    2f3c:	ff 90       	pop	r15
    2f3e:	ef 90       	pop	r14
    2f40:	df 90       	pop	r13
    2f42:	cf 90       	pop	r12
    2f44:	bf 90       	pop	r11
    2f46:	af 90       	pop	r10
    2f48:	9f 90       	pop	r9
    2f4a:	8f 90       	pop	r8
    2f4c:	7f 90       	pop	r7
    2f4e:	6f 90       	pop	r6
    2f50:	5f 90       	pop	r5
    2f52:	4f 90       	pop	r4
    2f54:	3f 90       	pop	r3
    2f56:	08 95       	ret

00002f58 <PM_ShowStoredItemSizes>:
	}
}

void PM_ShowStoredItemSizes(void)
{
    2f58:	1f 93       	push	r17
    2f5a:	cf 93       	push	r28
    2f5c:	df 93       	push	r29
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	2e 97       	sbiw	r28, 0x0e	; 14
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	f8 94       	cli
    2f68:	de bf       	out	0x3e, r29	; 62
    2f6a:	0f be       	out	0x3f, r0	; 63
    2f6c:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[14];
	uint8_t ItemInfoIndex = 0;
    2f6e:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t TempB;
	
	JoyStatus = 1;
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)                           // Joystick is in the non-center position
    2f74:	8e b3       	in	r24, 0x1e	; 30
    2f76:	88 23       	and	r24, r24
    2f78:	e9 f3       	breq	.-6      	; 0x2f74 <PM_ShowStoredItemSizes+0x1c>
		{
			if (JoyStatus & JOY_UP)              // Previous item
    2f7a:	f6 9b       	sbis	0x1e, 6	; 30
    2f7c:	06 c0       	rjmp	.+12     	; 0x2f8a <PM_ShowStoredItemSizes+0x32>
				(ItemInfoIndex == 0)? ItemInfoIndex = 3 : ItemInfoIndex--;
    2f7e:	11 23       	and	r17, r17
    2f80:	11 f4       	brne	.+4      	; 0x2f86 <PM_ShowStoredItemSizes+0x2e>
    2f82:	13 e0       	ldi	r17, 0x03	; 3
    2f84:	0c c0       	rjmp	.+24     	; 0x2f9e <PM_ShowStoredItemSizes+0x46>
    2f86:	11 50       	subi	r17, 0x01	; 1
    2f88:	0a c0       	rjmp	.+20     	; 0x2f9e <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_DOWN)      // Next item
    2f8a:	f7 9b       	sbis	0x1e, 7	; 30
    2f8c:	06 c0       	rjmp	.+12     	; 0x2f9a <PM_ShowStoredItemSizes+0x42>
				(ItemInfoIndex == 3)? ItemInfoIndex = 0 : ItemInfoIndex++;
    2f8e:	13 30       	cpi	r17, 0x03	; 3
    2f90:	11 f4       	brne	.+4      	; 0x2f96 <PM_ShowStoredItemSizes+0x3e>
    2f92:	10 e0       	ldi	r17, 0x00	; 0
    2f94:	04 c0       	rjmp	.+8      	; 0x2f9e <PM_ShowStoredItemSizes+0x46>
    2f96:	1f 5f       	subi	r17, 0xFF	; 255
    2f98:	02 c0       	rjmp	.+4      	; 0x2f9e <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_LEFT)
    2f9a:	f2 99       	sbic	0x1e, 2	; 30
    2f9c:	54 c0       	rjmp	.+168    	; 0x3046 <PM_ShowStoredItemSizes+0xee>
				return;
		
			switch (ItemInfoIndex)
    2f9e:	81 2f       	mov	r24, r17
    2fa0:	99 27       	eor	r25, r25
    2fa2:	81 30       	cpi	r24, 0x01	; 1
    2fa4:	91 05       	cpc	r25, r1
    2fa6:	a1 f0       	breq	.+40     	; 0x2fd0 <PM_ShowStoredItemSizes+0x78>
    2fa8:	82 30       	cpi	r24, 0x02	; 2
    2faa:	91 05       	cpc	r25, r1
    2fac:	1c f4       	brge	.+6      	; 0x2fb4 <PM_ShowStoredItemSizes+0x5c>
    2fae:	89 2b       	or	r24, r25
    2fb0:	39 f0       	breq	.+14     	; 0x2fc0 <PM_ShowStoredItemSizes+0x68>
    2fb2:	42 c0       	rjmp	.+132    	; 0x3038 <PM_ShowStoredItemSizes+0xe0>
    2fb4:	82 30       	cpi	r24, 0x02	; 2
    2fb6:	91 05       	cpc	r25, r1
    2fb8:	01 f1       	breq	.+64     	; 0x2ffa <PM_ShowStoredItemSizes+0xa2>
    2fba:	03 97       	sbiw	r24, 0x03	; 3
    2fbc:	39 f1       	breq	.+78     	; 0x300c <PM_ShowStoredItemSizes+0xb4>
    2fbe:	3c c0       	rjmp	.+120    	; 0x3038 <PM_ShowStoredItemSizes+0xe0>
			{
				case 0:
					strcpy_P(Buffer, PSTR("DATA-"));
    2fc0:	69 ed       	ldi	r22, 0xD9	; 217
    2fc2:	73 e0       	ldi	r23, 0x03	; 3
    2fc4:	ce 01       	movw	r24, r28
    2fc6:	01 96       	adiw	r24, 0x01	; 1
    2fc8:	0e 94 ff 18 	call	0x31fe <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_FLASH), &Buffer[5], 10);
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	07 c0       	rjmp	.+14     	; 0x2fde <PM_ShowStoredItemSizes+0x86>
					break;
				case 1:
					strcpy_P(Buffer, PSTR("EPRM-"));
    2fd0:	6f ed       	ldi	r22, 0xDF	; 223
    2fd2:	73 e0       	ldi	r23, 0x03	; 3
    2fd4:	ce 01       	movw	r24, r28
    2fd6:	01 96       	adiw	r24, 0x01	; 1
    2fd8:	0e 94 ff 18 	call	0x31fe <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_EEPROM), &Buffer[5], 10);
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	0e 94 c3 12 	call	0x2586 <PM_GetStoredDataSize>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	2a e0       	ldi	r18, 0x0A	; 10
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	ae 01       	movw	r20, r28
    2fec:	4a 5f       	subi	r20, 0xFA	; 250
    2fee:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff0:	bc 01       	movw	r22, r24
    2ff2:	cd 01       	movw	r24, r26
    2ff4:	0e 94 06 19 	call	0x320c <ultoa>
					break;
    2ff8:	1f c0       	rjmp	.+62     	; 0x3038 <PM_ShowStoredItemSizes+0xe0>
				case 2:
					strcpy_P(Buffer, PSTR("FUSE-"));
    2ffa:	65 ee       	ldi	r22, 0xE5	; 229
    2ffc:	73 e0       	ldi	r23, 0x03	; 3
    2ffe:	ce 01       	movw	r24, r28
    3000:	01 96       	adiw	r24, 0x01	; 1
    3002:	0e 94 ff 18 	call	0x31fe <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    3006:	af e2       	ldi	r26, 0x2F	; 47
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	08 c0       	rjmp	.+16     	; 0x301c <PM_ShowStoredItemSizes+0xc4>
					TempB = eeprom_read_byte(&EEPROMVars.TotalFuseBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);
					break;
				case 3:
					strcpy_P(Buffer, PSTR("LOCK-"));
    300c:	6b ee       	ldi	r22, 0xEB	; 235
    300e:	73 e0       	ldi	r23, 0x03	; 3
    3010:	ce 01       	movw	r24, r28
    3012:	01 96       	adiw	r24, 0x01	; 1
    3014:	0e 94 ff 18 	call	0x31fe <strcpy_P>
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
    3018:	a0 e3       	ldi	r26, 0x30	; 48
    301a:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
    301c:	0e 94 5a 19 	call	0x32b4 <__eeprom_read_byte_1F2021>
    3020:	80 2d       	mov	r24, r0
					TempB = eeprom_read_byte(&EEPROMVars.TotalLockBytes);
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);		
    3022:	8f 3f       	cpi	r24, 0xFF	; 255
    3024:	11 f0       	breq	.+4      	; 0x302a <PM_ShowStoredItemSizes+0xd2>
    3026:	99 27       	eor	r25, r25
    3028:	02 c0       	rjmp	.+4      	; 0x302e <PM_ShowStoredItemSizes+0xd6>
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	be 01       	movw	r22, r28
    3030:	6a 5f       	subi	r22, 0xFA	; 250
    3032:	7f 4f       	sbci	r23, 0xFF	; 255
    3034:	0e 94 1b 03 	call	0x636 <MAIN_IntToStr>
			}
	
			LCD_puts(Buffer);
    3038:	ce 01       	movw	r24, r28
    303a:	01 96       	adiw	r24, 0x01	; 1
    303c:	0e 94 2f 07 	call	0xe5e <LCD_puts>

			MAIN_WaitForJoyRelease();
    3040:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
    3044:	97 cf       	rjmp	.-210    	; 0x2f74 <PM_ShowStoredItemSizes+0x1c>
    3046:	2e 96       	adiw	r28, 0x0e	; 14
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	f8 94       	cli
    304c:	de bf       	out	0x3e, r29	; 62
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	cd bf       	out	0x3d, r28	; 61
    3052:	df 91       	pop	r29
    3054:	cf 91       	pop	r28
    3056:	1f 91       	pop	r17
    3058:	08 95       	ret

0000305a <TM_FindNextTag>:
	DF_EnableDataflash(FALSE);
}

void TM_FindNextTag(void)
{
    305a:	af 92       	push	r10
    305c:	bf 92       	push	r11
    305e:	df 92       	push	r13
    3060:	ef 92       	push	r14
    3062:	ff 92       	push	r15
    3064:	0f 93       	push	r16
    3066:	1f 93       	push	r17
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	69 97       	sbiw	r28, 0x19	; 25
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	f8 94       	cli
    3076:	de bf       	out	0x3e, r29	; 62
    3078:	0f be       	out	0x3f, r0	; 63
    307a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Buffer[21];
	uint8_t  HeadBuff[4]      = BT_TAGHEADER;
    307c:	80 e4       	ldi	r24, 0x40	; 64
    307e:	8e 8b       	std	Y+22, r24	; 0x16
    3080:	86 e1       	ldi	r24, 0x16	; 22
    3082:	a8 2e       	mov	r10, r24
    3084:	b1 2c       	mov	r11, r1
    3086:	ac 0e       	add	r10, r28
    3088:	bd 1e       	adc	r11, r29
    308a:	88 e2       	ldi	r24, 0x28	; 40
    308c:	8f 8b       	std	Y+23, r24	; 0x17
    308e:	83 e2       	ldi	r24, 0x23	; 35
    3090:	88 8f       	std	Y+24, r24	; 0x18
    3092:	89 e2       	ldi	r24, 0x29	; 41
    3094:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t ProgDataSize     = PM_GetStoredDataSize(TYPE_FLASH);
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	0e 94 c3 12 	call	0x2586 <PM_GetStoredDataSize>
    309c:	7b 01       	movw	r14, r22
    309e:	8c 01       	movw	r16, r24
	uint8_t  TotalOkHeadBytes = 0;
    30a0:	dd 24       	eor	r13, r13
	uint8_t  TagByte;
	uint8_t  BytesRead;
	
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);    // Orange = busy
    30a2:	81 b3       	in	r24, 0x11	; 17
    30a4:	80 63       	ori	r24, 0x30	; 48
    30a6:	81 bb       	out	0x11, r24	; 17

	while (DFPos < ProgDataSize)
	{
		BytesRead = 1;
		
		if (SPI_SPITransmit(0x00) == HeadBuff[TotalOkHeadBytes++])
		{
			if (TotalOkHeadBytes == 4)
			{
				uint8_t HB;
			
				for (HB = 0; HB < 20; HB++)
				{
					TagByte = SPI_SPITransmit(0x00);
					Buffer[HB] = TagByte;
					
					if (TagByte == 0x00)
					  break;
				}
				
				Buffer[20] = '\0';             // Make sure string is null-terminated

				TagExists = TRUE;
				BytesRead = (HB + 2);

				LCD_puts(Buffer);
				MAIN_SETSTATUSLED(MAIN_STATLED_GREEN); // Green = ready
				return;
			}
		}
		else
		{
			TotalOkHeadBytes = 0;
		}

		DFPos += BytesRead;
    30a8:	80 91 b0 02 	lds	r24, 0x02B0
    30ac:	90 91 b1 02 	lds	r25, 0x02B1
    30b0:	a0 91 b2 02 	lds	r26, 0x02B2
    30b4:	b0 91 b3 02 	lds	r27, 0x02B3
    30b8:	8e 15       	cp	r24, r14
    30ba:	9f 05       	cpc	r25, r15
    30bc:	a0 07       	cpc	r26, r16
    30be:	b1 07       	cpc	r27, r17
    30c0:	08 f0       	brcs	.+2      	; 0x30c4 <TM_FindNextTag+0x6a>
    30c2:	43 c0       	rjmp	.+134    	; 0x314a <TM_FindNextTag+0xf0>
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	0e 94 8e 08 	call	0x111c <SPI_SPITransmit>
    30ca:	f5 01       	movw	r30, r10
    30cc:	ed 0d       	add	r30, r13
    30ce:	f1 1d       	adc	r31, r1
    30d0:	d3 94       	inc	r13
    30d2:	90 81       	ld	r25, Z
    30d4:	89 17       	cp	r24, r25
    30d6:	21 f5       	brne	.+72     	; 0x3120 <TM_FindNextTag+0xc6>
    30d8:	84 e0       	ldi	r24, 0x04	; 4
    30da:	d8 16       	cp	r13, r24
    30dc:	11 f5       	brne	.+68     	; 0x3122 <TM_FindNextTag+0xc8>
    30de:	ff 24       	eor	r15, r15
    30e0:	00 e0       	ldi	r16, 0x00	; 0
    30e2:	10 e0       	ldi	r17, 0x00	; 0
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	0e 94 8e 08 	call	0x111c <SPI_SPITransmit>
    30ea:	9e 01       	movw	r18, r28
    30ec:	2f 5f       	subi	r18, 0xFF	; 255
    30ee:	3f 4f       	sbci	r19, 0xFF	; 255
    30f0:	f8 01       	movw	r30, r16
    30f2:	e2 0f       	add	r30, r18
    30f4:	f3 1f       	adc	r31, r19
    30f6:	80 83       	st	Z, r24
    30f8:	88 23       	and	r24, r24
    30fa:	31 f0       	breq	.+12     	; 0x3108 <TM_FindNextTag+0xae>
    30fc:	f3 94       	inc	r15
    30fe:	0f 5f       	subi	r16, 0xFF	; 255
    3100:	1f 4f       	sbci	r17, 0xFF	; 255
    3102:	83 e1       	ldi	r24, 0x13	; 19
    3104:	8f 15       	cp	r24, r15
    3106:	70 f7       	brcc	.-36     	; 0x30e4 <TM_FindNextTag+0x8a>
    3108:	1d 8a       	std	Y+21, r1	; 0x15
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	80 93 29 02 	sts	0x0229, r24
    3110:	c9 01       	movw	r24, r18
    3112:	0e 94 2f 07 	call	0xe5e <LCD_puts>
    3116:	81 b3       	in	r24, 0x11	; 17
    3118:	8f 7c       	andi	r24, 0xCF	; 207
    311a:	80 61       	ori	r24, 0x10	; 16
    311c:	81 bb       	out	0x11, r24	; 17
    311e:	31 c0       	rjmp	.+98     	; 0x3182 <TM_FindNextTag+0x128>
    3120:	dd 24       	eor	r13, r13
    3122:	80 91 b0 02 	lds	r24, 0x02B0
    3126:	90 91 b1 02 	lds	r25, 0x02B1
    312a:	a0 91 b2 02 	lds	r26, 0x02B2
    312e:	b0 91 b3 02 	lds	r27, 0x02B3
    3132:	01 96       	adiw	r24, 0x01	; 1
    3134:	a1 1d       	adc	r26, r1
    3136:	b1 1d       	adc	r27, r1
    3138:	80 93 b0 02 	sts	0x02B0, r24
    313c:	90 93 b1 02 	sts	0x02B1, r25
    3140:	a0 93 b2 02 	sts	0x02B2, r26
    3144:	b0 93 b3 02 	sts	0x02B3, r27
    3148:	b7 cf       	rjmp	.-146    	; 0x30b8 <TM_FindNextTag+0x5e>
	}
	
	DF_ContinuousReadEnable(0, 0);
    314a:	60 e0       	ldi	r22, 0x00	; 0
    314c:	70 e0       	ldi	r23, 0x00	; 0
    314e:	cb 01       	movw	r24, r22
    3150:	0e 94 66 09 	call	0x12cc <DF_ContinuousReadEnable>
	DFPos = 0;
    3154:	10 92 b0 02 	sts	0x02B0, r1
    3158:	10 92 b1 02 	sts	0x02B1, r1
    315c:	10 92 b2 02 	sts	0x02B2, r1
    3160:	10 92 b3 02 	sts	0x02B3, r1
	
	if (TagExists == FALSE)
    3164:	80 91 29 02 	lds	r24, 0x0229
    3168:	88 23       	and	r24, r24
    316a:	49 f4       	brne	.+18     	; 0x317e <TM_FindNextTag+0x124>
	{
		MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);  // Green = ready
    316c:	81 b3       	in	r24, 0x11	; 17
    316e:	8f 7c       	andi	r24, 0xCF	; 207
    3170:	80 61       	ori	r24, 0x10	; 16
    3172:	81 bb       	out	0x11, r24	; 17
		MAIN_ShowError(PSTR("NO TAGS"));
    3174:	81 ef       	ldi	r24, 0xF1	; 241
    3176:	93 e0       	ldi	r25, 0x03	; 3
    3178:	0e 94 55 03 	call	0x6aa <MAIN_ShowError>
    317c:	02 c0       	rjmp	.+4      	; 0x3182 <TM_FindNextTag+0x128>
	}
	else
	{
		/* The following line _is_ recursion, but the function will only ever call itself
		   a maximum of one time. The function will call itself upon skipping from the last
		   tag stored in the program data to the first; to guard against infinite recursion
		   if no tags are present, the system will error out if the TagExists flag is empty
		   after a full data read. Once a tag has been read and displayed onto the LCD, the
           function returns to the main tag handling routine.                               */
		TM_FindNextTag();
    317e:	0e 94 2d 18 	call	0x305a <TM_FindNextTag>
    3182:	69 96       	adiw	r28, 0x19	; 25
    3184:	0f b6       	in	r0, 0x3f	; 63
    3186:	f8 94       	cli
    3188:	de bf       	out	0x3e, r29	; 62
    318a:	0f be       	out	0x3f, r0	; 63
    318c:	cd bf       	out	0x3d, r28	; 61
    318e:	df 91       	pop	r29
    3190:	cf 91       	pop	r28
    3192:	1f 91       	pop	r17
    3194:	0f 91       	pop	r16
    3196:	ff 90       	pop	r15
    3198:	ef 90       	pop	r14
    319a:	df 90       	pop	r13
    319c:	bf 90       	pop	r11
    319e:	af 90       	pop	r10
    31a0:	08 95       	ret

000031a2 <TM_ShowTags>:
    31a2:	60 e0       	ldi	r22, 0x00	; 0
    31a4:	70 e0       	ldi	r23, 0x00	; 0
    31a6:	cb 01       	movw	r24, r22
    31a8:	0e 94 66 09 	call	0x12cc <DF_ContinuousReadEnable>
    31ac:	10 92 29 02 	sts	0x0229, r1
    31b0:	10 92 b0 02 	sts	0x02B0, r1
    31b4:	10 92 b1 02 	sts	0x02B1, r1
    31b8:	10 92 b2 02 	sts	0x02B2, r1
    31bc:	10 92 b3 02 	sts	0x02B3, r1
    31c0:	0e 94 2d 18 	call	0x305a <TM_FindNextTag>
    31c4:	80 91 29 02 	lds	r24, 0x0229
    31c8:	88 23       	and	r24, r24
    31ca:	71 f0       	breq	.+28     	; 0x31e8 <TM_ShowTags+0x46>
    31cc:	8e b3       	in	r24, 0x1e	; 30
    31ce:	88 23       	and	r24, r24
    31d0:	e9 f3       	breq	.-6      	; 0x31cc <TM_ShowTags+0x2a>
    31d2:	f7 9b       	sbis	0x1e, 7	; 30
    31d4:	03 c0       	rjmp	.+6      	; 0x31dc <TM_ShowTags+0x3a>
    31d6:	0e 94 2d 18 	call	0x305a <TM_FindNextTag>
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <TM_ShowTags+0x3e>
    31dc:	f2 99       	sbic	0x1e, 2	; 30
    31de:	03 c0       	rjmp	.+6      	; 0x31e6 <TM_ShowTags+0x44>
    31e0:	0e 94 2c 02 	call	0x458 <MAIN_WaitForJoyRelease>
    31e4:	f3 cf       	rjmp	.-26     	; 0x31cc <TM_ShowTags+0x2a>
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	0e 94 28 09 	call	0x1250 <DF_EnableDataflash>
    31ec:	08 95       	ret

000031ee <__vector_2>:
.global PCINT0_vect             ; Pin change 0 (joystick)
.global PCINT1_vect             ; Pin change 1 (joystick)

PCINT0_vect:
  jmp PCINT1_vect
    31ee:	0c 94 7b 03 	jmp	0x6f6 <__vector_3>

000031f2 <__vector_10>:

.global TIMER0_COMP_vect             ; Timer 0 compare

TIMER0_COMP_vect:
  push r24
    31f2:	8f 93       	push	r24
  ldi r24, (USI_CONTROL_REG_FLAGS | (1<<USITC))
    31f4:	8b e5       	ldi	r24, 0x5B	; 91
  sts _SFR_MEM_ADDR(USICR), r24
    31f6:	80 93 b8 00 	sts	0x00B8, r24
  pop r24
    31fa:	8f 91       	pop	r24
  reti
    31fc:	18 95       	reti

000031fe <strcpy_P>:
    31fe:	fb 01       	movw	r30, r22
    3200:	dc 01       	movw	r26, r24
    3202:	05 90       	lpm	r0, Z+
    3204:	0d 92       	st	X+, r0
    3206:	00 20       	and	r0, r0
    3208:	e1 f7       	brne	.-8      	; 0x3202 <strcpy_P+0x4>
    320a:	08 95       	ret

0000320c <ultoa>:
    320c:	fa 01       	movw	r30, r20
    320e:	cf 93       	push	r28
    3210:	ff 93       	push	r31
    3212:	ef 93       	push	r30
    3214:	22 30       	cpi	r18, 0x02	; 2
    3216:	cc f0       	brlt	.+50     	; 0x324a <ultoa+0x3e>
    3218:	25 32       	cpi	r18, 0x25	; 37
    321a:	bc f4       	brge	.+46     	; 0x324a <ultoa+0x3e>
    321c:	c2 2f       	mov	r28, r18
    321e:	2c 2f       	mov	r18, r28
    3220:	33 27       	eor	r19, r19
    3222:	44 27       	eor	r20, r20
    3224:	55 27       	eor	r21, r21
    3226:	ff 93       	push	r31
    3228:	ef 93       	push	r30
    322a:	0e 94 82 19 	call	0x3304 <__udivmodsi4>
    322e:	ef 91       	pop	r30
    3230:	ff 91       	pop	r31
    3232:	60 5d       	subi	r22, 0xD0	; 208
    3234:	6a 33       	cpi	r22, 0x3A	; 58
    3236:	0c f0       	brlt	.+2      	; 0x323a <ultoa+0x2e>
    3238:	69 5d       	subi	r22, 0xD9	; 217
    323a:	61 93       	st	Z+, r22
    323c:	b9 01       	movw	r22, r18
    323e:	ca 01       	movw	r24, r20
    3240:	60 50       	subi	r22, 0x00	; 0
    3242:	70 40       	sbci	r23, 0x00	; 0
    3244:	80 40       	sbci	r24, 0x00	; 0
    3246:	90 40       	sbci	r25, 0x00	; 0
    3248:	51 f7       	brne	.-44     	; 0x321e <ultoa+0x12>
    324a:	10 82       	st	Z, r1
    324c:	8f 91       	pop	r24
    324e:	9f 91       	pop	r25
    3250:	cf 91       	pop	r28
    3252:	0c 94 2b 19 	jmp	0x3256 <strrev>

00003256 <strrev>:
    3256:	dc 01       	movw	r26, r24
    3258:	fc 01       	movw	r30, r24
    325a:	01 90       	ld	r0, Z+
    325c:	00 20       	and	r0, r0
    325e:	e9 f7       	brne	.-6      	; 0x325a <strrev+0x4>
    3260:	32 97       	sbiw	r30, 0x02	; 2
    3262:	ae 17       	cp	r26, r30
    3264:	bf 07       	cpc	r27, r31
    3266:	30 f4       	brcc	.+12     	; 0x3274 <strrev+0x1e>
    3268:	7c 91       	ld	r23, X
    326a:	60 81       	ld	r22, Z
    326c:	70 83       	st	Z, r23
    326e:	31 97       	sbiw	r30, 0x01	; 1
    3270:	6d 93       	st	X+, r22
    3272:	f7 cf       	rjmp	.-18     	; 0x3262 <strrev+0xc>
    3274:	08 95       	ret

00003276 <__mulsi3>:
    3276:	62 9f       	mul	r22, r18
    3278:	d0 01       	movw	r26, r0
    327a:	73 9f       	mul	r23, r19
    327c:	f0 01       	movw	r30, r0
    327e:	82 9f       	mul	r24, r18
    3280:	e0 0d       	add	r30, r0
    3282:	f1 1d       	adc	r31, r1
    3284:	64 9f       	mul	r22, r20
    3286:	e0 0d       	add	r30, r0
    3288:	f1 1d       	adc	r31, r1
    328a:	92 9f       	mul	r25, r18
    328c:	f0 0d       	add	r31, r0
    328e:	83 9f       	mul	r24, r19
    3290:	f0 0d       	add	r31, r0
    3292:	74 9f       	mul	r23, r20
    3294:	f0 0d       	add	r31, r0
    3296:	65 9f       	mul	r22, r21
    3298:	f0 0d       	add	r31, r0
    329a:	99 27       	eor	r25, r25
    329c:	72 9f       	mul	r23, r18
    329e:	b0 0d       	add	r27, r0
    32a0:	e1 1d       	adc	r30, r1
    32a2:	f9 1f       	adc	r31, r25
    32a4:	63 9f       	mul	r22, r19
    32a6:	b0 0d       	add	r27, r0
    32a8:	e1 1d       	adc	r30, r1
    32aa:	f9 1f       	adc	r31, r25
    32ac:	bd 01       	movw	r22, r26
    32ae:	cf 01       	movw	r24, r30
    32b0:	11 24       	eor	r1, r1
    32b2:	08 95       	ret

000032b4 <__eeprom_read_byte_1F2021>:
    32b4:	f9 99       	sbic	0x1f, 1	; 31
    32b6:	fe cf       	rjmp	.-4      	; 0x32b4 <__eeprom_read_byte_1F2021>
    32b8:	b2 bd       	out	0x22, r27	; 34
    32ba:	a1 bd       	out	0x21, r26	; 33
    32bc:	f8 9a       	sbi	0x1f, 0	; 31
    32be:	11 96       	adiw	r26, 0x01	; 1
    32c0:	00 b4       	in	r0, 0x20	; 32
    32c2:	08 95       	ret

000032c4 <__eeprom_read_block_1F2021>:
    32c4:	f7 df       	rcall	.-18     	; 0x32b4 <__eeprom_read_byte_1F2021>
    32c6:	01 92       	st	Z+, r0
    32c8:	1a 94       	dec	r1
    32ca:	e1 f7       	brne	.-8      	; 0x32c4 <__eeprom_read_block_1F2021>
    32cc:	08 95       	ret

000032ce <__eeprom_read_word_1F2021>:
    32ce:	f2 df       	rcall	.-28     	; 0x32b4 <__eeprom_read_byte_1F2021>
    32d0:	e0 2d       	mov	r30, r0
    32d2:	f0 df       	rcall	.-32     	; 0x32b4 <__eeprom_read_byte_1F2021>
    32d4:	f0 2d       	mov	r31, r0
    32d6:	08 95       	ret

000032d8 <__eeprom_write_byte_1F2021>:
    32d8:	f9 99       	sbic	0x1f, 1	; 31
    32da:	fe cf       	rjmp	.-4      	; 0x32d8 <__eeprom_write_byte_1F2021>
    32dc:	b2 bd       	out	0x22, r27	; 34
    32de:	a1 bd       	out	0x21, r26	; 33
    32e0:	00 bc       	out	0x20, r0	; 32
    32e2:	11 96       	adiw	r26, 0x01	; 1
    32e4:	0f b6       	in	r0, 0x3f	; 63
    32e6:	f8 94       	cli
    32e8:	fa 9a       	sbi	0x1f, 2	; 31
    32ea:	f9 9a       	sbi	0x1f, 1	; 31
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	08 95       	ret

000032f0 <__eeprom_write_word_1F2021>:
    32f0:	f3 df       	rcall	.-26     	; 0x32d8 <__eeprom_write_byte_1F2021>
    32f2:	01 2c       	mov	r0, r1
    32f4:	f1 df       	rcall	.-30     	; 0x32d8 <__eeprom_write_byte_1F2021>
    32f6:	11 24       	eor	r1, r1
    32f8:	08 95       	ret

000032fa <__eeprom_write_block_1F2021>:
    32fa:	01 90       	ld	r0, Z+
    32fc:	ed df       	rcall	.-38     	; 0x32d8 <__eeprom_write_byte_1F2021>
    32fe:	1a 94       	dec	r1
    3300:	e1 f7       	brne	.-8      	; 0x32fa <__eeprom_write_block_1F2021>
    3302:	08 95       	ret

00003304 <__udivmodsi4>:
    3304:	a1 e2       	ldi	r26, 0x21	; 33
    3306:	1a 2e       	mov	r1, r26
    3308:	aa 1b       	sub	r26, r26
    330a:	bb 1b       	sub	r27, r27
    330c:	fd 01       	movw	r30, r26
    330e:	0d c0       	rjmp	.+26     	; 0x332a <__udivmodsi4_ep>

00003310 <__udivmodsi4_loop>:
    3310:	aa 1f       	adc	r26, r26
    3312:	bb 1f       	adc	r27, r27
    3314:	ee 1f       	adc	r30, r30
    3316:	ff 1f       	adc	r31, r31
    3318:	a2 17       	cp	r26, r18
    331a:	b3 07       	cpc	r27, r19
    331c:	e4 07       	cpc	r30, r20
    331e:	f5 07       	cpc	r31, r21
    3320:	20 f0       	brcs	.+8      	; 0x332a <__udivmodsi4_ep>
    3322:	a2 1b       	sub	r26, r18
    3324:	b3 0b       	sbc	r27, r19
    3326:	e4 0b       	sbc	r30, r20
    3328:	f5 0b       	sbc	r31, r21

0000332a <__udivmodsi4_ep>:
    332a:	66 1f       	adc	r22, r22
    332c:	77 1f       	adc	r23, r23
    332e:	88 1f       	adc	r24, r24
    3330:	99 1f       	adc	r25, r25
    3332:	1a 94       	dec	r1
    3334:	69 f7       	brne	.-38     	; 0x3310 <__udivmodsi4_loop>
    3336:	60 95       	com	r22
    3338:	70 95       	com	r23
    333a:	80 95       	com	r24
    333c:	90 95       	com	r25
    333e:	9b 01       	movw	r18, r22
    3340:	ac 01       	movw	r20, r24
    3342:	bd 01       	movw	r22, r26
    3344:	cf 01       	movw	r24, r30
    3346:	08 95       	ret
