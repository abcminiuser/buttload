
ButtLoad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000375a  000037ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000375a  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b0  00800126  00800126  00003814  2**0
                  ALLOC
  3 .noinit       00000000  008002d6  008002d6  00003814  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00003814  2**0
                  CONTENTS
  5 .stab         00000084  00000000  00000000  00003814  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000078  00000000  00000000  00003898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000140  00000000  00000000  00003910  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000fa3  00000000  00000000  00003a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000034da  00000000  00000000  000049f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e30  00000000  00000000  00007ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000030bf  00000000  00000000  00008cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001174  00000000  00000000  0000bdbc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 12 02 	jmp	0x424 <__init>
       4:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
       8:	0c 94 28 1b 	jmp	0x3650 <__vector_2>
       c:	0c 94 96 03 	jmp	0x72c <__vector_3>
      10:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      14:	0c 94 8a 07 	jmp	0xf14 <__vector_5>
      18:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      1c:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      20:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      24:	0c 94 c6 0b 	jmp	0x178c <__vector_9>
      28:	0c 94 2a 1b 	jmp	0x3654 <__vector_10>
      2c:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      30:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      34:	0c 94 11 09 	jmp	0x1222 <__vector_13>
      38:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      3c:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      40:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      44:	0c 94 56 09 	jmp	0x12ac <__vector_17>
      48:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      4c:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      50:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      54:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      58:	0c 94 47 08 	jmp	0x108e <__vector_22>

0000005c <SIFOOptionPtrs>:
      5c:	6f 00 60 00                                         o.`.

00000060 <SIFO_Tags>:
      60:	56 49 45 57 20 44 41 54 41 20 54 41 47 53 00        VIEW DATA TAGS.

0000006f <SIFO_Size>:
      6f:	53 54 4f 52 41 47 45 20 53 49 5a 45 53 00           STORAGE SIZES.

0000007d <USIPSNamePtrs>:
      7d:	a3 00 99 00 8f 00 85 00                             ........

00000085 <USI_Speed3>:
      85:	32 31 30 36 35 31 20 48 5a 00                       210651 HZ.

0000008f <USI_Speed2>:
      8f:	31 31 33 34 32 37 20 48 5a 00                       113427 HZ.

00000099 <USI_Speed1>:
      99:	20 38 36 37 33 38 20 48 5a 00                        86738 HZ.

000000a3 <USI_Speed0>:
      a3:	20 35 37 31 35 33 20 48 5a 00                        57153 HZ.

000000ad <ProgOptions>:
      ad:	16 01 0a 01 fa 00 ea 00 da 00 c6 00 bb 00           ..............

000000bb <PRG_C>:
      bb:	45 52 41 53 45 20 4f 4e 4c 59 00                    ERASE ONLY.

000000c6 <PRG_FL>:
      c6:	46 55 53 45 20 41 4e 44 20 4c 4f 43 4b 20 42 59     FUSE AND LOCK BY
      d6:	54 45 53 00                                         TES.

000000da <PRG_L>:
      da:	4c 4f 43 4b 20 42 59 54 45 53 20 4f 4e 4c 59 00     LOCK BYTES ONLY.

000000ea <PRG_F>:
      ea:	46 55 53 45 20 42 59 54 45 53 20 4f 4e 4c 59 00     FUSE BYTES ONLY.

000000fa <PRG_DE>:
      fa:	44 41 54 41 20 41 4e 44 20 45 45 50 52 4f 4d 00     DATA AND EEPROM.

0000010a <PRG_E>:
     10a:	45 45 50 52 4f 4d 20 4f 4e 4c 59 00                 EEPROM ONLY.

00000116 <PRG_D>:
     116:	44 41 54 41 20 4f 4e 4c 59 00                       DATA ONLY.

00000120 <SettingFunctionPtrs>:
     120:	39 06 85 06 83 05 d8 05 df 05 2c 07                 9.........,.

0000012c <SettingFunctionNames>:
     12c:	88 01 7a 01 6d 01 5e 01 4b 01 38 01                 ..z.m.^.K.8.

00000138 <SFunc_GOBOOTLOADER>:
     138:	4a 55 4d 50 20 54 4f 20 42 4f 4f 54 4c 4f 41 44     JUMP TO BOOTLOAD
     148:	45 52 00                                            ER.

0000014b <SFunc_MANCALIB>:
     14b:	4d 41 4e 55 41 4c 20 43 41 4c 49 42 52 41 54 49     MANUAL CALIBRATI
     15b:	4f 4e 00                                            ON.

0000015e <SFunc_AUTOCALIB>:
     15e:	41 55 54 4f 20 43 41 4c 49 42 52 41 54 45 00        AUTO CALIBRATE.

0000016d <SFunc_CLEARMEM>:
     16d:	43 4c 45 41 52 20 4d 45 4d 4f 52 59 00              CLEAR MEMORY.

0000017a <SFunc_SETSPISPEED>:
     17a:	53 45 54 20 53 50 49 20 53 50 45 45 44 00           SET SPI SPEED.

00000188 <SFunc_SETCONTRAST>:
     188:	53 45 54 20 43 4f 4e 54 52 41 53 54 00              SET CONTRAST.

00000195 <MainFunctionPtrs>:
     195:	e7 03 5d 05 18 04 f4 03 d4 06 b2 03 ba 06           ..]...........

000001a3 <MainFunctionNames>:
     1a3:	ff 01 f4 01 e8 01 d4 01 c5 01 bc 01 b1 01           ..............

000001b1 <Func_SLEEP>:
     1b1:	53 4c 45 45 50 20 4d 4f 44 45 00                    SLEEP MODE.

000001bc <Func_SETTINGS>:
     1bc:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

000001c5 <Func_PRGMSTOREINFO>:
     1c5:	44 41 54 41 53 54 4f 52 45 20 49 4e 46 4f 00        DATASTORE INFO.

000001d4 <Func_PRGMDATAFLASH>:
     1d4:	44 41 54 41 46 4c 41 53 48 20 50 52 47 4d 20 4d     DATAFLASH PRGM M
     1e4:	4f 44 45 00                                         ODE.

000001e8 <Func_PRGMAVR>:
     1e8:	50 52 4f 47 52 41 4d 20 41 56 52 00                 PROGRAM AVR.

000001f4 <Func_STOREPRGM>:
     1f4:	53 54 4f 52 45 20 50 52 47 4d 00                    STORE PRGM.

000001ff <Func_ISPPRGM>:
     1ff:	41 56 52 49 53 50 20 4d 4f 44 45 00                 AVRISP MODE.

0000020b <AboutTextPtrs>:
     20b:	36 02 31 02 22 02 13 02                             6.1."...

00000213 <CopyRight>:
     213:	3c 43 3e 20 32 30 30 36 20 2d 20 47 50 4c 00        <C> 2006 - GPL.

00000222 <AuthorName>:
     222:	42 59 20 44 45 41 4e 20 43 41 4d 45 52 41 00        BY DEAN CAMERA.

00000231 <VersionInfo>:
     231:	56 31 2d 33 00                                      V1-3.

00000236 <ProgrammerName>:
     236:	42 55 54 54 4c 4f 41 44 00                          BUTTLOAD.

0000023f <WaitText>:
     23f:	2a 57 41 49 54 2a 00                                *WAIT*.

00000246 <BUTTTAG_Author>:
     246:	40 28 23 29 42 59 20 44 45 41 4e 20 43 41 4d 45     @(#)BY DEAN CAME
     256:	52 41 00                                            RA.

00000259 <BUTTTAG_Name>:
     259:	40 28 23 29 42 55 54 54 4c 4f 41 44 20 41 56 52     @(#)BUTTLOAD AVR
     269:	49 53 50 00                                         ISP.

0000026d <__c.14>:
     26d:	50 52 47 3e 20 00                                   PRG> .

00000273 <__c.13>:
     273:	42 41 44 49 53 52 00                                BADISR.

0000027a <__c.6>:
     27a:	4e 4f 20 45 52 41 53 45 20 43 4d 44 00              NO ERASE CMD.

00000287 <__c.7>:
     287:	4e 4f 20 44 41 54 41 00                             NO DATA.

0000028f <__c.8>:
     28f:	4e 4f 20 45 45 50 52 4f 4d 00                       NO EEPROM.

00000299 <__c.9>:
     299:	4e 4f 20 46 55 53 45 20 42 59 54 45 53 00           NO FUSE BYTES.

000002a7 <__c.10>:
     2a7:	4e 4f 20 4c 4f 43 4b 20 42 59 54 45 53 00           NO LOCK BYTES.

000002b5 <__c.11>:
     2b5:	50 52 4f 47 52 41 4d 4d 49 4e 47 20 44 4f 4e 45     PROGRAMMING DONE
	...

000002c6 <__c.12>:
     2c6:	46 41 49 4c 45 44 00                                FAILED.

000002cd <__c.5>:
     2cd:	2a 53 54 4f 52 41 47 45 20 4d 4f 44 45 2a 00        *STORAGE MODE*.

000002dc <__c.2>:
     2dc:	43 4f 4e 46 49 52 4d 00                             CONFIRM.

000002e4 <__c.3>:
     2e4:	3c 4e 20 59 3e 00                                   <N Y>.

000002ea <__c.4>:
     2ea:	4d 45 4d 20 43 4c 45 41 52 45 44 00                 MEM CLEARED.

000002f6 <__c.1>:
     2f6:	4e 4f 20 53 54 4f 52 45 44 20 50 52 47 4d 00        NO STORED PRGM.

00000305 <__c.0>:
     305:	2a 4a 54 41 47 20 4f 4e 2a 00                       *JTAG ON*.

0000030f <LCD_SegTable>:
     30f:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
     31f:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
     32f:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
     33f:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
     34f:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
     35f:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
     36f:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

0000037b <USIPSValues>:
     37b:	03 80 02 54 01 40 00 22                             ...T.@."

00000383 <DataFlashError>:
     383:	44 41 54 41 46 4c 41 53 48 20 45 52 52 4f 52 00     DATAFLASH ERROR.

00000393 <DF_Pages>:
     393:	00 01 00 02 00 04 00 08 00 10 00 10 00 20 00 20     ............. . 

000003a3 <DF_PageSize>:
     3a3:	08 01 08 01 08 01 08 01 08 01 10 02 10 02 20 04     .............. .

000003b3 <DF_PageBits>:
     3b3:	09 09 09 09 09 0a 0a 0b                             ........

000003bb <__c.0>:
     3bb:	42 55 46 46 20 4f 56 45 52 46 4c 4f 57 00           BUFF OVERFLOW.

000003c9 <DataFlashProgMode>:
     3c9:	2a 44 41 54 41 46 4c 41 53 48 20 4d 4f 44 45 2a     *DATAFLASH MODE*
	...

000003da <SignonResponse>:
     3da:	01 00 08 41 56 52 49 53 50 5f 32                    ...AVRISP_2

000003e5 <VersionData>:
     3e5:	02 02 04                                            ...

000003e8 <SyncErrorMessage>:
     3e8:	53 59 4e 43 20 45 52 52 4f 52 00                    SYNC ERROR.

000003f3 <AVRISPModeMessage>:
     3f3:	2a 41 54 41 56 52 49 53 50 20 4d 4f 44 45 2a 00     *ATAVRISP MODE*.

00000403 <__c.0>:
     403:	44 41 54 41 2d 00                                   DATA-.

00000409 <__c.1>:
     409:	45 50 52 4d 2d 00                                   EPRM-.

0000040f <__c.2>:
     40f:	46 55 53 45 2d 00                                   FUSE-.

00000415 <__c.3>:
     415:	4c 4f 43 4b 2d 00                                   LOCK-.

0000041b <__c.0>:
     41b:	4e 4f 20 54 41 47 53 00 00                          NO TAGS..

00000424 <__init>:
     424:	11 24       	eor	r1, r1
     426:	1f be       	out	0x3f, r1	; 63
     428:	cf ef       	ldi	r28, 0xFF	; 255
     42a:	d4 e0       	ldi	r29, 0x04	; 4
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	cd bf       	out	0x3d, r28	; 61

00000430 <__do_copy_data>:
     430:	11 e0       	ldi	r17, 0x01	; 1
     432:	a0 e0       	ldi	r26, 0x00	; 0
     434:	b1 e0       	ldi	r27, 0x01	; 1
     436:	ea e5       	ldi	r30, 0x5A	; 90
     438:	f7 e3       	ldi	r31, 0x37	; 55
     43a:	02 c0       	rjmp	.+4      	; 0x440 <.do_copy_data_start>

0000043c <.do_copy_data_loop>:
     43c:	05 90       	lpm	r0, Z+
     43e:	0d 92       	st	X+, r0

00000440 <.do_copy_data_start>:
     440:	a6 32       	cpi	r26, 0x26	; 38
     442:	b1 07       	cpc	r27, r17
     444:	d9 f7       	brne	.-10     	; 0x43c <.do_copy_data_loop>

00000446 <__do_clear_bss>:
     446:	12 e0       	ldi	r17, 0x02	; 2
     448:	a6 e2       	ldi	r26, 0x26	; 38
     44a:	b1 e0       	ldi	r27, 0x01	; 1
     44c:	01 c0       	rjmp	.+2      	; 0x450 <.do_clear_bss_start>

0000044e <.do_clear_bss_loop>:
     44e:	1d 92       	st	X+, r1

00000450 <.do_clear_bss_start>:
     450:	a6 3d       	cpi	r26, 0xD6	; 214
     452:	b1 07       	cpc	r27, r17
     454:	e1 f7       	brne	.-8      	; 0x44e <.do_clear_bss_loop>
     456:	0c 94 73 02 	jmp	0x4e6 <main>

0000045a <__bad_interrupt>:
     45a:	0c 94 ad 03 	jmp	0x75a <__vector_default>

0000045e <MAIN_Delay10MS>:

// ======================================================================================

void MAIN_Delay10MS(uint8_t loops)
{
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     462:	28 2f       	mov	r18, r24
     464:	21 50       	subi	r18, 0x01	; 1
     466:	2f 3f       	cpi	r18, 0xFF	; 255
     468:	49 f0       	breq	.+18     	; 0x47c <MAIN_Delay10MS+0x1e>
     46a:	a0 e0       	ldi	r26, 0x00	; 0
     46c:	b8 e4       	ldi	r27, 0x48	; 72
     46e:	c0 e0       	ldi	r28, 0x00	; 0
     470:	d0 e0       	ldi	r29, 0x00	; 0
     472:	cd 01       	movw	r24, r26
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <MAIN_Delay10MS+0x16>
     478:	21 50       	subi	r18, 0x01	; 1
     47a:	d8 f7       	brcc	.-10     	; 0x472 <MAIN_Delay10MS+0x14>
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <MAIN_WaitForJoyRelease>:
  /* Prevents the use of floating point libraries. Delaying in groups of
     10ms increases accuracy by reducing the time overhead for each loop
     interation of the while.                                            */

	while (loops--)
	  _delay_ms(10);
}

void MAIN_Delay1MS(uint8_t loops)
{
  /* Prevents the use of floating point libraries. Less accurate than the
     Delay10MS routine, but nessesary for many commands. The overhead required
     to call the routine is substantially less than the overhead required to
     calculate the float at compile time, so this actually saves execution time. */

	while (loops--)
	  _delay_ms(1);
}

void MAIN_ResetCSLine(uint8_t ActiveInactive)
{
  /* ActiveInactive controls the /Reset line to an AVR device or external dataflash
     /CS line. If the reset polarity parameter is a 0 then interfacing with AT89
	 devices which has an active high reset. Pins are tristated when inactive.      */
	
	switch (ActiveInactive)
	{
		case MAIN_RESETCS_ACTIVE:   // The target RESET line may be either active high or low.
			DDRF |= (1 << 6);
		
			if (!(eeprom_read_byte_169(&Param_ResetPolarity))) // Translate to correct logic level for target device type
			  PORTF |=  (1 << 6);
			else
			  PORTF &= ~(1 << 6);
		
			break;
		case MAIN_RESETCS_EXTDFACTIVE: // Dataflashes are always active low.
			DDRF  |=  (1 << 6);
			PORTF &= ~(1 << 6);
			
			break;
		case MAIN_RESETCS_INACTIVE: // Both modes tristate the pins when inactive.
			DDRF  &= ~(1 << 6);
			PORTF &= ~(1 << 6);
	}
}

void MAIN_WaitForJoyRelease(void)
{
	while (1)
	{
		while (JoyStatus) {};                   // Wait until joystick released
     482:	8e b3       	in	r24, 0x1e	; 30
     484:	88 23       	and	r24, r24
     486:	e9 f7       	brne	.-6      	; 0x482 <MAIN_WaitForJoyRelease>

		MAIN_Delay10MS(1);
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	0e 94 2f 02 	call	0x45e <MAIN_Delay10MS>

		if (!(JoyStatus))                       // Joystick still released (not bouncing), return
     48e:	8e b3       	in	r24, 0x1e	; 30
     490:	88 23       	and	r24, r24
     492:	b9 f7       	brne	.-18     	; 0x482 <MAIN_WaitForJoyRelease>
     494:	08 95       	ret

00000496 <FUNCShowAbout>:
		  return;
	}
}

void MAIN_IntToStr(uint16_t IntV, uint8_t* Buff)
{
	// Shows leading zeros, unlike itoa.

	uint8_t Temp = 0;
	
	while (IntV >= 100)
	{
		Temp++;
		IntV -= 100;
	}

	*(Buff++) = '0' + Temp;
	
	Temp = 0;
	
	while (IntV >= 10)
	{
		Temp++;
		IntV -= 10;
	}
		
	*(Buff++) = '0' + Temp;
	*(Buff++) = '0' + IntV;
	*(Buff)   = '\0';
}

void MAIN_ShowProgType(uint8_t Letter)
{
	uint8_t ProgTypeBuffer[7];

	strcpy_P(ProgTypeBuffer, PSTR("PRG> "));
	ProgTypeBuffer[5] = Letter;
	ProgTypeBuffer[6] = '\0';
	
	LCD_puts(ProgTypeBuffer);
}

void MAIN_ShowError(const uint8_t *pFlashStr)
{
	uint8_t ErrorBuff[LCD_TEXTBUFFER_SIZE];       // New buffer, LCD text buffer size
	
	ErrorBuff[0] = 'E';
	ErrorBuff[1] = '>';

	strcpy_P(&ErrorBuff[2], pFlashStr);       // WARNING: If error text is larger than (TEXTBUFFER_SIZE - 2),
	                                          // this will overflow the buffer and probably crash the micro!
	LCD_puts(ErrorBuff);
	
	MAIN_WaitForJoyRelease();
	while (!(JoyStatus & JOY_PRESS)) {};
	MAIN_WaitForJoyRelease();
}

// ======================================================================================

ISR(PCINT1_vect, ISR_NOBLOCK)                 // Joystick routine; PCINT0_vect is bound to this also via JoystickInterrupt.S
{
	JoyStatus = (~PINB & JOY_BMASK)
	          | (~PINE & JOY_EMASK);
}

ISR(BADISR_vect, ISR_NAKED)                   // Bad ISR routine; should never be called, here for safety
{
	MAIN_ShowError(PSTR("BADISR"));
	while (1) {};
}

// ======================================================================================

void FUNCChangeSettings(void)
{
	uint8_t CurrSFunc = 0;
	
	JoyStatus = 1;

	while (1)
	{
		if (JoyStatus)                         // Joystick is in the non-center position
		{
			if (JoyStatus & JOY_UP)            // Previous function
			  (CurrSFunc == 0)? CurrSFunc = 5 : CurrSFunc--;
			else if (JoyStatus & JOY_DOWN)     // Next function
			  (CurrSFunc == 5)? CurrSFunc = 0 : CurrSFunc++;
			else if (JoyStatus & JOY_PRESS)    // Select current function
			  ((FuncPtr)pgm_read_word(&SettingFunctionPtrs[CurrSFunc]))(); // Run associated function
			else if (JoyStatus & JOY_LEFT)
			  return;
		
			// Show current function onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&SettingFunctionNames[CurrSFunc]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCShowAbout(void)
{
     496:	cf 93       	push	r28
	uint8_t InfoNum = 0;
     498:	c0 e0       	ldi	r28, 0x00	; 0
	
	JoyStatus = 1;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	8e bb       	out	0x1e, r24	; 30
			
	while (1)
	{
		if (JoyStatus)
     49e:	8e b3       	in	r24, 0x1e	; 30
     4a0:	88 23       	and	r24, r24
     4a2:	e9 f3       	breq	.-6      	; 0x49e <FUNCShowAbout+0x8>
		{
			if (JoyStatus & JOY_UP)
     4a4:	f6 9b       	sbis	0x1e, 6	; 30
     4a6:	06 c0       	rjmp	.+12     	; 0x4b4 <FUNCShowAbout+0x1e>
			  (InfoNum == 0)? InfoNum = 3 : InfoNum--;
     4a8:	cc 23       	and	r28, r28
     4aa:	11 f4       	brne	.+4      	; 0x4b0 <FUNCShowAbout+0x1a>
     4ac:	c3 e0       	ldi	r28, 0x03	; 3
     4ae:	0c c0       	rjmp	.+24     	; 0x4c8 <FUNCShowAbout+0x32>
     4b0:	c1 50       	subi	r28, 0x01	; 1
     4b2:	0a c0       	rjmp	.+20     	; 0x4c8 <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_DOWN)
     4b4:	f7 9b       	sbis	0x1e, 7	; 30
     4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <FUNCShowAbout+0x2e>
			  (InfoNum == 3)? InfoNum = 0 : InfoNum++;
     4b8:	c3 30       	cpi	r28, 0x03	; 3
     4ba:	11 f4       	brne	.+4      	; 0x4c0 <FUNCShowAbout+0x2a>
     4bc:	c0 e0       	ldi	r28, 0x00	; 0
     4be:	04 c0       	rjmp	.+8      	; 0x4c8 <FUNCShowAbout+0x32>
     4c0:	cf 5f       	subi	r28, 0xFF	; 255
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_LEFT)
     4c4:	f2 99       	sbic	0x1e, 2	; 30
     4c6:	0d c0       	rjmp	.+26     	; 0x4e2 <FUNCShowAbout+0x4c>
			  return;

			LCD_puts_f((uint8_t*)pgm_read_word(&AboutTextPtrs[InfoNum]));
     4c8:	ec 2f       	mov	r30, r28
     4ca:	ff 27       	eor	r31, r31
     4cc:	ee 0f       	add	r30, r30
     4ce:	ff 1f       	adc	r31, r31
     4d0:	e5 5f       	subi	r30, 0xF5	; 245
     4d2:	fd 4f       	sbci	r31, 0xFD	; 253
     4d4:	85 91       	lpm	r24, Z+
     4d6:	94 91       	lpm	r25, Z
     4d8:	0e 94 fe 07 	call	0xffc <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     4dc:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     4e0:	de cf       	rjmp	.-68     	; 0x49e <FUNCShowAbout+0x8>
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <main>:
     4e6:	cd ef       	ldi	r28, 0xFD	; 253
     4e8:	d4 e0       	ldi	r29, 0x04	; 4
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	cd bf       	out	0x3d, r28	; 61
     4ee:	10 e0       	ldi	r17, 0x00	; 0
     4f0:	80 e8       	ldi	r24, 0x80	; 128
     4f2:	80 bf       	out	0x30, r24	; 48
     4f4:	85 e0       	ldi	r24, 0x05	; 5
     4f6:	80 93 64 00 	sts	0x0064, r24
     4fa:	80 e3       	ldi	r24, 0x30	; 48
     4fc:	80 bb       	out	0x10, r24	; 16
     4fe:	87 e2       	ldi	r24, 0x27	; 39
     500:	84 b9       	out	0x04, r24	; 4
     502:	8f ed       	ldi	r24, 0xDF	; 223
     504:	85 b9       	out	0x05, r24	; 5
     506:	8c e0       	ldi	r24, 0x0C	; 12
     508:	8e b9       	out	0x0e, r24	; 14
     50a:	80 93 6b 00 	sts	0x006B, r24
     50e:	80 ed       	ldi	r24, 0xD0	; 208
     510:	80 93 6c 00 	sts	0x006C, r24
     514:	80 ec       	ldi	r24, 0xC0	; 192
     516:	8d bb       	out	0x1d, r24	; 29
     518:	8c bb       	out	0x1c, r24	; 28
     51a:	81 b3       	in	r24, 0x11	; 17
     51c:	8f 7c       	andi	r24, 0xCF	; 207
     51e:	80 62       	ori	r24, 0x20	; 32
     520:	81 bb       	out	0x11, r24	; 17
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
     52a:	8a 37       	cpi	r24, 0x7A	; 122
     52c:	09 f1       	breq	.+66     	; 0x570 <__stack+0x71>
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	3a 83       	std	Y+2, r19	; 0x02
     534:	29 83       	std	Y+1, r18	; 0x01
     536:	80 91 02 01 	lds	r24, 0x0102
     53a:	90 91 03 01 	lds	r25, 0x0103
     53e:	28 17       	cp	r18, r24
     540:	39 07       	cpc	r19, r25
     542:	88 f4       	brcc	.+34     	; 0x566 <__stack+0x67>
     544:	6f ef       	ldi	r22, 0xFF	; 255
     546:	ce 01       	movw	r24, r28
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	9a 81       	ldd	r25, Y+2	; 0x02
     552:	01 96       	adiw	r24, 0x01	; 1
     554:	9a 83       	std	Y+2, r25	; 0x02
     556:	89 83       	std	Y+1, r24	; 0x01
     558:	20 91 02 01 	lds	r18, 0x0102
     55c:	30 91 03 01 	lds	r19, 0x0103
     560:	82 17       	cp	r24, r18
     562:	93 07       	cpc	r25, r19
     564:	78 f3       	brcs	.-34     	; 0x544 <__stack+0x45>
     566:	6a e7       	ldi	r22, 0x7A	; 122
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
     570:	0e 94 ab 07 	call	0xf56 <LCD_Init>
     574:	84 e0       	ldi	r24, 0x04	; 4
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
     57c:	8f 70       	andi	r24, 0x0F	; 15
     57e:	80 93 e7 00 	sts	0x00E7, r24
     582:	78 94       	sei
     584:	8f e3       	ldi	r24, 0x3F	; 63
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	0e 94 fe 07 	call	0xffc <LCD_puts_f>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
     592:	81 b3       	in	r24, 0x11	; 17
     594:	80 63       	ori	r24, 0x30	; 48
     596:	81 bb       	out	0x11, r24	; 17
     598:	0e 94 3a 07 	call	0xe74 <OSCCAL_Calibrate>
     59c:	87 e0       	ldi	r24, 0x07	; 7
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 db 08 	call	0x11b6 <USART_Init>
     5a4:	81 b3       	in	r24, 0x11	; 17
     5a6:	8f 7c       	andi	r24, 0xCF	; 207
     5a8:	80 61       	ori	r24, 0x10	; 16
     5aa:	81 bb       	out	0x11, r24	; 17
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	8e bb       	out	0x1e, r24	; 30
     5b0:	8e b3       	in	r24, 0x1e	; 30
     5b2:	88 23       	and	r24, r24
     5b4:	e9 f3       	breq	.-6      	; 0x5b0 <__stack+0xb1>
     5b6:	f6 9b       	sbis	0x1e, 6	; 30
     5b8:	06 c0       	rjmp	.+12     	; 0x5c6 <__stack+0xc7>
     5ba:	11 23       	and	r17, r17
     5bc:	11 f4       	brne	.+4      	; 0x5c2 <__stack+0xc3>
     5be:	16 e0       	ldi	r17, 0x06	; 6
     5c0:	1b c0       	rjmp	.+54     	; 0x5f8 <__stack+0xf9>
     5c2:	11 50       	subi	r17, 0x01	; 1
     5c4:	19 c0       	rjmp	.+50     	; 0x5f8 <__stack+0xf9>
     5c6:	f7 9b       	sbis	0x1e, 7	; 30
     5c8:	06 c0       	rjmp	.+12     	; 0x5d6 <__stack+0xd7>
     5ca:	16 30       	cpi	r17, 0x06	; 6
     5cc:	11 f4       	brne	.+4      	; 0x5d2 <__stack+0xd3>
     5ce:	10 e0       	ldi	r17, 0x00	; 0
     5d0:	13 c0       	rjmp	.+38     	; 0x5f8 <__stack+0xf9>
     5d2:	1f 5f       	subi	r17, 0xFF	; 255
     5d4:	11 c0       	rjmp	.+34     	; 0x5f8 <__stack+0xf9>
     5d6:	f4 9b       	sbis	0x1e, 4	; 30
     5d8:	0b c0       	rjmp	.+22     	; 0x5f0 <__stack+0xf1>
     5da:	e1 2f       	mov	r30, r17
     5dc:	ff 27       	eor	r31, r31
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	eb 56       	subi	r30, 0x6B	; 107
     5e4:	fe 4f       	sbci	r31, 0xFE	; 254
     5e6:	85 91       	lpm	r24, Z+
     5e8:	94 91       	lpm	r25, Z
     5ea:	fc 01       	movw	r30, r24
     5ec:	09 95       	icall
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <__stack+0xf9>
     5f0:	f3 9b       	sbis	0x1e, 3	; 30
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <__stack+0xf9>
     5f4:	0e 94 4b 02 	call	0x496 <FUNCShowAbout>
     5f8:	e1 2f       	mov	r30, r17
     5fa:	ff 27       	eor	r31, r31
     5fc:	ee 0f       	add	r30, r30
     5fe:	ff 1f       	adc	r31, r31
     600:	ed 55       	subi	r30, 0x5D	; 93
     602:	fe 4f       	sbci	r31, 0xFE	; 254
     604:	85 91       	lpm	r24, Z+
     606:	94 91       	lpm	r25, Z
     608:	0e 94 fe 07 	call	0xffc <LCD_puts_f>
     60c:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     610:	cf cf       	rjmp	.-98     	; 0x5b0 <__stack+0xb1>

00000612 <MAIN_Delay1MS>:
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     616:	28 2f       	mov	r18, r24
     618:	21 50       	subi	r18, 0x01	; 1
     61a:	2f 3f       	cpi	r18, 0xFF	; 255
     61c:	49 f0       	breq	.+18     	; 0x630 <MAIN_Delay1MS+0x1e>
     61e:	a3 e3       	ldi	r26, 0x33	; 51
     620:	b7 e0       	ldi	r27, 0x07	; 7
     622:	c0 e0       	ldi	r28, 0x00	; 0
     624:	d0 e0       	ldi	r29, 0x00	; 0
     626:	cd 01       	movw	r24, r26
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <MAIN_Delay1MS+0x16>
     62c:	21 50       	subi	r18, 0x01	; 1
     62e:	d8 f7       	brcc	.-10     	; 0x626 <MAIN_Delay1MS+0x14>
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	08 95       	ret

00000636 <MAIN_ResetCSLine>:
     636:	99 27       	eor	r25, r25
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	91 05       	cpc	r25, r1
     63c:	a9 f0       	breq	.+42     	; 0x668 <MAIN_ResetCSLine+0x32>
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	91 05       	cpc	r25, r1
     642:	1c f4       	brge	.+6      	; 0x64a <MAIN_ResetCSLine+0x14>
     644:	89 2b       	or	r24, r25
     646:	21 f0       	breq	.+8      	; 0x650 <MAIN_ResetCSLine+0x1a>
     648:	08 95       	ret
     64a:	02 97       	sbiw	r24, 0x02	; 2
     64c:	51 f0       	breq	.+20     	; 0x662 <MAIN_ResetCSLine+0x2c>
     64e:	08 95       	ret
     650:	86 9a       	sbi	0x10, 6	; 16
     652:	82 e2       	ldi	r24, 0x22	; 34
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
     65a:	88 23       	and	r24, r24
     65c:	19 f4       	brne	.+6      	; 0x664 <MAIN_ResetCSLine+0x2e>
     65e:	8e 9a       	sbi	0x11, 6	; 17
     660:	08 95       	ret
     662:	86 9a       	sbi	0x10, 6	; 16
     664:	8e 98       	cbi	0x11, 6	; 17
     666:	08 95       	ret
     668:	86 98       	cbi	0x10, 6	; 16
     66a:	fc cf       	rjmp	.-8      	; 0x664 <MAIN_ResetCSLine+0x2e>

0000066c <MAIN_IntToStr>:
     66c:	fb 01       	movw	r30, r22
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	84 36       	cpi	r24, 0x64	; 100
     672:	91 05       	cpc	r25, r1
     674:	20 f0       	brcs	.+8      	; 0x67e <MAIN_IntToStr+0x12>
     676:	2f 5f       	subi	r18, 0xFF	; 255
     678:	84 56       	subi	r24, 0x64	; 100
     67a:	90 40       	sbci	r25, 0x00	; 0
     67c:	f9 cf       	rjmp	.-14     	; 0x670 <MAIN_IntToStr+0x4>
     67e:	20 5d       	subi	r18, 0xD0	; 208
     680:	21 93       	st	Z+, r18
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	8a 30       	cpi	r24, 0x0A	; 10
     686:	91 05       	cpc	r25, r1
     688:	18 f0       	brcs	.+6      	; 0x690 <MAIN_IntToStr+0x24>
     68a:	2f 5f       	subi	r18, 0xFF	; 255
     68c:	0a 97       	sbiw	r24, 0x0a	; 10
     68e:	fa cf       	rjmp	.-12     	; 0x684 <MAIN_IntToStr+0x18>
     690:	20 5d       	subi	r18, 0xD0	; 208
     692:	21 93       	st	Z+, r18
     694:	80 5d       	subi	r24, 0xD0	; 208
     696:	81 93       	st	Z+, r24
     698:	10 82       	st	Z, r1
     69a:	08 95       	ret

0000069c <MAIN_ShowProgType>:
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	27 97       	sbiw	r28, 0x07	; 7
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	18 2f       	mov	r17, r24
     6b4:	6d e6       	ldi	r22, 0x6D	; 109
     6b6:	72 e0       	ldi	r23, 0x02	; 2
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	0e 94 30 1b 	call	0x3660 <strcpy_P>
     6c0:	1e 83       	std	Y+6, r17	; 0x06
     6c2:	1f 82       	std	Y+7, r1	; 0x07
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	0e 94 bd 07 	call	0xf7a <LCD_puts>
     6cc:	27 96       	adiw	r28, 0x07	; 7
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	08 95       	ret

000006e0 <MAIN_ShowError>:
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	64 97       	sbiw	r28, 0x14	; 20
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	25 e4       	ldi	r18, 0x45	; 69
     6f6:	29 83       	std	Y+1, r18	; 0x01
     6f8:	2e e3       	ldi	r18, 0x3E	; 62
     6fa:	2a 83       	std	Y+2, r18	; 0x02
     6fc:	bc 01       	movw	r22, r24
     6fe:	ce 01       	movw	r24, r28
     700:	03 96       	adiw	r24, 0x03	; 3
     702:	0e 94 30 1b 	call	0x3660 <strcpy_P>
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	0e 94 bd 07 	call	0xf7a <LCD_puts>
     70e:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     712:	f4 9b       	sbis	0x1e, 4	; 30
     714:	fe cf       	rjmp	.-4      	; 0x712 <MAIN_ShowError+0x32>
     716:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     71a:	64 96       	adiw	r28, 0x14	; 20
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	cd bf       	out	0x3d, r28	; 61
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <__vector_3>:
     72c:	78 94       	sei
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	8f 93       	push	r24
     73a:	9f 93       	push	r25
     73c:	93 b1       	in	r25, 0x03	; 3
     73e:	90 95       	com	r25
     740:	90 7d       	andi	r25, 0xD0	; 208
     742:	8c b1       	in	r24, 0x0c	; 12
     744:	80 95       	com	r24
     746:	8c 70       	andi	r24, 0x0C	; 12
     748:	98 2b       	or	r25, r24
     74a:	9e bb       	out	0x1e, r25	; 30
     74c:	9f 91       	pop	r25
     74e:	8f 91       	pop	r24
     750:	0f 90       	pop	r0
     752:	0f be       	out	0x3f, r0	; 63
     754:	0f 90       	pop	r0
     756:	1f 90       	pop	r1
     758:	18 95       	reti

0000075a <__vector_default>:
     75a:	83 e7       	ldi	r24, 0x73	; 115
     75c:	92 e0       	ldi	r25, 0x02	; 2
     75e:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
     762:	ff cf       	rjmp	.-2      	; 0x762 <__vector_default+0x8>

00000764 <FUNCChangeSettings>:
     764:	cf 93       	push	r28
     766:	c0 e0       	ldi	r28, 0x00	; 0
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	8e bb       	out	0x1e, r24	; 30
     76c:	8e b3       	in	r24, 0x1e	; 30
     76e:	88 23       	and	r24, r24
     770:	e9 f3       	breq	.-6      	; 0x76c <FUNCChangeSettings+0x8>
     772:	f6 9b       	sbis	0x1e, 6	; 30
     774:	06 c0       	rjmp	.+12     	; 0x782 <FUNCChangeSettings+0x1e>
     776:	cc 23       	and	r28, r28
     778:	11 f4       	brne	.+4      	; 0x77e <FUNCChangeSettings+0x1a>
     77a:	c5 e0       	ldi	r28, 0x05	; 5
     77c:	19 c0       	rjmp	.+50     	; 0x7b0 <FUNCChangeSettings+0x4c>
     77e:	c1 50       	subi	r28, 0x01	; 1
     780:	17 c0       	rjmp	.+46     	; 0x7b0 <FUNCChangeSettings+0x4c>
     782:	f7 9b       	sbis	0x1e, 7	; 30
     784:	06 c0       	rjmp	.+12     	; 0x792 <FUNCChangeSettings+0x2e>
     786:	c5 30       	cpi	r28, 0x05	; 5
     788:	11 f4       	brne	.+4      	; 0x78e <FUNCChangeSettings+0x2a>
     78a:	c0 e0       	ldi	r28, 0x00	; 0
     78c:	11 c0       	rjmp	.+34     	; 0x7b0 <FUNCChangeSettings+0x4c>
     78e:	cf 5f       	subi	r28, 0xFF	; 255
     790:	0f c0       	rjmp	.+30     	; 0x7b0 <FUNCChangeSettings+0x4c>
     792:	f4 9b       	sbis	0x1e, 4	; 30
     794:	0b c0       	rjmp	.+22     	; 0x7ac <FUNCChangeSettings+0x48>
     796:	ec 2f       	mov	r30, r28
     798:	ff 27       	eor	r31, r31
     79a:	ee 0f       	add	r30, r30
     79c:	ff 1f       	adc	r31, r31
     79e:	e0 5e       	subi	r30, 0xE0	; 224
     7a0:	fe 4f       	sbci	r31, 0xFE	; 254
     7a2:	85 91       	lpm	r24, Z+
     7a4:	94 91       	lpm	r25, Z
     7a6:	fc 01       	movw	r30, r24
     7a8:	09 95       	icall
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <FUNCChangeSettings+0x4c>
     7ac:	f2 99       	sbic	0x1e, 2	; 30
     7ae:	0d c0       	rjmp	.+26     	; 0x7ca <FUNCChangeSettings+0x66>
     7b0:	ec 2f       	mov	r30, r28
     7b2:	ff 27       	eor	r31, r31
     7b4:	ee 0f       	add	r30, r30
     7b6:	ff 1f       	adc	r31, r31
     7b8:	e4 5d       	subi	r30, 0xD4	; 212
     7ba:	fe 4f       	sbci	r31, 0xFE	; 254
     7bc:	85 91       	lpm	r24, Z+
     7be:	94 91       	lpm	r25, Z
     7c0:	0e 94 fe 07 	call	0xffc <LCD_puts_f>
     7c4:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     7c8:	d1 cf       	rjmp	.-94     	; 0x76c <FUNCChangeSettings+0x8>
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <FUNCAVRISPMode>:
		}
	}
}

void FUNCAVRISPMode(void)
{
	LCD_puts_f(AVRISPModeMessage);
     7ce:	83 ef       	ldi	r24, 0xF3	; 243
     7d0:	93 e0       	ldi	r25, 0x03	; 3
     7d2:	0e 94 fe 07 	call	0xffc <LCD_puts_f>
	
	InterpretPacketRoutine = (FuncPtr)AICI_InterpretPacket;
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	92 e1       	ldi	r25, 0x12	; 18
     7da:	90 93 25 01 	sts	0x0125, r25
     7de:	80 93 24 01 	sts	0x0124, r24
	V2P_RunStateMachine();
     7e2:	0e 94 16 0f 	call	0x1e2c <V2P_RunStateMachine>
     7e6:	08 95       	ret

000007e8 <FUNCProgramDataflash>:
}

void FUNCProgramDataflash(void)
{
	USI_SPIInitMaster(eeprom_read_byte_169(&Param_SCKDuration));
     7e8:	80 e2       	ldi	r24, 0x20	; 32
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
     7f0:	0e 94 8c 09 	call	0x1318 <USI_SPIInitMaster>
	UseExernalDF = TRUE;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 83 02 	sts	0x0283, r24
	DFSPIRoutinePointer = USI_SPITransmit;
     7fa:	86 ea       	ldi	r24, 0xA6	; 166
     7fc:	99 e0       	ldi	r25, 0x09	; 9
     7fe:	90 93 01 01 	sts	0x0101, r25
     802:	80 93 00 01 	sts	0x0100, r24
	
	LCD_puts_f(DataFlashProgMode);
     806:	89 ec       	ldi	r24, 0xC9	; 201
     808:	93 e0       	ldi	r25, 0x03	; 3
     80a:	0e 94 fe 07 	call	0xffc <LCD_puts_f>

	InterpretPacketRoutine = PD_InterpretAVRISPPacket;
     80e:	8e e4       	ldi	r24, 0x4E	; 78
     810:	9c e0       	ldi	r25, 0x0C	; 12
     812:	90 93 25 01 	sts	0x0125, r25
     816:	80 93 24 01 	sts	0x0124, r24
	V2P_RunStateMachine();
     81a:	0e 94 16 0f 	call	0x1e2c <V2P_RunStateMachine>
	   
	DF_EnableDataflash(FALSE);
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
	SPI_SPIOFF();
     824:	80 91 64 00 	lds	r24, 0x0064
     828:	84 60       	ori	r24, 0x04	; 4
     82a:	80 93 64 00 	sts	0x0064, r24
     82e:	08 95       	ret

00000830 <FUNCProgramAVR>:
}

void FUNCProgramAVR(void)
{
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	65 97       	sbiw	r28, 0x15	; 21
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
	uint8_t  DoneFailMessageBuff[19];
	uint16_t EEPROMAddress;
	uint8_t  Fault = ISPCC_NO_FAULT;
     84e:	dd 24       	eor	r13, r13
	uint8_t  ProgMode = 0;
     850:	0d 2d       	mov	r16, r13

	SPI_SPIInit();
     852:	0e 94 37 09 	call	0x126e <SPI_SPIInit>
	UseExernalDF = FALSE;
     856:	d0 92 83 02 	sts	0x0283, r13
	DFSPIRoutinePointer = SPI_SPITransmit;
     85a:	81 e4       	ldi	r24, 0x41	; 65
     85c:	99 e0       	ldi	r25, 0x09	; 9
     85e:	90 93 01 01 	sts	0x0101, r25
     862:	80 93 00 01 	sts	0x0100, r24
	
	if (!(DF_CheckCorrectOnboardChip()))
     866:	0e 94 59 0b 	call	0x16b2 <DF_CheckCorrectOnboardChip>
     86a:	88 23       	and	r24, r24
     86c:	09 f4       	brne	.+2      	; 0x870 <FUNCProgramAVR+0x40>
     86e:	17 c1       	rjmp	.+558    	; 0xa9e <FUNCProgramAVR+0x26e>
	  return;

	MAIN_WaitForJoyRelease();
     870:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
	
	JoyStatus = 1;                            // Use an invalid joystick value to force the program to write the
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	8e bb       	out	0x1e, r24	; 30
	                                          // name of the default command onto the LCD
	while (1)
	{
		if (JoyStatus)
     878:	8e b3       	in	r24, 0x1e	; 30
     87a:	88 23       	and	r24, r24
     87c:	e9 f3       	breq	.-6      	; 0x878 <FUNCProgramAVR+0x48>
		{
			if (JoyStatus & JOY_LEFT)
     87e:	f2 99       	sbic	0x1e, 2	; 30
     880:	0e c1       	rjmp	.+540    	; 0xa9e <FUNCProgramAVR+0x26e>
			  return;
			else if (JoyStatus & JOY_PRESS)
     882:	f4 99       	sbic	0x1e, 4	; 30
     884:	1c c0       	rjmp	.+56     	; 0x8be <FUNCProgramAVR+0x8e>
			  break;
			else if (JoyStatus & JOY_UP)
     886:	f6 9b       	sbis	0x1e, 6	; 30
     888:	06 c0       	rjmp	.+12     	; 0x896 <FUNCProgramAVR+0x66>
			  (ProgMode == 0)? ProgMode = 6 : ProgMode--;
     88a:	00 23       	and	r16, r16
     88c:	11 f4       	brne	.+4      	; 0x892 <FUNCProgramAVR+0x62>
     88e:	06 e0       	ldi	r16, 0x06	; 6
     890:	09 c0       	rjmp	.+18     	; 0x8a4 <FUNCProgramAVR+0x74>
     892:	01 50       	subi	r16, 0x01	; 1
     894:	07 c0       	rjmp	.+14     	; 0x8a4 <FUNCProgramAVR+0x74>
			else if (JoyStatus & JOY_DOWN)
     896:	f7 9b       	sbis	0x1e, 7	; 30
     898:	05 c0       	rjmp	.+10     	; 0x8a4 <FUNCProgramAVR+0x74>
			  (ProgMode == 6)? ProgMode = 0 : ProgMode++;
     89a:	06 30       	cpi	r16, 0x06	; 6
     89c:	11 f4       	brne	.+4      	; 0x8a2 <FUNCProgramAVR+0x72>
     89e:	00 e0       	ldi	r16, 0x00	; 0
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <FUNCProgramAVR+0x74>
     8a2:	0f 5f       	subi	r16, 0xFF	; 255

			LCD_puts_f((uint8_t*)pgm_read_word(&ProgOptions[ProgMode])); // Show current function onto the LCD
     8a4:	e0 2f       	mov	r30, r16
     8a6:	ff 27       	eor	r31, r31
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	e3 55       	subi	r30, 0x53	; 83
     8ae:	ff 4f       	sbci	r31, 0xFF	; 255
     8b0:	85 91       	lpm	r24, Z+
     8b2:	94 91       	lpm	r25, Z
     8b4:	0e 94 fe 07 	call	0xffc <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     8b8:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     8bc:	dd cf       	rjmp	.-70     	; 0x878 <FUNCProgramAVR+0x48>
		}
	}

	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);                // Orange = busy
     8be:	81 b3       	in	r24, 0x11	; 17
     8c0:	80 63       	ori	r24, 0x30	; 48
     8c2:	81 bb       	out	0x11, r24	; 17
	LCD_puts_f(WaitText);
     8c4:	8f e3       	ldi	r24, 0x3F	; 63
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	0e 94 fe 07 	call	0xffc <LCD_puts_f>

	USI_SPIInitMaster(eeprom_read_byte_169(&Param_SCKDuration));
     8cc:	80 e2       	ldi	r24, 0x20	; 32
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
     8d4:	0e 94 8c 09 	call	0x1318 <USI_SPIInitMaster>
	MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>

	EEPROMAddress = Prog_EnterProgMode;
     8de:	80 91 12 01 	lds	r24, 0x0112
     8e2:	90 91 13 01 	lds	r25, 0x0113
     8e6:	9d 8b       	std	Y+21, r25	; 0x15
     8e8:	8c 8b       	std	Y+20, r24	; 0x14
     8ea:	54 e3       	ldi	r21, 0x34	; 52
     8ec:	e5 2e       	mov	r14, r21
     8ee:	51 e0       	ldi	r21, 0x01	; 1
     8f0:	f5 2e       	mov	r15, r21
     8f2:	1b e0       	ldi	r17, 0x0B	; 11
			
	for (uint8_t PacketB = 0; PacketB <= 11; PacketB++) // Read the enter programming mode command bytes
	{
		PacketBytes[PacketB] = eeprom_read_byte_169(&EEPROMAddress);
     8f4:	ce 01       	movw	r24, r28
     8f6:	44 96       	adiw	r24, 0x14	; 20
     8f8:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
     8fc:	f7 01       	movw	r30, r14
     8fe:	81 93       	st	Z+, r24
     900:	7f 01       	movw	r14, r30
		EEPROMAddress++;
     902:	8c 89       	ldd	r24, Y+20	; 0x14
     904:	9d 89       	ldd	r25, Y+21	; 0x15
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	9d 8b       	std	Y+21, r25	; 0x15
     90a:	8c 8b       	std	Y+20, r24	; 0x14
     90c:	11 50       	subi	r17, 0x01	; 1
     90e:	17 ff       	sbrs	r17, 7
     910:	f1 cf       	rjmp	.-30     	; 0x8f4 <FUNCProgramAVR+0xc4>
	}
	
	ISPCC_EnterChipProgrammingMode();    // Try to sync with the slave AVR
     912:	0e 94 70 10 	call	0x20e0 <ISPCC_EnterChipProgrammingMode>

	CurrAddress = 0;
     916:	10 92 2b 01 	sts	0x012B, r1
     91a:	10 92 2c 01 	sts	0x012C, r1
     91e:	10 92 2d 01 	sts	0x012D, r1
     922:	10 92 2e 01 	sts	0x012E, r1

	if (PacketBytes[1] == STATUS_CMD_OK) // ISPCC_EnterChipProgrammingMode alters the PacketBytes buffer rather than returning a value
     926:	80 91 35 01 	lds	r24, 0x0135
     92a:	88 23       	and	r24, r24
     92c:	09 f0       	breq	.+2      	; 0x930 <FUNCProgramAVR+0x100>
     92e:	a2 c0       	rjmp	.+324    	; 0xa74 <FUNCProgramAVR+0x244>
	{						
		if ((ProgMode == 6) || (ProgMode == 0) || (ProgMode == 2)) // Erase chip, or program flash mode
     930:	06 30       	cpi	r16, 0x06	; 6
     932:	21 f0       	breq	.+8      	; 0x93c <FUNCProgramAVR+0x10c>
     934:	00 23       	and	r16, r16
     936:	11 f0       	breq	.+4      	; 0x93c <FUNCProgramAVR+0x10c>
     938:	02 30       	cpi	r16, 0x02	; 2
     93a:	91 f4       	brne	.+36     	; 0x960 <FUNCProgramAVR+0x130>
		{
			MAIN_ShowProgType('C');
     93c:	83 e4       	ldi	r24, 0x43	; 67
     93e:	0e 94 4e 03 	call	0x69c <MAIN_ShowProgType>
			
			if (!(eeprom_read_byte_169(&Prog_EraseCmdStored) == TRUE))
     942:	8a e1       	ldi	r24, 0x1A	; 26
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	39 f0       	breq	.+14     	; 0x95c <FUNCProgramAVR+0x12c>
			{
				Fault = ISPCC_FAULT_NOERASE;
     94e:	42 e0       	ldi	r20, 0x02	; 2
     950:	d4 2e       	mov	r13, r20
				MAIN_ShowError(PSTR("NO ERASE CMD"));
     952:	8a e7       	ldi	r24, 0x7A	; 122
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
     95a:	02 c0       	rjmp	.+4      	; 0x960 <FUNCProgramAVR+0x130>
			}
			else
			{
				PM_SendEraseCommand();
     95c:	0e 94 31 18 	call	0x3062 <PM_SendEraseCommand>
			}
		}

		if (((ProgMode == 0) || (ProgMode == 2)) && (Fault == ISPCC_NO_FAULT)) // Program flash
     960:	00 23       	and	r16, r16
     962:	11 f0       	breq	.+4      	; 0x968 <FUNCProgramAVR+0x138>
     964:	02 30       	cpi	r16, 0x02	; 2
     966:	c1 f4       	brne	.+48     	; 0x998 <FUNCProgramAVR+0x168>
     968:	dd 20       	and	r13, r13
     96a:	b1 f4       	brne	.+44     	; 0x998 <FUNCProgramAVR+0x168>
		{
			MAIN_ShowProgType('D');
     96c:	84 e4       	ldi	r24, 0x44	; 68
     96e:	0e 94 4e 03 	call	0x69c <MAIN_ShowProgType>

			if (!(PM_GetStoredDataSize(TYPE_FLASH))) // Check to make sure a program is present in memory
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	0e 94 6f 13 	call	0x26de <PM_GetStoredDataSize>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	00 97       	sbiw	r24, 0x00	; 0
     97e:	a1 05       	cpc	r26, r1
     980:	b1 05       	cpc	r27, r1
     982:	39 f4       	brne	.+14     	; 0x992 <FUNCProgramAVR+0x162>
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     984:	33 e0       	ldi	r19, 0x03	; 3
     986:	d3 2e       	mov	r13, r19
				MAIN_ShowError(PSTR("NO DATA"));
     988:	87 e8       	ldi	r24, 0x87	; 135
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
     990:	03 c0       	rjmp	.+6      	; 0x998 <FUNCProgramAVR+0x168>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_FLASH);
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	0e 94 81 18 	call	0x3102 <PM_CreateProgrammingPackets>
			}
		}
	
		if ((ProgMode == 1) || (ProgMode == 2)) // Program EEPROM
     998:	80 2f       	mov	r24, r16
     99a:	81 50       	subi	r24, 0x01	; 1
     99c:	82 30       	cpi	r24, 0x02	; 2
     99e:	b0 f4       	brcc	.+44     	; 0x9cc <FUNCProgramAVR+0x19c>
		{
			MAIN_ShowProgType('E');
     9a0:	85 e4       	ldi	r24, 0x45	; 69
     9a2:	0e 94 4e 03 	call	0x69c <MAIN_ShowProgType>
				
			if (!(PM_GetStoredDataSize(TYPE_EEPROM))) // Check to make sure EEPROM data is present in memory
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	0e 94 6f 13 	call	0x26de <PM_GetStoredDataSize>
     9ac:	dc 01       	movw	r26, r24
     9ae:	cb 01       	movw	r24, r22
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	a1 05       	cpc	r26, r1
     9b4:	b1 05       	cpc	r27, r1
     9b6:	39 f4       	brne	.+14     	; 0x9c6 <FUNCProgramAVR+0x196>
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     9b8:	23 e0       	ldi	r18, 0x03	; 3
     9ba:	d2 2e       	mov	r13, r18
				MAIN_ShowError(PSTR("NO EEPROM"));
     9bc:	8f e8       	ldi	r24, 0x8F	; 143
     9be:	92 e0       	ldi	r25, 0x02	; 2
     9c0:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <FUNCProgramAVR+0x19c>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_EEPROM);
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	0e 94 81 18 	call	0x3102 <PM_CreateProgrammingPackets>
			}
		}

		if ((ProgMode == 3) || (ProgMode == 5)) // Program Fuse bytes
     9cc:	03 30       	cpi	r16, 0x03	; 3
     9ce:	11 f0       	breq	.+4      	; 0x9d4 <FUNCProgramAVR+0x1a4>
     9d0:	05 30       	cpi	r16, 0x05	; 5
     9d2:	99 f4       	brne	.+38     	; 0x9fa <FUNCProgramAVR+0x1ca>
		{
			MAIN_ShowProgType('F');
     9d4:	86 e4       	ldi	r24, 0x46	; 70
     9d6:	0e 94 4e 03 	call	0x69c <MAIN_ShowProgType>
			
			if (!(eeprom_read_byte_169(&Prog_TotalFuseBytes)))
     9da:	80 e1       	ldi	r24, 0x10	; 16
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
     9e2:	88 23       	and	r24, r24
     9e4:	39 f4       	brne	.+14     	; 0x9f4 <FUNCProgramAVR+0x1c4>
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     9e6:	93 e0       	ldi	r25, 0x03	; 3
     9e8:	d9 2e       	mov	r13, r25
				MAIN_ShowError(PSTR("NO FUSE BYTES"));
     9ea:	89 e9       	ldi	r24, 0x99	; 153
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
     9f2:	03 c0       	rjmp	.+6      	; 0x9fa <FUNCProgramAVR+0x1ca>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_FUSE);
     9f4:	82 e0       	ldi	r24, 0x02	; 2
     9f6:	0e 94 e1 17 	call	0x2fc2 <PM_SendFuseLockBytes>
			}
		}

		if ((ProgMode == 4) || (ProgMode == 5)) // Program Lock bytes
     9fa:	80 2f       	mov	r24, r16
     9fc:	84 50       	subi	r24, 0x04	; 4
     9fe:	82 30       	cpi	r24, 0x02	; 2
     a00:	00 f5       	brcc	.+64     	; 0xa42 <FUNCProgramAVR+0x212>
		{
			if (ProgMode == 5)                    // If fusebytes have already been written, we need to reenter programming mode to latch them
     a02:	05 30       	cpi	r16, 0x05	; 5
     a04:	59 f4       	brne	.+22     	; 0xa1c <FUNCProgramAVR+0x1ec>
			{
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line of the slave AVR
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
				MAIN_Delay10MS(1);
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	0e 94 2f 02 	call	0x45e <MAIN_Delay10MS>
				MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
				ISPCC_EnterChipProgrammingMode(); // Try to sync with the slave AVR
     a18:	0e 94 70 10 	call	0x20e0 <ISPCC_EnterChipProgrammingMode>
			}

			MAIN_ShowProgType('L');
     a1c:	8c e4       	ldi	r24, 0x4C	; 76
     a1e:	0e 94 4e 03 	call	0x69c <MAIN_ShowProgType>
		
			if (!(eeprom_read_byte_169(&Prog_TotalLockBytes)))
     a22:	8e e0       	ldi	r24, 0x0E	; 14
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
     a2a:	88 23       	and	r24, r24
     a2c:	39 f4       	brne	.+14     	; 0xa3c <FUNCProgramAVR+0x20c>
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	d8 2e       	mov	r13, r24
				MAIN_ShowError(PSTR("NO LOCK BYTES"));
     a32:	87 ea       	ldi	r24, 0xA7	; 167
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
     a3a:	03 c0       	rjmp	.+6      	; 0xa42 <FUNCProgramAVR+0x212>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_LOCK);
     a3c:	83 e0       	ldi	r24, 0x03	; 3
     a3e:	0e 94 e1 17 	call	0x2fc2 <PM_SendFuseLockBytes>
			}
		}

		strcpy_P(DoneFailMessageBuff, PSTR("PROGRAMMING DONE"));
     a42:	65 eb       	ldi	r22, 0xB5	; 181
     a44:	72 e0       	ldi	r23, 0x02	; 2
     a46:	ce 01       	movw	r24, r28
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	0e 94 30 1b 	call	0x3660 <strcpy_P>

		if (Fault != ISPCC_NO_FAULT)         // Takes less code to just overwrite part of the string on fail
     a4e:	dd 20       	and	r13, r13
     a50:	31 f0       	breq	.+12     	; 0xa5e <FUNCProgramAVR+0x22e>
		  strcpy_P(&DoneFailMessageBuff[12], PSTR("FAILED"));
     a52:	66 ec       	ldi	r22, 0xC6	; 198
     a54:	72 e0       	ldi	r23, 0x02	; 2
     a56:	ce 01       	movw	r24, r28
     a58:	0d 96       	adiw	r24, 0x0d	; 13
     a5a:	0e 94 30 1b 	call	0x3660 <strcpy_P>

		LCD_puts(DoneFailMessageBuff);
     a5e:	ce 01       	movw	r24, r28
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	0e 94 bd 07 	call	0xf7a <LCD_puts>

		MAIN_Delay10MS(255);
     a66:	8f ef       	ldi	r24, 0xFF	; 255
     a68:	0e 94 2f 02 	call	0x45e <MAIN_Delay10MS>
		MAIN_Delay10MS(100);
     a6c:	84 e6       	ldi	r24, 0x64	; 100
     a6e:	0e 94 2f 02 	call	0x45e <MAIN_Delay10MS>
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <FUNCProgramAVR+0x24c>
	}
	else
	{
		MAIN_ShowError(SyncErrorMessage);
     a74:	88 ee       	ldi	r24, 0xE8	; 232
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
	}
	
	MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run	
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
	USI_SPIOff();
     a82:	0e 94 9c 09 	call	0x1338 <USI_SPIOff>
	DF_EnableDataflash(FALSE);
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
	SPI_SPIOFF();
     a8c:	80 91 64 00 	lds	r24, 0x0064
     a90:	84 60       	ori	r24, 0x04	; 4
     a92:	80 93 64 00 	sts	0x0064, r24
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Green = ready
     a96:	81 b3       	in	r24, 0x11	; 17
     a98:	8f 7c       	andi	r24, 0xCF	; 207
     a9a:	80 61       	ori	r24, 0x10	; 16
     a9c:	81 bb       	out	0x11, r24	; 17
     a9e:	65 96       	adiw	r28, 0x15	; 21
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	de bf       	out	0x3e, r29	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	cd bf       	out	0x3d, r28	; 61
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	08 95       	ret

00000aba <FUNCStoreProgram>:
}

void FUNCStoreProgram(void)
{
	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     aba:	81 e4       	ldi	r24, 0x41	; 65
     abc:	99 e0       	ldi	r25, 0x09	; 9
     abe:	90 93 01 01 	sts	0x0101, r25
     ac2:	80 93 00 01 	sts	0x0100, r24
	SPI_SPIInit();
     ac6:	0e 94 37 09 	call	0x126e <SPI_SPIInit>
	UseExernalDF = FALSE;
     aca:	10 92 83 02 	sts	0x0283, r1
	DF_EnableDataflash(TRUE);
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>

	if (!(DF_CheckCorrectOnboardChip()))
     ad4:	0e 94 59 0b 	call	0x16b2 <DF_CheckCorrectOnboardChip>
     ad8:	88 23       	and	r24, r24
     ada:	a1 f0       	breq	.+40     	; 0xb04 <FUNCStoreProgram+0x4a>
	  return;
			
	LCD_puts_f(PSTR("*STORAGE MODE*"));
     adc:	8d ec       	ldi	r24, 0xCD	; 205
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	0e 94 fe 07 	call	0xffc <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PM_InterpretAVRISPPacket;
     ae4:	8d e1       	ldi	r24, 0x1D	; 29
     ae6:	95 e1       	ldi	r25, 0x15	; 21
     ae8:	90 93 25 01 	sts	0x0125, r25
     aec:	80 93 24 01 	sts	0x0124, r24
	V2P_RunStateMachine();
     af0:	0e 94 16 0f 	call	0x1e2c <V2P_RunStateMachine>
	DF_EnableDataflash(FALSE);
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
	SPI_SPIOFF();
     afa:	80 91 64 00 	lds	r24, 0x0064
     afe:	84 60       	ori	r24, 0x04	; 4
     b00:	80 93 64 00 	sts	0x0064, r24
     b04:	08 95       	ret

00000b06 <FUNCClearMem>:
}

void FUNCClearMem(void)
{
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	22 97       	sbiw	r28, 0x02	; 2
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
	LCD_puts_f(PSTR("CONFIRM"));
     b1e:	8c ed       	ldi	r24, 0xDC	; 220
     b20:	92 e0       	ldi	r25, 0x02	; 2
     b22:	0e 94 fe 07 	call	0xffc <LCD_puts_f>
	MAIN_Delay10MS(180);
     b26:	84 eb       	ldi	r24, 0xB4	; 180
     b28:	0e 94 2f 02 	call	0x45e <MAIN_Delay10MS>

	LCD_puts_f(PSTR("<N Y>"));
     b2c:	84 ee       	ldi	r24, 0xE4	; 228
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	0e 94 fe 07 	call	0xffc <LCD_puts_f>

	while (1)
	{
		if (JoyStatus)
     b34:	8e b3       	in	r24, 0x1e	; 30
     b36:	88 23       	and	r24, r24
     b38:	e9 f3       	breq	.-6      	; 0xb34 <FUNCClearMem+0x2e>
		{
			if (JoyStatus & JOY_LEFT)
     b3a:	8e b3       	in	r24, 0x1e	; 30
     b3c:	99 27       	eor	r25, r25
     b3e:	8c 01       	movw	r16, r24
     b40:	04 70       	andi	r16, 0x04	; 4
     b42:	10 70       	andi	r17, 0x00	; 0
     b44:	82 fd       	sbrc	r24, 2
     b46:	29 c0       	rjmp	.+82     	; 0xb9a <FUNCClearMem+0x94>
			  return;
			else if (JoyStatus & JOY_RIGHT)
     b48:	f3 9b       	sbis	0x1e, 3	; 30
     b4a:	f4 cf       	rjmp	.-24     	; 0xb34 <FUNCClearMem+0x2e>
			  break;
		}
	}

	MAIN_WaitForJoyRelease();
     b4c:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>

	LCD_puts_f(WaitText);
     b50:	8f e3       	ldi	r24, 0x3F	; 63
     b52:	92 e0       	ldi	r25, 0x02	; 2
     b54:	0e 94 fe 07 	call	0xffc <LCD_puts_f>

	for (uint16_t EAddr = 0; EAddr < Sys_MagicNumber; EAddr++)
     b58:	1a 83       	std	Y+2, r17	; 0x02
     b5a:	09 83       	std	Y+1, r16	; 0x01
     b5c:	80 91 02 01 	lds	r24, 0x0102
     b60:	90 91 03 01 	lds	r25, 0x0103
     b64:	08 17       	cp	r16, r24
     b66:	19 07       	cpc	r17, r25
     b68:	88 f4       	brcc	.+34     	; 0xb8c <FUNCClearMem+0x86>
	  eeprom_write_byte_169(&EAddr, 0xFF);
     b6a:	6f ef       	ldi	r22, 0xFF	; 255
     b6c:	ce 01       	movw	r24, r28
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	9a 81       	ldd	r25, Y+2	; 0x02
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9a 83       	std	Y+2, r25	; 0x02
     b7c:	89 83       	std	Y+1, r24	; 0x01
     b7e:	20 91 02 01 	lds	r18, 0x0102
     b82:	30 91 03 01 	lds	r19, 0x0103
     b86:	82 17       	cp	r24, r18
     b88:	93 07       	cpc	r25, r19
     b8a:	78 f3       	brcs	.-34     	; 0xb6a <FUNCClearMem+0x64>

	LCD_puts_f(PSTR("MEM CLEARED"));
     b8c:	8a ee       	ldi	r24, 0xEA	; 234
     b8e:	92 e0       	ldi	r25, 0x02	; 2
     b90:	0e 94 fe 07 	call	0xffc <LCD_puts_f>
	MAIN_Delay10MS(255);
     b94:	8f ef       	ldi	r24, 0xFF	; 255
     b96:	0e 94 2f 02 	call	0x45e <MAIN_Delay10MS>
     b9a:	22 96       	adiw	r28, 0x02	; 2
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	08 95       	ret

00000bb0 <FUNCAutoCalib>:
}

void FUNCAutoCalib(void)
{
	LCD_puts_f(WaitText);
     bb0:	8f e3       	ldi	r24, 0x3F	; 63
     bb2:	92 e0       	ldi	r25, 0x02	; 2
     bb4:	0e 94 fe 07 	call	0xffc <LCD_puts_f>
	OSCCAL_Calibrate();
     bb8:	0e 94 3a 07 	call	0xe74 <OSCCAL_Calibrate>
     bbc:	08 95       	ret

00000bbe <FUNCManCalib>:
}

void FUNCManCalib(void)
{
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	29 97       	sbiw	r28, 0x09	; 9
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[9];

	JoyStatus = 1;                           // Invalid value to force the LCD to update
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	8e bb       	out	0x1e, r24	; 30
	
	USART_ENABLE(USART_TX_ON, USART_RX_OFF);
     bd6:	80 91 c1 00 	lds	r24, 0x00C1
     bda:	80 78       	andi	r24, 0x80	; 128
     bdc:	88 60       	ori	r24, 0x08	; 8
     bde:	80 93 c1 00 	sts	0x00C1, r24

	while (1)
	{
		if (BuffElements)                    // Routine will also echo send chars (directly accesses the ringbuffer count var)
     be2:	80 91 d1 02 	lds	r24, 0x02D1
     be6:	88 23       	and	r24, r24
     be8:	21 f0       	breq	.+8      	; 0xbf2 <FUNCManCalib+0x34>
		   USART_Tx(BUFF_GetBuffByte());
     bea:	0e 94 a4 0b 	call	0x1748 <BUFF_GetBuffByte>
     bee:	0e 94 ee 08 	call	0x11dc <USART_Tx>
	
		if (JoyStatus)
     bf2:	8e b3       	in	r24, 0x1e	; 30
     bf4:	88 23       	and	r24, r24
     bf6:	a9 f3       	breq	.-22     	; 0xbe2 <FUNCManCalib+0x24>
		{
			if (JoyStatus & JOY_UP)
     bf8:	f6 9b       	sbis	0x1e, 6	; 30
     bfa:	04 c0       	rjmp	.+8      	; 0xc04 <FUNCManCalib+0x46>
			  OSCCAL++;
     bfc:	80 91 66 00 	lds	r24, 0x0066
     c00:	8f 5f       	subi	r24, 0xFF	; 255
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <FUNCManCalib+0x50>
			else if (JoyStatus & JOY_DOWN)
     c04:	f7 9b       	sbis	0x1e, 7	; 30
     c06:	06 c0       	rjmp	.+12     	; 0xc14 <FUNCManCalib+0x56>
			  OSCCAL--;
     c08:	80 91 66 00 	lds	r24, 0x0066
     c0c:	81 50       	subi	r24, 0x01	; 1
     c0e:	80 93 66 00 	sts	0x0066, r24
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <FUNCManCalib+0x5a>
			else if (JoyStatus & JOY_LEFT)
     c14:	f2 99       	sbic	0x1e, 2	; 30
     c16:	1f c0       	rjmp	.+62     	; 0xc56 <FUNCManCalib+0x98>
			  break;
					
			// Copy the programmer name out of memory and transmit it via the USART:
			strcpy_P(Buffer, ProgrammerName);
     c18:	66 e3       	ldi	r22, 0x36	; 54
     c1a:	72 e0       	ldi	r23, 0x02	; 2
     c1c:	ce 01       	movw	r24, r28
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	0e 94 30 1b 	call	0x3660 <strcpy_P>
			USART_TxString(Buffer);
     c24:	ce 01       	movw	r24, r28
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	0e 94 f6 08 	call	0x11ec <USART_TxString>

			Buffer[0] = 'C';
     c2c:	83 e4       	ldi	r24, 0x43	; 67
     c2e:	89 83       	std	Y+1, r24	; 0x01
			Buffer[1] = 'V';
     c30:	86 e5       	ldi	r24, 0x56	; 86
     c32:	8a 83       	std	Y+2, r24	; 0x02
			Buffer[2] = ' ';
     c34:	80 e2       	ldi	r24, 0x20	; 32
     c36:	8b 83       	std	Y+3, r24	; 0x03

			MAIN_IntToStr(OSCCAL, &Buffer[3]);
     c38:	80 91 66 00 	lds	r24, 0x0066
     c3c:	be 01       	movw	r22, r28
     c3e:	6c 5f       	subi	r22, 0xFC	; 252
     c40:	7f 4f       	sbci	r23, 0xFF	; 255
     c42:	99 27       	eor	r25, r25
     c44:	0e 94 36 03 	call	0x66c <MAIN_IntToStr>
			LCD_puts(Buffer);
     c48:	ce 01       	movw	r24, r28
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	0e 94 bd 07 	call	0xf7a <LCD_puts>

			MAIN_WaitForJoyRelease();
     c50:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     c54:	c6 cf       	rjmp	.-116    	; 0xbe2 <FUNCManCalib+0x24>
		}
	}
	
	USART_ENABLE(USART_TX_OFF, USART_RX_OFF);
     c56:	80 91 c1 00 	lds	r24, 0x00C1
     c5a:	80 78       	andi	r24, 0x80	; 128
     c5c:	80 93 c1 00 	sts	0x00C1, r24
     c60:	29 96       	adiw	r28, 0x09	; 9
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <FUNCSetContrast>:
}

void FUNCSetContrast(void)
{
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	26 97       	sbiw	r28, 0x06	; 6
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[6];
	uint8_t Contrast = (eeprom_read_byte_169(&Sys_LCDContrast) & 0x0F); // Ranges from 0-15 so mask retuns 15 on blank EEPROM (0xFF)
     c88:	84 e0       	ldi	r24, 0x04	; 4
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
     c90:	18 2f       	mov	r17, r24
     c92:	1f 70       	andi	r17, 0x0F	; 15
	
	JoyStatus = 1;                          // Invalid value to force the LCD to update
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)
     c98:	8e b3       	in	r24, 0x1e	; 30
     c9a:	88 23       	and	r24, r24
     c9c:	e9 f3       	breq	.-6      	; 0xc98 <FUNCSetContrast+0x26>
		{
			if (JoyStatus & JOY_UP)
     c9e:	f6 9b       	sbis	0x1e, 6	; 30
     ca0:	04 c0       	rjmp	.+8      	; 0xcaa <FUNCSetContrast+0x38>
			{
				if (Contrast < 15)
     ca2:	1f 30       	cpi	r17, 0x0F	; 15
     ca4:	80 f4       	brcc	.+32     	; 0xcc6 <FUNCSetContrast+0x54>
				  Contrast++;
     ca6:	1f 5f       	subi	r17, 0xFF	; 255
     ca8:	0e c0       	rjmp	.+28     	; 0xcc6 <FUNCSetContrast+0x54>
			}
			else if (JoyStatus & JOY_DOWN)
     caa:	f7 9b       	sbis	0x1e, 7	; 30
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <FUNCSetContrast+0x44>
			{
				if (Contrast > 1)          // Zero is non-visible, so 1 is the minimum
     cae:	12 30       	cpi	r17, 0x02	; 2
     cb0:	50 f0       	brcs	.+20     	; 0xcc6 <FUNCSetContrast+0x54>
				  Contrast--;
     cb2:	11 50       	subi	r17, 0x01	; 1
     cb4:	08 c0       	rjmp	.+16     	; 0xcc6 <FUNCSetContrast+0x54>
			}
			else if (JoyStatus & JOY_LEFT)
     cb6:	f2 9b       	sbis	0x1e, 2	; 30
     cb8:	06 c0       	rjmp	.+12     	; 0xcc6 <FUNCSetContrast+0x54>
			{
				eeprom_write_byte_169(&Sys_LCDContrast, Contrast);
     cba:	61 2f       	mov	r22, r17
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
				return;
     cc4:	18 c0       	rjmp	.+48     	; 0xcf6 <FUNCSetContrast+0x84>
			}
					
			Buffer[0] = 'C';
     cc6:	83 e4       	ldi	r24, 0x43	; 67
     cc8:	89 83       	std	Y+1, r24	; 0x01
			Buffer[1] = 'T';
     cca:	84 e5       	ldi	r24, 0x54	; 84
     ccc:	8a 83       	std	Y+2, r24	; 0x02
			Buffer[2] = ' ';
     cce:	80 e2       	ldi	r24, 0x20	; 32
     cd0:	8b 83       	std	Y+3, r24	; 0x03

			MAIN_IntToStr((uint16_t)Contrast, &Buffer[3]);
     cd2:	be 01       	movw	r22, r28
     cd4:	6c 5f       	subi	r22, 0xFC	; 252
     cd6:	7f 4f       	sbci	r23, 0xFF	; 255
     cd8:	81 2f       	mov	r24, r17
     cda:	99 27       	eor	r25, r25
     cdc:	0e 94 36 03 	call	0x66c <MAIN_IntToStr>
			LCD_puts(Buffer);
     ce0:	ce 01       	movw	r24, r28
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	0e 94 bd 07 	call	0xf7a <LCD_puts>

			LCD_CONTRAST_LEVEL(Contrast);
     ce8:	81 2f       	mov	r24, r17
     cea:	8f 70       	andi	r24, 0x0F	; 15
     cec:	80 93 e7 00 	sts	0x00E7, r24

			MAIN_WaitForJoyRelease();
     cf0:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     cf4:	d1 cf       	rjmp	.-94     	; 0xc98 <FUNCSetContrast+0x26>
     cf6:	26 96       	adiw	r28, 0x06	; 6
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	08 95       	ret

00000d0a <FUNCSetISPSpeed>:
		}
	}
}

void FUNCSetISPSpeed(void)
{
     d0a:	cf 93       	push	r28
	JoyStatus = 1;                         // Invalid value to force the LCD to update
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	8e bb       	out	0x1e, r24	; 30

	uint8_t CurrSpeed = eeprom_read_byte_169(&Param_SCKDuration);
     d10:	80 e2       	ldi	r24, 0x20	; 32
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
     d18:	c8 2f       	mov	r28, r24

	if (CurrSpeed > (USI_PRESET_SPEEDS - 1)) CurrSpeed = 0; // Protection against blank EEPROM
     d1a:	84 30       	cpi	r24, 0x04	; 4
     d1c:	08 f0       	brcs	.+2      	; 0xd20 <FUNCSetISPSpeed+0x16>
     d1e:	c0 e0       	ldi	r28, 0x00	; 0

	while (1)
	{
		if (JoyStatus)
     d20:	8e b3       	in	r24, 0x1e	; 30
     d22:	88 23       	and	r24, r24
     d24:	e9 f3       	breq	.-6      	; 0xd20 <FUNCSetISPSpeed+0x16>
		{
			if (JoyStatus & JOY_UP)
     d26:	f6 9b       	sbis	0x1e, 6	; 30
     d28:	06 c0       	rjmp	.+12     	; 0xd36 <FUNCSetISPSpeed+0x2c>
			{
				(CurrSpeed == 0)? CurrSpeed = (USI_PRESET_SPEEDS - 1) : CurrSpeed--;
     d2a:	cc 23       	and	r28, r28
     d2c:	11 f4       	brne	.+4      	; 0xd32 <FUNCSetISPSpeed+0x28>
     d2e:	c3 e0       	ldi	r28, 0x03	; 3
     d30:	12 c0       	rjmp	.+36     	; 0xd56 <FUNCSetISPSpeed+0x4c>
     d32:	c1 50       	subi	r28, 0x01	; 1
     d34:	10 c0       	rjmp	.+32     	; 0xd56 <FUNCSetISPSpeed+0x4c>
			}
			else if (JoyStatus & JOY_DOWN)
     d36:	f7 9b       	sbis	0x1e, 7	; 30
     d38:	06 c0       	rjmp	.+12     	; 0xd46 <FUNCSetISPSpeed+0x3c>
			{
				(CurrSpeed == (USI_PRESET_SPEEDS - 1))? CurrSpeed = 0 : CurrSpeed++;
     d3a:	c3 30       	cpi	r28, 0x03	; 3
     d3c:	11 f4       	brne	.+4      	; 0xd42 <FUNCSetISPSpeed+0x38>
     d3e:	c0 e0       	ldi	r28, 0x00	; 0
     d40:	0a c0       	rjmp	.+20     	; 0xd56 <FUNCSetISPSpeed+0x4c>
     d42:	cf 5f       	subi	r28, 0xFF	; 255
     d44:	08 c0       	rjmp	.+16     	; 0xd56 <FUNCSetISPSpeed+0x4c>
			}
			else if (JoyStatus & JOY_LEFT)
     d46:	f2 9b       	sbis	0x1e, 2	; 30
     d48:	06 c0       	rjmp	.+12     	; 0xd56 <FUNCSetISPSpeed+0x4c>
			{
				eeprom_write_byte_169(&Param_SCKDuration, CurrSpeed);
     d4a:	6c 2f       	mov	r22, r28
     d4c:	80 e2       	ldi	r24, 0x20	; 32
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
				return;
     d54:	0d c0       	rjmp	.+26     	; 0xd70 <FUNCSetISPSpeed+0x66>
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&USIPSNamePtrs[CurrSpeed]));
     d56:	ec 2f       	mov	r30, r28
     d58:	ff 27       	eor	r31, r31
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	e3 58       	subi	r30, 0x83	; 131
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	85 91       	lpm	r24, Z+
     d64:	94 91       	lpm	r25, Z
     d66:	0e 94 fe 07 	call	0xffc <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     d6a:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     d6e:	d8 cf       	rjmp	.-80     	; 0xd20 <FUNCSetISPSpeed+0x16>
     d70:	cf 91       	pop	r28
     d72:	08 95       	ret

00000d74 <FUNCSleepMode>:
		}
	}
}

void FUNCSleepMode(void)
{
	SMCR    = ((1 << SM1) | (1 << SE));   // Power down sleep mode
     d74:	85 e0       	ldi	r24, 0x05	; 5
     d76:	83 bf       	out	0x33, r24	; 51
	LCDCRA &= ~(1 << LCDEN); 
     d78:	80 91 e4 00 	lds	r24, 0x00E4
     d7c:	8f 77       	andi	r24, 0x7F	; 127
     d7e:	80 93 e4 00 	sts	0x00E4, r24
	
	while (!(JoyStatus & JOY_UP))        // Joystick interrupt wakes the micro
	  SLEEP();
     d82:	f6 99       	sbic	0x1e, 6	; 30
     d84:	03 c0       	rjmp	.+6      	; 0xd8c <FUNCSleepMode+0x18>
     d86:	88 95       	sleep
     d88:	f6 9b       	sbis	0x1e, 6	; 30
     d8a:	fd cf       	rjmp	.-6      	; 0xd86 <FUNCSleepMode+0x12>
	   
	LCDCRA |= (1 << LCDEN);
     d8c:	80 91 e4 00 	lds	r24, 0x00E4
     d90:	80 68       	ori	r24, 0x80	; 128
     d92:	80 93 e4 00 	sts	0x00E4, r24

	LCD_puts_f(WaitText);
     d96:	8f e3       	ldi	r24, 0x3F	; 63
     d98:	92 e0       	ldi	r25, 0x02	; 2
     d9a:	0e 94 fe 07 	call	0xffc <LCD_puts_f>
	OSCCAL_Calibrate();	
     d9e:	0e 94 3a 07 	call	0xe74 <OSCCAL_Calibrate>
	
	MAIN_WaitForJoyRelease();
     da2:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     da6:	08 95       	ret

00000da8 <FUNCStorageInfo>:
}

void FUNCStorageInfo(void)
{
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
	uint8_t SelectedItem = 0;
     dac:	10 e0       	ldi	r17, 0x00	; 0

	MAIN_WaitForJoyRelease();
     dae:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>

	JoyStatus = 1;                         // Invalid value to force the LCD to update
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     db6:	8e b3       	in	r24, 0x1e	; 30
     db8:	88 23       	and	r24, r24
     dba:	e9 f3       	breq	.-6      	; 0xdb6 <FUNCStorageInfo+0xe>
		{
			if (JoyStatus & (JOY_UP | JOY_DOWN))
     dbc:	ce b3       	in	r28, 0x1e	; 30
     dbe:	c0 7c       	andi	r28, 0xC0	; 192
     dc0:	19 f0       	breq	.+6      	; 0xdc8 <FUNCStorageInfo+0x20>
			{
				SelectedItem ^= 1;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	18 27       	eor	r17, r24
     dc6:	38 c0       	rjmp	.+112    	; 0xe38 <FUNCStorageInfo+0x90>
			}
			else if (JoyStatus & JOY_LEFT)
     dc8:	f2 99       	sbic	0x1e, 2	; 30
     dca:	43 c0       	rjmp	.+134    	; 0xe52 <FUNCStorageInfo+0xaa>
			{
				return;
			}
			else if (JoyStatus & JOY_PRESS)
     dcc:	f4 9b       	sbis	0x1e, 4	; 30
     dce:	34 c0       	rjmp	.+104    	; 0xe38 <FUNCStorageInfo+0x90>
			{
				if (SelectedItem == 1)    // View storage tags
     dd0:	11 30       	cpi	r17, 0x01	; 1
     dd2:	81 f5       	brne	.+96     	; 0xe34 <FUNCStorageInfo+0x8c>
				{
					DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     dd4:	81 e4       	ldi	r24, 0x41	; 65
     dd6:	99 e0       	ldi	r25, 0x09	; 9
     dd8:	90 93 01 01 	sts	0x0101, r25
     ddc:	80 93 00 01 	sts	0x0100, r24
					SPI_SPIInit();
     de0:	0e 94 37 09 	call	0x126e <SPI_SPIInit>
					UseExernalDF = FALSE;
     de4:	c0 93 83 02 	sts	0x0283, r28
					DF_EnableDataflash(TRUE);
     de8:	81 2f       	mov	r24, r17
     dea:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>

					if (DF_CheckCorrectOnboardChip())
     dee:	0e 94 59 0b 	call	0x16b2 <DF_CheckCorrectOnboardChip>
     df2:	c8 2f       	mov	r28, r24
     df4:	88 23       	and	r24, r24
     df6:	41 f0       	breq	.+16     	; 0xe08 <FUNCStorageInfo+0x60>
					{
						TM_ShowTags();
     df8:	0e 94 02 1b 	call	0x3604 <TM_ShowTags>
						SPI_SPIOFF();
     dfc:	80 91 64 00 	lds	r24, 0x0064
     e00:	84 60       	ori	r24, 0x04	; 4
     e02:	80 93 64 00 	sts	0x0064, r24
     e06:	18 c0       	rjmp	.+48     	; 0xe38 <FUNCStorageInfo+0x90>
					}
					else if (!(PM_GetStoredDataSize(TYPE_FLASH)))
     e08:	81 2f       	mov	r24, r17
     e0a:	0e 94 6f 13 	call	0x26de <PM_GetStoredDataSize>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	a1 05       	cpc	r26, r1
     e16:	b1 05       	cpc	r27, r1
     e18:	79 f4       	brne	.+30     	; 0xe38 <FUNCStorageInfo+0x90>
					{
						DF_EnableDataflash(FALSE);
     e1a:	8c 2f       	mov	r24, r28
     e1c:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
						SPI_SPIOFF();
     e20:	80 91 64 00 	lds	r24, 0x0064
     e24:	84 60       	ori	r24, 0x04	; 4
     e26:	80 93 64 00 	sts	0x0064, r24

						MAIN_ShowError(PSTR("NO STORED PRGM"));
     e2a:	86 ef       	ldi	r24, 0xF6	; 246
     e2c:	92 e0       	ldi	r25, 0x02	; 2
     e2e:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <FUNCStorageInfo+0x90>
					}	
				}
				else                  // View stored data sizes
				{
					PM_ShowStoredItemSizes();
     e34:	0e 94 de 19 	call	0x33bc <PM_ShowStoredItemSizes>
				}
			}
			
			LCD_puts_f((uint8_t*)pgm_read_word(&SIFOOptionPtrs[SelectedItem]));
     e38:	e1 2f       	mov	r30, r17
     e3a:	ff 27       	eor	r31, r31
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	e4 5a       	subi	r30, 0xA4	; 164
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	85 91       	lpm	r24, Z+
     e46:	94 91       	lpm	r25, Z
     e48:	0e 94 fe 07 	call	0xffc <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     e4c:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     e50:	b2 cf       	rjmp	.-156    	; 0xdb6 <FUNCStorageInfo+0xe>
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <FUNCGoBootloader>:
		}
	}
}

void FUNCGoBootloader(void)
{
	uint8_t MD = (MCUCR & ~(1 << JTD)); // Forces compiler to use IN, AND plus two OUTs rather than two lots of IN/AND/OUTs
     e58:	85 b7       	in	r24, 0x35	; 53
     e5a:	8f 77       	andi	r24, 0x7F	; 127
	MCUCR = MD;  // Turn on JTAG via code
     e5c:	85 bf       	out	0x35, r24	; 53
	MCUCR = MD;  // Twice as specified in datasheet        
     e5e:	85 bf       	out	0x35, r24	; 53
	
	LCD_puts_f(PSTR("*JTAG ON*"));
     e60:	85 e0       	ldi	r24, 0x05	; 5
     e62:	93 e0       	ldi	r25, 0x03	; 3
     e64:	0e 94 fe 07 	call	0xffc <LCD_puts_f>
	
	MAIN_WaitForJoyRelease();
     e68:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
	
	WDTCR = ((1<<WDCE) | (1<<WDE)); // Enable Watchdog Timer to give reset after minimum timeout
     e6c:	88 e1       	ldi	r24, 0x18	; 24
     e6e:	80 93 60 00 	sts	0x0060, r24
	while (1) {};                  // Eternal loop - when watchdog resets the AVR it will enter the bootloader
     e72:	ff cf       	rjmp	.-2      	; 0xe72 <FUNCGoBootloader+0x1a>

00000e74 <OSCCAL_Calibrate>:

void OSCCAL_Calibrate(void)
{
	uint8_t SREG_Backup;
	uint8_t LoopCount = (0x7F / 2); // Maximum range is 128, and starts from the middle, so 64 is the max number of iterations required
     e74:	2f e3       	ldi	r18, 0x3F	; 63
   
	// Make sure all clock division is turned off (8Mhz RC clock)
	CLKPR = (1 << CLKPCE);
     e76:	80 e8       	ldi	r24, 0x80	; 128
     e78:	80 93 61 00 	sts	0x0061, r24
	CLKPR = 0;
     e7c:	10 92 61 00 	sts	0x0061, r1

	// Inital OSCCAL of half its maximum for speed
	OSCCAL = (0x7F / 2);
     e80:	20 93 66 00 	sts	0x0066, r18

	// Save the SREG
	SREG_Backup = SREG;
     e84:	3f b7       	in	r19, 0x3f	; 63
    
	// Disable all timer 1 interrupts
	TIMSK1 = 0;
     e86:	10 92 6f 00 	sts	0x006F, r1
        
	// Set timer 2 to asyncronous mode (32.768KHz crystal)
	ASSR   = (1 << AS2);
     e8a:	88 e0       	ldi	r24, 0x08	; 8
     e8c:	80 93 b6 00 	sts	0x00B6, r24
        
	// Timer 2 overflow interrupt enable
	TIMSK2 = (1 << TOIE2);
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	80 93 70 00 	sts	0x0070, r24

	// Enable interrupts
	sei();
     e96:	78 94       	sei

	// Start both counters with no prescaling
	TCCR1B = (1 << CS10);
     e98:	80 93 81 00 	sts	0x0081, r24
	TCCR2A = (1 << CS20);
     e9c:	80 93 b0 00 	sts	0x00B0, r24
	 	 
	// Wait until timer 2's external 32.768KHz crystal is stable
	while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB) | (1 << OCR2UB)));
     ea0:	80 91 b6 00 	lds	r24, 0x00B6
     ea4:	99 27       	eor	r25, r25
     ea6:	87 70       	andi	r24, 0x07	; 7
     ea8:	90 70       	andi	r25, 0x00	; 0
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	c9 f7       	brne	.-14     	; 0xea0 <OSCCAL_Calibrate+0x2c>
    
	// Clear the timer values
	TCNT1  = 0;
     eae:	90 93 85 00 	sts	0x0085, r25
     eb2:	80 93 84 00 	sts	0x0084, r24
	TCNT2  = 0;
     eb6:	10 92 b2 00 	sts	0x00B2, r1
    
	while (LoopCount--)
	{
		// Let it take a few readings (60ms, approx 7 readings)
		_delay_ms(60);
        
		if (ActualCount > (TARGETCOUNT + 5))		    // Clock is running too fast
			OSCCAL--;
		else if (ActualCount < (TARGETCOUNT - 5))		// Clock is running too slow
			OSCCAL++;
		else		                                    // Clock is just right
			break;
     eba:	2e e3       	ldi	r18, 0x3E	; 62
     ebc:	fc 01       	movw	r30, r24
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ebe:	cf 01       	movw	r24, r30
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <OSCCAL_Calibrate+0x4c>
     ec4:	80 91 26 01 	lds	r24, 0x0126
     ec8:	90 91 27 01 	lds	r25, 0x0127
     ecc:	81 50       	subi	r24, 0x01	; 1
     ece:	91 4e       	sbci	r25, 0xE1	; 225
     ed0:	20 f0       	brcs	.+8      	; 0xeda <OSCCAL_Calibrate+0x66>
     ed2:	80 91 66 00 	lds	r24, 0x0066
     ed6:	81 50       	subi	r24, 0x01	; 1
     ed8:	0a c0       	rjmp	.+20     	; 0xeee <OSCCAL_Calibrate+0x7a>
     eda:	80 91 26 01 	lds	r24, 0x0126
     ede:	90 91 27 01 	lds	r25, 0x0127
     ee2:	86 5f       	subi	r24, 0xF6	; 246
     ee4:	90 4e       	sbci	r25, 0xE0	; 224
     ee6:	38 f4       	brcc	.+14     	; 0xef6 <OSCCAL_Calibrate+0x82>
     ee8:	80 91 66 00 	lds	r24, 0x0066
     eec:	8f 5f       	subi	r24, 0xFF	; 255
     eee:	80 93 66 00 	sts	0x0066, r24
     ef2:	21 50       	subi	r18, 0x01	; 1
     ef4:	20 f7       	brcc	.-56     	; 0xebe <OSCCAL_Calibrate+0x4a>
	}
            
	// Disable all timer interrupts
	TIMSK1 = 0;
     ef6:	10 92 6f 00 	sts	0x006F, r1
	TIMSK2 = 0;
     efa:	10 92 70 00 	sts	0x0070, r1
    
	// Stop the timers
	TCCR1B = 0x00;
     efe:	10 92 81 00 	sts	0x0081, r1
	TCCR2A = 0x00;
     f02:	10 92 b0 00 	sts	0x00B0, r1

	// Turn off timer 2 asynchronous mode
	ASSR  &= ~(1 << AS2);
     f06:	80 91 b6 00 	lds	r24, 0x00B6
     f0a:	87 7f       	andi	r24, 0xF7	; 247
     f0c:	80 93 b6 00 	sts	0x00B6, r24

	// Restore SREG
	SREG = SREG_Backup;
     f10:	3f bf       	out	0x3f, r19	; 63
     f12:	08 95       	ret

00000f14 <__vector_5>:
        
	return;
}

ISR(TIMER2_OVF_vect, ISR_BLOCK) // Occurs 32768/256 timers per second, or 128Hz
{
     f14:	1f 92       	push	r1
     f16:	0f 92       	push	r0
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	0f 92       	push	r0
     f1c:	11 24       	eor	r1, r1
     f1e:	8f 93       	push	r24
     f20:	9f 93       	push	r25
	// Stop timer 1 so it can be read
	TCCR1B = 0x00;
     f22:	10 92 81 00 	sts	0x0081, r1
    
	// Record timer 1's value
	ActualCount = TCNT1;
     f26:	80 91 84 00 	lds	r24, 0x0084
     f2a:	90 91 85 00 	lds	r25, 0x0085
     f2e:	90 93 27 01 	sts	0x0127, r25
     f32:	80 93 26 01 	sts	0x0126, r24
	     
	// Reset counters and restart timer 1
	TCNT1  = 0;
     f36:	10 92 85 00 	sts	0x0085, r1
     f3a:	10 92 84 00 	sts	0x0084, r1
	TCNT2  = 0;
     f3e:	10 92 b2 00 	sts	0x00B2, r1
	TCCR1B = (1 << CS10);
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	80 93 81 00 	sts	0x0081, r24
     f48:	9f 91       	pop	r25
     f4a:	8f 91       	pop	r24
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	0f 90       	pop	r0
     f52:	1f 90       	pop	r1
     f54:	18 95       	reti

00000f56 <LCD_Init>:
// ======================================================================================

void LCD_Init(void)
{
	LCDCCR = 0x0F;
     f56:	8f e0       	ldi	r24, 0x0F	; 15
     f58:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all segment pins.
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
     f5c:	87 eb       	ldi	r24, 0xB7	; 183
     f5e:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32,0 Hz
    LCDFRR  = (0<<LCDPS0) | (7<<LCDCD0);    
     f62:	87 e0       	ldi	r24, 0x07	; 7
     f64:	80 93 e6 00 	sts	0x00E6, r24

	// Enable LCD and set low power waveform
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB); 
     f68:	80 ec       	ldi	r24, 0xC0	; 192
     f6a:	80 93 e4 00 	sts	0x00E4, r24

    //Enable LCD start of frame interrupt
    LCDCRA |= (1<<LCDIE);
     f6e:	80 91 e4 00 	lds	r24, 0x00E4
     f72:	88 60       	ori	r24, 0x08	; 8
     f74:	80 93 e4 00 	sts	0x00E4, r24
     f78:	08 95       	ret

00000f7a <LCD_puts>:
}

void LCD_puts_f(const uint8_t *FlashData)
{
	uint8_t StrBuff[LCD_TEXTBUFFER_SIZE];

	strcpy_P(StrBuff, FlashData);
	LCD_puts(StrBuff);
}

void LCD_puts(uint8_t *Data)
{
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	ec 01       	movw	r28, r24
	uint8_t LoadB;
	
	for (LoadB = 0; LoadB < 20; LoadB++)
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	3f ef       	ldi	r19, 0xFF	; 255
     f84:	ef e4       	ldi	r30, 0x4F	; 79
     f86:	f2 e0       	ldi	r31, 0x02	; 2
     f88:	df 01       	movw	r26, r30
	{
		uint8_t CByte = *(Data++);
     f8a:	89 91       	ld	r24, Y+
	
		if ((CByte >= '*') && (CByte <= 'z'))
     f8c:	98 2f       	mov	r25, r24
     f8e:	9a 52       	subi	r25, 0x2A	; 42
     f90:	91 35       	cpi	r25, 0x51	; 81
     f92:	38 f4       	brcc	.+14     	; 0xfa2 <LCD_puts+0x28>
		  TextBuffer[LoadB] = ((CByte == ' ')? 0xFF : (CByte - '*'));
     f94:	80 32       	cpi	r24, 0x20	; 32
     f96:	11 f0       	breq	.+4      	; 0xf9c <LCD_puts+0x22>
     f98:	89 2f       	mov	r24, r25
     f9a:	01 c0       	rjmp	.+2      	; 0xf9e <LCD_puts+0x24>
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	8c 93       	st	X, r24
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <LCD_puts+0x2e>
		else if (CByte == 0x00)
     fa2:	88 23       	and	r24, r24
     fa4:	31 f0       	breq	.+12     	; 0xfb2 <LCD_puts+0x38>
		  break;
		else
		  TextBuffer[LoadB] = 0xFF;		
     fa6:	30 83       	st	Z, r19
     fa8:	2f 5f       	subi	r18, 0xFF	; 255
     faa:	11 96       	adiw	r26, 0x01	; 1
     fac:	31 96       	adiw	r30, 0x01	; 1
     fae:	24 31       	cpi	r18, 0x14	; 20
     fb0:	60 f3       	brcs	.-40     	; 0xf8a <LCD_puts+0x10>
	}

	ScrollMode  = ((LoadB > 6)? TRUE : FALSE);
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	27 30       	cpi	r18, 0x07	; 7
     fb6:	08 f0       	brcs	.+2      	; 0xfba <LCD_puts+0x40>
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 7f 02 	sts	0x027F, r24
	ScrollCount = 0;
     fbe:	10 92 4d 02 	sts	0x024D, r1
     fc2:	9f ef       	ldi	r25, 0xFF	; 255
     fc4:	86 e0       	ldi	r24, 0x06	; 6

	for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
		TextBuffer[LoadB++] = 0xFF;
     fc6:	e2 2f       	mov	r30, r18
     fc8:	ff 27       	eor	r31, r31
     fca:	e1 5b       	subi	r30, 0xB1	; 177
     fcc:	fd 4f       	sbci	r31, 0xFD	; 253
     fce:	90 83       	st	Z, r25
     fd0:	2f 5f       	subi	r18, 0xFF	; 255
     fd2:	81 50       	subi	r24, 0x01	; 1
     fd4:	87 ff       	sbrs	r24, 7
     fd6:	f7 cf       	rjmp	.-18     	; 0xfc6 <LCD_puts+0x4c>
	
	TextBuffer[LoadB] = 0x00;
     fd8:	e2 2f       	mov	r30, r18
     fda:	ff 27       	eor	r31, r31
     fdc:	e1 5b       	subi	r30, 0xB1	; 177
     fde:	fd 4f       	sbci	r31, 0xFD	; 253
     fe0:	10 82       	st	Z, r1
	StrStart   = 0;
     fe2:	10 92 4e 02 	sts	0x024E, r1
	StrEnd     = LoadB;	
     fe6:	20 93 4c 02 	sts	0x024C, r18
	DelayCount = LCD_DELAYCOUNT_DEFAULT;
     fea:	8a e0       	ldi	r24, 0x0A	; 10
     fec:	80 93 80 02 	sts	0x0280, r24

	UpdateLCD  = TRUE;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	80 93 6a 02 	sts	0x026A, r24
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <LCD_puts_f>:
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	64 97       	sbiw	r28, 0x14	; 20
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	bc 01       	movw	r22, r24
    1012:	ce 01       	movw	r24, r28
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	0e 94 30 1b 	call	0x3660 <strcpy_P>
    101a:	ce 01       	movw	r24, r28
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	0e 94 bd 07 	call	0xf7a <LCD_puts>
    1022:	64 96       	adiw	r28, 0x14	; 20
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <LCD_WriteChar>:
}

void LCD_WriteChar(uint8_t Byte, uint8_t Digit)
{
    1034:	e8 2f       	mov	r30, r24
	uint16_t SegData  = 0x00;
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1));
    103a:	86 2f       	mov	r24, r22
    103c:	86 95       	lsr	r24
    103e:	a8 2f       	mov	r26, r24
    1040:	bb 27       	eor	r27, r27
    1042:	a5 59       	subi	r26, 0x95	; 149
    1044:	bd 4f       	sbci	r27, 0xFD	; 253

	if (Byte != 0xFF)
    1046:	ef 3f       	cpi	r30, 0xFF	; 255
    1048:	39 f0       	breq	.+14     	; 0x1058 <LCD_WriteChar+0x24>
	  SegData = pgm_read_word(&LCD_SegTable[Byte]);	
    104a:	ff 27       	eor	r31, r31
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	e1 5f       	subi	r30, 0xF1	; 241
    1052:	fc 4f       	sbci	r31, 0xFC	; 252
    1054:	25 91       	lpm	r18, Z+
    1056:	34 91       	lpm	r19, Z
    1058:	77 27       	eor	r23, r23
    105a:	61 70       	andi	r22, 0x01	; 1
    105c:	70 70       	andi	r23, 0x00	; 0
    105e:	43 e0       	ldi	r20, 0x03	; 3

	for (uint8_t BNib = 0; BNib < 4; BNib++)
	{
		uint8_t Mask          = 0xF0;
    1060:	50 ef       	ldi	r21, 0xF0	; 240
		uint8_t MaskedSegData = (SegData & 0x0000F);
    1062:	92 2f       	mov	r25, r18
    1064:	9f 70       	andi	r25, 0x0F	; 15
	
		if (Digit & 0x01)
    1066:	61 15       	cp	r22, r1
    1068:	71 05       	cpc	r23, r1
    106a:	19 f0       	breq	.+6      	; 0x1072 <LCD_WriteChar+0x3e>
		{
			Mask = 0x0F;
    106c:	5f e0       	ldi	r21, 0x0F	; 15
			MaskedSegData <<= 4;
    106e:	92 95       	swap	r25
    1070:	90 7f       	andi	r25, 0xF0	; 240
		}
		
		*BuffPtr = ((*BuffPtr & Mask) | MaskedSegData);
    1072:	8c 91       	ld	r24, X
    1074:	85 23       	and	r24, r21
    1076:	89 2b       	or	r24, r25
    1078:	8c 93       	st	X, r24

		SegData >>= 4;
    107a:	84 e0       	ldi	r24, 0x04	; 4
    107c:	36 95       	lsr	r19
    107e:	27 95       	ror	r18
    1080:	8a 95       	dec	r24
    1082:	e1 f7       	brne	.-8      	; 0x107c <LCD_WriteChar+0x48>
		BuffPtr  += 5;
    1084:	15 96       	adiw	r26, 0x05	; 5
    1086:	41 50       	subi	r20, 0x01	; 1
    1088:	47 ff       	sbrs	r20, 7
    108a:	ea cf       	rjmp	.-44     	; 0x1060 <LCD_WriteChar+0x2c>
    108c:	08 95       	ret

0000108e <__vector_22>:
	}
}

ISR(LCD_vect, ISR_NOBLOCK)
{
    108e:	78 94       	sei
    1090:	1f 92       	push	r1
    1092:	0f 92       	push	r0
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	0f 92       	push	r0
    1098:	11 24       	eor	r1, r1
    109a:	2f 93       	push	r18
    109c:	3f 93       	push	r19
    109e:	4f 93       	push	r20
    10a0:	5f 93       	push	r21
    10a2:	6f 93       	push	r22
    10a4:	7f 93       	push	r23
    10a6:	8f 93       	push	r24
    10a8:	9f 93       	push	r25
    10aa:	af 93       	push	r26
    10ac:	bf 93       	push	r27
    10ae:	cf 93       	push	r28
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
	if (ScrollMode)
    10b4:	80 91 7f 02 	lds	r24, 0x027F
    10b8:	88 23       	and	r24, r24
    10ba:	99 f0       	breq	.+38     	; 0x10e2 <__vector_22+0x54>
	{
		if (DelayCount)
    10bc:	80 91 80 02 	lds	r24, 0x0280
    10c0:	88 23       	and	r24, r24
    10c2:	21 f0       	breq	.+8      	; 0x10cc <__vector_22+0x3e>
		{
			DelayCount--;
    10c4:	81 50       	subi	r24, 0x01	; 1
    10c6:	80 93 80 02 	sts	0x0280, r24
    10ca:	0b c0       	rjmp	.+22     	; 0x10e2 <__vector_22+0x54>
		}
		else
		{
			if (!(ScrollCount))
    10cc:	80 91 4d 02 	lds	r24, 0x024D
    10d0:	88 23       	and	r24, r24
    10d2:	21 f4       	brne	.+8      	; 0x10dc <__vector_22+0x4e>
			  UpdateLCD = TRUE;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	80 93 6a 02 	sts	0x026A, r24
    10da:	03 c0       	rjmp	.+6      	; 0x10e2 <__vector_22+0x54>
			else
			  ScrollCount--;
    10dc:	81 50       	subi	r24, 0x01	; 1
    10de:	80 93 4d 02 	sts	0x024D, r24
		}
	}

	if (UpdateLCD)
    10e2:	80 91 6a 02 	lds	r24, 0x026A
    10e6:	88 23       	and	r24, r24
    10e8:	39 f1       	breq	.+78     	; 0x1138 <__vector_22+0xaa>
	{
		for (uint8_t Character = 0; Character < 6; Character++)
    10ea:	c0 e0       	ldi	r28, 0x00	; 0
		{
			uint8_t Byte = (StrStart + Character);
    10ec:	80 91 4e 02 	lds	r24, 0x024E
    10f0:	8c 0f       	add	r24, r28

			if (Byte >= StrEnd)
    10f2:	90 91 4c 02 	lds	r25, 0x024C
    10f6:	e8 2f       	mov	r30, r24
    10f8:	ff 27       	eor	r31, r31
    10fa:	89 17       	cp	r24, r25
    10fc:	10 f0       	brcs	.+4      	; 0x1102 <__vector_22+0x74>
			  Byte = TextBuffer[Byte - StrEnd];
    10fe:	e9 1b       	sub	r30, r25
    1100:	f1 09       	sbc	r31, r1
			else
			  Byte = TextBuffer[Byte];
    1102:	e1 5b       	subi	r30, 0xB1	; 177
    1104:	fd 4f       	sbci	r31, 0xFD	; 253
    1106:	80 81       	ld	r24, Z
			
			LCD_WriteChar(Byte, Character);
    1108:	6c 2f       	mov	r22, r28
    110a:	0e 94 1a 08 	call	0x1034 <LCD_WriteChar>
    110e:	cf 5f       	subi	r28, 0xFF	; 255
    1110:	c6 30       	cpi	r28, 0x06	; 6
    1112:	60 f3       	brcs	.-40     	; 0x10ec <__vector_22+0x5e>
		}
		
		if (StrStart++ == StrEnd)
    1114:	80 91 4e 02 	lds	r24, 0x024E
    1118:	98 2f       	mov	r25, r24
    111a:	8f 5f       	subi	r24, 0xFF	; 255
    111c:	80 93 4e 02 	sts	0x024E, r24
    1120:	80 91 4c 02 	lds	r24, 0x024C
    1124:	98 17       	cp	r25, r24
    1126:	19 f4       	brne	.+6      	; 0x112e <__vector_22+0xa0>
		  StrStart = 1;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	80 93 4e 02 	sts	0x024E, r24
		
		ScrollCount = LCD_SCROLLCOUNT_DEFAULT;
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	80 93 4d 02 	sts	0x024D, r24
		UpdateLCD = FALSE;
    1134:	10 92 6a 02 	sts	0x026A, r1
    1138:	ac ee       	ldi	r26, 0xEC	; 236
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	eb e6       	ldi	r30, 0x6B	; 107
    113e:	f2 e0       	ldi	r31, 0x02	; 2
    1140:	93 e1       	ldi	r25, 0x13	; 19
	}

	for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++)
	  *(pLCDREG + LCDChar) = SegBuffer[LCDChar];
    1142:	81 91       	ld	r24, Z+
    1144:	8d 93       	st	X+, r24
    1146:	91 50       	subi	r25, 0x01	; 1
    1148:	97 ff       	sbrs	r25, 7
    114a:	fb cf       	rjmp	.-10     	; 0x1142 <__vector_22+0xb4>
    114c:	ff 91       	pop	r31
    114e:	ef 91       	pop	r30
    1150:	cf 91       	pop	r28
    1152:	bf 91       	pop	r27
    1154:	af 91       	pop	r26
    1156:	9f 91       	pop	r25
    1158:	8f 91       	pop	r24
    115a:	7f 91       	pop	r23
    115c:	6f 91       	pop	r22
    115e:	5f 91       	pop	r21
    1160:	4f 91       	pop	r20
    1162:	3f 91       	pop	r19
    1164:	2f 91       	pop	r18
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	0f 90       	pop	r0
    116c:	1f 90       	pop	r1
    116e:	18 95       	reti

00001170 <eeprom_read_byte_169>:
#include <avr/interrupt.h>
#include "eeprom169.h"

uint8_t eeprom_read_byte_169(const uint16_t *addr)
{
    1170:	fc 01       	movw	r30, r24
	cli();
    1172:	f8 94       	cli
	/* Set up address register */
	EEAR = *addr;
    1174:	80 81       	ld	r24, Z
    1176:	91 81       	ldd	r25, Z+1	; 0x01
    1178:	92 bd       	out	0x22, r25	; 34
    117a:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    117c:	f8 9a       	sbi	0x1f, 0	; 31
	sei();
    117e:	78 94       	sei
	/* Return data from Data Register */
	return EEDR;
    1180:	80 b5       	in	r24, 0x20	; 32
}
    1182:	99 27       	eor	r25, r25
    1184:	08 95       	ret

00001186 <eeprom_write_byte_169>:

void eeprom_write_byte_169(const uint16_t *addr, uint8_t val) 
{
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	ec 01       	movw	r28, r24
    118e:	16 2f       	mov	r17, r22
	if(eeprom_read_byte_169(addr) == val) // Compare stored value with new value for match
    1190:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    1194:	81 17       	cp	r24, r17
    1196:	59 f0       	breq	.+22     	; 0x11ae <eeprom_write_byte_169+0x28>
		return; // Don't re-write the same value and waste EEPROM life

	cli();
    1198:	f8 94       	cli
	/* Set up address and Data Registers */
	EEAR = *addr;
    119a:	88 81       	ld	r24, Y
    119c:	99 81       	ldd	r25, Y+1	; 0x01
    119e:	92 bd       	out	0x22, r25	; 34
    11a0:	81 bd       	out	0x21, r24	; 33
	EEDR = val;
    11a2:	10 bd       	out	0x20, r17	; 32
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
    11a4:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
    11a6:	f9 9a       	sbi	0x1f, 1	; 31
	sei();
    11a8:	78 94       	sei
	/* Wait for completion */
	while(EECR & (1<<EEWE));
    11aa:	f9 99       	sbic	0x1f, 1	; 31
    11ac:	fe cf       	rjmp	.-4      	; 0x11aa <eeprom_write_byte_169+0x24>
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	08 95       	ret

000011b6 <USART_Init>:
*   Purpose :       Initialize the USART
*
*****************************************************************************/
void USART_Init(unsigned int baudrate)
{
    11b6:	9c 01       	movw	r18, r24
    // Set baud rate
    UBRRH = (unsigned char)(baudrate>>8);
    11b8:	83 2f       	mov	r24, r19
    11ba:	99 27       	eor	r25, r25
    11bc:	80 93 c5 00 	sts	0x00C5, r24
    UBRRL = (unsigned char)(baudrate);
    11c0:	20 93 c4 00 	sts	0x00C4, r18

    // Double speed
	UCSRA = (USART_DOUBLESPEED << U2X);
    11c4:	82 e0       	ldi	r24, 0x02	; 2
    11c6:	80 93 c0 00 	sts	0x00C0, r24

    // Enable recieve complete interrupt
	UCSRB = (1 << RXCIE);
    11ca:	80 e8       	ldi	r24, 0x80	; 128
    11cc:	80 93 c1 00 	sts	0x00C1, r24
	 
    // Async. mode, 8N1
    UCSRC = (3 << UCSZ0);
    11d0:	86 e0       	ldi	r24, 0x06	; 6
    11d2:	80 93 c2 00 	sts	0x00C2, r24
	 
	 // Initalise ringbuffer
	BUFF_InitialiseBuffer();
    11d6:	0e 94 6e 0b 	call	0x16dc <BUFF_InitialiseBuffer>
    11da:	08 95       	ret

000011dc <USART_Tx>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_Tx(char data)
{
    11dc:	98 2f       	mov	r25, r24
    while (!(UCSRA & (1<<UDRE)));
    11de:	80 91 c0 00 	lds	r24, 0x00C0
    11e2:	85 ff       	sbrs	r24, 5
    11e4:	fc cf       	rjmp	.-8      	; 0x11de <USART_Tx+0x2>
    UDR = data;
    11e6:	90 93 c6 00 	sts	0x00C6, r25
    11ea:	08 95       	ret

000011ec <USART_TxString>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_TxString(char *data)
{
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	ec 01       	movw	r28, r24
	while (*data != '\0')
		USART_Tx(*data++);
    11f2:	88 81       	ld	r24, Y
    11f4:	88 23       	and	r24, r24
    11f6:	31 f0       	breq	.+12     	; 0x1204 <USART_TxString+0x18>
    11f8:	89 91       	ld	r24, Y+
    11fa:	0e 94 ee 08 	call	0x11dc <USART_Tx>
    11fe:	88 81       	ld	r24, Y
    1200:	88 23       	and	r24, r24
    1202:	d1 f7       	brne	.-12     	; 0x11f8 <USART_TxString+0xc>
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <USART_Rx>:
}

/*****************************************************************************
*
*   Function name : Usart_Rx
*
*   Returns :       char: byte received
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART
*
*****************************************************************************/
char USART_Rx(void)
{
    while (!(BuffElements) && !(TimeOut)) {};
    120a:	80 91 d1 02 	lds	r24, 0x02D1
    120e:	88 23       	and	r24, r24
    1210:	21 f4       	brne	.+8      	; 0x121a <USART_Rx+0x10>
    1212:	80 91 28 01 	lds	r24, 0x0128
    1216:	88 23       	and	r24, r24
    1218:	c1 f3       	breq	.-16     	; 0x120a <USART_Rx>
    return BUFF_GetBuffByte();
    121a:	0e 94 a4 0b 	call	0x1748 <BUFF_GetBuffByte>
}
    121e:	99 27       	eor	r25, r25
    1220:	08 95       	ret

00001222 <__vector_13>:

/*****************************************************************************
*
*   Function name : Usart_Rx Interrupt
*
*   Returns :       N/A
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART and stores it into the buffer
*
*****************************************************************************/

ISR(USART0_RX_vect, ISR_BLOCK)
{
    1222:	1f 92       	push	r1
    1224:	0f 92       	push	r0
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	0f 92       	push	r0
    122a:	11 24       	eor	r1, r1
    122c:	2f 93       	push	r18
    122e:	3f 93       	push	r19
    1230:	4f 93       	push	r20
    1232:	5f 93       	push	r21
    1234:	6f 93       	push	r22
    1236:	7f 93       	push	r23
    1238:	8f 93       	push	r24
    123a:	9f 93       	push	r25
    123c:	af 93       	push	r26
    123e:	bf 93       	push	r27
    1240:	ef 93       	push	r30
    1242:	ff 93       	push	r31
	BUFF_StoreBuffByte(UDR);
    1244:	80 91 c6 00 	lds	r24, 0x00C6
    1248:	0e 94 7b 0b 	call	0x16f6 <BUFF_StoreBuffByte>
    124c:	ff 91       	pop	r31
    124e:	ef 91       	pop	r30
    1250:	bf 91       	pop	r27
    1252:	af 91       	pop	r26
    1254:	9f 91       	pop	r25
    1256:	8f 91       	pop	r24
    1258:	7f 91       	pop	r23
    125a:	6f 91       	pop	r22
    125c:	5f 91       	pop	r21
    125e:	4f 91       	pop	r20
    1260:	3f 91       	pop	r19
    1262:	2f 91       	pop	r18
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	0f 90       	pop	r0
    126a:	1f 90       	pop	r1
    126c:	18 95       	reti

0000126e <SPI_SPIInit>:
// ======================================================================================

void SPI_SPIInit(void)
{
	PRR &= ~(1 << PRSPI);              // Enable the SPI system by clearing the power save register SPI disable bit
    126e:	80 91 64 00 	lds	r24, 0x0064
    1272:	8b 7f       	andi	r24, 0xFB	; 251
    1274:	80 93 64 00 	sts	0x0064, r24

	// Master, Sample falling edge (setup rising), Fosc/32 speed (8Mhz/32 = 125Khz)
	SPSR = (1 << SPI2X);
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	8d bd       	out	0x2d, r24	; 45
	SPCR = ((1 << SPE) | (1 << MSTR) | (1 << CPHA) | (1 << CPOL) | (1 << SPR1));
    127c:	8e e5       	ldi	r24, 0x5E	; 94
    127e:	8c bd       	out	0x2c, r24	; 44
    1280:	08 95       	ret

00001282 <SPI_SPITransmit>:
}

uint8_t SPI_SPITransmit(uint8_t Data)
{
	SPDR = Data;                       // Loading a byte into the register starts the transmission
    1282:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));    // Wait until transmission completed
    1284:	0d b4       	in	r0, 0x2d	; 45
    1286:	07 fe       	sbrs	r0, 7
    1288:	fd cf       	rjmp	.-6      	; 0x1284 <SPI_SPITransmit+0x2>
	return SPDR;
    128a:	8e b5       	in	r24, 0x2e	; 46
}
    128c:	99 27       	eor	r25, r25
    128e:	08 95       	ret

00001290 <SPI_SPITransmitWord>:

uint8_t SPI_SPITransmitWord(uint16_t Data)
{
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	8c 01       	movw	r16, r24
	SPI_SPITransmit((uint8_t)(Data >> 8));
    1296:	81 2f       	mov	r24, r17
    1298:	99 27       	eor	r25, r25
    129a:	0e 94 41 09 	call	0x1282 <SPI_SPITransmit>
	return SPI_SPITransmit((uint8_t)Data);
    129e:	80 2f       	mov	r24, r16
    12a0:	0e 94 41 09 	call	0x1282 <SPI_SPITransmit>
}
    12a4:	99 27       	eor	r25, r25
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	08 95       	ret

000012ac <__vector_17>:
 *  have to stop the timer tick.
 *  For all modes the USIDR contents are stored and flags are updated.
 */
ISR(USI_OVERFLOW_vect, ISR_BLOCK)
{
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	0f 92       	push	r0
    12b4:	11 24       	eor	r1, r1
    12b6:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	TIMSK0 &= ~(1<<OCIE0A);
    12b8:	80 91 6e 00 	lds	r24, 0x006E
    12bc:	8d 7f       	andi	r24, 0xFD	; 253
    12be:	80 93 6e 00 	sts	0x006E, r24
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
    12c2:	80 e4       	ldi	r24, 0x40	; 64
    12c4:	80 93 b9 00 	sts	0x00B9, r24
	TransferComplete = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	80 93 81 02 	sts	0x0281, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
    12ce:	80 91 ba 00 	lds	r24, 0x00BA
    12d2:	80 93 82 02 	sts	0x0282, r24
    12d6:	8f 91       	pop	r24
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	0f 90       	pop	r0
    12de:	1f 90       	pop	r1
    12e0:	18 95       	reti

000012e2 <USI_SPISetSpeed>:
}



/*! \brief  Initialize USI as SPI master.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from slave to master mode.
 *  Note that the stored USIDR value is cleared.
 *
 */
void USI_SPIInitMaster(char Freq)
{
	// Configure port directions.
 	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN);  // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                       // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                        // Pull-ups.
	USI_OUT_REG &= ~(1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Pull-ups.
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = USI_CONTROL_REG_FLAGS;

	// Set the compare and prescaler for the requested frequency:
	USI_SPISetSpeed(Freq);
	
	// Init driver status register.
	TransferComplete = 0;
	
	storedUSIDR = 0;
}

void USI_SPIOff( void )
{
	USI_DIR_REG &= ~((1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN));                        // Inputs.
	USI_OUT_REG &= ~((1<<USI_DATAIN_PIN)  | (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN)); // Pull-ups.
	DDRF  &= ~(1 << 6);
	PORTF &= ~(1 << 6);
	
	USI_STOPUSITIMER();
}

/*! \brief  Put one byte on bus.
 *
 *  Use this function like you would write to the SPDR register in the native SPI module.
 *  Calling this function in master mode starts a transfer, while in slave mode, a
 *  byte will be prepared for the next transfer initiated by the master device.
 *  If a transfer is in progress, this function will set the write collision flag
 *  and return without altering the data registers.
 *
 *  \returns  0 if a write collision occurred, 1 otherwise.
 */
uint8_t USI_SPITransmit( unsigned char val )
{
	// Reinit flags.
	TransferComplete = 0;

	// Put data in USI data register.
	USIDR = val;
	
	TIFR0  |= (1<<OCF0A);  // Clear compare match flag.
	TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.

	// Clear the timer 0 value
	TCNT0 = 0;

	while (!(TransferComplete));

	return storedUSIDR;
}

uint8_t USI_SPITransmitWord( unsigned int val )
{
	USI_SPITransmit((uint8_t)(val >> 8));
	return USI_SPITransmit((uint8_t)val);
}

void USI_SPIToggleClock(void)
{
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);	
}

void USI_SPISetSpeed(uint8_t Freq)
{
    12e2:	48 2f       	mov	r20, r24
	for (uint8_t MatchIndex = 0; MatchIndex < USI_PRESET_SPEEDS; MatchIndex++)
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	6c e7       	ldi	r22, 0x7C	; 124
    12e8:	73 e0       	ldi	r23, 0x03	; 3
    12ea:	9b 01       	movw	r18, r22
    12ec:	21 50       	subi	r18, 0x01	; 1
    12ee:	30 40       	sbci	r19, 0x00	; 0
	{
		if ((pgm_read_byte(&USIPSValues[MatchIndex][0]) == Freq) || (MatchIndex == (USI_PRESET_SPEEDS - 1)))
    12f0:	f9 01       	movw	r30, r18
    12f2:	84 91       	lpm	r24, Z
    12f4:	84 17       	cp	r24, r20
    12f6:	11 f0       	breq	.+4      	; 0x12fc <USI_SPISetSpeed+0x1a>
    12f8:	93 30       	cpi	r25, 0x03	; 3
    12fa:	31 f4       	brne	.+12     	; 0x1308 <USI_SPISetSpeed+0x26>
		{
			// Init Output Compare Register.
			OCR0A = pgm_read_byte(&USIPSValues[MatchIndex][1]);
    12fc:	fb 01       	movw	r30, r22
    12fe:	84 91       	lpm	r24, Z
    1300:	87 bd       	out	0x27, r24	; 39

			// Enable 'Clear Timer on Compare match' and set prescaler, which starts the timer
			TCCR0A = ((1<<WGM01) | TC0_PS_1);
    1302:	89 e0       	ldi	r24, 0x09	; 9
    1304:	84 bd       	out	0x24, r24	; 36
				
			return;
    1306:	08 95       	ret
    1308:	9f 5f       	subi	r25, 0xFF	; 255
    130a:	2e 5f       	subi	r18, 0xFE	; 254
    130c:	3f 4f       	sbci	r19, 0xFF	; 255
    130e:	6e 5f       	subi	r22, 0xFE	; 254
    1310:	7f 4f       	sbci	r23, 0xFF	; 255
    1312:	94 30       	cpi	r25, 0x04	; 4
    1314:	68 f3       	brcs	.-38     	; 0x12f0 <USI_SPISetSpeed+0xe>
    1316:	08 95       	ret

00001318 <USI_SPIInitMaster>:
    1318:	9d b1       	in	r25, 0x0d	; 13
    131a:	90 65       	ori	r25, 0x50	; 80
    131c:	9d b9       	out	0x0d, r25	; 13
    131e:	6d 98       	cbi	0x0d, 5	; 13
    1320:	75 9a       	sbi	0x0e, 5	; 14
    1322:	76 98       	cbi	0x0e, 6	; 14
    1324:	9a e5       	ldi	r25, 0x5A	; 90
    1326:	90 93 b8 00 	sts	0x00B8, r25
    132a:	0e 94 71 09 	call	0x12e2 <USI_SPISetSpeed>
    132e:	10 92 81 02 	sts	0x0281, r1
    1332:	10 92 82 02 	sts	0x0282, r1
    1336:	08 95       	ret

00001338 <USI_SPIOff>:
    1338:	8d b1       	in	r24, 0x0d	; 13
    133a:	8f 7a       	andi	r24, 0xAF	; 175
    133c:	8d b9       	out	0x0d, r24	; 13
    133e:	8e b1       	in	r24, 0x0e	; 14
    1340:	8f 78       	andi	r24, 0x8F	; 143
    1342:	8e b9       	out	0x0e, r24	; 14
    1344:	86 98       	cbi	0x10, 6	; 16
    1346:	8e 98       	cbi	0x11, 6	; 17
    1348:	14 bc       	out	0x24, r1	; 36
    134a:	08 95       	ret

0000134c <USI_SPITransmit>:
    134c:	10 92 81 02 	sts	0x0281, r1
    1350:	80 93 ba 00 	sts	0x00BA, r24
    1354:	a9 9a       	sbi	0x15, 1	; 21
    1356:	80 91 6e 00 	lds	r24, 0x006E
    135a:	82 60       	ori	r24, 0x02	; 2
    135c:	80 93 6e 00 	sts	0x006E, r24
    1360:	16 bc       	out	0x26, r1	; 38
    1362:	80 91 81 02 	lds	r24, 0x0281
    1366:	88 23       	and	r24, r24
    1368:	e1 f3       	breq	.-8      	; 0x1362 <USI_SPITransmit+0x16>
    136a:	80 91 82 02 	lds	r24, 0x0282
    136e:	99 27       	eor	r25, r25
    1370:	08 95       	ret

00001372 <USI_SPITransmitWord>:
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	8c 01       	movw	r16, r24
    1378:	81 2f       	mov	r24, r17
    137a:	99 27       	eor	r25, r25
    137c:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    1380:	80 2f       	mov	r24, r16
    1382:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    1386:	99 27       	eor	r25, r25
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	08 95       	ret

0000138e <USI_SPIToggleClock>:
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    1394:	80 91 b8 00 	lds	r24, 0x00B8
    1398:	81 60       	ori	r24, 0x01	; 1
    139a:	80 93 b8 00 	sts	0x00B8, r24
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    13a4:	80 91 b8 00 	lds	r24, 0x00B8
    13a8:	81 60       	ori	r24, 0x01	; 1
    13aa:	80 93 b8 00 	sts	0x00B8, r24
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    13b4:	08 95       	ret

000013b6 <DF_EnableDataflash>:
	while (DF_BUSY());
}

void DF_EnableDataflash(uint8_t Enabled)
{
    13b6:	90 91 83 02 	lds	r25, 0x0283
	if (Enabled == TRUE)
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	31 f4       	brne	.+12     	; 0x13ca <DF_EnableDataflash+0x14>
	{
		if (UseExernalDF == TRUE)
    13be:	91 30       	cpi	r25, 0x01	; 1
    13c0:	11 f4       	brne	.+4      	; 0x13c6 <DF_EnableDataflash+0x10>
		  MAIN_ResetCSLine(MAIN_RESETCS_EXTDFACTIVE);
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	05 c0       	rjmp	.+10     	; 0x13d0 <DF_EnableDataflash+0x1a>
		else
		  PORTB &= ~(1 << 0);
    13c6:	28 98       	cbi	0x05, 0	; 5
    13c8:	08 95       	ret
	}
	else
	{
		if (UseExernalDF == TRUE)
    13ca:	91 30       	cpi	r25, 0x01	; 1
    13cc:	21 f4       	brne	.+8      	; 0x13d6 <DF_EnableDataflash+0x20>
		  MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE);
    13ce:	89 2f       	mov	r24, r25
    13d0:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
    13d4:	08 95       	ret
		else
		  PORTB |= (1 << 0);
    13d6:	28 9a       	sbi	0x05, 0	; 5
    13d8:	08 95       	ret

000013da <DF_ReadBufferByte>:
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	8c 01       	movw	r16, r24
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    13e6:	00 00       	nop
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    13ee:	e0 91 00 01 	lds	r30, 0x0100
    13f2:	f0 91 01 01 	lds	r31, 0x0101
    13f6:	84 e5       	ldi	r24, 0x54	; 84
    13f8:	09 95       	icall
    13fa:	81 2f       	mov	r24, r17
    13fc:	99 27       	eor	r25, r25
    13fe:	e0 91 00 01 	lds	r30, 0x0100
    1402:	f0 91 01 01 	lds	r31, 0x0101
    1406:	09 95       	icall
    1408:	e0 91 00 01 	lds	r30, 0x0100
    140c:	f0 91 01 01 	lds	r31, 0x0101
    1410:	80 2f       	mov	r24, r16
    1412:	09 95       	icall
    1414:	e0 91 00 01 	lds	r30, 0x0100
    1418:	f0 91 01 01 	lds	r31, 0x0101
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	09 95       	icall
    1420:	e0 91 00 01 	lds	r30, 0x0100
    1424:	f0 91 01 01 	lds	r31, 0x0101
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	09 95       	icall
    142c:	99 27       	eor	r25, r25
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	08 95       	ret

00001434 <DF_ContinuousReadEnable>:
    1434:	ef 92       	push	r14
    1436:	ff 92       	push	r15
    1438:	0f 93       	push	r16
    143a:	1f 93       	push	r17
    143c:	8c 01       	movw	r16, r24
    143e:	7b 01       	movw	r14, r22
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    1446:	00 00       	nop
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    144e:	e0 91 00 01 	lds	r30, 0x0100
    1452:	f0 91 01 01 	lds	r31, 0x0101
    1456:	88 e6       	ldi	r24, 0x68	; 104
    1458:	09 95       	icall
    145a:	8a b5       	in	r24, 0x2a	; 42
    145c:	98 01       	movw	r18, r16
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DF_ContinuousReadEnable+0x30>
    1460:	36 95       	lsr	r19
    1462:	27 95       	ror	r18
    1464:	8a 95       	dec	r24
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DF_ContinuousReadEnable+0x2c>
    1468:	c9 01       	movw	r24, r18
    146a:	e0 91 00 01 	lds	r30, 0x0100
    146e:	f0 91 01 01 	lds	r31, 0x0101
    1472:	09 95       	icall
    1474:	8b b5       	in	r24, 0x2b	; 43
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DF_ContinuousReadEnable+0x48>
    1478:	00 0f       	add	r16, r16
    147a:	11 1f       	adc	r17, r17
    147c:	8a 95       	dec	r24
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DF_ContinuousReadEnable+0x44>
    1480:	8f 2d       	mov	r24, r15
    1482:	99 27       	eor	r25, r25
    1484:	e0 91 00 01 	lds	r30, 0x0100
    1488:	f0 91 01 01 	lds	r31, 0x0101
    148c:	80 0f       	add	r24, r16
    148e:	09 95       	icall
    1490:	e0 91 00 01 	lds	r30, 0x0100
    1494:	f0 91 01 01 	lds	r31, 0x0101
    1498:	8e 2d       	mov	r24, r14
    149a:	09 95       	icall
    149c:	03 e0       	ldi	r16, 0x03	; 3
    149e:	e0 91 00 01 	lds	r30, 0x0100
    14a2:	f0 91 01 01 	lds	r31, 0x0101
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	09 95       	icall
    14aa:	01 50       	subi	r16, 0x01	; 1
    14ac:	07 ff       	sbrs	r16, 7
    14ae:	f7 cf       	rjmp	.-18     	; 0x149e <DF_ContinuousReadEnable+0x6a>
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	ff 90       	pop	r15
    14b6:	ef 90       	pop	r14
    14b8:	08 95       	ret

000014ba <DF_BufferWriteEnable>:
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	8c 01       	movw	r16, r24
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    14c6:	00 00       	nop
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    14ce:	e0 91 00 01 	lds	r30, 0x0100
    14d2:	f0 91 01 01 	lds	r31, 0x0101
    14d6:	84 e8       	ldi	r24, 0x84	; 132
    14d8:	09 95       	icall
    14da:	e0 91 00 01 	lds	r30, 0x0100
    14de:	f0 91 01 01 	lds	r31, 0x0101
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	09 95       	icall
    14e6:	81 2f       	mov	r24, r17
    14e8:	99 27       	eor	r25, r25
    14ea:	e0 91 00 01 	lds	r30, 0x0100
    14ee:	f0 91 01 01 	lds	r31, 0x0101
    14f2:	09 95       	icall
    14f4:	e0 91 00 01 	lds	r30, 0x0100
    14f8:	f0 91 01 01 	lds	r31, 0x0101
    14fc:	80 2f       	mov	r24, r16
    14fe:	09 95       	icall
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	08 95       	ret

00001506 <DF_GetChipCharacteristics>:
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    150c:	00 00       	nop
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    1514:	e0 91 00 01 	lds	r30, 0x0100
    1518:	f0 91 01 01 	lds	r31, 0x0101
    151c:	87 e5       	ldi	r24, 0x57	; 87
    151e:	09 95       	icall
    1520:	e0 91 00 01 	lds	r30, 0x0100
    1524:	f0 91 01 01 	lds	r31, 0x0101
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	09 95       	icall
    152c:	68 2f       	mov	r22, r24
    152e:	77 27       	eor	r23, r23
    1530:	cb 01       	movw	r24, r22
    1532:	88 73       	andi	r24, 0x38	; 56
    1534:	90 70       	andi	r25, 0x00	; 0
    1536:	33 e0       	ldi	r19, 0x03	; 3
    1538:	95 95       	asr	r25
    153a:	87 95       	ror	r24
    153c:	3a 95       	dec	r19
    153e:	e1 f7       	brne	.-8      	; 0x1538 <DF_GetChipCharacteristics+0x32>
    1540:	99 27       	eor	r25, r25
    1542:	fc 01       	movw	r30, r24
    1544:	ed 54       	subi	r30, 0x4D	; 77
    1546:	fc 4f       	sbci	r31, 0xFC	; 252
    1548:	44 91       	lpm	r20, Z
    154a:	40 93 86 02 	sts	0x0286, r20
    154e:	9c 01       	movw	r18, r24
    1550:	28 0f       	add	r18, r24
    1552:	39 1f       	adc	r19, r25
    1554:	f9 01       	movw	r30, r18
    1556:	ed 55       	subi	r30, 0x5D	; 93
    1558:	fc 4f       	sbci	r31, 0xFC	; 252
    155a:	85 91       	lpm	r24, Z+
    155c:	94 91       	lpm	r25, Z
    155e:	90 93 88 02 	sts	0x0288, r25
    1562:	80 93 87 02 	sts	0x0287, r24
    1566:	f9 01       	movw	r30, r18
    1568:	ed 56       	subi	r30, 0x6D	; 109
    156a:	fc 4f       	sbci	r31, 0xFC	; 252
    156c:	85 91       	lpm	r24, Z+
    156e:	94 91       	lpm	r25, Z
    1570:	90 93 8a 02 	sts	0x028A, r25
    1574:	80 93 89 02 	sts	0x0289, r24
    1578:	80 e1       	ldi	r24, 0x10	; 16
    157a:	84 1b       	sub	r24, r20
    157c:	8a bd       	out	0x2a, r24	; 42
    157e:	48 50       	subi	r20, 0x08	; 8
    1580:	4b bd       	out	0x2b, r20	; 43
    1582:	cb 01       	movw	r24, r22
    1584:	08 95       	ret

00001586 <DF_EraseBlock>:
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	8c 01       	movw	r16, r24
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    1592:	00 00       	nop
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    159a:	e0 91 00 01 	lds	r30, 0x0100
    159e:	f0 91 01 01 	lds	r31, 0x0101
    15a2:	80 e5       	ldi	r24, 0x50	; 80
    15a4:	09 95       	icall
    15a6:	81 2f       	mov	r24, r17
    15a8:	99 27       	eor	r25, r25
    15aa:	e0 91 00 01 	lds	r30, 0x0100
    15ae:	f0 91 01 01 	lds	r31, 0x0101
    15b2:	09 95       	icall
    15b4:	e0 91 00 01 	lds	r30, 0x0100
    15b8:	f0 91 01 01 	lds	r31, 0x0101
    15bc:	80 2f       	mov	r24, r16
    15be:	09 95       	icall
    15c0:	e0 91 00 01 	lds	r30, 0x0100
    15c4:	f0 91 01 01 	lds	r31, 0x0101
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	09 95       	icall
    15cc:	0e 94 83 0a 	call	0x1506 <DF_GetChipCharacteristics>
    15d0:	88 23       	and	r24, r24
    15d2:	e4 f7       	brge	.-8      	; 0x15cc <DF_EraseBlock+0x46>
    15d4:	1f 91       	pop	r17
    15d6:	0f 91       	pop	r16
    15d8:	08 95       	ret

000015da <DF_CopyFlashPageToBuffer>:
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	8c 01       	movw	r16, r24
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    15e6:	00 00       	nop
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    15ee:	e0 91 00 01 	lds	r30, 0x0100
    15f2:	f0 91 01 01 	lds	r31, 0x0101
    15f6:	83 e5       	ldi	r24, 0x53	; 83
    15f8:	09 95       	icall
    15fa:	8a b5       	in	r24, 0x2a	; 42
    15fc:	98 01       	movw	r18, r16
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DF_CopyFlashPageToBuffer+0x2a>
    1600:	36 95       	lsr	r19
    1602:	27 95       	ror	r18
    1604:	8a 95       	dec	r24
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DF_CopyFlashPageToBuffer+0x26>
    1608:	c9 01       	movw	r24, r18
    160a:	e0 91 00 01 	lds	r30, 0x0100
    160e:	f0 91 01 01 	lds	r31, 0x0101
    1612:	09 95       	icall
    1614:	8b b5       	in	r24, 0x2b	; 43
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DF_CopyFlashPageToBuffer+0x42>
    1618:	00 0f       	add	r16, r16
    161a:	11 1f       	adc	r17, r17
    161c:	8a 95       	dec	r24
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DF_CopyFlashPageToBuffer+0x3e>
    1620:	e0 91 00 01 	lds	r30, 0x0100
    1624:	f0 91 01 01 	lds	r31, 0x0101
    1628:	80 2f       	mov	r24, r16
    162a:	09 95       	icall
    162c:	e0 91 00 01 	lds	r30, 0x0100
    1630:	f0 91 01 01 	lds	r31, 0x0101
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	09 95       	icall
    1638:	0e 94 83 0a 	call	0x1506 <DF_GetChipCharacteristics>
    163c:	88 23       	and	r24, r24
    163e:	e4 f7       	brge	.-8      	; 0x1638 <DF_CopyFlashPageToBuffer+0x5e>
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	08 95       	ret

00001646 <DF_CopyBufferToFlashPage>:
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	8c 01       	movw	r16, r24
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    1652:	00 00       	nop
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    165a:	e0 91 00 01 	lds	r30, 0x0100
    165e:	f0 91 01 01 	lds	r31, 0x0101
    1662:	83 e8       	ldi	r24, 0x83	; 131
    1664:	09 95       	icall
    1666:	8a b5       	in	r24, 0x2a	; 42
    1668:	98 01       	movw	r18, r16
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DF_CopyBufferToFlashPage+0x2a>
    166c:	36 95       	lsr	r19
    166e:	27 95       	ror	r18
    1670:	8a 95       	dec	r24
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DF_CopyBufferToFlashPage+0x26>
    1674:	c9 01       	movw	r24, r18
    1676:	e0 91 00 01 	lds	r30, 0x0100
    167a:	f0 91 01 01 	lds	r31, 0x0101
    167e:	09 95       	icall
    1680:	8b b5       	in	r24, 0x2b	; 43
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DF_CopyBufferToFlashPage+0x42>
    1684:	00 0f       	add	r16, r16
    1686:	11 1f       	adc	r17, r17
    1688:	8a 95       	dec	r24
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <DF_CopyBufferToFlashPage+0x3e>
    168c:	e0 91 00 01 	lds	r30, 0x0100
    1690:	f0 91 01 01 	lds	r31, 0x0101
    1694:	80 2f       	mov	r24, r16
    1696:	09 95       	icall
    1698:	e0 91 00 01 	lds	r30, 0x0100
    169c:	f0 91 01 01 	lds	r31, 0x0101
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	09 95       	icall
    16a4:	0e 94 83 0a 	call	0x1506 <DF_GetChipCharacteristics>
    16a8:	88 23       	and	r24, r24
    16aa:	e4 f7       	brge	.-8      	; 0x16a4 <DF_CopyBufferToFlashPage+0x5e>
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	08 95       	ret

000016b2 <DF_CheckCorrectOnboardChip>:
    16b2:	0e 94 83 0a 	call	0x1506 <DF_GetChipCharacteristics>
    16b6:	80 91 86 02 	lds	r24, 0x0286
    16ba:	89 30       	cpi	r24, 0x09	; 9
    16bc:	61 f0       	breq	.+24     	; 0x16d6 <DF_CheckCorrectOnboardChip+0x24>
    16be:	80 91 64 00 	lds	r24, 0x0064
    16c2:	84 60       	ori	r24, 0x04	; 4
    16c4:	80 93 64 00 	sts	0x0064, r24
    16c8:	83 e8       	ldi	r24, 0x83	; 131
    16ca:	93 e0       	ldi	r25, 0x03	; 3
    16cc:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	08 95       	ret
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	08 95       	ret

000016dc <BUFF_InitialiseBuffer>:

// Routines:
void BUFF_InitialiseBuffer(void)
{
	StoreLoc    = (BuffType*)&RingBuffer[0]; // Set up the IN pointer to the start of the buffer
    16dc:	8d e8       	ldi	r24, 0x8D	; 141
    16de:	92 e0       	ldi	r25, 0x02	; 2
    16e0:	90 93 ce 02 	sts	0x02CE, r25
    16e4:	80 93 cd 02 	sts	0x02CD, r24
	RetrieveLoc = (BuffType*)&RingBuffer[0]; // Set up the OUT pointer to the start of the buffer
    16e8:	90 93 d0 02 	sts	0x02D0, r25
    16ec:	80 93 cf 02 	sts	0x02CF, r24

	BuffElements = 0;                     // Reset the buffer elements counter
    16f0:	10 92 d1 02 	sts	0x02D1, r1
    16f4:	08 95       	ret

000016f6 <BUFF_StoreBuffByte>:
}

void BUFF_StoreBuffByte(BuffType DataToStore)
{
    16f6:	98 2f       	mov	r25, r24
	if (BuffElements == BuffLen)          // Buffer full
    16f8:	80 91 d1 02 	lds	r24, 0x02D1
    16fc:	80 34       	cpi	r24, 0x40	; 64
    16fe:	29 f4       	brne	.+10     	; 0x170a <BUFF_StoreBuffByte+0x14>
	{
		MAIN_ShowError(PSTR("BUFF OVERFLOW"));
    1700:	8b eb       	ldi	r24, 0xBB	; 187
    1702:	93 e0       	ldi	r25, 0x03	; 3
    1704:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
		return;
    1708:	08 95       	ret
	}
		
	*StoreLoc = DataToStore;              // Store the data
    170a:	e0 91 cd 02 	lds	r30, 0x02CD
    170e:	f0 91 ce 02 	lds	r31, 0x02CE
    1712:	90 83       	st	Z, r25

	StoreLoc++;                           // Increment the IN pointer to the next element
    1714:	40 91 cd 02 	lds	r20, 0x02CD
    1718:	50 91 ce 02 	lds	r21, 0x02CE
    171c:	9a 01       	movw	r18, r20
    171e:	2f 5f       	subi	r18, 0xFF	; 255
    1720:	3f 4f       	sbci	r19, 0xFF	; 255
    1722:	30 93 ce 02 	sts	0x02CE, r19
    1726:	20 93 cd 02 	sts	0x02CD, r18
	BuffElements++;                       // Increment the total elements variable
    172a:	80 91 d1 02 	lds	r24, 0x02D1
    172e:	8f 5f       	subi	r24, 0xFF	; 255
    1730:	80 93 d1 02 	sts	0x02D1, r24

	if (StoreLoc == (BuffType*)&RingBuffer[BuffLen])
    1734:	2d 5c       	subi	r18, 0xCD	; 205
    1736:	32 40       	sbci	r19, 0x02	; 2
    1738:	31 f4       	brne	.+12     	; 0x1746 <BUFF_StoreBuffByte+0x50>
		StoreLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    173a:	4f 53       	subi	r20, 0x3F	; 63
    173c:	50 40       	sbci	r21, 0x00	; 0
    173e:	50 93 ce 02 	sts	0x02CE, r21
    1742:	40 93 cd 02 	sts	0x02CD, r20
    1746:	08 95       	ret

00001748 <BUFF_GetBuffByte>:
}	

BuffType BUFF_GetBuffByte(void)
{
	if (!(BuffElements))                  // No elements in the buffer
    1748:	80 91 d1 02 	lds	r24, 0x02D1
    174c:	88 23       	and	r24, r24
    174e:	19 f4       	brne	.+6      	; 0x1756 <BUFF_GetBuffByte+0xe>
		return 0;
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	08 95       	ret

	BuffType RetrievedData = *RetrieveLoc; // Grab the stored byte into a temp variable
    1756:	20 91 cf 02 	lds	r18, 0x02CF
    175a:	30 91 d0 02 	lds	r19, 0x02D0
    175e:	f9 01       	movw	r30, r18
    1760:	91 91       	ld	r25, Z+

	RetrieveLoc++;                         // Increment the OUT pointer to the next element if flag set
    1762:	f0 93 d0 02 	sts	0x02D0, r31
    1766:	e0 93 cf 02 	sts	0x02CF, r30
	BuffElements--;                        // Decrement the total elements variable
    176a:	80 91 d1 02 	lds	r24, 0x02D1
    176e:	81 50       	subi	r24, 0x01	; 1
    1770:	80 93 d1 02 	sts	0x02D1, r24
	
	if (RetrieveLoc == (BuffType*)&RingBuffer[BuffLen])
    1774:	ed 5c       	subi	r30, 0xCD	; 205
    1776:	f2 40       	sbci	r31, 0x02	; 2
    1778:	31 f4       	brne	.+12     	; 0x1786 <BUFF_GetBuffByte+0x3e>
		RetrieveLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    177a:	2f 53       	subi	r18, 0x3F	; 63
    177c:	30 40       	sbci	r19, 0x00	; 0
    177e:	30 93 d0 02 	sts	0x02D0, r19
    1782:	20 93 cf 02 	sts	0x02CF, r18
		
	return RetrievedData;                 // Return the retrieved data
    1786:	89 2f       	mov	r24, r25
    1788:	99 27       	eor	r25, r25
}
    178a:	08 95       	ret

0000178c <__vector_9>:
// ======================================================================================

// Timeout = ((F_CPU / 64) / (65535 * TIMEOUT_TICKSBEFORETIMEOUT)) per second
ISR(TIMER1_OVF_vect, ISR_NOBLOCK)
{
    178c:	78 94       	sei
    178e:	1f 92       	push	r1
    1790:	0f 92       	push	r0
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	0f 92       	push	r0
    1796:	11 24       	eor	r1, r1
    1798:	8f 93       	push	r24
	if (Ticks++ == TIMEOUT_TICKSBEFORETIMEOUT)
    179a:	80 91 29 01 	lds	r24, 0x0129
    179e:	8f 5f       	subi	r24, 0xFF	; 255
    17a0:	80 93 29 01 	sts	0x0129, r24
    17a4:	80 91 29 01 	lds	r24, 0x0129
    17a8:	87 30       	cpi	r24, 0x07	; 7
    17aa:	29 f4       	brne	.+10     	; 0x17b6 <__vector_9+0x2a>
	{
	   Ticks   = 0;
    17ac:	10 92 29 01 	sts	0x0129, r1
	   TimeOut = TRUE;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	80 93 28 01 	sts	0x0128, r24
    17b6:	8f 91       	pop	r24
    17b8:	0f 90       	pop	r0
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	0f 90       	pop	r0
    17be:	1f 90       	pop	r1
    17c0:	18 95       	reti

000017c2 <TIMEOUT_SetupTimeoutTimer>:
	}
}

// ======================================================================================

void TIMEOUT_SetupTimeoutTimer(void)
{
	TCCR1A = 0;
    17c2:	10 92 80 00 	sts	0x0080, r1
	TIMEOUT_TIMER_OFF();
    17c6:	10 92 81 00 	sts	0x0081, r1
    17ca:	10 92 29 01 	sts	0x0129, r1
    17ce:	10 92 85 00 	sts	0x0085, r1
    17d2:	10 92 84 00 	sts	0x0084, r1
	TCCR1C = 0;
    17d6:	10 92 82 00 	sts	0x0082, r1
	
	TIMSK1 = (1 << TOIE1); // Turn timer 1 overflow interrupt on
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	80 93 6f 00 	sts	0x006F, r24
    17e0:	08 95       	ret

000017e2 <PD_SetupDFAddressCounters>:
}

void PD_SetupDFAddressCounters(void)
{
	uint32_t StartAddress = CurrAddress;
    17e2:	20 91 2b 01 	lds	r18, 0x012B
    17e6:	30 91 2c 01 	lds	r19, 0x012C
    17ea:	40 91 2d 01 	lds	r20, 0x012D
    17ee:	50 91 2e 01 	lds	r21, 0x012E

	CurrPageAddress = 0;
    17f2:	10 92 8c 02 	sts	0x028C, r1
    17f6:	10 92 8b 02 	sts	0x028B, r1

	while (StartAddress > DataflashInfo.PageSize)      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DataflashInfo.PageSize;         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    17fa:	80 91 87 02 	lds	r24, 0x0287
    17fe:	90 91 88 02 	lds	r25, 0x0288
    1802:	aa 27       	eor	r26, r26
    1804:	bb 27       	eor	r27, r27
    1806:	82 17       	cp	r24, r18
    1808:	93 07       	cpc	r25, r19
    180a:	a4 07       	cpc	r26, r20
    180c:	b5 07       	cpc	r27, r21
    180e:	88 f4       	brcc	.+34     	; 0x1832 <PD_SetupDFAddressCounters+0x50>
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	28 1b       	sub	r18, r24
    1816:	39 0b       	sbc	r19, r25
    1818:	4a 0b       	sbc	r20, r26
    181a:	5b 0b       	sbc	r21, r27
    181c:	6f 5f       	subi	r22, 0xFF	; 255
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	82 17       	cp	r24, r18
    1822:	93 07       	cpc	r25, r19
    1824:	a4 07       	cpc	r26, r20
    1826:	b5 07       	cpc	r27, r21
    1828:	a8 f3       	brcs	.-22     	; 0x1814 <PD_SetupDFAddressCounters+0x32>
    182a:	70 93 8c 02 	sts	0x028C, r23
    182e:	60 93 8b 02 	sts	0x028B, r22
	}
	
	CurrBuffByte = (uint16_t)StartAddress;              // The buffer byte is the remainder
    1832:	30 93 85 02 	sts	0x0285, r19
    1836:	20 93 84 02 	sts	0x0284, r18
    183a:	08 95       	ret

0000183c <PD_StoreDataflashByte>:
}

void PD_StoreDataflashByte(uint8_t Data)
{
    183c:	cf 93       	push	r28
    183e:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DataflashInfo.PageSize)
    1840:	20 91 84 02 	lds	r18, 0x0284
    1844:	30 91 85 02 	lds	r19, 0x0285
    1848:	80 91 87 02 	lds	r24, 0x0287
    184c:	90 91 88 02 	lds	r25, 0x0288
    1850:	28 17       	cp	r18, r24
    1852:	39 07       	cpc	r19, r25
    1854:	a9 f4       	brne	.+42     	; 0x1880 <PD_StoreDataflashByte+0x44>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    1856:	80 91 8b 02 	lds	r24, 0x028B
    185a:	90 91 8c 02 	lds	r25, 0x028C
    185e:	9c 01       	movw	r18, r24
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	90 93 8c 02 	sts	0x028C, r25
    1866:	80 93 8b 02 	sts	0x028B, r24
    186a:	c9 01       	movw	r24, r18
    186c:	0e 94 23 0b 	call	0x1646 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	0e 94 5d 0a 	call	0x14ba <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    1878:	10 92 85 02 	sts	0x0285, r1
    187c:	10 92 84 02 	sts	0x0284, r1
	}
	
	USI_SPITransmit(Data);                                 // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    1880:	8c 2f       	mov	r24, r28
    1882:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
	CurrBuffByte++;
    1886:	80 91 84 02 	lds	r24, 0x0284
    188a:	90 91 85 02 	lds	r25, 0x0285
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	90 93 85 02 	sts	0x0285, r25
    1894:	80 93 84 02 	sts	0x0284, r24
    1898:	cf 91       	pop	r28
    189a:	08 95       	ret

0000189c <PD_InterpretAVRISPPacket>:
    189c:	df 92       	push	r13
    189e:	ef 92       	push	r14
    18a0:	ff 92       	push	r15
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	dd 24       	eor	r13, r13
    18ac:	80 91 34 01 	lds	r24, 0x0134
    18b0:	99 27       	eor	r25, r25
    18b2:	86 31       	cpi	r24, 0x16	; 22
    18b4:	91 05       	cpc	r25, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <PD_InterpretAVRISPPacket+0x1e>
    18b8:	00 c1       	rjmp	.+512    	; 0x1aba <PD_InterpretAVRISPPacket+0x21e>
    18ba:	87 31       	cpi	r24, 0x17	; 23
    18bc:	91 05       	cpc	r25, r1
    18be:	b4 f4       	brge	.+44     	; 0x18ec <PD_InterpretAVRISPPacket+0x50>
    18c0:	82 31       	cpi	r24, 0x12	; 18
    18c2:	91 05       	cpc	r25, r1
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <PD_InterpretAVRISPPacket+0x2c>
    18c6:	6f c0       	rjmp	.+222    	; 0x19a6 <PD_InterpretAVRISPPacket+0x10a>
    18c8:	83 31       	cpi	r24, 0x13	; 19
    18ca:	91 05       	cpc	r25, r1
    18cc:	3c f4       	brge	.+14     	; 0x18dc <PD_InterpretAVRISPPacket+0x40>
    18ce:	80 31       	cpi	r24, 0x10	; 16
    18d0:	91 05       	cpc	r25, r1
    18d2:	31 f1       	breq	.+76     	; 0x1920 <PD_InterpretAVRISPPacket+0x84>
    18d4:	41 97       	sbiw	r24, 0x11	; 17
    18d6:	09 f4       	brne	.+2      	; 0x18da <PD_InterpretAVRISPPacket+0x3e>
    18d8:	46 c0       	rjmp	.+140    	; 0x1966 <PD_InterpretAVRISPPacket+0xca>
    18da:	40 c1       	rjmp	.+640    	; 0x1b5c <PD_InterpretAVRISPPacket+0x2c0>
    18dc:	84 31       	cpi	r24, 0x14	; 20
    18de:	91 05       	cpc	r25, r1
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <PD_InterpretAVRISPPacket+0x48>
    18e2:	8a c0       	rjmp	.+276    	; 0x19f8 <PD_InterpretAVRISPPacket+0x15c>
    18e4:	45 97       	sbiw	r24, 0x15	; 21
    18e6:	0c f0       	brlt	.+2      	; 0x18ea <PD_InterpretAVRISPPacket+0x4e>
    18e8:	af c0       	rjmp	.+350    	; 0x1a48 <PD_InterpretAVRISPPacket+0x1ac>
    18ea:	7f c0       	rjmp	.+254    	; 0x19ea <PD_InterpretAVRISPPacket+0x14e>
    18ec:	89 31       	cpi	r24, 0x19	; 25
    18ee:	91 05       	cpc	r25, r1
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <PD_InterpretAVRISPPacket+0x58>
    18f2:	70 c0       	rjmp	.+224    	; 0x19d4 <PD_InterpretAVRISPPacket+0x138>
    18f4:	8a 31       	cpi	r24, 0x1A	; 26
    18f6:	91 05       	cpc	r25, r1
    18f8:	44 f4       	brge	.+16     	; 0x190a <PD_InterpretAVRISPPacket+0x6e>
    18fa:	87 31       	cpi	r24, 0x17	; 23
    18fc:	91 05       	cpc	r25, r1
    18fe:	09 f4       	brne	.+2      	; 0x1902 <PD_InterpretAVRISPPacket+0x66>
    1900:	69 c0       	rjmp	.+210    	; 0x19d4 <PD_InterpretAVRISPPacket+0x138>
    1902:	48 97       	sbiw	r24, 0x18	; 24
    1904:	09 f4       	brne	.+2      	; 0x1908 <PD_InterpretAVRISPPacket+0x6c>
    1906:	58 c0       	rjmp	.+176    	; 0x19b8 <PD_InterpretAVRISPPacket+0x11c>
    1908:	29 c1       	rjmp	.+594    	; 0x1b5c <PD_InterpretAVRISPPacket+0x2c0>
    190a:	8b 31       	cpi	r24, 0x1B	; 27
    190c:	91 05       	cpc	r25, r1
    190e:	e9 f1       	breq	.+122    	; 0x198a <PD_InterpretAVRISPPacket+0xee>
    1910:	8b 31       	cpi	r24, 0x1B	; 27
    1912:	91 05       	cpc	r25, r1
    1914:	0c f4       	brge	.+2      	; 0x1918 <PD_InterpretAVRISPPacket+0x7c>
    1916:	50 c0       	rjmp	.+160    	; 0x19b8 <PD_InterpretAVRISPPacket+0x11c>
    1918:	4c 97       	sbiw	r24, 0x1c	; 28
    191a:	09 f4       	brne	.+2      	; 0x191e <PD_InterpretAVRISPPacket+0x82>
    191c:	4d c0       	rjmp	.+154    	; 0x19b8 <PD_InterpretAVRISPPacket+0x11c>
    191e:	1e c1       	rjmp	.+572    	; 0x1b5c <PD_InterpretAVRISPPacket+0x2c0>
    1920:	82 e0       	ldi	r24, 0x02	; 2
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	90 93 31 01 	sts	0x0131, r25
    1928:	80 93 30 01 	sts	0x0130, r24
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    1932:	0e 94 83 0a 	call	0x1506 <DF_GetChipCharacteristics>
    1936:	80 91 86 02 	lds	r24, 0x0286
    193a:	88 23       	and	r24, r24
    193c:	59 f0       	breq	.+22     	; 0x1954 <PD_InterpretAVRISPPacket+0xb8>
    193e:	89 ec       	ldi	r24, 0xC9	; 201
    1940:	93 e0       	ldi	r25, 0x03	; 3
    1942:	0e 94 fe 07 	call	0xffc <LCD_puts_f>
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	80 93 2f 01 	sts	0x012F, r24
    194c:	81 b3       	in	r24, 0x11	; 17
    194e:	8f 7c       	andi	r24, 0xCF	; 207
    1950:	80 62       	ori	r24, 0x20	; 32
    1952:	17 c0       	rjmp	.+46     	; 0x1982 <PD_InterpretAVRISPPacket+0xe6>
    1954:	83 e8       	ldi	r24, 0x83	; 131
    1956:	93 e0       	ldi	r25, 0x03	; 3
    1958:	0e 94 fe 07 	call	0xffc <LCD_puts_f>
    195c:	8d 2d       	mov	r24, r13
    195e:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    1962:	80 ec       	ldi	r24, 0xC0	; 192
    1964:	02 c1       	rjmp	.+516    	; 0x1b6a <PD_InterpretAVRISPPacket+0x2ce>
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	90 93 31 01 	sts	0x0131, r25
    196e:	80 93 30 01 	sts	0x0130, r24
    1972:	d0 92 2f 01 	sts	0x012F, r13
    1976:	8d 2d       	mov	r24, r13
    1978:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    197c:	81 b3       	in	r24, 0x11	; 17
    197e:	8f 7c       	andi	r24, 0xCF	; 207
    1980:	80 61       	ori	r24, 0x10	; 16
    1982:	81 bb       	out	0x11, r24	; 17
    1984:	d0 92 35 01 	sts	0x0135, r13
    1988:	f2 c0       	rjmp	.+484    	; 0x1b6e <PD_InterpretAVRISPPacket+0x2d2>
    198a:	84 e0       	ldi	r24, 0x04	; 4
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	90 93 31 01 	sts	0x0131, r25
    1992:	80 93 30 01 	sts	0x0130, r24
    1996:	d0 92 35 01 	sts	0x0135, r13
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	80 93 36 01 	sts	0x0136, r24
    19a0:	d0 92 37 01 	sts	0x0137, r13
    19a4:	e4 c0       	rjmp	.+456    	; 0x1b6e <PD_InterpretAVRISPPacket+0x2d2>
    19a6:	82 e0       	ldi	r24, 0x02	; 2
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	90 93 31 01 	sts	0x0131, r25
    19ae:	80 93 30 01 	sts	0x0130, r24
    19b2:	e1 e0       	ldi	r30, 0x01	; 1
    19b4:	de 2e       	mov	r13, r30
    19b6:	7e c0       	rjmp	.+252    	; 0x1ab4 <PD_InterpretAVRISPPacket+0x218>
    19b8:	84 e0       	ldi	r24, 0x04	; 4
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	90 93 31 01 	sts	0x0131, r25
    19c0:	80 93 30 01 	sts	0x0130, r24
    19c4:	10 92 35 01 	sts	0x0135, r1
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
    19ca:	80 93 36 01 	sts	0x0136, r24
    19ce:	10 92 37 01 	sts	0x0137, r1
    19d2:	cd c0       	rjmp	.+410    	; 0x1b6e <PD_InterpretAVRISPPacket+0x2d2>
    19d4:	83 e0       	ldi	r24, 0x03	; 3
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	90 93 31 01 	sts	0x0131, r25
    19dc:	80 93 30 01 	sts	0x0130, r24
    19e0:	10 92 35 01 	sts	0x0135, r1
    19e4:	10 92 36 01 	sts	0x0136, r1
    19e8:	c2 c0       	rjmp	.+388    	; 0x1b6e <PD_InterpretAVRISPPacket+0x2d2>
    19ea:	82 e0       	ldi	r24, 0x02	; 2
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	90 93 31 01 	sts	0x0131, r25
    19f2:	80 93 30 01 	sts	0x0130, r24
    19f6:	5e c0       	rjmp	.+188    	; 0x1ab4 <PD_InterpretAVRISPPacket+0x218>
    19f8:	80 91 35 01 	lds	r24, 0x0135
    19fc:	99 27       	eor	r25, r25
    19fe:	98 2f       	mov	r25, r24
    1a00:	88 27       	eor	r24, r24
    1a02:	20 91 36 01 	lds	r18, 0x0136
    1a06:	33 27       	eor	r19, r19
    1a08:	82 2b       	or	r24, r18
    1a0a:	93 2b       	or	r25, r19
    1a0c:	03 96       	adiw	r24, 0x03	; 3
    1a0e:	90 93 31 01 	sts	0x0131, r25
    1a12:	80 93 30 01 	sts	0x0130, r24
    1a16:	21 e0       	ldi	r18, 0x01	; 1
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	02 97       	sbiw	r24, 0x02	; 2
    1a1c:	28 17       	cp	r18, r24
    1a1e:	39 07       	cpc	r19, r25
    1a20:	48 f4       	brcc	.+18     	; 0x1a34 <PD_InterpretAVRISPPacket+0x198>
    1a22:	4f ef       	ldi	r20, 0xFF	; 255
    1a24:	e5 e3       	ldi	r30, 0x35	; 53
    1a26:	f1 e0       	ldi	r31, 0x01	; 1
    1a28:	41 93       	st	Z+, r20
    1a2a:	2f 5f       	subi	r18, 0xFF	; 255
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	28 17       	cp	r18, r24
    1a30:	39 07       	cpc	r19, r25
    1a32:	d0 f3       	brcs	.-12     	; 0x1a28 <PD_InterpretAVRISPPacket+0x18c>
    1a34:	10 92 35 01 	sts	0x0135, r1
    1a38:	e0 91 30 01 	lds	r30, 0x0130
    1a3c:	f0 91 31 01 	lds	r31, 0x0131
    1a40:	ed 5c       	subi	r30, 0xCD	; 205
    1a42:	fe 4f       	sbci	r31, 0xFE	; 254
    1a44:	10 82       	st	Z, r1
    1a46:	93 c0       	rjmp	.+294    	; 0x1b6e <PD_InterpretAVRISPPacket+0x2d2>
    1a48:	0e 94 f1 0b 	call	0x17e2 <PD_SetupDFAddressCounters>
    1a4c:	80 91 8b 02 	lds	r24, 0x028B
    1a50:	90 91 8c 02 	lds	r25, 0x028C
    1a54:	0e 94 ed 0a 	call	0x15da <DF_CopyFlashPageToBuffer>
    1a58:	80 91 84 02 	lds	r24, 0x0284
    1a5c:	90 91 85 02 	lds	r25, 0x0285
    1a60:	0e 94 5d 0a 	call	0x14ba <DF_BufferWriteEnable>
    1a64:	80 91 35 01 	lds	r24, 0x0135
    1a68:	99 27       	eor	r25, r25
    1a6a:	d8 2f       	mov	r29, r24
    1a6c:	cc 27       	eor	r28, r28
    1a6e:	80 91 36 01 	lds	r24, 0x0136
    1a72:	99 27       	eor	r25, r25
    1a74:	c8 2b       	or	r28, r24
    1a76:	d9 2b       	or	r29, r25
    1a78:	00 e0       	ldi	r16, 0x00	; 0
    1a7a:	10 e0       	ldi	r17, 0x00	; 0
    1a7c:	0c 17       	cp	r16, r28
    1a7e:	1d 07       	cpc	r17, r29
    1a80:	c8 f4       	brcc	.+50     	; 0x1ab4 <PD_InterpretAVRISPPacket+0x218>
    1a82:	5e e3       	ldi	r21, 0x3E	; 62
    1a84:	e5 2e       	mov	r14, r21
    1a86:	51 e0       	ldi	r21, 0x01	; 1
    1a88:	f5 2e       	mov	r15, r21
    1a8a:	f7 01       	movw	r30, r14
    1a8c:	81 91       	ld	r24, Z+
    1a8e:	7f 01       	movw	r14, r30
    1a90:	0e 94 1e 0c 	call	0x183c <PD_StoreDataflashByte>
    1a94:	80 91 84 02 	lds	r24, 0x0284
    1a98:	90 91 85 02 	lds	r25, 0x0285
    1a9c:	01 96       	adiw	r24, 0x01	; 1
    1a9e:	90 93 85 02 	sts	0x0285, r25
    1aa2:	80 93 84 02 	sts	0x0284, r24
    1aa6:	0e 94 d9 0e 	call	0x1db2 <V2P_IncrementCurrAddress>
    1aaa:	0f 5f       	subi	r16, 0xFF	; 255
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	0c 17       	cp	r16, r28
    1ab0:	1d 07       	cpc	r17, r29
    1ab2:	58 f3       	brcs	.-42     	; 0x1a8a <PD_InterpretAVRISPPacket+0x1ee>
    1ab4:	10 92 35 01 	sts	0x0135, r1
    1ab8:	5a c0       	rjmp	.+180    	; 0x1b6e <PD_InterpretAVRISPPacket+0x2d2>
    1aba:	0e 94 f1 0b 	call	0x17e2 <PD_SetupDFAddressCounters>
    1abe:	80 91 8b 02 	lds	r24, 0x028B
    1ac2:	90 91 8c 02 	lds	r25, 0x028C
    1ac6:	0e 94 ed 0a 	call	0x15da <DF_CopyFlashPageToBuffer>
    1aca:	80 91 35 01 	lds	r24, 0x0135
    1ace:	99 27       	eor	r25, r25
    1ad0:	d8 2f       	mov	r29, r24
    1ad2:	cc 27       	eor	r28, r28
    1ad4:	80 91 36 01 	lds	r24, 0x0136
    1ad8:	99 27       	eor	r25, r25
    1ada:	c8 2b       	or	r28, r24
    1adc:	d9 2b       	or	r29, r25
    1ade:	00 e0       	ldi	r16, 0x00	; 0
    1ae0:	10 e0       	ldi	r17, 0x00	; 0
    1ae2:	0c 17       	cp	r16, r28
    1ae4:	1d 07       	cpc	r17, r29
    1ae6:	70 f5       	brcc	.+92     	; 0x1b44 <PD_InterpretAVRISPPacket+0x2a8>
    1ae8:	36 e3       	ldi	r19, 0x36	; 54
    1aea:	e3 2e       	mov	r14, r19
    1aec:	31 e0       	ldi	r19, 0x01	; 1
    1aee:	f3 2e       	mov	r15, r19
    1af0:	20 91 84 02 	lds	r18, 0x0284
    1af4:	30 91 85 02 	lds	r19, 0x0285
    1af8:	80 91 87 02 	lds	r24, 0x0287
    1afc:	90 91 88 02 	lds	r25, 0x0288
    1b00:	28 17       	cp	r18, r24
    1b02:	39 07       	cpc	r19, r25
    1b04:	41 f4       	brne	.+16     	; 0x1b16 <PD_InterpretAVRISPPacket+0x27a>
    1b06:	0e 94 f1 0b 	call	0x17e2 <PD_SetupDFAddressCounters>
    1b0a:	80 91 8b 02 	lds	r24, 0x028B
    1b0e:	90 91 8c 02 	lds	r25, 0x028C
    1b12:	0e 94 ed 0a 	call	0x15da <DF_CopyFlashPageToBuffer>
    1b16:	80 91 84 02 	lds	r24, 0x0284
    1b1a:	90 91 85 02 	lds	r25, 0x0285
    1b1e:	9c 01       	movw	r18, r24
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	90 93 85 02 	sts	0x0285, r25
    1b26:	80 93 84 02 	sts	0x0284, r24
    1b2a:	c9 01       	movw	r24, r18
    1b2c:	0e 94 ed 09 	call	0x13da <DF_ReadBufferByte>
    1b30:	f7 01       	movw	r30, r14
    1b32:	81 93       	st	Z+, r24
    1b34:	7f 01       	movw	r14, r30
    1b36:	0e 94 d9 0e 	call	0x1db2 <V2P_IncrementCurrAddress>
    1b3a:	0f 5f       	subi	r16, 0xFF	; 255
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	0c 17       	cp	r16, r28
    1b40:	1d 07       	cpc	r17, r29
    1b42:	b0 f2       	brcs	.-84     	; 0x1af0 <PD_InterpretAVRISPPacket+0x254>
    1b44:	23 96       	adiw	r28, 0x03	; 3
    1b46:	d0 93 31 01 	sts	0x0131, r29
    1b4a:	c0 93 30 01 	sts	0x0130, r28
    1b4e:	23 97       	sbiw	r28, 0x03	; 3
    1b50:	10 92 35 01 	sts	0x0135, r1
    1b54:	cc 5c       	subi	r28, 0xCC	; 204
    1b56:	de 4f       	sbci	r29, 0xFE	; 254
    1b58:	1a 82       	std	Y+2, r1	; 0x02
    1b5a:	09 c0       	rjmp	.+18     	; 0x1b6e <PD_InterpretAVRISPPacket+0x2d2>
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	90 93 31 01 	sts	0x0131, r25
    1b64:	80 93 30 01 	sts	0x0130, r24
    1b68:	89 ec       	ldi	r24, 0xC9	; 201
    1b6a:	80 93 35 01 	sts	0x0135, r24
    1b6e:	0e 94 ff 0d 	call	0x1bfe <V2P_SendPacket>
    1b72:	dd 20       	and	r13, r13
    1b74:	d9 f0       	breq	.+54     	; 0x1bac <PD_InterpretAVRISPPacket+0x310>
    1b76:	8f e3       	ldi	r24, 0x3F	; 63
    1b78:	92 e0       	ldi	r25, 0x02	; 2
    1b7a:	0e 94 fe 07 	call	0xffc <LCD_puts_f>
    1b7e:	c0 e0       	ldi	r28, 0x00	; 0
    1b80:	d0 e0       	ldi	r29, 0x00	; 0
    1b82:	80 91 89 02 	lds	r24, 0x0289
    1b86:	90 91 8a 02 	lds	r25, 0x028A
    1b8a:	23 e0       	ldi	r18, 0x03	; 3
    1b8c:	96 95       	lsr	r25
    1b8e:	87 95       	ror	r24
    1b90:	2a 95       	dec	r18
    1b92:	e1 f7       	brne	.-8      	; 0x1b8c <PD_InterpretAVRISPPacket+0x2f0>
    1b94:	c8 17       	cp	r28, r24
    1b96:	d9 07       	cpc	r29, r25
    1b98:	28 f4       	brcc	.+10     	; 0x1ba4 <PD_InterpretAVRISPPacket+0x308>
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	0e 94 c3 0a 	call	0x1586 <DF_EraseBlock>
    1ba0:	21 96       	adiw	r28, 0x01	; 1
    1ba2:	ef cf       	rjmp	.-34     	; 0x1b82 <PD_InterpretAVRISPPacket+0x2e6>
    1ba4:	89 ec       	ldi	r24, 0xC9	; 201
    1ba6:	93 e0       	ldi	r25, 0x03	; 3
    1ba8:	0e 94 fe 07 	call	0xffc <LCD_puts_f>
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	ff 90       	pop	r15
    1bb6:	ef 90       	pop	r14
    1bb8:	df 90       	pop	r13
    1bba:	08 95       	ret

00001bbc <V2P_GetChecksum>:
	
	/* Checksum for the V2 protocol is comprised of an XOR of all the packet 
      bytes, including the start, sequence number, size and token bytes.    */
	
	CheckSumByte  = MESSAGE_START;
    1bbc:	6b e1       	ldi	r22, 0x1B	; 27
	CheckSumByte ^= SequenceNum;
    1bbe:	80 91 32 01 	lds	r24, 0x0132
    1bc2:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize >> 8);
    1bc4:	20 91 30 01 	lds	r18, 0x0130
    1bc8:	30 91 31 01 	lds	r19, 0x0131
    1bcc:	83 2f       	mov	r24, r19
    1bce:	99 27       	eor	r25, r25
    1bd0:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize);
    1bd2:	80 91 30 01 	lds	r24, 0x0130
    1bd6:	68 27       	eor	r22, r24
	CheckSumByte ^= TOKEN;
    1bd8:	8e e0       	ldi	r24, 0x0E	; 14
    1bda:	68 27       	eor	r22, r24
	
	for (uint16_t CByteIndex = 0; CByteIndex < MessageSize; CByteIndex++)
    1bdc:	40 e0       	ldi	r20, 0x00	; 0
    1bde:	50 e0       	ldi	r21, 0x00	; 0
    1be0:	42 17       	cp	r20, r18
    1be2:	53 07       	cpc	r21, r19
    1be4:	48 f4       	brcc	.+18     	; 0x1bf8 <V2P_GetChecksum+0x3c>
    1be6:	e4 e3       	ldi	r30, 0x34	; 52
    1be8:	f1 e0       	ldi	r31, 0x01	; 1
	   CheckSumByte ^= PacketBytes[CByteIndex];
    1bea:	81 91       	ld	r24, Z+
    1bec:	68 27       	eor	r22, r24
    1bee:	4f 5f       	subi	r20, 0xFF	; 255
    1bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf2:	42 17       	cp	r20, r18
    1bf4:	53 07       	cpc	r21, r19
    1bf6:	c8 f3       	brcs	.-14     	; 0x1bea <V2P_GetChecksum+0x2e>

	return CheckSumByte;
}
    1bf8:	86 2f       	mov	r24, r22
    1bfa:	99 27       	eor	r25, r25
    1bfc:	08 95       	ret

00001bfe <V2P_SendPacket>:
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	8b e1       	ldi	r24, 0x1B	; 27
    1c08:	0e 94 ee 08 	call	0x11dc <USART_Tx>
    1c0c:	80 91 32 01 	lds	r24, 0x0132
    1c10:	0e 94 ee 08 	call	0x11dc <USART_Tx>
    1c14:	80 91 31 01 	lds	r24, 0x0131
    1c18:	0e 94 ee 08 	call	0x11dc <USART_Tx>
    1c1c:	80 91 30 01 	lds	r24, 0x0130
    1c20:	0e 94 ee 08 	call	0x11dc <USART_Tx>
    1c24:	8e e0       	ldi	r24, 0x0E	; 14
    1c26:	0e 94 ee 08 	call	0x11dc <USART_Tx>
    1c2a:	c0 e0       	ldi	r28, 0x00	; 0
    1c2c:	d0 e0       	ldi	r29, 0x00	; 0
    1c2e:	80 91 30 01 	lds	r24, 0x0130
    1c32:	90 91 31 01 	lds	r25, 0x0131
    1c36:	c8 17       	cp	r28, r24
    1c38:	d9 07       	cpc	r29, r25
    1c3a:	78 f4       	brcc	.+30     	; 0x1c5a <V2P_SendPacket+0x5c>
    1c3c:	04 e3       	ldi	r16, 0x34	; 52
    1c3e:	11 e0       	ldi	r17, 0x01	; 1
    1c40:	f8 01       	movw	r30, r16
    1c42:	81 91       	ld	r24, Z+
    1c44:	8f 01       	movw	r16, r30
    1c46:	0e 94 ee 08 	call	0x11dc <USART_Tx>
    1c4a:	21 96       	adiw	r28, 0x01	; 1
    1c4c:	80 91 30 01 	lds	r24, 0x0130
    1c50:	90 91 31 01 	lds	r25, 0x0131
    1c54:	c8 17       	cp	r28, r24
    1c56:	d9 07       	cpc	r29, r25
    1c58:	98 f3       	brcs	.-26     	; 0x1c40 <V2P_SendPacket+0x42>
    1c5a:	0e 94 de 0d 	call	0x1bbc <V2P_GetChecksum>
    1c5e:	0e 94 ee 08 	call	0x11dc <USART_Tx>
    1c62:	80 91 32 01 	lds	r24, 0x0132
    1c66:	90 91 33 01 	lds	r25, 0x0133
    1c6a:	01 96       	adiw	r24, 0x01	; 1
    1c6c:	90 93 33 01 	sts	0x0133, r25
    1c70:	80 93 32 01 	sts	0x0132, r24
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	1f 91       	pop	r17
    1c7a:	0f 91       	pop	r16
    1c7c:	08 95       	ret

00001c7e <V2P_GetSetParamater>:

void V2P_GetSetParamater(void)
{
	uint8_t Param_Name = PacketBytes[1];    // Save the parameter number
    1c7e:	20 91 35 01 	lds	r18, 0x0135

	MessageSize = 3;                        // Set the default response message size to 3 bytes     
    1c82:	83 e0       	ldi	r24, 0x03	; 3
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	90 93 31 01 	sts	0x0131, r25
    1c8a:	80 93 30 01 	sts	0x0130, r24
	PacketBytes[1] = STATUS_CMD_OK;         // Set the default response to OK
    1c8e:	10 92 35 01 	sts	0x0135, r1

	switch (Param_Name)                    // Switch based on the recieved parameter byte
    1c92:	e2 2f       	mov	r30, r18
    1c94:	ff 27       	eor	r31, r31
    1c96:	e8 39       	cpi	r30, 0x98	; 152
    1c98:	f1 05       	cpc	r31, r1
    1c9a:	ac f4       	brge	.+42     	; 0x1cc6 <V2P_GetSetParamater+0x48>
    1c9c:	e6 39       	cpi	r30, 0x96	; 150
    1c9e:	f1 05       	cpc	r31, r1
    1ca0:	0c f0       	brlt	.+2      	; 0x1ca4 <V2P_GetSetParamater+0x26>
    1ca2:	6d c0       	rjmp	.+218    	; 0x1d7e <V2P_GetSetParamater+0x100>
    1ca4:	e1 38       	cpi	r30, 0x81	; 129
    1ca6:	f1 05       	cpc	r31, r1
    1ca8:	f9 f0       	breq	.+62     	; 0x1ce8 <V2P_GetSetParamater+0x6a>
    1caa:	e2 38       	cpi	r30, 0x82	; 130
    1cac:	f1 05       	cpc	r31, r1
    1cae:	24 f4       	brge	.+8      	; 0x1cb8 <V2P_GetSetParamater+0x3a>
    1cb0:	e0 38       	cpi	r30, 0x80	; 128
    1cb2:	f1 05       	cpc	r31, r1
    1cb4:	b9 f0       	breq	.+46     	; 0x1ce4 <V2P_GetSetParamater+0x66>
    1cb6:	71 c0       	rjmp	.+226    	; 0x1d9a <V2P_GetSetParamater+0x11c>
    1cb8:	cf 01       	movw	r24, r30
    1cba:	80 59       	subi	r24, 0x90	; 144
    1cbc:	90 40       	sbci	r25, 0x00	; 0
    1cbe:	03 97       	sbiw	r24, 0x03	; 3
    1cc0:	08 f0       	brcs	.+2      	; 0x1cc4 <V2P_GetSetParamater+0x46>
    1cc2:	6b c0       	rjmp	.+214    	; 0x1d9a <V2P_GetSetParamater+0x11c>
    1cc4:	13 c0       	rjmp	.+38     	; 0x1cec <V2P_GetSetParamater+0x6e>
    1cc6:	ee 39       	cpi	r30, 0x9E	; 158
    1cc8:	f1 05       	cpc	r31, r1
    1cca:	09 f4       	brne	.+2      	; 0x1cce <V2P_GetSetParamater+0x50>
    1ccc:	3d c0       	rjmp	.+122    	; 0x1d48 <V2P_GetSetParamater+0xca>
    1cce:	ef 39       	cpi	r30, 0x9F	; 159
    1cd0:	f1 05       	cpc	r31, r1
    1cd2:	24 f4       	brge	.+8      	; 0x1cdc <V2P_GetSetParamater+0x5e>
    1cd4:	e8 39       	cpi	r30, 0x98	; 152
    1cd6:	f1 05       	cpc	r31, r1
    1cd8:	f9 f0       	breq	.+62     	; 0x1d18 <V2P_GetSetParamater+0x9a>
    1cda:	5f c0       	rjmp	.+190    	; 0x1d9a <V2P_GetSetParamater+0x11c>
    1cdc:	ef 39       	cpi	r30, 0x9F	; 159
    1cde:	f1 05       	cpc	r31, r1
    1ce0:	49 f0       	breq	.+18     	; 0x1cf4 <V2P_GetSetParamater+0x76>
    1ce2:	5b c0       	rjmp	.+182    	; 0x1d9a <V2P_GetSetParamater+0x11c>
	{
		case PARAM_BUILD_NUMBER_LOW:
			PacketBytes[2] = VERSION_MINOR;
    1ce4:	83 e0       	ldi	r24, 0x03	; 3
    1ce6:	38 c0       	rjmp	.+112    	; 0x1d58 <V2P_GetSetParamater+0xda>

			break;
		case PARAM_BUILD_NUMBER_HIGH:
			PacketBytes[2] = VERSION_MAJOR;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	36 c0       	rjmp	.+108    	; 0x1d58 <V2P_GetSetParamater+0xda>

			break;
		case PARAM_HARDWARE_VERSION:
		case PARAM_SW_MAJOR:
		case PARAM_SW_MINOR:
			PacketBytes[2] = pgm_read_byte(&VersionData[Param_Name - PARAM_HARDWARE_VERSION]);
    1cec:	eb 5a       	subi	r30, 0xAB	; 171
    1cee:	fc 4f       	sbci	r31, 0xFC	; 252
    1cf0:	84 91       	lpm	r24, Z
    1cf2:	32 c0       	rjmp	.+100    	; 0x1d58 <V2P_GetSetParamater+0xda>

			break;
		case PARAM_CONTROLLER_INIT:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1cf4:	80 91 34 01 	lds	r24, 0x0134
    1cf8:	83 30       	cpi	r24, 0x03	; 3
    1cfa:	19 f4       	brne	.+6      	; 0x1d02 <V2P_GetSetParamater+0x84>
			{
				PacketBytes[2] = Param_ControllerInit;
    1cfc:	80 91 2a 01 	lds	r24, 0x012A
    1d00:	2b c0       	rjmp	.+86     	; 0x1d58 <V2P_GetSetParamater+0xda>
			}
			else
			{
				MessageSize = 2;
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	90 93 31 01 	sts	0x0131, r25
    1d0a:	80 93 30 01 	sts	0x0130, r24
				Param_ControllerInit = PacketBytes[2];
    1d0e:	80 91 36 01 	lds	r24, 0x0136
    1d12:	80 93 2a 01 	sts	0x012A, r24
			}
			
			break;
    1d16:	4a c0       	rjmp	.+148    	; 0x1dac <V2P_GetSetParamater+0x12e>
		case PARAM_SCK_DURATION:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1d18:	80 91 34 01 	lds	r24, 0x0134
    1d1c:	83 30       	cpi	r24, 0x03	; 3
    1d1e:	19 f4       	brne	.+6      	; 0x1d26 <V2P_GetSetParamater+0xa8>
			{
				PacketBytes[2] = eeprom_read_byte_169(&Param_SCKDuration);
    1d20:	80 e2       	ldi	r24, 0x20	; 32
    1d22:	91 e0       	ldi	r25, 0x01	; 1
    1d24:	17 c0       	rjmp	.+46     	; 0x1d54 <V2P_GetSetParamater+0xd6>
			}
			else
			{
				MessageSize = 2;
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	90 93 31 01 	sts	0x0131, r25
    1d2e:	80 93 30 01 	sts	0x0130, r24
				eeprom_write_byte_169(&Param_SCKDuration, PacketBytes[2]);
    1d32:	60 91 36 01 	lds	r22, 0x0136
    1d36:	80 e2       	ldi	r24, 0x20	; 32
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
				USI_SPISetSpeed(PacketBytes[2]); // Re-Initialise the USI system with the new frequency
    1d3e:	80 91 36 01 	lds	r24, 0x0136
    1d42:	0e 94 71 09 	call	0x12e2 <USI_SPISetSpeed>
			}
					
			break;
    1d46:	32 c0       	rjmp	.+100    	; 0x1dac <V2P_GetSetParamater+0x12e>
		case PARAM_RESET_POLARITY:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1d48:	80 91 34 01 	lds	r24, 0x0134
    1d4c:	83 30       	cpi	r24, 0x03	; 3
    1d4e:	39 f4       	brne	.+14     	; 0x1d5e <V2P_GetSetParamater+0xe0>
			{
				PacketBytes[2] = eeprom_read_byte_169(&Param_ResetPolarity);		
    1d50:	82 e2       	ldi	r24, 0x22	; 34
    1d52:	91 e0       	ldi	r25, 0x01	; 1
    1d54:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    1d58:	80 93 36 01 	sts	0x0136, r24
    1d5c:	27 c0       	rjmp	.+78     	; 0x1dac <V2P_GetSetParamater+0x12e>
			}
			else
			{
				MessageSize = 2;
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	90 93 31 01 	sts	0x0131, r25
    1d66:	80 93 30 01 	sts	0x0130, r24
				eeprom_write_byte_169(&Param_ResetPolarity, PacketBytes[2]);
    1d6a:	60 91 36 01 	lds	r22, 0x0136
    1d6e:	82 e2       	ldi	r24, 0x22	; 34
    1d70:	91 e0       	ldi	r25, 0x01	; 1
    1d72:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Change takes effect immediatly
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
			}
			
			break;
    1d7c:	17 c0       	rjmp	.+46     	; 0x1dac <V2P_GetSetParamater+0x12e>
		case PARAM_OSC_PSCALE:
		case PARAM_OSC_CMATCH:
			/* Despite not supporting these parameters (STK500 only), the AVR Studio programmer
			   sends them along with the SCK duration. A OK must be returned or the sequence will fail
			   and the SCK duration byte will not be sent.                                             */
		
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1d7e:	80 91 34 01 	lds	r24, 0x0134
    1d82:	83 30       	cpi	r24, 0x03	; 3
    1d84:	19 f4       	brne	.+6      	; 0x1d8c <V2P_GetSetParamater+0x10e>
			{
			   PacketBytes[2] = 0;            // If the command is a read, return a 0 for both parameters
    1d86:	10 92 36 01 	sts	0x0136, r1
    1d8a:	10 c0       	rjmp	.+32     	; 0x1dac <V2P_GetSetParamater+0x12e>
			}
			else
			{
				MessageSize = 2;              // Otherwise just send back an OK if the command is a set		
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	90 93 31 01 	sts	0x0131, r25
    1d94:	80 93 30 01 	sts	0x0130, r24
			}
			
			break;
    1d98:	09 c0       	rjmp	.+18     	; 0x1dac <V2P_GetSetParamater+0x12e>
		default:                             // Unrecognised parameter
			MessageSize = 2;
    1d9a:	82 e0       	ldi	r24, 0x02	; 2
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	90 93 31 01 	sts	0x0131, r25
    1da2:	80 93 30 01 	sts	0x0130, r24
			PacketBytes[1] = STATUS_CMD_FAILED;			
    1da6:	80 ec       	ldi	r24, 0xC0	; 192
    1da8:	80 93 35 01 	sts	0x0135, r24
	}
	
	V2P_SendPacket();
    1dac:	0e 94 ff 0d 	call	0x1bfe <V2P_SendPacket>
    1db0:	08 95       	ret

00001db2 <V2P_IncrementCurrAddress>:
}

void V2P_IncrementCurrAddress(void)
{
	// Incrementing a 32-bit unsigned variable takes a lot of code. Because much of the code is
	// not very time critical (much of it is waiting for the hardware), i've chosen to waste
	// a few extra cycles per increment and save a good 60 bytes or so of code space by putting
	// the incrmement inside a function.

	CurrAddress++;
    1db2:	80 91 2b 01 	lds	r24, 0x012B
    1db6:	90 91 2c 01 	lds	r25, 0x012C
    1dba:	a0 91 2d 01 	lds	r26, 0x012D
    1dbe:	b0 91 2e 01 	lds	r27, 0x012E
    1dc2:	01 96       	adiw	r24, 0x01	; 1
    1dc4:	a1 1d       	adc	r26, r1
    1dc6:	b1 1d       	adc	r27, r1
    1dc8:	80 93 2b 01 	sts	0x012B, r24
    1dcc:	90 93 2c 01 	sts	0x012C, r25
    1dd0:	a0 93 2d 01 	sts	0x012D, r26
    1dd4:	b0 93 2e 01 	sts	0x012E, r27
    1dd8:	08 95       	ret

00001dda <V2P_CheckForExtendedAddress>:
}

void V2P_CheckForExtendedAddress(void)
{
	if (CurrAddress & (1UL << 31))                     // MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
    1dda:	80 91 2b 01 	lds	r24, 0x012B
    1dde:	90 91 2c 01 	lds	r25, 0x012C
    1de2:	a0 91 2d 01 	lds	r26, 0x012D
    1de6:	b0 91 2e 01 	lds	r27, 0x012E
    1dea:	b7 ff       	sbrs	r27, 7
    1dec:	1e c0       	rjmp	.+60     	; 0x1e2a <V2P_CheckForExtendedAddress+0x50>
	{
		USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);   // Load extended address command
    1dee:	8d e4       	ldi	r24, 0x4D	; 77
    1df0:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
		USI_SPITransmit((CurrAddress & 0x00FF0000) >> 16); // The 3rd byte of the long holds the extended address
    1dfa:	80 91 2d 01 	lds	r24, 0x012D
    1dfe:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
		
		CurrAddress &= ~(1UL << 31);                   // Clear the flag
    1e08:	80 91 2b 01 	lds	r24, 0x012B
    1e0c:	90 91 2c 01 	lds	r25, 0x012C
    1e10:	a0 91 2d 01 	lds	r26, 0x012D
    1e14:	b0 91 2e 01 	lds	r27, 0x012E
    1e18:	bf 77       	andi	r27, 0x7F	; 127
    1e1a:	80 93 2b 01 	sts	0x012B, r24
    1e1e:	90 93 2c 01 	sts	0x012C, r25
    1e22:	a0 93 2d 01 	sts	0x012D, r26
    1e26:	b0 93 2e 01 	sts	0x012E, r27
    1e2a:	08 95       	ret

00001e2c <V2P_RunStateMachine>:
    1e2c:	ef 92       	push	r14
    1e2e:	ff 92       	push	r15
    1e30:	0f 93       	push	r16
    1e32:	1f 93       	push	r17
    1e34:	cf 93       	push	r28
    1e36:	c0 e0       	ldi	r28, 0x00	; 0
    1e38:	ee 24       	eor	r14, r14
    1e3a:	ff 24       	eor	r15, r15
    1e3c:	80 91 c1 00 	lds	r24, 0x00C1
    1e40:	80 78       	andi	r24, 0x80	; 128
    1e42:	88 61       	ori	r24, 0x18	; 24
    1e44:	80 93 c1 00 	sts	0x00C1, r24
    1e48:	0e 94 6e 0b 	call	0x16dc <BUFF_InitialiseBuffer>
    1e4c:	0e 94 e1 0b 	call	0x17c2 <TIMEOUT_SetupTimeoutTimer>
    1e50:	c0 93 2f 01 	sts	0x012F, r28
    1e54:	10 92 2b 01 	sts	0x012B, r1
    1e58:	10 92 2c 01 	sts	0x012C, r1
    1e5c:	10 92 2d 01 	sts	0x012D, r1
    1e60:	10 92 2e 01 	sts	0x012E, r1
    1e64:	80 91 28 01 	lds	r24, 0x0128
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	11 f4       	brne	.+4      	; 0x1e70 <V2P_RunStateMachine+0x44>
    1e6c:	c9 e0       	ldi	r28, 0x09	; 9
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <V2P_RunStateMachine+0x4e>
    1e70:	cc 23       	and	r28, r28
    1e72:	19 f0       	breq	.+6      	; 0x1e7a <V2P_RunStateMachine+0x4e>
    1e74:	83 e0       	ldi	r24, 0x03	; 3
    1e76:	80 93 81 00 	sts	0x0081, r24
    1e7a:	8c 2f       	mov	r24, r28
    1e7c:	99 27       	eor	r25, r25
    1e7e:	84 30       	cpi	r24, 0x04	; 4
    1e80:	91 05       	cpc	r25, r1
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <V2P_RunStateMachine+0x5a>
    1e84:	6d c0       	rjmp	.+218    	; 0x1f60 <V2P_RunStateMachine+0x134>
    1e86:	85 30       	cpi	r24, 0x05	; 5
    1e88:	91 05       	cpc	r25, r1
    1e8a:	94 f4       	brge	.+36     	; 0x1eb0 <V2P_RunStateMachine+0x84>
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	91 05       	cpc	r25, r1
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <V2P_RunStateMachine+0x68>
    1e92:	4c c0       	rjmp	.+152    	; 0x1f2c <V2P_RunStateMachine+0x100>
    1e94:	82 30       	cpi	r24, 0x02	; 2
    1e96:	91 05       	cpc	r25, r1
    1e98:	1c f4       	brge	.+6      	; 0x1ea0 <V2P_RunStateMachine+0x74>
    1e9a:	89 2b       	or	r24, r25
    1e9c:	b1 f1       	breq	.+108    	; 0x1f0a <V2P_RunStateMachine+0xde>
    1e9e:	e2 cf       	rjmp	.-60     	; 0x1e64 <V2P_RunStateMachine+0x38>
    1ea0:	82 30       	cpi	r24, 0x02	; 2
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <V2P_RunStateMachine+0x7c>
    1ea6:	48 c0       	rjmp	.+144    	; 0x1f38 <V2P_RunStateMachine+0x10c>
    1ea8:	03 97       	sbiw	r24, 0x03	; 3
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <V2P_RunStateMachine+0x82>
    1eac:	4e c0       	rjmp	.+156    	; 0x1f4a <V2P_RunStateMachine+0x11e>
    1eae:	da cf       	rjmp	.-76     	; 0x1e64 <V2P_RunStateMachine+0x38>
    1eb0:	87 30       	cpi	r24, 0x07	; 7
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <V2P_RunStateMachine+0x8c>
    1eb6:	85 c0       	rjmp	.+266    	; 0x1fc2 <V2P_RunStateMachine+0x196>
    1eb8:	88 30       	cpi	r24, 0x08	; 8
    1eba:	91 05       	cpc	r25, r1
    1ebc:	44 f4       	brge	.+16     	; 0x1ece <V2P_RunStateMachine+0xa2>
    1ebe:	85 30       	cpi	r24, 0x05	; 5
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <V2P_RunStateMachine+0x9a>
    1ec4:	62 c0       	rjmp	.+196    	; 0x1f8a <V2P_RunStateMachine+0x15e>
    1ec6:	06 97       	sbiw	r24, 0x06	; 6
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <V2P_RunStateMachine+0xa0>
    1eca:	67 c0       	rjmp	.+206    	; 0x1f9a <V2P_RunStateMachine+0x16e>
    1ecc:	cb cf       	rjmp	.-106    	; 0x1e64 <V2P_RunStateMachine+0x38>
    1ece:	88 30       	cpi	r24, 0x08	; 8
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	79 f0       	breq	.+30     	; 0x1ef2 <V2P_RunStateMachine+0xc6>
    1ed4:	09 97       	sbiw	r24, 0x09	; 9
    1ed6:	31 f6       	brne	.-116    	; 0x1e64 <V2P_RunStateMachine+0x38>
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	90 93 31 01 	sts	0x0131, r25
    1ee0:	80 93 30 01 	sts	0x0130, r24
    1ee4:	80 ec       	ldi	r24, 0xC0	; 192
    1ee6:	80 93 35 01 	sts	0x0135, r24
    1eea:	10 92 28 01 	sts	0x0128, r1
    1eee:	0e 94 ff 0d 	call	0x1bfe <V2P_SendPacket>
    1ef2:	0e 94 6e 0b 	call	0x16dc <BUFF_InitialiseBuffer>
    1ef6:	10 92 81 00 	sts	0x0081, r1
    1efa:	10 92 29 01 	sts	0x0129, r1
    1efe:	10 92 85 00 	sts	0x0085, r1
    1f02:	10 92 84 00 	sts	0x0084, r1
    1f06:	c0 e0       	ldi	r28, 0x00	; 0
    1f08:	ad cf       	rjmp	.-166    	; 0x1e64 <V2P_RunStateMachine+0x38>
    1f0a:	80 91 d1 02 	lds	r24, 0x02D1
    1f0e:	81 11       	cpse	r24, r1
    1f10:	c1 e0       	ldi	r28, 0x01	; 1
    1f12:	f2 9b       	sbis	0x1e, 2	; 30
    1f14:	a7 cf       	rjmp	.-178    	; 0x1e64 <V2P_RunStateMachine+0x38>
    1f16:	80 91 2f 01 	lds	r24, 0x012F
    1f1a:	88 23       	and	r24, r24
    1f1c:	09 f0       	breq	.+2      	; 0x1f20 <V2P_RunStateMachine+0xf4>
    1f1e:	a2 cf       	rjmp	.-188    	; 0x1e64 <V2P_RunStateMachine+0x38>
    1f20:	80 91 c1 00 	lds	r24, 0x00C1
    1f24:	80 78       	andi	r24, 0x80	; 128
    1f26:	80 93 c1 00 	sts	0x00C1, r24
    1f2a:	d4 c0       	rjmp	.+424    	; 0x20d4 <V2P_RunStateMachine+0x2a8>
    1f2c:	0e 94 05 09 	call	0x120a <USART_Rx>
    1f30:	8b 31       	cpi	r24, 0x1B	; 27
    1f32:	89 f5       	brne	.+98     	; 0x1f96 <V2P_RunStateMachine+0x16a>
    1f34:	c2 e0       	ldi	r28, 0x02	; 2
    1f36:	96 cf       	rjmp	.-212    	; 0x1e64 <V2P_RunStateMachine+0x38>
    1f38:	0e 94 05 09 	call	0x120a <USART_Rx>
    1f3c:	99 27       	eor	r25, r25
    1f3e:	90 93 33 01 	sts	0x0133, r25
    1f42:	80 93 32 01 	sts	0x0132, r24
    1f46:	c3 e0       	ldi	r28, 0x03	; 3
    1f48:	8d cf       	rjmp	.-230    	; 0x1e64 <V2P_RunStateMachine+0x38>
    1f4a:	0e 94 05 09 	call	0x120a <USART_Rx>
    1f4e:	99 27       	eor	r25, r25
    1f50:	98 2f       	mov	r25, r24
    1f52:	88 27       	eor	r24, r24
    1f54:	90 93 31 01 	sts	0x0131, r25
    1f58:	80 93 30 01 	sts	0x0130, r24
    1f5c:	c4 e0       	ldi	r28, 0x04	; 4
    1f5e:	82 cf       	rjmp	.-252    	; 0x1e64 <V2P_RunStateMachine+0x38>
    1f60:	0e 94 05 09 	call	0x120a <USART_Rx>
    1f64:	28 2f       	mov	r18, r24
    1f66:	33 27       	eor	r19, r19
    1f68:	80 91 30 01 	lds	r24, 0x0130
    1f6c:	90 91 31 01 	lds	r25, 0x0131
    1f70:	82 2b       	or	r24, r18
    1f72:	93 2b       	or	r25, r19
    1f74:	90 93 31 01 	sts	0x0131, r25
    1f78:	80 93 30 01 	sts	0x0130, r24
    1f7c:	83 51       	subi	r24, 0x13	; 19
    1f7e:	91 40       	sbci	r25, 0x01	; 1
    1f80:	50 f4       	brcc	.+20     	; 0x1f96 <V2P_RunStateMachine+0x16a>
    1f82:	c5 e0       	ldi	r28, 0x05	; 5
    1f84:	ee 24       	eor	r14, r14
    1f86:	ff 24       	eor	r15, r15
    1f88:	6d cf       	rjmp	.-294    	; 0x1e64 <V2P_RunStateMachine+0x38>
    1f8a:	0e 94 05 09 	call	0x120a <USART_Rx>
    1f8e:	8e 30       	cpi	r24, 0x0E	; 14
    1f90:	11 f4       	brne	.+4      	; 0x1f96 <V2P_RunStateMachine+0x16a>
    1f92:	c6 e0       	ldi	r28, 0x06	; 6
    1f94:	67 cf       	rjmp	.-306    	; 0x1e64 <V2P_RunStateMachine+0x38>
    1f96:	c9 e0       	ldi	r28, 0x09	; 9
    1f98:	65 cf       	rjmp	.-310    	; 0x1e64 <V2P_RunStateMachine+0x38>
    1f9a:	80 91 30 01 	lds	r24, 0x0130
    1f9e:	90 91 31 01 	lds	r25, 0x0131
    1fa2:	e8 16       	cp	r14, r24
    1fa4:	f9 06       	cpc	r15, r25
    1fa6:	11 f4       	brne	.+4      	; 0x1fac <V2P_RunStateMachine+0x180>
    1fa8:	c7 e0       	ldi	r28, 0x07	; 7
    1faa:	5c cf       	rjmp	.-328    	; 0x1e64 <V2P_RunStateMachine+0x38>
    1fac:	87 01       	movw	r16, r14
    1fae:	0c 5c       	subi	r16, 0xCC	; 204
    1fb0:	1e 4f       	sbci	r17, 0xFE	; 254
    1fb2:	08 94       	sec
    1fb4:	e1 1c       	adc	r14, r1
    1fb6:	f1 1c       	adc	r15, r1
    1fb8:	0e 94 05 09 	call	0x120a <USART_Rx>
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	80 83       	st	Z, r24
    1fc0:	51 cf       	rjmp	.-350    	; 0x1e64 <V2P_RunStateMachine+0x38>
    1fc2:	0e 94 de 0d 	call	0x1bbc <V2P_GetChecksum>
    1fc6:	18 2f       	mov	r17, r24
    1fc8:	0e 94 05 09 	call	0x120a <USART_Rx>
    1fcc:	18 17       	cp	r17, r24
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <V2P_RunStateMachine+0x1a6>
    1fd0:	74 c0       	rjmp	.+232    	; 0x20ba <V2P_RunStateMachine+0x28e>
    1fd2:	80 91 34 01 	lds	r24, 0x0134
    1fd6:	99 27       	eor	r25, r25
    1fd8:	84 30       	cpi	r24, 0x04	; 4
    1fda:	91 05       	cpc	r25, r1
    1fdc:	3c f4       	brge	.+14     	; 0x1fec <V2P_RunStateMachine+0x1c0>
    1fde:	82 30       	cpi	r24, 0x02	; 2
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	0c f0       	brlt	.+2      	; 0x1fe6 <V2P_RunStateMachine+0x1ba>
    1fe4:	61 c0       	rjmp	.+194    	; 0x20a8 <V2P_RunStateMachine+0x27c>
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	39 f0       	breq	.+14     	; 0x1ff8 <V2P_RunStateMachine+0x1cc>
    1fea:	61 c0       	rjmp	.+194    	; 0x20ae <V2P_RunStateMachine+0x282>
    1fec:	86 30       	cpi	r24, 0x06	; 6
    1fee:	91 05       	cpc	r25, r1
    1ff0:	e9 f0       	breq	.+58     	; 0x202c <V2P_RunStateMachine+0x200>
    1ff2:	07 97       	sbiw	r24, 0x07	; 7
    1ff4:	99 f0       	breq	.+38     	; 0x201c <V2P_RunStateMachine+0x1f0>
    1ff6:	5b c0       	rjmp	.+182    	; 0x20ae <V2P_RunStateMachine+0x282>
    1ff8:	8b e0       	ldi	r24, 0x0B	; 11
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	90 93 31 01 	sts	0x0131, r25
    2000:	80 93 30 01 	sts	0x0130, r24
    2004:	a4 e3       	ldi	r26, 0x34	; 52
    2006:	b1 e0       	ldi	r27, 0x01	; 1
    2008:	ea ed       	ldi	r30, 0xDA	; 218
    200a:	f3 e0       	ldi	r31, 0x03	; 3
    200c:	9a e0       	ldi	r25, 0x0A	; 10
    200e:	84 91       	lpm	r24, Z
    2010:	8d 93       	st	X+, r24
    2012:	91 50       	subi	r25, 0x01	; 1
    2014:	31 96       	adiw	r30, 0x01	; 1
    2016:	97 ff       	sbrs	r25, 7
    2018:	fa cf       	rjmp	.-12     	; 0x200e <V2P_RunStateMachine+0x1e2>
    201a:	58 c0       	rjmp	.+176    	; 0x20cc <V2P_RunStateMachine+0x2a0>
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	90 93 31 01 	sts	0x0131, r25
    2024:	80 93 30 01 	sts	0x0130, r24
    2028:	80 ec       	ldi	r24, 0xC0	; 192
    202a:	4e c0       	rjmp	.+156    	; 0x20c8 <V2P_RunStateMachine+0x29c>
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	90 93 31 01 	sts	0x0131, r25
    2034:	80 93 30 01 	sts	0x0130, r24
    2038:	0e 94 ed 0e 	call	0x1dda <V2P_CheckForExtendedAddress>
    203c:	80 91 35 01 	lds	r24, 0x0135
    2040:	99 27       	eor	r25, r25
    2042:	aa 27       	eor	r26, r26
    2044:	bb 27       	eor	r27, r27
    2046:	b8 2f       	mov	r27, r24
    2048:	aa 27       	eor	r26, r26
    204a:	99 27       	eor	r25, r25
    204c:	88 27       	eor	r24, r24
    204e:	20 91 36 01 	lds	r18, 0x0136
    2052:	33 27       	eor	r19, r19
    2054:	44 27       	eor	r20, r20
    2056:	55 27       	eor	r21, r21
    2058:	a9 01       	movw	r20, r18
    205a:	33 27       	eor	r19, r19
    205c:	22 27       	eor	r18, r18
    205e:	82 2b       	or	r24, r18
    2060:	93 2b       	or	r25, r19
    2062:	a4 2b       	or	r26, r20
    2064:	b5 2b       	or	r27, r21
    2066:	20 91 37 01 	lds	r18, 0x0137
    206a:	33 27       	eor	r19, r19
    206c:	44 27       	eor	r20, r20
    206e:	55 27       	eor	r21, r21
    2070:	54 2f       	mov	r21, r20
    2072:	43 2f       	mov	r20, r19
    2074:	32 2f       	mov	r19, r18
    2076:	22 27       	eor	r18, r18
    2078:	82 2b       	or	r24, r18
    207a:	93 2b       	or	r25, r19
    207c:	a4 2b       	or	r26, r20
    207e:	b5 2b       	or	r27, r21
    2080:	20 91 38 01 	lds	r18, 0x0138
    2084:	33 27       	eor	r19, r19
    2086:	44 27       	eor	r20, r20
    2088:	55 27       	eor	r21, r21
    208a:	82 2b       	or	r24, r18
    208c:	93 2b       	or	r25, r19
    208e:	a4 2b       	or	r26, r20
    2090:	b5 2b       	or	r27, r21
    2092:	80 93 2b 01 	sts	0x012B, r24
    2096:	90 93 2c 01 	sts	0x012C, r25
    209a:	a0 93 2d 01 	sts	0x012D, r26
    209e:	b0 93 2e 01 	sts	0x012E, r27
    20a2:	10 92 35 01 	sts	0x0135, r1
    20a6:	12 c0       	rjmp	.+36     	; 0x20cc <V2P_RunStateMachine+0x2a0>
    20a8:	0e 94 3f 0e 	call	0x1c7e <V2P_GetSetParamater>
    20ac:	11 c0       	rjmp	.+34     	; 0x20d0 <V2P_RunStateMachine+0x2a4>
    20ae:	e0 91 24 01 	lds	r30, 0x0124
    20b2:	f0 91 25 01 	lds	r31, 0x0125
    20b6:	09 95       	icall
    20b8:	0b c0       	rjmp	.+22     	; 0x20d0 <V2P_RunStateMachine+0x2a4>
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	90 93 31 01 	sts	0x0131, r25
    20c2:	80 93 30 01 	sts	0x0130, r24
    20c6:	81 ec       	ldi	r24, 0xC1	; 193
    20c8:	80 93 35 01 	sts	0x0135, r24
    20cc:	0e 94 ff 0d 	call	0x1bfe <V2P_SendPacket>
    20d0:	c8 e0       	ldi	r28, 0x08	; 8
    20d2:	c8 ce       	rjmp	.-624    	; 0x1e64 <V2P_RunStateMachine+0x38>
    20d4:	cf 91       	pop	r28
    20d6:	1f 91       	pop	r17
    20d8:	0f 91       	pop	r16
    20da:	ff 90       	pop	r15
    20dc:	ef 90       	pop	r14
    20de:	08 95       	ret

000020e0 <ISPCC_EnterChipProgrammingMode>:

// ======================================================================================

void ISPCC_EnterChipProgrammingMode(void)
{
    20e0:	0f 93       	push	r16
    20e2:	1f 93       	push	r17
    20e4:	cf 93       	push	r28
	uint8_t ByteDelay = PacketBytes[5];
    20e6:	10 91 39 01 	lds	r17, 0x0139
	uint8_t Attempts  = PacketBytes[4];
    20ea:	c0 91 38 01 	lds	r28, 0x0138
	uint8_t Response;

	MAIN_Delay1MS(PacketBytes[2]);         // Wait before continuing, amount specified in the packet
    20ee:	80 91 36 01 	lds	r24, 0x0136
    20f2:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>

	if ((!(Attempts)) || (Attempts > 100)) // if no attempts or too high a value is specified, a fixed number is chosen
    20f6:	8c 2f       	mov	r24, r28
    20f8:	81 50       	subi	r24, 0x01	; 1
    20fa:	84 36       	cpi	r24, 0x64	; 100
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <ISPCC_EnterChipProgrammingMode+0x20>
	   Attempts = 24;
    20fe:	c8 e1       	ldi	r28, 0x18	; 24
		
	while (Attempts--)
	{
		USI_SPITransmit(PacketBytes[8]);
		MAIN_Delay1MS(ByteDelay);
		USI_SPITransmit(PacketBytes[9]);
		MAIN_Delay1MS(ByteDelay);
			
		Response = USI_SPITransmit(PacketBytes[10]);
		MAIN_Delay1MS(ByteDelay);

		if (PacketBytes[7] == ISPCC_POLL_MODE_AVR)
		  USI_SPITransmit(PacketBytes[11]);
		else
		  Response = USI_SPITransmit(PacketBytes[11]);
				
		if (!(PacketBytes[7]) || (Response == PacketBytes[6])) // Polling disabled, or returned value matches expected poll value
		{
			MAIN_Delay1MS(ByteDelay);

			InProgrammingMode = TRUE;
			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;
			return;
		}
		
		MAIN_Delay1MS(ByteDelay);
		USI_SPIToggleClock();            // Out of sync, shift in one bit and try again
    2100:	c1 50       	subi	r28, 0x01	; 1
    2102:	cf 3f       	cpi	r28, 0xFF	; 255
    2104:	09 f4       	brne	.+2      	; 0x2108 <ISPCC_EnterChipProgrammingMode+0x28>
    2106:	3f c0       	rjmp	.+126    	; 0x2186 <ISPCC_EnterChipProgrammingMode+0xa6>
    2108:	80 91 3c 01 	lds	r24, 0x013C
    210c:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    2110:	81 2f       	mov	r24, r17
    2112:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    2116:	80 91 3d 01 	lds	r24, 0x013D
    211a:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    211e:	81 2f       	mov	r24, r17
    2120:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    2124:	80 91 3e 01 	lds	r24, 0x013E
    2128:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    212c:	08 2f       	mov	r16, r24
    212e:	81 2f       	mov	r24, r17
    2130:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    2134:	80 91 3b 01 	lds	r24, 0x013B
    2138:	83 30       	cpi	r24, 0x03	; 3
    213a:	29 f4       	brne	.+10     	; 0x2146 <ISPCC_EnterChipProgrammingMode+0x66>
    213c:	80 91 3f 01 	lds	r24, 0x013F
    2140:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    2144:	05 c0       	rjmp	.+10     	; 0x2150 <ISPCC_EnterChipProgrammingMode+0x70>
    2146:	80 91 3f 01 	lds	r24, 0x013F
    214a:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    214e:	08 2f       	mov	r16, r24
    2150:	80 91 3b 01 	lds	r24, 0x013B
    2154:	88 23       	and	r24, r24
    2156:	21 f0       	breq	.+8      	; 0x2160 <ISPCC_EnterChipProgrammingMode+0x80>
    2158:	80 91 3a 01 	lds	r24, 0x013A
    215c:	08 17       	cp	r16, r24
    215e:	69 f4       	brne	.+26     	; 0x217a <ISPCC_EnterChipProgrammingMode+0x9a>
    2160:	81 2f       	mov	r24, r17
    2162:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	80 93 2f 01 	sts	0x012F, r24
    216c:	81 b3       	in	r24, 0x11	; 17
    216e:	8f 7c       	andi	r24, 0xCF	; 207
    2170:	80 62       	ori	r24, 0x20	; 32
    2172:	81 bb       	out	0x11, r24	; 17
    2174:	10 92 35 01 	sts	0x0135, r1
    2178:	0d c0       	rjmp	.+26     	; 0x2194 <ISPCC_EnterChipProgrammingMode+0xb4>
    217a:	81 2f       	mov	r24, r17
    217c:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    2180:	0e 94 c7 09 	call	0x138e <USI_SPIToggleClock>
    2184:	bd cf       	rjmp	.-134    	; 0x2100 <ISPCC_EnterChipProgrammingMode+0x20>
	}

	// If function hasn't returned by now, all the attempts have failed. Show this by
	// resetting the status leds to green (ready) and send a fail message.

	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
    2186:	81 b3       	in	r24, 0x11	; 17
    2188:	8f 7c       	andi	r24, 0xCF	; 207
    218a:	80 61       	ori	r24, 0x10	; 16
    218c:	81 bb       	out	0x11, r24	; 17
	PacketBytes[1] = STATUS_CMD_FAILED;
    218e:	80 ec       	ldi	r24, 0xC0	; 192
    2190:	80 93 35 01 	sts	0x0135, r24
    2194:	cf 91       	pop	r28
    2196:	1f 91       	pop	r17
    2198:	0f 91       	pop	r16
    219a:	08 95       	ret

0000219c <ISPCC_PollForProgComplete>:
}

void ISPCC_ProgramChip(void)
{
	uint16_t PollAddress  = 0;
	uint8_t  ProgMode     = PacketBytes[3];
	uint8_t  WriteCommand = PacketBytes[5];
	uint16_t StartAddress = (uint16_t)CurrAddress;
	uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
	                      | PacketBytes[2];
	uint8_t  PollType;
	uint8_t  ByteToWrite;
			
	if (ProgMode & ISPCC_PROG_MODE_PAGE)                 // Page writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++) // Transmit the page bytes
		{
			ByteToWrite = PacketBytes[10 + WriteByte];
		
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash write mode - word addresses so MSB/LSB masking 
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else                                         // EEPROM write mode - byte addresses so no masking 
			   USI_SPITransmit(WriteCommand);

			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Only the LSW of the address should be sent
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			if (!(PollAddress))
			{
				if ((PacketBytes[8] != ByteToWrite)       // Can do polling
				   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
				{
					PollAddress = (CurrAddress & 0xFFFF); // Save the current address
				
					if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
					   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
				}
			}

			// Flash addresses are in words; only increment address on odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();
		}

		PollType = ProgMode;

		if (ProgMode & ISPCC_PROG_MODE_PAGEDONE)         // If this packet is the end of a page, we need to send the program page command
		{
			USI_SPITransmit(PacketBytes[6]);             // Send the write program memory page command
			USI_SPITransmitWord(StartAddress);           // Send the page address word
			USI_SPITransmit(0x00);

			if (!(PollAddress))                          // No polling address
			   PollType = ((ProgMode & ~ISPCC_PAGE_POLLTYPE_MASK) | ISPCC_PAGE_POLLTYPE_WAIT);

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
	else                                                 // Flash Word writing mode or EEPROM byte writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++)
		{
			ByteToWrite = PacketBytes[10 + WriteByte];

			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else
			   USI_SPITransmit(WriteCommand);					
					
			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Transmit the current address to the slave AVR
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			PollType = ProgMode;

			if ((PacketBytes[8] != ByteToWrite)           // Can do polling
			   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
			{
				PollAddress = (CurrAddress & 0xFFFF);     // Save the current address;

				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
				   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
			}
			else
			{
				PollType = ((ProgMode & ~ISPCC_WORD_POLLTYPE_MASK) | ISPCC_WORD_POLLTYPE_WAIT);
			}					

			// Flash addresses are in words; only increment address on the odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
}

void ISPCC_PollForProgComplete(uint8_t PollData, uint16_t PollAddr)
{
    219c:	1f 93       	push	r17
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	eb 01       	movw	r28, r22
	uint8_t PollType;
	uint8_t ProgCommand;

	if (PollData & ISPCC_PROG_MODE_PAGE)
    21a4:	99 27       	eor	r25, r25
    21a6:	80 ff       	sbrs	r24, 0
    21a8:	08 c0       	rjmp	.+16     	; 0x21ba <ISPCC_PollForProgComplete+0x1e>
	   PollType = ((PollData & ISPCC_PAGE_POLLTYPE_MASK) >> ISPCC_PAGE_POLLTYPE_MASKSHIFT);
    21aa:	80 77       	andi	r24, 0x70	; 112
    21ac:	90 70       	andi	r25, 0x00	; 0
    21ae:	34 e0       	ldi	r19, 0x04	; 4
    21b0:	95 95       	asr	r25
    21b2:	87 95       	ror	r24
    21b4:	3a 95       	dec	r19
    21b6:	e1 f7       	brne	.-8      	; 0x21b0 <ISPCC_PollForProgComplete+0x14>
    21b8:	04 c0       	rjmp	.+8      	; 0x21c2 <ISPCC_PollForProgComplete+0x26>
	else
	   PollType = ((PollData & ISPCC_WORD_POLLTYPE_MASK) >> ISPCC_WORD_POLLTYPE_MASKSHIFT);	
    21ba:	8e 70       	andi	r24, 0x0E	; 14
    21bc:	90 70       	andi	r25, 0x00	; 0
    21be:	95 95       	asr	r25
    21c0:	87 95       	ror	r24

	switch (PollType & ISPCC_POLLTYPE_MASK)
    21c2:	99 27       	eor	r25, r25
    21c4:	87 70       	andi	r24, 0x07	; 7
    21c6:	90 70       	andi	r25, 0x00	; 0
    21c8:	82 30       	cpi	r24, 0x02	; 2
    21ca:	91 05       	cpc	r25, r1
    21cc:	19 f0       	breq	.+6      	; 0x21d4 <ISPCC_PollForProgComplete+0x38>
    21ce:	04 97       	sbiw	r24, 0x04	; 4
    21d0:	e1 f0       	breq	.+56     	; 0x220a <ISPCC_PollForProgComplete+0x6e>
    21d2:	26 c0       	rjmp	.+76     	; 0x2220 <ISPCC_PollForProgComplete+0x84>
	{
		case ISPCC_POLLTYPE_DATA:
			ProgCommand = PacketBytes[7];
    21d4:	10 91 3b 01 	lds	r17, 0x013B
			
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash uses word addresses
    21d8:	80 91 34 01 	lds	r24, 0x0134
    21dc:	83 31       	cpi	r24, 0x13	; 19
    21de:	39 f4       	brne	.+14     	; 0x21ee <ISPCC_PollForProgComplete+0x52>
			{
				ProgCommand  |= ((PollAddr & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ);
    21e0:	81 2f       	mov	r24, r17
    21e2:	99 27       	eor	r25, r25
    21e4:	c0 fd       	sbrc	r28, 0
    21e6:	88 60       	ori	r24, 0x08	; 8
    21e8:	18 2f       	mov	r17, r24
				PollAddr    >>= 1;
    21ea:	d6 95       	lsr	r29
    21ec:	c7 95       	ror	r28
			}

			do
			{
				USI_SPITransmit(ProgCommand);
    21ee:	81 2f       	mov	r24, r17
    21f0:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
				USI_SPITransmitWord(PollAddr);
    21f4:	ce 01       	movw	r24, r28
    21f6:	0e 94 b9 09 	call	0x1372 <USI_SPITransmitWord>
			}
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    2200:	90 91 3c 01 	lds	r25, 0x013C
    2204:	89 17       	cp	r24, r25
    2206:	99 f3       	breq	.-26     	; 0x21ee <ISPCC_PollForProgComplete+0x52>
			while (USI_SPITransmit(0x00) == PacketBytes[8]);
						
			break;
    2208:	0f c0       	rjmp	.+30     	; 0x2228 <ISPCC_PollForProgComplete+0x8c>
		case ISPCC_POLLTYPE_READY:
			do
			   USI_SPITransmitWord(0xF000);
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 ef       	ldi	r25, 0xF0	; 240
    220e:	0e 94 b9 09 	call	0x1372 <USI_SPITransmitWord>
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	0e 94 b9 09 	call	0x1372 <USI_SPITransmitWord>
    221a:	80 fd       	sbrc	r24, 0
    221c:	f6 cf       	rjmp	.-20     	; 0x220a <ISPCC_PollForProgComplete+0x6e>
			while (USI_SPITransmitWord(0x0000) & ISPCC_POLL_BUSYFLAG);

			break;
    221e:	04 c0       	rjmp	.+8      	; 0x2228 <ISPCC_PollForProgComplete+0x8c>
		default:                                      // Default is Wait polling
			MAIN_Delay1MS(PacketBytes[4]);	
    2220:	80 91 38 01 	lds	r24, 0x0138
    2224:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	08 95       	ret

00002230 <ISPCC_ProgramChip>:
    2230:	6f 92       	push	r6
    2232:	7f 92       	push	r7
    2234:	9f 92       	push	r9
    2236:	af 92       	push	r10
    2238:	bf 92       	push	r11
    223a:	cf 92       	push	r12
    223c:	df 92       	push	r13
    223e:	ef 92       	push	r14
    2240:	ff 92       	push	r15
    2242:	0f 93       	push	r16
    2244:	1f 93       	push	r17
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	00 e0       	ldi	r16, 0x00	; 0
    224c:	10 e0       	ldi	r17, 0x00	; 0
    224e:	90 90 37 01 	lds	r9, 0x0137
    2252:	c0 90 39 01 	lds	r12, 0x0139
    2256:	60 90 2b 01 	lds	r6, 0x012B
    225a:	70 90 2c 01 	lds	r7, 0x012C
    225e:	80 91 35 01 	lds	r24, 0x0135
    2262:	99 27       	eor	r25, r25
    2264:	b8 2e       	mov	r11, r24
    2266:	aa 24       	eor	r10, r10
    2268:	80 91 36 01 	lds	r24, 0x0136
    226c:	99 27       	eor	r25, r25
    226e:	a8 2a       	or	r10, r24
    2270:	b9 2a       	or	r11, r25
    2272:	90 fe       	sbrs	r9, 0
    2274:	62 c0       	rjmp	.+196    	; 0x233a <ISPCC_ProgramChip+0x10a>
    2276:	78 01       	movw	r14, r16
    2278:	0a 15       	cp	r16, r10
    227a:	1b 05       	cpc	r17, r11
    227c:	08 f0       	brcs	.+2      	; 0x2280 <ISPCC_ProgramChip+0x50>
    227e:	46 c0       	rjmp	.+140    	; 0x230c <ISPCC_ProgramChip+0xdc>
    2280:	ce e3       	ldi	r28, 0x3E	; 62
    2282:	d1 e0       	ldi	r29, 0x01	; 1
    2284:	d9 90       	ld	r13, Y+
    2286:	80 91 34 01 	lds	r24, 0x0134
    228a:	83 31       	cpi	r24, 0x13	; 19
    228c:	31 f4       	brne	.+12     	; 0x229a <ISPCC_ProgramChip+0x6a>
    228e:	8c 2d       	mov	r24, r12
    2290:	99 27       	eor	r25, r25
    2292:	e0 fe       	sbrs	r14, 0
    2294:	03 c0       	rjmp	.+6      	; 0x229c <ISPCC_ProgramChip+0x6c>
    2296:	88 60       	ori	r24, 0x08	; 8
    2298:	01 c0       	rjmp	.+2      	; 0x229c <ISPCC_ProgramChip+0x6c>
    229a:	8c 2d       	mov	r24, r12
    229c:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    22a0:	80 91 2b 01 	lds	r24, 0x012B
    22a4:	90 91 2c 01 	lds	r25, 0x012C
    22a8:	0e 94 b9 09 	call	0x1372 <USI_SPITransmitWord>
    22ac:	8d 2d       	mov	r24, r13
    22ae:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    22b2:	01 15       	cp	r16, r1
    22b4:	11 05       	cpc	r17, r1
    22b6:	d9 f4       	brne	.+54     	; 0x22ee <ISPCC_ProgramChip+0xbe>
    22b8:	80 91 3c 01 	lds	r24, 0x013C
    22bc:	8d 15       	cp	r24, r13
    22be:	b9 f0       	breq	.+46     	; 0x22ee <ISPCC_ProgramChip+0xbe>
    22c0:	90 91 34 01 	lds	r25, 0x0134
    22c4:	93 31       	cpi	r25, 0x13	; 19
    22c6:	31 f0       	breq	.+12     	; 0x22d4 <ISPCC_ProgramChip+0xa4>
    22c8:	95 31       	cpi	r25, 0x15	; 21
    22ca:	89 f4       	brne	.+34     	; 0x22ee <ISPCC_ProgramChip+0xbe>
    22cc:	80 91 3d 01 	lds	r24, 0x013D
    22d0:	8d 15       	cp	r24, r13
    22d2:	69 f0       	breq	.+26     	; 0x22ee <ISPCC_ProgramChip+0xbe>
    22d4:	00 91 2b 01 	lds	r16, 0x012B
    22d8:	10 91 2c 01 	lds	r17, 0x012C
    22dc:	93 31       	cpi	r25, 0x13	; 19
    22de:	39 f4       	brne	.+14     	; 0x22ee <ISPCC_ProgramChip+0xbe>
    22e0:	00 0f       	add	r16, r16
    22e2:	11 1f       	adc	r17, r17
    22e4:	c7 01       	movw	r24, r14
    22e6:	81 70       	andi	r24, 0x01	; 1
    22e8:	90 70       	andi	r25, 0x00	; 0
    22ea:	08 0f       	add	r16, r24
    22ec:	19 1f       	adc	r17, r25
    22ee:	e0 fc       	sbrc	r14, 0
    22f0:	04 c0       	rjmp	.+8      	; 0x22fa <ISPCC_ProgramChip+0xca>
    22f2:	80 91 34 01 	lds	r24, 0x0134
    22f6:	85 31       	cpi	r24, 0x15	; 21
    22f8:	11 f4       	brne	.+4      	; 0x22fe <ISPCC_ProgramChip+0xce>
    22fa:	0e 94 d9 0e 	call	0x1db2 <V2P_IncrementCurrAddress>
    22fe:	08 94       	sec
    2300:	e1 1c       	adc	r14, r1
    2302:	f1 1c       	adc	r15, r1
    2304:	ea 14       	cp	r14, r10
    2306:	fb 04       	cpc	r15, r11
    2308:	08 f4       	brcc	.+2      	; 0x230c <ISPCC_ProgramChip+0xdc>
    230a:	bc cf       	rjmp	.-136    	; 0x2284 <ISPCC_ProgramChip+0x54>
    230c:	c9 2d       	mov	r28, r9
    230e:	97 fe       	sbrs	r9, 7
    2310:	69 c0       	rjmp	.+210    	; 0x23e4 <ISPCC_ProgramChip+0x1b4>
    2312:	80 91 3a 01 	lds	r24, 0x013A
    2316:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    231a:	c3 01       	movw	r24, r6
    231c:	0e 94 b9 09 	call	0x1372 <USI_SPITransmitWord>
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    2326:	01 15       	cp	r16, r1
    2328:	11 05       	cpc	r17, r1
    232a:	11 f4       	brne	.+4      	; 0x2330 <ISPCC_ProgramChip+0x100>
    232c:	cf 78       	andi	r28, 0x8F	; 143
    232e:	c0 61       	ori	r28, 0x10	; 16
    2330:	b8 01       	movw	r22, r16
    2332:	8c 2f       	mov	r24, r28
    2334:	0e 94 ce 10 	call	0x219c <ISPCC_PollForProgComplete>
    2338:	55 c0       	rjmp	.+170    	; 0x23e4 <ISPCC_ProgramChip+0x1b4>
    233a:	78 01       	movw	r14, r16
    233c:	0a 15       	cp	r16, r10
    233e:	1b 05       	cpc	r17, r11
    2340:	08 f0       	brcs	.+2      	; 0x2344 <ISPCC_ProgramChip+0x114>
    2342:	50 c0       	rjmp	.+160    	; 0x23e4 <ISPCC_ProgramChip+0x1b4>
    2344:	5e e3       	ldi	r21, 0x3E	; 62
    2346:	65 2e       	mov	r6, r21
    2348:	51 e0       	ldi	r21, 0x01	; 1
    234a:	75 2e       	mov	r7, r21
    234c:	f3 01       	movw	r30, r6
    234e:	d1 90       	ld	r13, Z+
    2350:	3f 01       	movw	r6, r30
    2352:	80 91 34 01 	lds	r24, 0x0134
    2356:	83 31       	cpi	r24, 0x13	; 19
    2358:	31 f4       	brne	.+12     	; 0x2366 <ISPCC_ProgramChip+0x136>
    235a:	8c 2d       	mov	r24, r12
    235c:	99 27       	eor	r25, r25
    235e:	e0 fe       	sbrs	r14, 0
    2360:	03 c0       	rjmp	.+6      	; 0x2368 <ISPCC_ProgramChip+0x138>
    2362:	88 60       	ori	r24, 0x08	; 8
    2364:	01 c0       	rjmp	.+2      	; 0x2368 <ISPCC_ProgramChip+0x138>
    2366:	8c 2d       	mov	r24, r12
    2368:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    236c:	80 91 2b 01 	lds	r24, 0x012B
    2370:	90 91 2c 01 	lds	r25, 0x012C
    2374:	0e 94 b9 09 	call	0x1372 <USI_SPITransmitWord>
    2378:	8d 2d       	mov	r24, r13
    237a:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    237e:	c9 2d       	mov	r28, r9
    2380:	80 91 3c 01 	lds	r24, 0x013C
    2384:	8d 15       	cp	r24, r13
    2386:	c1 f0       	breq	.+48     	; 0x23b8 <ISPCC_ProgramChip+0x188>
    2388:	90 91 34 01 	lds	r25, 0x0134
    238c:	93 31       	cpi	r25, 0x13	; 19
    238e:	31 f0       	breq	.+12     	; 0x239c <ISPCC_ProgramChip+0x16c>
    2390:	95 31       	cpi	r25, 0x15	; 21
    2392:	91 f4       	brne	.+36     	; 0x23b8 <ISPCC_ProgramChip+0x188>
    2394:	80 91 3d 01 	lds	r24, 0x013D
    2398:	8d 15       	cp	r24, r13
    239a:	71 f0       	breq	.+28     	; 0x23b8 <ISPCC_ProgramChip+0x188>
    239c:	00 91 2b 01 	lds	r16, 0x012B
    23a0:	10 91 2c 01 	lds	r17, 0x012C
    23a4:	93 31       	cpi	r25, 0x13	; 19
    23a6:	59 f4       	brne	.+22     	; 0x23be <ISPCC_ProgramChip+0x18e>
    23a8:	00 0f       	add	r16, r16
    23aa:	11 1f       	adc	r17, r17
    23ac:	c7 01       	movw	r24, r14
    23ae:	81 70       	andi	r24, 0x01	; 1
    23b0:	90 70       	andi	r25, 0x00	; 0
    23b2:	08 0f       	add	r16, r24
    23b4:	19 1f       	adc	r17, r25
    23b6:	03 c0       	rjmp	.+6      	; 0x23be <ISPCC_ProgramChip+0x18e>
    23b8:	c9 2d       	mov	r28, r9
    23ba:	c1 7f       	andi	r28, 0xF1	; 241
    23bc:	c2 60       	ori	r28, 0x02	; 2
    23be:	e0 fc       	sbrc	r14, 0
    23c0:	04 c0       	rjmp	.+8      	; 0x23ca <ISPCC_ProgramChip+0x19a>
    23c2:	80 91 34 01 	lds	r24, 0x0134
    23c6:	85 31       	cpi	r24, 0x15	; 21
    23c8:	11 f4       	brne	.+4      	; 0x23ce <ISPCC_ProgramChip+0x19e>
    23ca:	0e 94 d9 0e 	call	0x1db2 <V2P_IncrementCurrAddress>
    23ce:	b8 01       	movw	r22, r16
    23d0:	8c 2f       	mov	r24, r28
    23d2:	0e 94 ce 10 	call	0x219c <ISPCC_PollForProgComplete>
    23d6:	08 94       	sec
    23d8:	e1 1c       	adc	r14, r1
    23da:	f1 1c       	adc	r15, r1
    23dc:	ea 14       	cp	r14, r10
    23de:	fb 04       	cpc	r15, r11
    23e0:	08 f4       	brcc	.+2      	; 0x23e4 <ISPCC_ProgramChip+0x1b4>
    23e2:	b4 cf       	rjmp	.-152    	; 0x234c <ISPCC_ProgramChip+0x11c>
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	1f 91       	pop	r17
    23ea:	0f 91       	pop	r16
    23ec:	ff 90       	pop	r15
    23ee:	ef 90       	pop	r14
    23f0:	df 90       	pop	r13
    23f2:	cf 90       	pop	r12
    23f4:	bf 90       	pop	r11
    23f6:	af 90       	pop	r10
    23f8:	9f 90       	pop	r9
    23fa:	7f 90       	pop	r7
    23fc:	6f 90       	pop	r6
    23fe:	08 95       	ret

00002400 <AICI_InterpretPacket>:

// ======================================================================================

void AICI_InterpretPacket(void)
{
    2400:	df 92       	push	r13
    2402:	ef 92       	push	r14
    2404:	ff 92       	push	r15
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
	switch (PacketBytes[0])
    240e:	80 91 34 01 	lds	r24, 0x0134
    2412:	99 27       	eor	r25, r25
    2414:	86 31       	cpi	r24, 0x16	; 22
    2416:	91 05       	cpc	r25, r1
    2418:	09 f4       	brne	.+2      	; 0x241c <AICI_InterpretPacket+0x1c>
    241a:	fa c0       	rjmp	.+500    	; 0x2610 <AICI_InterpretPacket+0x210>
    241c:	87 31       	cpi	r24, 0x17	; 23
    241e:	91 05       	cpc	r25, r1
    2420:	94 f4       	brge	.+36     	; 0x2446 <AICI_InterpretPacket+0x46>
    2422:	82 31       	cpi	r24, 0x12	; 18
    2424:	91 05       	cpc	r25, r1
    2426:	09 f4       	brne	.+2      	; 0x242a <AICI_InterpretPacket+0x2a>
    2428:	5f c0       	rjmp	.+190    	; 0x24e8 <AICI_InterpretPacket+0xe8>
    242a:	83 31       	cpi	r24, 0x13	; 19
    242c:	91 05       	cpc	r25, r1
    242e:	3c f4       	brge	.+14     	; 0x243e <AICI_InterpretPacket+0x3e>
    2430:	80 31       	cpi	r24, 0x10	; 16
    2432:	91 05       	cpc	r25, r1
    2434:	f9 f0       	breq	.+62     	; 0x2474 <AICI_InterpretPacket+0x74>
    2436:	41 97       	sbiw	r24, 0x11	; 17
    2438:	09 f4       	brne	.+2      	; 0x243c <AICI_InterpretPacket+0x3c>
    243a:	3c c0       	rjmp	.+120    	; 0x24b4 <AICI_InterpretPacket+0xb4>
    243c:	3d c1       	rjmp	.+634    	; 0x26b8 <AICI_InterpretPacket+0x2b8>
    243e:	44 97       	sbiw	r24, 0x14	; 20
    2440:	09 f4       	brne	.+2      	; 0x2444 <AICI_InterpretPacket+0x44>
    2442:	e6 c0       	rjmp	.+460    	; 0x2610 <AICI_InterpretPacket+0x210>
    2444:	2e c1       	rjmp	.+604    	; 0x26a2 <AICI_InterpretPacket+0x2a2>
    2446:	89 31       	cpi	r24, 0x19	; 25
    2448:	91 05       	cpc	r25, r1
    244a:	09 f4       	brne	.+2      	; 0x244e <AICI_InterpretPacket+0x4e>
    244c:	cb c0       	rjmp	.+406    	; 0x25e4 <AICI_InterpretPacket+0x1e4>
    244e:	8a 31       	cpi	r24, 0x1A	; 26
    2450:	91 05       	cpc	r25, r1
    2452:	44 f4       	brge	.+16     	; 0x2464 <AICI_InterpretPacket+0x64>
    2454:	87 31       	cpi	r24, 0x17	; 23
    2456:	91 05       	cpc	r25, r1
    2458:	09 f4       	brne	.+2      	; 0x245c <AICI_InterpretPacket+0x5c>
    245a:	c4 c0       	rjmp	.+392    	; 0x25e4 <AICI_InterpretPacket+0x1e4>
    245c:	48 97       	sbiw	r24, 0x18	; 24
    245e:	09 f4       	brne	.+2      	; 0x2462 <AICI_InterpretPacket+0x62>
    2460:	a4 c0       	rjmp	.+328    	; 0x25aa <AICI_InterpretPacket+0x1aa>
    2462:	2a c1       	rjmp	.+596    	; 0x26b8 <AICI_InterpretPacket+0x2b8>
    2464:	8d 31       	cpi	r24, 0x1D	; 29
    2466:	91 05       	cpc	r25, r1
    2468:	0c f4       	brge	.+2      	; 0x246c <AICI_InterpretPacket+0x6c>
    246a:	9f c0       	rjmp	.+318    	; 0x25aa <AICI_InterpretPacket+0x1aa>
    246c:	4d 97       	sbiw	r24, 0x1d	; 29
    246e:	09 f4       	brne	.+2      	; 0x2472 <AICI_InterpretPacket+0x72>
    2470:	60 c0       	rjmp	.+192    	; 0x2532 <AICI_InterpretPacket+0x132>
    2472:	22 c1       	rjmp	.+580    	; 0x26b8 <AICI_InterpretPacket+0x2b8>
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	90 93 31 01 	sts	0x0131, r25
    247c:	80 93 30 01 	sts	0x0130, r24
			
			USI_SPIInitMaster(eeprom_read_byte_169(&Param_SCKDuration));
    2480:	80 e2       	ldi	r24, 0x20	; 32
    2482:	91 e0       	ldi	r25, 0x01	; 1
    2484:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    2488:	0e 94 8c 09 	call	0x1318 <USI_SPIInitMaster>

			MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);  // Pull the slave AVR's RESET line to active
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
			MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE); // Orange = Busy
    2492:	81 b3       	in	r24, 0x11	; 17
    2494:	80 63       	ori	r24, 0x30	; 48
    2496:	81 bb       	out	0x11, r24	; 17
			ISPCC_EnterChipProgrammingMode();       // Run the Enter Programming Mode routine
    2498:	0e 94 70 10 	call	0x20e0 <ISPCC_EnterChipProgrammingMode>

			if (InProgrammingMode)
    249c:	80 91 2f 01 	lds	r24, 0x012F
    24a0:	88 23       	and	r24, r24
    24a2:	19 f0       	breq	.+6      	; 0x24aa <AICI_InterpretPacket+0xaa>
			   LCD_puts_f(AVRISPModeMessage);
    24a4:	83 ef       	ldi	r24, 0xF3	; 243
    24a6:	93 e0       	ldi	r25, 0x03	; 3
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <AICI_InterpretPacket+0xae>
			else
			   LCD_puts_f(SyncErrorMessage);
    24aa:	88 ee       	ldi	r24, 0xE8	; 232
    24ac:	93 e0       	ldi	r25, 0x03	; 3
    24ae:	0e 94 fe 07 	call	0xffc <LCD_puts_f>
			
			break;
    24b2:	0b c1       	rjmp	.+534    	; 0x26ca <AICI_InterpretPacket+0x2ca>
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	90 93 31 01 	sts	0x0131, r25
    24bc:	80 93 30 01 	sts	0x0130, r24

			MAIN_Delay1MS(PacketBytes[1]);           // Wait for the "PreDelay" amount specified in the packet
    24c0:	80 91 35 01 	lds	r24, 0x0135
    24c4:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Non programming mode = green status led
    24c8:	81 b3       	in	r24, 0x11	; 17
    24ca:	8f 7c       	andi	r24, 0xCF	; 207
    24cc:	80 61       	ori	r24, 0x10	; 16
    24ce:	81 bb       	out	0x11, r24	; 17
			InProgrammingMode = FALSE;
    24d0:	10 92 2f 01 	sts	0x012F, r1
			MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	0e 94 1b 03 	call	0x636 <MAIN_ResetCSLine>
			MAIN_Delay1MS(PacketBytes[2]);           // Wait for the "PostDelay" amount specified in the packet
    24da:	80 91 36 01 	lds	r24, 0x0136
    24de:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
			
			USI_SPIOff();
    24e2:	0e 94 9c 09 	call	0x1338 <USI_SPIOff>
    24e6:	e5 c0       	rjmp	.+458    	; 0x26b2 <AICI_InterpretPacket+0x2b2>

			PacketBytes[1] = STATUS_CMD_OK;      // Return OK

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;
    24e8:	82 e0       	ldi	r24, 0x02	; 2
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	90 93 31 01 	sts	0x0131, r25
    24f0:	80 93 30 01 	sts	0x0130, r24
			
			for (uint8_t PacketB = 3; PacketB <= 6; PacketB++) // Send the erase commands to the slave AVR
    24f4:	c3 e0       	ldi	r28, 0x03	; 3
    24f6:	07 e3       	ldi	r16, 0x37	; 55
    24f8:	11 e0       	ldi	r17, 0x01	; 1
				USI_SPITransmit(PacketBytes[PacketB]);
    24fa:	f8 01       	movw	r30, r16
    24fc:	81 91       	ld	r24, Z+
    24fe:	8f 01       	movw	r16, r30
    2500:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    2504:	c1 50       	subi	r28, 0x01	; 1
    2506:	c7 ff       	sbrs	r28, 7
    2508:	f8 cf       	rjmp	.-16     	; 0x24fa <AICI_InterpretPacket+0xfa>

			if (PacketBytes[2])                  // Poll mode, value of 1 indicates a busy flag wait
    250a:	80 91 36 01 	lds	r24, 0x0136
    250e:	88 23       	and	r24, r24
    2510:	59 f0       	breq	.+22     	; 0x2528 <AICI_InterpretPacket+0x128>
			{
				do
					USI_SPITransmitWord(0xF000);
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 ef       	ldi	r25, 0xF0	; 240
    2516:	0e 94 b9 09 	call	0x1372 <USI_SPITransmitWord>
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	0e 94 b9 09 	call	0x1372 <USI_SPITransmitWord>
    2522:	80 fd       	sbrc	r24, 0
    2524:	f6 cf       	rjmp	.-20     	; 0x2512 <AICI_InterpretPacket+0x112>
    2526:	c5 c0       	rjmp	.+394    	; 0x26b2 <AICI_InterpretPacket+0x2b2>
				while (USI_SPITransmitWord(0x0000) & 0x01);
			}
			else                                // Poll mode flag of 0 indicates a predefined delay
			{
				MAIN_Delay1MS(PacketBytes[1]);   // Wait the specified interval to ensure erase complete
    2528:	80 91 35 01 	lds	r24, 0x0135
    252c:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    2530:	c0 c0       	rjmp	.+384    	; 0x26b2 <AICI_InterpretPacket+0x2b2>
			}
			
			PacketBytes[1] = STATUS_CMD_OK;      // Always return OK
			
			break;
		case CMD_SPI_MULTI:
				MessageSize = (3 + PacketBytes[2]);    // Number of recieved bytes, plus two OKs and the command byte
    2532:	e0 90 36 01 	lds	r14, 0x0136
    2536:	8e 2d       	mov	r24, r14
    2538:	99 27       	eor	r25, r25
    253a:	03 96       	adiw	r24, 0x03	; 3
    253c:	90 93 31 01 	sts	0x0131, r25
    2540:	80 93 30 01 	sts	0x0130, r24
		
				uint8_t TxBytes      = PacketBytes[1]; // \. The packet data is overwritten during the transfer. Because
    2544:	00 91 35 01 	lds	r16, 0x0135
				uint8_t RxStartByte  = PacketBytes[2]; // |  of this each data byte must be stored into temp variables
				uint8_t RxBytes      = PacketBytes[3]; // /  so that their contents are not lost.
    2548:	f0 90 37 01 	lds	r15, 0x0137
				uint8_t RxByteNum    = 1;
    254c:	c1 e0       	ldi	r28, 0x01	; 1
				uint8_t TxByteNum    = 1;
				uint8_t RecievedByte = 0;

				while (TxByteNum++ < TxBytes)          // Still bytes to transfer
				{
					RecievedByte = USI_SPITransmit(PacketBytes[3 + TxByteNum]); // Transmit the byte, store the answer

					if ((TxByteNum >= RxStartByte) && (RxByteNum < RxBytes))
					   PacketBytes[2 + RxByteNum++] = RecievedByte;
    254e:	12 e0       	ldi	r17, 0x02	; 2
    2550:	c0 17       	cp	r28, r16
    2552:	a8 f4       	brcc	.+42     	; 0x257e <AICI_InterpretPacket+0x17e>
    2554:	e1 2f       	mov	r30, r17
    2556:	ff 27       	eor	r31, r31
    2558:	ec 5c       	subi	r30, 0xCC	; 204
    255a:	fe 4f       	sbci	r31, 0xFE	; 254
    255c:	83 81       	ldd	r24, Z+3	; 0x03
    255e:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    2562:	1e 15       	cp	r17, r14
    2564:	40 f0       	brcs	.+16     	; 0x2576 <AICI_InterpretPacket+0x176>
    2566:	cf 15       	cp	r28, r15
    2568:	30 f4       	brcc	.+12     	; 0x2576 <AICI_InterpretPacket+0x176>
    256a:	ec 2f       	mov	r30, r28
    256c:	ff 27       	eor	r31, r31
    256e:	ec 5c       	subi	r30, 0xCC	; 204
    2570:	fe 4f       	sbci	r31, 0xFE	; 254
    2572:	82 83       	std	Z+2, r24	; 0x02
    2574:	cf 5f       	subi	r28, 0xFF	; 255
    2576:	81 2f       	mov	r24, r17
    2578:	1f 5f       	subi	r17, 0xFF	; 255
    257a:	80 17       	cp	r24, r16
    257c:	58 f3       	brcs	.-42     	; 0x2554 <AICI_InterpretPacket+0x154>
				}

				while (RxByteNum++ < RxBytes)                         // Still more bytes to recieve
				   PacketBytes[2 + RxByteNum] = USI_SPITransmit(0x00); // its answer to be recorded (or more bytes than sent need responses), send dummy bytes to fetch the response(s)
    257e:	8c 2f       	mov	r24, r28
    2580:	cf 5f       	subi	r28, 0xFF	; 255
    2582:	8f 15       	cp	r24, r15
    2584:	50 f4       	brcc	.+20     	; 0x259a <AICI_InterpretPacket+0x19a>
    2586:	0c 2f       	mov	r16, r28
    2588:	11 27       	eor	r17, r17
    258a:	0c 5c       	subi	r16, 0xCC	; 204
    258c:	1e 4f       	sbci	r17, 0xFE	; 254
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    2594:	f8 01       	movw	r30, r16
    2596:	82 83       	std	Z+2, r24	; 0x02
    2598:	f2 cf       	rjmp	.-28     	; 0x257e <AICI_InterpretPacket+0x17e>

				PacketBytes[1]             = STATUS_CMD_OK; // Data should be encompassed
    259a:	10 92 35 01 	sts	0x0135, r1
				PacketBytes[3 + RxByteNum] = STATUS_CMD_OK; //  by STATS_CMD_OKs
    259e:	ec 2f       	mov	r30, r28
    25a0:	ff 27       	eor	r31, r31
    25a2:	ec 5c       	subi	r30, 0xCC	; 204
    25a4:	fe 4f       	sbci	r31, 0xFE	; 254
    25a6:	13 82       	std	Z+3, r1	; 0x03

				break;
    25a8:	90 c0       	rjmp	.+288    	; 0x26ca <AICI_InterpretPacket+0x2ca>
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;
    25aa:	84 e0       	ldi	r24, 0x04	; 4
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	90 93 31 01 	sts	0x0131, r25
    25b2:	80 93 30 01 	sts	0x0130, r24
	
			for (uint8_t ByteNum = 1; ByteNum <= 4; ByteNum++)
    25b6:	c1 e0       	ldi	r28, 0x01	; 1
    25b8:	06 e3       	ldi	r16, 0x36	; 54
    25ba:	11 e0       	ldi	r17, 0x01	; 1
			{
				uint8_t Response = USI_SPITransmit(PacketBytes[1 + ByteNum]); // Transmit the four signature request bytes
    25bc:	f8 01       	movw	r30, r16
    25be:	81 91       	ld	r24, Z+
    25c0:	8f 01       	movw	r16, r30
    25c2:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    25c6:	98 2f       	mov	r25, r24

				if (ByteNum == PacketBytes[1])         // If the current byte is the requested signature byte, save the reponse in the packet
    25c8:	80 91 35 01 	lds	r24, 0x0135
    25cc:	c8 17       	cp	r28, r24
    25ce:	11 f4       	brne	.+4      	; 0x25d4 <AICI_InterpretPacket+0x1d4>
					PacketBytes[2] = Response;
    25d0:	90 93 36 01 	sts	0x0136, r25
    25d4:	cf 5f       	subi	r28, 0xFF	; 255
    25d6:	c5 30       	cpi	r28, 0x05	; 5
    25d8:	88 f3       	brcs	.-30     	; 0x25bc <AICI_InterpretPacket+0x1bc>
			}

			PacketBytes[1] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    25da:	10 92 35 01 	sts	0x0135, r1
			PacketBytes[3] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    25de:	10 92 37 01 	sts	0x0137, r1

			break;
    25e2:	73 c0       	rjmp	.+230    	; 0x26ca <AICI_InterpretPacket+0x2ca>
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;
    25e4:	83 e0       	ldi	r24, 0x03	; 3
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	90 93 31 01 	sts	0x0131, r25
    25ec:	80 93 30 01 	sts	0x0130, r24
    25f0:	05 e3       	ldi	r16, 0x35	; 53
    25f2:	11 e0       	ldi	r17, 0x01	; 1
    25f4:	c3 e0       	ldi	r28, 0x03	; 3
			
			for (uint8_t PacketB = 1; PacketB <= 4; PacketB++) // Send the lock-byte values to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    25f6:	f8 01       	movw	r30, r16
    25f8:	81 91       	ld	r24, Z+
    25fa:	8f 01       	movw	r16, r30
    25fc:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    2600:	c1 50       	subi	r28, 0x01	; 1
    2602:	c7 ff       	sbrs	r28, 7
    2604:	f8 cf       	rjmp	.-16     	; 0x25f6 <AICI_InterpretPacket+0x1f6>

			PacketBytes[1] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    2606:	10 92 35 01 	sts	0x0135, r1
			PacketBytes[2] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    260a:	10 92 36 01 	sts	0x0136, r1

			break;
    260e:	5d c0       	rjmp	.+186    	; 0x26ca <AICI_InterpretPacket+0x2ca>
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			MessageSize = 0;                           // Here to prevent compiler from complaining if a var dec appears straight after a case

			uint8_t  ReadCommand = PacketBytes[3];
    2610:	d0 90 37 01 	lds	r13, 0x0137
			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8) // Load in the number of bytes that is to
    2614:	80 91 35 01 	lds	r24, 0x0135
    2618:	99 27       	eor	r25, r25
    261a:	d8 2f       	mov	r29, r24
    261c:	cc 27       	eor	r28, r28
    261e:	80 91 36 01 	lds	r24, 0x0136
    2622:	99 27       	eor	r25, r25
    2624:	c8 2b       	or	r28, r24
    2626:	d9 2b       	or	r29, r25
			                     | PacketBytes[2];                 // be read into a temp variable (MSB first)

			MessageSize = BytesToRead + 3;
    2628:	23 96       	adiw	r28, 0x03	; 3
    262a:	d0 93 31 01 	sts	0x0131, r29
    262e:	c0 93 30 01 	sts	0x0130, r28
    2632:	23 97       	sbiw	r28, 0x03	; 3

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
    2634:	00 e0       	ldi	r16, 0x00	; 0
    2636:	10 e0       	ldi	r17, 0x00	; 0
    2638:	0c 17       	cp	r16, r28
    263a:	1d 07       	cpc	r17, r29
    263c:	60 f5       	brcc	.+88     	; 0x2696 <AICI_InterpretPacket+0x296>
    263e:	86 e3       	ldi	r24, 0x36	; 54
    2640:	e8 2e       	mov	r14, r24
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	f8 2e       	mov	r15, r24
			{
				if (PacketBytes[0] == CMD_READ_FLASH_ISP)  // Flash read mode - word addresses so MSB/LSB masking nessesary
    2646:	80 91 34 01 	lds	r24, 0x0134
    264a:	84 31       	cpi	r24, 0x14	; 20
    264c:	31 f4       	brne	.+12     	; 0x265a <AICI_InterpretPacket+0x25a>
				{
					USI_SPITransmit(ReadCommand | ((ReadByte & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ));
    264e:	8d 2d       	mov	r24, r13
    2650:	99 27       	eor	r25, r25
    2652:	00 ff       	sbrs	r16, 0
    2654:	03 c0       	rjmp	.+6      	; 0x265c <AICI_InterpretPacket+0x25c>
    2656:	88 60       	ori	r24, 0x08	; 8
    2658:	01 c0       	rjmp	.+2      	; 0x265c <AICI_InterpretPacket+0x25c>
				}
				else                                       // EEPROM read mode, address is in bytes and so no masking nessesary
				{
					USI_SPITransmit(ReadCommand);
    265a:	8d 2d       	mov	r24, r13
    265c:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
				}
				
				USI_SPITransmitWord(CurrAddress);          // Transmit the current address to the slave AVR
    2660:	80 91 2b 01 	lds	r24, 0x012B
    2664:	90 91 2c 01 	lds	r25, 0x012C
    2668:	0e 94 b9 09 	call	0x1372 <USI_SPITransmitWord>

				PacketBytes[2 + ReadByte] = USI_SPITransmit(0x00); // Read in the byte stored at the requested location
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    2672:	f7 01       	movw	r30, r14
    2674:	80 83       	st	Z, r24

				if ((ReadByte & 0x01) || (PacketBytes[0] == CMD_READ_EEPROM_ISP)) // Flash addresses are given in words; only increment on the odd byte if reading the flash.
    2676:	00 fd       	sbrc	r16, 0
    2678:	04 c0       	rjmp	.+8      	; 0x2682 <AICI_InterpretPacket+0x282>
    267a:	80 91 34 01 	lds	r24, 0x0134
    267e:	86 31       	cpi	r24, 0x16	; 22
    2680:	11 f4       	brne	.+4      	; 0x2686 <AICI_InterpretPacket+0x286>
				{
					V2P_IncrementCurrAddress();             // Increment the address counter
    2682:	0e 94 d9 0e 	call	0x1db2 <V2P_IncrementCurrAddress>
    2686:	0f 5f       	subi	r16, 0xFF	; 255
    2688:	1f 4f       	sbci	r17, 0xFF	; 255
    268a:	08 94       	sec
    268c:	e1 1c       	adc	r14, r1
    268e:	f1 1c       	adc	r15, r1
    2690:	0c 17       	cp	r16, r28
    2692:	1d 07       	cpc	r17, r29
    2694:	c0 f2       	brcs	.-80     	; 0x2646 <AICI_InterpretPacket+0x246>
				}
				else
				{
					if ((CurrAddress & 0x00FF0000) & !(CurrAddress & 0x0000FFFF))
					{
						CurrAddress |= (1UL << 31);        // Set MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
						V2P_CheckForExtendedAddress();
					}
				}
			}
			
			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    2696:	10 92 35 01 	sts	0x0135, r1
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    269a:	cc 5c       	subi	r28, 0xCC	; 204
    269c:	de 4f       	sbci	r29, 0xFE	; 254
    269e:	1a 82       	std	Y+2, r1	; 0x02

			break;
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <AICI_InterpretPacket+0x2ca>
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPCC_ProgramChip();                          // Program the bytes into the chip
    26a2:	0e 94 18 11 	call	0x2230 <ISPCC_ProgramChip>
			
			MessageSize = 2;
    26a6:	82 e0       	ldi	r24, 0x02	; 2
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	90 93 31 01 	sts	0x0131, r25
    26ae:	80 93 30 01 	sts	0x0130, r24

			PacketBytes[1] = STATUS_CMD_OK;
    26b2:	10 92 35 01 	sts	0x0135, r1
			
			break;
    26b6:	09 c0       	rjmp	.+18     	; 0x26ca <AICI_InterpretPacket+0x2ca>
		default:                                        // Unknown command, return error
			MessageSize = 1;
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	90 93 31 01 	sts	0x0131, r25
    26c0:	80 93 30 01 	sts	0x0130, r24
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
    26c4:	89 ec       	ldi	r24, 0xC9	; 201
    26c6:	80 93 35 01 	sts	0x0135, r24
	}

	V2P_SendPacket();                                   // Send the response packet
    26ca:	0e 94 ff 0d 	call	0x1bfe <V2P_SendPacket>
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	1f 91       	pop	r17
    26d4:	0f 91       	pop	r16
    26d6:	ff 90       	pop	r15
    26d8:	ef 90       	pop	r14
    26da:	df 90       	pop	r13
    26dc:	08 95       	ret

000026de <PM_GetStoredDataSize>:

// ======================================================================================

uint32_t PM_GetStoredDataSize(uint8_t Type)
{
    26de:	ef 92       	push	r14
    26e0:	ff 92       	push	r15
    26e2:	0f 93       	push	r16
    26e4:	1f 93       	push	r17
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	22 97       	sbiw	r28, 0x02	; 2
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
	/* This take a **LOT** of code (202 bytes), and is accessed several times throughout
	   the program, so I've put it into a seperate function to save on flash.            */

	uint32_t ProgDataSize = 0;
	uint16_t EEPROMAddress;

	EEPROMAddress = ((Type == TYPE_FLASH)? Prog_DataSize : Prog_EEPROMSize);
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	29 f4       	brne	.+10     	; 0x2708 <PM_GetStoredDataSize+0x2a>
    26fe:	80 91 16 01 	lds	r24, 0x0116
    2702:	90 91 17 01 	lds	r25, 0x0117
    2706:	04 c0       	rjmp	.+8      	; 0x2710 <PM_GetStoredDataSize+0x32>
    2708:	80 91 14 01 	lds	r24, 0x0114
    270c:	90 91 15 01 	lds	r25, 0x0115
    2710:	9a 83       	std	Y+2, r25	; 0x02
    2712:	89 83       	std	Y+1, r24	; 0x01
	ProgDataSize  = ((uint32_t)eeprom_read_byte_169(&EEPROMAddress) << 24);
    2714:	ce 01       	movw	r24, r28
    2716:	01 96       	adiw	r24, 0x01	; 1
    2718:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    271c:	99 27       	eor	r25, r25
    271e:	aa 27       	eor	r26, r26
    2720:	bb 27       	eor	r27, r27
    2722:	18 2f       	mov	r17, r24
    2724:	00 27       	eor	r16, r16
    2726:	ff 24       	eor	r15, r15
    2728:	ee 24       	eor	r14, r14
	EEPROMAddress++;
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	01 96       	adiw	r24, 0x01	; 1
    2730:	9a 83       	std	Y+2, r25	; 0x02
    2732:	89 83       	std	Y+1, r24	; 0x01
	ProgDataSize |= ((uint32_t)eeprom_read_byte_169(&EEPROMAddress) << 16);
    2734:	ce 01       	movw	r24, r28
    2736:	01 96       	adiw	r24, 0x01	; 1
    2738:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    273c:	99 27       	eor	r25, r25
    273e:	aa 27       	eor	r26, r26
    2740:	bb 27       	eor	r27, r27
    2742:	dc 01       	movw	r26, r24
    2744:	99 27       	eor	r25, r25
    2746:	88 27       	eor	r24, r24
    2748:	e8 2a       	or	r14, r24
    274a:	f9 2a       	or	r15, r25
    274c:	0a 2b       	or	r16, r26
    274e:	1b 2b       	or	r17, r27
	EEPROMAddress++;
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	01 96       	adiw	r24, 0x01	; 1
    2756:	9a 83       	std	Y+2, r25	; 0x02
    2758:	89 83       	std	Y+1, r24	; 0x01
	ProgDataSize |= ((uint32_t)eeprom_read_byte_169(&EEPROMAddress) << 8);
    275a:	ce 01       	movw	r24, r28
    275c:	01 96       	adiw	r24, 0x01	; 1
    275e:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    2762:	99 27       	eor	r25, r25
    2764:	aa 27       	eor	r26, r26
    2766:	bb 27       	eor	r27, r27
    2768:	ba 2f       	mov	r27, r26
    276a:	a9 2f       	mov	r26, r25
    276c:	98 2f       	mov	r25, r24
    276e:	88 27       	eor	r24, r24
    2770:	e8 2a       	or	r14, r24
    2772:	f9 2a       	or	r15, r25
    2774:	0a 2b       	or	r16, r26
    2776:	1b 2b       	or	r17, r27
	EEPROMAddress++;
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	9a 81       	ldd	r25, Y+2	; 0x02
    277c:	01 96       	adiw	r24, 0x01	; 1
    277e:	9a 83       	std	Y+2, r25	; 0x02
    2780:	89 83       	std	Y+1, r24	; 0x01
	ProgDataSize |= eeprom_read_byte_169(&EEPROMAddress);
    2782:	ce 01       	movw	r24, r28
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    278a:	99 27       	eor	r25, r25
    278c:	aa 27       	eor	r26, r26
    278e:	bb 27       	eor	r27, r27
    2790:	e8 2a       	or	r14, r24
    2792:	f9 2a       	or	r15, r25
    2794:	0a 2b       	or	r16, r26
    2796:	1b 2b       	or	r17, r27

	if (ProgDataSize == 0xFFFFFFFF)                                      // Blank EEPROM, return a size  of 0 bytes
    2798:	8f ef       	ldi	r24, 0xFF	; 255
    279a:	e8 16       	cp	r14, r24
    279c:	8f ef       	ldi	r24, 0xFF	; 255
    279e:	f8 06       	cpc	r15, r24
    27a0:	8f ef       	ldi	r24, 0xFF	; 255
    27a2:	08 07       	cpc	r16, r24
    27a4:	8f ef       	ldi	r24, 0xFF	; 255
    27a6:	18 07       	cpc	r17, r24
    27a8:	19 f4       	brne	.+6      	; 0x27b0 <PM_GetStoredDataSize+0xd2>
	   ProgDataSize = 0x00;
    27aa:	ee 24       	eor	r14, r14
    27ac:	ff 24       	eor	r15, r15
    27ae:	87 01       	movw	r16, r14

	return ProgDataSize;
}
    27b0:	c8 01       	movw	r24, r16
    27b2:	b7 01       	movw	r22, r14
    27b4:	22 96       	adiw	r28, 0x02	; 2
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	1f 91       	pop	r17
    27c6:	0f 91       	pop	r16
    27c8:	ff 90       	pop	r15
    27ca:	ef 90       	pop	r14
    27cc:	08 95       	ret

000027ce <PM_SetupDFAddressCounters>:

void PM_SetupDFAddressCounters(uint8_t Type)
{
	uint32_t StartAddress;
	
	MemoryType  = Type;
    27ce:	80 93 4a 02 	sts	0x024A, r24
	GPageLength = 0;
    27d2:	10 92 48 02 	sts	0x0248, r1
    27d6:	10 92 47 02 	sts	0x0247, r1
    27da:	20 91 2b 01 	lds	r18, 0x012B
    27de:	30 91 2c 01 	lds	r19, 0x012C
    27e2:	40 91 2d 01 	lds	r20, 0x012D
    27e6:	50 91 2e 01 	lds	r21, 0x012E

	if (Type == TYPE_FLASH)                                              // Type 1 = Flash
    27ea:	81 30       	cpi	r24, 0x01	; 1
    27ec:	39 f4       	brne	.+14     	; 0x27fc <PM_SetupDFAddressCounters+0x2e>
		StartAddress = (CurrAddress << 1);                               // Convert flash word address to byte address
    27ee:	da 01       	movw	r26, r20
    27f0:	c9 01       	movw	r24, r18
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	aa 1f       	adc	r26, r26
    27f8:	bb 1f       	adc	r27, r27
    27fa:	06 c0       	rjmp	.+12     	; 0x2808 <PM_SetupDFAddressCounters+0x3a>
	else
		StartAddress = CurrAddress + PM_EEPROM_OFFSET;                   // EEPROM uses byte addresses, and starts at the 257th kilobyte in Dataflash
    27fc:	da 01       	movw	r26, r20
    27fe:	c9 01       	movw	r24, r18
    2800:	80 50       	subi	r24, 0x00	; 0
    2802:	9c 4f       	sbci	r25, 0xFC	; 252
    2804:	ab 4f       	sbci	r26, 0xFB	; 251
    2806:	bf 4f       	sbci	r27, 0xFF	; 255
	
	CurrPageAddress = 0;
    2808:	10 92 8c 02 	sts	0x028C, r1
    280c:	10 92 8b 02 	sts	0x028B, r1

	while (StartAddress >= DF_INTERNALDF_BUFFBYTES)                      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DF_INTERNALDF_BUFFBYTES;                         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    2810:	88 30       	cpi	r24, 0x08	; 8
    2812:	21 e0       	ldi	r18, 0x01	; 1
    2814:	92 07       	cpc	r25, r18
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	a2 07       	cpc	r26, r18
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	b2 07       	cpc	r27, r18
    281e:	a0 f0       	brcs	.+40     	; 0x2848 <PM_SetupDFAddressCounters+0x7a>
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	88 50       	subi	r24, 0x08	; 8
    2826:	91 40       	sbci	r25, 0x01	; 1
    2828:	a0 40       	sbci	r26, 0x00	; 0
    282a:	b0 40       	sbci	r27, 0x00	; 0
    282c:	2f 5f       	subi	r18, 0xFF	; 255
    282e:	3f 4f       	sbci	r19, 0xFF	; 255
    2830:	88 30       	cpi	r24, 0x08	; 8
    2832:	41 e0       	ldi	r20, 0x01	; 1
    2834:	94 07       	cpc	r25, r20
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	a4 07       	cpc	r26, r20
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	b4 07       	cpc	r27, r20
    283e:	90 f7       	brcc	.-28     	; 0x2824 <PM_SetupDFAddressCounters+0x56>
    2840:	30 93 8c 02 	sts	0x028C, r19
    2844:	20 93 8b 02 	sts	0x028B, r18
	}
	
	CurrBuffByte = (uint16_t)StartAddress;                               // The buffer byte is the remainder
    2848:	90 93 85 02 	sts	0x0285, r25
    284c:	80 93 84 02 	sts	0x0284, r24
    2850:	08 95       	ret

00002852 <PM_StoreProgramByte>:
}

void PM_StoreProgramByte(uint8_t Data)
{
    2852:	cf 93       	push	r28
    2854:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DF_INTERNALDF_BUFFBYTES)
    2856:	80 91 84 02 	lds	r24, 0x0284
    285a:	90 91 85 02 	lds	r25, 0x0285
    285e:	88 50       	subi	r24, 0x08	; 8
    2860:	91 40       	sbci	r25, 0x01	; 1
    2862:	d9 f4       	brne	.+54     	; 0x289a <PM_StoreProgramByte+0x48>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    2864:	80 91 8b 02 	lds	r24, 0x028B
    2868:	90 91 8c 02 	lds	r25, 0x028C
    286c:	9c 01       	movw	r18, r24
    286e:	01 96       	adiw	r24, 0x01	; 1
    2870:	90 93 8c 02 	sts	0x028C, r25
    2874:	80 93 8b 02 	sts	0x028B, r24
    2878:	c9 01       	movw	r24, r18
    287a:	0e 94 23 0b 	call	0x1646 <DF_CopyBufferToFlashPage>
		DF_CopyFlashPageToBuffer(CurrPageAddress);
    287e:	80 91 8b 02 	lds	r24, 0x028B
    2882:	90 91 8c 02 	lds	r25, 0x028C
    2886:	0e 94 ed 0a 	call	0x15da <DF_CopyFlashPageToBuffer>
		DF_BufferWriteEnable(0);
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	0e 94 5d 0a 	call	0x14ba <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    2892:	10 92 85 02 	sts	0x0285, r1
    2896:	10 92 84 02 	sts	0x0284, r1
	}
	
	SPI_SPITransmit(Data);                                               // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    289a:	8c 2f       	mov	r24, r28
    289c:	0e 94 41 09 	call	0x1282 <SPI_SPITransmit>
	CurrBuffByte++;
    28a0:	80 91 84 02 	lds	r24, 0x0284
    28a4:	90 91 85 02 	lds	r25, 0x0285
    28a8:	01 96       	adiw	r24, 0x01	; 1
    28aa:	90 93 85 02 	sts	0x0285, r25
    28ae:	80 93 84 02 	sts	0x0284, r24
	GPageLength++;
    28b2:	80 91 47 02 	lds	r24, 0x0247
    28b6:	90 91 48 02 	lds	r25, 0x0248
    28ba:	01 96       	adiw	r24, 0x01	; 1
    28bc:	90 93 48 02 	sts	0x0248, r25
    28c0:	80 93 47 02 	sts	0x0247, r24
    28c4:	cf 91       	pop	r28
    28c6:	08 95       	ret

000028c8 <PM_CheckEndOfProgramming>:
}

void PM_InterpretAVRISPPacket(void)
{
	uint16_t EEPROMAddress;

	switch (PacketBytes[0])
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
			
			EEPROMAddress = Prog_EnterProgMode;
			
			for (uint8_t PacketB = 0; PacketB <= 11; PacketB++)          // Save the enter programming mode command bytes
			{
				eeprom_write_byte_169(&EEPROMAddress, PacketBytes[PacketB]);
				EEPROMAddress++;
			}
			
			InProgrammingMode = TRUE;                                    // Set the flag, prevent the user from exiting the V2P state machine			
			CurrentMode = PM_NO_SETUP;                                   // Clear the current mode variable

			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;

			break;			
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;

			PM_CheckEndOfProgramming();                                  // Check if the last command was a program - if so store the program length
			PM_CheckEndOfFuseLockStore();                                // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
			
			InProgrammingMode = FALSE;                                   // Clear the flag, allow the user to exit the V2P state machine

			DF_EnableDataflash(FALSE);

			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
			PacketBytes[1] = STATUS_CMD_OK;

			break;
		case CMD_READ_SIGNATURE_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x01;                                       // Signature bytes all return "01" in storage mode
			PacketBytes[3] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;

			EEPROMAddress = Prog_EraseChip;                              // Program erase chip command start address
			
			for (uint8_t PacketB = 1; PacketB <= 6; PacketB++)          // Save the erase chip command bytes to EEPROM
			{
				eeprom_write_byte_169(&EEPROMAddress, PacketBytes[PacketB]);
				EEPROMAddress++;
			}

			EEPROMAddress = Prog_DataSize;
										
			for (uint8_t Byte = 0; Byte < 8; Byte++)                    // Clear the program and EEPROM size counters
			{
				if (Byte == 4)
				   EEPROMAddress = Prog_EEPROMSize;

				eeprom_write_byte_169(&EEPROMAddress, 0x00);
				EEPROMAddress++;						
			}
						
			eeprom_write_byte_169(&Prog_EraseCmdStored, TRUE);
			
			PacketBytes[1] = STATUS_CMD_OK;
			
			break;
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x00;                                      // Return 0x00 for the OSCCAL byte
			PacketBytes[3] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs

			break;
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
			MessageSize = 4;
	
			if (CurrentMode != PM_LOCKFUSEBITS_READ)                    // First lock or fuse byte being read, set the EEPROM pointer
			{
				PM_CheckEndOfProgramming();                             // Check if the last command was a program - if so store the program length
				PM_CheckEndOfFuseLockStore();                           // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
				
				CurrBuffByte = 0;
				CurrentMode  = PM_LOCKFUSEBITS_READ;
			}
			
			EEPROMAddress = ((PacketBytes[0] == CMD_READ_FUSE_ISP)? Prog_TotalFuseBytes : Prog_TotalLockBytes);

			if (CurrBuffByte > eeprom_read_byte_169(&EEPROMAddress))    // Trying to read more fuse/lock bytes than are stored in memory
			{
				PacketBytes[2] = 0xFF;                                  // Return 0xFF for the fuse/lock byte
			}
			else
			{
				EEPROMAddress  = ((PacketBytes[0] == CMD_READ_FUSE_ISP)? Prog_FuseBytes : Prog_LockBytes) // Starting location
									+ (CurrBuffByte << 2) + (PacketBytes[1] - 1); // The start position of the actual fuse/lock byte to read (4 bytes each)

				PacketBytes[2] = eeprom_read_byte_169(&EEPROMAddress); // Return the fuse/lock byte
			}

			PacketBytes[1] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs
			PacketBytes[3] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs

			CurrBuffByte++;

			break;
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;

			if (CurrentMode != PM_LOCKFUSEBITS_WRITE)                  // First lock or fuse byte being written, set the EEPROM pointer
			{
				CurrentMode   = PM_LOCKFUSEBITS_WRITE;
				CurrBuffByte  = 0;                                     // CurrBuffByte is used to store the total fuse/lock bytes written
			}

			if (PacketBytes[0] == CMD_PROGRAM_FUSE_ISP)
			{
				EEPROMAddress = Prog_FuseBytes + (CurrBuffByte << 2);
				MemoryType    = TYPE_FUSE;
			}
			else
			{
				EEPROMAddress = Prog_LockBytes + (CurrBuffByte << 2);
				MemoryType    = TYPE_LOCK;
			}				
			
			if (CurrBuffByte < PM_MAX_FUSELOCKBITS)
			{
				for (uint8_t FLByte = 1; FLByte <= 4; FLByte++)
				{
					eeprom_write_byte_169(&EEPROMAddress, PacketBytes[FLByte]);
					EEPROMAddress++;
				}

				CurrBuffByte++;                                        // Increment the total fuse/lock bytes written counter
			}
			
			PacketBytes[1] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned
			PacketBytes[2] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned

			break;
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			MessageSize = 2;

			if (CurrentMode != PM_DATAFLASH_WRITE)                     // First programming packet
			{
				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)           // Flash programming mode
				{
					EEPROMAddress = Prog_WriteProgram;                 // Set the eeprom address to the Program command bytes location
					PM_SetupDFAddressCounters(TYPE_FLASH);
				}
				else                                                  // EEPROM programming mode
				{
					EEPROMAddress = Prog_WriteEEPROM;                  // Set the eeprom address to the EEPROM command bytes location
					PM_SetupDFAddressCounters(TYPE_EEPROM);
				}
				
				DF_BufferWriteEnable(CurrBuffByte);
				CurrentMode = PM_DATAFLASH_WRITE;
				
				for (uint8_t B = 1; B <= 9; B++)                       // Save the command bytes
				{
					eeprom_write_byte_169(&EEPROMAddress, PacketBytes[B]);
					EEPROMAddress++;				
				}
			}

			uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
			                      | PacketBytes[2];

			for (uint16_t CurrByte = 0; CurrByte < BytesToWrite; CurrByte++)
				PM_StoreProgramByte(PacketBytes[10 + CurrByte]);

			if (!(GPageLength & PM_PAGELENGTH_FOUNDBIT) && (PacketBytes[3] & ISPCC_PROG_MODE_PAGEDONE) && GPageLength)
			{
				EEPROMAddress = ((MemoryType == TYPE_FLASH)? Prog_PageLength : Prog_EPageLength);
	
				eeprom_write_byte_169(&EEPROMAddress, (uint8_t)(GPageLength >> 8));
				EEPROMAddress++;
				eeprom_write_byte_169(&EEPROMAddress, (uint8_t)GPageLength);		
		
				GPageLength |= PM_PAGELENGTH_FOUNDBIT;                 // Bit 15 is used to indicate if the length has been found
			}

			PacketBytes[1] = STATUS_CMD_OK;
		
			break;
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:	
			if (CurrentMode != PM_DATAFLASH_READ)
			{
				PM_CheckEndOfProgramming();                           // Check if the last command was a program - if so store the program length
				PM_CheckEndOfFuseLockStore();                         // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
				
				PM_SetupDFAddressCounters((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);
				DF_ContinuousReadEnable(CurrPageAddress, CurrBuffByte);
				
				CurrentMode = PM_DATAFLASH_READ;
				CurrAddress = 0;
			}

			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8)    // \. Load in the number of bytes that is to
			                     | PacketBytes[2];                    // /  be read into a temp variable (MSB first)
						
			uint16_t BytesInMem  = PM_GetStoredDataSize((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
			   PacketBytes[2 + ReadByte] = ((CurrAddress < BytesInMem)? SPI_SPITransmit(0x00) : 0xFF); // Read in the next dataflash byte if present
			   V2P_IncrementCurrAddress();
			}
			
			MessageSize = BytesToRead + 3;

			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
		
			break;
		default:
			MessageSize = 1;
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
	}

	V2P_SendPacket();                                   // Send the response packet
}

void PM_CheckEndOfProgramming(void)
{
    28c8:	ef 92       	push	r14
    28ca:	ff 92       	push	r15
    28cc:	0f 93       	push	r16
    28ce:	1f 93       	push	r17
    28d0:	cf 93       	push	r28
    28d2:	df 93       	push	r29
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	22 97       	sbiw	r28, 0x02	; 2
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61
   uint16_t EEPROMAddress;

   if (CurrentMode == PM_DATAFLASH_WRITE)
    28e4:	80 91 49 02 	lds	r24, 0x0249
    28e8:	81 30       	cpi	r24, 0x01	; 1
    28ea:	09 f0       	breq	.+2      	; 0x28ee <PM_CheckEndOfProgramming+0x26>
    28ec:	6d c0       	rjmp	.+218    	; 0x29c8 <PM_CheckEndOfProgramming+0x100>
   {
      if (CurrBuffByte)                               // Data in the dataflash buffer, pending to be written
    28ee:	80 91 84 02 	lds	r24, 0x0284
    28f2:	90 91 85 02 	lds	r25, 0x0285
    28f6:	89 2b       	or	r24, r25
    28f8:	31 f0       	breq	.+12     	; 0x2906 <PM_CheckEndOfProgramming+0x3e>
         DF_CopyBufferToFlashPage(CurrPageAddress);   // Save the buffer
    28fa:	80 91 8b 02 	lds	r24, 0x028B
    28fe:	90 91 8c 02 	lds	r25, 0x028C
    2902:	0e 94 23 0b 	call	0x1646 <DF_CopyBufferToFlashPage>

      uint32_t DataSize = ((uint32_t)CurrPageAddress * DF_INTERNALDF_BUFFBYTES) + CurrBuffByte;
    2906:	80 91 8b 02 	lds	r24, 0x028B
    290a:	90 91 8c 02 	lds	r25, 0x028C
    290e:	aa 27       	eor	r26, r26
    2910:	bb 27       	eor	r27, r27
    2912:	bc 01       	movw	r22, r24
    2914:	cd 01       	movw	r24, r26
    2916:	28 e0       	ldi	r18, 0x08	; 8
    2918:	31 e0       	ldi	r19, 0x01	; 1
    291a:	40 e0       	ldi	r20, 0x00	; 0
    291c:	50 e0       	ldi	r21, 0x00	; 0
    291e:	0e 94 6c 1b 	call	0x36d8 <__mulsi3>
    2922:	7b 01       	movw	r14, r22
    2924:	8c 01       	movw	r16, r24
    2926:	80 91 84 02 	lds	r24, 0x0284
    292a:	90 91 85 02 	lds	r25, 0x0285
    292e:	aa 27       	eor	r26, r26
    2930:	bb 27       	eor	r27, r27
    2932:	e8 0e       	add	r14, r24
    2934:	f9 1e       	adc	r15, r25
    2936:	0a 1f       	adc	r16, r26
    2938:	1b 1f       	adc	r17, r27

      if (MemoryType == TYPE_FLASH)
    293a:	80 91 4a 02 	lds	r24, 0x024A
    293e:	81 30       	cpi	r24, 0x01	; 1
    2940:	39 f4       	brne	.+14     	; 0x2950 <PM_CheckEndOfProgramming+0x88>
      {
         EEPROMAddress = Prog_DataSize;       
    2942:	80 91 16 01 	lds	r24, 0x0116
    2946:	90 91 17 01 	lds	r25, 0x0117
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	0e c0       	rjmp	.+28     	; 0x296c <PM_CheckEndOfProgramming+0xa4>
      }
      else
      {
         EEPROMAddress = Prog_EEPROMSize;
    2950:	80 91 14 01 	lds	r24, 0x0114
    2954:	90 91 15 01 	lds	r25, 0x0115
    2958:	9a 83       	std	Y+2, r25	; 0x02
    295a:	89 83       	std	Y+1, r24	; 0x01
         DataSize -= PM_EEPROM_OFFSET;                // Remove DataFlash starting offset
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	9c ef       	ldi	r25, 0xFC	; 252
    2960:	ab ef       	ldi	r26, 0xFB	; 251
    2962:	bf ef       	ldi	r27, 0xFF	; 255
    2964:	e8 0e       	add	r14, r24
    2966:	f9 1e       	adc	r15, r25
    2968:	0a 1f       	adc	r16, r26
    296a:	1b 1f       	adc	r17, r27
      }

      eeprom_write_byte_169(&EEPROMAddress, (DataSize >> 24));
    296c:	81 2f       	mov	r24, r17
    296e:	99 27       	eor	r25, r25
    2970:	aa 27       	eor	r26, r26
    2972:	bb 27       	eor	r27, r27
    2974:	68 2f       	mov	r22, r24
    2976:	ce 01       	movw	r24, r28
    2978:	01 96       	adiw	r24, 0x01	; 1
    297a:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
      EEPROMAddress++;
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	9a 81       	ldd	r25, Y+2	; 0x02
    2982:	01 96       	adiw	r24, 0x01	; 1
    2984:	9a 83       	std	Y+2, r25	; 0x02
    2986:	89 83       	std	Y+1, r24	; 0x01
      eeprom_write_byte_169(&EEPROMAddress, (DataSize >> 16));             
    2988:	c8 01       	movw	r24, r16
    298a:	aa 27       	eor	r26, r26
    298c:	bb 27       	eor	r27, r27
    298e:	68 2f       	mov	r22, r24
    2990:	ce 01       	movw	r24, r28
    2992:	01 96       	adiw	r24, 0x01	; 1
    2994:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
      EEPROMAddress++;
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	01 96       	adiw	r24, 0x01	; 1
    299e:	9a 83       	std	Y+2, r25	; 0x02
    29a0:	89 83       	std	Y+1, r24	; 0x01
      eeprom_write_byte_169(&EEPROMAddress, (DataSize >> 8));
    29a2:	bb 27       	eor	r27, r27
    29a4:	a1 2f       	mov	r26, r17
    29a6:	90 2f       	mov	r25, r16
    29a8:	8f 2d       	mov	r24, r15
    29aa:	68 2f       	mov	r22, r24
    29ac:	ce 01       	movw	r24, r28
    29ae:	01 96       	adiw	r24, 0x01	; 1
    29b0:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
      EEPROMAddress++;
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	01 96       	adiw	r24, 0x01	; 1
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01
      eeprom_write_byte_169(&EEPROMAddress, DataSize);
    29be:	6e 2d       	mov	r22, r14
    29c0:	ce 01       	movw	r24, r28
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
    29c8:	22 96       	adiw	r28, 0x02	; 2
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	1f 91       	pop	r17
    29da:	0f 91       	pop	r16
    29dc:	ff 90       	pop	r15
    29de:	ef 90       	pop	r14
    29e0:	08 95       	ret

000029e2 <PM_CheckEndOfFuseLockStore>:
   }
}

void PM_CheckEndOfFuseLockStore(void)
{
    29e2:	cf 93       	push	r28
    29e4:	df 93       	push	r29
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	22 97       	sbiw	r28, 0x02	; 2
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	f8 94       	cli
    29f0:	de bf       	out	0x3e, r29	; 62
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	cd bf       	out	0x3d, r28	; 61
	uint16_t EEPROMAddress;

	if (CurrentMode == PM_LOCKFUSEBITS_WRITE)
    29f6:	80 91 49 02 	lds	r24, 0x0249
    29fa:	83 30       	cpi	r24, 0x03	; 3
    29fc:	a9 f4       	brne	.+42     	; 0x2a28 <PM_CheckEndOfFuseLockStore+0x46>
	{
		EEPROMAddress = ((MemoryType == TYPE_FUSE)? Prog_TotalFuseBytes : Prog_TotalLockBytes);
    29fe:	80 91 4a 02 	lds	r24, 0x024A
    2a02:	82 30       	cpi	r24, 0x02	; 2
    2a04:	29 f4       	brne	.+10     	; 0x2a10 <PM_CheckEndOfFuseLockStore+0x2e>
    2a06:	80 91 10 01 	lds	r24, 0x0110
    2a0a:	90 91 11 01 	lds	r25, 0x0111
    2a0e:	04 c0       	rjmp	.+8      	; 0x2a18 <PM_CheckEndOfFuseLockStore+0x36>
    2a10:	80 91 0e 01 	lds	r24, 0x010E
    2a14:	90 91 0f 01 	lds	r25, 0x010F
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01
		
		eeprom_write_byte_169(&EEPROMAddress, CurrBuffByte); // CurrBuffByte stores the total number of fuse/lock bytes written in this case
    2a1c:	60 91 84 02 	lds	r22, 0x0284
    2a20:	ce 01       	movw	r24, r28
    2a22:	01 96       	adiw	r24, 0x01	; 1
    2a24:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
    2a28:	22 96       	adiw	r28, 0x02	; 2
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	08 95       	ret

00002a3a <PM_InterpretAVRISPPacket>:
    2a3a:	af 92       	push	r10
    2a3c:	bf 92       	push	r11
    2a3e:	cf 92       	push	r12
    2a40:	df 92       	push	r13
    2a42:	ef 92       	push	r14
    2a44:	ff 92       	push	r15
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	22 97       	sbiw	r28, 0x02	; 2
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	40 91 34 01 	lds	r20, 0x0134
    2a62:	84 2f       	mov	r24, r20
    2a64:	99 27       	eor	r25, r25
    2a66:	86 31       	cpi	r24, 0x16	; 22
    2a68:	91 05       	cpc	r25, r1
    2a6a:	09 f4       	brne	.+2      	; 0x2a6e <PM_InterpretAVRISPPacket+0x34>
    2a6c:	1a c2       	rjmp	.+1076   	; 0x2ea2 <PM_InterpretAVRISPPacket+0x468>
    2a6e:	87 31       	cpi	r24, 0x17	; 23
    2a70:	91 05       	cpc	r25, r1
    2a72:	94 f4       	brge	.+36     	; 0x2a98 <PM_InterpretAVRISPPacket+0x5e>
    2a74:	82 31       	cpi	r24, 0x12	; 18
    2a76:	91 05       	cpc	r25, r1
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <PM_InterpretAVRISPPacket+0x42>
    2a7a:	72 c0       	rjmp	.+228    	; 0x2b60 <PM_InterpretAVRISPPacket+0x126>
    2a7c:	83 31       	cpi	r24, 0x13	; 19
    2a7e:	91 05       	cpc	r25, r1
    2a80:	3c f4       	brge	.+14     	; 0x2a90 <PM_InterpretAVRISPPacket+0x56>
    2a82:	80 31       	cpi	r24, 0x10	; 16
    2a84:	91 05       	cpc	r25, r1
    2a86:	19 f1       	breq	.+70     	; 0x2ace <PM_InterpretAVRISPPacket+0x94>
    2a88:	41 97       	sbiw	r24, 0x11	; 17
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <PM_InterpretAVRISPPacket+0x54>
    2a8c:	49 c0       	rjmp	.+146    	; 0x2b20 <PM_InterpretAVRISPPacket+0xe6>
    2a8e:	7d c2       	rjmp	.+1274   	; 0x2f8a <PM_InterpretAVRISPPacket+0x550>
    2a90:	44 97       	sbiw	r24, 0x14	; 20
    2a92:	09 f4       	brne	.+2      	; 0x2a96 <PM_InterpretAVRISPPacket+0x5c>
    2a94:	06 c2       	rjmp	.+1036   	; 0x2ea2 <PM_InterpretAVRISPPacket+0x468>
    2a96:	73 c1       	rjmp	.+742    	; 0x2d7e <PM_InterpretAVRISPPacket+0x344>
    2a98:	89 31       	cpi	r24, 0x19	; 25
    2a9a:	91 05       	cpc	r25, r1
    2a9c:	09 f4       	brne	.+2      	; 0x2aa0 <PM_InterpretAVRISPPacket+0x66>
    2a9e:	13 c1       	rjmp	.+550    	; 0x2cc6 <PM_InterpretAVRISPPacket+0x28c>
    2aa0:	8a 31       	cpi	r24, 0x1A	; 26
    2aa2:	91 05       	cpc	r25, r1
    2aa4:	44 f4       	brge	.+16     	; 0x2ab6 <PM_InterpretAVRISPPacket+0x7c>
    2aa6:	87 31       	cpi	r24, 0x17	; 23
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <PM_InterpretAVRISPPacket+0x74>
    2aac:	0c c1       	rjmp	.+536    	; 0x2cc6 <PM_InterpretAVRISPPacket+0x28c>
    2aae:	48 97       	sbiw	r24, 0x18	; 24
    2ab0:	09 f4       	brne	.+2      	; 0x2ab4 <PM_InterpretAVRISPPacket+0x7a>
    2ab2:	a5 c0       	rjmp	.+330    	; 0x2bfe <PM_InterpretAVRISPPacket+0x1c4>
    2ab4:	6a c2       	rjmp	.+1236   	; 0x2f8a <PM_InterpretAVRISPPacket+0x550>
    2ab6:	8b 31       	cpi	r24, 0x1B	; 27
    2ab8:	91 05       	cpc	r25, r1
    2aba:	09 f4       	brne	.+2      	; 0x2abe <PM_InterpretAVRISPPacket+0x84>
    2abc:	45 c0       	rjmp	.+138    	; 0x2b48 <PM_InterpretAVRISPPacket+0x10e>
    2abe:	8b 31       	cpi	r24, 0x1B	; 27
    2ac0:	91 05       	cpc	r25, r1
    2ac2:	0c f4       	brge	.+2      	; 0x2ac6 <PM_InterpretAVRISPPacket+0x8c>
    2ac4:	9c c0       	rjmp	.+312    	; 0x2bfe <PM_InterpretAVRISPPacket+0x1c4>
    2ac6:	4c 97       	sbiw	r24, 0x1c	; 28
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <PM_InterpretAVRISPPacket+0x92>
    2aca:	8c c0       	rjmp	.+280    	; 0x2be4 <PM_InterpretAVRISPPacket+0x1aa>
    2acc:	5e c2       	rjmp	.+1212   	; 0x2f8a <PM_InterpretAVRISPPacket+0x550>
    2ace:	82 e0       	ldi	r24, 0x02	; 2
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	90 93 31 01 	sts	0x0131, r25
    2ad6:	80 93 30 01 	sts	0x0130, r24
    2ada:	80 91 12 01 	lds	r24, 0x0112
    2ade:	90 91 13 01 	lds	r25, 0x0113
    2ae2:	9a 83       	std	Y+2, r25	; 0x02
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	f4 e3       	ldi	r31, 0x34	; 52
    2ae8:	ef 2e       	mov	r14, r31
    2aea:	f1 e0       	ldi	r31, 0x01	; 1
    2aec:	ff 2e       	mov	r15, r31
    2aee:	1b e0       	ldi	r17, 0x0B	; 11
    2af0:	f7 01       	movw	r30, r14
    2af2:	61 91       	ld	r22, Z+
    2af4:	7f 01       	movw	r14, r30
    2af6:	ce 01       	movw	r24, r28
    2af8:	01 96       	adiw	r24, 0x01	; 1
    2afa:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	9a 81       	ldd	r25, Y+2	; 0x02
    2b02:	01 96       	adiw	r24, 0x01	; 1
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	11 50       	subi	r17, 0x01	; 1
    2b0a:	17 ff       	sbrs	r17, 7
    2b0c:	f1 cf       	rjmp	.-30     	; 0x2af0 <PM_InterpretAVRISPPacket+0xb6>
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	80 93 2f 01 	sts	0x012F, r24
    2b14:	10 92 49 02 	sts	0x0249, r1
    2b18:	81 b3       	in	r24, 0x11	; 17
    2b1a:	8f 7c       	andi	r24, 0xCF	; 207
    2b1c:	80 62       	ori	r24, 0x20	; 32
    2b1e:	12 c0       	rjmp	.+36     	; 0x2b44 <PM_InterpretAVRISPPacket+0x10a>
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	90 93 31 01 	sts	0x0131, r25
    2b28:	80 93 30 01 	sts	0x0130, r24
    2b2c:	0e 94 64 14 	call	0x28c8 <PM_CheckEndOfProgramming>
    2b30:	0e 94 f1 14 	call	0x29e2 <PM_CheckEndOfFuseLockStore>
    2b34:	10 92 2f 01 	sts	0x012F, r1
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    2b3e:	81 b3       	in	r24, 0x11	; 17
    2b40:	8f 7c       	andi	r24, 0xCF	; 207
    2b42:	80 61       	ori	r24, 0x10	; 16
    2b44:	81 bb       	out	0x11, r24	; 17
    2b46:	aa c1       	rjmp	.+852    	; 0x2e9c <PM_InterpretAVRISPPacket+0x462>
    2b48:	84 e0       	ldi	r24, 0x04	; 4
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	90 93 31 01 	sts	0x0131, r25
    2b50:	80 93 30 01 	sts	0x0130, r24
    2b54:	10 92 35 01 	sts	0x0135, r1
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	80 93 36 01 	sts	0x0136, r24
    2b5e:	4c c0       	rjmp	.+152    	; 0x2bf8 <PM_InterpretAVRISPPacket+0x1be>
    2b60:	82 e0       	ldi	r24, 0x02	; 2
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	90 93 31 01 	sts	0x0131, r25
    2b68:	80 93 30 01 	sts	0x0130, r24
    2b6c:	80 91 18 01 	lds	r24, 0x0118
    2b70:	90 91 19 01 	lds	r25, 0x0119
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	e5 e3       	ldi	r30, 0x35	; 53
    2b7a:	ee 2e       	mov	r14, r30
    2b7c:	e1 e0       	ldi	r30, 0x01	; 1
    2b7e:	fe 2e       	mov	r15, r30
    2b80:	15 e0       	ldi	r17, 0x05	; 5
    2b82:	f7 01       	movw	r30, r14
    2b84:	61 91       	ld	r22, Z+
    2b86:	7f 01       	movw	r14, r30
    2b88:	ce 01       	movw	r24, r28
    2b8a:	01 96       	adiw	r24, 0x01	; 1
    2b8c:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
    2b90:	89 81       	ldd	r24, Y+1	; 0x01
    2b92:	9a 81       	ldd	r25, Y+2	; 0x02
    2b94:	01 96       	adiw	r24, 0x01	; 1
    2b96:	9a 83       	std	Y+2, r25	; 0x02
    2b98:	89 83       	std	Y+1, r24	; 0x01
    2b9a:	11 50       	subi	r17, 0x01	; 1
    2b9c:	17 ff       	sbrs	r17, 7
    2b9e:	f1 cf       	rjmp	.-30     	; 0x2b82 <PM_InterpretAVRISPPacket+0x148>
    2ba0:	80 91 16 01 	lds	r24, 0x0116
    2ba4:	90 91 17 01 	lds	r25, 0x0117
    2ba8:	9a 83       	std	Y+2, r25	; 0x02
    2baa:	89 83       	std	Y+1, r24	; 0x01
    2bac:	10 e0       	ldi	r17, 0x00	; 0
    2bae:	14 30       	cpi	r17, 0x04	; 4
    2bb0:	31 f4       	brne	.+12     	; 0x2bbe <PM_InterpretAVRISPPacket+0x184>
    2bb2:	80 91 14 01 	lds	r24, 0x0114
    2bb6:	90 91 15 01 	lds	r25, 0x0115
    2bba:	9a 83       	std	Y+2, r25	; 0x02
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	60 e0       	ldi	r22, 0x00	; 0
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	01 96       	adiw	r24, 0x01	; 1
    2bc4:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	9a 81       	ldd	r25, Y+2	; 0x02
    2bcc:	01 96       	adiw	r24, 0x01	; 1
    2bce:	9a 83       	std	Y+2, r25	; 0x02
    2bd0:	89 83       	std	Y+1, r24	; 0x01
    2bd2:	1f 5f       	subi	r17, 0xFF	; 255
    2bd4:	18 30       	cpi	r17, 0x08	; 8
    2bd6:	58 f3       	brcs	.-42     	; 0x2bae <PM_InterpretAVRISPPacket+0x174>
    2bd8:	61 e0       	ldi	r22, 0x01	; 1
    2bda:	8a e1       	ldi	r24, 0x1A	; 26
    2bdc:	91 e0       	ldi	r25, 0x01	; 1
    2bde:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
    2be2:	5c c1       	rjmp	.+696    	; 0x2e9c <PM_InterpretAVRISPPacket+0x462>
    2be4:	84 e0       	ldi	r24, 0x04	; 4
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	90 93 31 01 	sts	0x0131, r25
    2bec:	80 93 30 01 	sts	0x0130, r24
    2bf0:	10 92 35 01 	sts	0x0135, r1
    2bf4:	10 92 36 01 	sts	0x0136, r1
    2bf8:	10 92 37 01 	sts	0x0137, r1
    2bfc:	cf c1       	rjmp	.+926    	; 0x2f9c <PM_InterpretAVRISPPacket+0x562>
    2bfe:	84 e0       	ldi	r24, 0x04	; 4
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	90 93 31 01 	sts	0x0131, r25
    2c06:	80 93 30 01 	sts	0x0130, r24
    2c0a:	80 91 49 02 	lds	r24, 0x0249
    2c0e:	84 30       	cpi	r24, 0x04	; 4
    2c10:	59 f0       	breq	.+22     	; 0x2c28 <PM_InterpretAVRISPPacket+0x1ee>
    2c12:	0e 94 64 14 	call	0x28c8 <PM_CheckEndOfProgramming>
    2c16:	0e 94 f1 14 	call	0x29e2 <PM_CheckEndOfFuseLockStore>
    2c1a:	10 92 85 02 	sts	0x0285, r1
    2c1e:	10 92 84 02 	sts	0x0284, r1
    2c22:	84 e0       	ldi	r24, 0x04	; 4
    2c24:	80 93 49 02 	sts	0x0249, r24
    2c28:	80 91 34 01 	lds	r24, 0x0134
    2c2c:	88 31       	cpi	r24, 0x18	; 24
    2c2e:	29 f4       	brne	.+10     	; 0x2c3a <PM_InterpretAVRISPPacket+0x200>
    2c30:	80 91 10 01 	lds	r24, 0x0110
    2c34:	90 91 11 01 	lds	r25, 0x0111
    2c38:	04 c0       	rjmp	.+8      	; 0x2c42 <PM_InterpretAVRISPPacket+0x208>
    2c3a:	80 91 0e 01 	lds	r24, 0x010E
    2c3e:	90 91 0f 01 	lds	r25, 0x010F
    2c42:	9a 83       	std	Y+2, r25	; 0x02
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	ce 01       	movw	r24, r28
    2c48:	01 96       	adiw	r24, 0x01	; 1
    2c4a:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    2c4e:	99 27       	eor	r25, r25
    2c50:	20 91 84 02 	lds	r18, 0x0284
    2c54:	30 91 85 02 	lds	r19, 0x0285
    2c58:	82 17       	cp	r24, r18
    2c5a:	93 07       	cpc	r25, r19
    2c5c:	10 f4       	brcc	.+4      	; 0x2c62 <PM_InterpretAVRISPPacket+0x228>
    2c5e:	8f ef       	ldi	r24, 0xFF	; 255
    2c60:	22 c0       	rjmp	.+68     	; 0x2ca6 <PM_InterpretAVRISPPacket+0x26c>
    2c62:	a9 01       	movw	r20, r18
    2c64:	44 0f       	add	r20, r20
    2c66:	55 1f       	adc	r21, r21
    2c68:	44 0f       	add	r20, r20
    2c6a:	55 1f       	adc	r21, r21
    2c6c:	80 91 35 01 	lds	r24, 0x0135
    2c70:	28 2f       	mov	r18, r24
    2c72:	33 27       	eor	r19, r19
    2c74:	21 50       	subi	r18, 0x01	; 1
    2c76:	30 40       	sbci	r19, 0x00	; 0
    2c78:	80 91 34 01 	lds	r24, 0x0134
    2c7c:	88 31       	cpi	r24, 0x18	; 24
    2c7e:	29 f4       	brne	.+10     	; 0x2c8a <PM_InterpretAVRISPPacket+0x250>
    2c80:	80 91 0c 01 	lds	r24, 0x010C
    2c84:	90 91 0d 01 	lds	r25, 0x010D
    2c88:	04 c0       	rjmp	.+8      	; 0x2c92 <PM_InterpretAVRISPPacket+0x258>
    2c8a:	80 91 0a 01 	lds	r24, 0x010A
    2c8e:	90 91 0b 01 	lds	r25, 0x010B
    2c92:	84 0f       	add	r24, r20
    2c94:	95 1f       	adc	r25, r21
    2c96:	82 0f       	add	r24, r18
    2c98:	93 1f       	adc	r25, r19
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	01 96       	adiw	r24, 0x01	; 1
    2ca2:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    2ca6:	80 93 36 01 	sts	0x0136, r24
    2caa:	10 92 35 01 	sts	0x0135, r1
    2cae:	10 92 37 01 	sts	0x0137, r1
    2cb2:	80 91 84 02 	lds	r24, 0x0284
    2cb6:	90 91 85 02 	lds	r25, 0x0285
    2cba:	01 96       	adiw	r24, 0x01	; 1
    2cbc:	90 93 85 02 	sts	0x0285, r25
    2cc0:	80 93 84 02 	sts	0x0284, r24
    2cc4:	6b c1       	rjmp	.+726    	; 0x2f9c <PM_InterpretAVRISPPacket+0x562>
    2cc6:	83 e0       	ldi	r24, 0x03	; 3
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	90 93 31 01 	sts	0x0131, r25
    2cce:	80 93 30 01 	sts	0x0130, r24
    2cd2:	80 91 49 02 	lds	r24, 0x0249
    2cd6:	83 30       	cpi	r24, 0x03	; 3
    2cd8:	39 f0       	breq	.+14     	; 0x2ce8 <PM_InterpretAVRISPPacket+0x2ae>
    2cda:	83 e0       	ldi	r24, 0x03	; 3
    2cdc:	80 93 49 02 	sts	0x0249, r24
    2ce0:	10 92 85 02 	sts	0x0285, r1
    2ce4:	10 92 84 02 	sts	0x0284, r1
    2ce8:	20 91 84 02 	lds	r18, 0x0284
    2cec:	30 91 85 02 	lds	r19, 0x0285
    2cf0:	47 31       	cpi	r20, 0x17	; 23
    2cf2:	71 f4       	brne	.+28     	; 0x2d10 <PM_InterpretAVRISPPacket+0x2d6>
    2cf4:	22 0f       	add	r18, r18
    2cf6:	33 1f       	adc	r19, r19
    2cf8:	22 0f       	add	r18, r18
    2cfa:	33 1f       	adc	r19, r19
    2cfc:	80 91 0c 01 	lds	r24, 0x010C
    2d00:	90 91 0d 01 	lds	r25, 0x010D
    2d04:	82 0f       	add	r24, r18
    2d06:	93 1f       	adc	r25, r19
    2d08:	9a 83       	std	Y+2, r25	; 0x02
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	82 e0       	ldi	r24, 0x02	; 2
    2d0e:	0d c0       	rjmp	.+26     	; 0x2d2a <PM_InterpretAVRISPPacket+0x2f0>
    2d10:	22 0f       	add	r18, r18
    2d12:	33 1f       	adc	r19, r19
    2d14:	22 0f       	add	r18, r18
    2d16:	33 1f       	adc	r19, r19
    2d18:	80 91 0a 01 	lds	r24, 0x010A
    2d1c:	90 91 0b 01 	lds	r25, 0x010B
    2d20:	82 0f       	add	r24, r18
    2d22:	93 1f       	adc	r25, r19
    2d24:	9a 83       	std	Y+2, r25	; 0x02
    2d26:	89 83       	std	Y+1, r24	; 0x01
    2d28:	83 e0       	ldi	r24, 0x03	; 3
    2d2a:	80 93 4a 02 	sts	0x024A, r24
    2d2e:	80 91 84 02 	lds	r24, 0x0284
    2d32:	90 91 85 02 	lds	r25, 0x0285
    2d36:	0a 97       	sbiw	r24, 0x0a	; 10
    2d38:	e8 f4       	brcc	.+58     	; 0x2d74 <PM_InterpretAVRISPPacket+0x33a>
    2d3a:	45 e3       	ldi	r20, 0x35	; 53
    2d3c:	e4 2e       	mov	r14, r20
    2d3e:	41 e0       	ldi	r20, 0x01	; 1
    2d40:	f4 2e       	mov	r15, r20
    2d42:	13 e0       	ldi	r17, 0x03	; 3
    2d44:	f7 01       	movw	r30, r14
    2d46:	61 91       	ld	r22, Z+
    2d48:	7f 01       	movw	r14, r30
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	01 96       	adiw	r24, 0x01	; 1
    2d4e:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	9a 81       	ldd	r25, Y+2	; 0x02
    2d56:	01 96       	adiw	r24, 0x01	; 1
    2d58:	9a 83       	std	Y+2, r25	; 0x02
    2d5a:	89 83       	std	Y+1, r24	; 0x01
    2d5c:	11 50       	subi	r17, 0x01	; 1
    2d5e:	17 ff       	sbrs	r17, 7
    2d60:	f1 cf       	rjmp	.-30     	; 0x2d44 <PM_InterpretAVRISPPacket+0x30a>
    2d62:	80 91 84 02 	lds	r24, 0x0284
    2d66:	90 91 85 02 	lds	r25, 0x0285
    2d6a:	01 96       	adiw	r24, 0x01	; 1
    2d6c:	90 93 85 02 	sts	0x0285, r25
    2d70:	80 93 84 02 	sts	0x0284, r24
    2d74:	10 92 35 01 	sts	0x0135, r1
    2d78:	10 92 36 01 	sts	0x0136, r1
    2d7c:	0f c1       	rjmp	.+542    	; 0x2f9c <PM_InterpretAVRISPPacket+0x562>
    2d7e:	82 e0       	ldi	r24, 0x02	; 2
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	90 93 31 01 	sts	0x0131, r25
    2d86:	80 93 30 01 	sts	0x0130, r24
    2d8a:	80 91 49 02 	lds	r24, 0x0249
    2d8e:	81 30       	cpi	r24, 0x01	; 1
    2d90:	81 f1       	breq	.+96     	; 0x2df2 <PM_InterpretAVRISPPacket+0x3b8>
    2d92:	43 31       	cpi	r20, 0x13	; 19
    2d94:	41 f4       	brne	.+16     	; 0x2da6 <PM_InterpretAVRISPPacket+0x36c>
    2d96:	80 91 1e 01 	lds	r24, 0x011E
    2d9a:	90 91 1f 01 	lds	r25, 0x011F
    2d9e:	9a 83       	std	Y+2, r25	; 0x02
    2da0:	89 83       	std	Y+1, r24	; 0x01
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	07 c0       	rjmp	.+14     	; 0x2db4 <PM_InterpretAVRISPPacket+0x37a>
    2da6:	80 91 1c 01 	lds	r24, 0x011C
    2daa:	90 91 1d 01 	lds	r25, 0x011D
    2dae:	9a 83       	std	Y+2, r25	; 0x02
    2db0:	89 83       	std	Y+1, r24	; 0x01
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	0e 94 e7 13 	call	0x27ce <PM_SetupDFAddressCounters>
    2db8:	80 91 84 02 	lds	r24, 0x0284
    2dbc:	90 91 85 02 	lds	r25, 0x0285
    2dc0:	0e 94 5d 0a 	call	0x14ba <DF_BufferWriteEnable>
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	80 93 49 02 	sts	0x0249, r24
    2dca:	35 e3       	ldi	r19, 0x35	; 53
    2dcc:	e3 2e       	mov	r14, r19
    2dce:	31 e0       	ldi	r19, 0x01	; 1
    2dd0:	f3 2e       	mov	r15, r19
    2dd2:	18 e0       	ldi	r17, 0x08	; 8
    2dd4:	f7 01       	movw	r30, r14
    2dd6:	61 91       	ld	r22, Z+
    2dd8:	7f 01       	movw	r14, r30
    2dda:	ce 01       	movw	r24, r28
    2ddc:	01 96       	adiw	r24, 0x01	; 1
    2dde:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	9a 81       	ldd	r25, Y+2	; 0x02
    2de6:	01 96       	adiw	r24, 0x01	; 1
    2de8:	9a 83       	std	Y+2, r25	; 0x02
    2dea:	89 83       	std	Y+1, r24	; 0x01
    2dec:	11 50       	subi	r17, 0x01	; 1
    2dee:	17 ff       	sbrs	r17, 7
    2df0:	f1 cf       	rjmp	.-30     	; 0x2dd4 <PM_InterpretAVRISPPacket+0x39a>
    2df2:	80 91 35 01 	lds	r24, 0x0135
    2df6:	99 27       	eor	r25, r25
    2df8:	18 2f       	mov	r17, r24
    2dfa:	00 27       	eor	r16, r16
    2dfc:	80 91 36 01 	lds	r24, 0x0136
    2e00:	99 27       	eor	r25, r25
    2e02:	08 2b       	or	r16, r24
    2e04:	19 2b       	or	r17, r25
    2e06:	ee 24       	eor	r14, r14
    2e08:	ff 24       	eor	r15, r15
    2e0a:	e0 16       	cp	r14, r16
    2e0c:	f1 06       	cpc	r15, r17
    2e0e:	78 f4       	brcc	.+30     	; 0x2e2e <PM_InterpretAVRISPPacket+0x3f4>
    2e10:	8e e3       	ldi	r24, 0x3E	; 62
    2e12:	c8 2e       	mov	r12, r24
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	d8 2e       	mov	r13, r24
    2e18:	f6 01       	movw	r30, r12
    2e1a:	81 91       	ld	r24, Z+
    2e1c:	6f 01       	movw	r12, r30
    2e1e:	0e 94 29 14 	call	0x2852 <PM_StoreProgramByte>
    2e22:	08 94       	sec
    2e24:	e1 1c       	adc	r14, r1
    2e26:	f1 1c       	adc	r15, r1
    2e28:	e0 16       	cp	r14, r16
    2e2a:	f1 06       	cpc	r15, r17
    2e2c:	a8 f3       	brcs	.-22     	; 0x2e18 <PM_InterpretAVRISPPacket+0x3de>
    2e2e:	40 91 47 02 	lds	r20, 0x0247
    2e32:	50 91 48 02 	lds	r21, 0x0248
    2e36:	57 fd       	sbrc	r21, 7
    2e38:	31 c0       	rjmp	.+98     	; 0x2e9c <PM_InterpretAVRISPPacket+0x462>
    2e3a:	80 91 37 01 	lds	r24, 0x0137
    2e3e:	87 ff       	sbrs	r24, 7
    2e40:	2d c0       	rjmp	.+90     	; 0x2e9c <PM_InterpretAVRISPPacket+0x462>
    2e42:	41 15       	cp	r20, r1
    2e44:	51 05       	cpc	r21, r1
    2e46:	51 f1       	breq	.+84     	; 0x2e9c <PM_InterpretAVRISPPacket+0x462>
    2e48:	80 91 4a 02 	lds	r24, 0x024A
    2e4c:	81 30       	cpi	r24, 0x01	; 1
    2e4e:	29 f4       	brne	.+10     	; 0x2e5a <PM_InterpretAVRISPPacket+0x420>
    2e50:	20 91 08 01 	lds	r18, 0x0108
    2e54:	30 91 09 01 	lds	r19, 0x0109
    2e58:	04 c0       	rjmp	.+8      	; 0x2e62 <PM_InterpretAVRISPPacket+0x428>
    2e5a:	20 91 06 01 	lds	r18, 0x0106
    2e5e:	30 91 07 01 	lds	r19, 0x0107
    2e62:	3a 83       	std	Y+2, r19	; 0x02
    2e64:	29 83       	std	Y+1, r18	; 0x01
    2e66:	85 2f       	mov	r24, r21
    2e68:	99 27       	eor	r25, r25
    2e6a:	68 2f       	mov	r22, r24
    2e6c:	ce 01       	movw	r24, r28
    2e6e:	01 96       	adiw	r24, 0x01	; 1
    2e70:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	9a 81       	ldd	r25, Y+2	; 0x02
    2e78:	01 96       	adiw	r24, 0x01	; 1
    2e7a:	9a 83       	std	Y+2, r25	; 0x02
    2e7c:	89 83       	std	Y+1, r24	; 0x01
    2e7e:	60 91 47 02 	lds	r22, 0x0247
    2e82:	ce 01       	movw	r24, r28
    2e84:	01 96       	adiw	r24, 0x01	; 1
    2e86:	0e 94 c3 08 	call	0x1186 <eeprom_write_byte_169>
    2e8a:	80 91 47 02 	lds	r24, 0x0247
    2e8e:	90 91 48 02 	lds	r25, 0x0248
    2e92:	90 68       	ori	r25, 0x80	; 128
    2e94:	90 93 48 02 	sts	0x0248, r25
    2e98:	80 93 47 02 	sts	0x0247, r24
    2e9c:	10 92 35 01 	sts	0x0135, r1
    2ea0:	7d c0       	rjmp	.+250    	; 0x2f9c <PM_InterpretAVRISPPacket+0x562>
    2ea2:	80 91 49 02 	lds	r24, 0x0249
    2ea6:	82 30       	cpi	r24, 0x02	; 2
    2ea8:	11 f1       	breq	.+68     	; 0x2eee <PM_InterpretAVRISPPacket+0x4b4>
    2eaa:	0e 94 64 14 	call	0x28c8 <PM_CheckEndOfProgramming>
    2eae:	0e 94 f1 14 	call	0x29e2 <PM_CheckEndOfFuseLockStore>
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	80 91 34 01 	lds	r24, 0x0134
    2eb8:	84 31       	cpi	r24, 0x14	; 20
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <PM_InterpretAVRISPPacket+0x484>
    2ebc:	91 e0       	ldi	r25, 0x01	; 1
    2ebe:	89 2f       	mov	r24, r25
    2ec0:	0e 94 e7 13 	call	0x27ce <PM_SetupDFAddressCounters>
    2ec4:	60 91 84 02 	lds	r22, 0x0284
    2ec8:	70 91 85 02 	lds	r23, 0x0285
    2ecc:	80 91 8b 02 	lds	r24, 0x028B
    2ed0:	90 91 8c 02 	lds	r25, 0x028C
    2ed4:	0e 94 1a 0a 	call	0x1434 <DF_ContinuousReadEnable>
    2ed8:	82 e0       	ldi	r24, 0x02	; 2
    2eda:	80 93 49 02 	sts	0x0249, r24
    2ede:	10 92 2b 01 	sts	0x012B, r1
    2ee2:	10 92 2c 01 	sts	0x012C, r1
    2ee6:	10 92 2d 01 	sts	0x012D, r1
    2eea:	10 92 2e 01 	sts	0x012E, r1
    2eee:	80 91 35 01 	lds	r24, 0x0135
    2ef2:	99 27       	eor	r25, r25
    2ef4:	18 2f       	mov	r17, r24
    2ef6:	00 27       	eor	r16, r16
    2ef8:	80 91 36 01 	lds	r24, 0x0136
    2efc:	99 27       	eor	r25, r25
    2efe:	08 2b       	or	r16, r24
    2f00:	19 2b       	or	r17, r25
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	80 91 34 01 	lds	r24, 0x0134
    2f08:	84 31       	cpi	r24, 0x14	; 20
    2f0a:	09 f4       	brne	.+2      	; 0x2f0e <PM_InterpretAVRISPPacket+0x4d4>
    2f0c:	91 e0       	ldi	r25, 0x01	; 1
    2f0e:	89 2f       	mov	r24, r25
    2f10:	0e 94 6f 13 	call	0x26de <PM_GetStoredDataSize>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	6c 01       	movw	r12, r24
    2f1a:	ee 24       	eor	r14, r14
    2f1c:	ff 24       	eor	r15, r15
    2f1e:	e0 16       	cp	r14, r16
    2f20:	f1 06       	cpc	r15, r17
    2f22:	20 f5       	brcc	.+72     	; 0x2f6c <PM_InterpretAVRISPPacket+0x532>
    2f24:	f6 e3       	ldi	r31, 0x36	; 54
    2f26:	af 2e       	mov	r10, r31
    2f28:	f1 e0       	ldi	r31, 0x01	; 1
    2f2a:	bf 2e       	mov	r11, r31
    2f2c:	96 01       	movw	r18, r12
    2f2e:	44 27       	eor	r20, r20
    2f30:	55 27       	eor	r21, r21
    2f32:	80 91 2b 01 	lds	r24, 0x012B
    2f36:	90 91 2c 01 	lds	r25, 0x012C
    2f3a:	a0 91 2d 01 	lds	r26, 0x012D
    2f3e:	b0 91 2e 01 	lds	r27, 0x012E
    2f42:	82 17       	cp	r24, r18
    2f44:	93 07       	cpc	r25, r19
    2f46:	a4 07       	cpc	r26, r20
    2f48:	b5 07       	cpc	r27, r21
    2f4a:	20 f4       	brcc	.+8      	; 0x2f54 <PM_InterpretAVRISPPacket+0x51a>
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	0e 94 41 09 	call	0x1282 <SPI_SPITransmit>
    2f52:	01 c0       	rjmp	.+2      	; 0x2f56 <PM_InterpretAVRISPPacket+0x51c>
    2f54:	8f ef       	ldi	r24, 0xFF	; 255
    2f56:	f5 01       	movw	r30, r10
    2f58:	81 93       	st	Z+, r24
    2f5a:	5f 01       	movw	r10, r30
    2f5c:	0e 94 d9 0e 	call	0x1db2 <V2P_IncrementCurrAddress>
    2f60:	08 94       	sec
    2f62:	e1 1c       	adc	r14, r1
    2f64:	f1 1c       	adc	r15, r1
    2f66:	e0 16       	cp	r14, r16
    2f68:	f1 06       	cpc	r15, r17
    2f6a:	00 f3       	brcs	.-64     	; 0x2f2c <PM_InterpretAVRISPPacket+0x4f2>
    2f6c:	0d 5f       	subi	r16, 0xFD	; 253
    2f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f70:	10 93 31 01 	sts	0x0131, r17
    2f74:	00 93 30 01 	sts	0x0130, r16
    2f78:	03 50       	subi	r16, 0x03	; 3
    2f7a:	10 40       	sbci	r17, 0x00	; 0
    2f7c:	10 92 35 01 	sts	0x0135, r1
    2f80:	0c 5c       	subi	r16, 0xCC	; 204
    2f82:	1e 4f       	sbci	r17, 0xFE	; 254
    2f84:	f8 01       	movw	r30, r16
    2f86:	12 82       	std	Z+2, r1	; 0x02
    2f88:	09 c0       	rjmp	.+18     	; 0x2f9c <PM_InterpretAVRISPPacket+0x562>
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	90 93 31 01 	sts	0x0131, r25
    2f92:	80 93 30 01 	sts	0x0130, r24
    2f96:	89 ec       	ldi	r24, 0xC9	; 201
    2f98:	80 93 35 01 	sts	0x0135, r24
    2f9c:	0e 94 ff 0d 	call	0x1bfe <V2P_SendPacket>
    2fa0:	22 96       	adiw	r28, 0x02	; 2
    2fa2:	0f b6       	in	r0, 0x3f	; 63
    2fa4:	f8 94       	cli
    2fa6:	de bf       	out	0x3e, r29	; 62
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	cd bf       	out	0x3d, r28	; 61
    2fac:	df 91       	pop	r29
    2fae:	cf 91       	pop	r28
    2fb0:	1f 91       	pop	r17
    2fb2:	0f 91       	pop	r16
    2fb4:	ff 90       	pop	r15
    2fb6:	ef 90       	pop	r14
    2fb8:	df 90       	pop	r13
    2fba:	cf 90       	pop	r12
    2fbc:	bf 90       	pop	r11
    2fbe:	af 90       	pop	r10
    2fc0:	08 95       	ret

00002fc2 <PM_SendFuseLockBytes>:
	}
}

void PM_SendFuseLockBytes(uint8_t Type)
{
    2fc2:	0f 93       	push	r16
    2fc4:	1f 93       	push	r17
    2fc6:	cf 93       	push	r28
    2fc8:	df 93       	push	r29
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	22 97       	sbiw	r28, 0x02	; 2
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	08 2f       	mov	r16, r24
	uint16_t EEPROMAddress;
	uint8_t  TotalBytes;
	
	EEPROMAddress = ((Type == TYPE_FUSE)? Prog_TotalFuseBytes : Prog_TotalLockBytes);
    2fdc:	82 30       	cpi	r24, 0x02	; 2
    2fde:	29 f4       	brne	.+10     	; 0x2fea <PM_SendFuseLockBytes+0x28>
    2fe0:	80 91 10 01 	lds	r24, 0x0110
    2fe4:	90 91 11 01 	lds	r25, 0x0111
    2fe8:	04 c0       	rjmp	.+8      	; 0x2ff2 <PM_SendFuseLockBytes+0x30>
    2fea:	80 91 0e 01 	lds	r24, 0x010E
    2fee:	90 91 0f 01 	lds	r25, 0x010F
    2ff2:	9a 83       	std	Y+2, r25	; 0x02
    2ff4:	89 83       	std	Y+1, r24	; 0x01

	TotalBytes = eeprom_read_byte_169(&EEPROMAddress); // Get the total number of stored fuse/lock bytes
    2ff6:	ce 01       	movw	r24, r28
    2ff8:	01 96       	adiw	r24, 0x01	; 1
    2ffa:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    2ffe:	18 2f       	mov	r17, r24
			
	EEPROMAddress = ((Type == TYPE_FUSE)? Prog_FuseBytes : Prog_LockBytes); // Set the EEPROM pointer to the fuse/lock bytes start (each fuse or lock byte takes four bytes in EEPROM)
    3000:	02 30       	cpi	r16, 0x02	; 2
    3002:	29 f4       	brne	.+10     	; 0x300e <PM_SendFuseLockBytes+0x4c>
    3004:	80 91 0c 01 	lds	r24, 0x010C
    3008:	90 91 0d 01 	lds	r25, 0x010D
    300c:	04 c0       	rjmp	.+8      	; 0x3016 <PM_SendFuseLockBytes+0x54>
    300e:	80 91 0a 01 	lds	r24, 0x010A
    3012:	90 91 0b 01 	lds	r25, 0x010B
    3016:	9a 83       	std	Y+2, r25	; 0x02
    3018:	89 83       	std	Y+1, r24	; 0x01

	while (TotalBytes--)                              // Write each of the fuse/lock bytes stored in memory to the slave AVR
	{
		for (uint8_t CommandByte = 0; CommandByte < 4; CommandByte++)      // Write each individual command byte
		{
			USI_SPITransmit(eeprom_read_byte_169(&EEPROMAddress));
			EEPROMAddress++;
		}
		
		// Add some delay before programming next byte, if there is one:
		if (TotalBytes)
		   MAIN_Delay10MS(5);
    301a:	11 50       	subi	r17, 0x01	; 1
    301c:	1f 3f       	cpi	r17, 0xFF	; 255
    301e:	b1 f0       	breq	.+44     	; 0x304c <PM_SendFuseLockBytes+0x8a>
    3020:	03 e0       	ldi	r16, 0x03	; 3
    3022:	ce 01       	movw	r24, r28
    3024:	01 96       	adiw	r24, 0x01	; 1
    3026:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    302a:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	9a 81       	ldd	r25, Y+2	; 0x02
    3032:	01 96       	adiw	r24, 0x01	; 1
    3034:	9a 83       	std	Y+2, r25	; 0x02
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	01 50       	subi	r16, 0x01	; 1
    303a:	07 ff       	sbrs	r16, 7
    303c:	f2 cf       	rjmp	.-28     	; 0x3022 <PM_SendFuseLockBytes+0x60>
    303e:	11 23       	and	r17, r17
    3040:	19 f0       	breq	.+6      	; 0x3048 <PM_SendFuseLockBytes+0x86>
    3042:	85 e0       	ldi	r24, 0x05	; 5
    3044:	0e 94 2f 02 	call	0x45e <MAIN_Delay10MS>
    3048:	11 50       	subi	r17, 0x01	; 1
    304a:	50 f7       	brcc	.-44     	; 0x3020 <PM_SendFuseLockBytes+0x5e>
    304c:	22 96       	adiw	r28, 0x02	; 2
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	cd bf       	out	0x3d, r28	; 61
    3058:	df 91       	pop	r29
    305a:	cf 91       	pop	r28
    305c:	1f 91       	pop	r17
    305e:	0f 91       	pop	r16
    3060:	08 95       	ret

00003062 <PM_SendEraseCommand>:
	}
}

void PM_SendEraseCommand(void)
{
    3062:	0f 93       	push	r16
    3064:	1f 93       	push	r17
    3066:	cf 93       	push	r28
    3068:	df 93       	push	r29
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	22 97       	sbiw	r28, 0x02	; 2
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	cd bf       	out	0x3d, r28	; 61
	uint16_t EEPROMAddress;

	EEPROMAddress = Prog_EraseChip + 2;               // Start of the erase commands
    307a:	80 91 18 01 	lds	r24, 0x0118
    307e:	90 91 19 01 	lds	r25, 0x0119
    3082:	02 96       	adiw	r24, 0x02	; 2
    3084:	9a 83       	std	Y+2, r25	; 0x02
    3086:	89 83       	std	Y+1, r24	; 0x01
    3088:	13 e0       	ldi	r17, 0x03	; 3
			
	for (uint8_t B = 0; B < 4 ; B++)                  // Read out the erase chip command bytes
	{
		USI_SPITransmit(eeprom_read_byte_169(&EEPROMAddress)); // Send the erase chip commands
    308a:	ce 01       	movw	r24, r28
    308c:	01 96       	adiw	r24, 0x01	; 1
    308e:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    3092:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
		EEPROMAddress++;
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	9a 81       	ldd	r25, Y+2	; 0x02
    309a:	01 96       	adiw	r24, 0x01	; 1
    309c:	9a 83       	std	Y+2, r25	; 0x02
    309e:	89 83       	std	Y+1, r24	; 0x01
    30a0:	11 50       	subi	r17, 0x01	; 1
    30a2:	17 ff       	sbrs	r17, 7
    30a4:	f2 cf       	rjmp	.-28     	; 0x308a <PM_SendEraseCommand+0x28>
	}
			
	EEPROMAddress = Prog_EraseChip + 1;               // Poll mode flag address
    30a6:	00 91 18 01 	lds	r16, 0x0118
    30aa:	10 91 19 01 	lds	r17, 0x0119
    30ae:	0f 5f       	subi	r16, 0xFF	; 255
    30b0:	1f 4f       	sbci	r17, 0xFF	; 255
    30b2:	1a 83       	std	Y+2, r17	; 0x02
    30b4:	09 83       	std	Y+1, r16	; 0x01
    30b6:	01 50       	subi	r16, 0x01	; 1
    30b8:	10 40       	sbci	r17, 0x00	; 0
	if (eeprom_read_byte_169(&EEPROMAddress))         // Value of 1 indicates a busy flag test
    30ba:	ce 01       	movw	r24, r28
    30bc:	01 96       	adiw	r24, 0x01	; 1
    30be:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    30c2:	88 23       	and	r24, r24
    30c4:	59 f0       	breq	.+22     	; 0x30dc <PM_SendEraseCommand+0x7a>
	{
		do
			USI_SPITransmitWord(0xF000);
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	90 ef       	ldi	r25, 0xF0	; 240
    30ca:	0e 94 b9 09 	call	0x1372 <USI_SPITransmitWord>
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	0e 94 b9 09 	call	0x1372 <USI_SPITransmitWord>
    30d6:	80 fd       	sbrc	r24, 0
    30d8:	f6 cf       	rjmp	.-20     	; 0x30c6 <PM_SendEraseCommand+0x64>
    30da:	08 c0       	rjmp	.+16     	; 0x30ec <PM_SendEraseCommand+0x8a>
		while (USI_SPITransmitWord(0x0000) & 0x01);
	}
	else                                              // Cleared flag means use a predefined delay
	{
		EEPROMAddress = Prog_EraseChip;               // Delay value address			
    30dc:	1a 83       	std	Y+2, r17	; 0x02
    30de:	09 83       	std	Y+1, r16	; 0x01
		MAIN_Delay1MS(eeprom_read_byte_169(&EEPROMAddress)); // Wait the erase delay
    30e0:	ce 01       	movw	r24, r28
    30e2:	01 96       	adiw	r24, 0x01	; 1
    30e4:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    30e8:	0e 94 09 03 	call	0x612 <MAIN_Delay1MS>
    30ec:	22 96       	adiw	r28, 0x02	; 2
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	f8 94       	cli
    30f2:	de bf       	out	0x3e, r29	; 62
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	cd bf       	out	0x3d, r28	; 61
    30f8:	df 91       	pop	r29
    30fa:	cf 91       	pop	r28
    30fc:	1f 91       	pop	r17
    30fe:	0f 91       	pop	r16
    3100:	08 95       	ret

00003102 <PM_CreateProgrammingPackets>:
	}
}

void PM_CreateProgrammingPackets(uint8_t Type)
{			
    3102:	2f 92       	push	r2
    3104:	3f 92       	push	r3
    3106:	4f 92       	push	r4
    3108:	5f 92       	push	r5
    310a:	6f 92       	push	r6
    310c:	7f 92       	push	r7
    310e:	8f 92       	push	r8
    3110:	9f 92       	push	r9
    3112:	af 92       	push	r10
    3114:	bf 92       	push	r11
    3116:	cf 92       	push	r12
    3118:	df 92       	push	r13
    311a:	ef 92       	push	r14
    311c:	ff 92       	push	r15
    311e:	0f 93       	push	r16
    3120:	1f 93       	push	r17
    3122:	cf 93       	push	r28
    3124:	df 93       	push	r29
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    312a:	23 97       	sbiw	r28, 0x03	; 3
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	de bf       	out	0x3e, r29	; 62
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	cd bf       	out	0x3d, r28	; 61
    3136:	18 2f       	mov	r17, r24
	uint32_t BytesRead       = 0;
    3138:	88 24       	eor	r8, r8
    313a:	99 24       	eor	r9, r9
    313c:	54 01       	movw	r10, r8
	uint32_t BytesToRead     = PM_GetStoredDataSize(Type);      // Get the byte size of the stored program
    313e:	0e 94 6f 13 	call	0x26de <PM_GetStoredDataSize>
    3142:	1b 01       	movw	r2, r22
    3144:	2c 01       	movw	r4, r24
	uint16_t BytesPerProgram;
	uint16_t EEPROMAddress;
	uint16_t PageLength;
	uint8_t  ContinuedPage   = FALSE;
    3146:	1b 82       	std	Y+3, r1	; 0x03

	EEPROMAddress = ((Type == TYPE_FLASH)? Prog_PageLength : Prog_EPageLength);
    3148:	11 30       	cpi	r17, 0x01	; 1
    314a:	29 f4       	brne	.+10     	; 0x3156 <PM_CreateProgrammingPackets+0x54>
    314c:	80 91 08 01 	lds	r24, 0x0108
    3150:	90 91 09 01 	lds	r25, 0x0109
    3154:	04 c0       	rjmp	.+8      	; 0x315e <PM_CreateProgrammingPackets+0x5c>
    3156:	80 91 06 01 	lds	r24, 0x0106
    315a:	90 91 07 01 	lds	r25, 0x0107
    315e:	9a 83       	std	Y+2, r25	; 0x02
    3160:	89 83       	std	Y+1, r24	; 0x01
	PageLength    = ((uint16_t)eeprom_read_byte_169(&EEPROMAddress) << 8);
    3162:	ce 01       	movw	r24, r28
    3164:	01 96       	adiw	r24, 0x01	; 1
    3166:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    316a:	99 27       	eor	r25, r25
    316c:	78 2e       	mov	r7, r24
    316e:	66 24       	eor	r6, r6
	EEPROMAddress++;
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	9a 81       	ldd	r25, Y+2	; 0x02
    3174:	01 96       	adiw	r24, 0x01	; 1
    3176:	9a 83       	std	Y+2, r25	; 0x02
    3178:	89 83       	std	Y+1, r24	; 0x01
	PageLength   |= (eeprom_read_byte_169(&EEPROMAddress));
    317a:	ce 01       	movw	r24, r28
    317c:	01 96       	adiw	r24, 0x01	; 1
    317e:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    3182:	99 27       	eor	r25, r25
    3184:	68 2a       	or	r6, r24
    3186:	79 2a       	or	r7, r25
	
	CurrAddress = 0;
    3188:	10 92 2b 01 	sts	0x012B, r1
    318c:	10 92 2c 01 	sts	0x012C, r1
    3190:	10 92 2d 01 	sts	0x012D, r1
    3194:	10 92 2e 01 	sts	0x012E, r1

	if (Type == TYPE_FLASH)
    3198:	11 30       	cpi	r17, 0x01	; 1
    319a:	69 f4       	brne	.+26     	; 0x31b6 <PM_CreateProgrammingPackets+0xb4>
	{
		EEPROMAddress = Prog_WriteProgram;             // Set the EEPROM pointer to the write flash command bytes location
    319c:	80 91 1e 01 	lds	r24, 0x011E
    31a0:	90 91 1f 01 	lds	r25, 0x011F
    31a4:	9a 83       	std	Y+2, r25	; 0x02
    31a6:	89 83       	std	Y+1, r24	; 0x01
		DF_ContinuousReadEnable(0, 0);
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	70 e0       	ldi	r23, 0x00	; 0
    31ac:	cb 01       	movw	r24, r22
    31ae:	0e 94 1a 0a 	call	0x1434 <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_FLASH_ISP;
    31b2:	83 e1       	ldi	r24, 0x13	; 19
    31b4:	0d c0       	rjmp	.+26     	; 0x31d0 <PM_CreateProgrammingPackets+0xce>
	}
	else
	{
		EEPROMAddress = Prog_WriteEEPROM;              // Set the EEPROM pointer to the write EEPROM command bytes location
    31b6:	80 91 1c 01 	lds	r24, 0x011C
    31ba:	90 91 1d 01 	lds	r25, 0x011D
    31be:	9a 83       	std	Y+2, r25	; 0x02
    31c0:	89 83       	std	Y+1, r24	; 0x01
		DF_ContinuousReadEnable(PM_EEPROM_OFFSET / DF_INTERNALDF_BUFFBYTES, PM_EEPROM_OFFSET % DF_INTERNALDF_BUFFBYTES); // Start read from the EEPROM offset location
    31c2:	60 ee       	ldi	r22, 0xE0	; 224
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	84 ee       	ldi	r24, 0xE4	; 228
    31c8:	93 e0       	ldi	r25, 0x03	; 3
    31ca:	0e 94 1a 0a 	call	0x1434 <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_EEPROM_ISP;
    31ce:	85 e1       	ldi	r24, 0x15	; 21
    31d0:	80 93 34 01 	sts	0x0134, r24
    31d4:	f5 e3       	ldi	r31, 0x35	; 53
    31d6:	ef 2e       	mov	r14, r31
    31d8:	f1 e0       	ldi	r31, 0x01	; 1
    31da:	ff 2e       	mov	r15, r31
    31dc:	18 e0       	ldi	r17, 0x08	; 8
	}

	for (uint8_t B = 1; B <= 9 ; B++)                 // Load in the write data command bytes
	{
		PacketBytes[B] = eeprom_read_byte_169(&EEPROMAddress); // Synthesise a write packet header
    31de:	ce 01       	movw	r24, r28
    31e0:	01 96       	adiw	r24, 0x01	; 1
    31e2:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
    31e6:	f7 01       	movw	r30, r14
    31e8:	81 93       	st	Z+, r24
    31ea:	7f 01       	movw	r14, r30
		EEPROMAddress++;                               // Increment the EEPROM location counter
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	9a 81       	ldd	r25, Y+2	; 0x02
    31f0:	01 96       	adiw	r24, 0x01	; 1
    31f2:	9a 83       	std	Y+2, r25	; 0x02
    31f4:	89 83       	std	Y+1, r24	; 0x01
    31f6:	11 50       	subi	r17, 0x01	; 1
    31f8:	17 ff       	sbrs	r17, 7
    31fa:	f1 cf       	rjmp	.-30     	; 0x31de <PM_CreateProgrammingPackets+0xdc>
	}
	
	BytesPerProgram = ((uint16_t)PacketBytes[1] << 8)
    31fc:	80 91 35 01 	lds	r24, 0x0135
    3200:	99 27       	eor	r25, r25
    3202:	d8 2e       	mov	r13, r24
    3204:	cc 24       	eor	r12, r12
    3206:	80 91 36 01 	lds	r24, 0x0136
    320a:	99 27       	eor	r25, r25
    320c:	c8 2a       	or	r12, r24
    320e:	d9 2a       	or	r13, r25
	                | PacketBytes[2];

	while (BytesRead < BytesToRead)
	{
		if (PacketBytes[3] & ISPCC_PROG_MODE_PAGE)
		{
			if (PageLength > 160) // Max 160 bytes at a time
			{
				if (!(ContinuedPage))                      // Start of a new page, program in the first 150 bytes
				{
					BytesPerProgram = 160;
					PacketBytes[3] &= ~ISPCC_PROG_MODE_PAGEDONE;		
					ContinuedPage = TRUE;
				}
				else                                       // Middle of a page, program in the remainder
				{
					BytesPerProgram = PageLength - 160;
					PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
					ContinuedPage = FALSE;
				}
				
				for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page				

				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);
				PacketBytes[2] = (uint8_t)(BytesPerProgram);

				BytesRead += BytesPerProgram;                         // Increment the counter
			}
			else
			{
				for (uint16_t LoadB = 0; LoadB < PageLength; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page
			
				PacketBytes[1]  = (uint8_t)(PageLength >> 8);
				PacketBytes[2]  = (uint8_t)(PageLength);
				PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;

				BytesRead += PageLength;                            // Increment the counter
			}
		}
		else
		{
			if ((BytesRead + BytesPerProgram) > BytesToRead)        // Less than a whole BytesPerProgram left of data to write
			{
				BytesPerProgram = BytesToRead - BytesRead;          // Next lot of bytes will be the remaining data length
				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);   // \. Save the new length
				PacketBytes[2] = (uint8_t)(BytesPerProgram);        // /  into the data packet
			}

			for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
				PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);    // Load in the page
			
			BytesRead += BytesPerProgram;                           // Increment the counter
		}
	
		if (!(BytesRead & 0xFFFF) && (BytesRead & 0x00FF0000))      // Extended address required
		{
			USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);            // Load extended address command
			USI_SPITransmit(0x00);
			USI_SPITransmit((BytesRead & 0x00FF0000) >> 16);        // The 3rd byte of the long holds the extended address
			USI_SPITransmit(0x00);
		}

		ISPCC_ProgramChip();                                        // Start the program cycle
    3210:	82 14       	cp	r8, r2
    3212:	93 04       	cpc	r9, r3
    3214:	a4 04       	cpc	r10, r4
    3216:	b5 04       	cpc	r11, r5
    3218:	08 f0       	brcs	.+2      	; 0x321c <PM_CreateProgrammingPackets+0x11a>
    321a:	b7 c0       	rjmp	.+366    	; 0x338a <PM_CreateProgrammingPackets+0x288>
    321c:	20 91 37 01 	lds	r18, 0x0137
    3220:	82 2f       	mov	r24, r18
    3222:	99 27       	eor	r25, r25
    3224:	ac 01       	movw	r20, r24
    3226:	41 70       	andi	r20, 0x01	; 1
    3228:	50 70       	andi	r21, 0x00	; 0
    322a:	80 ff       	sbrs	r24, 0
    322c:	58 c0       	rjmp	.+176    	; 0x32de <PM_CreateProgrammingPackets+0x1dc>
    322e:	f1 ea       	ldi	r31, 0xA1	; 161
    3230:	6f 16       	cp	r6, r31
    3232:	71 04       	cpc	r7, r1
    3234:	88 f1       	brcs	.+98     	; 0x3298 <PM_CreateProgrammingPackets+0x196>
    3236:	8b 81       	ldd	r24, Y+3	; 0x03
    3238:	88 23       	and	r24, r24
    323a:	49 f4       	brne	.+18     	; 0x324e <PM_CreateProgrammingPackets+0x14c>
    323c:	70 ea       	ldi	r23, 0xA0	; 160
    323e:	c7 2e       	mov	r12, r23
    3240:	d1 2c       	mov	r13, r1
    3242:	2f 77       	andi	r18, 0x7F	; 127
    3244:	20 93 37 01 	sts	0x0137, r18
    3248:	e1 e0       	ldi	r30, 0x01	; 1
    324a:	eb 83       	std	Y+3, r30	; 0x03
    324c:	0a c0       	rjmp	.+20     	; 0x3262 <PM_CreateProgrammingPackets+0x160>
    324e:	60 e6       	ldi	r22, 0x60	; 96
    3250:	c6 2e       	mov	r12, r22
    3252:	6f ef       	ldi	r22, 0xFF	; 255
    3254:	d6 2e       	mov	r13, r22
    3256:	c6 0c       	add	r12, r6
    3258:	d7 1c       	adc	r13, r7
    325a:	20 68       	ori	r18, 0x80	; 128
    325c:	20 93 37 01 	sts	0x0137, r18
    3260:	1b 82       	std	Y+3, r1	; 0x03
    3262:	00 e0       	ldi	r16, 0x00	; 0
    3264:	10 e0       	ldi	r17, 0x00	; 0
    3266:	0c 15       	cp	r16, r12
    3268:	1d 05       	cpc	r17, r13
    326a:	78 f4       	brcc	.+30     	; 0x328a <PM_CreateProgrammingPackets+0x188>
    326c:	5e e3       	ldi	r21, 0x3E	; 62
    326e:	e5 2e       	mov	r14, r21
    3270:	51 e0       	ldi	r21, 0x01	; 1
    3272:	f5 2e       	mov	r15, r21
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	0e 94 41 09 	call	0x1282 <SPI_SPITransmit>
    327a:	f7 01       	movw	r30, r14
    327c:	81 93       	st	Z+, r24
    327e:	7f 01       	movw	r14, r30
    3280:	0f 5f       	subi	r16, 0xFF	; 255
    3282:	1f 4f       	sbci	r17, 0xFF	; 255
    3284:	0c 15       	cp	r16, r12
    3286:	1d 05       	cpc	r17, r13
    3288:	a8 f3       	brcs	.-22     	; 0x3274 <PM_CreateProgrammingPackets+0x172>
    328a:	8d 2d       	mov	r24, r13
    328c:	99 27       	eor	r25, r25
    328e:	80 93 35 01 	sts	0x0135, r24
    3292:	c0 92 36 01 	sts	0x0136, r12
    3296:	4b c0       	rjmp	.+150    	; 0x332e <PM_CreateProgrammingPackets+0x22c>
    3298:	00 e0       	ldi	r16, 0x00	; 0
    329a:	10 e0       	ldi	r17, 0x00	; 0
    329c:	06 15       	cp	r16, r6
    329e:	17 05       	cpc	r17, r7
    32a0:	78 f4       	brcc	.+30     	; 0x32c0 <PM_CreateProgrammingPackets+0x1be>
    32a2:	3e e3       	ldi	r19, 0x3E	; 62
    32a4:	e3 2e       	mov	r14, r19
    32a6:	31 e0       	ldi	r19, 0x01	; 1
    32a8:	f3 2e       	mov	r15, r19
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	0e 94 41 09 	call	0x1282 <SPI_SPITransmit>
    32b0:	f7 01       	movw	r30, r14
    32b2:	81 93       	st	Z+, r24
    32b4:	7f 01       	movw	r14, r30
    32b6:	0f 5f       	subi	r16, 0xFF	; 255
    32b8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ba:	06 15       	cp	r16, r6
    32bc:	17 05       	cpc	r17, r7
    32be:	a8 f3       	brcs	.-22     	; 0x32aa <PM_CreateProgrammingPackets+0x1a8>
    32c0:	87 2d       	mov	r24, r7
    32c2:	99 27       	eor	r25, r25
    32c4:	80 93 35 01 	sts	0x0135, r24
    32c8:	60 92 36 01 	sts	0x0136, r6
    32cc:	80 91 37 01 	lds	r24, 0x0137
    32d0:	80 68       	ori	r24, 0x80	; 128
    32d2:	80 93 37 01 	sts	0x0137, r24
    32d6:	c3 01       	movw	r24, r6
    32d8:	aa 27       	eor	r26, r26
    32da:	bb 27       	eor	r27, r27
    32dc:	2b c0       	rjmp	.+86     	; 0x3334 <PM_CreateProgrammingPackets+0x232>
    32de:	c6 01       	movw	r24, r12
    32e0:	aa 27       	eor	r26, r26
    32e2:	bb 27       	eor	r27, r27
    32e4:	88 0d       	add	r24, r8
    32e6:	99 1d       	adc	r25, r9
    32e8:	aa 1d       	adc	r26, r10
    32ea:	bb 1d       	adc	r27, r11
    32ec:	28 16       	cp	r2, r24
    32ee:	39 06       	cpc	r3, r25
    32f0:	4a 06       	cpc	r4, r26
    32f2:	5b 06       	cpc	r5, r27
    32f4:	48 f4       	brcc	.+18     	; 0x3308 <PM_CreateProgrammingPackets+0x206>
    32f6:	61 01       	movw	r12, r2
    32f8:	c8 18       	sub	r12, r8
    32fa:	d9 08       	sbc	r13, r9
    32fc:	8d 2d       	mov	r24, r13
    32fe:	99 27       	eor	r25, r25
    3300:	80 93 35 01 	sts	0x0135, r24
    3304:	c0 92 36 01 	sts	0x0136, r12
    3308:	8a 01       	movw	r16, r20
    330a:	4c 15       	cp	r20, r12
    330c:	5d 05       	cpc	r21, r13
    330e:	78 f4       	brcc	.+30     	; 0x332e <PM_CreateProgrammingPackets+0x22c>
    3310:	8e e3       	ldi	r24, 0x3E	; 62
    3312:	e8 2e       	mov	r14, r24
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	f8 2e       	mov	r15, r24
    3318:	80 e0       	ldi	r24, 0x00	; 0
    331a:	0e 94 41 09 	call	0x1282 <SPI_SPITransmit>
    331e:	f7 01       	movw	r30, r14
    3320:	81 93       	st	Z+, r24
    3322:	7f 01       	movw	r14, r30
    3324:	0f 5f       	subi	r16, 0xFF	; 255
    3326:	1f 4f       	sbci	r17, 0xFF	; 255
    3328:	0c 15       	cp	r16, r12
    332a:	1d 05       	cpc	r17, r13
    332c:	a8 f3       	brcs	.-22     	; 0x3318 <PM_CreateProgrammingPackets+0x216>
    332e:	c6 01       	movw	r24, r12
    3330:	aa 27       	eor	r26, r26
    3332:	bb 27       	eor	r27, r27
    3334:	88 0e       	add	r8, r24
    3336:	99 1e       	adc	r9, r25
    3338:	aa 1e       	adc	r10, r26
    333a:	bb 1e       	adc	r11, r27
    333c:	81 14       	cp	r8, r1
    333e:	91 04       	cpc	r9, r1
    3340:	e1 f4       	brne	.+56     	; 0x337a <PM_CreateProgrammingPackets+0x278>
    3342:	e1 2c       	mov	r14, r1
    3344:	f1 2c       	mov	r15, r1
    3346:	bf ef       	ldi	r27, 0xFF	; 255
    3348:	0b 2f       	mov	r16, r27
    334a:	11 2d       	mov	r17, r1
    334c:	e8 20       	and	r14, r8
    334e:	f9 20       	and	r15, r9
    3350:	0a 21       	and	r16, r10
    3352:	1b 21       	and	r17, r11
    3354:	e1 14       	cp	r14, r1
    3356:	f1 04       	cpc	r15, r1
    3358:	01 05       	cpc	r16, r1
    335a:	11 05       	cpc	r17, r1
    335c:	71 f0       	breq	.+28     	; 0x337a <PM_CreateProgrammingPackets+0x278>
    335e:	8d e4       	ldi	r24, 0x4D	; 77
    3360:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    336a:	c8 01       	movw	r24, r16
    336c:	aa 27       	eor	r26, r26
    336e:	bb 27       	eor	r27, r27
    3370:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    3374:	80 e0       	ldi	r24, 0x00	; 0
    3376:	0e 94 a6 09 	call	0x134c <USI_SPITransmit>
    337a:	0e 94 18 11 	call	0x2230 <ISPCC_ProgramChip>
    337e:	82 14       	cp	r8, r2
    3380:	93 04       	cpc	r9, r3
    3382:	a4 04       	cpc	r10, r4
    3384:	b5 04       	cpc	r11, r5
    3386:	08 f4       	brcc	.+2      	; 0x338a <PM_CreateProgrammingPackets+0x288>
    3388:	49 cf       	rjmp	.-366    	; 0x321c <PM_CreateProgrammingPackets+0x11a>
    338a:	23 96       	adiw	r28, 0x03	; 3
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	de bf       	out	0x3e, r29	; 62
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	cd bf       	out	0x3d, r28	; 61
    3396:	df 91       	pop	r29
    3398:	cf 91       	pop	r28
    339a:	1f 91       	pop	r17
    339c:	0f 91       	pop	r16
    339e:	ff 90       	pop	r15
    33a0:	ef 90       	pop	r14
    33a2:	df 90       	pop	r13
    33a4:	cf 90       	pop	r12
    33a6:	bf 90       	pop	r11
    33a8:	af 90       	pop	r10
    33aa:	9f 90       	pop	r9
    33ac:	8f 90       	pop	r8
    33ae:	7f 90       	pop	r7
    33b0:	6f 90       	pop	r6
    33b2:	5f 90       	pop	r5
    33b4:	4f 90       	pop	r4
    33b6:	3f 90       	pop	r3
    33b8:	2f 90       	pop	r2
    33ba:	08 95       	ret

000033bc <PM_ShowStoredItemSizes>:
	}
}

void PM_ShowStoredItemSizes(void)
{
    33bc:	1f 93       	push	r17
    33be:	cf 93       	push	r28
    33c0:	df 93       	push	r29
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	2e 97       	sbiw	r28, 0x0e	; 14
    33c8:	0f b6       	in	r0, 0x3f	; 63
    33ca:	f8 94       	cli
    33cc:	de bf       	out	0x3e, r29	; 62
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[14];
	uint8_t ItemInfoIndex = 0;
    33d2:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t TempB;
	
	JoyStatus = 1;
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)                           // Joystick is in the non-center position
    33d8:	8e b3       	in	r24, 0x1e	; 30
    33da:	88 23       	and	r24, r24
    33dc:	e9 f3       	breq	.-6      	; 0x33d8 <PM_ShowStoredItemSizes+0x1c>
		{
			if (JoyStatus & JOY_UP)              // Previous item
    33de:	f6 9b       	sbis	0x1e, 6	; 30
    33e0:	06 c0       	rjmp	.+12     	; 0x33ee <PM_ShowStoredItemSizes+0x32>
				(ItemInfoIndex == 0)? ItemInfoIndex = 3 : ItemInfoIndex--;
    33e2:	11 23       	and	r17, r17
    33e4:	11 f4       	brne	.+4      	; 0x33ea <PM_ShowStoredItemSizes+0x2e>
    33e6:	13 e0       	ldi	r17, 0x03	; 3
    33e8:	0c c0       	rjmp	.+24     	; 0x3402 <PM_ShowStoredItemSizes+0x46>
    33ea:	11 50       	subi	r17, 0x01	; 1
    33ec:	0a c0       	rjmp	.+20     	; 0x3402 <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_DOWN)      // Next item
    33ee:	f7 9b       	sbis	0x1e, 7	; 30
    33f0:	06 c0       	rjmp	.+12     	; 0x33fe <PM_ShowStoredItemSizes+0x42>
				(ItemInfoIndex == 3)? ItemInfoIndex = 0 : ItemInfoIndex++;
    33f2:	13 30       	cpi	r17, 0x03	; 3
    33f4:	11 f4       	brne	.+4      	; 0x33fa <PM_ShowStoredItemSizes+0x3e>
    33f6:	10 e0       	ldi	r17, 0x00	; 0
    33f8:	04 c0       	rjmp	.+8      	; 0x3402 <PM_ShowStoredItemSizes+0x46>
    33fa:	1f 5f       	subi	r17, 0xFF	; 255
    33fc:	02 c0       	rjmp	.+4      	; 0x3402 <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_LEFT)
    33fe:	f2 99       	sbic	0x1e, 2	; 30
    3400:	53 c0       	rjmp	.+166    	; 0x34a8 <PM_ShowStoredItemSizes+0xec>
				return;
		
			switch (ItemInfoIndex)
    3402:	81 2f       	mov	r24, r17
    3404:	99 27       	eor	r25, r25
    3406:	81 30       	cpi	r24, 0x01	; 1
    3408:	91 05       	cpc	r25, r1
    340a:	a1 f0       	breq	.+40     	; 0x3434 <PM_ShowStoredItemSizes+0x78>
    340c:	82 30       	cpi	r24, 0x02	; 2
    340e:	91 05       	cpc	r25, r1
    3410:	1c f4       	brge	.+6      	; 0x3418 <PM_ShowStoredItemSizes+0x5c>
    3412:	89 2b       	or	r24, r25
    3414:	39 f0       	breq	.+14     	; 0x3424 <PM_ShowStoredItemSizes+0x68>
    3416:	41 c0       	rjmp	.+130    	; 0x349a <PM_ShowStoredItemSizes+0xde>
    3418:	82 30       	cpi	r24, 0x02	; 2
    341a:	91 05       	cpc	r25, r1
    341c:	01 f1       	breq	.+64     	; 0x345e <PM_ShowStoredItemSizes+0xa2>
    341e:	03 97       	sbiw	r24, 0x03	; 3
    3420:	39 f1       	breq	.+78     	; 0x3470 <PM_ShowStoredItemSizes+0xb4>
    3422:	3b c0       	rjmp	.+118    	; 0x349a <PM_ShowStoredItemSizes+0xde>
			{
				case 0:
					strcpy_P(Buffer, PSTR("DATA-"));
    3424:	63 e0       	ldi	r22, 0x03	; 3
    3426:	74 e0       	ldi	r23, 0x04	; 4
    3428:	ce 01       	movw	r24, r28
    342a:	01 96       	adiw	r24, 0x01	; 1
    342c:	0e 94 30 1b 	call	0x3660 <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_FLASH), &Buffer[5], 10);
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	07 c0       	rjmp	.+14     	; 0x3442 <PM_ShowStoredItemSizes+0x86>
					break;
				case 1:
					strcpy_P(Buffer, PSTR("EPRM-"));
    3434:	69 e0       	ldi	r22, 0x09	; 9
    3436:	74 e0       	ldi	r23, 0x04	; 4
    3438:	ce 01       	movw	r24, r28
    343a:	01 96       	adiw	r24, 0x01	; 1
    343c:	0e 94 30 1b 	call	0x3660 <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_EEPROM), &Buffer[5], 10);
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	0e 94 6f 13 	call	0x26de <PM_GetStoredDataSize>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	2a e0       	ldi	r18, 0x0A	; 10
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	ae 01       	movw	r20, r28
    3450:	4a 5f       	subi	r20, 0xFA	; 250
    3452:	5f 4f       	sbci	r21, 0xFF	; 255
    3454:	bc 01       	movw	r22, r24
    3456:	cd 01       	movw	r24, r26
    3458:	0e 94 37 1b 	call	0x366e <ultoa>
					break;
    345c:	1e c0       	rjmp	.+60     	; 0x349a <PM_ShowStoredItemSizes+0xde>
				case 2:
					strcpy_P(Buffer, PSTR("FUSE-"));
    345e:	6f e0       	ldi	r22, 0x0F	; 15
    3460:	74 e0       	ldi	r23, 0x04	; 4
    3462:	ce 01       	movw	r24, r28
    3464:	01 96       	adiw	r24, 0x01	; 1
    3466:	0e 94 30 1b 	call	0x3660 <strcpy_P>
					TempB = eeprom_read_byte_169(&Prog_TotalFuseBytes);
    346a:	80 e1       	ldi	r24, 0x10	; 16
    346c:	91 e0       	ldi	r25, 0x01	; 1
    346e:	08 c0       	rjmp	.+16     	; 0x3480 <PM_ShowStoredItemSizes+0xc4>
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);
					break;
				case 3:
					strcpy_P(Buffer, PSTR("LOCK-"));
    3470:	65 e1       	ldi	r22, 0x15	; 21
    3472:	74 e0       	ldi	r23, 0x04	; 4
    3474:	ce 01       	movw	r24, r28
    3476:	01 96       	adiw	r24, 0x01	; 1
    3478:	0e 94 30 1b 	call	0x3660 <strcpy_P>
					TempB = eeprom_read_byte_169(&Prog_TotalLockBytes);
    347c:	8e e0       	ldi	r24, 0x0E	; 14
    347e:	91 e0       	ldi	r25, 0x01	; 1
    3480:	0e 94 b8 08 	call	0x1170 <eeprom_read_byte_169>
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);		
    3484:	8f 3f       	cpi	r24, 0xFF	; 255
    3486:	11 f0       	breq	.+4      	; 0x348c <PM_ShowStoredItemSizes+0xd0>
    3488:	99 27       	eor	r25, r25
    348a:	02 c0       	rjmp	.+4      	; 0x3490 <PM_ShowStoredItemSizes+0xd4>
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	be 01       	movw	r22, r28
    3492:	6a 5f       	subi	r22, 0xFA	; 250
    3494:	7f 4f       	sbci	r23, 0xFF	; 255
    3496:	0e 94 36 03 	call	0x66c <MAIN_IntToStr>
			}
	
			LCD_puts(Buffer);
    349a:	ce 01       	movw	r24, r28
    349c:	01 96       	adiw	r24, 0x01	; 1
    349e:	0e 94 bd 07 	call	0xf7a <LCD_puts>

			MAIN_WaitForJoyRelease();
    34a2:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
    34a6:	98 cf       	rjmp	.-208    	; 0x33d8 <PM_ShowStoredItemSizes+0x1c>
    34a8:	2e 96       	adiw	r28, 0x0e	; 14
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	f8 94       	cli
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	cd bf       	out	0x3d, r28	; 61
    34b4:	df 91       	pop	r29
    34b6:	cf 91       	pop	r28
    34b8:	1f 91       	pop	r17
    34ba:	08 95       	ret

000034bc <TM_FindNextTag>:
	DF_EnableDataflash(FALSE);
}

void TM_FindNextTag(void)
{
    34bc:	af 92       	push	r10
    34be:	bf 92       	push	r11
    34c0:	df 92       	push	r13
    34c2:	ef 92       	push	r14
    34c4:	ff 92       	push	r15
    34c6:	0f 93       	push	r16
    34c8:	1f 93       	push	r17
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	69 97       	sbiw	r28, 0x19	; 25
    34d4:	0f b6       	in	r0, 0x3f	; 63
    34d6:	f8 94       	cli
    34d8:	de bf       	out	0x3e, r29	; 62
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Buffer[21];
	uint8_t  HeadBuff[4]      = BT_TAGHEADER;
    34de:	80 e4       	ldi	r24, 0x40	; 64
    34e0:	8e 8b       	std	Y+22, r24	; 0x16
    34e2:	86 e1       	ldi	r24, 0x16	; 22
    34e4:	a8 2e       	mov	r10, r24
    34e6:	b1 2c       	mov	r11, r1
    34e8:	ac 0e       	add	r10, r28
    34ea:	bd 1e       	adc	r11, r29
    34ec:	88 e2       	ldi	r24, 0x28	; 40
    34ee:	8f 8b       	std	Y+23, r24	; 0x17
    34f0:	83 e2       	ldi	r24, 0x23	; 35
    34f2:	88 8f       	std	Y+24, r24	; 0x18
    34f4:	89 e2       	ldi	r24, 0x29	; 41
    34f6:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t ProgDataSize     = PM_GetStoredDataSize(TYPE_FLASH);
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	0e 94 6f 13 	call	0x26de <PM_GetStoredDataSize>
    34fe:	7b 01       	movw	r14, r22
    3500:	8c 01       	movw	r16, r24
	uint8_t  TotalOkHeadBytes = 0;
    3502:	dd 24       	eor	r13, r13
	uint8_t  TagByte;
	uint8_t  BytesRead;
	
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);    // Orange = busy
    3504:	81 b3       	in	r24, 0x11	; 17
    3506:	80 63       	ori	r24, 0x30	; 48
    3508:	81 bb       	out	0x11, r24	; 17

	while (DFPos < ProgDataSize)
	{
		BytesRead = 1;
		
		if (SPI_SPITransmit(0x00) == HeadBuff[TotalOkHeadBytes++])
		{
			if (TotalOkHeadBytes == 4)
			{
				uint8_t HB;
			
				for (HB = 0; HB < 20; HB++)
				{
					TagByte = SPI_SPITransmit(0x00);
					Buffer[HB] = TagByte;
					
					if (TagByte == 0x00)
					  break;
				}
				
				Buffer[20] = '\0';             // Make sure string is null-terminated

				TagExists = TRUE;
				BytesRead = (HB + 2);

				LCD_puts(Buffer);
				MAIN_SETSTATUSLED(MAIN_STATLED_GREEN); // Green = ready
				return;
			}
		}
		else
		{
			TotalOkHeadBytes = 0;
		}

		DFPos += BytesRead;
    350a:	80 91 d2 02 	lds	r24, 0x02D2
    350e:	90 91 d3 02 	lds	r25, 0x02D3
    3512:	a0 91 d4 02 	lds	r26, 0x02D4
    3516:	b0 91 d5 02 	lds	r27, 0x02D5
    351a:	8e 15       	cp	r24, r14
    351c:	9f 05       	cpc	r25, r15
    351e:	a0 07       	cpc	r26, r16
    3520:	b1 07       	cpc	r27, r17
    3522:	08 f0       	brcs	.+2      	; 0x3526 <TM_FindNextTag+0x6a>
    3524:	43 c0       	rjmp	.+134    	; 0x35ac <TM_FindNextTag+0xf0>
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	0e 94 41 09 	call	0x1282 <SPI_SPITransmit>
    352c:	f5 01       	movw	r30, r10
    352e:	ed 0d       	add	r30, r13
    3530:	f1 1d       	adc	r31, r1
    3532:	d3 94       	inc	r13
    3534:	90 81       	ld	r25, Z
    3536:	89 17       	cp	r24, r25
    3538:	21 f5       	brne	.+72     	; 0x3582 <TM_FindNextTag+0xc6>
    353a:	84 e0       	ldi	r24, 0x04	; 4
    353c:	d8 16       	cp	r13, r24
    353e:	11 f5       	brne	.+68     	; 0x3584 <TM_FindNextTag+0xc8>
    3540:	ff 24       	eor	r15, r15
    3542:	00 e0       	ldi	r16, 0x00	; 0
    3544:	10 e0       	ldi	r17, 0x00	; 0
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	0e 94 41 09 	call	0x1282 <SPI_SPITransmit>
    354c:	9e 01       	movw	r18, r28
    354e:	2f 5f       	subi	r18, 0xFF	; 255
    3550:	3f 4f       	sbci	r19, 0xFF	; 255
    3552:	f8 01       	movw	r30, r16
    3554:	e2 0f       	add	r30, r18
    3556:	f3 1f       	adc	r31, r19
    3558:	80 83       	st	Z, r24
    355a:	88 23       	and	r24, r24
    355c:	31 f0       	breq	.+12     	; 0x356a <TM_FindNextTag+0xae>
    355e:	f3 94       	inc	r15
    3560:	0f 5f       	subi	r16, 0xFF	; 255
    3562:	1f 4f       	sbci	r17, 0xFF	; 255
    3564:	83 e1       	ldi	r24, 0x13	; 19
    3566:	8f 15       	cp	r24, r15
    3568:	70 f7       	brcc	.-36     	; 0x3546 <TM_FindNextTag+0x8a>
    356a:	1d 8a       	std	Y+21, r1	; 0x15
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	80 93 4b 02 	sts	0x024B, r24
    3572:	c9 01       	movw	r24, r18
    3574:	0e 94 bd 07 	call	0xf7a <LCD_puts>
    3578:	81 b3       	in	r24, 0x11	; 17
    357a:	8f 7c       	andi	r24, 0xCF	; 207
    357c:	80 61       	ori	r24, 0x10	; 16
    357e:	81 bb       	out	0x11, r24	; 17
    3580:	31 c0       	rjmp	.+98     	; 0x35e4 <TM_FindNextTag+0x128>
    3582:	dd 24       	eor	r13, r13
    3584:	80 91 d2 02 	lds	r24, 0x02D2
    3588:	90 91 d3 02 	lds	r25, 0x02D3
    358c:	a0 91 d4 02 	lds	r26, 0x02D4
    3590:	b0 91 d5 02 	lds	r27, 0x02D5
    3594:	01 96       	adiw	r24, 0x01	; 1
    3596:	a1 1d       	adc	r26, r1
    3598:	b1 1d       	adc	r27, r1
    359a:	80 93 d2 02 	sts	0x02D2, r24
    359e:	90 93 d3 02 	sts	0x02D3, r25
    35a2:	a0 93 d4 02 	sts	0x02D4, r26
    35a6:	b0 93 d5 02 	sts	0x02D5, r27
    35aa:	b7 cf       	rjmp	.-146    	; 0x351a <TM_FindNextTag+0x5e>
	}
	
	DF_ContinuousReadEnable(0, 0);
    35ac:	60 e0       	ldi	r22, 0x00	; 0
    35ae:	70 e0       	ldi	r23, 0x00	; 0
    35b0:	cb 01       	movw	r24, r22
    35b2:	0e 94 1a 0a 	call	0x1434 <DF_ContinuousReadEnable>
	DFPos = 0;
    35b6:	10 92 d2 02 	sts	0x02D2, r1
    35ba:	10 92 d3 02 	sts	0x02D3, r1
    35be:	10 92 d4 02 	sts	0x02D4, r1
    35c2:	10 92 d5 02 	sts	0x02D5, r1
	
	if (TagExists == FALSE)
    35c6:	80 91 4b 02 	lds	r24, 0x024B
    35ca:	88 23       	and	r24, r24
    35cc:	49 f4       	brne	.+18     	; 0x35e0 <TM_FindNextTag+0x124>
	{
		MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);  // Green = ready
    35ce:	81 b3       	in	r24, 0x11	; 17
    35d0:	8f 7c       	andi	r24, 0xCF	; 207
    35d2:	80 61       	ori	r24, 0x10	; 16
    35d4:	81 bb       	out	0x11, r24	; 17
		MAIN_ShowError(PSTR("NO TAGS"));
    35d6:	8b e1       	ldi	r24, 0x1B	; 27
    35d8:	94 e0       	ldi	r25, 0x04	; 4
    35da:	0e 94 70 03 	call	0x6e0 <MAIN_ShowError>
    35de:	02 c0       	rjmp	.+4      	; 0x35e4 <TM_FindNextTag+0x128>
	}
	else
	{
		/* The following line _is_ recursion, but the function will only ever call itself
		   a maximum of one time. The function will call itself upon skipping from the last
		   tag stored in the program data to the first; to guard against infinite recursion
		   if no tags are present, the system will error out if the TagExists flag is empty
		   after a full data read. Once a tag has been read and displayed onto the LCD, the
           function returns to the main tag handling routine.                               */
		TM_FindNextTag();
    35e0:	0e 94 5e 1a 	call	0x34bc <TM_FindNextTag>
    35e4:	69 96       	adiw	r28, 0x19	; 25
    35e6:	0f b6       	in	r0, 0x3f	; 63
    35e8:	f8 94       	cli
    35ea:	de bf       	out	0x3e, r29	; 62
    35ec:	0f be       	out	0x3f, r0	; 63
    35ee:	cd bf       	out	0x3d, r28	; 61
    35f0:	df 91       	pop	r29
    35f2:	cf 91       	pop	r28
    35f4:	1f 91       	pop	r17
    35f6:	0f 91       	pop	r16
    35f8:	ff 90       	pop	r15
    35fa:	ef 90       	pop	r14
    35fc:	df 90       	pop	r13
    35fe:	bf 90       	pop	r11
    3600:	af 90       	pop	r10
    3602:	08 95       	ret

00003604 <TM_ShowTags>:
    3604:	60 e0       	ldi	r22, 0x00	; 0
    3606:	70 e0       	ldi	r23, 0x00	; 0
    3608:	cb 01       	movw	r24, r22
    360a:	0e 94 1a 0a 	call	0x1434 <DF_ContinuousReadEnable>
    360e:	10 92 4b 02 	sts	0x024B, r1
    3612:	10 92 d2 02 	sts	0x02D2, r1
    3616:	10 92 d3 02 	sts	0x02D3, r1
    361a:	10 92 d4 02 	sts	0x02D4, r1
    361e:	10 92 d5 02 	sts	0x02D5, r1
    3622:	0e 94 5e 1a 	call	0x34bc <TM_FindNextTag>
    3626:	80 91 4b 02 	lds	r24, 0x024B
    362a:	88 23       	and	r24, r24
    362c:	71 f0       	breq	.+28     	; 0x364a <TM_ShowTags+0x46>
    362e:	8e b3       	in	r24, 0x1e	; 30
    3630:	88 23       	and	r24, r24
    3632:	e9 f3       	breq	.-6      	; 0x362e <TM_ShowTags+0x2a>
    3634:	f7 9b       	sbis	0x1e, 7	; 30
    3636:	03 c0       	rjmp	.+6      	; 0x363e <TM_ShowTags+0x3a>
    3638:	0e 94 5e 1a 	call	0x34bc <TM_FindNextTag>
    363c:	02 c0       	rjmp	.+4      	; 0x3642 <TM_ShowTags+0x3e>
    363e:	f2 99       	sbic	0x1e, 2	; 30
    3640:	03 c0       	rjmp	.+6      	; 0x3648 <TM_ShowTags+0x44>
    3642:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
    3646:	f3 cf       	rjmp	.-26     	; 0x362e <TM_ShowTags+0x2a>
    3648:	80 e0       	ldi	r24, 0x00	; 0
    364a:	0e 94 db 09 	call	0x13b6 <DF_EnableDataflash>
    364e:	08 95       	ret

00003650 <__vector_2>:
.global PCINT0_vect             ; Pin change 0 (joystick)
.global PCINT1_vect             ; Pin change 1 (joystick)

PCINT0_vect:
  jmp PCINT1_vect
    3650:	0c 94 96 03 	jmp	0x72c <__vector_3>

00003654 <__vector_10>:

.global TIMER0_COMP_vect             ; Timer 0 compare

TIMER0_COMP_vect:
  push r24
    3654:	8f 93       	push	r24
  ldi r24, (USI_CONTROL_REG_FLAGS | (1<<USITC))
    3656:	8b e5       	ldi	r24, 0x5B	; 91
  sts _SFR_MEM_ADDR(USICR), r24
    3658:	80 93 b8 00 	sts	0x00B8, r24
  pop r24
    365c:	8f 91       	pop	r24
  reti
    365e:	18 95       	reti

00003660 <strcpy_P>:
    3660:	fb 01       	movw	r30, r22
    3662:	dc 01       	movw	r26, r24
    3664:	05 90       	lpm	r0, Z+
    3666:	0d 92       	st	X+, r0
    3668:	00 20       	and	r0, r0
    366a:	e1 f7       	brne	.-8      	; 0x3664 <strcpy_P+0x4>
    366c:	08 95       	ret

0000366e <ultoa>:
    366e:	fa 01       	movw	r30, r20
    3670:	cf 93       	push	r28
    3672:	ff 93       	push	r31
    3674:	ef 93       	push	r30
    3676:	22 30       	cpi	r18, 0x02	; 2
    3678:	cc f0       	brlt	.+50     	; 0x36ac <ultoa+0x3e>
    367a:	25 32       	cpi	r18, 0x25	; 37
    367c:	bc f4       	brge	.+46     	; 0x36ac <ultoa+0x3e>
    367e:	c2 2f       	mov	r28, r18
    3680:	2c 2f       	mov	r18, r28
    3682:	33 27       	eor	r19, r19
    3684:	44 27       	eor	r20, r20
    3686:	55 27       	eor	r21, r21
    3688:	ff 93       	push	r31
    368a:	ef 93       	push	r30
    368c:	0e 94 8b 1b 	call	0x3716 <__udivmodsi4>
    3690:	ef 91       	pop	r30
    3692:	ff 91       	pop	r31
    3694:	60 5d       	subi	r22, 0xD0	; 208
    3696:	6a 33       	cpi	r22, 0x3A	; 58
    3698:	0c f0       	brlt	.+2      	; 0x369c <ultoa+0x2e>
    369a:	69 5d       	subi	r22, 0xD9	; 217
    369c:	61 93       	st	Z+, r22
    369e:	b9 01       	movw	r22, r18
    36a0:	ca 01       	movw	r24, r20
    36a2:	60 50       	subi	r22, 0x00	; 0
    36a4:	70 40       	sbci	r23, 0x00	; 0
    36a6:	80 40       	sbci	r24, 0x00	; 0
    36a8:	90 40       	sbci	r25, 0x00	; 0
    36aa:	51 f7       	brne	.-44     	; 0x3680 <ultoa+0x12>
    36ac:	10 82       	st	Z, r1
    36ae:	8f 91       	pop	r24
    36b0:	9f 91       	pop	r25
    36b2:	cf 91       	pop	r28
    36b4:	0c 94 5c 1b 	jmp	0x36b8 <strrev>

000036b8 <strrev>:
    36b8:	dc 01       	movw	r26, r24
    36ba:	fc 01       	movw	r30, r24
    36bc:	01 90       	ld	r0, Z+
    36be:	00 20       	and	r0, r0
    36c0:	e9 f7       	brne	.-6      	; 0x36bc <strrev+0x4>
    36c2:	32 97       	sbiw	r30, 0x02	; 2
    36c4:	ae 17       	cp	r26, r30
    36c6:	bf 07       	cpc	r27, r31
    36c8:	30 f4       	brcc	.+12     	; 0x36d6 <strrev+0x1e>
    36ca:	7c 91       	ld	r23, X
    36cc:	60 81       	ld	r22, Z
    36ce:	70 83       	st	Z, r23
    36d0:	31 97       	sbiw	r30, 0x01	; 1
    36d2:	6d 93       	st	X+, r22
    36d4:	f7 cf       	rjmp	.-18     	; 0x36c4 <strrev+0xc>
    36d6:	08 95       	ret

000036d8 <__mulsi3>:
    36d8:	62 9f       	mul	r22, r18
    36da:	d0 01       	movw	r26, r0
    36dc:	73 9f       	mul	r23, r19
    36de:	f0 01       	movw	r30, r0
    36e0:	82 9f       	mul	r24, r18
    36e2:	e0 0d       	add	r30, r0
    36e4:	f1 1d       	adc	r31, r1
    36e6:	64 9f       	mul	r22, r20
    36e8:	e0 0d       	add	r30, r0
    36ea:	f1 1d       	adc	r31, r1
    36ec:	92 9f       	mul	r25, r18
    36ee:	f0 0d       	add	r31, r0
    36f0:	83 9f       	mul	r24, r19
    36f2:	f0 0d       	add	r31, r0
    36f4:	74 9f       	mul	r23, r20
    36f6:	f0 0d       	add	r31, r0
    36f8:	65 9f       	mul	r22, r21
    36fa:	f0 0d       	add	r31, r0
    36fc:	99 27       	eor	r25, r25
    36fe:	72 9f       	mul	r23, r18
    3700:	b0 0d       	add	r27, r0
    3702:	e1 1d       	adc	r30, r1
    3704:	f9 1f       	adc	r31, r25
    3706:	63 9f       	mul	r22, r19
    3708:	b0 0d       	add	r27, r0
    370a:	e1 1d       	adc	r30, r1
    370c:	f9 1f       	adc	r31, r25
    370e:	bd 01       	movw	r22, r26
    3710:	cf 01       	movw	r24, r30
    3712:	11 24       	eor	r1, r1
    3714:	08 95       	ret

00003716 <__udivmodsi4>:
    3716:	a1 e2       	ldi	r26, 0x21	; 33
    3718:	1a 2e       	mov	r1, r26
    371a:	aa 1b       	sub	r26, r26
    371c:	bb 1b       	sub	r27, r27
    371e:	fd 01       	movw	r30, r26
    3720:	0d c0       	rjmp	.+26     	; 0x373c <__udivmodsi4_ep>

00003722 <__udivmodsi4_loop>:
    3722:	aa 1f       	adc	r26, r26
    3724:	bb 1f       	adc	r27, r27
    3726:	ee 1f       	adc	r30, r30
    3728:	ff 1f       	adc	r31, r31
    372a:	a2 17       	cp	r26, r18
    372c:	b3 07       	cpc	r27, r19
    372e:	e4 07       	cpc	r30, r20
    3730:	f5 07       	cpc	r31, r21
    3732:	20 f0       	brcs	.+8      	; 0x373c <__udivmodsi4_ep>
    3734:	a2 1b       	sub	r26, r18
    3736:	b3 0b       	sbc	r27, r19
    3738:	e4 0b       	sbc	r30, r20
    373a:	f5 0b       	sbc	r31, r21

0000373c <__udivmodsi4_ep>:
    373c:	66 1f       	adc	r22, r22
    373e:	77 1f       	adc	r23, r23
    3740:	88 1f       	adc	r24, r24
    3742:	99 1f       	adc	r25, r25
    3744:	1a 94       	dec	r1
    3746:	69 f7       	brne	.-38     	; 0x3722 <__udivmodsi4_loop>
    3748:	60 95       	com	r22
    374a:	70 95       	com	r23
    374c:	80 95       	com	r24
    374e:	90 95       	com	r25
    3750:	9b 01       	movw	r18, r22
    3752:	ac 01       	movw	r20, r24
    3754:	bd 01       	movw	r22, r26
    3756:	cf 01       	movw	r24, r30
    3758:	08 95       	ret
