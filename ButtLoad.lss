
ButtLoad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00003790  00003824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003790  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b0  00800126  00800126  0000384a  2**0
                  ALLOC
  3 .noinit       00000000  008002d6  008002d6  0000384a  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000384a  2**0
                  CONTENTS
  5 .stab         00000084  00000000  00000000  0000384c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000078  00000000  00000000  000038d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000140  00000000  00000000  00003948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000fa3  00000000  00000000  00003a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000034f7  00000000  00000000  00004a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e39  00000000  00000000  00007f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000030dd  00000000  00000000  00008d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001184  00000000  00000000  0000be38  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 12 02 	jmp	0x424 <__init>
       4:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
       8:	0c 94 43 1b 	jmp	0x3686 <__vector_2>
       c:	0c 94 a6 03 	jmp	0x74c <__vector_3>
      10:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      14:	0c 94 ab 07 	jmp	0xf56 <__vector_5>
      18:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      1c:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      20:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      24:	0c 94 e7 0b 	jmp	0x17ce <__vector_9>
      28:	0c 94 45 1b 	jmp	0x368a <__vector_10>
      2c:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      30:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      34:	0c 94 32 09 	jmp	0x1264 <__vector_13>
      38:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      3c:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      40:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      44:	0c 94 77 09 	jmp	0x12ee <__vector_17>
      48:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      4c:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      50:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      54:	0c 94 2d 02 	jmp	0x45a <__bad_interrupt>
      58:	0c 94 68 08 	jmp	0x10d0 <__vector_22>

0000005c <SIFOOptionPtrs>:
      5c:	6f 00 60 00                                         o.`.

00000060 <SIFO_Tags>:
      60:	56 49 45 57 20 44 41 54 41 20 54 41 47 53 00        VIEW DATA TAGS.

0000006f <SIFO_Size>:
      6f:	53 54 4f 52 41 47 45 20 53 49 5a 45 53 00           STORAGE SIZES.

0000007d <USIPSNamePtrs>:
      7d:	a3 00 99 00 8f 00 85 00                             ........

00000085 <USI_Speed3>:
      85:	32 31 30 36 35 31 20 48 5a 00                       210651 HZ.

0000008f <USI_Speed2>:
      8f:	31 31 33 34 32 37 20 48 5a 00                       113427 HZ.

00000099 <USI_Speed1>:
      99:	20 38 36 37 33 38 20 48 5a 00                        86738 HZ.

000000a3 <USI_Speed0>:
      a3:	20 35 37 31 35 33 20 48 5a 00                        57153 HZ.

000000ad <ProgOptions>:
      ad:	16 01 0a 01 fa 00 ea 00 da 00 c6 00 bb 00           ..............

000000bb <PRG_C>:
      bb:	45 52 41 53 45 20 4f 4e 4c 59 00                    ERASE ONLY.

000000c6 <PRG_FL>:
      c6:	46 55 53 45 20 41 4e 44 20 4c 4f 43 4b 20 42 59     FUSE AND LOCK BY
      d6:	54 45 53 00                                         TES.

000000da <PRG_L>:
      da:	4c 4f 43 4b 20 42 59 54 45 53 20 4f 4e 4c 59 00     LOCK BYTES ONLY.

000000ea <PRG_F>:
      ea:	46 55 53 45 20 42 59 54 45 53 20 4f 4e 4c 59 00     FUSE BYTES ONLY.

000000fa <PRG_DE>:
      fa:	44 41 54 41 20 41 4e 44 20 45 45 50 52 4f 4d 00     DATA AND EEPROM.

0000010a <PRG_E>:
     10a:	45 45 50 52 4f 4d 20 4f 4e 4c 59 00                 EEPROM ONLY.

00000116 <PRG_D>:
     116:	44 41 54 41 20 4f 4e 4c 59 00                       DATA ONLY.

00000120 <SettingFunctionPtrs>:
     120:	49 06 95 06 93 05 e8 05 ef 05 3c 07                 I.........<.

0000012c <SettingFunctionNames>:
     12c:	88 01 7a 01 6d 01 5e 01 4b 01 38 01                 ..z.m.^.K.8.

00000138 <SFunc_GOBOOTLOADER>:
     138:	4a 55 4d 50 20 54 4f 20 42 4f 4f 54 4c 4f 41 44     JUMP TO BOOTLOAD
     148:	45 52 00                                            ER.

0000014b <SFunc_MANCALIB>:
     14b:	4d 41 4e 55 41 4c 20 43 41 4c 49 42 52 41 54 49     MANUAL CALIBRATI
     15b:	4f 4e 00                                            ON.

0000015e <SFunc_AUTOCALIB>:
     15e:	41 55 54 4f 20 43 41 4c 49 42 52 41 54 45 00        AUTO CALIBRATE.

0000016d <SFunc_CLEARMEM>:
     16d:	43 4c 45 41 52 20 4d 45 4d 4f 52 59 00              CLEAR MEMORY.

0000017a <SFunc_SETSPISPEED>:
     17a:	53 45 54 20 53 50 49 20 53 50 45 45 44 00           SET SPI SPEED.

00000188 <SFunc_SETCONTRAST>:
     188:	53 45 54 20 43 4f 4e 54 52 41 53 54 00              SET CONTRAST.

00000195 <MainFunctionPtrs>:
     195:	f7 03 6d 05 28 04 04 04 e4 06 c2 03 ca 06           ..m.(.........

000001a3 <MainFunctionNames>:
     1a3:	ff 01 f4 01 e8 01 d4 01 c5 01 bc 01 b1 01           ..............

000001b1 <Func_SLEEP>:
     1b1:	53 4c 45 45 50 20 4d 4f 44 45 00                    SLEEP MODE.

000001bc <Func_SETTINGS>:
     1bc:	53 45 54 54 49 4e 47 53 00                          SETTINGS.

000001c5 <Func_PRGMSTOREINFO>:
     1c5:	44 41 54 41 53 54 4f 52 45 20 49 4e 46 4f 00        DATASTORE INFO.

000001d4 <Func_PRGMDATAFLASH>:
     1d4:	44 41 54 41 46 4c 41 53 48 20 50 52 47 4d 20 4d     DATAFLASH PRGM M
     1e4:	4f 44 45 00                                         ODE.

000001e8 <Func_PRGMAVR>:
     1e8:	50 52 4f 47 52 41 4d 20 41 56 52 00                 PROGRAM AVR.

000001f4 <Func_STOREPRGM>:
     1f4:	53 54 4f 52 45 20 50 52 47 4d 00                    STORE PRGM.

000001ff <Func_ISPPRGM>:
     1ff:	41 56 52 49 53 50 20 4d 4f 44 45 00                 AVRISP MODE.

0000020b <AboutTextPtrs>:
     20b:	36 02 31 02 22 02 13 02                             6.1."...

00000213 <CopyRight>:
     213:	3c 43 3e 20 32 30 30 36 20 2d 20 47 50 4c 00        <C> 2006 - GPL.

00000222 <AuthorName>:
     222:	42 59 20 44 45 41 4e 20 43 41 4d 45 52 41 00        BY DEAN CAMERA.

00000231 <VersionInfo>:
     231:	56 31 2d 34 00                                      V1-4.

00000236 <ProgrammerName>:
     236:	42 55 54 54 4c 4f 41 44 00                          BUTTLOAD.

0000023f <WaitText>:
     23f:	2a 57 41 49 54 2a 00                                *WAIT*.

00000246 <BUTTTAG_Author>:
     246:	40 28 23 29 42 59 20 44 45 41 4e 20 43 41 4d 45     @(#)BY DEAN CAME
     256:	52 41 00                                            RA.

00000259 <BUTTTAG_Name>:
     259:	40 28 23 29 42 55 54 54 4c 4f 41 44 20 41 56 52     @(#)BUTTLOAD AVR
     269:	49 53 50 00                                         ISP.

0000026d <__c.14>:
     26d:	50 52 47 3e 20 00                                   PRG> .

00000273 <__c.13>:
     273:	42 41 44 49 53 52 00                                BADISR.

0000027a <__c.6>:
     27a:	4e 4f 20 45 52 41 53 45 20 43 4d 44 00              NO ERASE CMD.

00000287 <__c.7>:
     287:	4e 4f 20 44 41 54 41 00                             NO DATA.

0000028f <__c.8>:
     28f:	4e 4f 20 45 45 50 52 4f 4d 00                       NO EEPROM.

00000299 <__c.9>:
     299:	4e 4f 20 46 55 53 45 20 42 59 54 45 53 00           NO FUSE BYTES.

000002a7 <__c.10>:
     2a7:	4e 4f 20 4c 4f 43 4b 20 42 59 54 45 53 00           NO LOCK BYTES.

000002b5 <__c.11>:
     2b5:	50 52 4f 47 52 41 4d 4d 49 4e 47 20 44 4f 4e 45     PROGRAMMING DONE
	...

000002c6 <__c.12>:
     2c6:	46 41 49 4c 45 44 00                                FAILED.

000002cd <__c.5>:
     2cd:	2a 53 54 4f 52 41 47 45 20 4d 4f 44 45 2a 00        *STORAGE MODE*.

000002dc <__c.2>:
     2dc:	43 4f 4e 46 49 52 4d 00                             CONFIRM.

000002e4 <__c.3>:
     2e4:	3c 4e 20 59 3e 00                                   <N Y>.

000002ea <__c.4>:
     2ea:	4d 45 4d 20 43 4c 45 41 52 45 44 00                 MEM CLEARED.

000002f6 <__c.1>:
     2f6:	4e 4f 20 53 54 4f 52 45 44 20 50 52 47 4d 00        NO STORED PRGM.

00000305 <__c.0>:
     305:	2a 4a 54 41 47 20 4f 4e 2a 00                       *JTAG ON*.

0000030f <LCD_SegTable>:
     30f:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
     31f:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
     32f:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
     33f:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
     34f:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
     35f:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
     36f:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

0000037b <USIPSValues>:
     37b:	03 80 02 54 01 40 00 22                             ...T.@."

00000383 <DataFlashError>:
     383:	44 41 54 41 46 4c 41 53 48 20 45 52 52 4f 52 00     DATAFLASH ERROR.

00000393 <DF_Pages>:
     393:	00 01 00 02 00 04 00 08 00 10 00 10 00 20 00 20     ............. . 

000003a3 <DF_PageSize>:
     3a3:	08 01 08 01 08 01 08 01 08 01 10 02 10 02 20 04     .............. .

000003b3 <DF_PageBits>:
     3b3:	09 09 09 09 09 0a 0a 0b                             ........

000003bb <__c.0>:
     3bb:	42 55 46 46 20 4f 56 45 52 46 4c 4f 57 00           BUFF OVERFLOW.

000003c9 <DataFlashProgMode>:
     3c9:	2a 44 41 54 41 46 4c 41 53 48 20 4d 4f 44 45 2a     *DATAFLASH MODE*
	...

000003da <SignonResponse>:
     3da:	01 00 08 41 56 52 49 53 50 5f 32                    ...AVRISP_2

000003e5 <VersionData>:
     3e5:	02 02 04                                            ...

000003e8 <SyncErrorMessage>:
     3e8:	53 59 4e 43 20 45 52 52 4f 52 00                    SYNC ERROR.

000003f3 <AVRISPModeMessage>:
     3f3:	2a 41 54 41 56 52 49 53 50 20 4d 4f 44 45 2a 00     *ATAVRISP MODE*.

00000403 <__c.0>:
     403:	44 41 54 41 2d 00                                   DATA-.

00000409 <__c.1>:
     409:	45 50 52 4d 2d 00                                   EPRM-.

0000040f <__c.2>:
     40f:	46 55 53 45 2d 00                                   FUSE-.

00000415 <__c.3>:
     415:	4c 4f 43 4b 2d 00                                   LOCK-.

0000041b <__c.0>:
     41b:	4e 4f 20 54 41 47 53 00 00                          NO TAGS..

00000424 <__init>:
     424:	11 24       	eor	r1, r1
     426:	1f be       	out	0x3f, r1	; 63
     428:	cf ef       	ldi	r28, 0xFF	; 255
     42a:	d4 e0       	ldi	r29, 0x04	; 4
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	cd bf       	out	0x3d, r28	; 61

00000430 <__do_copy_data>:
     430:	11 e0       	ldi	r17, 0x01	; 1
     432:	a0 e0       	ldi	r26, 0x00	; 0
     434:	b1 e0       	ldi	r27, 0x01	; 1
     436:	e0 e9       	ldi	r30, 0x90	; 144
     438:	f7 e3       	ldi	r31, 0x37	; 55
     43a:	02 c0       	rjmp	.+4      	; 0x440 <.do_copy_data_start>

0000043c <.do_copy_data_loop>:
     43c:	05 90       	lpm	r0, Z+
     43e:	0d 92       	st	X+, r0

00000440 <.do_copy_data_start>:
     440:	a6 32       	cpi	r26, 0x26	; 38
     442:	b1 07       	cpc	r27, r17
     444:	d9 f7       	brne	.-10     	; 0x43c <.do_copy_data_loop>

00000446 <__do_clear_bss>:
     446:	12 e0       	ldi	r17, 0x02	; 2
     448:	a6 e2       	ldi	r26, 0x26	; 38
     44a:	b1 e0       	ldi	r27, 0x01	; 1
     44c:	01 c0       	rjmp	.+2      	; 0x450 <.do_clear_bss_start>

0000044e <.do_clear_bss_loop>:
     44e:	1d 92       	st	X+, r1

00000450 <.do_clear_bss_start>:
     450:	a6 3d       	cpi	r26, 0xD6	; 214
     452:	b1 07       	cpc	r27, r17
     454:	e1 f7       	brne	.-8      	; 0x44e <.do_clear_bss_loop>
     456:	0c 94 73 02 	jmp	0x4e6 <main>

0000045a <__bad_interrupt>:
     45a:	0c 94 bd 03 	jmp	0x77a <__vector_default>

0000045e <MAIN_Delay10MS>:

// ======================================================================================

void MAIN_Delay10MS(uint8_t loops)
{
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     462:	28 2f       	mov	r18, r24
     464:	21 50       	subi	r18, 0x01	; 1
     466:	2f 3f       	cpi	r18, 0xFF	; 255
     468:	49 f0       	breq	.+18     	; 0x47c <MAIN_Delay10MS+0x1e>
     46a:	a0 e0       	ldi	r26, 0x00	; 0
     46c:	b8 e4       	ldi	r27, 0x48	; 72
     46e:	c0 e0       	ldi	r28, 0x00	; 0
     470:	d0 e0       	ldi	r29, 0x00	; 0
     472:	cd 01       	movw	r24, r26
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <MAIN_Delay10MS+0x16>
     478:	21 50       	subi	r18, 0x01	; 1
     47a:	d8 f7       	brcc	.-10     	; 0x472 <MAIN_Delay10MS+0x14>
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <MAIN_WaitForJoyRelease>:
  /* Prevents the use of floating point libraries. Delaying in groups of
     10ms increases accuracy by reducing the time overhead for each loop
     interation of the while.                                            */

	while (loops--)
	  _delay_ms(10);
}

void MAIN_Delay1MS(uint8_t loops)
{
  /* Prevents the use of floating point libraries. Less accurate than the
     Delay10MS routine, but nessesary for many commands. The overhead required
     to call the routine is substantially less than the overhead required to
     calculate the float at compile time, so this actually saves execution time. */

	while (loops--)
	  _delay_ms(1);
}

void MAIN_ResetCSLine(uint8_t ActiveInactive)
{
  /* ActiveInactive controls the /Reset line to an AVR device or external dataflash
     /CS line. If the reset polarity parameter is a 0 then interfacing with AT89
	 devices which has an active high reset. Pins are tristated when inactive.      */
	
	switch (ActiveInactive)
	{
		case MAIN_RESETCS_ACTIVE:   // The target RESET line may be either active high or low.
			DDRF |= (1 << 6);
		
			if (!(eeprom_read_byte_169(&Param_ResetPolarity))) // Translate to correct logic level for target device type
			  PORTF |=  (1 << 6);
			else
			  PORTF &= ~(1 << 6);
		
			break;
		case MAIN_RESETCS_EXTDFACTIVE: // Dataflashes are always active low.
			DDRF  |=  (1 << 6);
			PORTF &= ~(1 << 6);
			
			break;
		case MAIN_RESETCS_INACTIVE: // Both modes tristate the pins when inactive.
			DDRF  &= ~(1 << 6);
			PORTF &= ~(1 << 6);
	}
}

void MAIN_WaitForJoyRelease(void)
{
	while (1)
	{
		while (JoyStatus) {};                   // Wait until joystick released
     482:	8e b3       	in	r24, 0x1e	; 30
     484:	88 23       	and	r24, r24
     486:	e9 f7       	brne	.-6      	; 0x482 <MAIN_WaitForJoyRelease>

		MAIN_Delay10MS(1);
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	0e 94 2f 02 	call	0x45e <MAIN_Delay10MS>

		if (!(JoyStatus))                       // Joystick still released (not bouncing), return
     48e:	8e b3       	in	r24, 0x1e	; 30
     490:	88 23       	and	r24, r24
     492:	b9 f7       	brne	.-18     	; 0x482 <MAIN_WaitForJoyRelease>
     494:	08 95       	ret

00000496 <FUNCShowAbout>:
		  return;
	}
}

void MAIN_IntToStr(uint16_t IntV, uint8_t* Buff)
{
	// Shows leading zeros, unlike itoa.

	uint8_t Temp = 0;
	
	while (IntV >= 100)
	{
		Temp++;
		IntV -= 100;
	}

	*(Buff++) = '0' + Temp;
	
	Temp = 0;
	
	while (IntV >= 10)
	{
		Temp++;
		IntV -= 10;
	}
		
	*(Buff++) = '0' + Temp;
	*(Buff++) = '0' + IntV;
	*(Buff)   = '\0';
}

void MAIN_ShowProgType(uint8_t Letter)
{
	uint8_t ProgTypeBuffer[7];

	strcpy_P(ProgTypeBuffer, PSTR("PRG> "));
	ProgTypeBuffer[5] = Letter;
	ProgTypeBuffer[6] = '\0';
	
	LCD_puts(ProgTypeBuffer);
}

void MAIN_ShowError(const uint8_t *pFlashStr)
{
	uint8_t ErrorBuff[LCD_TEXTBUFFER_SIZE];       // New buffer, LCD text buffer size
	
	ErrorBuff[0] = 'E';
	ErrorBuff[1] = '>';

	strcpy_P(&ErrorBuff[2], pFlashStr);       // WARNING: If error text is larger than (TEXTBUFFER_SIZE - 2),
	                                          // this will overflow the buffer and probably crash the micro!
	LCD_puts(ErrorBuff);
	
	MAIN_WaitForJoyRelease();
	while (!(JoyStatus & JOY_PRESS)) {};
	MAIN_WaitForJoyRelease();
}

// ======================================================================================

ISR(PCINT1_vect, ISR_NOBLOCK)                 // Joystick routine; PCINT0_vect is bound to this also via JoystickInterrupt.S
{
	JoyStatus = (~PINB & JOY_BMASK)
	          | (~PINE & JOY_EMASK);
}

ISR(BADISR_vect, ISR_NAKED)                   // Bad ISR routine; should never be called, here for safety
{
	MAIN_ShowError(PSTR("BADISR"));
	while (1) {};
}

// ======================================================================================

void FUNCChangeSettings(void)
{
	uint8_t CurrSFunc = 0;
	
	JoyStatus = 1;

	while (1)
	{
		if (JoyStatus)                         // Joystick is in the non-center position
		{
			if (JoyStatus & JOY_UP)            // Previous function
			  (CurrSFunc == 0)? CurrSFunc = 5 : CurrSFunc--;
			else if (JoyStatus & JOY_DOWN)     // Next function
			  (CurrSFunc == 5)? CurrSFunc = 0 : CurrSFunc++;
			else if (JoyStatus & JOY_PRESS)    // Select current function
			  ((FuncPtr)pgm_read_word(&SettingFunctionPtrs[CurrSFunc]))(); // Run associated function
			else if (JoyStatus & JOY_LEFT)
			  return;
		
			// Show current function onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&SettingFunctionNames[CurrSFunc]));

			MAIN_WaitForJoyRelease();
		}
	}
}

void FUNCShowAbout(void)
{
     496:	cf 93       	push	r28
	uint8_t InfoNum = 0;
     498:	c0 e0       	ldi	r28, 0x00	; 0
	
	JoyStatus = 1;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	8e bb       	out	0x1e, r24	; 30
			
	while (1)
	{
		if (JoyStatus)
     49e:	8e b3       	in	r24, 0x1e	; 30
     4a0:	88 23       	and	r24, r24
     4a2:	e9 f3       	breq	.-6      	; 0x49e <FUNCShowAbout+0x8>
		{
			if (JoyStatus & JOY_UP)
     4a4:	f6 9b       	sbis	0x1e, 6	; 30
     4a6:	06 c0       	rjmp	.+12     	; 0x4b4 <FUNCShowAbout+0x1e>
			  (InfoNum == 0)? InfoNum = 3 : InfoNum--;
     4a8:	cc 23       	and	r28, r28
     4aa:	11 f4       	brne	.+4      	; 0x4b0 <FUNCShowAbout+0x1a>
     4ac:	c3 e0       	ldi	r28, 0x03	; 3
     4ae:	0c c0       	rjmp	.+24     	; 0x4c8 <FUNCShowAbout+0x32>
     4b0:	c1 50       	subi	r28, 0x01	; 1
     4b2:	0a c0       	rjmp	.+20     	; 0x4c8 <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_DOWN)
     4b4:	f7 9b       	sbis	0x1e, 7	; 30
     4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <FUNCShowAbout+0x2e>
			  (InfoNum == 3)? InfoNum = 0 : InfoNum++;
     4b8:	c3 30       	cpi	r28, 0x03	; 3
     4ba:	11 f4       	brne	.+4      	; 0x4c0 <FUNCShowAbout+0x2a>
     4bc:	c0 e0       	ldi	r28, 0x00	; 0
     4be:	04 c0       	rjmp	.+8      	; 0x4c8 <FUNCShowAbout+0x32>
     4c0:	cf 5f       	subi	r28, 0xFF	; 255
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <FUNCShowAbout+0x32>
			else if (JoyStatus & JOY_LEFT)
     4c4:	f2 99       	sbic	0x1e, 2	; 30
     4c6:	0d c0       	rjmp	.+26     	; 0x4e2 <FUNCShowAbout+0x4c>
			  return;

			LCD_puts_f((uint8_t*)pgm_read_word(&AboutTextPtrs[InfoNum]));
     4c8:	ec 2f       	mov	r30, r28
     4ca:	ff 27       	eor	r31, r31
     4cc:	ee 0f       	add	r30, r30
     4ce:	ff 1f       	adc	r31, r31
     4d0:	e5 5f       	subi	r30, 0xF5	; 245
     4d2:	fd 4f       	sbci	r31, 0xFD	; 253
     4d4:	85 91       	lpm	r24, Z+
     4d6:	94 91       	lpm	r25, Z
     4d8:	0e 94 1f 08 	call	0x103e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     4dc:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     4e0:	de cf       	rjmp	.-68     	; 0x49e <FUNCShowAbout+0x8>
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <main>:
     4e6:	cd ef       	ldi	r28, 0xFD	; 253
     4e8:	d4 e0       	ldi	r29, 0x04	; 4
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	cd bf       	out	0x3d, r28	; 61
     4ee:	00 e0       	ldi	r16, 0x00	; 0
     4f0:	80 e8       	ldi	r24, 0x80	; 128
     4f2:	80 bf       	out	0x30, r24	; 48
     4f4:	85 e0       	ldi	r24, 0x05	; 5
     4f6:	80 93 64 00 	sts	0x0064, r24
     4fa:	80 e3       	ldi	r24, 0x30	; 48
     4fc:	80 bb       	out	0x10, r24	; 16
     4fe:	87 e2       	ldi	r24, 0x27	; 39
     500:	84 b9       	out	0x04, r24	; 4
     502:	8f ed       	ldi	r24, 0xDF	; 223
     504:	85 b9       	out	0x05, r24	; 5
     506:	8c e0       	ldi	r24, 0x0C	; 12
     508:	8e b9       	out	0x0e, r24	; 14
     50a:	80 93 6b 00 	sts	0x006B, r24
     50e:	80 ed       	ldi	r24, 0xD0	; 208
     510:	80 93 6c 00 	sts	0x006C, r24
     514:	80 ec       	ldi	r24, 0xC0	; 192
     516:	8d bb       	out	0x1d, r24	; 29
     518:	8c bb       	out	0x1c, r24	; 28
     51a:	81 b3       	in	r24, 0x11	; 17
     51c:	8f 7c       	andi	r24, 0xCF	; 207
     51e:	80 62       	ori	r24, 0x20	; 32
     520:	81 bb       	out	0x11, r24	; 17
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
     52a:	8a 37       	cpi	r24, 0x7A	; 122
     52c:	09 f1       	breq	.+66     	; 0x570 <__stack+0x71>
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	3a 83       	std	Y+2, r19	; 0x02
     534:	29 83       	std	Y+1, r18	; 0x01
     536:	80 91 02 01 	lds	r24, 0x0102
     53a:	90 91 03 01 	lds	r25, 0x0103
     53e:	28 17       	cp	r18, r24
     540:	39 07       	cpc	r19, r25
     542:	88 f4       	brcc	.+34     	; 0x566 <__stack+0x67>
     544:	6f ef       	ldi	r22, 0xFF	; 255
     546:	ce 01       	movw	r24, r28
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	9a 81       	ldd	r25, Y+2	; 0x02
     552:	01 96       	adiw	r24, 0x01	; 1
     554:	9a 83       	std	Y+2, r25	; 0x02
     556:	89 83       	std	Y+1, r24	; 0x01
     558:	20 91 02 01 	lds	r18, 0x0102
     55c:	30 91 03 01 	lds	r19, 0x0103
     560:	82 17       	cp	r24, r18
     562:	93 07       	cpc	r25, r19
     564:	78 f3       	brcs	.-34     	; 0x544 <__stack+0x45>
     566:	6a e7       	ldi	r22, 0x7A	; 122
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
     570:	0e 94 cc 07 	call	0xf98 <LCD_Init>
     574:	84 e0       	ldi	r24, 0x04	; 4
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
     57c:	8f 70       	andi	r24, 0x0F	; 15
     57e:	80 93 e7 00 	sts	0x00E7, r24
     582:	78 94       	sei
     584:	8f e3       	ldi	r24, 0x3F	; 63
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	0e 94 1f 08 	call	0x103e <LCD_puts_f>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
     592:	81 b3       	in	r24, 0x11	; 17
     594:	80 63       	ori	r24, 0x30	; 48
     596:	81 bb       	out	0x11, r24	; 17
     598:	0e 94 4a 07 	call	0xe94 <OSCCAL_Calibrate>
     59c:	87 e0       	ldi	r24, 0x07	; 7
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 fc 08 	call	0x11f8 <USART_Init>
     5a4:	81 b3       	in	r24, 0x11	; 17
     5a6:	8f 7c       	andi	r24, 0xCF	; 207
     5a8:	80 61       	ori	r24, 0x10	; 16
     5aa:	81 bb       	out	0x11, r24	; 17
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	8e bb       	out	0x1e, r24	; 30
     5b0:	80 e8       	ldi	r24, 0x80	; 128
     5b2:	80 93 61 00 	sts	0x0061, r24
     5b6:	83 e0       	ldi	r24, 0x03	; 3
     5b8:	80 93 61 00 	sts	0x0061, r24
     5bc:	8e b3       	in	r24, 0x1e	; 30
     5be:	88 23       	and	r24, r24
     5c0:	e9 f3       	breq	.-6      	; 0x5bc <__stack+0xbd>
     5c2:	f6 9b       	sbis	0x1e, 6	; 30
     5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <__stack+0xd3>
     5c6:	00 23       	and	r16, r16
     5c8:	11 f4       	brne	.+4      	; 0x5ce <__stack+0xcf>
     5ca:	06 e0       	ldi	r16, 0x06	; 6
     5cc:	25 c0       	rjmp	.+74     	; 0x618 <__stack+0x119>
     5ce:	01 50       	subi	r16, 0x01	; 1
     5d0:	23 c0       	rjmp	.+70     	; 0x618 <__stack+0x119>
     5d2:	f7 9b       	sbis	0x1e, 7	; 30
     5d4:	06 c0       	rjmp	.+12     	; 0x5e2 <__stack+0xe3>
     5d6:	06 30       	cpi	r16, 0x06	; 6
     5d8:	11 f4       	brne	.+4      	; 0x5de <__stack+0xdf>
     5da:	00 e0       	ldi	r16, 0x00	; 0
     5dc:	1d c0       	rjmp	.+58     	; 0x618 <__stack+0x119>
     5de:	0f 5f       	subi	r16, 0xFF	; 255
     5e0:	1b c0       	rjmp	.+54     	; 0x618 <__stack+0x119>
     5e2:	f4 9b       	sbis	0x1e, 4	; 30
     5e4:	15 c0       	rjmp	.+42     	; 0x610 <__stack+0x111>
     5e6:	10 e8       	ldi	r17, 0x80	; 128
     5e8:	10 93 61 00 	sts	0x0061, r17
     5ec:	10 92 61 00 	sts	0x0061, r1
     5f0:	e0 2f       	mov	r30, r16
     5f2:	ff 27       	eor	r31, r31
     5f4:	ee 0f       	add	r30, r30
     5f6:	ff 1f       	adc	r31, r31
     5f8:	eb 56       	subi	r30, 0x6B	; 107
     5fa:	fe 4f       	sbci	r31, 0xFE	; 254
     5fc:	85 91       	lpm	r24, Z+
     5fe:	94 91       	lpm	r25, Z
     600:	fc 01       	movw	r30, r24
     602:	09 95       	icall
     604:	10 93 61 00 	sts	0x0061, r17
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	80 93 61 00 	sts	0x0061, r24
     60e:	04 c0       	rjmp	.+8      	; 0x618 <__stack+0x119>
     610:	f3 9b       	sbis	0x1e, 3	; 30
     612:	02 c0       	rjmp	.+4      	; 0x618 <__stack+0x119>
     614:	0e 94 4b 02 	call	0x496 <FUNCShowAbout>
     618:	e0 2f       	mov	r30, r16
     61a:	ff 27       	eor	r31, r31
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	ed 55       	subi	r30, 0x5D	; 93
     622:	fe 4f       	sbci	r31, 0xFE	; 254
     624:	85 91       	lpm	r24, Z+
     626:	94 91       	lpm	r25, Z
     628:	0e 94 1f 08 	call	0x103e <LCD_puts_f>
     62c:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     630:	c5 cf       	rjmp	.-118    	; 0x5bc <__stack+0xbd>

00000632 <MAIN_Delay1MS>:
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     636:	28 2f       	mov	r18, r24
     638:	21 50       	subi	r18, 0x01	; 1
     63a:	2f 3f       	cpi	r18, 0xFF	; 255
     63c:	49 f0       	breq	.+18     	; 0x650 <MAIN_Delay1MS+0x1e>
     63e:	a3 e3       	ldi	r26, 0x33	; 51
     640:	b7 e0       	ldi	r27, 0x07	; 7
     642:	c0 e0       	ldi	r28, 0x00	; 0
     644:	d0 e0       	ldi	r29, 0x00	; 0
     646:	cd 01       	movw	r24, r26
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <MAIN_Delay1MS+0x16>
     64c:	21 50       	subi	r18, 0x01	; 1
     64e:	d8 f7       	brcc	.-10     	; 0x646 <MAIN_Delay1MS+0x14>
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <MAIN_ResetCSLine>:
     656:	99 27       	eor	r25, r25
     658:	81 30       	cpi	r24, 0x01	; 1
     65a:	91 05       	cpc	r25, r1
     65c:	a9 f0       	breq	.+42     	; 0x688 <MAIN_ResetCSLine+0x32>
     65e:	82 30       	cpi	r24, 0x02	; 2
     660:	91 05       	cpc	r25, r1
     662:	1c f4       	brge	.+6      	; 0x66a <MAIN_ResetCSLine+0x14>
     664:	89 2b       	or	r24, r25
     666:	21 f0       	breq	.+8      	; 0x670 <MAIN_ResetCSLine+0x1a>
     668:	08 95       	ret
     66a:	02 97       	sbiw	r24, 0x02	; 2
     66c:	51 f0       	breq	.+20     	; 0x682 <MAIN_ResetCSLine+0x2c>
     66e:	08 95       	ret
     670:	86 9a       	sbi	0x10, 6	; 16
     672:	82 e2       	ldi	r24, 0x22	; 34
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
     67a:	88 23       	and	r24, r24
     67c:	19 f4       	brne	.+6      	; 0x684 <MAIN_ResetCSLine+0x2e>
     67e:	8e 9a       	sbi	0x11, 6	; 17
     680:	08 95       	ret
     682:	86 9a       	sbi	0x10, 6	; 16
     684:	8e 98       	cbi	0x11, 6	; 17
     686:	08 95       	ret
     688:	86 98       	cbi	0x10, 6	; 16
     68a:	fc cf       	rjmp	.-8      	; 0x684 <MAIN_ResetCSLine+0x2e>

0000068c <MAIN_IntToStr>:
     68c:	fb 01       	movw	r30, r22
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	84 36       	cpi	r24, 0x64	; 100
     692:	91 05       	cpc	r25, r1
     694:	20 f0       	brcs	.+8      	; 0x69e <MAIN_IntToStr+0x12>
     696:	2f 5f       	subi	r18, 0xFF	; 255
     698:	84 56       	subi	r24, 0x64	; 100
     69a:	90 40       	sbci	r25, 0x00	; 0
     69c:	f9 cf       	rjmp	.-14     	; 0x690 <MAIN_IntToStr+0x4>
     69e:	20 5d       	subi	r18, 0xD0	; 208
     6a0:	21 93       	st	Z+, r18
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	8a 30       	cpi	r24, 0x0A	; 10
     6a6:	91 05       	cpc	r25, r1
     6a8:	18 f0       	brcs	.+6      	; 0x6b0 <MAIN_IntToStr+0x24>
     6aa:	2f 5f       	subi	r18, 0xFF	; 255
     6ac:	0a 97       	sbiw	r24, 0x0a	; 10
     6ae:	fa cf       	rjmp	.-12     	; 0x6a4 <MAIN_IntToStr+0x18>
     6b0:	20 5d       	subi	r18, 0xD0	; 208
     6b2:	21 93       	st	Z+, r18
     6b4:	80 5d       	subi	r24, 0xD0	; 208
     6b6:	81 93       	st	Z+, r24
     6b8:	10 82       	st	Z, r1
     6ba:	08 95       	ret

000006bc <MAIN_ShowProgType>:
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	27 97       	sbiw	r28, 0x07	; 7
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
     6d2:	18 2f       	mov	r17, r24
     6d4:	6d e6       	ldi	r22, 0x6D	; 109
     6d6:	72 e0       	ldi	r23, 0x02	; 2
     6d8:	ce 01       	movw	r24, r28
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	0e 94 4b 1b 	call	0x3696 <strcpy_P>
     6e0:	1e 83       	std	Y+6, r17	; 0x06
     6e2:	1f 82       	std	Y+7, r1	; 0x07
     6e4:	ce 01       	movw	r24, r28
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	0e 94 de 07 	call	0xfbc <LCD_puts>
     6ec:	27 96       	adiw	r28, 0x07	; 7
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	08 95       	ret

00000700 <MAIN_ShowError>:
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	64 97       	sbiw	r28, 0x14	; 20
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	25 e4       	ldi	r18, 0x45	; 69
     716:	29 83       	std	Y+1, r18	; 0x01
     718:	2e e3       	ldi	r18, 0x3E	; 62
     71a:	2a 83       	std	Y+2, r18	; 0x02
     71c:	bc 01       	movw	r22, r24
     71e:	ce 01       	movw	r24, r28
     720:	03 96       	adiw	r24, 0x03	; 3
     722:	0e 94 4b 1b 	call	0x3696 <strcpy_P>
     726:	ce 01       	movw	r24, r28
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	0e 94 de 07 	call	0xfbc <LCD_puts>
     72e:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     732:	f4 9b       	sbis	0x1e, 4	; 30
     734:	fe cf       	rjmp	.-4      	; 0x732 <MAIN_ShowError+0x32>
     736:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     73a:	64 96       	adiw	r28, 0x14	; 20
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <__vector_3>:
     74c:	78 94       	sei
     74e:	1f 92       	push	r1
     750:	0f 92       	push	r0
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	0f 92       	push	r0
     756:	11 24       	eor	r1, r1
     758:	8f 93       	push	r24
     75a:	9f 93       	push	r25
     75c:	93 b1       	in	r25, 0x03	; 3
     75e:	90 95       	com	r25
     760:	90 7d       	andi	r25, 0xD0	; 208
     762:	8c b1       	in	r24, 0x0c	; 12
     764:	80 95       	com	r24
     766:	8c 70       	andi	r24, 0x0C	; 12
     768:	98 2b       	or	r25, r24
     76a:	9e bb       	out	0x1e, r25	; 30
     76c:	9f 91       	pop	r25
     76e:	8f 91       	pop	r24
     770:	0f 90       	pop	r0
     772:	0f be       	out	0x3f, r0	; 63
     774:	0f 90       	pop	r0
     776:	1f 90       	pop	r1
     778:	18 95       	reti

0000077a <__vector_default>:
     77a:	83 e7       	ldi	r24, 0x73	; 115
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	0e 94 80 03 	call	0x700 <MAIN_ShowError>
     782:	ff cf       	rjmp	.-2      	; 0x782 <__vector_default+0x8>

00000784 <FUNCChangeSettings>:
     784:	cf 93       	push	r28
     786:	c0 e0       	ldi	r28, 0x00	; 0
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	8e bb       	out	0x1e, r24	; 30
     78c:	8e b3       	in	r24, 0x1e	; 30
     78e:	88 23       	and	r24, r24
     790:	e9 f3       	breq	.-6      	; 0x78c <FUNCChangeSettings+0x8>
     792:	f6 9b       	sbis	0x1e, 6	; 30
     794:	06 c0       	rjmp	.+12     	; 0x7a2 <FUNCChangeSettings+0x1e>
     796:	cc 23       	and	r28, r28
     798:	11 f4       	brne	.+4      	; 0x79e <FUNCChangeSettings+0x1a>
     79a:	c5 e0       	ldi	r28, 0x05	; 5
     79c:	19 c0       	rjmp	.+50     	; 0x7d0 <FUNCChangeSettings+0x4c>
     79e:	c1 50       	subi	r28, 0x01	; 1
     7a0:	17 c0       	rjmp	.+46     	; 0x7d0 <FUNCChangeSettings+0x4c>
     7a2:	f7 9b       	sbis	0x1e, 7	; 30
     7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <FUNCChangeSettings+0x2e>
     7a6:	c5 30       	cpi	r28, 0x05	; 5
     7a8:	11 f4       	brne	.+4      	; 0x7ae <FUNCChangeSettings+0x2a>
     7aa:	c0 e0       	ldi	r28, 0x00	; 0
     7ac:	11 c0       	rjmp	.+34     	; 0x7d0 <FUNCChangeSettings+0x4c>
     7ae:	cf 5f       	subi	r28, 0xFF	; 255
     7b0:	0f c0       	rjmp	.+30     	; 0x7d0 <FUNCChangeSettings+0x4c>
     7b2:	f4 9b       	sbis	0x1e, 4	; 30
     7b4:	0b c0       	rjmp	.+22     	; 0x7cc <FUNCChangeSettings+0x48>
     7b6:	ec 2f       	mov	r30, r28
     7b8:	ff 27       	eor	r31, r31
     7ba:	ee 0f       	add	r30, r30
     7bc:	ff 1f       	adc	r31, r31
     7be:	e0 5e       	subi	r30, 0xE0	; 224
     7c0:	fe 4f       	sbci	r31, 0xFE	; 254
     7c2:	85 91       	lpm	r24, Z+
     7c4:	94 91       	lpm	r25, Z
     7c6:	fc 01       	movw	r30, r24
     7c8:	09 95       	icall
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <FUNCChangeSettings+0x4c>
     7cc:	f2 99       	sbic	0x1e, 2	; 30
     7ce:	0d c0       	rjmp	.+26     	; 0x7ea <FUNCChangeSettings+0x66>
     7d0:	ec 2f       	mov	r30, r28
     7d2:	ff 27       	eor	r31, r31
     7d4:	ee 0f       	add	r30, r30
     7d6:	ff 1f       	adc	r31, r31
     7d8:	e4 5d       	subi	r30, 0xD4	; 212
     7da:	fe 4f       	sbci	r31, 0xFE	; 254
     7dc:	85 91       	lpm	r24, Z+
     7de:	94 91       	lpm	r25, Z
     7e0:	0e 94 1f 08 	call	0x103e <LCD_puts_f>
     7e4:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     7e8:	d1 cf       	rjmp	.-94     	; 0x78c <FUNCChangeSettings+0x8>
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <FUNCAVRISPMode>:
		}
	}
}

void FUNCAVRISPMode(void)
{
	LCD_puts_f(AVRISPModeMessage);
     7ee:	83 ef       	ldi	r24, 0xF3	; 243
     7f0:	93 e0       	ldi	r25, 0x03	; 3
     7f2:	0e 94 1f 08 	call	0x103e <LCD_puts_f>
	
	InterpretPacketRoutine = (FuncPtr)AICI_InterpretPacket;
     7f6:	81 e2       	ldi	r24, 0x21	; 33
     7f8:	92 e1       	ldi	r25, 0x12	; 18
     7fa:	90 93 25 01 	sts	0x0125, r25
     7fe:	80 93 24 01 	sts	0x0124, r24
	V2P_RunStateMachine();
     802:	0e 94 37 0f 	call	0x1e6e <V2P_RunStateMachine>
     806:	08 95       	ret

00000808 <FUNCProgramDataflash>:
}

void FUNCProgramDataflash(void)
{
	USI_SPIInitMaster(eeprom_read_byte_169(&Param_SCKDuration));
     808:	80 e2       	ldi	r24, 0x20	; 32
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
     810:	0e 94 ad 09 	call	0x135a <USI_SPIInitMaster>
	UseExernalDF = TRUE;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	80 93 83 02 	sts	0x0283, r24
	DFSPIRoutinePointer = USI_SPITransmit;
     81a:	87 ec       	ldi	r24, 0xC7	; 199
     81c:	99 e0       	ldi	r25, 0x09	; 9
     81e:	90 93 01 01 	sts	0x0101, r25
     822:	80 93 00 01 	sts	0x0100, r24
	
	LCD_puts_f(DataFlashProgMode);
     826:	89 ec       	ldi	r24, 0xC9	; 201
     828:	93 e0       	ldi	r25, 0x03	; 3
     82a:	0e 94 1f 08 	call	0x103e <LCD_puts_f>

	InterpretPacketRoutine = PD_InterpretAVRISPPacket;
     82e:	8f e6       	ldi	r24, 0x6F	; 111
     830:	9c e0       	ldi	r25, 0x0C	; 12
     832:	90 93 25 01 	sts	0x0125, r25
     836:	80 93 24 01 	sts	0x0124, r24
	V2P_RunStateMachine();
     83a:	0e 94 37 0f 	call	0x1e6e <V2P_RunStateMachine>
	   
	DF_EnableDataflash(FALSE);
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
	SPI_SPIOFF();
     844:	80 91 64 00 	lds	r24, 0x0064
     848:	84 60       	ori	r24, 0x04	; 4
     84a:	80 93 64 00 	sts	0x0064, r24
     84e:	08 95       	ret

00000850 <FUNCProgramAVR>:
}

void FUNCProgramAVR(void)
{
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	65 97       	sbiw	r28, 0x15	; 21
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61
	uint8_t  DoneFailMessageBuff[19];
	uint16_t EEPROMAddress;
	uint8_t  Fault = ISPCC_NO_FAULT;
     86e:	dd 24       	eor	r13, r13
	uint8_t  ProgMode = 0;
     870:	0d 2d       	mov	r16, r13

	SPI_SPIInit();
     872:	0e 94 58 09 	call	0x12b0 <SPI_SPIInit>
	UseExernalDF = FALSE;
     876:	d0 92 83 02 	sts	0x0283, r13
	DFSPIRoutinePointer = SPI_SPITransmit;
     87a:	82 e6       	ldi	r24, 0x62	; 98
     87c:	99 e0       	ldi	r25, 0x09	; 9
     87e:	90 93 01 01 	sts	0x0101, r25
     882:	80 93 00 01 	sts	0x0100, r24
	
	if (!(DF_CheckCorrectOnboardChip()))
     886:	0e 94 7a 0b 	call	0x16f4 <DF_CheckCorrectOnboardChip>
     88a:	88 23       	and	r24, r24
     88c:	09 f4       	brne	.+2      	; 0x890 <FUNCProgramAVR+0x40>
     88e:	17 c1       	rjmp	.+558    	; 0xabe <FUNCProgramAVR+0x26e>
	  return;

	MAIN_WaitForJoyRelease();
     890:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
	
	JoyStatus = 1;                            // Use an invalid joystick value to force the program to write the
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	8e bb       	out	0x1e, r24	; 30
	                                          // name of the default command onto the LCD
	while (1)
	{
		if (JoyStatus)
     898:	8e b3       	in	r24, 0x1e	; 30
     89a:	88 23       	and	r24, r24
     89c:	e9 f3       	breq	.-6      	; 0x898 <FUNCProgramAVR+0x48>
		{
			if (JoyStatus & JOY_LEFT)
     89e:	f2 99       	sbic	0x1e, 2	; 30
     8a0:	0e c1       	rjmp	.+540    	; 0xabe <FUNCProgramAVR+0x26e>
			  return;
			else if (JoyStatus & JOY_PRESS)
     8a2:	f4 99       	sbic	0x1e, 4	; 30
     8a4:	1c c0       	rjmp	.+56     	; 0x8de <FUNCProgramAVR+0x8e>
			  break;
			else if (JoyStatus & JOY_UP)
     8a6:	f6 9b       	sbis	0x1e, 6	; 30
     8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <FUNCProgramAVR+0x66>
			  (ProgMode == 0)? ProgMode = 6 : ProgMode--;
     8aa:	00 23       	and	r16, r16
     8ac:	11 f4       	brne	.+4      	; 0x8b2 <FUNCProgramAVR+0x62>
     8ae:	06 e0       	ldi	r16, 0x06	; 6
     8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <FUNCProgramAVR+0x74>
     8b2:	01 50       	subi	r16, 0x01	; 1
     8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <FUNCProgramAVR+0x74>
			else if (JoyStatus & JOY_DOWN)
     8b6:	f7 9b       	sbis	0x1e, 7	; 30
     8b8:	05 c0       	rjmp	.+10     	; 0x8c4 <FUNCProgramAVR+0x74>
			  (ProgMode == 6)? ProgMode = 0 : ProgMode++;
     8ba:	06 30       	cpi	r16, 0x06	; 6
     8bc:	11 f4       	brne	.+4      	; 0x8c2 <FUNCProgramAVR+0x72>
     8be:	00 e0       	ldi	r16, 0x00	; 0
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <FUNCProgramAVR+0x74>
     8c2:	0f 5f       	subi	r16, 0xFF	; 255

			LCD_puts_f((uint8_t*)pgm_read_word(&ProgOptions[ProgMode])); // Show current function onto the LCD
     8c4:	e0 2f       	mov	r30, r16
     8c6:	ff 27       	eor	r31, r31
     8c8:	ee 0f       	add	r30, r30
     8ca:	ff 1f       	adc	r31, r31
     8cc:	e3 55       	subi	r30, 0x53	; 83
     8ce:	ff 4f       	sbci	r31, 0xFF	; 255
     8d0:	85 91       	lpm	r24, Z+
     8d2:	94 91       	lpm	r25, Z
     8d4:	0e 94 1f 08 	call	0x103e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     8d8:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     8dc:	dd cf       	rjmp	.-70     	; 0x898 <FUNCProgramAVR+0x48>
		}
	}

	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);                // Orange = busy
     8de:	81 b3       	in	r24, 0x11	; 17
     8e0:	80 63       	ori	r24, 0x30	; 48
     8e2:	81 bb       	out	0x11, r24	; 17
	LCD_puts_f(WaitText);
     8e4:	8f e3       	ldi	r24, 0x3F	; 63
     8e6:	92 e0       	ldi	r25, 0x02	; 2
     8e8:	0e 94 1f 08 	call	0x103e <LCD_puts_f>

	USI_SPIInitMaster(eeprom_read_byte_169(&Param_SCKDuration));
     8ec:	80 e2       	ldi	r24, 0x20	; 32
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
     8f4:	0e 94 ad 09 	call	0x135a <USI_SPIInitMaster>
	MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	0e 94 2b 03 	call	0x656 <MAIN_ResetCSLine>

	EEPROMAddress = Prog_EnterProgMode;
     8fe:	80 91 12 01 	lds	r24, 0x0112
     902:	90 91 13 01 	lds	r25, 0x0113
     906:	9d 8b       	std	Y+21, r25	; 0x15
     908:	8c 8b       	std	Y+20, r24	; 0x14
     90a:	54 e3       	ldi	r21, 0x34	; 52
     90c:	e5 2e       	mov	r14, r21
     90e:	51 e0       	ldi	r21, 0x01	; 1
     910:	f5 2e       	mov	r15, r21
     912:	1b e0       	ldi	r17, 0x0B	; 11
			
	for (uint8_t PacketB = 0; PacketB <= 11; PacketB++) // Read the enter programming mode command bytes
	{
		PacketBytes[PacketB] = eeprom_read_byte_169(&EEPROMAddress);
     914:	ce 01       	movw	r24, r28
     916:	44 96       	adiw	r24, 0x14	; 20
     918:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
     91c:	f7 01       	movw	r30, r14
     91e:	81 93       	st	Z+, r24
     920:	7f 01       	movw	r14, r30
		EEPROMAddress++;
     922:	8c 89       	ldd	r24, Y+20	; 0x14
     924:	9d 89       	ldd	r25, Y+21	; 0x15
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	9d 8b       	std	Y+21, r25	; 0x15
     92a:	8c 8b       	std	Y+20, r24	; 0x14
     92c:	11 50       	subi	r17, 0x01	; 1
     92e:	17 ff       	sbrs	r17, 7
     930:	f1 cf       	rjmp	.-30     	; 0x914 <FUNCProgramAVR+0xc4>
	}
	
	ISPCC_EnterChipProgrammingMode();    // Try to sync with the slave AVR
     932:	0e 94 91 10 	call	0x2122 <ISPCC_EnterChipProgrammingMode>

	CurrAddress = 0;
     936:	10 92 2b 01 	sts	0x012B, r1
     93a:	10 92 2c 01 	sts	0x012C, r1
     93e:	10 92 2d 01 	sts	0x012D, r1
     942:	10 92 2e 01 	sts	0x012E, r1

	if (PacketBytes[1] == STATUS_CMD_OK) // ISPCC_EnterChipProgrammingMode alters the PacketBytes buffer rather than returning a value
     946:	80 91 35 01 	lds	r24, 0x0135
     94a:	88 23       	and	r24, r24
     94c:	09 f0       	breq	.+2      	; 0x950 <FUNCProgramAVR+0x100>
     94e:	a2 c0       	rjmp	.+324    	; 0xa94 <FUNCProgramAVR+0x244>
	{						
		if ((ProgMode == 6) || (ProgMode == 0) || (ProgMode == 2)) // Erase chip, or program flash mode
     950:	06 30       	cpi	r16, 0x06	; 6
     952:	21 f0       	breq	.+8      	; 0x95c <FUNCProgramAVR+0x10c>
     954:	00 23       	and	r16, r16
     956:	11 f0       	breq	.+4      	; 0x95c <FUNCProgramAVR+0x10c>
     958:	02 30       	cpi	r16, 0x02	; 2
     95a:	91 f4       	brne	.+36     	; 0x980 <FUNCProgramAVR+0x130>
		{
			MAIN_ShowProgType('C');
     95c:	83 e4       	ldi	r24, 0x43	; 67
     95e:	0e 94 5e 03 	call	0x6bc <MAIN_ShowProgType>
			
			if (!(eeprom_read_byte_169(&Prog_EraseCmdStored) == TRUE))
     962:	8a e1       	ldi	r24, 0x1A	; 26
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
     96a:	81 30       	cpi	r24, 0x01	; 1
     96c:	39 f0       	breq	.+14     	; 0x97c <FUNCProgramAVR+0x12c>
			{
				Fault = ISPCC_FAULT_NOERASE;
     96e:	42 e0       	ldi	r20, 0x02	; 2
     970:	d4 2e       	mov	r13, r20
				MAIN_ShowError(PSTR("NO ERASE CMD"));
     972:	8a e7       	ldi	r24, 0x7A	; 122
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	0e 94 80 03 	call	0x700 <MAIN_ShowError>
     97a:	02 c0       	rjmp	.+4      	; 0x980 <FUNCProgramAVR+0x130>
			}
			else
			{
				PM_SendEraseCommand();
     97c:	0e 94 4c 18 	call	0x3098 <PM_SendEraseCommand>
			}
		}

		if (((ProgMode == 0) || (ProgMode == 2)) && (Fault == ISPCC_NO_FAULT)) // Program flash
     980:	00 23       	and	r16, r16
     982:	11 f0       	breq	.+4      	; 0x988 <FUNCProgramAVR+0x138>
     984:	02 30       	cpi	r16, 0x02	; 2
     986:	c1 f4       	brne	.+48     	; 0x9b8 <FUNCProgramAVR+0x168>
     988:	dd 20       	and	r13, r13
     98a:	b1 f4       	brne	.+44     	; 0x9b8 <FUNCProgramAVR+0x168>
		{
			MAIN_ShowProgType('D');
     98c:	84 e4       	ldi	r24, 0x44	; 68
     98e:	0e 94 5e 03 	call	0x6bc <MAIN_ShowProgType>

			if (!(PM_GetStoredDataSize(TYPE_FLASH))) // Check to make sure a program is present in memory
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	0e 94 90 13 	call	0x2720 <PM_GetStoredDataSize>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	00 97       	sbiw	r24, 0x00	; 0
     99e:	a1 05       	cpc	r26, r1
     9a0:	b1 05       	cpc	r27, r1
     9a2:	39 f4       	brne	.+14     	; 0x9b2 <FUNCProgramAVR+0x162>
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     9a4:	33 e0       	ldi	r19, 0x03	; 3
     9a6:	d3 2e       	mov	r13, r19
				MAIN_ShowError(PSTR("NO DATA"));
     9a8:	87 e8       	ldi	r24, 0x87	; 135
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	0e 94 80 03 	call	0x700 <MAIN_ShowError>
     9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <FUNCProgramAVR+0x168>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_FLASH);
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	0e 94 9c 18 	call	0x3138 <PM_CreateProgrammingPackets>
			}
		}
	
		if ((ProgMode == 1) || (ProgMode == 2)) // Program EEPROM
     9b8:	80 2f       	mov	r24, r16
     9ba:	81 50       	subi	r24, 0x01	; 1
     9bc:	82 30       	cpi	r24, 0x02	; 2
     9be:	b0 f4       	brcc	.+44     	; 0x9ec <FUNCProgramAVR+0x19c>
		{
			MAIN_ShowProgType('E');
     9c0:	85 e4       	ldi	r24, 0x45	; 69
     9c2:	0e 94 5e 03 	call	0x6bc <MAIN_ShowProgType>
				
			if (!(PM_GetStoredDataSize(TYPE_EEPROM))) // Check to make sure EEPROM data is present in memory
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	0e 94 90 13 	call	0x2720 <PM_GetStoredDataSize>
     9cc:	dc 01       	movw	r26, r24
     9ce:	cb 01       	movw	r24, r22
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	39 f4       	brne	.+14     	; 0x9e6 <FUNCProgramAVR+0x196>
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     9d8:	23 e0       	ldi	r18, 0x03	; 3
     9da:	d2 2e       	mov	r13, r18
				MAIN_ShowError(PSTR("NO EEPROM"));
     9dc:	8f e8       	ldi	r24, 0x8F	; 143
     9de:	92 e0       	ldi	r25, 0x02	; 2
     9e0:	0e 94 80 03 	call	0x700 <MAIN_ShowError>
     9e4:	03 c0       	rjmp	.+6      	; 0x9ec <FUNCProgramAVR+0x19c>
			}
			else
			{
				PM_CreateProgrammingPackets(TYPE_EEPROM);
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	0e 94 9c 18 	call	0x3138 <PM_CreateProgrammingPackets>
			}
		}

		if ((ProgMode == 3) || (ProgMode == 5)) // Program Fuse bytes
     9ec:	03 30       	cpi	r16, 0x03	; 3
     9ee:	11 f0       	breq	.+4      	; 0x9f4 <FUNCProgramAVR+0x1a4>
     9f0:	05 30       	cpi	r16, 0x05	; 5
     9f2:	99 f4       	brne	.+38     	; 0xa1a <FUNCProgramAVR+0x1ca>
		{
			MAIN_ShowProgType('F');
     9f4:	86 e4       	ldi	r24, 0x46	; 70
     9f6:	0e 94 5e 03 	call	0x6bc <MAIN_ShowProgType>
			
			if (!(eeprom_read_byte_169(&Prog_TotalFuseBytes)))
     9fa:	80 e1       	ldi	r24, 0x10	; 16
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
     a02:	88 23       	and	r24, r24
     a04:	39 f4       	brne	.+14     	; 0xa14 <FUNCProgramAVR+0x1c4>
			{
				Fault = ISPCC_FAULT_NODATATYPE;					
     a06:	93 e0       	ldi	r25, 0x03	; 3
     a08:	d9 2e       	mov	r13, r25
				MAIN_ShowError(PSTR("NO FUSE BYTES"));
     a0a:	89 e9       	ldi	r24, 0x99	; 153
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	0e 94 80 03 	call	0x700 <MAIN_ShowError>
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <FUNCProgramAVR+0x1ca>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_FUSE);
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	0e 94 fc 17 	call	0x2ff8 <PM_SendFuseLockBytes>
			}
		}

		if ((ProgMode == 4) || (ProgMode == 5)) // Program Lock bytes
     a1a:	80 2f       	mov	r24, r16
     a1c:	84 50       	subi	r24, 0x04	; 4
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	00 f5       	brcc	.+64     	; 0xa62 <FUNCProgramAVR+0x212>
		{
			if (ProgMode == 5)                    // If fusebytes have already been written, we need to reenter programming mode to latch them
     a22:	05 30       	cpi	r16, 0x05	; 5
     a24:	59 f4       	brne	.+22     	; 0xa3c <FUNCProgramAVR+0x1ec>
			{
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line of the slave AVR
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	0e 94 2b 03 	call	0x656 <MAIN_ResetCSLine>
				MAIN_Delay10MS(1);
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	0e 94 2f 02 	call	0x45e <MAIN_Delay10MS>
				MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE); // Capture the RESET line of the slave AVR
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	0e 94 2b 03 	call	0x656 <MAIN_ResetCSLine>
				ISPCC_EnterChipProgrammingMode(); // Try to sync with the slave AVR
     a38:	0e 94 91 10 	call	0x2122 <ISPCC_EnterChipProgrammingMode>
			}

			MAIN_ShowProgType('L');
     a3c:	8c e4       	ldi	r24, 0x4C	; 76
     a3e:	0e 94 5e 03 	call	0x6bc <MAIN_ShowProgType>
		
			if (!(eeprom_read_byte_169(&Prog_TotalLockBytes)))
     a42:	8e e0       	ldi	r24, 0x0E	; 14
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
     a4a:	88 23       	and	r24, r24
     a4c:	39 f4       	brne	.+14     	; 0xa5c <FUNCProgramAVR+0x20c>
			{
				Fault = ISPCC_FAULT_NODATATYPE;
     a4e:	83 e0       	ldi	r24, 0x03	; 3
     a50:	d8 2e       	mov	r13, r24
				MAIN_ShowError(PSTR("NO LOCK BYTES"));
     a52:	87 ea       	ldi	r24, 0xA7	; 167
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	0e 94 80 03 	call	0x700 <MAIN_ShowError>
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <FUNCProgramAVR+0x212>
			}
			else
			{
				PM_SendFuseLockBytes(TYPE_LOCK);
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	0e 94 fc 17 	call	0x2ff8 <PM_SendFuseLockBytes>
			}
		}

		strcpy_P(DoneFailMessageBuff, PSTR("PROGRAMMING DONE"));
     a62:	65 eb       	ldi	r22, 0xB5	; 181
     a64:	72 e0       	ldi	r23, 0x02	; 2
     a66:	ce 01       	movw	r24, r28
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	0e 94 4b 1b 	call	0x3696 <strcpy_P>

		if (Fault != ISPCC_NO_FAULT)         // Takes less code to just overwrite part of the string on fail
     a6e:	dd 20       	and	r13, r13
     a70:	31 f0       	breq	.+12     	; 0xa7e <FUNCProgramAVR+0x22e>
		  strcpy_P(&DoneFailMessageBuff[12], PSTR("FAILED"));
     a72:	66 ec       	ldi	r22, 0xC6	; 198
     a74:	72 e0       	ldi	r23, 0x02	; 2
     a76:	ce 01       	movw	r24, r28
     a78:	0d 96       	adiw	r24, 0x0d	; 13
     a7a:	0e 94 4b 1b 	call	0x3696 <strcpy_P>

		LCD_puts(DoneFailMessageBuff);
     a7e:	ce 01       	movw	r24, r28
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	0e 94 de 07 	call	0xfbc <LCD_puts>

		MAIN_Delay10MS(255);
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	0e 94 2f 02 	call	0x45e <MAIN_Delay10MS>
		MAIN_Delay10MS(100);
     a8c:	84 e6       	ldi	r24, 0x64	; 100
     a8e:	0e 94 2f 02 	call	0x45e <MAIN_Delay10MS>
     a92:	04 c0       	rjmp	.+8      	; 0xa9c <FUNCProgramAVR+0x24c>
	}
	else
	{
		MAIN_ShowError(SyncErrorMessage);
     a94:	88 ee       	ldi	r24, 0xE8	; 232
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	0e 94 80 03 	call	0x700 <MAIN_ShowError>
	}
	
	MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run	
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	0e 94 2b 03 	call	0x656 <MAIN_ResetCSLine>
	USI_SPIOff();
     aa2:	0e 94 bd 09 	call	0x137a <USI_SPIOff>
	DF_EnableDataflash(FALSE);
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
	SPI_SPIOFF();
     aac:	80 91 64 00 	lds	r24, 0x0064
     ab0:	84 60       	ori	r24, 0x04	; 4
     ab2:	80 93 64 00 	sts	0x0064, r24
	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Green = ready
     ab6:	81 b3       	in	r24, 0x11	; 17
     ab8:	8f 7c       	andi	r24, 0xCF	; 207
     aba:	80 61       	ori	r24, 0x10	; 16
     abc:	81 bb       	out	0x11, r24	; 17
     abe:	65 96       	adiw	r28, 0x15	; 21
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	08 95       	ret

00000ada <FUNCStoreProgram>:
}

void FUNCStoreProgram(void)
{
	DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     ada:	82 e6       	ldi	r24, 0x62	; 98
     adc:	99 e0       	ldi	r25, 0x09	; 9
     ade:	90 93 01 01 	sts	0x0101, r25
     ae2:	80 93 00 01 	sts	0x0100, r24
	SPI_SPIInit();
     ae6:	0e 94 58 09 	call	0x12b0 <SPI_SPIInit>
	UseExernalDF = FALSE;
     aea:	10 92 83 02 	sts	0x0283, r1
	DF_EnableDataflash(TRUE);
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>

	if (!(DF_CheckCorrectOnboardChip()))
     af4:	0e 94 7a 0b 	call	0x16f4 <DF_CheckCorrectOnboardChip>
     af8:	88 23       	and	r24, r24
     afa:	a1 f0       	breq	.+40     	; 0xb24 <FUNCStoreProgram+0x4a>
	  return;
			
	LCD_puts_f(PSTR("*STORAGE MODE*"));
     afc:	8d ec       	ldi	r24, 0xCD	; 205
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	0e 94 1f 08 	call	0x103e <LCD_puts_f>

	InterpretPacketRoutine = (FuncPtr)PM_InterpretAVRISPPacket;
     b04:	88 e3       	ldi	r24, 0x38	; 56
     b06:	95 e1       	ldi	r25, 0x15	; 21
     b08:	90 93 25 01 	sts	0x0125, r25
     b0c:	80 93 24 01 	sts	0x0124, r24
	V2P_RunStateMachine();
     b10:	0e 94 37 0f 	call	0x1e6e <V2P_RunStateMachine>
	DF_EnableDataflash(FALSE);
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
	SPI_SPIOFF();
     b1a:	80 91 64 00 	lds	r24, 0x0064
     b1e:	84 60       	ori	r24, 0x04	; 4
     b20:	80 93 64 00 	sts	0x0064, r24
     b24:	08 95       	ret

00000b26 <FUNCClearMem>:
}

void FUNCClearMem(void)
{
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	22 97       	sbiw	r28, 0x02	; 2
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
	LCD_puts_f(PSTR("CONFIRM"));
     b3e:	8c ed       	ldi	r24, 0xDC	; 220
     b40:	92 e0       	ldi	r25, 0x02	; 2
     b42:	0e 94 1f 08 	call	0x103e <LCD_puts_f>
	MAIN_Delay10MS(180);
     b46:	84 eb       	ldi	r24, 0xB4	; 180
     b48:	0e 94 2f 02 	call	0x45e <MAIN_Delay10MS>

	LCD_puts_f(PSTR("<N Y>"));
     b4c:	84 ee       	ldi	r24, 0xE4	; 228
     b4e:	92 e0       	ldi	r25, 0x02	; 2
     b50:	0e 94 1f 08 	call	0x103e <LCD_puts_f>

	while (1)
	{
		if (JoyStatus)
     b54:	8e b3       	in	r24, 0x1e	; 30
     b56:	88 23       	and	r24, r24
     b58:	e9 f3       	breq	.-6      	; 0xb54 <FUNCClearMem+0x2e>
		{
			if (JoyStatus & JOY_LEFT)
     b5a:	8e b3       	in	r24, 0x1e	; 30
     b5c:	99 27       	eor	r25, r25
     b5e:	8c 01       	movw	r16, r24
     b60:	04 70       	andi	r16, 0x04	; 4
     b62:	10 70       	andi	r17, 0x00	; 0
     b64:	82 fd       	sbrc	r24, 2
     b66:	29 c0       	rjmp	.+82     	; 0xbba <FUNCClearMem+0x94>
			  return;
			else if (JoyStatus & JOY_RIGHT)
     b68:	f3 9b       	sbis	0x1e, 3	; 30
     b6a:	f4 cf       	rjmp	.-24     	; 0xb54 <FUNCClearMem+0x2e>
			  break;
		}
	}

	MAIN_WaitForJoyRelease();
     b6c:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>

	LCD_puts_f(WaitText);
     b70:	8f e3       	ldi	r24, 0x3F	; 63
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	0e 94 1f 08 	call	0x103e <LCD_puts_f>

	for (uint16_t EAddr = 0; EAddr < Sys_MagicNumber; EAddr++)
     b78:	1a 83       	std	Y+2, r17	; 0x02
     b7a:	09 83       	std	Y+1, r16	; 0x01
     b7c:	80 91 02 01 	lds	r24, 0x0102
     b80:	90 91 03 01 	lds	r25, 0x0103
     b84:	08 17       	cp	r16, r24
     b86:	19 07       	cpc	r17, r25
     b88:	88 f4       	brcc	.+34     	; 0xbac <FUNCClearMem+0x86>
	  eeprom_write_byte_169(&EAddr, 0xFF);
     b8a:	6f ef       	ldi	r22, 0xFF	; 255
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	9a 83       	std	Y+2, r25	; 0x02
     b9c:	89 83       	std	Y+1, r24	; 0x01
     b9e:	20 91 02 01 	lds	r18, 0x0102
     ba2:	30 91 03 01 	lds	r19, 0x0103
     ba6:	82 17       	cp	r24, r18
     ba8:	93 07       	cpc	r25, r19
     baa:	78 f3       	brcs	.-34     	; 0xb8a <FUNCClearMem+0x64>

	LCD_puts_f(PSTR("MEM CLEARED"));
     bac:	8a ee       	ldi	r24, 0xEA	; 234
     bae:	92 e0       	ldi	r25, 0x02	; 2
     bb0:	0e 94 1f 08 	call	0x103e <LCD_puts_f>
	MAIN_Delay10MS(255);
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
     bb6:	0e 94 2f 02 	call	0x45e <MAIN_Delay10MS>
     bba:	22 96       	adiw	r28, 0x02	; 2
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	08 95       	ret

00000bd0 <FUNCAutoCalib>:
}

void FUNCAutoCalib(void)
{
	LCD_puts_f(WaitText);
     bd0:	8f e3       	ldi	r24, 0x3F	; 63
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	0e 94 1f 08 	call	0x103e <LCD_puts_f>
	OSCCAL_Calibrate();
     bd8:	0e 94 4a 07 	call	0xe94 <OSCCAL_Calibrate>
     bdc:	08 95       	ret

00000bde <FUNCManCalib>:
}

void FUNCManCalib(void)
{
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	29 97       	sbiw	r28, 0x09	; 9
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[9];

	JoyStatus = 1;                           // Invalid value to force the LCD to update
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	8e bb       	out	0x1e, r24	; 30
	
	USART_ENABLE(USART_TX_ON, USART_RX_OFF);
     bf6:	80 91 c1 00 	lds	r24, 0x00C1
     bfa:	80 78       	andi	r24, 0x80	; 128
     bfc:	88 60       	ori	r24, 0x08	; 8
     bfe:	80 93 c1 00 	sts	0x00C1, r24

	while (1)
	{
		if (BuffElements)                    // Routine will also echo send chars (directly accesses the ringbuffer count var)
     c02:	80 91 d1 02 	lds	r24, 0x02D1
     c06:	88 23       	and	r24, r24
     c08:	21 f0       	breq	.+8      	; 0xc12 <FUNCManCalib+0x34>
		   USART_Tx(BUFF_GetBuffByte());
     c0a:	0e 94 c5 0b 	call	0x178a <BUFF_GetBuffByte>
     c0e:	0e 94 0f 09 	call	0x121e <USART_Tx>
	
		if (JoyStatus)
     c12:	8e b3       	in	r24, 0x1e	; 30
     c14:	88 23       	and	r24, r24
     c16:	a9 f3       	breq	.-22     	; 0xc02 <FUNCManCalib+0x24>
		{
			if (JoyStatus & JOY_UP)
     c18:	f6 9b       	sbis	0x1e, 6	; 30
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <FUNCManCalib+0x46>
			  OSCCAL++;
     c1c:	80 91 66 00 	lds	r24, 0x0066
     c20:	8f 5f       	subi	r24, 0xFF	; 255
     c22:	05 c0       	rjmp	.+10     	; 0xc2e <FUNCManCalib+0x50>
			else if (JoyStatus & JOY_DOWN)
     c24:	f7 9b       	sbis	0x1e, 7	; 30
     c26:	06 c0       	rjmp	.+12     	; 0xc34 <FUNCManCalib+0x56>
			  OSCCAL--;
     c28:	80 91 66 00 	lds	r24, 0x0066
     c2c:	81 50       	subi	r24, 0x01	; 1
     c2e:	80 93 66 00 	sts	0x0066, r24
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <FUNCManCalib+0x5a>
			else if (JoyStatus & JOY_LEFT)
     c34:	f2 99       	sbic	0x1e, 2	; 30
     c36:	1f c0       	rjmp	.+62     	; 0xc76 <FUNCManCalib+0x98>
			  break;
					
			// Copy the programmer name out of memory and transmit it via the USART:
			strcpy_P(Buffer, ProgrammerName);
     c38:	66 e3       	ldi	r22, 0x36	; 54
     c3a:	72 e0       	ldi	r23, 0x02	; 2
     c3c:	ce 01       	movw	r24, r28
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	0e 94 4b 1b 	call	0x3696 <strcpy_P>
			USART_TxString(Buffer);
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	0e 94 17 09 	call	0x122e <USART_TxString>

			Buffer[0] = 'C';
     c4c:	83 e4       	ldi	r24, 0x43	; 67
     c4e:	89 83       	std	Y+1, r24	; 0x01
			Buffer[1] = 'V';
     c50:	86 e5       	ldi	r24, 0x56	; 86
     c52:	8a 83       	std	Y+2, r24	; 0x02
			Buffer[2] = ' ';
     c54:	80 e2       	ldi	r24, 0x20	; 32
     c56:	8b 83       	std	Y+3, r24	; 0x03

			MAIN_IntToStr(OSCCAL, &Buffer[3]);
     c58:	80 91 66 00 	lds	r24, 0x0066
     c5c:	be 01       	movw	r22, r28
     c5e:	6c 5f       	subi	r22, 0xFC	; 252
     c60:	7f 4f       	sbci	r23, 0xFF	; 255
     c62:	99 27       	eor	r25, r25
     c64:	0e 94 46 03 	call	0x68c <MAIN_IntToStr>
			LCD_puts(Buffer);
     c68:	ce 01       	movw	r24, r28
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	0e 94 de 07 	call	0xfbc <LCD_puts>

			MAIN_WaitForJoyRelease();
     c70:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     c74:	c6 cf       	rjmp	.-116    	; 0xc02 <FUNCManCalib+0x24>
		}
	}
	
	USART_ENABLE(USART_TX_OFF, USART_RX_OFF);
     c76:	80 91 c1 00 	lds	r24, 0x00C1
     c7a:	80 78       	andi	r24, 0x80	; 128
     c7c:	80 93 c1 00 	sts	0x00C1, r24
     c80:	29 96       	adiw	r28, 0x09	; 9
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <FUNCSetContrast>:
}

void FUNCSetContrast(void)
{
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	26 97       	sbiw	r28, 0x06	; 6
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[6];
	uint8_t Contrast = (eeprom_read_byte_169(&Sys_LCDContrast) & 0x0F); // Ranges from 0-15 so mask retuns 15 on blank EEPROM (0xFF)
     ca8:	84 e0       	ldi	r24, 0x04	; 4
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
     cb0:	18 2f       	mov	r17, r24
     cb2:	1f 70       	andi	r17, 0x0F	; 15
	
	JoyStatus = 1;                          // Invalid value to force the LCD to update
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)
     cb8:	8e b3       	in	r24, 0x1e	; 30
     cba:	88 23       	and	r24, r24
     cbc:	e9 f3       	breq	.-6      	; 0xcb8 <FUNCSetContrast+0x26>
		{
			if (JoyStatus & JOY_UP)
     cbe:	f6 9b       	sbis	0x1e, 6	; 30
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <FUNCSetContrast+0x38>
			{
				if (Contrast < 15)
     cc2:	1f 30       	cpi	r17, 0x0F	; 15
     cc4:	80 f4       	brcc	.+32     	; 0xce6 <FUNCSetContrast+0x54>
				  Contrast++;
     cc6:	1f 5f       	subi	r17, 0xFF	; 255
     cc8:	0e c0       	rjmp	.+28     	; 0xce6 <FUNCSetContrast+0x54>
			}
			else if (JoyStatus & JOY_DOWN)
     cca:	f7 9b       	sbis	0x1e, 7	; 30
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <FUNCSetContrast+0x44>
			{
				if (Contrast > 1)          // Zero is non-visible, so 1 is the minimum
     cce:	12 30       	cpi	r17, 0x02	; 2
     cd0:	50 f0       	brcs	.+20     	; 0xce6 <FUNCSetContrast+0x54>
				  Contrast--;
     cd2:	11 50       	subi	r17, 0x01	; 1
     cd4:	08 c0       	rjmp	.+16     	; 0xce6 <FUNCSetContrast+0x54>
			}
			else if (JoyStatus & JOY_LEFT)
     cd6:	f2 9b       	sbis	0x1e, 2	; 30
     cd8:	06 c0       	rjmp	.+12     	; 0xce6 <FUNCSetContrast+0x54>
			{
				eeprom_write_byte_169(&Sys_LCDContrast, Contrast);
     cda:	61 2f       	mov	r22, r17
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
				return;
     ce4:	18 c0       	rjmp	.+48     	; 0xd16 <FUNCSetContrast+0x84>
			}
					
			Buffer[0] = 'C';
     ce6:	83 e4       	ldi	r24, 0x43	; 67
     ce8:	89 83       	std	Y+1, r24	; 0x01
			Buffer[1] = 'T';
     cea:	84 e5       	ldi	r24, 0x54	; 84
     cec:	8a 83       	std	Y+2, r24	; 0x02
			Buffer[2] = ' ';
     cee:	80 e2       	ldi	r24, 0x20	; 32
     cf0:	8b 83       	std	Y+3, r24	; 0x03

			MAIN_IntToStr((uint16_t)Contrast, &Buffer[3]);
     cf2:	be 01       	movw	r22, r28
     cf4:	6c 5f       	subi	r22, 0xFC	; 252
     cf6:	7f 4f       	sbci	r23, 0xFF	; 255
     cf8:	81 2f       	mov	r24, r17
     cfa:	99 27       	eor	r25, r25
     cfc:	0e 94 46 03 	call	0x68c <MAIN_IntToStr>
			LCD_puts(Buffer);
     d00:	ce 01       	movw	r24, r28
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	0e 94 de 07 	call	0xfbc <LCD_puts>

			LCD_CONTRAST_LEVEL(Contrast);
     d08:	81 2f       	mov	r24, r17
     d0a:	8f 70       	andi	r24, 0x0F	; 15
     d0c:	80 93 e7 00 	sts	0x00E7, r24

			MAIN_WaitForJoyRelease();
     d10:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     d14:	d1 cf       	rjmp	.-94     	; 0xcb8 <FUNCSetContrast+0x26>
     d16:	26 96       	adiw	r28, 0x06	; 6
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	08 95       	ret

00000d2a <FUNCSetISPSpeed>:
		}
	}
}

void FUNCSetISPSpeed(void)
{
     d2a:	cf 93       	push	r28
	JoyStatus = 1;                         // Invalid value to force the LCD to update
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	8e bb       	out	0x1e, r24	; 30

	uint8_t CurrSpeed = eeprom_read_byte_169(&Param_SCKDuration);
     d30:	80 e2       	ldi	r24, 0x20	; 32
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
     d38:	c8 2f       	mov	r28, r24

	if (CurrSpeed > (USI_PRESET_SPEEDS - 1)) CurrSpeed = 0; // Protection against blank EEPROM
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <FUNCSetISPSpeed+0x16>
     d3e:	c0 e0       	ldi	r28, 0x00	; 0

	while (1)
	{
		if (JoyStatus)
     d40:	8e b3       	in	r24, 0x1e	; 30
     d42:	88 23       	and	r24, r24
     d44:	e9 f3       	breq	.-6      	; 0xd40 <FUNCSetISPSpeed+0x16>
		{
			if (JoyStatus & JOY_UP)
     d46:	f6 9b       	sbis	0x1e, 6	; 30
     d48:	06 c0       	rjmp	.+12     	; 0xd56 <FUNCSetISPSpeed+0x2c>
			{
				(CurrSpeed == 0)? CurrSpeed = (USI_PRESET_SPEEDS - 1) : CurrSpeed--;
     d4a:	cc 23       	and	r28, r28
     d4c:	11 f4       	brne	.+4      	; 0xd52 <FUNCSetISPSpeed+0x28>
     d4e:	c3 e0       	ldi	r28, 0x03	; 3
     d50:	12 c0       	rjmp	.+36     	; 0xd76 <FUNCSetISPSpeed+0x4c>
     d52:	c1 50       	subi	r28, 0x01	; 1
     d54:	10 c0       	rjmp	.+32     	; 0xd76 <FUNCSetISPSpeed+0x4c>
			}
			else if (JoyStatus & JOY_DOWN)
     d56:	f7 9b       	sbis	0x1e, 7	; 30
     d58:	06 c0       	rjmp	.+12     	; 0xd66 <FUNCSetISPSpeed+0x3c>
			{
				(CurrSpeed == (USI_PRESET_SPEEDS - 1))? CurrSpeed = 0 : CurrSpeed++;
     d5a:	c3 30       	cpi	r28, 0x03	; 3
     d5c:	11 f4       	brne	.+4      	; 0xd62 <FUNCSetISPSpeed+0x38>
     d5e:	c0 e0       	ldi	r28, 0x00	; 0
     d60:	0a c0       	rjmp	.+20     	; 0xd76 <FUNCSetISPSpeed+0x4c>
     d62:	cf 5f       	subi	r28, 0xFF	; 255
     d64:	08 c0       	rjmp	.+16     	; 0xd76 <FUNCSetISPSpeed+0x4c>
			}
			else if (JoyStatus & JOY_LEFT)
     d66:	f2 9b       	sbis	0x1e, 2	; 30
     d68:	06 c0       	rjmp	.+12     	; 0xd76 <FUNCSetISPSpeed+0x4c>
			{
				eeprom_write_byte_169(&Param_SCKDuration, CurrSpeed);
     d6a:	6c 2f       	mov	r22, r28
     d6c:	80 e2       	ldi	r24, 0x20	; 32
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
				return;
     d74:	0d c0       	rjmp	.+26     	; 0xd90 <FUNCSetISPSpeed+0x66>
			}
			
			// Show selected USI speed value onto the LCD:
			LCD_puts_f((uint8_t*)pgm_read_word(&USIPSNamePtrs[CurrSpeed]));
     d76:	ec 2f       	mov	r30, r28
     d78:	ff 27       	eor	r31, r31
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	e3 58       	subi	r30, 0x83	; 131
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	85 91       	lpm	r24, Z+
     d84:	94 91       	lpm	r25, Z
     d86:	0e 94 1f 08 	call	0x103e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     d8a:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     d8e:	d8 cf       	rjmp	.-80     	; 0xd40 <FUNCSetISPSpeed+0x16>
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <FUNCSleepMode>:
		}
	}
}

void FUNCSleepMode(void)
{
	SMCR    = ((1 << SM1) | (1 << SE));   // Power down sleep mode
     d94:	85 e0       	ldi	r24, 0x05	; 5
     d96:	83 bf       	out	0x33, r24	; 51
	LCDCRA &= ~(1 << LCDEN); 
     d98:	80 91 e4 00 	lds	r24, 0x00E4
     d9c:	8f 77       	andi	r24, 0x7F	; 127
     d9e:	80 93 e4 00 	sts	0x00E4, r24
	
	while (!(JoyStatus & JOY_UP))        // Joystick interrupt wakes the micro
	  SLEEP();
     da2:	f6 99       	sbic	0x1e, 6	; 30
     da4:	03 c0       	rjmp	.+6      	; 0xdac <FUNCSleepMode+0x18>
     da6:	88 95       	sleep
     da8:	f6 9b       	sbis	0x1e, 6	; 30
     daa:	fd cf       	rjmp	.-6      	; 0xda6 <FUNCSleepMode+0x12>
	   
	LCDCRA |= (1 << LCDEN);
     dac:	80 91 e4 00 	lds	r24, 0x00E4
     db0:	80 68       	ori	r24, 0x80	; 128
     db2:	80 93 e4 00 	sts	0x00E4, r24

	LCD_puts_f(WaitText);
     db6:	8f e3       	ldi	r24, 0x3F	; 63
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	0e 94 1f 08 	call	0x103e <LCD_puts_f>
	OSCCAL_Calibrate();	
     dbe:	0e 94 4a 07 	call	0xe94 <OSCCAL_Calibrate>
	
	MAIN_WaitForJoyRelease();
     dc2:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     dc6:	08 95       	ret

00000dc8 <FUNCStorageInfo>:
}

void FUNCStorageInfo(void)
{
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
	uint8_t SelectedItem = 0;
     dcc:	10 e0       	ldi	r17, 0x00	; 0

	MAIN_WaitForJoyRelease();
     dce:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>

	JoyStatus = 1;                         // Invalid value to force the LCD to update
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	8e bb       	out	0x1e, r24	; 30

	while (1)
	{
		if (JoyStatus)
     dd6:	8e b3       	in	r24, 0x1e	; 30
     dd8:	88 23       	and	r24, r24
     dda:	e9 f3       	breq	.-6      	; 0xdd6 <FUNCStorageInfo+0xe>
		{
			if (JoyStatus & (JOY_UP | JOY_DOWN))
     ddc:	ce b3       	in	r28, 0x1e	; 30
     dde:	c0 7c       	andi	r28, 0xC0	; 192
     de0:	19 f0       	breq	.+6      	; 0xde8 <FUNCStorageInfo+0x20>
			{
				SelectedItem ^= 1;
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	18 27       	eor	r17, r24
     de6:	38 c0       	rjmp	.+112    	; 0xe58 <FUNCStorageInfo+0x90>
			}
			else if (JoyStatus & JOY_LEFT)
     de8:	f2 99       	sbic	0x1e, 2	; 30
     dea:	43 c0       	rjmp	.+134    	; 0xe72 <FUNCStorageInfo+0xaa>
			{
				return;
			}
			else if (JoyStatus & JOY_PRESS)
     dec:	f4 9b       	sbis	0x1e, 4	; 30
     dee:	34 c0       	rjmp	.+104    	; 0xe58 <FUNCStorageInfo+0x90>
			{
				if (SelectedItem == 1)    // View storage tags
     df0:	11 30       	cpi	r17, 0x01	; 1
     df2:	81 f5       	brne	.+96     	; 0xe54 <FUNCStorageInfo+0x8c>
				{
					DFSPIRoutinePointer = (SPIFuncPtr)SPI_SPITransmit;
     df4:	82 e6       	ldi	r24, 0x62	; 98
     df6:	99 e0       	ldi	r25, 0x09	; 9
     df8:	90 93 01 01 	sts	0x0101, r25
     dfc:	80 93 00 01 	sts	0x0100, r24
					SPI_SPIInit();
     e00:	0e 94 58 09 	call	0x12b0 <SPI_SPIInit>
					UseExernalDF = FALSE;
     e04:	c0 93 83 02 	sts	0x0283, r28
					DF_EnableDataflash(TRUE);
     e08:	81 2f       	mov	r24, r17
     e0a:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>

					if (DF_CheckCorrectOnboardChip())
     e0e:	0e 94 7a 0b 	call	0x16f4 <DF_CheckCorrectOnboardChip>
     e12:	c8 2f       	mov	r28, r24
     e14:	88 23       	and	r24, r24
     e16:	41 f0       	breq	.+16     	; 0xe28 <FUNCStorageInfo+0x60>
					{
						TM_ShowTags();
     e18:	0e 94 1d 1b 	call	0x363a <TM_ShowTags>
						SPI_SPIOFF();
     e1c:	80 91 64 00 	lds	r24, 0x0064
     e20:	84 60       	ori	r24, 0x04	; 4
     e22:	80 93 64 00 	sts	0x0064, r24
     e26:	18 c0       	rjmp	.+48     	; 0xe58 <FUNCStorageInfo+0x90>
					}
					else if (!(PM_GetStoredDataSize(TYPE_FLASH)))
     e28:	81 2f       	mov	r24, r17
     e2a:	0e 94 90 13 	call	0x2720 <PM_GetStoredDataSize>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	a1 05       	cpc	r26, r1
     e36:	b1 05       	cpc	r27, r1
     e38:	79 f4       	brne	.+30     	; 0xe58 <FUNCStorageInfo+0x90>
					{
						DF_EnableDataflash(FALSE);
     e3a:	8c 2f       	mov	r24, r28
     e3c:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
						SPI_SPIOFF();
     e40:	80 91 64 00 	lds	r24, 0x0064
     e44:	84 60       	ori	r24, 0x04	; 4
     e46:	80 93 64 00 	sts	0x0064, r24

						MAIN_ShowError(PSTR("NO STORED PRGM"));
     e4a:	86 ef       	ldi	r24, 0xF6	; 246
     e4c:	92 e0       	ldi	r25, 0x02	; 2
     e4e:	0e 94 80 03 	call	0x700 <MAIN_ShowError>
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <FUNCStorageInfo+0x90>
					}	
				}
				else                  // View stored data sizes
				{
					PM_ShowStoredItemSizes();
     e54:	0e 94 f9 19 	call	0x33f2 <PM_ShowStoredItemSizes>
				}
			}
			
			LCD_puts_f((uint8_t*)pgm_read_word(&SIFOOptionPtrs[SelectedItem]));
     e58:	e1 2f       	mov	r30, r17
     e5a:	ff 27       	eor	r31, r31
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	e4 5a       	subi	r30, 0xA4	; 164
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	85 91       	lpm	r24, Z+
     e66:	94 91       	lpm	r25, Z
     e68:	0e 94 1f 08 	call	0x103e <LCD_puts_f>

			MAIN_WaitForJoyRelease();
     e6c:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
     e70:	b2 cf       	rjmp	.-156    	; 0xdd6 <FUNCStorageInfo+0xe>
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	08 95       	ret

00000e78 <FUNCGoBootloader>:
		}
	}
}

void FUNCGoBootloader(void)
{
	uint8_t MD = (MCUCR & ~(1 << JTD)); // Forces compiler to use IN, AND plus two OUTs rather than two lots of IN/AND/OUTs
     e78:	85 b7       	in	r24, 0x35	; 53
     e7a:	8f 77       	andi	r24, 0x7F	; 127
	MCUCR = MD;  // Turn on JTAG via code
     e7c:	85 bf       	out	0x35, r24	; 53
	MCUCR = MD;  // Twice as specified in datasheet        
     e7e:	85 bf       	out	0x35, r24	; 53
	
	LCD_puts_f(PSTR("*JTAG ON*"));
     e80:	85 e0       	ldi	r24, 0x05	; 5
     e82:	93 e0       	ldi	r25, 0x03	; 3
     e84:	0e 94 1f 08 	call	0x103e <LCD_puts_f>
	
	MAIN_WaitForJoyRelease();
     e88:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
	
	WDTCR = ((1<<WDCE) | (1<<WDE)); // Enable Watchdog Timer to give reset after minimum timeout
     e8c:	88 e1       	ldi	r24, 0x18	; 24
     e8e:	80 93 60 00 	sts	0x0060, r24
	while (1) {};                  // Eternal loop - when watchdog resets the AVR it will enter the bootloader
     e92:	ff cf       	rjmp	.-2      	; 0xe92 <FUNCGoBootloader+0x1a>

00000e94 <OSCCAL_Calibrate>:

volatile static uint16_t ActualCount;

void OSCCAL_Calibrate(void)
{
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
	uint8_t SREG_Backup;
	uint8_t LoopCount = (0x7F / 2); // Maximum range is 128, and starts from the middle, so 64 is the max number of iterations required
     e98:	4f e3       	ldi	r20, 0x3F	; 63
	uint8_t PrevOSCALValues[2] = {};
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
   
	// Make sure all clock division is turned off (8Mhz RC clock)
	OSCCAL_SETSYSCLOCKSPEED(OSCCAL_CLOCKSPEED_8MHZ);
     e9e:	80 e8       	ldi	r24, 0x80	; 128
     ea0:	80 93 61 00 	sts	0x0061, r24
     ea4:	10 92 61 00 	sts	0x0061, r1

	// Inital OSCCAL of half its maximum for speed
	OSCCAL = (0x7F / 2);
     ea8:	40 93 66 00 	sts	0x0066, r20

	// Save the SREG
	SREG_Backup = SREG;
     eac:	5f b7       	in	r21, 0x3f	; 63
    
	// Disable all timer 1 interrupts
	TIMSK1 = 0;
     eae:	10 92 6f 00 	sts	0x006F, r1
        
	// Set timer 2 to asyncronous mode (32.768KHz crystal)
	ASSR   = (1 << AS2);
     eb2:	88 e0       	ldi	r24, 0x08	; 8
     eb4:	80 93 b6 00 	sts	0x00B6, r24
        
	// Timer 2 overflow interrupt enable
	TIMSK2 = (1 << TOIE2);
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	80 93 70 00 	sts	0x0070, r24

	// Enable interrupts
	sei();
     ebe:	78 94       	sei

	// Start both counters with no prescaling
	TCCR1B = (1 << CS10);
     ec0:	80 93 81 00 	sts	0x0081, r24
	TCCR2A = (1 << CS20);
     ec4:	80 93 b0 00 	sts	0x00B0, r24
	 	 
	// Wait until timer 2's external 32.768KHz crystal is stable
	while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB) | (1 << OCR2UB)));
     ec8:	80 91 b6 00 	lds	r24, 0x00B6
     ecc:	99 27       	eor	r25, r25
     ece:	87 70       	andi	r24, 0x07	; 7
     ed0:	90 70       	andi	r25, 0x00	; 0
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	c9 f7       	brne	.-14     	; 0xec8 <OSCCAL_Calibrate+0x34>
    
	// Clear the timer values
	TCNT1  = 0;
     ed6:	90 93 85 00 	sts	0x0085, r25
     eda:	80 93 84 00 	sts	0x0084, r24
	TCNT2  = 0;
     ede:	10 92 b2 00 	sts	0x00B2, r1
    
	while (LoopCount--)
	{
		// Let it take a few readings (16ms, approx 2 readings)
		_delay_ms(16);

		PrevOSCALValues[1] = PrevOSCALValues[0];
		PrevOSCALValues[0] = OSCCAL;
        
		if (ActualCount > OSCCAL_UPPERCOUNTBOUND)       // Clock is running too fast
			OSCCAL--;
		else if (ActualCount < OSCCAL_LOWERCOUNTBOUND ) // Clock is running too slow
			OSCCAL++;
		else		                                     // Clock is just right
			break;
		
		// If the routine cannot find a value withing the count tollerance,
		// it will cause the OSCCAL to hover around the closest two values.
		// If the current value is the same as the two previous, exit the
		// routine as the best value has been found.
		if (OSCCAL == PrevOSCALValues[1])
		  break;
     ee2:	4e e3       	ldi	r20, 0x3E	; 62
     ee4:	a3 e3       	ldi	r26, 0x33	; 51
     ee6:	b3 e7       	ldi	r27, 0x73	; 115
     ee8:	c0 e0       	ldi	r28, 0x00	; 0
     eea:	d0 e0       	ldi	r29, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eec:	cd 01       	movw	r24, r26
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <OSCCAL_Calibrate+0x5a>
     ef2:	32 2f       	mov	r19, r18
     ef4:	80 91 66 00 	lds	r24, 0x0066
     ef8:	28 2f       	mov	r18, r24
     efa:	80 91 26 01 	lds	r24, 0x0126
     efe:	90 91 27 01 	lds	r25, 0x0127
     f02:	86 50       	subi	r24, 0x06	; 6
     f04:	91 4e       	sbci	r25, 0xE1	; 225
     f06:	20 f0       	brcs	.+8      	; 0xf10 <OSCCAL_Calibrate+0x7c>
     f08:	80 91 66 00 	lds	r24, 0x0066
     f0c:	81 50       	subi	r24, 0x01	; 1
     f0e:	0a c0       	rjmp	.+20     	; 0xf24 <OSCCAL_Calibrate+0x90>
     f10:	80 91 26 01 	lds	r24, 0x0126
     f14:	90 91 27 01 	lds	r25, 0x0127
     f18:	8b 5f       	subi	r24, 0xFB	; 251
     f1a:	90 4e       	sbci	r25, 0xE0	; 224
     f1c:	58 f4       	brcc	.+22     	; 0xf34 <OSCCAL_Calibrate+0xa0>
     f1e:	80 91 66 00 	lds	r24, 0x0066
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	80 93 66 00 	sts	0x0066, r24
     f28:	80 91 66 00 	lds	r24, 0x0066
     f2c:	83 17       	cp	r24, r19
     f2e:	11 f0       	breq	.+4      	; 0xf34 <OSCCAL_Calibrate+0xa0>
     f30:	41 50       	subi	r20, 0x01	; 1
     f32:	e0 f6       	brcc	.-72     	; 0xeec <OSCCAL_Calibrate+0x58>
	}

	// Disable all timer interrupts
	TIMSK1 = 0;
     f34:	10 92 6f 00 	sts	0x006F, r1
	TIMSK2 = 0;
     f38:	10 92 70 00 	sts	0x0070, r1
    
	// Stop the timers
	TCCR1B = 0x00;
     f3c:	10 92 81 00 	sts	0x0081, r1
	TCCR2A = 0x00;
     f40:	10 92 b0 00 	sts	0x00B0, r1

	// Turn off timer 2 asynchronous mode
	ASSR  &= ~(1 << AS2);
     f44:	80 91 b6 00 	lds	r24, 0x00B6
     f48:	87 7f       	andi	r24, 0xF7	; 247
     f4a:	80 93 b6 00 	sts	0x00B6, r24

	// Restore SREG
	SREG = SREG_Backup;
     f4e:	5f bf       	out	0x3f, r21	; 63
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <__vector_5>:
        
	return;
}

ISR(TIMER2_OVF_vect, ISR_BLOCK) // Occurs 32768/256 timers per second, or 128Hz
{
     f56:	1f 92       	push	r1
     f58:	0f 92       	push	r0
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	0f 92       	push	r0
     f5e:	11 24       	eor	r1, r1
     f60:	8f 93       	push	r24
     f62:	9f 93       	push	r25
	// Stop timer 1 so it can be read
	TCCR1B = 0x00;
     f64:	10 92 81 00 	sts	0x0081, r1
    
	// Record timer 1's value
	ActualCount = TCNT1;
     f68:	80 91 84 00 	lds	r24, 0x0084
     f6c:	90 91 85 00 	lds	r25, 0x0085
     f70:	90 93 27 01 	sts	0x0127, r25
     f74:	80 93 26 01 	sts	0x0126, r24
	     
	// Reset counters and restart timer 1
	TCNT1  = 0;
     f78:	10 92 85 00 	sts	0x0085, r1
     f7c:	10 92 84 00 	sts	0x0084, r1
	TCNT2  = 0;
     f80:	10 92 b2 00 	sts	0x00B2, r1
	TCCR1B = (1 << CS10);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	80 93 81 00 	sts	0x0081, r24
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	0f 90       	pop	r0
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	0f 90       	pop	r0
     f94:	1f 90       	pop	r1
     f96:	18 95       	reti

00000f98 <LCD_Init>:
// ======================================================================================

void LCD_Init(void)
{
	LCDCCR = 0x0F;
     f98:	8f e0       	ldi	r24, 0x0F	; 15
     f9a:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all segment pins.
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
     f9e:	87 eb       	ldi	r24, 0xB7	; 183
     fa0:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32,0 Hz
    LCDFRR  = (0<<LCDPS0) | (7<<LCDCD0);    
     fa4:	87 e0       	ldi	r24, 0x07	; 7
     fa6:	80 93 e6 00 	sts	0x00E6, r24

	// Enable LCD and set low power waveform
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB); 
     faa:	80 ec       	ldi	r24, 0xC0	; 192
     fac:	80 93 e4 00 	sts	0x00E4, r24

    //Enable LCD start of frame interrupt
    LCDCRA |= (1<<LCDIE);
     fb0:	80 91 e4 00 	lds	r24, 0x00E4
     fb4:	88 60       	ori	r24, 0x08	; 8
     fb6:	80 93 e4 00 	sts	0x00E4, r24
     fba:	08 95       	ret

00000fbc <LCD_puts>:
}

void LCD_puts_f(const uint8_t *FlashData)
{
	uint8_t StrBuff[LCD_TEXTBUFFER_SIZE];

	strcpy_P(StrBuff, FlashData);
	LCD_puts(StrBuff);
}

void LCD_puts(uint8_t *Data)
{
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	ec 01       	movw	r28, r24
	uint8_t LoadB;
	
	for (LoadB = 0; LoadB < 20; LoadB++)
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	3f ef       	ldi	r19, 0xFF	; 255
     fc6:	ef e4       	ldi	r30, 0x4F	; 79
     fc8:	f2 e0       	ldi	r31, 0x02	; 2
     fca:	df 01       	movw	r26, r30
	{
		uint8_t CByte = *(Data++);
     fcc:	89 91       	ld	r24, Y+
	
		if ((CByte >= '*') && (CByte <= 'z'))
     fce:	98 2f       	mov	r25, r24
     fd0:	9a 52       	subi	r25, 0x2A	; 42
     fd2:	91 35       	cpi	r25, 0x51	; 81
     fd4:	38 f4       	brcc	.+14     	; 0xfe4 <LCD_puts+0x28>
		  TextBuffer[LoadB] = ((CByte == ' ')? 0xFF : (CByte - '*'));
     fd6:	80 32       	cpi	r24, 0x20	; 32
     fd8:	11 f0       	breq	.+4      	; 0xfde <LCD_puts+0x22>
     fda:	89 2f       	mov	r24, r25
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <LCD_puts+0x24>
     fde:	8f ef       	ldi	r24, 0xFF	; 255
     fe0:	8c 93       	st	X, r24
     fe2:	03 c0       	rjmp	.+6      	; 0xfea <LCD_puts+0x2e>
		else if (CByte == 0x00)
     fe4:	88 23       	and	r24, r24
     fe6:	31 f0       	breq	.+12     	; 0xff4 <LCD_puts+0x38>
		  break;
		else
		  TextBuffer[LoadB] = 0xFF;		
     fe8:	30 83       	st	Z, r19
     fea:	2f 5f       	subi	r18, 0xFF	; 255
     fec:	11 96       	adiw	r26, 0x01	; 1
     fee:	31 96       	adiw	r30, 0x01	; 1
     ff0:	24 31       	cpi	r18, 0x14	; 20
     ff2:	60 f3       	brcs	.-40     	; 0xfcc <LCD_puts+0x10>
	}

	ScrollMode  = ((LoadB > 6)? TRUE : FALSE);
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	27 30       	cpi	r18, 0x07	; 7
     ff8:	08 f0       	brcs	.+2      	; 0xffc <LCD_puts+0x40>
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	80 93 7f 02 	sts	0x027F, r24
	ScrollCount = 0;
    1000:	10 92 4d 02 	sts	0x024D, r1
    1004:	9f ef       	ldi	r25, 0xFF	; 255
    1006:	86 e0       	ldi	r24, 0x06	; 6

	for (uint8_t Nulls = 0; Nulls < 7; Nulls++)
		TextBuffer[LoadB++] = 0xFF;
    1008:	e2 2f       	mov	r30, r18
    100a:	ff 27       	eor	r31, r31
    100c:	e1 5b       	subi	r30, 0xB1	; 177
    100e:	fd 4f       	sbci	r31, 0xFD	; 253
    1010:	90 83       	st	Z, r25
    1012:	2f 5f       	subi	r18, 0xFF	; 255
    1014:	81 50       	subi	r24, 0x01	; 1
    1016:	87 ff       	sbrs	r24, 7
    1018:	f7 cf       	rjmp	.-18     	; 0x1008 <LCD_puts+0x4c>
	
	TextBuffer[LoadB] = 0x00;
    101a:	e2 2f       	mov	r30, r18
    101c:	ff 27       	eor	r31, r31
    101e:	e1 5b       	subi	r30, 0xB1	; 177
    1020:	fd 4f       	sbci	r31, 0xFD	; 253
    1022:	10 82       	st	Z, r1
	StrStart   = 0;
    1024:	10 92 4e 02 	sts	0x024E, r1
	StrEnd     = LoadB;	
    1028:	20 93 4c 02 	sts	0x024C, r18
	DelayCount = LCD_DELAYCOUNT_DEFAULT;
    102c:	8a e0       	ldi	r24, 0x0A	; 10
    102e:	80 93 80 02 	sts	0x0280, r24

	UpdateLCD  = TRUE;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 6a 02 	sts	0x026A, r24
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <LCD_puts_f>:
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	64 97       	sbiw	r28, 0x14	; 20
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	bc 01       	movw	r22, r24
    1054:	ce 01       	movw	r24, r28
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	0e 94 4b 1b 	call	0x3696 <strcpy_P>
    105c:	ce 01       	movw	r24, r28
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	0e 94 de 07 	call	0xfbc <LCD_puts>
    1064:	64 96       	adiw	r28, 0x14	; 20
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	08 95       	ret

00001076 <LCD_WriteChar>:
}

void LCD_WriteChar(uint8_t Byte, uint8_t Digit)
{
    1076:	e8 2f       	mov	r30, r24
	uint16_t SegData  = 0x00;
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1));
    107c:	86 2f       	mov	r24, r22
    107e:	86 95       	lsr	r24
    1080:	a8 2f       	mov	r26, r24
    1082:	bb 27       	eor	r27, r27
    1084:	a5 59       	subi	r26, 0x95	; 149
    1086:	bd 4f       	sbci	r27, 0xFD	; 253

	if (Byte != 0xFF)
    1088:	ef 3f       	cpi	r30, 0xFF	; 255
    108a:	39 f0       	breq	.+14     	; 0x109a <LCD_WriteChar+0x24>
	  SegData = pgm_read_word(&LCD_SegTable[Byte]);	
    108c:	ff 27       	eor	r31, r31
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	e1 5f       	subi	r30, 0xF1	; 241
    1094:	fc 4f       	sbci	r31, 0xFC	; 252
    1096:	25 91       	lpm	r18, Z+
    1098:	34 91       	lpm	r19, Z
    109a:	77 27       	eor	r23, r23
    109c:	61 70       	andi	r22, 0x01	; 1
    109e:	70 70       	andi	r23, 0x00	; 0
    10a0:	43 e0       	ldi	r20, 0x03	; 3

	for (uint8_t BNib = 0; BNib < 4; BNib++)
	{
		uint8_t Mask          = 0xF0;
    10a2:	50 ef       	ldi	r21, 0xF0	; 240
		uint8_t MaskedSegData = (SegData & 0x0000F);
    10a4:	92 2f       	mov	r25, r18
    10a6:	9f 70       	andi	r25, 0x0F	; 15
	
		if (Digit & 0x01)
    10a8:	61 15       	cp	r22, r1
    10aa:	71 05       	cpc	r23, r1
    10ac:	19 f0       	breq	.+6      	; 0x10b4 <LCD_WriteChar+0x3e>
		{
			Mask = 0x0F;
    10ae:	5f e0       	ldi	r21, 0x0F	; 15
			MaskedSegData <<= 4;
    10b0:	92 95       	swap	r25
    10b2:	90 7f       	andi	r25, 0xF0	; 240
		}
		
		*BuffPtr = ((*BuffPtr & Mask) | MaskedSegData);
    10b4:	8c 91       	ld	r24, X
    10b6:	85 23       	and	r24, r21
    10b8:	89 2b       	or	r24, r25
    10ba:	8c 93       	st	X, r24

		SegData >>= 4;
    10bc:	84 e0       	ldi	r24, 0x04	; 4
    10be:	36 95       	lsr	r19
    10c0:	27 95       	ror	r18
    10c2:	8a 95       	dec	r24
    10c4:	e1 f7       	brne	.-8      	; 0x10be <LCD_WriteChar+0x48>
		BuffPtr  += 5;
    10c6:	15 96       	adiw	r26, 0x05	; 5
    10c8:	41 50       	subi	r20, 0x01	; 1
    10ca:	47 ff       	sbrs	r20, 7
    10cc:	ea cf       	rjmp	.-44     	; 0x10a2 <LCD_WriteChar+0x2c>
    10ce:	08 95       	ret

000010d0 <__vector_22>:
	}
}

ISR(LCD_vect, ISR_NOBLOCK)
{
    10d0:	78 94       	sei
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	2f 93       	push	r18
    10de:	3f 93       	push	r19
    10e0:	4f 93       	push	r20
    10e2:	5f 93       	push	r21
    10e4:	6f 93       	push	r22
    10e6:	7f 93       	push	r23
    10e8:	8f 93       	push	r24
    10ea:	9f 93       	push	r25
    10ec:	af 93       	push	r26
    10ee:	bf 93       	push	r27
    10f0:	cf 93       	push	r28
    10f2:	ef 93       	push	r30
    10f4:	ff 93       	push	r31
	if (ScrollMode)
    10f6:	80 91 7f 02 	lds	r24, 0x027F
    10fa:	88 23       	and	r24, r24
    10fc:	99 f0       	breq	.+38     	; 0x1124 <__vector_22+0x54>
	{
		if (DelayCount)
    10fe:	80 91 80 02 	lds	r24, 0x0280
    1102:	88 23       	and	r24, r24
    1104:	21 f0       	breq	.+8      	; 0x110e <__vector_22+0x3e>
		{
			DelayCount--;
    1106:	81 50       	subi	r24, 0x01	; 1
    1108:	80 93 80 02 	sts	0x0280, r24
    110c:	0b c0       	rjmp	.+22     	; 0x1124 <__vector_22+0x54>
		}
		else
		{
			if (!(ScrollCount))
    110e:	80 91 4d 02 	lds	r24, 0x024D
    1112:	88 23       	and	r24, r24
    1114:	21 f4       	brne	.+8      	; 0x111e <__vector_22+0x4e>
			  UpdateLCD = TRUE;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	80 93 6a 02 	sts	0x026A, r24
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <__vector_22+0x54>
			else
			  ScrollCount--;
    111e:	81 50       	subi	r24, 0x01	; 1
    1120:	80 93 4d 02 	sts	0x024D, r24
		}
	}

	if (UpdateLCD)
    1124:	80 91 6a 02 	lds	r24, 0x026A
    1128:	88 23       	and	r24, r24
    112a:	39 f1       	breq	.+78     	; 0x117a <__vector_22+0xaa>
	{
		for (uint8_t Character = 0; Character < 6; Character++)
    112c:	c0 e0       	ldi	r28, 0x00	; 0
		{
			uint8_t Byte = (StrStart + Character);
    112e:	80 91 4e 02 	lds	r24, 0x024E
    1132:	8c 0f       	add	r24, r28

			if (Byte >= StrEnd)
    1134:	90 91 4c 02 	lds	r25, 0x024C
    1138:	e8 2f       	mov	r30, r24
    113a:	ff 27       	eor	r31, r31
    113c:	89 17       	cp	r24, r25
    113e:	10 f0       	brcs	.+4      	; 0x1144 <__vector_22+0x74>
			  Byte = TextBuffer[Byte - StrEnd];
    1140:	e9 1b       	sub	r30, r25
    1142:	f1 09       	sbc	r31, r1
			else
			  Byte = TextBuffer[Byte];
    1144:	e1 5b       	subi	r30, 0xB1	; 177
    1146:	fd 4f       	sbci	r31, 0xFD	; 253
    1148:	80 81       	ld	r24, Z
			
			LCD_WriteChar(Byte, Character);
    114a:	6c 2f       	mov	r22, r28
    114c:	0e 94 3b 08 	call	0x1076 <LCD_WriteChar>
    1150:	cf 5f       	subi	r28, 0xFF	; 255
    1152:	c6 30       	cpi	r28, 0x06	; 6
    1154:	60 f3       	brcs	.-40     	; 0x112e <__vector_22+0x5e>
		}
		
		if (StrStart++ == StrEnd)
    1156:	80 91 4e 02 	lds	r24, 0x024E
    115a:	98 2f       	mov	r25, r24
    115c:	8f 5f       	subi	r24, 0xFF	; 255
    115e:	80 93 4e 02 	sts	0x024E, r24
    1162:	80 91 4c 02 	lds	r24, 0x024C
    1166:	98 17       	cp	r25, r24
    1168:	19 f4       	brne	.+6      	; 0x1170 <__vector_22+0xa0>
		  StrStart = 1;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 93 4e 02 	sts	0x024E, r24
		
		ScrollCount = LCD_SCROLLCOUNT_DEFAULT;
    1170:	83 e0       	ldi	r24, 0x03	; 3
    1172:	80 93 4d 02 	sts	0x024D, r24
		UpdateLCD = FALSE;
    1176:	10 92 6a 02 	sts	0x026A, r1
    117a:	ac ee       	ldi	r26, 0xEC	; 236
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	eb e6       	ldi	r30, 0x6B	; 107
    1180:	f2 e0       	ldi	r31, 0x02	; 2
    1182:	93 e1       	ldi	r25, 0x13	; 19
	}

	for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++)
	  *(pLCDREG + LCDChar) = SegBuffer[LCDChar];
    1184:	81 91       	ld	r24, Z+
    1186:	8d 93       	st	X+, r24
    1188:	91 50       	subi	r25, 0x01	; 1
    118a:	97 ff       	sbrs	r25, 7
    118c:	fb cf       	rjmp	.-10     	; 0x1184 <__vector_22+0xb4>
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	cf 91       	pop	r28
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <eeprom_read_byte_169>:
#include <avr/interrupt.h>
#include "eeprom169.h"

uint8_t eeprom_read_byte_169(const uint16_t *addr)
{
    11b2:	fc 01       	movw	r30, r24
	cli();
    11b4:	f8 94       	cli
	/* Set up address register */
	EEAR = *addr;
    11b6:	80 81       	ld	r24, Z
    11b8:	91 81       	ldd	r25, Z+1	; 0x01
    11ba:	92 bd       	out	0x22, r25	; 34
    11bc:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    11be:	f8 9a       	sbi	0x1f, 0	; 31
	sei();
    11c0:	78 94       	sei
	/* Return data from Data Register */
	return EEDR;
    11c2:	80 b5       	in	r24, 0x20	; 32
}
    11c4:	99 27       	eor	r25, r25
    11c6:	08 95       	ret

000011c8 <eeprom_write_byte_169>:

void eeprom_write_byte_169(const uint16_t *addr, uint8_t val) 
{
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	ec 01       	movw	r28, r24
    11d0:	16 2f       	mov	r17, r22
	if(eeprom_read_byte_169(addr) == val) // Compare stored value with new value for match
    11d2:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    11d6:	81 17       	cp	r24, r17
    11d8:	59 f0       	breq	.+22     	; 0x11f0 <eeprom_write_byte_169+0x28>
		return; // Don't re-write the same value and waste EEPROM life

	cli();
    11da:	f8 94       	cli
	/* Set up address and Data Registers */
	EEAR = *addr;
    11dc:	88 81       	ld	r24, Y
    11de:	99 81       	ldd	r25, Y+1	; 0x01
    11e0:	92 bd       	out	0x22, r25	; 34
    11e2:	81 bd       	out	0x21, r24	; 33
	EEDR = val;
    11e4:	10 bd       	out	0x20, r17	; 32
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
    11e6:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
    11e8:	f9 9a       	sbi	0x1f, 1	; 31
	sei();
    11ea:	78 94       	sei
	/* Wait for completion */
	while(EECR & (1<<EEWE));
    11ec:	f9 99       	sbic	0x1f, 1	; 31
    11ee:	fe cf       	rjmp	.-4      	; 0x11ec <eeprom_write_byte_169+0x24>
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	08 95       	ret

000011f8 <USART_Init>:
*   Purpose :       Initialize the USART
*
*****************************************************************************/
void USART_Init(unsigned int baudrate)
{
    11f8:	9c 01       	movw	r18, r24
    // Set baud rate
    UBRRH = (unsigned char)(baudrate>>8);
    11fa:	83 2f       	mov	r24, r19
    11fc:	99 27       	eor	r25, r25
    11fe:	80 93 c5 00 	sts	0x00C5, r24
    UBRRL = (unsigned char)(baudrate);
    1202:	20 93 c4 00 	sts	0x00C4, r18

    // Double speed
	UCSRA = (USART_DOUBLESPEED << U2X);
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	80 93 c0 00 	sts	0x00C0, r24

    // Enable recieve complete interrupt
	UCSRB = (1 << RXCIE);
    120c:	80 e8       	ldi	r24, 0x80	; 128
    120e:	80 93 c1 00 	sts	0x00C1, r24
	 
    // Async. mode, 8N1
    UCSRC = (3 << UCSZ0);
    1212:	86 e0       	ldi	r24, 0x06	; 6
    1214:	80 93 c2 00 	sts	0x00C2, r24
	 
	 // Initalise ringbuffer
	BUFF_InitialiseBuffer();
    1218:	0e 94 8f 0b 	call	0x171e <BUFF_InitialiseBuffer>
    121c:	08 95       	ret

0000121e <USART_Tx>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_Tx(char data)
{
    121e:	98 2f       	mov	r25, r24
    while (!(UCSRA & (1<<UDRE)));
    1220:	80 91 c0 00 	lds	r24, 0x00C0
    1224:	85 ff       	sbrs	r24, 5
    1226:	fc cf       	rjmp	.-8      	; 0x1220 <USART_Tx+0x2>
    UDR = data;
    1228:	90 93 c6 00 	sts	0x00C6, r25
    122c:	08 95       	ret

0000122e <USART_TxString>:
}

/*****************************************************************************
*
*   Function name : Usart_Tx
*
*   Returns :       None
*
*   Parameters :    char data: byte to send
*
*   Purpose :       Send one byte through the USART
*
*****************************************************************************/
void USART_TxString(char *data)
{
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	ec 01       	movw	r28, r24
	while (*data != '\0')
		USART_Tx(*data++);
    1234:	88 81       	ld	r24, Y
    1236:	88 23       	and	r24, r24
    1238:	31 f0       	breq	.+12     	; 0x1246 <USART_TxString+0x18>
    123a:	89 91       	ld	r24, Y+
    123c:	0e 94 0f 09 	call	0x121e <USART_Tx>
    1240:	88 81       	ld	r24, Y
    1242:	88 23       	and	r24, r24
    1244:	d1 f7       	brne	.-12     	; 0x123a <USART_TxString+0xc>
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <USART_Rx>:
}

/*****************************************************************************
*
*   Function name : Usart_Rx
*
*   Returns :       char: byte received
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART
*
*****************************************************************************/
char USART_Rx(void)
{
    while (!(BuffElements) && !(TimeOut)) {};
    124c:	80 91 d1 02 	lds	r24, 0x02D1
    1250:	88 23       	and	r24, r24
    1252:	21 f4       	brne	.+8      	; 0x125c <USART_Rx+0x10>
    1254:	80 91 28 01 	lds	r24, 0x0128
    1258:	88 23       	and	r24, r24
    125a:	c1 f3       	breq	.-16     	; 0x124c <USART_Rx>
    return BUFF_GetBuffByte();
    125c:	0e 94 c5 0b 	call	0x178a <BUFF_GetBuffByte>
}
    1260:	99 27       	eor	r25, r25
    1262:	08 95       	ret

00001264 <__vector_13>:

/*****************************************************************************
*
*   Function name : Usart_Rx Interrupt
*
*   Returns :       N/A
*
*   Parameters :    None
*
*   Purpose :       Receives one byte from the USART and stores it into the buffer
*
*****************************************************************************/

ISR(USART0_RX_vect, ISR_BLOCK)
{
    1264:	1f 92       	push	r1
    1266:	0f 92       	push	r0
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	0f 92       	push	r0
    126c:	11 24       	eor	r1, r1
    126e:	2f 93       	push	r18
    1270:	3f 93       	push	r19
    1272:	4f 93       	push	r20
    1274:	5f 93       	push	r21
    1276:	6f 93       	push	r22
    1278:	7f 93       	push	r23
    127a:	8f 93       	push	r24
    127c:	9f 93       	push	r25
    127e:	af 93       	push	r26
    1280:	bf 93       	push	r27
    1282:	ef 93       	push	r30
    1284:	ff 93       	push	r31
	BUFF_StoreBuffByte(UDR);
    1286:	80 91 c6 00 	lds	r24, 0x00C6
    128a:	0e 94 9c 0b 	call	0x1738 <BUFF_StoreBuffByte>
    128e:	ff 91       	pop	r31
    1290:	ef 91       	pop	r30
    1292:	bf 91       	pop	r27
    1294:	af 91       	pop	r26
    1296:	9f 91       	pop	r25
    1298:	8f 91       	pop	r24
    129a:	7f 91       	pop	r23
    129c:	6f 91       	pop	r22
    129e:	5f 91       	pop	r21
    12a0:	4f 91       	pop	r20
    12a2:	3f 91       	pop	r19
    12a4:	2f 91       	pop	r18
    12a6:	0f 90       	pop	r0
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	0f 90       	pop	r0
    12ac:	1f 90       	pop	r1
    12ae:	18 95       	reti

000012b0 <SPI_SPIInit>:
// ======================================================================================

void SPI_SPIInit(void)
{
	PRR &= ~(1 << PRSPI);              // Enable the SPI system by clearing the power save register SPI disable bit
    12b0:	80 91 64 00 	lds	r24, 0x0064
    12b4:	8b 7f       	andi	r24, 0xFB	; 251
    12b6:	80 93 64 00 	sts	0x0064, r24

	// Master, Sample falling edge (setup rising), Fosc/2 speed (8Mhz/2 = 4MHz)
	SPSR = (1 << SPI2X);
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	8d bd       	out	0x2d, r24	; 45
	SPCR = ((1 << SPE) | (1 << MSTR) | (1 << CPHA) | (1 << CPOL));
    12be:	8c e5       	ldi	r24, 0x5C	; 92
    12c0:	8c bd       	out	0x2c, r24	; 44
    12c2:	08 95       	ret

000012c4 <SPI_SPITransmit>:
}

uint8_t SPI_SPITransmit(uint8_t Data)
{
	SPDR = Data;                       // Loading a byte into the register starts the transmission
    12c4:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));    // Wait until transmission completed
    12c6:	0d b4       	in	r0, 0x2d	; 45
    12c8:	07 fe       	sbrs	r0, 7
    12ca:	fd cf       	rjmp	.-6      	; 0x12c6 <SPI_SPITransmit+0x2>
	return SPDR;
    12cc:	8e b5       	in	r24, 0x2e	; 46
}
    12ce:	99 27       	eor	r25, r25
    12d0:	08 95       	ret

000012d2 <SPI_SPITransmitWord>:

uint8_t SPI_SPITransmitWord(uint16_t Data)
{
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	8c 01       	movw	r16, r24
	SPI_SPITransmit((uint8_t)(Data >> 8));
    12d8:	81 2f       	mov	r24, r17
    12da:	99 27       	eor	r25, r25
    12dc:	0e 94 62 09 	call	0x12c4 <SPI_SPITransmit>
	return SPI_SPITransmit((uint8_t)Data);
    12e0:	80 2f       	mov	r24, r16
    12e2:	0e 94 62 09 	call	0x12c4 <SPI_SPITransmit>
}
    12e6:	99 27       	eor	r25, r25
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	08 95       	ret

000012ee <__vector_17>:
 *  have to stop the timer tick.
 *  For all modes the USIDR contents are stored and flags are updated.
 */
ISR(USI_OVERFLOW_vect, ISR_BLOCK)
{
    12ee:	1f 92       	push	r1
    12f0:	0f 92       	push	r0
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	0f 92       	push	r0
    12f6:	11 24       	eor	r1, r1
    12f8:	8f 93       	push	r24
	// Master must now disable the compare match interrupt
	// to prevent more USI counter clocks.
	TIMSK0 &= ~(1<<OCIE0A);
    12fa:	80 91 6e 00 	lds	r24, 0x006E
    12fe:	8d 7f       	andi	r24, 0xFD	; 253
    1300:	80 93 6e 00 	sts	0x006E, r24
	
	// Update flags and clear USI counter
	USISR = (1<<USIOIF);
    1304:	80 e4       	ldi	r24, 0x40	; 64
    1306:	80 93 b9 00 	sts	0x00B9, r24
	TransferComplete = 1;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	80 93 81 02 	sts	0x0281, r24

	// Copy USIDR to buffer to prevent overwrite on next transfer.
	storedUSIDR = USIDR;
    1310:	80 91 ba 00 	lds	r24, 0x00BA
    1314:	80 93 82 02 	sts	0x0282, r24
    1318:	8f 91       	pop	r24
    131a:	0f 90       	pop	r0
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	0f 90       	pop	r0
    1320:	1f 90       	pop	r1
    1322:	18 95       	reti

00001324 <USI_SPISetSpeed>:
}



/*! \brief  Initialize USI as SPI master.
 *
 *  This function sets up all pin directions and module configurations.
 *  Use this function initially or when changing from slave to master mode.
 *  Note that the stored USIDR value is cleared.
 *
 */
void USI_SPIInitMaster(char Freq)
{
	// Configure port directions.
 	USI_DIR_REG |= (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN);  // Outputs.
	USI_DIR_REG &= ~(1<<USI_DATAIN_PIN);                       // Inputs.
	USI_OUT_REG |= (1<<USI_DATAIN_PIN);                        // Pull-ups.
	USI_OUT_REG &= ~(1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN); // Pull-ups.
	
	// Configure USI to 3-wire master mode with overflow interrupt.
	USICR = USI_CONTROL_REG_FLAGS;

	// Set the compare and prescaler for the requested frequency:
	USI_SPISetSpeed(Freq);
	
	// Init driver status register.
	TransferComplete = 0;
	
	storedUSIDR = 0;
}

void USI_SPIOff( void )
{
	USI_DIR_REG &= ~((1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN));                        // Inputs.
	USI_OUT_REG &= ~((1<<USI_DATAIN_PIN)  | (1<<USI_DATAOUT_PIN) | (1<<USI_CLOCK_PIN)); // Pull-ups.
	DDRF  &= ~(1 << 6);
	PORTF &= ~(1 << 6);
	
	USI_STOPUSITIMER();
}

/*! \brief  Put one byte on bus.
 *
 *  Use this function like you would write to the SPDR register in the native SPI module.
 *  Calling this function in master mode starts a transfer, while in slave mode, a
 *  byte will be prepared for the next transfer initiated by the master device.
 *  If a transfer is in progress, this function will set the write collision flag
 *  and return without altering the data registers.
 *
 *  \returns  0 if a write collision occurred, 1 otherwise.
 */
uint8_t USI_SPITransmit( unsigned char val )
{
	// Reinit flags.
	TransferComplete = 0;

	// Put data in USI data register.
	USIDR = val;
	
	TIFR0  |= (1<<OCF0A);  // Clear compare match flag.
	TIMSK0 |= (1<<OCIE0A); // Enable compare match interrupt.

	// Clear the timer 0 value
	TCNT0 = 0;

	while (!(TransferComplete));

	return storedUSIDR;
}

uint8_t USI_SPITransmitWord( unsigned int val )
{
	USI_SPITransmit((uint8_t)(val >> 8));
	return USI_SPITransmit((uint8_t)val);
}

void USI_SPIToggleClock(void)
{
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);
	USICR |= (1 << USITC); // Toggle the clock pin
	MAIN_Delay1MS(1);	
}

void USI_SPISetSpeed(uint8_t Freq)
{
    1324:	48 2f       	mov	r20, r24
	for (uint8_t MatchIndex = 0; MatchIndex < USI_PRESET_SPEEDS; MatchIndex++)
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	6c e7       	ldi	r22, 0x7C	; 124
    132a:	73 e0       	ldi	r23, 0x03	; 3
    132c:	9b 01       	movw	r18, r22
    132e:	21 50       	subi	r18, 0x01	; 1
    1330:	30 40       	sbci	r19, 0x00	; 0
	{
		if ((pgm_read_byte(&USIPSValues[MatchIndex][0]) == Freq) || (MatchIndex == (USI_PRESET_SPEEDS - 1)))
    1332:	f9 01       	movw	r30, r18
    1334:	84 91       	lpm	r24, Z
    1336:	84 17       	cp	r24, r20
    1338:	11 f0       	breq	.+4      	; 0x133e <USI_SPISetSpeed+0x1a>
    133a:	93 30       	cpi	r25, 0x03	; 3
    133c:	31 f4       	brne	.+12     	; 0x134a <USI_SPISetSpeed+0x26>
		{
			// Init Output Compare Register.
			OCR0A = pgm_read_byte(&USIPSValues[MatchIndex][1]);
    133e:	fb 01       	movw	r30, r22
    1340:	84 91       	lpm	r24, Z
    1342:	87 bd       	out	0x27, r24	; 39

			// Enable 'Clear Timer on Compare match' and set prescaler, which starts the timer
			TCCR0A = ((1<<WGM01) | TC0_PS_1);
    1344:	89 e0       	ldi	r24, 0x09	; 9
    1346:	84 bd       	out	0x24, r24	; 36
				
			return;
    1348:	08 95       	ret
    134a:	9f 5f       	subi	r25, 0xFF	; 255
    134c:	2e 5f       	subi	r18, 0xFE	; 254
    134e:	3f 4f       	sbci	r19, 0xFF	; 255
    1350:	6e 5f       	subi	r22, 0xFE	; 254
    1352:	7f 4f       	sbci	r23, 0xFF	; 255
    1354:	94 30       	cpi	r25, 0x04	; 4
    1356:	68 f3       	brcs	.-38     	; 0x1332 <USI_SPISetSpeed+0xe>
    1358:	08 95       	ret

0000135a <USI_SPIInitMaster>:
    135a:	9d b1       	in	r25, 0x0d	; 13
    135c:	90 65       	ori	r25, 0x50	; 80
    135e:	9d b9       	out	0x0d, r25	; 13
    1360:	6d 98       	cbi	0x0d, 5	; 13
    1362:	75 9a       	sbi	0x0e, 5	; 14
    1364:	76 98       	cbi	0x0e, 6	; 14
    1366:	9a e5       	ldi	r25, 0x5A	; 90
    1368:	90 93 b8 00 	sts	0x00B8, r25
    136c:	0e 94 92 09 	call	0x1324 <USI_SPISetSpeed>
    1370:	10 92 81 02 	sts	0x0281, r1
    1374:	10 92 82 02 	sts	0x0282, r1
    1378:	08 95       	ret

0000137a <USI_SPIOff>:
    137a:	8d b1       	in	r24, 0x0d	; 13
    137c:	8f 7a       	andi	r24, 0xAF	; 175
    137e:	8d b9       	out	0x0d, r24	; 13
    1380:	8e b1       	in	r24, 0x0e	; 14
    1382:	8f 78       	andi	r24, 0x8F	; 143
    1384:	8e b9       	out	0x0e, r24	; 14
    1386:	86 98       	cbi	0x10, 6	; 16
    1388:	8e 98       	cbi	0x11, 6	; 17
    138a:	14 bc       	out	0x24, r1	; 36
    138c:	08 95       	ret

0000138e <USI_SPITransmit>:
    138e:	10 92 81 02 	sts	0x0281, r1
    1392:	80 93 ba 00 	sts	0x00BA, r24
    1396:	a9 9a       	sbi	0x15, 1	; 21
    1398:	80 91 6e 00 	lds	r24, 0x006E
    139c:	82 60       	ori	r24, 0x02	; 2
    139e:	80 93 6e 00 	sts	0x006E, r24
    13a2:	16 bc       	out	0x26, r1	; 38
    13a4:	80 91 81 02 	lds	r24, 0x0281
    13a8:	88 23       	and	r24, r24
    13aa:	e1 f3       	breq	.-8      	; 0x13a4 <USI_SPITransmit+0x16>
    13ac:	80 91 82 02 	lds	r24, 0x0282
    13b0:	99 27       	eor	r25, r25
    13b2:	08 95       	ret

000013b4 <USI_SPITransmitWord>:
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	8c 01       	movw	r16, r24
    13ba:	81 2f       	mov	r24, r17
    13bc:	99 27       	eor	r25, r25
    13be:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    13c2:	80 2f       	mov	r24, r16
    13c4:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    13c8:	99 27       	eor	r25, r25
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	08 95       	ret

000013d0 <USI_SPIToggleClock>:
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	0e 94 19 03 	call	0x632 <MAIN_Delay1MS>
    13d6:	80 91 b8 00 	lds	r24, 0x00B8
    13da:	81 60       	ori	r24, 0x01	; 1
    13dc:	80 93 b8 00 	sts	0x00B8, r24
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	0e 94 19 03 	call	0x632 <MAIN_Delay1MS>
    13e6:	80 91 b8 00 	lds	r24, 0x00B8
    13ea:	81 60       	ori	r24, 0x01	; 1
    13ec:	80 93 b8 00 	sts	0x00B8, r24
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	0e 94 19 03 	call	0x632 <MAIN_Delay1MS>
    13f6:	08 95       	ret

000013f8 <DF_EnableDataflash>:
	while (DF_BUSY());
}

void DF_EnableDataflash(uint8_t Enabled)
{
    13f8:	90 91 83 02 	lds	r25, 0x0283
	if (Enabled == TRUE)
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	31 f4       	brne	.+12     	; 0x140c <DF_EnableDataflash+0x14>
	{
		if (UseExernalDF == TRUE)
    1400:	91 30       	cpi	r25, 0x01	; 1
    1402:	11 f4       	brne	.+4      	; 0x1408 <DF_EnableDataflash+0x10>
		  MAIN_ResetCSLine(MAIN_RESETCS_EXTDFACTIVE);
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	05 c0       	rjmp	.+10     	; 0x1412 <DF_EnableDataflash+0x1a>
		else
		  PORTB &= ~(1 << 0);
    1408:	28 98       	cbi	0x05, 0	; 5
    140a:	08 95       	ret
	}
	else
	{
		if (UseExernalDF == TRUE)
    140c:	91 30       	cpi	r25, 0x01	; 1
    140e:	21 f4       	brne	.+8      	; 0x1418 <DF_EnableDataflash+0x20>
		  MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE);
    1410:	89 2f       	mov	r24, r25
    1412:	0e 94 2b 03 	call	0x656 <MAIN_ResetCSLine>
    1416:	08 95       	ret
		else
		  PORTB |= (1 << 0);
    1418:	28 9a       	sbi	0x05, 0	; 5
    141a:	08 95       	ret

0000141c <DF_ReadBufferByte>:
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	8c 01       	movw	r16, r24
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    1428:	00 00       	nop
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    1430:	e0 91 00 01 	lds	r30, 0x0100
    1434:	f0 91 01 01 	lds	r31, 0x0101
    1438:	84 e5       	ldi	r24, 0x54	; 84
    143a:	09 95       	icall
    143c:	81 2f       	mov	r24, r17
    143e:	99 27       	eor	r25, r25
    1440:	e0 91 00 01 	lds	r30, 0x0100
    1444:	f0 91 01 01 	lds	r31, 0x0101
    1448:	09 95       	icall
    144a:	e0 91 00 01 	lds	r30, 0x0100
    144e:	f0 91 01 01 	lds	r31, 0x0101
    1452:	80 2f       	mov	r24, r16
    1454:	09 95       	icall
    1456:	e0 91 00 01 	lds	r30, 0x0100
    145a:	f0 91 01 01 	lds	r31, 0x0101
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	09 95       	icall
    1462:	e0 91 00 01 	lds	r30, 0x0100
    1466:	f0 91 01 01 	lds	r31, 0x0101
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	09 95       	icall
    146e:	99 27       	eor	r25, r25
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	08 95       	ret

00001476 <DF_ContinuousReadEnable>:
    1476:	ef 92       	push	r14
    1478:	ff 92       	push	r15
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	8c 01       	movw	r16, r24
    1480:	7b 01       	movw	r14, r22
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    1488:	00 00       	nop
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    1490:	e0 91 00 01 	lds	r30, 0x0100
    1494:	f0 91 01 01 	lds	r31, 0x0101
    1498:	88 e6       	ldi	r24, 0x68	; 104
    149a:	09 95       	icall
    149c:	8a b5       	in	r24, 0x2a	; 42
    149e:	98 01       	movw	r18, r16
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <DF_ContinuousReadEnable+0x30>
    14a2:	36 95       	lsr	r19
    14a4:	27 95       	ror	r18
    14a6:	8a 95       	dec	r24
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <DF_ContinuousReadEnable+0x2c>
    14aa:	c9 01       	movw	r24, r18
    14ac:	e0 91 00 01 	lds	r30, 0x0100
    14b0:	f0 91 01 01 	lds	r31, 0x0101
    14b4:	09 95       	icall
    14b6:	8b b5       	in	r24, 0x2b	; 43
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <DF_ContinuousReadEnable+0x48>
    14ba:	00 0f       	add	r16, r16
    14bc:	11 1f       	adc	r17, r17
    14be:	8a 95       	dec	r24
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <DF_ContinuousReadEnable+0x44>
    14c2:	8f 2d       	mov	r24, r15
    14c4:	99 27       	eor	r25, r25
    14c6:	e0 91 00 01 	lds	r30, 0x0100
    14ca:	f0 91 01 01 	lds	r31, 0x0101
    14ce:	80 0f       	add	r24, r16
    14d0:	09 95       	icall
    14d2:	e0 91 00 01 	lds	r30, 0x0100
    14d6:	f0 91 01 01 	lds	r31, 0x0101
    14da:	8e 2d       	mov	r24, r14
    14dc:	09 95       	icall
    14de:	03 e0       	ldi	r16, 0x03	; 3
    14e0:	e0 91 00 01 	lds	r30, 0x0100
    14e4:	f0 91 01 01 	lds	r31, 0x0101
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	09 95       	icall
    14ec:	01 50       	subi	r16, 0x01	; 1
    14ee:	07 ff       	sbrs	r16, 7
    14f0:	f7 cf       	rjmp	.-18     	; 0x14e0 <DF_ContinuousReadEnable+0x6a>
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	08 95       	ret

000014fc <DF_BufferWriteEnable>:
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	8c 01       	movw	r16, r24
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    1508:	00 00       	nop
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    1510:	e0 91 00 01 	lds	r30, 0x0100
    1514:	f0 91 01 01 	lds	r31, 0x0101
    1518:	84 e8       	ldi	r24, 0x84	; 132
    151a:	09 95       	icall
    151c:	e0 91 00 01 	lds	r30, 0x0100
    1520:	f0 91 01 01 	lds	r31, 0x0101
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	09 95       	icall
    1528:	81 2f       	mov	r24, r17
    152a:	99 27       	eor	r25, r25
    152c:	e0 91 00 01 	lds	r30, 0x0100
    1530:	f0 91 01 01 	lds	r31, 0x0101
    1534:	09 95       	icall
    1536:	e0 91 00 01 	lds	r30, 0x0100
    153a:	f0 91 01 01 	lds	r31, 0x0101
    153e:	80 2f       	mov	r24, r16
    1540:	09 95       	icall
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	08 95       	ret

00001548 <DF_GetChipCharacteristics>:
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    154e:	00 00       	nop
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    1556:	e0 91 00 01 	lds	r30, 0x0100
    155a:	f0 91 01 01 	lds	r31, 0x0101
    155e:	87 e5       	ldi	r24, 0x57	; 87
    1560:	09 95       	icall
    1562:	e0 91 00 01 	lds	r30, 0x0100
    1566:	f0 91 01 01 	lds	r31, 0x0101
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	09 95       	icall
    156e:	68 2f       	mov	r22, r24
    1570:	77 27       	eor	r23, r23
    1572:	cb 01       	movw	r24, r22
    1574:	88 73       	andi	r24, 0x38	; 56
    1576:	90 70       	andi	r25, 0x00	; 0
    1578:	33 e0       	ldi	r19, 0x03	; 3
    157a:	95 95       	asr	r25
    157c:	87 95       	ror	r24
    157e:	3a 95       	dec	r19
    1580:	e1 f7       	brne	.-8      	; 0x157a <DF_GetChipCharacteristics+0x32>
    1582:	99 27       	eor	r25, r25
    1584:	fc 01       	movw	r30, r24
    1586:	ed 54       	subi	r30, 0x4D	; 77
    1588:	fc 4f       	sbci	r31, 0xFC	; 252
    158a:	44 91       	lpm	r20, Z
    158c:	40 93 86 02 	sts	0x0286, r20
    1590:	9c 01       	movw	r18, r24
    1592:	28 0f       	add	r18, r24
    1594:	39 1f       	adc	r19, r25
    1596:	f9 01       	movw	r30, r18
    1598:	ed 55       	subi	r30, 0x5D	; 93
    159a:	fc 4f       	sbci	r31, 0xFC	; 252
    159c:	85 91       	lpm	r24, Z+
    159e:	94 91       	lpm	r25, Z
    15a0:	90 93 88 02 	sts	0x0288, r25
    15a4:	80 93 87 02 	sts	0x0287, r24
    15a8:	f9 01       	movw	r30, r18
    15aa:	ed 56       	subi	r30, 0x6D	; 109
    15ac:	fc 4f       	sbci	r31, 0xFC	; 252
    15ae:	85 91       	lpm	r24, Z+
    15b0:	94 91       	lpm	r25, Z
    15b2:	90 93 8a 02 	sts	0x028A, r25
    15b6:	80 93 89 02 	sts	0x0289, r24
    15ba:	80 e1       	ldi	r24, 0x10	; 16
    15bc:	84 1b       	sub	r24, r20
    15be:	8a bd       	out	0x2a, r24	; 42
    15c0:	48 50       	subi	r20, 0x08	; 8
    15c2:	4b bd       	out	0x2b, r20	; 43
    15c4:	cb 01       	movw	r24, r22
    15c6:	08 95       	ret

000015c8 <DF_EraseBlock>:
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	8c 01       	movw	r16, r24
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    15d4:	00 00       	nop
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    15dc:	e0 91 00 01 	lds	r30, 0x0100
    15e0:	f0 91 01 01 	lds	r31, 0x0101
    15e4:	80 e5       	ldi	r24, 0x50	; 80
    15e6:	09 95       	icall
    15e8:	81 2f       	mov	r24, r17
    15ea:	99 27       	eor	r25, r25
    15ec:	e0 91 00 01 	lds	r30, 0x0100
    15f0:	f0 91 01 01 	lds	r31, 0x0101
    15f4:	09 95       	icall
    15f6:	e0 91 00 01 	lds	r30, 0x0100
    15fa:	f0 91 01 01 	lds	r31, 0x0101
    15fe:	80 2f       	mov	r24, r16
    1600:	09 95       	icall
    1602:	e0 91 00 01 	lds	r30, 0x0100
    1606:	f0 91 01 01 	lds	r31, 0x0101
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	09 95       	icall
    160e:	0e 94 a4 0a 	call	0x1548 <DF_GetChipCharacteristics>
    1612:	88 23       	and	r24, r24
    1614:	e4 f7       	brge	.-8      	; 0x160e <DF_EraseBlock+0x46>
    1616:	1f 91       	pop	r17
    1618:	0f 91       	pop	r16
    161a:	08 95       	ret

0000161c <DF_CopyFlashPageToBuffer>:
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	8c 01       	movw	r16, r24
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    1628:	00 00       	nop
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    1630:	e0 91 00 01 	lds	r30, 0x0100
    1634:	f0 91 01 01 	lds	r31, 0x0101
    1638:	83 e5       	ldi	r24, 0x53	; 83
    163a:	09 95       	icall
    163c:	8a b5       	in	r24, 0x2a	; 42
    163e:	98 01       	movw	r18, r16
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DF_CopyFlashPageToBuffer+0x2a>
    1642:	36 95       	lsr	r19
    1644:	27 95       	ror	r18
    1646:	8a 95       	dec	r24
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <DF_CopyFlashPageToBuffer+0x26>
    164a:	c9 01       	movw	r24, r18
    164c:	e0 91 00 01 	lds	r30, 0x0100
    1650:	f0 91 01 01 	lds	r31, 0x0101
    1654:	09 95       	icall
    1656:	8b b5       	in	r24, 0x2b	; 43
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DF_CopyFlashPageToBuffer+0x42>
    165a:	00 0f       	add	r16, r16
    165c:	11 1f       	adc	r17, r17
    165e:	8a 95       	dec	r24
    1660:	e2 f7       	brpl	.-8      	; 0x165a <DF_CopyFlashPageToBuffer+0x3e>
    1662:	e0 91 00 01 	lds	r30, 0x0100
    1666:	f0 91 01 01 	lds	r31, 0x0101
    166a:	80 2f       	mov	r24, r16
    166c:	09 95       	icall
    166e:	e0 91 00 01 	lds	r30, 0x0100
    1672:	f0 91 01 01 	lds	r31, 0x0101
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	09 95       	icall
    167a:	0e 94 a4 0a 	call	0x1548 <DF_GetChipCharacteristics>
    167e:	88 23       	and	r24, r24
    1680:	e4 f7       	brge	.-8      	; 0x167a <DF_CopyFlashPageToBuffer+0x5e>
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	08 95       	ret

00001688 <DF_CopyBufferToFlashPage>:
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	8c 01       	movw	r16, r24
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    1694:	00 00       	nop
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    169c:	e0 91 00 01 	lds	r30, 0x0100
    16a0:	f0 91 01 01 	lds	r31, 0x0101
    16a4:	83 e8       	ldi	r24, 0x83	; 131
    16a6:	09 95       	icall
    16a8:	8a b5       	in	r24, 0x2a	; 42
    16aa:	98 01       	movw	r18, r16
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DF_CopyBufferToFlashPage+0x2a>
    16ae:	36 95       	lsr	r19
    16b0:	27 95       	ror	r18
    16b2:	8a 95       	dec	r24
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DF_CopyBufferToFlashPage+0x26>
    16b6:	c9 01       	movw	r24, r18
    16b8:	e0 91 00 01 	lds	r30, 0x0100
    16bc:	f0 91 01 01 	lds	r31, 0x0101
    16c0:	09 95       	icall
    16c2:	8b b5       	in	r24, 0x2b	; 43
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <DF_CopyBufferToFlashPage+0x42>
    16c6:	00 0f       	add	r16, r16
    16c8:	11 1f       	adc	r17, r17
    16ca:	8a 95       	dec	r24
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <DF_CopyBufferToFlashPage+0x3e>
    16ce:	e0 91 00 01 	lds	r30, 0x0100
    16d2:	f0 91 01 01 	lds	r31, 0x0101
    16d6:	80 2f       	mov	r24, r16
    16d8:	09 95       	icall
    16da:	e0 91 00 01 	lds	r30, 0x0100
    16de:	f0 91 01 01 	lds	r31, 0x0101
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	09 95       	icall
    16e6:	0e 94 a4 0a 	call	0x1548 <DF_GetChipCharacteristics>
    16ea:	88 23       	and	r24, r24
    16ec:	e4 f7       	brge	.-8      	; 0x16e6 <DF_CopyBufferToFlashPage+0x5e>
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	08 95       	ret

000016f4 <DF_CheckCorrectOnboardChip>:
    16f4:	0e 94 a4 0a 	call	0x1548 <DF_GetChipCharacteristics>
    16f8:	80 91 86 02 	lds	r24, 0x0286
    16fc:	89 30       	cpi	r24, 0x09	; 9
    16fe:	61 f0       	breq	.+24     	; 0x1718 <DF_CheckCorrectOnboardChip+0x24>
    1700:	80 91 64 00 	lds	r24, 0x0064
    1704:	84 60       	ori	r24, 0x04	; 4
    1706:	80 93 64 00 	sts	0x0064, r24
    170a:	83 e8       	ldi	r24, 0x83	; 131
    170c:	93 e0       	ldi	r25, 0x03	; 3
    170e:	0e 94 80 03 	call	0x700 <MAIN_ShowError>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	08 95       	ret
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	08 95       	ret

0000171e <BUFF_InitialiseBuffer>:

// Routines:
void BUFF_InitialiseBuffer(void)
{
	StoreLoc    = (BuffType*)&RingBuffer[0]; // Set up the IN pointer to the start of the buffer
    171e:	8d e8       	ldi	r24, 0x8D	; 141
    1720:	92 e0       	ldi	r25, 0x02	; 2
    1722:	90 93 ce 02 	sts	0x02CE, r25
    1726:	80 93 cd 02 	sts	0x02CD, r24
	RetrieveLoc = (BuffType*)&RingBuffer[0]; // Set up the OUT pointer to the start of the buffer
    172a:	90 93 d0 02 	sts	0x02D0, r25
    172e:	80 93 cf 02 	sts	0x02CF, r24

	BuffElements = 0;                     // Reset the buffer elements counter
    1732:	10 92 d1 02 	sts	0x02D1, r1
    1736:	08 95       	ret

00001738 <BUFF_StoreBuffByte>:
}

void BUFF_StoreBuffByte(BuffType DataToStore)
{
    1738:	98 2f       	mov	r25, r24
	if (BuffElements == BuffLen)          // Buffer full
    173a:	80 91 d1 02 	lds	r24, 0x02D1
    173e:	80 34       	cpi	r24, 0x40	; 64
    1740:	29 f4       	brne	.+10     	; 0x174c <BUFF_StoreBuffByte+0x14>
	{
		MAIN_ShowError(PSTR("BUFF OVERFLOW"));
    1742:	8b eb       	ldi	r24, 0xBB	; 187
    1744:	93 e0       	ldi	r25, 0x03	; 3
    1746:	0e 94 80 03 	call	0x700 <MAIN_ShowError>
		return;
    174a:	08 95       	ret
	}
		
	*StoreLoc = DataToStore;              // Store the data
    174c:	e0 91 cd 02 	lds	r30, 0x02CD
    1750:	f0 91 ce 02 	lds	r31, 0x02CE
    1754:	90 83       	st	Z, r25

	StoreLoc++;                           // Increment the IN pointer to the next element
    1756:	40 91 cd 02 	lds	r20, 0x02CD
    175a:	50 91 ce 02 	lds	r21, 0x02CE
    175e:	9a 01       	movw	r18, r20
    1760:	2f 5f       	subi	r18, 0xFF	; 255
    1762:	3f 4f       	sbci	r19, 0xFF	; 255
    1764:	30 93 ce 02 	sts	0x02CE, r19
    1768:	20 93 cd 02 	sts	0x02CD, r18
	BuffElements++;                       // Increment the total elements variable
    176c:	80 91 d1 02 	lds	r24, 0x02D1
    1770:	8f 5f       	subi	r24, 0xFF	; 255
    1772:	80 93 d1 02 	sts	0x02D1, r24

	if (StoreLoc == (BuffType*)&RingBuffer[BuffLen])
    1776:	2d 5c       	subi	r18, 0xCD	; 205
    1778:	32 40       	sbci	r19, 0x02	; 2
    177a:	31 f4       	brne	.+12     	; 0x1788 <BUFF_StoreBuffByte+0x50>
		StoreLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    177c:	4f 53       	subi	r20, 0x3F	; 63
    177e:	50 40       	sbci	r21, 0x00	; 0
    1780:	50 93 ce 02 	sts	0x02CE, r21
    1784:	40 93 cd 02 	sts	0x02CD, r20
    1788:	08 95       	ret

0000178a <BUFF_GetBuffByte>:
}	

BuffType BUFF_GetBuffByte(void)
{
	if (!(BuffElements))                  // No elements in the buffer
    178a:	80 91 d1 02 	lds	r24, 0x02D1
    178e:	88 23       	and	r24, r24
    1790:	19 f4       	brne	.+6      	; 0x1798 <BUFF_GetBuffByte+0xe>
		return 0;
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	08 95       	ret

	BuffType RetrievedData = *RetrieveLoc; // Grab the stored byte into a temp variable
    1798:	20 91 cf 02 	lds	r18, 0x02CF
    179c:	30 91 d0 02 	lds	r19, 0x02D0
    17a0:	f9 01       	movw	r30, r18
    17a2:	91 91       	ld	r25, Z+

	RetrieveLoc++;                         // Increment the OUT pointer to the next element if flag set
    17a4:	f0 93 d0 02 	sts	0x02D0, r31
    17a8:	e0 93 cf 02 	sts	0x02CF, r30
	BuffElements--;                        // Decrement the total elements variable
    17ac:	80 91 d1 02 	lds	r24, 0x02D1
    17b0:	81 50       	subi	r24, 0x01	; 1
    17b2:	80 93 d1 02 	sts	0x02D1, r24
	
	if (RetrieveLoc == (BuffType*)&RingBuffer[BuffLen])
    17b6:	ed 5c       	subi	r30, 0xCD	; 205
    17b8:	f2 40       	sbci	r31, 0x02	; 2
    17ba:	31 f4       	brne	.+12     	; 0x17c8 <BUFF_GetBuffByte+0x3e>
		RetrieveLoc = (BuffType*)&RingBuffer[0]; // Wrap pointer if end of array reached
    17bc:	2f 53       	subi	r18, 0x3F	; 63
    17be:	30 40       	sbci	r19, 0x00	; 0
    17c0:	30 93 d0 02 	sts	0x02D0, r19
    17c4:	20 93 cf 02 	sts	0x02CF, r18
		
	return RetrievedData;                 // Return the retrieved data
    17c8:	89 2f       	mov	r24, r25
    17ca:	99 27       	eor	r25, r25
}
    17cc:	08 95       	ret

000017ce <__vector_9>:
// ======================================================================================

// Timeout = ((F_CPU / 64) / (65535 * TIMEOUT_TICKSBEFORETIMEOUT)) per second
ISR(TIMER1_OVF_vect, ISR_NOBLOCK)
{
    17ce:	78 94       	sei
    17d0:	1f 92       	push	r1
    17d2:	0f 92       	push	r0
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	0f 92       	push	r0
    17d8:	11 24       	eor	r1, r1
    17da:	8f 93       	push	r24
	if (Ticks++ == TIMEOUT_TICKSBEFORETIMEOUT)
    17dc:	80 91 29 01 	lds	r24, 0x0129
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	80 93 29 01 	sts	0x0129, r24
    17e6:	80 91 29 01 	lds	r24, 0x0129
    17ea:	87 30       	cpi	r24, 0x07	; 7
    17ec:	29 f4       	brne	.+10     	; 0x17f8 <__vector_9+0x2a>
	{
	   Ticks   = 0;
    17ee:	10 92 29 01 	sts	0x0129, r1
	   TimeOut = TRUE;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	80 93 28 01 	sts	0x0128, r24
    17f8:	8f 91       	pop	r24
    17fa:	0f 90       	pop	r0
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	0f 90       	pop	r0
    1800:	1f 90       	pop	r1
    1802:	18 95       	reti

00001804 <TIMEOUT_SetupTimeoutTimer>:
	}
}

// ======================================================================================

void TIMEOUT_SetupTimeoutTimer(void)
{
	TCCR1A = 0;
    1804:	10 92 80 00 	sts	0x0080, r1
	TIMEOUT_TIMER_OFF();
    1808:	10 92 81 00 	sts	0x0081, r1
    180c:	10 92 29 01 	sts	0x0129, r1
    1810:	10 92 85 00 	sts	0x0085, r1
    1814:	10 92 84 00 	sts	0x0084, r1
	TCCR1C = 0;
    1818:	10 92 82 00 	sts	0x0082, r1
	
	TIMSK1 = (1 << TOIE1); // Turn timer 1 overflow interrupt on
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	80 93 6f 00 	sts	0x006F, r24
    1822:	08 95       	ret

00001824 <PD_SetupDFAddressCounters>:
}

void PD_SetupDFAddressCounters(void)
{
	uint32_t StartAddress = CurrAddress;
    1824:	20 91 2b 01 	lds	r18, 0x012B
    1828:	30 91 2c 01 	lds	r19, 0x012C
    182c:	40 91 2d 01 	lds	r20, 0x012D
    1830:	50 91 2e 01 	lds	r21, 0x012E

	CurrPageAddress = 0;
    1834:	10 92 8c 02 	sts	0x028C, r1
    1838:	10 92 8b 02 	sts	0x028B, r1

	while (StartAddress > DataflashInfo.PageSize)      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DataflashInfo.PageSize;         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    183c:	80 91 87 02 	lds	r24, 0x0287
    1840:	90 91 88 02 	lds	r25, 0x0288
    1844:	aa 27       	eor	r26, r26
    1846:	bb 27       	eor	r27, r27
    1848:	82 17       	cp	r24, r18
    184a:	93 07       	cpc	r25, r19
    184c:	a4 07       	cpc	r26, r20
    184e:	b5 07       	cpc	r27, r21
    1850:	88 f4       	brcc	.+34     	; 0x1874 <PD_SetupDFAddressCounters+0x50>
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	28 1b       	sub	r18, r24
    1858:	39 0b       	sbc	r19, r25
    185a:	4a 0b       	sbc	r20, r26
    185c:	5b 0b       	sbc	r21, r27
    185e:	6f 5f       	subi	r22, 0xFF	; 255
    1860:	7f 4f       	sbci	r23, 0xFF	; 255
    1862:	82 17       	cp	r24, r18
    1864:	93 07       	cpc	r25, r19
    1866:	a4 07       	cpc	r26, r20
    1868:	b5 07       	cpc	r27, r21
    186a:	a8 f3       	brcs	.-22     	; 0x1856 <PD_SetupDFAddressCounters+0x32>
    186c:	70 93 8c 02 	sts	0x028C, r23
    1870:	60 93 8b 02 	sts	0x028B, r22
	}
	
	CurrBuffByte = (uint16_t)StartAddress;              // The buffer byte is the remainder
    1874:	30 93 85 02 	sts	0x0285, r19
    1878:	20 93 84 02 	sts	0x0284, r18
    187c:	08 95       	ret

0000187e <PD_StoreDataflashByte>:
}

void PD_StoreDataflashByte(uint8_t Data)
{
    187e:	cf 93       	push	r28
    1880:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DataflashInfo.PageSize)
    1882:	20 91 84 02 	lds	r18, 0x0284
    1886:	30 91 85 02 	lds	r19, 0x0285
    188a:	80 91 87 02 	lds	r24, 0x0287
    188e:	90 91 88 02 	lds	r25, 0x0288
    1892:	28 17       	cp	r18, r24
    1894:	39 07       	cpc	r19, r25
    1896:	a9 f4       	brne	.+42     	; 0x18c2 <PD_StoreDataflashByte+0x44>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    1898:	80 91 8b 02 	lds	r24, 0x028B
    189c:	90 91 8c 02 	lds	r25, 0x028C
    18a0:	9c 01       	movw	r18, r24
    18a2:	01 96       	adiw	r24, 0x01	; 1
    18a4:	90 93 8c 02 	sts	0x028C, r25
    18a8:	80 93 8b 02 	sts	0x028B, r24
    18ac:	c9 01       	movw	r24, r18
    18ae:	0e 94 44 0b 	call	0x1688 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 7e 0a 	call	0x14fc <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    18ba:	10 92 85 02 	sts	0x0285, r1
    18be:	10 92 84 02 	sts	0x0284, r1
	}
	
	USI_SPITransmit(Data);                                 // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    18c2:	8c 2f       	mov	r24, r28
    18c4:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
	CurrBuffByte++;
    18c8:	80 91 84 02 	lds	r24, 0x0284
    18cc:	90 91 85 02 	lds	r25, 0x0285
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	90 93 85 02 	sts	0x0285, r25
    18d6:	80 93 84 02 	sts	0x0284, r24
    18da:	cf 91       	pop	r28
    18dc:	08 95       	ret

000018de <PD_InterpretAVRISPPacket>:
    18de:	df 92       	push	r13
    18e0:	ef 92       	push	r14
    18e2:	ff 92       	push	r15
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	dd 24       	eor	r13, r13
    18ee:	80 91 34 01 	lds	r24, 0x0134
    18f2:	99 27       	eor	r25, r25
    18f4:	86 31       	cpi	r24, 0x16	; 22
    18f6:	91 05       	cpc	r25, r1
    18f8:	09 f4       	brne	.+2      	; 0x18fc <PD_InterpretAVRISPPacket+0x1e>
    18fa:	00 c1       	rjmp	.+512    	; 0x1afc <PD_InterpretAVRISPPacket+0x21e>
    18fc:	87 31       	cpi	r24, 0x17	; 23
    18fe:	91 05       	cpc	r25, r1
    1900:	b4 f4       	brge	.+44     	; 0x192e <PD_InterpretAVRISPPacket+0x50>
    1902:	82 31       	cpi	r24, 0x12	; 18
    1904:	91 05       	cpc	r25, r1
    1906:	09 f4       	brne	.+2      	; 0x190a <PD_InterpretAVRISPPacket+0x2c>
    1908:	6f c0       	rjmp	.+222    	; 0x19e8 <PD_InterpretAVRISPPacket+0x10a>
    190a:	83 31       	cpi	r24, 0x13	; 19
    190c:	91 05       	cpc	r25, r1
    190e:	3c f4       	brge	.+14     	; 0x191e <PD_InterpretAVRISPPacket+0x40>
    1910:	80 31       	cpi	r24, 0x10	; 16
    1912:	91 05       	cpc	r25, r1
    1914:	31 f1       	breq	.+76     	; 0x1962 <PD_InterpretAVRISPPacket+0x84>
    1916:	41 97       	sbiw	r24, 0x11	; 17
    1918:	09 f4       	brne	.+2      	; 0x191c <PD_InterpretAVRISPPacket+0x3e>
    191a:	46 c0       	rjmp	.+140    	; 0x19a8 <PD_InterpretAVRISPPacket+0xca>
    191c:	40 c1       	rjmp	.+640    	; 0x1b9e <PD_InterpretAVRISPPacket+0x2c0>
    191e:	84 31       	cpi	r24, 0x14	; 20
    1920:	91 05       	cpc	r25, r1
    1922:	09 f4       	brne	.+2      	; 0x1926 <PD_InterpretAVRISPPacket+0x48>
    1924:	8a c0       	rjmp	.+276    	; 0x1a3a <PD_InterpretAVRISPPacket+0x15c>
    1926:	45 97       	sbiw	r24, 0x15	; 21
    1928:	0c f0       	brlt	.+2      	; 0x192c <PD_InterpretAVRISPPacket+0x4e>
    192a:	af c0       	rjmp	.+350    	; 0x1a8a <PD_InterpretAVRISPPacket+0x1ac>
    192c:	7f c0       	rjmp	.+254    	; 0x1a2c <PD_InterpretAVRISPPacket+0x14e>
    192e:	89 31       	cpi	r24, 0x19	; 25
    1930:	91 05       	cpc	r25, r1
    1932:	09 f4       	brne	.+2      	; 0x1936 <PD_InterpretAVRISPPacket+0x58>
    1934:	70 c0       	rjmp	.+224    	; 0x1a16 <PD_InterpretAVRISPPacket+0x138>
    1936:	8a 31       	cpi	r24, 0x1A	; 26
    1938:	91 05       	cpc	r25, r1
    193a:	44 f4       	brge	.+16     	; 0x194c <PD_InterpretAVRISPPacket+0x6e>
    193c:	87 31       	cpi	r24, 0x17	; 23
    193e:	91 05       	cpc	r25, r1
    1940:	09 f4       	brne	.+2      	; 0x1944 <PD_InterpretAVRISPPacket+0x66>
    1942:	69 c0       	rjmp	.+210    	; 0x1a16 <PD_InterpretAVRISPPacket+0x138>
    1944:	48 97       	sbiw	r24, 0x18	; 24
    1946:	09 f4       	brne	.+2      	; 0x194a <PD_InterpretAVRISPPacket+0x6c>
    1948:	58 c0       	rjmp	.+176    	; 0x19fa <PD_InterpretAVRISPPacket+0x11c>
    194a:	29 c1       	rjmp	.+594    	; 0x1b9e <PD_InterpretAVRISPPacket+0x2c0>
    194c:	8b 31       	cpi	r24, 0x1B	; 27
    194e:	91 05       	cpc	r25, r1
    1950:	e9 f1       	breq	.+122    	; 0x19cc <PD_InterpretAVRISPPacket+0xee>
    1952:	8b 31       	cpi	r24, 0x1B	; 27
    1954:	91 05       	cpc	r25, r1
    1956:	0c f4       	brge	.+2      	; 0x195a <PD_InterpretAVRISPPacket+0x7c>
    1958:	50 c0       	rjmp	.+160    	; 0x19fa <PD_InterpretAVRISPPacket+0x11c>
    195a:	4c 97       	sbiw	r24, 0x1c	; 28
    195c:	09 f4       	brne	.+2      	; 0x1960 <PD_InterpretAVRISPPacket+0x82>
    195e:	4d c0       	rjmp	.+154    	; 0x19fa <PD_InterpretAVRISPPacket+0x11c>
    1960:	1e c1       	rjmp	.+572    	; 0x1b9e <PD_InterpretAVRISPPacket+0x2c0>
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	90 93 31 01 	sts	0x0131, r25
    196a:	80 93 30 01 	sts	0x0130, r24
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    1974:	0e 94 a4 0a 	call	0x1548 <DF_GetChipCharacteristics>
    1978:	80 91 86 02 	lds	r24, 0x0286
    197c:	88 23       	and	r24, r24
    197e:	59 f0       	breq	.+22     	; 0x1996 <PD_InterpretAVRISPPacket+0xb8>
    1980:	89 ec       	ldi	r24, 0xC9	; 201
    1982:	93 e0       	ldi	r25, 0x03	; 3
    1984:	0e 94 1f 08 	call	0x103e <LCD_puts_f>
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	80 93 2f 01 	sts	0x012F, r24
    198e:	81 b3       	in	r24, 0x11	; 17
    1990:	8f 7c       	andi	r24, 0xCF	; 207
    1992:	80 62       	ori	r24, 0x20	; 32
    1994:	17 c0       	rjmp	.+46     	; 0x19c4 <PD_InterpretAVRISPPacket+0xe6>
    1996:	83 e8       	ldi	r24, 0x83	; 131
    1998:	93 e0       	ldi	r25, 0x03	; 3
    199a:	0e 94 1f 08 	call	0x103e <LCD_puts_f>
    199e:	8d 2d       	mov	r24, r13
    19a0:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    19a4:	80 ec       	ldi	r24, 0xC0	; 192
    19a6:	02 c1       	rjmp	.+516    	; 0x1bac <PD_InterpretAVRISPPacket+0x2ce>
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	90 93 31 01 	sts	0x0131, r25
    19b0:	80 93 30 01 	sts	0x0130, r24
    19b4:	d0 92 2f 01 	sts	0x012F, r13
    19b8:	8d 2d       	mov	r24, r13
    19ba:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    19be:	81 b3       	in	r24, 0x11	; 17
    19c0:	8f 7c       	andi	r24, 0xCF	; 207
    19c2:	80 61       	ori	r24, 0x10	; 16
    19c4:	81 bb       	out	0x11, r24	; 17
    19c6:	d0 92 35 01 	sts	0x0135, r13
    19ca:	f2 c0       	rjmp	.+484    	; 0x1bb0 <PD_InterpretAVRISPPacket+0x2d2>
    19cc:	84 e0       	ldi	r24, 0x04	; 4
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	90 93 31 01 	sts	0x0131, r25
    19d4:	80 93 30 01 	sts	0x0130, r24
    19d8:	d0 92 35 01 	sts	0x0135, r13
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	80 93 36 01 	sts	0x0136, r24
    19e2:	d0 92 37 01 	sts	0x0137, r13
    19e6:	e4 c0       	rjmp	.+456    	; 0x1bb0 <PD_InterpretAVRISPPacket+0x2d2>
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	90 93 31 01 	sts	0x0131, r25
    19f0:	80 93 30 01 	sts	0x0130, r24
    19f4:	e1 e0       	ldi	r30, 0x01	; 1
    19f6:	de 2e       	mov	r13, r30
    19f8:	7e c0       	rjmp	.+252    	; 0x1af6 <PD_InterpretAVRISPPacket+0x218>
    19fa:	84 e0       	ldi	r24, 0x04	; 4
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	90 93 31 01 	sts	0x0131, r25
    1a02:	80 93 30 01 	sts	0x0130, r24
    1a06:	10 92 35 01 	sts	0x0135, r1
    1a0a:	8f ef       	ldi	r24, 0xFF	; 255
    1a0c:	80 93 36 01 	sts	0x0136, r24
    1a10:	10 92 37 01 	sts	0x0137, r1
    1a14:	cd c0       	rjmp	.+410    	; 0x1bb0 <PD_InterpretAVRISPPacket+0x2d2>
    1a16:	83 e0       	ldi	r24, 0x03	; 3
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	90 93 31 01 	sts	0x0131, r25
    1a1e:	80 93 30 01 	sts	0x0130, r24
    1a22:	10 92 35 01 	sts	0x0135, r1
    1a26:	10 92 36 01 	sts	0x0136, r1
    1a2a:	c2 c0       	rjmp	.+388    	; 0x1bb0 <PD_InterpretAVRISPPacket+0x2d2>
    1a2c:	82 e0       	ldi	r24, 0x02	; 2
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	90 93 31 01 	sts	0x0131, r25
    1a34:	80 93 30 01 	sts	0x0130, r24
    1a38:	5e c0       	rjmp	.+188    	; 0x1af6 <PD_InterpretAVRISPPacket+0x218>
    1a3a:	80 91 35 01 	lds	r24, 0x0135
    1a3e:	99 27       	eor	r25, r25
    1a40:	98 2f       	mov	r25, r24
    1a42:	88 27       	eor	r24, r24
    1a44:	20 91 36 01 	lds	r18, 0x0136
    1a48:	33 27       	eor	r19, r19
    1a4a:	82 2b       	or	r24, r18
    1a4c:	93 2b       	or	r25, r19
    1a4e:	03 96       	adiw	r24, 0x03	; 3
    1a50:	90 93 31 01 	sts	0x0131, r25
    1a54:	80 93 30 01 	sts	0x0130, r24
    1a58:	21 e0       	ldi	r18, 0x01	; 1
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	02 97       	sbiw	r24, 0x02	; 2
    1a5e:	28 17       	cp	r18, r24
    1a60:	39 07       	cpc	r19, r25
    1a62:	48 f4       	brcc	.+18     	; 0x1a76 <PD_InterpretAVRISPPacket+0x198>
    1a64:	4f ef       	ldi	r20, 0xFF	; 255
    1a66:	e5 e3       	ldi	r30, 0x35	; 53
    1a68:	f1 e0       	ldi	r31, 0x01	; 1
    1a6a:	41 93       	st	Z+, r20
    1a6c:	2f 5f       	subi	r18, 0xFF	; 255
    1a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a70:	28 17       	cp	r18, r24
    1a72:	39 07       	cpc	r19, r25
    1a74:	d0 f3       	brcs	.-12     	; 0x1a6a <PD_InterpretAVRISPPacket+0x18c>
    1a76:	10 92 35 01 	sts	0x0135, r1
    1a7a:	e0 91 30 01 	lds	r30, 0x0130
    1a7e:	f0 91 31 01 	lds	r31, 0x0131
    1a82:	ed 5c       	subi	r30, 0xCD	; 205
    1a84:	fe 4f       	sbci	r31, 0xFE	; 254
    1a86:	10 82       	st	Z, r1
    1a88:	93 c0       	rjmp	.+294    	; 0x1bb0 <PD_InterpretAVRISPPacket+0x2d2>
    1a8a:	0e 94 12 0c 	call	0x1824 <PD_SetupDFAddressCounters>
    1a8e:	80 91 8b 02 	lds	r24, 0x028B
    1a92:	90 91 8c 02 	lds	r25, 0x028C
    1a96:	0e 94 0e 0b 	call	0x161c <DF_CopyFlashPageToBuffer>
    1a9a:	80 91 84 02 	lds	r24, 0x0284
    1a9e:	90 91 85 02 	lds	r25, 0x0285
    1aa2:	0e 94 7e 0a 	call	0x14fc <DF_BufferWriteEnable>
    1aa6:	80 91 35 01 	lds	r24, 0x0135
    1aaa:	99 27       	eor	r25, r25
    1aac:	d8 2f       	mov	r29, r24
    1aae:	cc 27       	eor	r28, r28
    1ab0:	80 91 36 01 	lds	r24, 0x0136
    1ab4:	99 27       	eor	r25, r25
    1ab6:	c8 2b       	or	r28, r24
    1ab8:	d9 2b       	or	r29, r25
    1aba:	00 e0       	ldi	r16, 0x00	; 0
    1abc:	10 e0       	ldi	r17, 0x00	; 0
    1abe:	0c 17       	cp	r16, r28
    1ac0:	1d 07       	cpc	r17, r29
    1ac2:	c8 f4       	brcc	.+50     	; 0x1af6 <PD_InterpretAVRISPPacket+0x218>
    1ac4:	5e e3       	ldi	r21, 0x3E	; 62
    1ac6:	e5 2e       	mov	r14, r21
    1ac8:	51 e0       	ldi	r21, 0x01	; 1
    1aca:	f5 2e       	mov	r15, r21
    1acc:	f7 01       	movw	r30, r14
    1ace:	81 91       	ld	r24, Z+
    1ad0:	7f 01       	movw	r14, r30
    1ad2:	0e 94 3f 0c 	call	0x187e <PD_StoreDataflashByte>
    1ad6:	80 91 84 02 	lds	r24, 0x0284
    1ada:	90 91 85 02 	lds	r25, 0x0285
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	90 93 85 02 	sts	0x0285, r25
    1ae4:	80 93 84 02 	sts	0x0284, r24
    1ae8:	0e 94 fa 0e 	call	0x1df4 <V2P_IncrementCurrAddress>
    1aec:	0f 5f       	subi	r16, 0xFF	; 255
    1aee:	1f 4f       	sbci	r17, 0xFF	; 255
    1af0:	0c 17       	cp	r16, r28
    1af2:	1d 07       	cpc	r17, r29
    1af4:	58 f3       	brcs	.-42     	; 0x1acc <PD_InterpretAVRISPPacket+0x1ee>
    1af6:	10 92 35 01 	sts	0x0135, r1
    1afa:	5a c0       	rjmp	.+180    	; 0x1bb0 <PD_InterpretAVRISPPacket+0x2d2>
    1afc:	0e 94 12 0c 	call	0x1824 <PD_SetupDFAddressCounters>
    1b00:	80 91 8b 02 	lds	r24, 0x028B
    1b04:	90 91 8c 02 	lds	r25, 0x028C
    1b08:	0e 94 0e 0b 	call	0x161c <DF_CopyFlashPageToBuffer>
    1b0c:	80 91 35 01 	lds	r24, 0x0135
    1b10:	99 27       	eor	r25, r25
    1b12:	d8 2f       	mov	r29, r24
    1b14:	cc 27       	eor	r28, r28
    1b16:	80 91 36 01 	lds	r24, 0x0136
    1b1a:	99 27       	eor	r25, r25
    1b1c:	c8 2b       	or	r28, r24
    1b1e:	d9 2b       	or	r29, r25
    1b20:	00 e0       	ldi	r16, 0x00	; 0
    1b22:	10 e0       	ldi	r17, 0x00	; 0
    1b24:	0c 17       	cp	r16, r28
    1b26:	1d 07       	cpc	r17, r29
    1b28:	70 f5       	brcc	.+92     	; 0x1b86 <PD_InterpretAVRISPPacket+0x2a8>
    1b2a:	36 e3       	ldi	r19, 0x36	; 54
    1b2c:	e3 2e       	mov	r14, r19
    1b2e:	31 e0       	ldi	r19, 0x01	; 1
    1b30:	f3 2e       	mov	r15, r19
    1b32:	20 91 84 02 	lds	r18, 0x0284
    1b36:	30 91 85 02 	lds	r19, 0x0285
    1b3a:	80 91 87 02 	lds	r24, 0x0287
    1b3e:	90 91 88 02 	lds	r25, 0x0288
    1b42:	28 17       	cp	r18, r24
    1b44:	39 07       	cpc	r19, r25
    1b46:	41 f4       	brne	.+16     	; 0x1b58 <PD_InterpretAVRISPPacket+0x27a>
    1b48:	0e 94 12 0c 	call	0x1824 <PD_SetupDFAddressCounters>
    1b4c:	80 91 8b 02 	lds	r24, 0x028B
    1b50:	90 91 8c 02 	lds	r25, 0x028C
    1b54:	0e 94 0e 0b 	call	0x161c <DF_CopyFlashPageToBuffer>
    1b58:	80 91 84 02 	lds	r24, 0x0284
    1b5c:	90 91 85 02 	lds	r25, 0x0285
    1b60:	9c 01       	movw	r18, r24
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	90 93 85 02 	sts	0x0285, r25
    1b68:	80 93 84 02 	sts	0x0284, r24
    1b6c:	c9 01       	movw	r24, r18
    1b6e:	0e 94 0e 0a 	call	0x141c <DF_ReadBufferByte>
    1b72:	f7 01       	movw	r30, r14
    1b74:	81 93       	st	Z+, r24
    1b76:	7f 01       	movw	r14, r30
    1b78:	0e 94 fa 0e 	call	0x1df4 <V2P_IncrementCurrAddress>
    1b7c:	0f 5f       	subi	r16, 0xFF	; 255
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	0c 17       	cp	r16, r28
    1b82:	1d 07       	cpc	r17, r29
    1b84:	b0 f2       	brcs	.-84     	; 0x1b32 <PD_InterpretAVRISPPacket+0x254>
    1b86:	23 96       	adiw	r28, 0x03	; 3
    1b88:	d0 93 31 01 	sts	0x0131, r29
    1b8c:	c0 93 30 01 	sts	0x0130, r28
    1b90:	23 97       	sbiw	r28, 0x03	; 3
    1b92:	10 92 35 01 	sts	0x0135, r1
    1b96:	cc 5c       	subi	r28, 0xCC	; 204
    1b98:	de 4f       	sbci	r29, 0xFE	; 254
    1b9a:	1a 82       	std	Y+2, r1	; 0x02
    1b9c:	09 c0       	rjmp	.+18     	; 0x1bb0 <PD_InterpretAVRISPPacket+0x2d2>
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	90 93 31 01 	sts	0x0131, r25
    1ba6:	80 93 30 01 	sts	0x0130, r24
    1baa:	89 ec       	ldi	r24, 0xC9	; 201
    1bac:	80 93 35 01 	sts	0x0135, r24
    1bb0:	0e 94 20 0e 	call	0x1c40 <V2P_SendPacket>
    1bb4:	dd 20       	and	r13, r13
    1bb6:	d9 f0       	breq	.+54     	; 0x1bee <PD_InterpretAVRISPPacket+0x310>
    1bb8:	8f e3       	ldi	r24, 0x3F	; 63
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	0e 94 1f 08 	call	0x103e <LCD_puts_f>
    1bc0:	c0 e0       	ldi	r28, 0x00	; 0
    1bc2:	d0 e0       	ldi	r29, 0x00	; 0
    1bc4:	80 91 89 02 	lds	r24, 0x0289
    1bc8:	90 91 8a 02 	lds	r25, 0x028A
    1bcc:	23 e0       	ldi	r18, 0x03	; 3
    1bce:	96 95       	lsr	r25
    1bd0:	87 95       	ror	r24
    1bd2:	2a 95       	dec	r18
    1bd4:	e1 f7       	brne	.-8      	; 0x1bce <PD_InterpretAVRISPPacket+0x2f0>
    1bd6:	c8 17       	cp	r28, r24
    1bd8:	d9 07       	cpc	r29, r25
    1bda:	28 f4       	brcc	.+10     	; 0x1be6 <PD_InterpretAVRISPPacket+0x308>
    1bdc:	ce 01       	movw	r24, r28
    1bde:	0e 94 e4 0a 	call	0x15c8 <DF_EraseBlock>
    1be2:	21 96       	adiw	r28, 0x01	; 1
    1be4:	ef cf       	rjmp	.-34     	; 0x1bc4 <PD_InterpretAVRISPPacket+0x2e6>
    1be6:	89 ec       	ldi	r24, 0xC9	; 201
    1be8:	93 e0       	ldi	r25, 0x03	; 3
    1bea:	0e 94 1f 08 	call	0x103e <LCD_puts_f>
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	df 90       	pop	r13
    1bfc:	08 95       	ret

00001bfe <V2P_GetChecksum>:
	
	/* Checksum for the V2 protocol is comprised of an XOR of all the packet 
      bytes, including the start, sequence number, size and token bytes.    */
	
	CheckSumByte  = MESSAGE_START;
    1bfe:	6b e1       	ldi	r22, 0x1B	; 27
	CheckSumByte ^= SequenceNum;
    1c00:	80 91 32 01 	lds	r24, 0x0132
    1c04:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize >> 8);
    1c06:	20 91 30 01 	lds	r18, 0x0130
    1c0a:	30 91 31 01 	lds	r19, 0x0131
    1c0e:	83 2f       	mov	r24, r19
    1c10:	99 27       	eor	r25, r25
    1c12:	68 27       	eor	r22, r24
	CheckSumByte ^= (uint8_t)(MessageSize);
    1c14:	80 91 30 01 	lds	r24, 0x0130
    1c18:	68 27       	eor	r22, r24
	CheckSumByte ^= TOKEN;
    1c1a:	8e e0       	ldi	r24, 0x0E	; 14
    1c1c:	68 27       	eor	r22, r24
	
	for (uint16_t CByteIndex = 0; CByteIndex < MessageSize; CByteIndex++)
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	42 17       	cp	r20, r18
    1c24:	53 07       	cpc	r21, r19
    1c26:	48 f4       	brcc	.+18     	; 0x1c3a <V2P_GetChecksum+0x3c>
    1c28:	e4 e3       	ldi	r30, 0x34	; 52
    1c2a:	f1 e0       	ldi	r31, 0x01	; 1
	   CheckSumByte ^= PacketBytes[CByteIndex];
    1c2c:	81 91       	ld	r24, Z+
    1c2e:	68 27       	eor	r22, r24
    1c30:	4f 5f       	subi	r20, 0xFF	; 255
    1c32:	5f 4f       	sbci	r21, 0xFF	; 255
    1c34:	42 17       	cp	r20, r18
    1c36:	53 07       	cpc	r21, r19
    1c38:	c8 f3       	brcs	.-14     	; 0x1c2c <V2P_GetChecksum+0x2e>

	return CheckSumByte;
}
    1c3a:	86 2f       	mov	r24, r22
    1c3c:	99 27       	eor	r25, r25
    1c3e:	08 95       	ret

00001c40 <V2P_SendPacket>:
    1c40:	0f 93       	push	r16
    1c42:	1f 93       	push	r17
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	8b e1       	ldi	r24, 0x1B	; 27
    1c4a:	0e 94 0f 09 	call	0x121e <USART_Tx>
    1c4e:	80 91 32 01 	lds	r24, 0x0132
    1c52:	0e 94 0f 09 	call	0x121e <USART_Tx>
    1c56:	80 91 31 01 	lds	r24, 0x0131
    1c5a:	0e 94 0f 09 	call	0x121e <USART_Tx>
    1c5e:	80 91 30 01 	lds	r24, 0x0130
    1c62:	0e 94 0f 09 	call	0x121e <USART_Tx>
    1c66:	8e e0       	ldi	r24, 0x0E	; 14
    1c68:	0e 94 0f 09 	call	0x121e <USART_Tx>
    1c6c:	c0 e0       	ldi	r28, 0x00	; 0
    1c6e:	d0 e0       	ldi	r29, 0x00	; 0
    1c70:	80 91 30 01 	lds	r24, 0x0130
    1c74:	90 91 31 01 	lds	r25, 0x0131
    1c78:	c8 17       	cp	r28, r24
    1c7a:	d9 07       	cpc	r29, r25
    1c7c:	78 f4       	brcc	.+30     	; 0x1c9c <V2P_SendPacket+0x5c>
    1c7e:	04 e3       	ldi	r16, 0x34	; 52
    1c80:	11 e0       	ldi	r17, 0x01	; 1
    1c82:	f8 01       	movw	r30, r16
    1c84:	81 91       	ld	r24, Z+
    1c86:	8f 01       	movw	r16, r30
    1c88:	0e 94 0f 09 	call	0x121e <USART_Tx>
    1c8c:	21 96       	adiw	r28, 0x01	; 1
    1c8e:	80 91 30 01 	lds	r24, 0x0130
    1c92:	90 91 31 01 	lds	r25, 0x0131
    1c96:	c8 17       	cp	r28, r24
    1c98:	d9 07       	cpc	r29, r25
    1c9a:	98 f3       	brcs	.-26     	; 0x1c82 <V2P_SendPacket+0x42>
    1c9c:	0e 94 ff 0d 	call	0x1bfe <V2P_GetChecksum>
    1ca0:	0e 94 0f 09 	call	0x121e <USART_Tx>
    1ca4:	80 91 32 01 	lds	r24, 0x0132
    1ca8:	90 91 33 01 	lds	r25, 0x0133
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	90 93 33 01 	sts	0x0133, r25
    1cb2:	80 93 32 01 	sts	0x0132, r24
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	08 95       	ret

00001cc0 <V2P_GetSetParamater>:

void V2P_GetSetParamater(void)
{
	uint8_t Param_Name = PacketBytes[1];    // Save the parameter number
    1cc0:	20 91 35 01 	lds	r18, 0x0135

	MessageSize = 3;                        // Set the default response message size to 3 bytes     
    1cc4:	83 e0       	ldi	r24, 0x03	; 3
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	90 93 31 01 	sts	0x0131, r25
    1ccc:	80 93 30 01 	sts	0x0130, r24
	PacketBytes[1] = STATUS_CMD_OK;         // Set the default response to OK
    1cd0:	10 92 35 01 	sts	0x0135, r1

	switch (Param_Name)                    // Switch based on the recieved parameter byte
    1cd4:	e2 2f       	mov	r30, r18
    1cd6:	ff 27       	eor	r31, r31
    1cd8:	e8 39       	cpi	r30, 0x98	; 152
    1cda:	f1 05       	cpc	r31, r1
    1cdc:	ac f4       	brge	.+42     	; 0x1d08 <V2P_GetSetParamater+0x48>
    1cde:	e6 39       	cpi	r30, 0x96	; 150
    1ce0:	f1 05       	cpc	r31, r1
    1ce2:	0c f0       	brlt	.+2      	; 0x1ce6 <V2P_GetSetParamater+0x26>
    1ce4:	6d c0       	rjmp	.+218    	; 0x1dc0 <V2P_GetSetParamater+0x100>
    1ce6:	e1 38       	cpi	r30, 0x81	; 129
    1ce8:	f1 05       	cpc	r31, r1
    1cea:	f9 f0       	breq	.+62     	; 0x1d2a <V2P_GetSetParamater+0x6a>
    1cec:	e2 38       	cpi	r30, 0x82	; 130
    1cee:	f1 05       	cpc	r31, r1
    1cf0:	24 f4       	brge	.+8      	; 0x1cfa <V2P_GetSetParamater+0x3a>
    1cf2:	e0 38       	cpi	r30, 0x80	; 128
    1cf4:	f1 05       	cpc	r31, r1
    1cf6:	b9 f0       	breq	.+46     	; 0x1d26 <V2P_GetSetParamater+0x66>
    1cf8:	71 c0       	rjmp	.+226    	; 0x1ddc <V2P_GetSetParamater+0x11c>
    1cfa:	cf 01       	movw	r24, r30
    1cfc:	80 59       	subi	r24, 0x90	; 144
    1cfe:	90 40       	sbci	r25, 0x00	; 0
    1d00:	03 97       	sbiw	r24, 0x03	; 3
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <V2P_GetSetParamater+0x46>
    1d04:	6b c0       	rjmp	.+214    	; 0x1ddc <V2P_GetSetParamater+0x11c>
    1d06:	13 c0       	rjmp	.+38     	; 0x1d2e <V2P_GetSetParamater+0x6e>
    1d08:	ee 39       	cpi	r30, 0x9E	; 158
    1d0a:	f1 05       	cpc	r31, r1
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <V2P_GetSetParamater+0x50>
    1d0e:	3d c0       	rjmp	.+122    	; 0x1d8a <V2P_GetSetParamater+0xca>
    1d10:	ef 39       	cpi	r30, 0x9F	; 159
    1d12:	f1 05       	cpc	r31, r1
    1d14:	24 f4       	brge	.+8      	; 0x1d1e <V2P_GetSetParamater+0x5e>
    1d16:	e8 39       	cpi	r30, 0x98	; 152
    1d18:	f1 05       	cpc	r31, r1
    1d1a:	f9 f0       	breq	.+62     	; 0x1d5a <V2P_GetSetParamater+0x9a>
    1d1c:	5f c0       	rjmp	.+190    	; 0x1ddc <V2P_GetSetParamater+0x11c>
    1d1e:	ef 39       	cpi	r30, 0x9F	; 159
    1d20:	f1 05       	cpc	r31, r1
    1d22:	49 f0       	breq	.+18     	; 0x1d36 <V2P_GetSetParamater+0x76>
    1d24:	5b c0       	rjmp	.+182    	; 0x1ddc <V2P_GetSetParamater+0x11c>
	{
		case PARAM_BUILD_NUMBER_LOW:
			PacketBytes[2] = VERSION_MINOR;
    1d26:	84 e0       	ldi	r24, 0x04	; 4
    1d28:	38 c0       	rjmp	.+112    	; 0x1d9a <V2P_GetSetParamater+0xda>

			break;
		case PARAM_BUILD_NUMBER_HIGH:
			PacketBytes[2] = VERSION_MAJOR;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	36 c0       	rjmp	.+108    	; 0x1d9a <V2P_GetSetParamater+0xda>

			break;
		case PARAM_HARDWARE_VERSION:
		case PARAM_SW_MAJOR:
		case PARAM_SW_MINOR:
			PacketBytes[2] = pgm_read_byte(&VersionData[Param_Name - PARAM_HARDWARE_VERSION]);
    1d2e:	eb 5a       	subi	r30, 0xAB	; 171
    1d30:	fc 4f       	sbci	r31, 0xFC	; 252
    1d32:	84 91       	lpm	r24, Z
    1d34:	32 c0       	rjmp	.+100    	; 0x1d9a <V2P_GetSetParamater+0xda>

			break;
		case PARAM_CONTROLLER_INIT:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1d36:	80 91 34 01 	lds	r24, 0x0134
    1d3a:	83 30       	cpi	r24, 0x03	; 3
    1d3c:	19 f4       	brne	.+6      	; 0x1d44 <V2P_GetSetParamater+0x84>
			{
				PacketBytes[2] = Param_ControllerInit;
    1d3e:	80 91 2a 01 	lds	r24, 0x012A
    1d42:	2b c0       	rjmp	.+86     	; 0x1d9a <V2P_GetSetParamater+0xda>
			}
			else
			{
				MessageSize = 2;
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	90 93 31 01 	sts	0x0131, r25
    1d4c:	80 93 30 01 	sts	0x0130, r24
				Param_ControllerInit = PacketBytes[2];
    1d50:	80 91 36 01 	lds	r24, 0x0136
    1d54:	80 93 2a 01 	sts	0x012A, r24
			}
			
			break;
    1d58:	4a c0       	rjmp	.+148    	; 0x1dee <V2P_GetSetParamater+0x12e>
		case PARAM_SCK_DURATION:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1d5a:	80 91 34 01 	lds	r24, 0x0134
    1d5e:	83 30       	cpi	r24, 0x03	; 3
    1d60:	19 f4       	brne	.+6      	; 0x1d68 <V2P_GetSetParamater+0xa8>
			{
				PacketBytes[2] = eeprom_read_byte_169(&Param_SCKDuration);
    1d62:	80 e2       	ldi	r24, 0x20	; 32
    1d64:	91 e0       	ldi	r25, 0x01	; 1
    1d66:	17 c0       	rjmp	.+46     	; 0x1d96 <V2P_GetSetParamater+0xd6>
			}
			else
			{
				MessageSize = 2;
    1d68:	82 e0       	ldi	r24, 0x02	; 2
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	90 93 31 01 	sts	0x0131, r25
    1d70:	80 93 30 01 	sts	0x0130, r24
				eeprom_write_byte_169(&Param_SCKDuration, PacketBytes[2]);
    1d74:	60 91 36 01 	lds	r22, 0x0136
    1d78:	80 e2       	ldi	r24, 0x20	; 32
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
				USI_SPISetSpeed(PacketBytes[2]); // Re-Initialise the USI system with the new frequency
    1d80:	80 91 36 01 	lds	r24, 0x0136
    1d84:	0e 94 92 09 	call	0x1324 <USI_SPISetSpeed>
			}
					
			break;
    1d88:	32 c0       	rjmp	.+100    	; 0x1dee <V2P_GetSetParamater+0x12e>
		case PARAM_RESET_POLARITY:
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1d8a:	80 91 34 01 	lds	r24, 0x0134
    1d8e:	83 30       	cpi	r24, 0x03	; 3
    1d90:	39 f4       	brne	.+14     	; 0x1da0 <V2P_GetSetParamater+0xe0>
			{
				PacketBytes[2] = eeprom_read_byte_169(&Param_ResetPolarity);		
    1d92:	82 e2       	ldi	r24, 0x22	; 34
    1d94:	91 e0       	ldi	r25, 0x01	; 1
    1d96:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    1d9a:	80 93 36 01 	sts	0x0136, r24
    1d9e:	27 c0       	rjmp	.+78     	; 0x1dee <V2P_GetSetParamater+0x12e>
			}
			else
			{
				MessageSize = 2;
    1da0:	82 e0       	ldi	r24, 0x02	; 2
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	90 93 31 01 	sts	0x0131, r25
    1da8:	80 93 30 01 	sts	0x0130, r24
				eeprom_write_byte_169(&Param_ResetPolarity, PacketBytes[2]);
    1dac:	60 91 36 01 	lds	r22, 0x0136
    1db0:	82 e2       	ldi	r24, 0x22	; 34
    1db2:	91 e0       	ldi	r25, 0x01	; 1
    1db4:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
				MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Change takes effect immediatly
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	0e 94 2b 03 	call	0x656 <MAIN_ResetCSLine>
			}
			
			break;
    1dbe:	17 c0       	rjmp	.+46     	; 0x1dee <V2P_GetSetParamater+0x12e>
		case PARAM_OSC_PSCALE:
		case PARAM_OSC_CMATCH:
			/* Despite not supporting these parameters (STK500 only), the AVR Studio programmer
			   sends them along with the SCK duration. A OK must be returned or the sequence will fail
			   and the SCK duration byte will not be sent.                                             */
		
			if (PacketBytes[0] == CMD_GET_PARAMETER)
    1dc0:	80 91 34 01 	lds	r24, 0x0134
    1dc4:	83 30       	cpi	r24, 0x03	; 3
    1dc6:	19 f4       	brne	.+6      	; 0x1dce <V2P_GetSetParamater+0x10e>
			{
			   PacketBytes[2] = 0;            // If the command is a read, return a 0 for both parameters
    1dc8:	10 92 36 01 	sts	0x0136, r1
    1dcc:	10 c0       	rjmp	.+32     	; 0x1dee <V2P_GetSetParamater+0x12e>
			}
			else
			{
				MessageSize = 2;              // Otherwise just send back an OK if the command is a set		
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	90 93 31 01 	sts	0x0131, r25
    1dd6:	80 93 30 01 	sts	0x0130, r24
			}
			
			break;
    1dda:	09 c0       	rjmp	.+18     	; 0x1dee <V2P_GetSetParamater+0x12e>
		default:                             // Unrecognised parameter
			MessageSize = 2;
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	90 93 31 01 	sts	0x0131, r25
    1de4:	80 93 30 01 	sts	0x0130, r24
			PacketBytes[1] = STATUS_CMD_FAILED;			
    1de8:	80 ec       	ldi	r24, 0xC0	; 192
    1dea:	80 93 35 01 	sts	0x0135, r24
	}
	
	V2P_SendPacket();
    1dee:	0e 94 20 0e 	call	0x1c40 <V2P_SendPacket>
    1df2:	08 95       	ret

00001df4 <V2P_IncrementCurrAddress>:
}

void V2P_IncrementCurrAddress(void)
{
	// Incrementing a 32-bit unsigned variable takes a lot of code. Because much of the code is
	// not very time critical (much of it is waiting for the hardware), i've chosen to waste
	// a few extra cycles per increment and save a good 60 bytes or so of code space by putting
	// the incrmement inside a function.

	CurrAddress++;
    1df4:	80 91 2b 01 	lds	r24, 0x012B
    1df8:	90 91 2c 01 	lds	r25, 0x012C
    1dfc:	a0 91 2d 01 	lds	r26, 0x012D
    1e00:	b0 91 2e 01 	lds	r27, 0x012E
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	a1 1d       	adc	r26, r1
    1e08:	b1 1d       	adc	r27, r1
    1e0a:	80 93 2b 01 	sts	0x012B, r24
    1e0e:	90 93 2c 01 	sts	0x012C, r25
    1e12:	a0 93 2d 01 	sts	0x012D, r26
    1e16:	b0 93 2e 01 	sts	0x012E, r27
    1e1a:	08 95       	ret

00001e1c <V2P_CheckForExtendedAddress>:
}

void V2P_CheckForExtendedAddress(void)
{
	if (CurrAddress & (1UL << 31))                     // MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
    1e1c:	80 91 2b 01 	lds	r24, 0x012B
    1e20:	90 91 2c 01 	lds	r25, 0x012C
    1e24:	a0 91 2d 01 	lds	r26, 0x012D
    1e28:	b0 91 2e 01 	lds	r27, 0x012E
    1e2c:	b7 ff       	sbrs	r27, 7
    1e2e:	1e c0       	rjmp	.+60     	; 0x1e6c <V2P_CheckForExtendedAddress+0x50>
	{
		USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);   // Load extended address command
    1e30:	8d e4       	ldi	r24, 0x4D	; 77
    1e32:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
		USI_SPITransmit((CurrAddress & 0x00FF0000) >> 16); // The 3rd byte of the long holds the extended address
    1e3c:	80 91 2d 01 	lds	r24, 0x012D
    1e40:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
		USI_SPITransmit(0x00);
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
		
		CurrAddress &= ~(1UL << 31);                   // Clear the flag
    1e4a:	80 91 2b 01 	lds	r24, 0x012B
    1e4e:	90 91 2c 01 	lds	r25, 0x012C
    1e52:	a0 91 2d 01 	lds	r26, 0x012D
    1e56:	b0 91 2e 01 	lds	r27, 0x012E
    1e5a:	bf 77       	andi	r27, 0x7F	; 127
    1e5c:	80 93 2b 01 	sts	0x012B, r24
    1e60:	90 93 2c 01 	sts	0x012C, r25
    1e64:	a0 93 2d 01 	sts	0x012D, r26
    1e68:	b0 93 2e 01 	sts	0x012E, r27
    1e6c:	08 95       	ret

00001e6e <V2P_RunStateMachine>:
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	c0 e0       	ldi	r28, 0x00	; 0
    1e7a:	ee 24       	eor	r14, r14
    1e7c:	ff 24       	eor	r15, r15
    1e7e:	80 91 c1 00 	lds	r24, 0x00C1
    1e82:	80 78       	andi	r24, 0x80	; 128
    1e84:	88 61       	ori	r24, 0x18	; 24
    1e86:	80 93 c1 00 	sts	0x00C1, r24
    1e8a:	0e 94 8f 0b 	call	0x171e <BUFF_InitialiseBuffer>
    1e8e:	0e 94 02 0c 	call	0x1804 <TIMEOUT_SetupTimeoutTimer>
    1e92:	c0 93 2f 01 	sts	0x012F, r28
    1e96:	10 92 2b 01 	sts	0x012B, r1
    1e9a:	10 92 2c 01 	sts	0x012C, r1
    1e9e:	10 92 2d 01 	sts	0x012D, r1
    1ea2:	10 92 2e 01 	sts	0x012E, r1
    1ea6:	80 91 28 01 	lds	r24, 0x0128
    1eaa:	81 30       	cpi	r24, 0x01	; 1
    1eac:	11 f4       	brne	.+4      	; 0x1eb2 <V2P_RunStateMachine+0x44>
    1eae:	c9 e0       	ldi	r28, 0x09	; 9
    1eb0:	05 c0       	rjmp	.+10     	; 0x1ebc <V2P_RunStateMachine+0x4e>
    1eb2:	cc 23       	and	r28, r28
    1eb4:	19 f0       	breq	.+6      	; 0x1ebc <V2P_RunStateMachine+0x4e>
    1eb6:	83 e0       	ldi	r24, 0x03	; 3
    1eb8:	80 93 81 00 	sts	0x0081, r24
    1ebc:	8c 2f       	mov	r24, r28
    1ebe:	99 27       	eor	r25, r25
    1ec0:	84 30       	cpi	r24, 0x04	; 4
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <V2P_RunStateMachine+0x5a>
    1ec6:	6d c0       	rjmp	.+218    	; 0x1fa2 <V2P_RunStateMachine+0x134>
    1ec8:	85 30       	cpi	r24, 0x05	; 5
    1eca:	91 05       	cpc	r25, r1
    1ecc:	94 f4       	brge	.+36     	; 0x1ef2 <V2P_RunStateMachine+0x84>
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <V2P_RunStateMachine+0x68>
    1ed4:	4c c0       	rjmp	.+152    	; 0x1f6e <V2P_RunStateMachine+0x100>
    1ed6:	82 30       	cpi	r24, 0x02	; 2
    1ed8:	91 05       	cpc	r25, r1
    1eda:	1c f4       	brge	.+6      	; 0x1ee2 <V2P_RunStateMachine+0x74>
    1edc:	89 2b       	or	r24, r25
    1ede:	b1 f1       	breq	.+108    	; 0x1f4c <V2P_RunStateMachine+0xde>
    1ee0:	e2 cf       	rjmp	.-60     	; 0x1ea6 <V2P_RunStateMachine+0x38>
    1ee2:	82 30       	cpi	r24, 0x02	; 2
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <V2P_RunStateMachine+0x7c>
    1ee8:	48 c0       	rjmp	.+144    	; 0x1f7a <V2P_RunStateMachine+0x10c>
    1eea:	03 97       	sbiw	r24, 0x03	; 3
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <V2P_RunStateMachine+0x82>
    1eee:	4e c0       	rjmp	.+156    	; 0x1f8c <V2P_RunStateMachine+0x11e>
    1ef0:	da cf       	rjmp	.-76     	; 0x1ea6 <V2P_RunStateMachine+0x38>
    1ef2:	87 30       	cpi	r24, 0x07	; 7
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	09 f4       	brne	.+2      	; 0x1efa <V2P_RunStateMachine+0x8c>
    1ef8:	85 c0       	rjmp	.+266    	; 0x2004 <V2P_RunStateMachine+0x196>
    1efa:	88 30       	cpi	r24, 0x08	; 8
    1efc:	91 05       	cpc	r25, r1
    1efe:	44 f4       	brge	.+16     	; 0x1f10 <V2P_RunStateMachine+0xa2>
    1f00:	85 30       	cpi	r24, 0x05	; 5
    1f02:	91 05       	cpc	r25, r1
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <V2P_RunStateMachine+0x9a>
    1f06:	62 c0       	rjmp	.+196    	; 0x1fcc <V2P_RunStateMachine+0x15e>
    1f08:	06 97       	sbiw	r24, 0x06	; 6
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <V2P_RunStateMachine+0xa0>
    1f0c:	67 c0       	rjmp	.+206    	; 0x1fdc <V2P_RunStateMachine+0x16e>
    1f0e:	cb cf       	rjmp	.-106    	; 0x1ea6 <V2P_RunStateMachine+0x38>
    1f10:	88 30       	cpi	r24, 0x08	; 8
    1f12:	91 05       	cpc	r25, r1
    1f14:	79 f0       	breq	.+30     	; 0x1f34 <V2P_RunStateMachine+0xc6>
    1f16:	09 97       	sbiw	r24, 0x09	; 9
    1f18:	31 f6       	brne	.-116    	; 0x1ea6 <V2P_RunStateMachine+0x38>
    1f1a:	82 e0       	ldi	r24, 0x02	; 2
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	90 93 31 01 	sts	0x0131, r25
    1f22:	80 93 30 01 	sts	0x0130, r24
    1f26:	80 ec       	ldi	r24, 0xC0	; 192
    1f28:	80 93 35 01 	sts	0x0135, r24
    1f2c:	10 92 28 01 	sts	0x0128, r1
    1f30:	0e 94 20 0e 	call	0x1c40 <V2P_SendPacket>
    1f34:	0e 94 8f 0b 	call	0x171e <BUFF_InitialiseBuffer>
    1f38:	10 92 81 00 	sts	0x0081, r1
    1f3c:	10 92 29 01 	sts	0x0129, r1
    1f40:	10 92 85 00 	sts	0x0085, r1
    1f44:	10 92 84 00 	sts	0x0084, r1
    1f48:	c0 e0       	ldi	r28, 0x00	; 0
    1f4a:	ad cf       	rjmp	.-166    	; 0x1ea6 <V2P_RunStateMachine+0x38>
    1f4c:	80 91 d1 02 	lds	r24, 0x02D1
    1f50:	81 11       	cpse	r24, r1
    1f52:	c1 e0       	ldi	r28, 0x01	; 1
    1f54:	f2 9b       	sbis	0x1e, 2	; 30
    1f56:	a7 cf       	rjmp	.-178    	; 0x1ea6 <V2P_RunStateMachine+0x38>
    1f58:	80 91 2f 01 	lds	r24, 0x012F
    1f5c:	88 23       	and	r24, r24
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <V2P_RunStateMachine+0xf4>
    1f60:	a2 cf       	rjmp	.-188    	; 0x1ea6 <V2P_RunStateMachine+0x38>
    1f62:	80 91 c1 00 	lds	r24, 0x00C1
    1f66:	80 78       	andi	r24, 0x80	; 128
    1f68:	80 93 c1 00 	sts	0x00C1, r24
    1f6c:	d4 c0       	rjmp	.+424    	; 0x2116 <V2P_RunStateMachine+0x2a8>
    1f6e:	0e 94 26 09 	call	0x124c <USART_Rx>
    1f72:	8b 31       	cpi	r24, 0x1B	; 27
    1f74:	89 f5       	brne	.+98     	; 0x1fd8 <V2P_RunStateMachine+0x16a>
    1f76:	c2 e0       	ldi	r28, 0x02	; 2
    1f78:	96 cf       	rjmp	.-212    	; 0x1ea6 <V2P_RunStateMachine+0x38>
    1f7a:	0e 94 26 09 	call	0x124c <USART_Rx>
    1f7e:	99 27       	eor	r25, r25
    1f80:	90 93 33 01 	sts	0x0133, r25
    1f84:	80 93 32 01 	sts	0x0132, r24
    1f88:	c3 e0       	ldi	r28, 0x03	; 3
    1f8a:	8d cf       	rjmp	.-230    	; 0x1ea6 <V2P_RunStateMachine+0x38>
    1f8c:	0e 94 26 09 	call	0x124c <USART_Rx>
    1f90:	99 27       	eor	r25, r25
    1f92:	98 2f       	mov	r25, r24
    1f94:	88 27       	eor	r24, r24
    1f96:	90 93 31 01 	sts	0x0131, r25
    1f9a:	80 93 30 01 	sts	0x0130, r24
    1f9e:	c4 e0       	ldi	r28, 0x04	; 4
    1fa0:	82 cf       	rjmp	.-252    	; 0x1ea6 <V2P_RunStateMachine+0x38>
    1fa2:	0e 94 26 09 	call	0x124c <USART_Rx>
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	33 27       	eor	r19, r19
    1faa:	80 91 30 01 	lds	r24, 0x0130
    1fae:	90 91 31 01 	lds	r25, 0x0131
    1fb2:	82 2b       	or	r24, r18
    1fb4:	93 2b       	or	r25, r19
    1fb6:	90 93 31 01 	sts	0x0131, r25
    1fba:	80 93 30 01 	sts	0x0130, r24
    1fbe:	83 51       	subi	r24, 0x13	; 19
    1fc0:	91 40       	sbci	r25, 0x01	; 1
    1fc2:	50 f4       	brcc	.+20     	; 0x1fd8 <V2P_RunStateMachine+0x16a>
    1fc4:	c5 e0       	ldi	r28, 0x05	; 5
    1fc6:	ee 24       	eor	r14, r14
    1fc8:	ff 24       	eor	r15, r15
    1fca:	6d cf       	rjmp	.-294    	; 0x1ea6 <V2P_RunStateMachine+0x38>
    1fcc:	0e 94 26 09 	call	0x124c <USART_Rx>
    1fd0:	8e 30       	cpi	r24, 0x0E	; 14
    1fd2:	11 f4       	brne	.+4      	; 0x1fd8 <V2P_RunStateMachine+0x16a>
    1fd4:	c6 e0       	ldi	r28, 0x06	; 6
    1fd6:	67 cf       	rjmp	.-306    	; 0x1ea6 <V2P_RunStateMachine+0x38>
    1fd8:	c9 e0       	ldi	r28, 0x09	; 9
    1fda:	65 cf       	rjmp	.-310    	; 0x1ea6 <V2P_RunStateMachine+0x38>
    1fdc:	80 91 30 01 	lds	r24, 0x0130
    1fe0:	90 91 31 01 	lds	r25, 0x0131
    1fe4:	e8 16       	cp	r14, r24
    1fe6:	f9 06       	cpc	r15, r25
    1fe8:	11 f4       	brne	.+4      	; 0x1fee <V2P_RunStateMachine+0x180>
    1fea:	c7 e0       	ldi	r28, 0x07	; 7
    1fec:	5c cf       	rjmp	.-328    	; 0x1ea6 <V2P_RunStateMachine+0x38>
    1fee:	87 01       	movw	r16, r14
    1ff0:	0c 5c       	subi	r16, 0xCC	; 204
    1ff2:	1e 4f       	sbci	r17, 0xFE	; 254
    1ff4:	08 94       	sec
    1ff6:	e1 1c       	adc	r14, r1
    1ff8:	f1 1c       	adc	r15, r1
    1ffa:	0e 94 26 09 	call	0x124c <USART_Rx>
    1ffe:	f8 01       	movw	r30, r16
    2000:	80 83       	st	Z, r24
    2002:	51 cf       	rjmp	.-350    	; 0x1ea6 <V2P_RunStateMachine+0x38>
    2004:	0e 94 ff 0d 	call	0x1bfe <V2P_GetChecksum>
    2008:	18 2f       	mov	r17, r24
    200a:	0e 94 26 09 	call	0x124c <USART_Rx>
    200e:	18 17       	cp	r17, r24
    2010:	09 f0       	breq	.+2      	; 0x2014 <V2P_RunStateMachine+0x1a6>
    2012:	74 c0       	rjmp	.+232    	; 0x20fc <V2P_RunStateMachine+0x28e>
    2014:	80 91 34 01 	lds	r24, 0x0134
    2018:	99 27       	eor	r25, r25
    201a:	84 30       	cpi	r24, 0x04	; 4
    201c:	91 05       	cpc	r25, r1
    201e:	3c f4       	brge	.+14     	; 0x202e <V2P_RunStateMachine+0x1c0>
    2020:	82 30       	cpi	r24, 0x02	; 2
    2022:	91 05       	cpc	r25, r1
    2024:	0c f0       	brlt	.+2      	; 0x2028 <V2P_RunStateMachine+0x1ba>
    2026:	61 c0       	rjmp	.+194    	; 0x20ea <V2P_RunStateMachine+0x27c>
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	39 f0       	breq	.+14     	; 0x203a <V2P_RunStateMachine+0x1cc>
    202c:	61 c0       	rjmp	.+194    	; 0x20f0 <V2P_RunStateMachine+0x282>
    202e:	86 30       	cpi	r24, 0x06	; 6
    2030:	91 05       	cpc	r25, r1
    2032:	e9 f0       	breq	.+58     	; 0x206e <V2P_RunStateMachine+0x200>
    2034:	07 97       	sbiw	r24, 0x07	; 7
    2036:	99 f0       	breq	.+38     	; 0x205e <V2P_RunStateMachine+0x1f0>
    2038:	5b c0       	rjmp	.+182    	; 0x20f0 <V2P_RunStateMachine+0x282>
    203a:	8b e0       	ldi	r24, 0x0B	; 11
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	90 93 31 01 	sts	0x0131, r25
    2042:	80 93 30 01 	sts	0x0130, r24
    2046:	a4 e3       	ldi	r26, 0x34	; 52
    2048:	b1 e0       	ldi	r27, 0x01	; 1
    204a:	ea ed       	ldi	r30, 0xDA	; 218
    204c:	f3 e0       	ldi	r31, 0x03	; 3
    204e:	9a e0       	ldi	r25, 0x0A	; 10
    2050:	84 91       	lpm	r24, Z
    2052:	8d 93       	st	X+, r24
    2054:	91 50       	subi	r25, 0x01	; 1
    2056:	31 96       	adiw	r30, 0x01	; 1
    2058:	97 ff       	sbrs	r25, 7
    205a:	fa cf       	rjmp	.-12     	; 0x2050 <V2P_RunStateMachine+0x1e2>
    205c:	58 c0       	rjmp	.+176    	; 0x210e <V2P_RunStateMachine+0x2a0>
    205e:	82 e0       	ldi	r24, 0x02	; 2
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	90 93 31 01 	sts	0x0131, r25
    2066:	80 93 30 01 	sts	0x0130, r24
    206a:	80 ec       	ldi	r24, 0xC0	; 192
    206c:	4e c0       	rjmp	.+156    	; 0x210a <V2P_RunStateMachine+0x29c>
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	90 93 31 01 	sts	0x0131, r25
    2076:	80 93 30 01 	sts	0x0130, r24
    207a:	0e 94 0e 0f 	call	0x1e1c <V2P_CheckForExtendedAddress>
    207e:	80 91 35 01 	lds	r24, 0x0135
    2082:	99 27       	eor	r25, r25
    2084:	aa 27       	eor	r26, r26
    2086:	bb 27       	eor	r27, r27
    2088:	b8 2f       	mov	r27, r24
    208a:	aa 27       	eor	r26, r26
    208c:	99 27       	eor	r25, r25
    208e:	88 27       	eor	r24, r24
    2090:	20 91 36 01 	lds	r18, 0x0136
    2094:	33 27       	eor	r19, r19
    2096:	44 27       	eor	r20, r20
    2098:	55 27       	eor	r21, r21
    209a:	a9 01       	movw	r20, r18
    209c:	33 27       	eor	r19, r19
    209e:	22 27       	eor	r18, r18
    20a0:	82 2b       	or	r24, r18
    20a2:	93 2b       	or	r25, r19
    20a4:	a4 2b       	or	r26, r20
    20a6:	b5 2b       	or	r27, r21
    20a8:	20 91 37 01 	lds	r18, 0x0137
    20ac:	33 27       	eor	r19, r19
    20ae:	44 27       	eor	r20, r20
    20b0:	55 27       	eor	r21, r21
    20b2:	54 2f       	mov	r21, r20
    20b4:	43 2f       	mov	r20, r19
    20b6:	32 2f       	mov	r19, r18
    20b8:	22 27       	eor	r18, r18
    20ba:	82 2b       	or	r24, r18
    20bc:	93 2b       	or	r25, r19
    20be:	a4 2b       	or	r26, r20
    20c0:	b5 2b       	or	r27, r21
    20c2:	20 91 38 01 	lds	r18, 0x0138
    20c6:	33 27       	eor	r19, r19
    20c8:	44 27       	eor	r20, r20
    20ca:	55 27       	eor	r21, r21
    20cc:	82 2b       	or	r24, r18
    20ce:	93 2b       	or	r25, r19
    20d0:	a4 2b       	or	r26, r20
    20d2:	b5 2b       	or	r27, r21
    20d4:	80 93 2b 01 	sts	0x012B, r24
    20d8:	90 93 2c 01 	sts	0x012C, r25
    20dc:	a0 93 2d 01 	sts	0x012D, r26
    20e0:	b0 93 2e 01 	sts	0x012E, r27
    20e4:	10 92 35 01 	sts	0x0135, r1
    20e8:	12 c0       	rjmp	.+36     	; 0x210e <V2P_RunStateMachine+0x2a0>
    20ea:	0e 94 60 0e 	call	0x1cc0 <V2P_GetSetParamater>
    20ee:	11 c0       	rjmp	.+34     	; 0x2112 <V2P_RunStateMachine+0x2a4>
    20f0:	e0 91 24 01 	lds	r30, 0x0124
    20f4:	f0 91 25 01 	lds	r31, 0x0125
    20f8:	09 95       	icall
    20fa:	0b c0       	rjmp	.+22     	; 0x2112 <V2P_RunStateMachine+0x2a4>
    20fc:	82 e0       	ldi	r24, 0x02	; 2
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	90 93 31 01 	sts	0x0131, r25
    2104:	80 93 30 01 	sts	0x0130, r24
    2108:	81 ec       	ldi	r24, 0xC1	; 193
    210a:	80 93 35 01 	sts	0x0135, r24
    210e:	0e 94 20 0e 	call	0x1c40 <V2P_SendPacket>
    2112:	c8 e0       	ldi	r28, 0x08	; 8
    2114:	c8 ce       	rjmp	.-624    	; 0x1ea6 <V2P_RunStateMachine+0x38>
    2116:	cf 91       	pop	r28
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	08 95       	ret

00002122 <ISPCC_EnterChipProgrammingMode>:

// ======================================================================================

void ISPCC_EnterChipProgrammingMode(void)
{
    2122:	0f 93       	push	r16
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
	uint8_t ByteDelay = PacketBytes[5];
    2128:	10 91 39 01 	lds	r17, 0x0139
	uint8_t Attempts  = PacketBytes[4];
    212c:	c0 91 38 01 	lds	r28, 0x0138
	uint8_t Response;

	MAIN_Delay1MS(PacketBytes[2]);         // Wait before continuing, amount specified in the packet
    2130:	80 91 36 01 	lds	r24, 0x0136
    2134:	0e 94 19 03 	call	0x632 <MAIN_Delay1MS>

	if ((!(Attempts)) || (Attempts > 100)) // if no attempts or too high a value is specified, a fixed number is chosen
    2138:	8c 2f       	mov	r24, r28
    213a:	81 50       	subi	r24, 0x01	; 1
    213c:	84 36       	cpi	r24, 0x64	; 100
    213e:	08 f0       	brcs	.+2      	; 0x2142 <ISPCC_EnterChipProgrammingMode+0x20>
	   Attempts = 24;
    2140:	c8 e1       	ldi	r28, 0x18	; 24
		
	while (Attempts--)
	{
		USI_SPITransmit(PacketBytes[8]);
		MAIN_Delay1MS(ByteDelay);
		USI_SPITransmit(PacketBytes[9]);
		MAIN_Delay1MS(ByteDelay);
			
		Response = USI_SPITransmit(PacketBytes[10]);
		MAIN_Delay1MS(ByteDelay);

		if (PacketBytes[7] == ISPCC_POLL_MODE_AVR)
		  USI_SPITransmit(PacketBytes[11]);
		else
		  Response = USI_SPITransmit(PacketBytes[11]);
				
		if (!(PacketBytes[7]) || (Response == PacketBytes[6])) // Polling disabled, or returned value matches expected poll value
		{
			MAIN_Delay1MS(ByteDelay);

			InProgrammingMode = TRUE;
			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;
			return;
		}
		
		MAIN_Delay1MS(ByteDelay);
		USI_SPIToggleClock();            // Out of sync, shift in one bit and try again
    2142:	c1 50       	subi	r28, 0x01	; 1
    2144:	cf 3f       	cpi	r28, 0xFF	; 255
    2146:	09 f4       	brne	.+2      	; 0x214a <ISPCC_EnterChipProgrammingMode+0x28>
    2148:	3f c0       	rjmp	.+126    	; 0x21c8 <ISPCC_EnterChipProgrammingMode+0xa6>
    214a:	80 91 3c 01 	lds	r24, 0x013C
    214e:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    2152:	81 2f       	mov	r24, r17
    2154:	0e 94 19 03 	call	0x632 <MAIN_Delay1MS>
    2158:	80 91 3d 01 	lds	r24, 0x013D
    215c:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    2160:	81 2f       	mov	r24, r17
    2162:	0e 94 19 03 	call	0x632 <MAIN_Delay1MS>
    2166:	80 91 3e 01 	lds	r24, 0x013E
    216a:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    216e:	08 2f       	mov	r16, r24
    2170:	81 2f       	mov	r24, r17
    2172:	0e 94 19 03 	call	0x632 <MAIN_Delay1MS>
    2176:	80 91 3b 01 	lds	r24, 0x013B
    217a:	83 30       	cpi	r24, 0x03	; 3
    217c:	29 f4       	brne	.+10     	; 0x2188 <ISPCC_EnterChipProgrammingMode+0x66>
    217e:	80 91 3f 01 	lds	r24, 0x013F
    2182:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    2186:	05 c0       	rjmp	.+10     	; 0x2192 <ISPCC_EnterChipProgrammingMode+0x70>
    2188:	80 91 3f 01 	lds	r24, 0x013F
    218c:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    2190:	08 2f       	mov	r16, r24
    2192:	80 91 3b 01 	lds	r24, 0x013B
    2196:	88 23       	and	r24, r24
    2198:	21 f0       	breq	.+8      	; 0x21a2 <ISPCC_EnterChipProgrammingMode+0x80>
    219a:	80 91 3a 01 	lds	r24, 0x013A
    219e:	08 17       	cp	r16, r24
    21a0:	69 f4       	brne	.+26     	; 0x21bc <ISPCC_EnterChipProgrammingMode+0x9a>
    21a2:	81 2f       	mov	r24, r17
    21a4:	0e 94 19 03 	call	0x632 <MAIN_Delay1MS>
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	80 93 2f 01 	sts	0x012F, r24
    21ae:	81 b3       	in	r24, 0x11	; 17
    21b0:	8f 7c       	andi	r24, 0xCF	; 207
    21b2:	80 62       	ori	r24, 0x20	; 32
    21b4:	81 bb       	out	0x11, r24	; 17
    21b6:	10 92 35 01 	sts	0x0135, r1
    21ba:	0d c0       	rjmp	.+26     	; 0x21d6 <ISPCC_EnterChipProgrammingMode+0xb4>
    21bc:	81 2f       	mov	r24, r17
    21be:	0e 94 19 03 	call	0x632 <MAIN_Delay1MS>
    21c2:	0e 94 e8 09 	call	0x13d0 <USI_SPIToggleClock>
    21c6:	bd cf       	rjmp	.-134    	; 0x2142 <ISPCC_EnterChipProgrammingMode+0x20>
	}

	// If function hasn't returned by now, all the attempts have failed. Show this by
	// resetting the status leds to green (ready) and send a fail message.

	MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
    21c8:	81 b3       	in	r24, 0x11	; 17
    21ca:	8f 7c       	andi	r24, 0xCF	; 207
    21cc:	80 61       	ori	r24, 0x10	; 16
    21ce:	81 bb       	out	0x11, r24	; 17
	PacketBytes[1] = STATUS_CMD_FAILED;
    21d0:	80 ec       	ldi	r24, 0xC0	; 192
    21d2:	80 93 35 01 	sts	0x0135, r24
    21d6:	cf 91       	pop	r28
    21d8:	1f 91       	pop	r17
    21da:	0f 91       	pop	r16
    21dc:	08 95       	ret

000021de <ISPCC_PollForProgComplete>:
}

void ISPCC_ProgramChip(void)
{
	uint16_t PollAddress  = 0;
	uint8_t  ProgMode     = PacketBytes[3];
	uint8_t  WriteCommand = PacketBytes[5];
	uint16_t StartAddress = (uint16_t)CurrAddress;
	uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
	                      | PacketBytes[2];
	uint8_t  PollType;
	uint8_t  ByteToWrite;
			
	if (ProgMode & ISPCC_PROG_MODE_PAGE)                 // Page writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++) // Transmit the page bytes
		{
			ByteToWrite = PacketBytes[10 + WriteByte];
		
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash write mode - word addresses so MSB/LSB masking 
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else                                         // EEPROM write mode - byte addresses so no masking 
			   USI_SPITransmit(WriteCommand);

			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Only the LSW of the address should be sent
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			if (!(PollAddress))
			{
				if ((PacketBytes[8] != ByteToWrite)       // Can do polling
				   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
				{
					PollAddress = (CurrAddress & 0xFFFF); // Save the current address
				
					if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
					   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
				}
			}

			// Flash addresses are in words; only increment address on odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();
		}

		PollType = ProgMode;

		if (ProgMode & ISPCC_PROG_MODE_PAGEDONE)         // If this packet is the end of a page, we need to send the program page command
		{
			USI_SPITransmit(PacketBytes[6]);             // Send the write program memory page command
			USI_SPITransmitWord(StartAddress);           // Send the page address word
			USI_SPITransmit(0x00);

			if (!(PollAddress))                          // No polling address
			   PollType = ((ProgMode & ~ISPCC_PAGE_POLLTYPE_MASK) | ISPCC_PAGE_POLLTYPE_WAIT);

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
	else                                                 // Flash Word writing mode or EEPROM byte writing mode
	{
		for (uint16_t WriteByte = 0; WriteByte < BytesToWrite; WriteByte++)
		{
			ByteToWrite = PacketBytes[10 + WriteByte];

			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
			   USI_SPITransmit(WriteCommand | ((WriteByte & 0x01)? ISPCC_HIGH_BYTE_WRITE : ISPCC_LOW_BYTE_WRITE));
			else
			   USI_SPITransmit(WriteCommand);					
					
			USI_SPITransmitWord(CurrAddress & 0xFFFF);    // Transmit the current address to the slave AVR
			USI_SPITransmit(ByteToWrite);                 // Send one of the new bytes to be written

			PollType = ProgMode;

			if ((PacketBytes[8] != ByteToWrite)           // Can do polling
			   && ((PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) || ((PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP) && (PacketBytes[9] != ByteToWrite))))
			{
				PollAddress = (CurrAddress & 0xFFFF);     // Save the current address;

				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)
				   PollAddress = ((PollAddress << 1) + (WriteByte & 0x01));
			}
			else
			{
				PollType = ((ProgMode & ~ISPCC_WORD_POLLTYPE_MASK) | ISPCC_WORD_POLLTYPE_WAIT);
			}					

			// Flash addresses are in words; only increment address on the odd byte, OR if it's the EEPROM being programmed (byte addresses)
			if ((WriteByte & 0x01) || (PacketBytes[0] == CMD_PROGRAM_EEPROM_ISP))
			   V2P_IncrementCurrAddress();

			ISPCC_PollForProgComplete(PollType, PollAddress);
		}
	}
}

void ISPCC_PollForProgComplete(uint8_t PollData, uint16_t PollAddr)
{
    21de:	1f 93       	push	r17
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	eb 01       	movw	r28, r22
	uint8_t PollType;
	uint8_t ProgCommand;

	if (PollData & ISPCC_PROG_MODE_PAGE)
    21e6:	99 27       	eor	r25, r25
    21e8:	80 ff       	sbrs	r24, 0
    21ea:	08 c0       	rjmp	.+16     	; 0x21fc <ISPCC_PollForProgComplete+0x1e>
	   PollType = ((PollData & ISPCC_PAGE_POLLTYPE_MASK) >> ISPCC_PAGE_POLLTYPE_MASKSHIFT);
    21ec:	80 77       	andi	r24, 0x70	; 112
    21ee:	90 70       	andi	r25, 0x00	; 0
    21f0:	34 e0       	ldi	r19, 0x04	; 4
    21f2:	95 95       	asr	r25
    21f4:	87 95       	ror	r24
    21f6:	3a 95       	dec	r19
    21f8:	e1 f7       	brne	.-8      	; 0x21f2 <ISPCC_PollForProgComplete+0x14>
    21fa:	04 c0       	rjmp	.+8      	; 0x2204 <ISPCC_PollForProgComplete+0x26>
	else
	   PollType = ((PollData & ISPCC_WORD_POLLTYPE_MASK) >> ISPCC_WORD_POLLTYPE_MASKSHIFT);	
    21fc:	8e 70       	andi	r24, 0x0E	; 14
    21fe:	90 70       	andi	r25, 0x00	; 0
    2200:	95 95       	asr	r25
    2202:	87 95       	ror	r24

	switch (PollType & ISPCC_POLLTYPE_MASK)
    2204:	99 27       	eor	r25, r25
    2206:	87 70       	andi	r24, 0x07	; 7
    2208:	90 70       	andi	r25, 0x00	; 0
    220a:	82 30       	cpi	r24, 0x02	; 2
    220c:	91 05       	cpc	r25, r1
    220e:	19 f0       	breq	.+6      	; 0x2216 <ISPCC_PollForProgComplete+0x38>
    2210:	04 97       	sbiw	r24, 0x04	; 4
    2212:	e1 f0       	breq	.+56     	; 0x224c <ISPCC_PollForProgComplete+0x6e>
    2214:	26 c0       	rjmp	.+76     	; 0x2262 <ISPCC_PollForProgComplete+0x84>
	{
		case ISPCC_POLLTYPE_DATA:
			ProgCommand = PacketBytes[7];
    2216:	10 91 3b 01 	lds	r17, 0x013B
			
			if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP) // Flash uses word addresses
    221a:	80 91 34 01 	lds	r24, 0x0134
    221e:	83 31       	cpi	r24, 0x13	; 19
    2220:	39 f4       	brne	.+14     	; 0x2230 <ISPCC_PollForProgComplete+0x52>
			{
				ProgCommand  |= ((PollAddr & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ);
    2222:	81 2f       	mov	r24, r17
    2224:	99 27       	eor	r25, r25
    2226:	c0 fd       	sbrc	r28, 0
    2228:	88 60       	ori	r24, 0x08	; 8
    222a:	18 2f       	mov	r17, r24
				PollAddr    >>= 1;
    222c:	d6 95       	lsr	r29
    222e:	c7 95       	ror	r28
			}

			do
			{
				USI_SPITransmit(ProgCommand);
    2230:	81 2f       	mov	r24, r17
    2232:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
				USI_SPITransmitWord(PollAddr);
    2236:	ce 01       	movw	r24, r28
    2238:	0e 94 da 09 	call	0x13b4 <USI_SPITransmitWord>
			}
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    2242:	90 91 3c 01 	lds	r25, 0x013C
    2246:	89 17       	cp	r24, r25
    2248:	99 f3       	breq	.-26     	; 0x2230 <ISPCC_PollForProgComplete+0x52>
			while (USI_SPITransmit(0x00) == PacketBytes[8]);
						
			break;
    224a:	0f c0       	rjmp	.+30     	; 0x226a <ISPCC_PollForProgComplete+0x8c>
		case ISPCC_POLLTYPE_READY:
			do
			   USI_SPITransmitWord(0xF000);
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	90 ef       	ldi	r25, 0xF0	; 240
    2250:	0e 94 da 09 	call	0x13b4 <USI_SPITransmitWord>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	0e 94 da 09 	call	0x13b4 <USI_SPITransmitWord>
    225c:	80 fd       	sbrc	r24, 0
    225e:	f6 cf       	rjmp	.-20     	; 0x224c <ISPCC_PollForProgComplete+0x6e>
			while (USI_SPITransmitWord(0x0000) & ISPCC_POLL_BUSYFLAG);

			break;
    2260:	04 c0       	rjmp	.+8      	; 0x226a <ISPCC_PollForProgComplete+0x8c>
		default:                                      // Default is Wait polling
			MAIN_Delay1MS(PacketBytes[4]);	
    2262:	80 91 38 01 	lds	r24, 0x0138
    2266:	0e 94 19 03 	call	0x632 <MAIN_Delay1MS>
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	1f 91       	pop	r17
    2270:	08 95       	ret

00002272 <ISPCC_ProgramChip>:
    2272:	6f 92       	push	r6
    2274:	7f 92       	push	r7
    2276:	9f 92       	push	r9
    2278:	af 92       	push	r10
    227a:	bf 92       	push	r11
    227c:	cf 92       	push	r12
    227e:	df 92       	push	r13
    2280:	ef 92       	push	r14
    2282:	ff 92       	push	r15
    2284:	0f 93       	push	r16
    2286:	1f 93       	push	r17
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	00 e0       	ldi	r16, 0x00	; 0
    228e:	10 e0       	ldi	r17, 0x00	; 0
    2290:	90 90 37 01 	lds	r9, 0x0137
    2294:	c0 90 39 01 	lds	r12, 0x0139
    2298:	60 90 2b 01 	lds	r6, 0x012B
    229c:	70 90 2c 01 	lds	r7, 0x012C
    22a0:	80 91 35 01 	lds	r24, 0x0135
    22a4:	99 27       	eor	r25, r25
    22a6:	b8 2e       	mov	r11, r24
    22a8:	aa 24       	eor	r10, r10
    22aa:	80 91 36 01 	lds	r24, 0x0136
    22ae:	99 27       	eor	r25, r25
    22b0:	a8 2a       	or	r10, r24
    22b2:	b9 2a       	or	r11, r25
    22b4:	90 fe       	sbrs	r9, 0
    22b6:	62 c0       	rjmp	.+196    	; 0x237c <ISPCC_ProgramChip+0x10a>
    22b8:	78 01       	movw	r14, r16
    22ba:	0a 15       	cp	r16, r10
    22bc:	1b 05       	cpc	r17, r11
    22be:	08 f0       	brcs	.+2      	; 0x22c2 <ISPCC_ProgramChip+0x50>
    22c0:	46 c0       	rjmp	.+140    	; 0x234e <ISPCC_ProgramChip+0xdc>
    22c2:	ce e3       	ldi	r28, 0x3E	; 62
    22c4:	d1 e0       	ldi	r29, 0x01	; 1
    22c6:	d9 90       	ld	r13, Y+
    22c8:	80 91 34 01 	lds	r24, 0x0134
    22cc:	83 31       	cpi	r24, 0x13	; 19
    22ce:	31 f4       	brne	.+12     	; 0x22dc <ISPCC_ProgramChip+0x6a>
    22d0:	8c 2d       	mov	r24, r12
    22d2:	99 27       	eor	r25, r25
    22d4:	e0 fe       	sbrs	r14, 0
    22d6:	03 c0       	rjmp	.+6      	; 0x22de <ISPCC_ProgramChip+0x6c>
    22d8:	88 60       	ori	r24, 0x08	; 8
    22da:	01 c0       	rjmp	.+2      	; 0x22de <ISPCC_ProgramChip+0x6c>
    22dc:	8c 2d       	mov	r24, r12
    22de:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    22e2:	80 91 2b 01 	lds	r24, 0x012B
    22e6:	90 91 2c 01 	lds	r25, 0x012C
    22ea:	0e 94 da 09 	call	0x13b4 <USI_SPITransmitWord>
    22ee:	8d 2d       	mov	r24, r13
    22f0:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    22f4:	01 15       	cp	r16, r1
    22f6:	11 05       	cpc	r17, r1
    22f8:	d9 f4       	brne	.+54     	; 0x2330 <ISPCC_ProgramChip+0xbe>
    22fa:	80 91 3c 01 	lds	r24, 0x013C
    22fe:	8d 15       	cp	r24, r13
    2300:	b9 f0       	breq	.+46     	; 0x2330 <ISPCC_ProgramChip+0xbe>
    2302:	90 91 34 01 	lds	r25, 0x0134
    2306:	93 31       	cpi	r25, 0x13	; 19
    2308:	31 f0       	breq	.+12     	; 0x2316 <ISPCC_ProgramChip+0xa4>
    230a:	95 31       	cpi	r25, 0x15	; 21
    230c:	89 f4       	brne	.+34     	; 0x2330 <ISPCC_ProgramChip+0xbe>
    230e:	80 91 3d 01 	lds	r24, 0x013D
    2312:	8d 15       	cp	r24, r13
    2314:	69 f0       	breq	.+26     	; 0x2330 <ISPCC_ProgramChip+0xbe>
    2316:	00 91 2b 01 	lds	r16, 0x012B
    231a:	10 91 2c 01 	lds	r17, 0x012C
    231e:	93 31       	cpi	r25, 0x13	; 19
    2320:	39 f4       	brne	.+14     	; 0x2330 <ISPCC_ProgramChip+0xbe>
    2322:	00 0f       	add	r16, r16
    2324:	11 1f       	adc	r17, r17
    2326:	c7 01       	movw	r24, r14
    2328:	81 70       	andi	r24, 0x01	; 1
    232a:	90 70       	andi	r25, 0x00	; 0
    232c:	08 0f       	add	r16, r24
    232e:	19 1f       	adc	r17, r25
    2330:	e0 fc       	sbrc	r14, 0
    2332:	04 c0       	rjmp	.+8      	; 0x233c <ISPCC_ProgramChip+0xca>
    2334:	80 91 34 01 	lds	r24, 0x0134
    2338:	85 31       	cpi	r24, 0x15	; 21
    233a:	11 f4       	brne	.+4      	; 0x2340 <ISPCC_ProgramChip+0xce>
    233c:	0e 94 fa 0e 	call	0x1df4 <V2P_IncrementCurrAddress>
    2340:	08 94       	sec
    2342:	e1 1c       	adc	r14, r1
    2344:	f1 1c       	adc	r15, r1
    2346:	ea 14       	cp	r14, r10
    2348:	fb 04       	cpc	r15, r11
    234a:	08 f4       	brcc	.+2      	; 0x234e <ISPCC_ProgramChip+0xdc>
    234c:	bc cf       	rjmp	.-136    	; 0x22c6 <ISPCC_ProgramChip+0x54>
    234e:	c9 2d       	mov	r28, r9
    2350:	97 fe       	sbrs	r9, 7
    2352:	69 c0       	rjmp	.+210    	; 0x2426 <ISPCC_ProgramChip+0x1b4>
    2354:	80 91 3a 01 	lds	r24, 0x013A
    2358:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    235c:	c3 01       	movw	r24, r6
    235e:	0e 94 da 09 	call	0x13b4 <USI_SPITransmitWord>
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    2368:	01 15       	cp	r16, r1
    236a:	11 05       	cpc	r17, r1
    236c:	11 f4       	brne	.+4      	; 0x2372 <ISPCC_ProgramChip+0x100>
    236e:	cf 78       	andi	r28, 0x8F	; 143
    2370:	c0 61       	ori	r28, 0x10	; 16
    2372:	b8 01       	movw	r22, r16
    2374:	8c 2f       	mov	r24, r28
    2376:	0e 94 ef 10 	call	0x21de <ISPCC_PollForProgComplete>
    237a:	55 c0       	rjmp	.+170    	; 0x2426 <ISPCC_ProgramChip+0x1b4>
    237c:	78 01       	movw	r14, r16
    237e:	0a 15       	cp	r16, r10
    2380:	1b 05       	cpc	r17, r11
    2382:	08 f0       	brcs	.+2      	; 0x2386 <ISPCC_ProgramChip+0x114>
    2384:	50 c0       	rjmp	.+160    	; 0x2426 <ISPCC_ProgramChip+0x1b4>
    2386:	5e e3       	ldi	r21, 0x3E	; 62
    2388:	65 2e       	mov	r6, r21
    238a:	51 e0       	ldi	r21, 0x01	; 1
    238c:	75 2e       	mov	r7, r21
    238e:	f3 01       	movw	r30, r6
    2390:	d1 90       	ld	r13, Z+
    2392:	3f 01       	movw	r6, r30
    2394:	80 91 34 01 	lds	r24, 0x0134
    2398:	83 31       	cpi	r24, 0x13	; 19
    239a:	31 f4       	brne	.+12     	; 0x23a8 <ISPCC_ProgramChip+0x136>
    239c:	8c 2d       	mov	r24, r12
    239e:	99 27       	eor	r25, r25
    23a0:	e0 fe       	sbrs	r14, 0
    23a2:	03 c0       	rjmp	.+6      	; 0x23aa <ISPCC_ProgramChip+0x138>
    23a4:	88 60       	ori	r24, 0x08	; 8
    23a6:	01 c0       	rjmp	.+2      	; 0x23aa <ISPCC_ProgramChip+0x138>
    23a8:	8c 2d       	mov	r24, r12
    23aa:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    23ae:	80 91 2b 01 	lds	r24, 0x012B
    23b2:	90 91 2c 01 	lds	r25, 0x012C
    23b6:	0e 94 da 09 	call	0x13b4 <USI_SPITransmitWord>
    23ba:	8d 2d       	mov	r24, r13
    23bc:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    23c0:	c9 2d       	mov	r28, r9
    23c2:	80 91 3c 01 	lds	r24, 0x013C
    23c6:	8d 15       	cp	r24, r13
    23c8:	c1 f0       	breq	.+48     	; 0x23fa <ISPCC_ProgramChip+0x188>
    23ca:	90 91 34 01 	lds	r25, 0x0134
    23ce:	93 31       	cpi	r25, 0x13	; 19
    23d0:	31 f0       	breq	.+12     	; 0x23de <ISPCC_ProgramChip+0x16c>
    23d2:	95 31       	cpi	r25, 0x15	; 21
    23d4:	91 f4       	brne	.+36     	; 0x23fa <ISPCC_ProgramChip+0x188>
    23d6:	80 91 3d 01 	lds	r24, 0x013D
    23da:	8d 15       	cp	r24, r13
    23dc:	71 f0       	breq	.+28     	; 0x23fa <ISPCC_ProgramChip+0x188>
    23de:	00 91 2b 01 	lds	r16, 0x012B
    23e2:	10 91 2c 01 	lds	r17, 0x012C
    23e6:	93 31       	cpi	r25, 0x13	; 19
    23e8:	59 f4       	brne	.+22     	; 0x2400 <ISPCC_ProgramChip+0x18e>
    23ea:	00 0f       	add	r16, r16
    23ec:	11 1f       	adc	r17, r17
    23ee:	c7 01       	movw	r24, r14
    23f0:	81 70       	andi	r24, 0x01	; 1
    23f2:	90 70       	andi	r25, 0x00	; 0
    23f4:	08 0f       	add	r16, r24
    23f6:	19 1f       	adc	r17, r25
    23f8:	03 c0       	rjmp	.+6      	; 0x2400 <ISPCC_ProgramChip+0x18e>
    23fa:	c9 2d       	mov	r28, r9
    23fc:	c1 7f       	andi	r28, 0xF1	; 241
    23fe:	c2 60       	ori	r28, 0x02	; 2
    2400:	e0 fc       	sbrc	r14, 0
    2402:	04 c0       	rjmp	.+8      	; 0x240c <ISPCC_ProgramChip+0x19a>
    2404:	80 91 34 01 	lds	r24, 0x0134
    2408:	85 31       	cpi	r24, 0x15	; 21
    240a:	11 f4       	brne	.+4      	; 0x2410 <ISPCC_ProgramChip+0x19e>
    240c:	0e 94 fa 0e 	call	0x1df4 <V2P_IncrementCurrAddress>
    2410:	b8 01       	movw	r22, r16
    2412:	8c 2f       	mov	r24, r28
    2414:	0e 94 ef 10 	call	0x21de <ISPCC_PollForProgComplete>
    2418:	08 94       	sec
    241a:	e1 1c       	adc	r14, r1
    241c:	f1 1c       	adc	r15, r1
    241e:	ea 14       	cp	r14, r10
    2420:	fb 04       	cpc	r15, r11
    2422:	08 f4       	brcc	.+2      	; 0x2426 <ISPCC_ProgramChip+0x1b4>
    2424:	b4 cf       	rjmp	.-152    	; 0x238e <ISPCC_ProgramChip+0x11c>
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	ff 90       	pop	r15
    2430:	ef 90       	pop	r14
    2432:	df 90       	pop	r13
    2434:	cf 90       	pop	r12
    2436:	bf 90       	pop	r11
    2438:	af 90       	pop	r10
    243a:	9f 90       	pop	r9
    243c:	7f 90       	pop	r7
    243e:	6f 90       	pop	r6
    2440:	08 95       	ret

00002442 <AICI_InterpretPacket>:

// ======================================================================================

void AICI_InterpretPacket(void)
{
    2442:	df 92       	push	r13
    2444:	ef 92       	push	r14
    2446:	ff 92       	push	r15
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
	switch (PacketBytes[0])
    2450:	80 91 34 01 	lds	r24, 0x0134
    2454:	99 27       	eor	r25, r25
    2456:	86 31       	cpi	r24, 0x16	; 22
    2458:	91 05       	cpc	r25, r1
    245a:	09 f4       	brne	.+2      	; 0x245e <AICI_InterpretPacket+0x1c>
    245c:	fa c0       	rjmp	.+500    	; 0x2652 <AICI_InterpretPacket+0x210>
    245e:	87 31       	cpi	r24, 0x17	; 23
    2460:	91 05       	cpc	r25, r1
    2462:	94 f4       	brge	.+36     	; 0x2488 <AICI_InterpretPacket+0x46>
    2464:	82 31       	cpi	r24, 0x12	; 18
    2466:	91 05       	cpc	r25, r1
    2468:	09 f4       	brne	.+2      	; 0x246c <AICI_InterpretPacket+0x2a>
    246a:	5f c0       	rjmp	.+190    	; 0x252a <AICI_InterpretPacket+0xe8>
    246c:	83 31       	cpi	r24, 0x13	; 19
    246e:	91 05       	cpc	r25, r1
    2470:	3c f4       	brge	.+14     	; 0x2480 <AICI_InterpretPacket+0x3e>
    2472:	80 31       	cpi	r24, 0x10	; 16
    2474:	91 05       	cpc	r25, r1
    2476:	f9 f0       	breq	.+62     	; 0x24b6 <AICI_InterpretPacket+0x74>
    2478:	41 97       	sbiw	r24, 0x11	; 17
    247a:	09 f4       	brne	.+2      	; 0x247e <AICI_InterpretPacket+0x3c>
    247c:	3c c0       	rjmp	.+120    	; 0x24f6 <AICI_InterpretPacket+0xb4>
    247e:	3d c1       	rjmp	.+634    	; 0x26fa <AICI_InterpretPacket+0x2b8>
    2480:	44 97       	sbiw	r24, 0x14	; 20
    2482:	09 f4       	brne	.+2      	; 0x2486 <AICI_InterpretPacket+0x44>
    2484:	e6 c0       	rjmp	.+460    	; 0x2652 <AICI_InterpretPacket+0x210>
    2486:	2e c1       	rjmp	.+604    	; 0x26e4 <AICI_InterpretPacket+0x2a2>
    2488:	89 31       	cpi	r24, 0x19	; 25
    248a:	91 05       	cpc	r25, r1
    248c:	09 f4       	brne	.+2      	; 0x2490 <AICI_InterpretPacket+0x4e>
    248e:	cb c0       	rjmp	.+406    	; 0x2626 <AICI_InterpretPacket+0x1e4>
    2490:	8a 31       	cpi	r24, 0x1A	; 26
    2492:	91 05       	cpc	r25, r1
    2494:	44 f4       	brge	.+16     	; 0x24a6 <AICI_InterpretPacket+0x64>
    2496:	87 31       	cpi	r24, 0x17	; 23
    2498:	91 05       	cpc	r25, r1
    249a:	09 f4       	brne	.+2      	; 0x249e <AICI_InterpretPacket+0x5c>
    249c:	c4 c0       	rjmp	.+392    	; 0x2626 <AICI_InterpretPacket+0x1e4>
    249e:	48 97       	sbiw	r24, 0x18	; 24
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <AICI_InterpretPacket+0x62>
    24a2:	a4 c0       	rjmp	.+328    	; 0x25ec <AICI_InterpretPacket+0x1aa>
    24a4:	2a c1       	rjmp	.+596    	; 0x26fa <AICI_InterpretPacket+0x2b8>
    24a6:	8d 31       	cpi	r24, 0x1D	; 29
    24a8:	91 05       	cpc	r25, r1
    24aa:	0c f4       	brge	.+2      	; 0x24ae <AICI_InterpretPacket+0x6c>
    24ac:	9f c0       	rjmp	.+318    	; 0x25ec <AICI_InterpretPacket+0x1aa>
    24ae:	4d 97       	sbiw	r24, 0x1d	; 29
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <AICI_InterpretPacket+0x72>
    24b2:	60 c0       	rjmp	.+192    	; 0x2574 <AICI_InterpretPacket+0x132>
    24b4:	22 c1       	rjmp	.+580    	; 0x26fa <AICI_InterpretPacket+0x2b8>
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	90 93 31 01 	sts	0x0131, r25
    24be:	80 93 30 01 	sts	0x0130, r24
			
			USI_SPIInitMaster(eeprom_read_byte_169(&Param_SCKDuration));
    24c2:	80 e2       	ldi	r24, 0x20	; 32
    24c4:	91 e0       	ldi	r25, 0x01	; 1
    24c6:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    24ca:	0e 94 ad 09 	call	0x135a <USI_SPIInitMaster>

			MAIN_ResetCSLine(MAIN_RESETCS_ACTIVE);  // Pull the slave AVR's RESET line to active
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	0e 94 2b 03 	call	0x656 <MAIN_ResetCSLine>
			MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE); // Orange = Busy
    24d4:	81 b3       	in	r24, 0x11	; 17
    24d6:	80 63       	ori	r24, 0x30	; 48
    24d8:	81 bb       	out	0x11, r24	; 17
			ISPCC_EnterChipProgrammingMode();       // Run the Enter Programming Mode routine
    24da:	0e 94 91 10 	call	0x2122 <ISPCC_EnterChipProgrammingMode>

			if (InProgrammingMode)
    24de:	80 91 2f 01 	lds	r24, 0x012F
    24e2:	88 23       	and	r24, r24
    24e4:	19 f0       	breq	.+6      	; 0x24ec <AICI_InterpretPacket+0xaa>
			   LCD_puts_f(AVRISPModeMessage);
    24e6:	83 ef       	ldi	r24, 0xF3	; 243
    24e8:	93 e0       	ldi	r25, 0x03	; 3
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <AICI_InterpretPacket+0xae>
			else
			   LCD_puts_f(SyncErrorMessage);
    24ec:	88 ee       	ldi	r24, 0xE8	; 232
    24ee:	93 e0       	ldi	r25, 0x03	; 3
    24f0:	0e 94 1f 08 	call	0x103e <LCD_puts_f>
			
			break;
    24f4:	0b c1       	rjmp	.+534    	; 0x270c <AICI_InterpretPacket+0x2ca>
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;
    24f6:	82 e0       	ldi	r24, 0x02	; 2
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	90 93 31 01 	sts	0x0131, r25
    24fe:	80 93 30 01 	sts	0x0130, r24

			MAIN_Delay1MS(PacketBytes[1]);           // Wait for the "PreDelay" amount specified in the packet
    2502:	80 91 35 01 	lds	r24, 0x0135
    2506:	0e 94 19 03 	call	0x632 <MAIN_Delay1MS>
			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);   // Non programming mode = green status led
    250a:	81 b3       	in	r24, 0x11	; 17
    250c:	8f 7c       	andi	r24, 0xCF	; 207
    250e:	80 61       	ori	r24, 0x10	; 16
    2510:	81 bb       	out	0x11, r24	; 17
			InProgrammingMode = FALSE;
    2512:	10 92 2f 01 	sts	0x012F, r1
			MAIN_ResetCSLine(MAIN_RESETCS_INACTIVE); // Release the RESET line and allow the slave AVR to run
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	0e 94 2b 03 	call	0x656 <MAIN_ResetCSLine>
			MAIN_Delay1MS(PacketBytes[2]);           // Wait for the "PostDelay" amount specified in the packet
    251c:	80 91 36 01 	lds	r24, 0x0136
    2520:	0e 94 19 03 	call	0x632 <MAIN_Delay1MS>
			
			USI_SPIOff();
    2524:	0e 94 bd 09 	call	0x137a <USI_SPIOff>
    2528:	e5 c0       	rjmp	.+458    	; 0x26f4 <AICI_InterpretPacket+0x2b2>

			PacketBytes[1] = STATUS_CMD_OK;      // Return OK

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;
    252a:	82 e0       	ldi	r24, 0x02	; 2
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	90 93 31 01 	sts	0x0131, r25
    2532:	80 93 30 01 	sts	0x0130, r24
			
			for (uint8_t PacketB = 3; PacketB <= 6; PacketB++) // Send the erase commands to the slave AVR
    2536:	c3 e0       	ldi	r28, 0x03	; 3
    2538:	07 e3       	ldi	r16, 0x37	; 55
    253a:	11 e0       	ldi	r17, 0x01	; 1
				USI_SPITransmit(PacketBytes[PacketB]);
    253c:	f8 01       	movw	r30, r16
    253e:	81 91       	ld	r24, Z+
    2540:	8f 01       	movw	r16, r30
    2542:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    2546:	c1 50       	subi	r28, 0x01	; 1
    2548:	c7 ff       	sbrs	r28, 7
    254a:	f8 cf       	rjmp	.-16     	; 0x253c <AICI_InterpretPacket+0xfa>

			if (PacketBytes[2])                  // Poll mode, value of 1 indicates a busy flag wait
    254c:	80 91 36 01 	lds	r24, 0x0136
    2550:	88 23       	and	r24, r24
    2552:	59 f0       	breq	.+22     	; 0x256a <AICI_InterpretPacket+0x128>
			{
				do
					USI_SPITransmitWord(0xF000);
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 ef       	ldi	r25, 0xF0	; 240
    2558:	0e 94 da 09 	call	0x13b4 <USI_SPITransmitWord>
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	0e 94 da 09 	call	0x13b4 <USI_SPITransmitWord>
    2564:	80 fd       	sbrc	r24, 0
    2566:	f6 cf       	rjmp	.-20     	; 0x2554 <AICI_InterpretPacket+0x112>
    2568:	c5 c0       	rjmp	.+394    	; 0x26f4 <AICI_InterpretPacket+0x2b2>
				while (USI_SPITransmitWord(0x0000) & 0x01);
			}
			else                                // Poll mode flag of 0 indicates a predefined delay
			{
				MAIN_Delay1MS(PacketBytes[1]);   // Wait the specified interval to ensure erase complete
    256a:	80 91 35 01 	lds	r24, 0x0135
    256e:	0e 94 19 03 	call	0x632 <MAIN_Delay1MS>
    2572:	c0 c0       	rjmp	.+384    	; 0x26f4 <AICI_InterpretPacket+0x2b2>
			}
			
			PacketBytes[1] = STATUS_CMD_OK;      // Always return OK
			
			break;
		case CMD_SPI_MULTI:
				MessageSize = (3 + PacketBytes[2]);    // Number of recieved bytes, plus two OKs and the command byte
    2574:	e0 90 36 01 	lds	r14, 0x0136
    2578:	8e 2d       	mov	r24, r14
    257a:	99 27       	eor	r25, r25
    257c:	03 96       	adiw	r24, 0x03	; 3
    257e:	90 93 31 01 	sts	0x0131, r25
    2582:	80 93 30 01 	sts	0x0130, r24
		
				uint8_t TxBytes      = PacketBytes[1]; // \. The packet data is overwritten during the transfer. Because
    2586:	00 91 35 01 	lds	r16, 0x0135
				uint8_t RxStartByte  = PacketBytes[2]; // |  of this each data byte must be stored into temp variables
				uint8_t RxBytes      = PacketBytes[3]; // /  so that their contents are not lost.
    258a:	f0 90 37 01 	lds	r15, 0x0137
				uint8_t RxByteNum    = 1;
    258e:	c1 e0       	ldi	r28, 0x01	; 1
				uint8_t TxByteNum    = 1;
				uint8_t RecievedByte = 0;

				while (TxByteNum++ < TxBytes)          // Still bytes to transfer
				{
					RecievedByte = USI_SPITransmit(PacketBytes[3 + TxByteNum]); // Transmit the byte, store the answer

					if ((TxByteNum >= RxStartByte) && (RxByteNum < RxBytes))
					   PacketBytes[2 + RxByteNum++] = RecievedByte;
    2590:	12 e0       	ldi	r17, 0x02	; 2
    2592:	c0 17       	cp	r28, r16
    2594:	a8 f4       	brcc	.+42     	; 0x25c0 <AICI_InterpretPacket+0x17e>
    2596:	e1 2f       	mov	r30, r17
    2598:	ff 27       	eor	r31, r31
    259a:	ec 5c       	subi	r30, 0xCC	; 204
    259c:	fe 4f       	sbci	r31, 0xFE	; 254
    259e:	83 81       	ldd	r24, Z+3	; 0x03
    25a0:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    25a4:	1e 15       	cp	r17, r14
    25a6:	40 f0       	brcs	.+16     	; 0x25b8 <AICI_InterpretPacket+0x176>
    25a8:	cf 15       	cp	r28, r15
    25aa:	30 f4       	brcc	.+12     	; 0x25b8 <AICI_InterpretPacket+0x176>
    25ac:	ec 2f       	mov	r30, r28
    25ae:	ff 27       	eor	r31, r31
    25b0:	ec 5c       	subi	r30, 0xCC	; 204
    25b2:	fe 4f       	sbci	r31, 0xFE	; 254
    25b4:	82 83       	std	Z+2, r24	; 0x02
    25b6:	cf 5f       	subi	r28, 0xFF	; 255
    25b8:	81 2f       	mov	r24, r17
    25ba:	1f 5f       	subi	r17, 0xFF	; 255
    25bc:	80 17       	cp	r24, r16
    25be:	58 f3       	brcs	.-42     	; 0x2596 <AICI_InterpretPacket+0x154>
				}

				while (RxByteNum++ < RxBytes)                         // Still more bytes to recieve
				   PacketBytes[2 + RxByteNum] = USI_SPITransmit(0x00); // its answer to be recorded (or more bytes than sent need responses), send dummy bytes to fetch the response(s)
    25c0:	8c 2f       	mov	r24, r28
    25c2:	cf 5f       	subi	r28, 0xFF	; 255
    25c4:	8f 15       	cp	r24, r15
    25c6:	50 f4       	brcc	.+20     	; 0x25dc <AICI_InterpretPacket+0x19a>
    25c8:	0c 2f       	mov	r16, r28
    25ca:	11 27       	eor	r17, r17
    25cc:	0c 5c       	subi	r16, 0xCC	; 204
    25ce:	1e 4f       	sbci	r17, 0xFE	; 254
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    25d6:	f8 01       	movw	r30, r16
    25d8:	82 83       	std	Z+2, r24	; 0x02
    25da:	f2 cf       	rjmp	.-28     	; 0x25c0 <AICI_InterpretPacket+0x17e>

				PacketBytes[1]             = STATUS_CMD_OK; // Data should be encompassed
    25dc:	10 92 35 01 	sts	0x0135, r1
				PacketBytes[3 + RxByteNum] = STATUS_CMD_OK; //  by STATS_CMD_OKs
    25e0:	ec 2f       	mov	r30, r28
    25e2:	ff 27       	eor	r31, r31
    25e4:	ec 5c       	subi	r30, 0xCC	; 204
    25e6:	fe 4f       	sbci	r31, 0xFE	; 254
    25e8:	13 82       	std	Z+3, r1	; 0x03

				break;
    25ea:	90 c0       	rjmp	.+288    	; 0x270c <AICI_InterpretPacket+0x2ca>
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;
    25ec:	84 e0       	ldi	r24, 0x04	; 4
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	90 93 31 01 	sts	0x0131, r25
    25f4:	80 93 30 01 	sts	0x0130, r24
	
			for (uint8_t ByteNum = 1; ByteNum <= 4; ByteNum++)
    25f8:	c1 e0       	ldi	r28, 0x01	; 1
    25fa:	06 e3       	ldi	r16, 0x36	; 54
    25fc:	11 e0       	ldi	r17, 0x01	; 1
			{
				uint8_t Response = USI_SPITransmit(PacketBytes[1 + ByteNum]); // Transmit the four signature request bytes
    25fe:	f8 01       	movw	r30, r16
    2600:	81 91       	ld	r24, Z+
    2602:	8f 01       	movw	r16, r30
    2604:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    2608:	98 2f       	mov	r25, r24

				if (ByteNum == PacketBytes[1])         // If the current byte is the requested signature byte, save the reponse in the packet
    260a:	80 91 35 01 	lds	r24, 0x0135
    260e:	c8 17       	cp	r28, r24
    2610:	11 f4       	brne	.+4      	; 0x2616 <AICI_InterpretPacket+0x1d4>
					PacketBytes[2] = Response;
    2612:	90 93 36 01 	sts	0x0136, r25
    2616:	cf 5f       	subi	r28, 0xFF	; 255
    2618:	c5 30       	cpi	r28, 0x05	; 5
    261a:	88 f3       	brcs	.-30     	; 0x25fe <AICI_InterpretPacket+0x1bc>
			}

			PacketBytes[1] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    261c:	10 92 35 01 	sts	0x0135, r1
			PacketBytes[3] = STATUS_CMD_OK;            // Data byte is encased in CMD_OKs
    2620:	10 92 37 01 	sts	0x0137, r1

			break;
    2624:	73 c0       	rjmp	.+230    	; 0x270c <AICI_InterpretPacket+0x2ca>
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;
    2626:	83 e0       	ldi	r24, 0x03	; 3
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	90 93 31 01 	sts	0x0131, r25
    262e:	80 93 30 01 	sts	0x0130, r24
    2632:	05 e3       	ldi	r16, 0x35	; 53
    2634:	11 e0       	ldi	r17, 0x01	; 1
    2636:	c3 e0       	ldi	r28, 0x03	; 3
			
			for (uint8_t PacketB = 1; PacketB <= 4; PacketB++) // Send the lock-byte values to the slave AVR
				USI_SPITransmit(PacketBytes[PacketB]);
    2638:	f8 01       	movw	r30, r16
    263a:	81 91       	ld	r24, Z+
    263c:	8f 01       	movw	r16, r30
    263e:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    2642:	c1 50       	subi	r28, 0x01	; 1
    2644:	c7 ff       	sbrs	r28, 7
    2646:	f8 cf       	rjmp	.-16     	; 0x2638 <AICI_InterpretPacket+0x1f6>

			PacketBytes[1] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    2648:	10 92 35 01 	sts	0x0135, r1
			PacketBytes[2] = STATUS_CMD_OK;            // Two CMD_OKs are always returned
    264c:	10 92 36 01 	sts	0x0136, r1

			break;
    2650:	5d c0       	rjmp	.+186    	; 0x270c <AICI_InterpretPacket+0x2ca>
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			MessageSize = 0;                           // Here to prevent compiler from complaining if a var dec appears straight after a case

			uint8_t  ReadCommand = PacketBytes[3];
    2652:	d0 90 37 01 	lds	r13, 0x0137
			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8) // Load in the number of bytes that is to
    2656:	80 91 35 01 	lds	r24, 0x0135
    265a:	99 27       	eor	r25, r25
    265c:	d8 2f       	mov	r29, r24
    265e:	cc 27       	eor	r28, r28
    2660:	80 91 36 01 	lds	r24, 0x0136
    2664:	99 27       	eor	r25, r25
    2666:	c8 2b       	or	r28, r24
    2668:	d9 2b       	or	r29, r25
			                     | PacketBytes[2];                 // be read into a temp variable (MSB first)

			MessageSize = BytesToRead + 3;
    266a:	23 96       	adiw	r28, 0x03	; 3
    266c:	d0 93 31 01 	sts	0x0131, r29
    2670:	c0 93 30 01 	sts	0x0130, r28
    2674:	23 97       	sbiw	r28, 0x03	; 3

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
    2676:	00 e0       	ldi	r16, 0x00	; 0
    2678:	10 e0       	ldi	r17, 0x00	; 0
    267a:	0c 17       	cp	r16, r28
    267c:	1d 07       	cpc	r17, r29
    267e:	60 f5       	brcc	.+88     	; 0x26d8 <AICI_InterpretPacket+0x296>
    2680:	86 e3       	ldi	r24, 0x36	; 54
    2682:	e8 2e       	mov	r14, r24
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	f8 2e       	mov	r15, r24
			{
				if (PacketBytes[0] == CMD_READ_FLASH_ISP)  // Flash read mode - word addresses so MSB/LSB masking nessesary
    2688:	80 91 34 01 	lds	r24, 0x0134
    268c:	84 31       	cpi	r24, 0x14	; 20
    268e:	31 f4       	brne	.+12     	; 0x269c <AICI_InterpretPacket+0x25a>
				{
					USI_SPITransmit(ReadCommand | ((ReadByte & 0x01)? ISPCC_HIGH_BYTE_READ : ISPCC_LOW_BYTE_READ));
    2690:	8d 2d       	mov	r24, r13
    2692:	99 27       	eor	r25, r25
    2694:	00 ff       	sbrs	r16, 0
    2696:	03 c0       	rjmp	.+6      	; 0x269e <AICI_InterpretPacket+0x25c>
    2698:	88 60       	ori	r24, 0x08	; 8
    269a:	01 c0       	rjmp	.+2      	; 0x269e <AICI_InterpretPacket+0x25c>
				}
				else                                       // EEPROM read mode, address is in bytes and so no masking nessesary
				{
					USI_SPITransmit(ReadCommand);
    269c:	8d 2d       	mov	r24, r13
    269e:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
				}
				
				USI_SPITransmitWord(CurrAddress);          // Transmit the current address to the slave AVR
    26a2:	80 91 2b 01 	lds	r24, 0x012B
    26a6:	90 91 2c 01 	lds	r25, 0x012C
    26aa:	0e 94 da 09 	call	0x13b4 <USI_SPITransmitWord>

				PacketBytes[2 + ReadByte] = USI_SPITransmit(0x00); // Read in the byte stored at the requested location
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    26b4:	f7 01       	movw	r30, r14
    26b6:	80 83       	st	Z, r24

				if ((ReadByte & 0x01) || (PacketBytes[0] == CMD_READ_EEPROM_ISP)) // Flash addresses are given in words; only increment on the odd byte if reading the flash.
    26b8:	00 fd       	sbrc	r16, 0
    26ba:	04 c0       	rjmp	.+8      	; 0x26c4 <AICI_InterpretPacket+0x282>
    26bc:	80 91 34 01 	lds	r24, 0x0134
    26c0:	86 31       	cpi	r24, 0x16	; 22
    26c2:	11 f4       	brne	.+4      	; 0x26c8 <AICI_InterpretPacket+0x286>
				{
					V2P_IncrementCurrAddress();             // Increment the address counter
    26c4:	0e 94 fa 0e 	call	0x1df4 <V2P_IncrementCurrAddress>
    26c8:	0f 5f       	subi	r16, 0xFF	; 255
    26ca:	1f 4f       	sbci	r17, 0xFF	; 255
    26cc:	08 94       	sec
    26ce:	e1 1c       	adc	r14, r1
    26d0:	f1 1c       	adc	r15, r1
    26d2:	0c 17       	cp	r16, r28
    26d4:	1d 07       	cpc	r17, r29
    26d6:	c0 f2       	brcs	.-80     	; 0x2688 <AICI_InterpretPacket+0x246>
				}
				else
				{
					if ((CurrAddress & 0x00FF0000) & !(CurrAddress & 0x0000FFFF))
					{
						CurrAddress |= (1UL << 31);        // Set MSB set of the address, indicates a LOAD_EXTENDED_ADDRESS must be executed
						V2P_CheckForExtendedAddress();
					}
				}
			}
			
			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    26d8:	10 92 35 01 	sts	0x0135, r1
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
    26dc:	cc 5c       	subi	r28, 0xCC	; 204
    26de:	de 4f       	sbci	r29, 0xFE	; 254
    26e0:	1a 82       	std	Y+2, r1	; 0x02

			break;
    26e2:	14 c0       	rjmp	.+40     	; 0x270c <AICI_InterpretPacket+0x2ca>
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPCC_ProgramChip();                          // Program the bytes into the chip
    26e4:	0e 94 39 11 	call	0x2272 <ISPCC_ProgramChip>
			
			MessageSize = 2;
    26e8:	82 e0       	ldi	r24, 0x02	; 2
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	90 93 31 01 	sts	0x0131, r25
    26f0:	80 93 30 01 	sts	0x0130, r24

			PacketBytes[1] = STATUS_CMD_OK;
    26f4:	10 92 35 01 	sts	0x0135, r1
			
			break;
    26f8:	09 c0       	rjmp	.+18     	; 0x270c <AICI_InterpretPacket+0x2ca>
		default:                                        // Unknown command, return error
			MessageSize = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	90 93 31 01 	sts	0x0131, r25
    2702:	80 93 30 01 	sts	0x0130, r24
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
    2706:	89 ec       	ldi	r24, 0xC9	; 201
    2708:	80 93 35 01 	sts	0x0135, r24
	}

	V2P_SendPacket();                                   // Send the response packet
    270c:	0e 94 20 0e 	call	0x1c40 <V2P_SendPacket>
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	ff 90       	pop	r15
    271a:	ef 90       	pop	r14
    271c:	df 90       	pop	r13
    271e:	08 95       	ret

00002720 <PM_GetStoredDataSize>:

// ======================================================================================

uint32_t PM_GetStoredDataSize(uint8_t Type)
{
    2720:	ef 92       	push	r14
    2722:	ff 92       	push	r15
    2724:	0f 93       	push	r16
    2726:	1f 93       	push	r17
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
    2730:	22 97       	sbiw	r28, 0x02	; 2
    2732:	0f b6       	in	r0, 0x3f	; 63
    2734:	f8 94       	cli
    2736:	de bf       	out	0x3e, r29	; 62
    2738:	0f be       	out	0x3f, r0	; 63
    273a:	cd bf       	out	0x3d, r28	; 61
	/* This take a **LOT** of code (202 bytes), and is accessed several times throughout
	   the program, so I've put it into a seperate function to save on flash.            */

	uint32_t ProgDataSize = 0;
	uint16_t EEPROMAddress;

	EEPROMAddress = ((Type == TYPE_FLASH)? Prog_DataSize : Prog_EEPROMSize);
    273c:	81 30       	cpi	r24, 0x01	; 1
    273e:	29 f4       	brne	.+10     	; 0x274a <PM_GetStoredDataSize+0x2a>
    2740:	80 91 16 01 	lds	r24, 0x0116
    2744:	90 91 17 01 	lds	r25, 0x0117
    2748:	04 c0       	rjmp	.+8      	; 0x2752 <PM_GetStoredDataSize+0x32>
    274a:	80 91 14 01 	lds	r24, 0x0114
    274e:	90 91 15 01 	lds	r25, 0x0115
    2752:	9a 83       	std	Y+2, r25	; 0x02
    2754:	89 83       	std	Y+1, r24	; 0x01
	ProgDataSize  = ((uint32_t)eeprom_read_byte_169(&EEPROMAddress) << 24);
    2756:	ce 01       	movw	r24, r28
    2758:	01 96       	adiw	r24, 0x01	; 1
    275a:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    275e:	99 27       	eor	r25, r25
    2760:	aa 27       	eor	r26, r26
    2762:	bb 27       	eor	r27, r27
    2764:	18 2f       	mov	r17, r24
    2766:	00 27       	eor	r16, r16
    2768:	ff 24       	eor	r15, r15
    276a:	ee 24       	eor	r14, r14
	EEPROMAddress++;
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	9a 81       	ldd	r25, Y+2	; 0x02
    2770:	01 96       	adiw	r24, 0x01	; 1
    2772:	9a 83       	std	Y+2, r25	; 0x02
    2774:	89 83       	std	Y+1, r24	; 0x01
	ProgDataSize |= ((uint32_t)eeprom_read_byte_169(&EEPROMAddress) << 16);
    2776:	ce 01       	movw	r24, r28
    2778:	01 96       	adiw	r24, 0x01	; 1
    277a:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    277e:	99 27       	eor	r25, r25
    2780:	aa 27       	eor	r26, r26
    2782:	bb 27       	eor	r27, r27
    2784:	dc 01       	movw	r26, r24
    2786:	99 27       	eor	r25, r25
    2788:	88 27       	eor	r24, r24
    278a:	e8 2a       	or	r14, r24
    278c:	f9 2a       	or	r15, r25
    278e:	0a 2b       	or	r16, r26
    2790:	1b 2b       	or	r17, r27
	EEPROMAddress++;
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	9a 81       	ldd	r25, Y+2	; 0x02
    2796:	01 96       	adiw	r24, 0x01	; 1
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	89 83       	std	Y+1, r24	; 0x01
	ProgDataSize |= ((uint32_t)eeprom_read_byte_169(&EEPROMAddress) << 8);
    279c:	ce 01       	movw	r24, r28
    279e:	01 96       	adiw	r24, 0x01	; 1
    27a0:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    27a4:	99 27       	eor	r25, r25
    27a6:	aa 27       	eor	r26, r26
    27a8:	bb 27       	eor	r27, r27
    27aa:	ba 2f       	mov	r27, r26
    27ac:	a9 2f       	mov	r26, r25
    27ae:	98 2f       	mov	r25, r24
    27b0:	88 27       	eor	r24, r24
    27b2:	e8 2a       	or	r14, r24
    27b4:	f9 2a       	or	r15, r25
    27b6:	0a 2b       	or	r16, r26
    27b8:	1b 2b       	or	r17, r27
	EEPROMAddress++;
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	01 96       	adiw	r24, 0x01	; 1
    27c0:	9a 83       	std	Y+2, r25	; 0x02
    27c2:	89 83       	std	Y+1, r24	; 0x01
	ProgDataSize |= eeprom_read_byte_169(&EEPROMAddress);
    27c4:	ce 01       	movw	r24, r28
    27c6:	01 96       	adiw	r24, 0x01	; 1
    27c8:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    27cc:	99 27       	eor	r25, r25
    27ce:	aa 27       	eor	r26, r26
    27d0:	bb 27       	eor	r27, r27
    27d2:	e8 2a       	or	r14, r24
    27d4:	f9 2a       	or	r15, r25
    27d6:	0a 2b       	or	r16, r26
    27d8:	1b 2b       	or	r17, r27

	if (ProgDataSize == 0xFFFFFFFF)                                      // Blank EEPROM, return a size  of 0 bytes
    27da:	8f ef       	ldi	r24, 0xFF	; 255
    27dc:	e8 16       	cp	r14, r24
    27de:	8f ef       	ldi	r24, 0xFF	; 255
    27e0:	f8 06       	cpc	r15, r24
    27e2:	8f ef       	ldi	r24, 0xFF	; 255
    27e4:	08 07       	cpc	r16, r24
    27e6:	8f ef       	ldi	r24, 0xFF	; 255
    27e8:	18 07       	cpc	r17, r24
    27ea:	19 f4       	brne	.+6      	; 0x27f2 <PM_GetStoredDataSize+0xd2>
	   ProgDataSize = 0x00;
    27ec:	ee 24       	eor	r14, r14
    27ee:	ff 24       	eor	r15, r15
    27f0:	87 01       	movw	r16, r14

	return ProgDataSize;
}
    27f2:	c8 01       	movw	r24, r16
    27f4:	b7 01       	movw	r22, r14
    27f6:	22 96       	adiw	r28, 0x02	; 2
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	ff 90       	pop	r15
    280c:	ef 90       	pop	r14
    280e:	08 95       	ret

00002810 <PM_SetupDFAddressCounters>:

void PM_SetupDFAddressCounters(uint8_t Type)
{
	uint32_t StartAddress;
	
	MemoryType  = Type;
    2810:	80 93 4a 02 	sts	0x024A, r24
	GPageLength = 0;
    2814:	10 92 48 02 	sts	0x0248, r1
    2818:	10 92 47 02 	sts	0x0247, r1
    281c:	20 91 2b 01 	lds	r18, 0x012B
    2820:	30 91 2c 01 	lds	r19, 0x012C
    2824:	40 91 2d 01 	lds	r20, 0x012D
    2828:	50 91 2e 01 	lds	r21, 0x012E

	if (Type == TYPE_FLASH)                                              // Type 1 = Flash
    282c:	81 30       	cpi	r24, 0x01	; 1
    282e:	39 f4       	brne	.+14     	; 0x283e <PM_SetupDFAddressCounters+0x2e>
		StartAddress = (CurrAddress << 1);                               // Convert flash word address to byte address
    2830:	da 01       	movw	r26, r20
    2832:	c9 01       	movw	r24, r18
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	aa 1f       	adc	r26, r26
    283a:	bb 1f       	adc	r27, r27
    283c:	06 c0       	rjmp	.+12     	; 0x284a <PM_SetupDFAddressCounters+0x3a>
	else
		StartAddress = CurrAddress + PM_EEPROM_OFFSET;                   // EEPROM uses byte addresses, and starts at the 257th kilobyte in Dataflash
    283e:	da 01       	movw	r26, r20
    2840:	c9 01       	movw	r24, r18
    2842:	80 50       	subi	r24, 0x00	; 0
    2844:	9c 4f       	sbci	r25, 0xFC	; 252
    2846:	ab 4f       	sbci	r26, 0xFB	; 251
    2848:	bf 4f       	sbci	r27, 0xFF	; 255
	
	CurrPageAddress = 0;
    284a:	10 92 8c 02 	sts	0x028C, r1
    284e:	10 92 8b 02 	sts	0x028B, r1

	while (StartAddress >= DF_INTERNALDF_BUFFBYTES)                      // This loop is the equivalent of a DIV and a MOD
	{
		StartAddress -= DF_INTERNALDF_BUFFBYTES;                         // Subtract one page's worth of bytes from the desired address
		CurrPageAddress++;
    2852:	88 30       	cpi	r24, 0x08	; 8
    2854:	21 e0       	ldi	r18, 0x01	; 1
    2856:	92 07       	cpc	r25, r18
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	a2 07       	cpc	r26, r18
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	b2 07       	cpc	r27, r18
    2860:	a0 f0       	brcs	.+40     	; 0x288a <PM_SetupDFAddressCounters+0x7a>
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	88 50       	subi	r24, 0x08	; 8
    2868:	91 40       	sbci	r25, 0x01	; 1
    286a:	a0 40       	sbci	r26, 0x00	; 0
    286c:	b0 40       	sbci	r27, 0x00	; 0
    286e:	2f 5f       	subi	r18, 0xFF	; 255
    2870:	3f 4f       	sbci	r19, 0xFF	; 255
    2872:	88 30       	cpi	r24, 0x08	; 8
    2874:	41 e0       	ldi	r20, 0x01	; 1
    2876:	94 07       	cpc	r25, r20
    2878:	40 e0       	ldi	r20, 0x00	; 0
    287a:	a4 07       	cpc	r26, r20
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	b4 07       	cpc	r27, r20
    2880:	90 f7       	brcc	.-28     	; 0x2866 <PM_SetupDFAddressCounters+0x56>
    2882:	30 93 8c 02 	sts	0x028C, r19
    2886:	20 93 8b 02 	sts	0x028B, r18
	}
	
	CurrBuffByte = (uint16_t)StartAddress;                               // The buffer byte is the remainder
    288a:	90 93 85 02 	sts	0x0285, r25
    288e:	80 93 84 02 	sts	0x0284, r24
    2892:	08 95       	ret

00002894 <PM_StoreProgramByte>:
}

void PM_StoreProgramByte(uint8_t Data)
{
    2894:	cf 93       	push	r28
    2896:	c8 2f       	mov	r28, r24
	if (CurrBuffByte == DF_INTERNALDF_BUFFBYTES)
    2898:	80 91 84 02 	lds	r24, 0x0284
    289c:	90 91 85 02 	lds	r25, 0x0285
    28a0:	88 50       	subi	r24, 0x08	; 8
    28a2:	91 40       	sbci	r25, 0x01	; 1
    28a4:	a9 f4       	brne	.+42     	; 0x28d0 <PM_StoreProgramByte+0x3c>
	{
		DF_CopyBufferToFlashPage(CurrPageAddress++);
    28a6:	80 91 8b 02 	lds	r24, 0x028B
    28aa:	90 91 8c 02 	lds	r25, 0x028C
    28ae:	9c 01       	movw	r18, r24
    28b0:	01 96       	adiw	r24, 0x01	; 1
    28b2:	90 93 8c 02 	sts	0x028C, r25
    28b6:	80 93 8b 02 	sts	0x028B, r24
    28ba:	c9 01       	movw	r24, r18
    28bc:	0e 94 44 0b 	call	0x1688 <DF_CopyBufferToFlashPage>
		DF_BufferWriteEnable(0);
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	0e 94 7e 0a 	call	0x14fc <DF_BufferWriteEnable>
		CurrBuffByte = 0;
    28c8:	10 92 85 02 	sts	0x0285, r1
    28cc:	10 92 84 02 	sts	0x0284, r1
	}
	
	SPI_SPITransmit(Data);                                               // Store the byte, dataflash is in write mode due to DF_BufferWriteEnable
    28d0:	8c 2f       	mov	r24, r28
    28d2:	0e 94 62 09 	call	0x12c4 <SPI_SPITransmit>
	CurrBuffByte++;
    28d6:	80 91 84 02 	lds	r24, 0x0284
    28da:	90 91 85 02 	lds	r25, 0x0285
    28de:	01 96       	adiw	r24, 0x01	; 1
    28e0:	90 93 85 02 	sts	0x0285, r25
    28e4:	80 93 84 02 	sts	0x0284, r24
	GPageLength++;
    28e8:	80 91 47 02 	lds	r24, 0x0247
    28ec:	90 91 48 02 	lds	r25, 0x0248
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	90 93 48 02 	sts	0x0248, r25
    28f6:	80 93 47 02 	sts	0x0247, r24
    28fa:	cf 91       	pop	r28
    28fc:	08 95       	ret

000028fe <PM_CheckEndOfProgramming>:
}

void PM_InterpretAVRISPPacket(void)
{
	uint16_t EEPROMAddress;

	switch (PacketBytes[0])
	{
		case CMD_ENTER_PROGMODE_ISP:
			MessageSize = 2;
			
			EEPROMAddress = Prog_EnterProgMode;
			
			for (uint8_t PacketB = 0; PacketB <= 11; PacketB++)          // Save the enter programming mode command bytes
			{
				eeprom_write_byte_169(&EEPROMAddress, PacketBytes[PacketB]);
				EEPROMAddress++;
			}
			
			InProgrammingMode = TRUE;                                    // Set the flag, prevent the user from exiting the V2P state machine			
			CurrentMode = PM_NO_SETUP;                                   // Clear the current mode variable

			MAIN_SETSTATUSLED(MAIN_STATLED_RED);
			PacketBytes[1] = STATUS_CMD_OK;

			break;			
		case CMD_LEAVE_PROGMODE_ISP:
			MessageSize = 2;

			PM_CheckEndOfProgramming();                                  // Check if the last command was a program - if so store the program length
			PM_CheckEndOfFuseLockStore();                                // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
			
			InProgrammingMode = FALSE;                                   // Clear the flag, allow the user to exit the V2P state machine

			DF_EnableDataflash(FALSE);

			MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);
			PacketBytes[1] = STATUS_CMD_OK;

			break;
		case CMD_READ_SIGNATURE_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x01;                                       // Signature bytes all return "01" in storage mode
			PacketBytes[3] = STATUS_CMD_OK;                              // Data byte is encased in CMD_OKs

			break;
		case CMD_CHIP_ERASE_ISP:
			MessageSize = 2;

			EEPROMAddress = Prog_EraseChip;                              // Program erase chip command start address
			
			for (uint8_t PacketB = 1; PacketB <= 6; PacketB++)          // Save the erase chip command bytes to EEPROM
			{
				eeprom_write_byte_169(&EEPROMAddress, PacketBytes[PacketB]);
				EEPROMAddress++;
			}

			EEPROMAddress = Prog_DataSize;
										
			for (uint8_t Byte = 0; Byte < 8; Byte++)                    // Clear the program and EEPROM size counters
			{
				if (Byte == 4)
				   EEPROMAddress = Prog_EEPROMSize;

				eeprom_write_byte_169(&EEPROMAddress, 0x00);
				EEPROMAddress++;						
			}
						
			eeprom_write_byte_169(&Prog_EraseCmdStored, TRUE);
			
			PacketBytes[1] = STATUS_CMD_OK;
			
			break;
		case CMD_READ_OSCCAL_ISP:
			MessageSize = 4;

			PacketBytes[1] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs
			PacketBytes[2] = 0x00;                                      // Return 0x00 for the OSCCAL byte
			PacketBytes[3] = STATUS_CMD_OK;                             // Data byte is encased in CMD_OKs

			break;
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
			MessageSize = 4;
	
			if (CurrentMode != PM_LOCKFUSEBITS_READ)                    // First lock or fuse byte being read, set the EEPROM pointer
			{
				PM_CheckEndOfProgramming();                             // Check if the last command was a program - if so store the program length
				PM_CheckEndOfFuseLockStore();                           // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
				
				CurrBuffByte = 0;
				CurrentMode  = PM_LOCKFUSEBITS_READ;
			}
			
			EEPROMAddress = ((PacketBytes[0] == CMD_READ_FUSE_ISP)? Prog_TotalFuseBytes : Prog_TotalLockBytes);

			if (CurrBuffByte > eeprom_read_byte_169(&EEPROMAddress))    // Trying to read more fuse/lock bytes than are stored in memory
			{
				PacketBytes[2] = 0xFF;                                  // Return 0xFF for the fuse/lock byte
			}
			else
			{
				EEPROMAddress  = ((PacketBytes[0] == CMD_READ_FUSE_ISP)? Prog_FuseBytes : Prog_LockBytes) // Starting location
									+ (CurrBuffByte << 2) + (PacketBytes[1] - 1); // The start position of the actual fuse/lock byte to read (4 bytes each)

				PacketBytes[2] = eeprom_read_byte_169(&EEPROMAddress); // Return the fuse/lock byte
			}

			PacketBytes[1] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs
			PacketBytes[3] = STATUS_CMD_OK;                            // Data byte is encased in CMD_OKs

			CurrBuffByte++;

			break;
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			MessageSize = 3;

			if (CurrentMode != PM_LOCKFUSEBITS_WRITE)                  // First lock or fuse byte being written, set the EEPROM pointer
			{
				CurrentMode   = PM_LOCKFUSEBITS_WRITE;
				CurrBuffByte  = 0;                                     // CurrBuffByte is used to store the total fuse/lock bytes written
			}

			if (PacketBytes[0] == CMD_PROGRAM_FUSE_ISP)
			{
				EEPROMAddress = Prog_FuseBytes + (CurrBuffByte << 2);
				MemoryType    = TYPE_FUSE;
			}
			else
			{
				EEPROMAddress = Prog_LockBytes + (CurrBuffByte << 2);
				MemoryType    = TYPE_LOCK;
			}				
			
			if (CurrBuffByte < PM_MAX_FUSELOCKBITS)
			{
				for (uint8_t FLByte = 1; FLByte <= 4; FLByte++)
				{
					eeprom_write_byte_169(&EEPROMAddress, PacketBytes[FLByte]);
					EEPROMAddress++;
				}

				CurrBuffByte++;                                        // Increment the total fuse/lock bytes written counter
			}
			
			PacketBytes[1] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned
			PacketBytes[2] = STATUS_CMD_OK;                            // Two CMD_OKs are always returned

			break;
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			MessageSize = 2;

			if (CurrentMode != PM_DATAFLASH_WRITE)                     // First programming packet
			{
				if (PacketBytes[0] == CMD_PROGRAM_FLASH_ISP)           // Flash programming mode
				{
					EEPROMAddress = Prog_WriteProgram;                 // Set the eeprom address to the Program command bytes location
					PM_SetupDFAddressCounters(TYPE_FLASH);
				}
				else                                                  // EEPROM programming mode
				{
					EEPROMAddress = Prog_WriteEEPROM;                  // Set the eeprom address to the EEPROM command bytes location
					PM_SetupDFAddressCounters(TYPE_EEPROM);
				}
				
				DF_BufferWriteEnable(CurrBuffByte);
				CurrentMode = PM_DATAFLASH_WRITE;
				
				for (uint8_t B = 1; B <= 9; B++)                       // Save the command bytes
				{
					eeprom_write_byte_169(&EEPROMAddress, PacketBytes[B]);
					EEPROMAddress++;				
				}
			}

			uint16_t BytesToWrite = ((uint16_t)PacketBytes[1] << 8)
			                      | PacketBytes[2];

			for (uint16_t CurrByte = 0; CurrByte < BytesToWrite; CurrByte++)
				PM_StoreProgramByte(PacketBytes[10 + CurrByte]);

			if (!(GPageLength & PM_PAGELENGTH_FOUNDBIT) && (PacketBytes[3] & ISPCC_PROG_MODE_PAGEDONE) && GPageLength)
			{
				EEPROMAddress = ((MemoryType == TYPE_FLASH)? Prog_PageLength : Prog_EPageLength);
	
				eeprom_write_byte_169(&EEPROMAddress, (uint8_t)(GPageLength >> 8));
				EEPROMAddress++;
				eeprom_write_byte_169(&EEPROMAddress, (uint8_t)GPageLength);		
		
				GPageLength |= PM_PAGELENGTH_FOUNDBIT;                 // Bit 15 is used to indicate if the length has been found
			}

			PacketBytes[1] = STATUS_CMD_OK;
		
			break;
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:	
			if (CurrentMode != PM_DATAFLASH_READ)
			{
				PM_CheckEndOfProgramming();                           // Check if the last command was a program - if so store the program length
				PM_CheckEndOfFuseLockStore();                         // Check if the last command was a fuse/lock byte program - if so store the total number of bytes
				
				PM_SetupDFAddressCounters((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);
				DF_ContinuousReadEnable(CurrPageAddress, CurrBuffByte);
				
				CurrentMode = PM_DATAFLASH_READ;
				CurrAddress = 0;
			}

			uint16_t BytesToRead = ((uint16_t)PacketBytes[1] << 8)    // \. Load in the number of bytes that is to
			                     | PacketBytes[2];                    // /  be read into a temp variable (MSB first)
						
			uint16_t BytesInMem  = PM_GetStoredDataSize((PacketBytes[0] == CMD_READ_FLASH_ISP)? TYPE_FLASH : TYPE_EEPROM);

			for (uint16_t ReadByte = 0; ReadByte < BytesToRead; ReadByte++)
			{
			   PacketBytes[2 + ReadByte] = ((CurrAddress < BytesInMem)? SPI_SPITransmit(0x00) : 0xFF); // Read in the next dataflash byte if present
			   V2P_IncrementCurrAddress();
			}
			
			MessageSize = BytesToRead + 3;

			PacketBytes[1]               = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
			PacketBytes[2 + BytesToRead] = STATUS_CMD_OK; // Return data should be encompassed in STATUS_CMD_OKs
		
			break;
		default:
			MessageSize = 1;
			
			PacketBytes[1] = STATUS_CMD_UNKNOWN;
	}

	V2P_SendPacket();                                   // Send the response packet
}

void PM_CheckEndOfProgramming(void)
{
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	22 97       	sbiw	r28, 0x02	; 2
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
   uint16_t EEPROMAddress;

   if (CurrentMode == PM_DATAFLASH_WRITE)
    291a:	80 91 49 02 	lds	r24, 0x0249
    291e:	81 30       	cpi	r24, 0x01	; 1
    2920:	09 f0       	breq	.+2      	; 0x2924 <PM_CheckEndOfProgramming+0x26>
    2922:	6d c0       	rjmp	.+218    	; 0x29fe <PM_CheckEndOfProgramming+0x100>
   {
      if (CurrBuffByte)                               // Data in the dataflash buffer, pending to be written
    2924:	80 91 84 02 	lds	r24, 0x0284
    2928:	90 91 85 02 	lds	r25, 0x0285
    292c:	89 2b       	or	r24, r25
    292e:	31 f0       	breq	.+12     	; 0x293c <PM_CheckEndOfProgramming+0x3e>
         DF_CopyBufferToFlashPage(CurrPageAddress);   // Save the buffer
    2930:	80 91 8b 02 	lds	r24, 0x028B
    2934:	90 91 8c 02 	lds	r25, 0x028C
    2938:	0e 94 44 0b 	call	0x1688 <DF_CopyBufferToFlashPage>

      uint32_t DataSize = ((uint32_t)CurrPageAddress * DF_INTERNALDF_BUFFBYTES) + CurrBuffByte;
    293c:	80 91 8b 02 	lds	r24, 0x028B
    2940:	90 91 8c 02 	lds	r25, 0x028C
    2944:	aa 27       	eor	r26, r26
    2946:	bb 27       	eor	r27, r27
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	28 e0       	ldi	r18, 0x08	; 8
    294e:	31 e0       	ldi	r19, 0x01	; 1
    2950:	40 e0       	ldi	r20, 0x00	; 0
    2952:	50 e0       	ldi	r21, 0x00	; 0
    2954:	0e 94 87 1b 	call	0x370e <__mulsi3>
    2958:	7b 01       	movw	r14, r22
    295a:	8c 01       	movw	r16, r24
    295c:	80 91 84 02 	lds	r24, 0x0284
    2960:	90 91 85 02 	lds	r25, 0x0285
    2964:	aa 27       	eor	r26, r26
    2966:	bb 27       	eor	r27, r27
    2968:	e8 0e       	add	r14, r24
    296a:	f9 1e       	adc	r15, r25
    296c:	0a 1f       	adc	r16, r26
    296e:	1b 1f       	adc	r17, r27

      if (MemoryType == TYPE_FLASH)
    2970:	80 91 4a 02 	lds	r24, 0x024A
    2974:	81 30       	cpi	r24, 0x01	; 1
    2976:	39 f4       	brne	.+14     	; 0x2986 <PM_CheckEndOfProgramming+0x88>
      {
         EEPROMAddress = Prog_DataSize;       
    2978:	80 91 16 01 	lds	r24, 0x0116
    297c:	90 91 17 01 	lds	r25, 0x0117
    2980:	9a 83       	std	Y+2, r25	; 0x02
    2982:	89 83       	std	Y+1, r24	; 0x01
    2984:	0e c0       	rjmp	.+28     	; 0x29a2 <PM_CheckEndOfProgramming+0xa4>
      }
      else
      {
         EEPROMAddress = Prog_EEPROMSize;
    2986:	80 91 14 01 	lds	r24, 0x0114
    298a:	90 91 15 01 	lds	r25, 0x0115
    298e:	9a 83       	std	Y+2, r25	; 0x02
    2990:	89 83       	std	Y+1, r24	; 0x01
         DataSize -= PM_EEPROM_OFFSET;                // Remove DataFlash starting offset
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	9c ef       	ldi	r25, 0xFC	; 252
    2996:	ab ef       	ldi	r26, 0xFB	; 251
    2998:	bf ef       	ldi	r27, 0xFF	; 255
    299a:	e8 0e       	add	r14, r24
    299c:	f9 1e       	adc	r15, r25
    299e:	0a 1f       	adc	r16, r26
    29a0:	1b 1f       	adc	r17, r27
      }

      eeprom_write_byte_169(&EEPROMAddress, (DataSize >> 24));
    29a2:	81 2f       	mov	r24, r17
    29a4:	99 27       	eor	r25, r25
    29a6:	aa 27       	eor	r26, r26
    29a8:	bb 27       	eor	r27, r27
    29aa:	68 2f       	mov	r22, r24
    29ac:	ce 01       	movw	r24, r28
    29ae:	01 96       	adiw	r24, 0x01	; 1
    29b0:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
      EEPROMAddress++;
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	01 96       	adiw	r24, 0x01	; 1
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01
      eeprom_write_byte_169(&EEPROMAddress, (DataSize >> 16));             
    29be:	c8 01       	movw	r24, r16
    29c0:	aa 27       	eor	r26, r26
    29c2:	bb 27       	eor	r27, r27
    29c4:	68 2f       	mov	r22, r24
    29c6:	ce 01       	movw	r24, r28
    29c8:	01 96       	adiw	r24, 0x01	; 1
    29ca:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
      EEPROMAddress++;
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	9a 81       	ldd	r25, Y+2	; 0x02
    29d2:	01 96       	adiw	r24, 0x01	; 1
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01
      eeprom_write_byte_169(&EEPROMAddress, (DataSize >> 8));
    29d8:	bb 27       	eor	r27, r27
    29da:	a1 2f       	mov	r26, r17
    29dc:	90 2f       	mov	r25, r16
    29de:	8f 2d       	mov	r24, r15
    29e0:	68 2f       	mov	r22, r24
    29e2:	ce 01       	movw	r24, r28
    29e4:	01 96       	adiw	r24, 0x01	; 1
    29e6:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
      EEPROMAddress++;
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	9a 81       	ldd	r25, Y+2	; 0x02
    29ee:	01 96       	adiw	r24, 0x01	; 1
    29f0:	9a 83       	std	Y+2, r25	; 0x02
    29f2:	89 83       	std	Y+1, r24	; 0x01
      eeprom_write_byte_169(&EEPROMAddress, DataSize);
    29f4:	6e 2d       	mov	r22, r14
    29f6:	ce 01       	movw	r24, r28
    29f8:	01 96       	adiw	r24, 0x01	; 1
    29fa:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
    29fe:	22 96       	adiw	r28, 0x02	; 2
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	df 91       	pop	r29
    2a0c:	cf 91       	pop	r28
    2a0e:	1f 91       	pop	r17
    2a10:	0f 91       	pop	r16
    2a12:	ff 90       	pop	r15
    2a14:	ef 90       	pop	r14
    2a16:	08 95       	ret

00002a18 <PM_CheckEndOfFuseLockStore>:
   }
}

void PM_CheckEndOfFuseLockStore(void)
{
    2a18:	cf 93       	push	r28
    2a1a:	df 93       	push	r29
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	22 97       	sbiw	r28, 0x02	; 2
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
	uint16_t EEPROMAddress;

	if (CurrentMode == PM_LOCKFUSEBITS_WRITE)
    2a2c:	80 91 49 02 	lds	r24, 0x0249
    2a30:	83 30       	cpi	r24, 0x03	; 3
    2a32:	a9 f4       	brne	.+42     	; 0x2a5e <PM_CheckEndOfFuseLockStore+0x46>
	{
		EEPROMAddress = ((MemoryType == TYPE_FUSE)? Prog_TotalFuseBytes : Prog_TotalLockBytes);
    2a34:	80 91 4a 02 	lds	r24, 0x024A
    2a38:	82 30       	cpi	r24, 0x02	; 2
    2a3a:	29 f4       	brne	.+10     	; 0x2a46 <PM_CheckEndOfFuseLockStore+0x2e>
    2a3c:	80 91 10 01 	lds	r24, 0x0110
    2a40:	90 91 11 01 	lds	r25, 0x0111
    2a44:	04 c0       	rjmp	.+8      	; 0x2a4e <PM_CheckEndOfFuseLockStore+0x36>
    2a46:	80 91 0e 01 	lds	r24, 0x010E
    2a4a:	90 91 0f 01 	lds	r25, 0x010F
    2a4e:	9a 83       	std	Y+2, r25	; 0x02
    2a50:	89 83       	std	Y+1, r24	; 0x01
		
		eeprom_write_byte_169(&EEPROMAddress, CurrBuffByte); // CurrBuffByte stores the total number of fuse/lock bytes written in this case
    2a52:	60 91 84 02 	lds	r22, 0x0284
    2a56:	ce 01       	movw	r24, r28
    2a58:	01 96       	adiw	r24, 0x01	; 1
    2a5a:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
    2a5e:	22 96       	adiw	r28, 0x02	; 2
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	cd bf       	out	0x3d, r28	; 61
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	08 95       	ret

00002a70 <PM_InterpretAVRISPPacket>:
    2a70:	af 92       	push	r10
    2a72:	bf 92       	push	r11
    2a74:	cf 92       	push	r12
    2a76:	df 92       	push	r13
    2a78:	ef 92       	push	r14
    2a7a:	ff 92       	push	r15
    2a7c:	0f 93       	push	r16
    2a7e:	1f 93       	push	r17
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	22 97       	sbiw	r28, 0x02	; 2
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	40 91 34 01 	lds	r20, 0x0134
    2a98:	84 2f       	mov	r24, r20
    2a9a:	99 27       	eor	r25, r25
    2a9c:	86 31       	cpi	r24, 0x16	; 22
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <PM_InterpretAVRISPPacket+0x34>
    2aa2:	1a c2       	rjmp	.+1076   	; 0x2ed8 <PM_InterpretAVRISPPacket+0x468>
    2aa4:	87 31       	cpi	r24, 0x17	; 23
    2aa6:	91 05       	cpc	r25, r1
    2aa8:	94 f4       	brge	.+36     	; 0x2ace <PM_InterpretAVRISPPacket+0x5e>
    2aaa:	82 31       	cpi	r24, 0x12	; 18
    2aac:	91 05       	cpc	r25, r1
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <PM_InterpretAVRISPPacket+0x42>
    2ab0:	72 c0       	rjmp	.+228    	; 0x2b96 <PM_InterpretAVRISPPacket+0x126>
    2ab2:	83 31       	cpi	r24, 0x13	; 19
    2ab4:	91 05       	cpc	r25, r1
    2ab6:	3c f4       	brge	.+14     	; 0x2ac6 <PM_InterpretAVRISPPacket+0x56>
    2ab8:	80 31       	cpi	r24, 0x10	; 16
    2aba:	91 05       	cpc	r25, r1
    2abc:	19 f1       	breq	.+70     	; 0x2b04 <PM_InterpretAVRISPPacket+0x94>
    2abe:	41 97       	sbiw	r24, 0x11	; 17
    2ac0:	09 f4       	brne	.+2      	; 0x2ac4 <PM_InterpretAVRISPPacket+0x54>
    2ac2:	49 c0       	rjmp	.+146    	; 0x2b56 <PM_InterpretAVRISPPacket+0xe6>
    2ac4:	7d c2       	rjmp	.+1274   	; 0x2fc0 <PM_InterpretAVRISPPacket+0x550>
    2ac6:	44 97       	sbiw	r24, 0x14	; 20
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <PM_InterpretAVRISPPacket+0x5c>
    2aca:	06 c2       	rjmp	.+1036   	; 0x2ed8 <PM_InterpretAVRISPPacket+0x468>
    2acc:	73 c1       	rjmp	.+742    	; 0x2db4 <PM_InterpretAVRISPPacket+0x344>
    2ace:	89 31       	cpi	r24, 0x19	; 25
    2ad0:	91 05       	cpc	r25, r1
    2ad2:	09 f4       	brne	.+2      	; 0x2ad6 <PM_InterpretAVRISPPacket+0x66>
    2ad4:	13 c1       	rjmp	.+550    	; 0x2cfc <PM_InterpretAVRISPPacket+0x28c>
    2ad6:	8a 31       	cpi	r24, 0x1A	; 26
    2ad8:	91 05       	cpc	r25, r1
    2ada:	44 f4       	brge	.+16     	; 0x2aec <PM_InterpretAVRISPPacket+0x7c>
    2adc:	87 31       	cpi	r24, 0x17	; 23
    2ade:	91 05       	cpc	r25, r1
    2ae0:	09 f4       	brne	.+2      	; 0x2ae4 <PM_InterpretAVRISPPacket+0x74>
    2ae2:	0c c1       	rjmp	.+536    	; 0x2cfc <PM_InterpretAVRISPPacket+0x28c>
    2ae4:	48 97       	sbiw	r24, 0x18	; 24
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <PM_InterpretAVRISPPacket+0x7a>
    2ae8:	a5 c0       	rjmp	.+330    	; 0x2c34 <PM_InterpretAVRISPPacket+0x1c4>
    2aea:	6a c2       	rjmp	.+1236   	; 0x2fc0 <PM_InterpretAVRISPPacket+0x550>
    2aec:	8b 31       	cpi	r24, 0x1B	; 27
    2aee:	91 05       	cpc	r25, r1
    2af0:	09 f4       	brne	.+2      	; 0x2af4 <PM_InterpretAVRISPPacket+0x84>
    2af2:	45 c0       	rjmp	.+138    	; 0x2b7e <PM_InterpretAVRISPPacket+0x10e>
    2af4:	8b 31       	cpi	r24, 0x1B	; 27
    2af6:	91 05       	cpc	r25, r1
    2af8:	0c f4       	brge	.+2      	; 0x2afc <PM_InterpretAVRISPPacket+0x8c>
    2afa:	9c c0       	rjmp	.+312    	; 0x2c34 <PM_InterpretAVRISPPacket+0x1c4>
    2afc:	4c 97       	sbiw	r24, 0x1c	; 28
    2afe:	09 f4       	brne	.+2      	; 0x2b02 <PM_InterpretAVRISPPacket+0x92>
    2b00:	8c c0       	rjmp	.+280    	; 0x2c1a <PM_InterpretAVRISPPacket+0x1aa>
    2b02:	5e c2       	rjmp	.+1212   	; 0x2fc0 <PM_InterpretAVRISPPacket+0x550>
    2b04:	82 e0       	ldi	r24, 0x02	; 2
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	90 93 31 01 	sts	0x0131, r25
    2b0c:	80 93 30 01 	sts	0x0130, r24
    2b10:	80 91 12 01 	lds	r24, 0x0112
    2b14:	90 91 13 01 	lds	r25, 0x0113
    2b18:	9a 83       	std	Y+2, r25	; 0x02
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	f4 e3       	ldi	r31, 0x34	; 52
    2b1e:	ef 2e       	mov	r14, r31
    2b20:	f1 e0       	ldi	r31, 0x01	; 1
    2b22:	ff 2e       	mov	r15, r31
    2b24:	1b e0       	ldi	r17, 0x0B	; 11
    2b26:	f7 01       	movw	r30, r14
    2b28:	61 91       	ld	r22, Z+
    2b2a:	7f 01       	movw	r14, r30
    2b2c:	ce 01       	movw	r24, r28
    2b2e:	01 96       	adiw	r24, 0x01	; 1
    2b30:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	9a 81       	ldd	r25, Y+2	; 0x02
    2b38:	01 96       	adiw	r24, 0x01	; 1
    2b3a:	9a 83       	std	Y+2, r25	; 0x02
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	11 50       	subi	r17, 0x01	; 1
    2b40:	17 ff       	sbrs	r17, 7
    2b42:	f1 cf       	rjmp	.-30     	; 0x2b26 <PM_InterpretAVRISPPacket+0xb6>
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	80 93 2f 01 	sts	0x012F, r24
    2b4a:	10 92 49 02 	sts	0x0249, r1
    2b4e:	81 b3       	in	r24, 0x11	; 17
    2b50:	8f 7c       	andi	r24, 0xCF	; 207
    2b52:	80 62       	ori	r24, 0x20	; 32
    2b54:	12 c0       	rjmp	.+36     	; 0x2b7a <PM_InterpretAVRISPPacket+0x10a>
    2b56:	82 e0       	ldi	r24, 0x02	; 2
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	90 93 31 01 	sts	0x0131, r25
    2b5e:	80 93 30 01 	sts	0x0130, r24
    2b62:	0e 94 7f 14 	call	0x28fe <PM_CheckEndOfProgramming>
    2b66:	0e 94 0c 15 	call	0x2a18 <PM_CheckEndOfFuseLockStore>
    2b6a:	10 92 2f 01 	sts	0x012F, r1
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    2b74:	81 b3       	in	r24, 0x11	; 17
    2b76:	8f 7c       	andi	r24, 0xCF	; 207
    2b78:	80 61       	ori	r24, 0x10	; 16
    2b7a:	81 bb       	out	0x11, r24	; 17
    2b7c:	aa c1       	rjmp	.+852    	; 0x2ed2 <PM_InterpretAVRISPPacket+0x462>
    2b7e:	84 e0       	ldi	r24, 0x04	; 4
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	90 93 31 01 	sts	0x0131, r25
    2b86:	80 93 30 01 	sts	0x0130, r24
    2b8a:	10 92 35 01 	sts	0x0135, r1
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	80 93 36 01 	sts	0x0136, r24
    2b94:	4c c0       	rjmp	.+152    	; 0x2c2e <PM_InterpretAVRISPPacket+0x1be>
    2b96:	82 e0       	ldi	r24, 0x02	; 2
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	90 93 31 01 	sts	0x0131, r25
    2b9e:	80 93 30 01 	sts	0x0130, r24
    2ba2:	80 91 18 01 	lds	r24, 0x0118
    2ba6:	90 91 19 01 	lds	r25, 0x0119
    2baa:	9a 83       	std	Y+2, r25	; 0x02
    2bac:	89 83       	std	Y+1, r24	; 0x01
    2bae:	e5 e3       	ldi	r30, 0x35	; 53
    2bb0:	ee 2e       	mov	r14, r30
    2bb2:	e1 e0       	ldi	r30, 0x01	; 1
    2bb4:	fe 2e       	mov	r15, r30
    2bb6:	15 e0       	ldi	r17, 0x05	; 5
    2bb8:	f7 01       	movw	r30, r14
    2bba:	61 91       	ld	r22, Z+
    2bbc:	7f 01       	movw	r14, r30
    2bbe:	ce 01       	movw	r24, r28
    2bc0:	01 96       	adiw	r24, 0x01	; 1
    2bc2:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bca:	01 96       	adiw	r24, 0x01	; 1
    2bcc:	9a 83       	std	Y+2, r25	; 0x02
    2bce:	89 83       	std	Y+1, r24	; 0x01
    2bd0:	11 50       	subi	r17, 0x01	; 1
    2bd2:	17 ff       	sbrs	r17, 7
    2bd4:	f1 cf       	rjmp	.-30     	; 0x2bb8 <PM_InterpretAVRISPPacket+0x148>
    2bd6:	80 91 16 01 	lds	r24, 0x0116
    2bda:	90 91 17 01 	lds	r25, 0x0117
    2bde:	9a 83       	std	Y+2, r25	; 0x02
    2be0:	89 83       	std	Y+1, r24	; 0x01
    2be2:	10 e0       	ldi	r17, 0x00	; 0
    2be4:	14 30       	cpi	r17, 0x04	; 4
    2be6:	31 f4       	brne	.+12     	; 0x2bf4 <PM_InterpretAVRISPPacket+0x184>
    2be8:	80 91 14 01 	lds	r24, 0x0114
    2bec:	90 91 15 01 	lds	r25, 0x0115
    2bf0:	9a 83       	std	Y+2, r25	; 0x02
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	ce 01       	movw	r24, r28
    2bf8:	01 96       	adiw	r24, 0x01	; 1
    2bfa:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	01 96       	adiw	r24, 0x01	; 1
    2c04:	9a 83       	std	Y+2, r25	; 0x02
    2c06:	89 83       	std	Y+1, r24	; 0x01
    2c08:	1f 5f       	subi	r17, 0xFF	; 255
    2c0a:	18 30       	cpi	r17, 0x08	; 8
    2c0c:	58 f3       	brcs	.-42     	; 0x2be4 <PM_InterpretAVRISPPacket+0x174>
    2c0e:	61 e0       	ldi	r22, 0x01	; 1
    2c10:	8a e1       	ldi	r24, 0x1A	; 26
    2c12:	91 e0       	ldi	r25, 0x01	; 1
    2c14:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
    2c18:	5c c1       	rjmp	.+696    	; 0x2ed2 <PM_InterpretAVRISPPacket+0x462>
    2c1a:	84 e0       	ldi	r24, 0x04	; 4
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	90 93 31 01 	sts	0x0131, r25
    2c22:	80 93 30 01 	sts	0x0130, r24
    2c26:	10 92 35 01 	sts	0x0135, r1
    2c2a:	10 92 36 01 	sts	0x0136, r1
    2c2e:	10 92 37 01 	sts	0x0137, r1
    2c32:	cf c1       	rjmp	.+926    	; 0x2fd2 <PM_InterpretAVRISPPacket+0x562>
    2c34:	84 e0       	ldi	r24, 0x04	; 4
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	90 93 31 01 	sts	0x0131, r25
    2c3c:	80 93 30 01 	sts	0x0130, r24
    2c40:	80 91 49 02 	lds	r24, 0x0249
    2c44:	84 30       	cpi	r24, 0x04	; 4
    2c46:	59 f0       	breq	.+22     	; 0x2c5e <PM_InterpretAVRISPPacket+0x1ee>
    2c48:	0e 94 7f 14 	call	0x28fe <PM_CheckEndOfProgramming>
    2c4c:	0e 94 0c 15 	call	0x2a18 <PM_CheckEndOfFuseLockStore>
    2c50:	10 92 85 02 	sts	0x0285, r1
    2c54:	10 92 84 02 	sts	0x0284, r1
    2c58:	84 e0       	ldi	r24, 0x04	; 4
    2c5a:	80 93 49 02 	sts	0x0249, r24
    2c5e:	80 91 34 01 	lds	r24, 0x0134
    2c62:	88 31       	cpi	r24, 0x18	; 24
    2c64:	29 f4       	brne	.+10     	; 0x2c70 <PM_InterpretAVRISPPacket+0x200>
    2c66:	80 91 10 01 	lds	r24, 0x0110
    2c6a:	90 91 11 01 	lds	r25, 0x0111
    2c6e:	04 c0       	rjmp	.+8      	; 0x2c78 <PM_InterpretAVRISPPacket+0x208>
    2c70:	80 91 0e 01 	lds	r24, 0x010E
    2c74:	90 91 0f 01 	lds	r25, 0x010F
    2c78:	9a 83       	std	Y+2, r25	; 0x02
    2c7a:	89 83       	std	Y+1, r24	; 0x01
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    2c84:	99 27       	eor	r25, r25
    2c86:	20 91 84 02 	lds	r18, 0x0284
    2c8a:	30 91 85 02 	lds	r19, 0x0285
    2c8e:	82 17       	cp	r24, r18
    2c90:	93 07       	cpc	r25, r19
    2c92:	10 f4       	brcc	.+4      	; 0x2c98 <PM_InterpretAVRISPPacket+0x228>
    2c94:	8f ef       	ldi	r24, 0xFF	; 255
    2c96:	22 c0       	rjmp	.+68     	; 0x2cdc <PM_InterpretAVRISPPacket+0x26c>
    2c98:	a9 01       	movw	r20, r18
    2c9a:	44 0f       	add	r20, r20
    2c9c:	55 1f       	adc	r21, r21
    2c9e:	44 0f       	add	r20, r20
    2ca0:	55 1f       	adc	r21, r21
    2ca2:	80 91 35 01 	lds	r24, 0x0135
    2ca6:	28 2f       	mov	r18, r24
    2ca8:	33 27       	eor	r19, r19
    2caa:	21 50       	subi	r18, 0x01	; 1
    2cac:	30 40       	sbci	r19, 0x00	; 0
    2cae:	80 91 34 01 	lds	r24, 0x0134
    2cb2:	88 31       	cpi	r24, 0x18	; 24
    2cb4:	29 f4       	brne	.+10     	; 0x2cc0 <PM_InterpretAVRISPPacket+0x250>
    2cb6:	80 91 0c 01 	lds	r24, 0x010C
    2cba:	90 91 0d 01 	lds	r25, 0x010D
    2cbe:	04 c0       	rjmp	.+8      	; 0x2cc8 <PM_InterpretAVRISPPacket+0x258>
    2cc0:	80 91 0a 01 	lds	r24, 0x010A
    2cc4:	90 91 0b 01 	lds	r25, 0x010B
    2cc8:	84 0f       	add	r24, r20
    2cca:	95 1f       	adc	r25, r21
    2ccc:	82 0f       	add	r24, r18
    2cce:	93 1f       	adc	r25, r19
    2cd0:	9a 83       	std	Y+2, r25	; 0x02
    2cd2:	89 83       	std	Y+1, r24	; 0x01
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	01 96       	adiw	r24, 0x01	; 1
    2cd8:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    2cdc:	80 93 36 01 	sts	0x0136, r24
    2ce0:	10 92 35 01 	sts	0x0135, r1
    2ce4:	10 92 37 01 	sts	0x0137, r1
    2ce8:	80 91 84 02 	lds	r24, 0x0284
    2cec:	90 91 85 02 	lds	r25, 0x0285
    2cf0:	01 96       	adiw	r24, 0x01	; 1
    2cf2:	90 93 85 02 	sts	0x0285, r25
    2cf6:	80 93 84 02 	sts	0x0284, r24
    2cfa:	6b c1       	rjmp	.+726    	; 0x2fd2 <PM_InterpretAVRISPPacket+0x562>
    2cfc:	83 e0       	ldi	r24, 0x03	; 3
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	90 93 31 01 	sts	0x0131, r25
    2d04:	80 93 30 01 	sts	0x0130, r24
    2d08:	80 91 49 02 	lds	r24, 0x0249
    2d0c:	83 30       	cpi	r24, 0x03	; 3
    2d0e:	39 f0       	breq	.+14     	; 0x2d1e <PM_InterpretAVRISPPacket+0x2ae>
    2d10:	83 e0       	ldi	r24, 0x03	; 3
    2d12:	80 93 49 02 	sts	0x0249, r24
    2d16:	10 92 85 02 	sts	0x0285, r1
    2d1a:	10 92 84 02 	sts	0x0284, r1
    2d1e:	20 91 84 02 	lds	r18, 0x0284
    2d22:	30 91 85 02 	lds	r19, 0x0285
    2d26:	47 31       	cpi	r20, 0x17	; 23
    2d28:	71 f4       	brne	.+28     	; 0x2d46 <PM_InterpretAVRISPPacket+0x2d6>
    2d2a:	22 0f       	add	r18, r18
    2d2c:	33 1f       	adc	r19, r19
    2d2e:	22 0f       	add	r18, r18
    2d30:	33 1f       	adc	r19, r19
    2d32:	80 91 0c 01 	lds	r24, 0x010C
    2d36:	90 91 0d 01 	lds	r25, 0x010D
    2d3a:	82 0f       	add	r24, r18
    2d3c:	93 1f       	adc	r25, r19
    2d3e:	9a 83       	std	Y+2, r25	; 0x02
    2d40:	89 83       	std	Y+1, r24	; 0x01
    2d42:	82 e0       	ldi	r24, 0x02	; 2
    2d44:	0d c0       	rjmp	.+26     	; 0x2d60 <PM_InterpretAVRISPPacket+0x2f0>
    2d46:	22 0f       	add	r18, r18
    2d48:	33 1f       	adc	r19, r19
    2d4a:	22 0f       	add	r18, r18
    2d4c:	33 1f       	adc	r19, r19
    2d4e:	80 91 0a 01 	lds	r24, 0x010A
    2d52:	90 91 0b 01 	lds	r25, 0x010B
    2d56:	82 0f       	add	r24, r18
    2d58:	93 1f       	adc	r25, r19
    2d5a:	9a 83       	std	Y+2, r25	; 0x02
    2d5c:	89 83       	std	Y+1, r24	; 0x01
    2d5e:	83 e0       	ldi	r24, 0x03	; 3
    2d60:	80 93 4a 02 	sts	0x024A, r24
    2d64:	80 91 84 02 	lds	r24, 0x0284
    2d68:	90 91 85 02 	lds	r25, 0x0285
    2d6c:	0a 97       	sbiw	r24, 0x0a	; 10
    2d6e:	e8 f4       	brcc	.+58     	; 0x2daa <PM_InterpretAVRISPPacket+0x33a>
    2d70:	45 e3       	ldi	r20, 0x35	; 53
    2d72:	e4 2e       	mov	r14, r20
    2d74:	41 e0       	ldi	r20, 0x01	; 1
    2d76:	f4 2e       	mov	r15, r20
    2d78:	13 e0       	ldi	r17, 0x03	; 3
    2d7a:	f7 01       	movw	r30, r14
    2d7c:	61 91       	ld	r22, Z+
    2d7e:	7f 01       	movw	r14, r30
    2d80:	ce 01       	movw	r24, r28
    2d82:	01 96       	adiw	r24, 0x01	; 1
    2d84:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8c:	01 96       	adiw	r24, 0x01	; 1
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	89 83       	std	Y+1, r24	; 0x01
    2d92:	11 50       	subi	r17, 0x01	; 1
    2d94:	17 ff       	sbrs	r17, 7
    2d96:	f1 cf       	rjmp	.-30     	; 0x2d7a <PM_InterpretAVRISPPacket+0x30a>
    2d98:	80 91 84 02 	lds	r24, 0x0284
    2d9c:	90 91 85 02 	lds	r25, 0x0285
    2da0:	01 96       	adiw	r24, 0x01	; 1
    2da2:	90 93 85 02 	sts	0x0285, r25
    2da6:	80 93 84 02 	sts	0x0284, r24
    2daa:	10 92 35 01 	sts	0x0135, r1
    2dae:	10 92 36 01 	sts	0x0136, r1
    2db2:	0f c1       	rjmp	.+542    	; 0x2fd2 <PM_InterpretAVRISPPacket+0x562>
    2db4:	82 e0       	ldi	r24, 0x02	; 2
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	90 93 31 01 	sts	0x0131, r25
    2dbc:	80 93 30 01 	sts	0x0130, r24
    2dc0:	80 91 49 02 	lds	r24, 0x0249
    2dc4:	81 30       	cpi	r24, 0x01	; 1
    2dc6:	81 f1       	breq	.+96     	; 0x2e28 <PM_InterpretAVRISPPacket+0x3b8>
    2dc8:	43 31       	cpi	r20, 0x13	; 19
    2dca:	41 f4       	brne	.+16     	; 0x2ddc <PM_InterpretAVRISPPacket+0x36c>
    2dcc:	80 91 1e 01 	lds	r24, 0x011E
    2dd0:	90 91 1f 01 	lds	r25, 0x011F
    2dd4:	9a 83       	std	Y+2, r25	; 0x02
    2dd6:	89 83       	std	Y+1, r24	; 0x01
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	07 c0       	rjmp	.+14     	; 0x2dea <PM_InterpretAVRISPPacket+0x37a>
    2ddc:	80 91 1c 01 	lds	r24, 0x011C
    2de0:	90 91 1d 01 	lds	r25, 0x011D
    2de4:	9a 83       	std	Y+2, r25	; 0x02
    2de6:	89 83       	std	Y+1, r24	; 0x01
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	0e 94 08 14 	call	0x2810 <PM_SetupDFAddressCounters>
    2dee:	80 91 84 02 	lds	r24, 0x0284
    2df2:	90 91 85 02 	lds	r25, 0x0285
    2df6:	0e 94 7e 0a 	call	0x14fc <DF_BufferWriteEnable>
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	80 93 49 02 	sts	0x0249, r24
    2e00:	35 e3       	ldi	r19, 0x35	; 53
    2e02:	e3 2e       	mov	r14, r19
    2e04:	31 e0       	ldi	r19, 0x01	; 1
    2e06:	f3 2e       	mov	r15, r19
    2e08:	18 e0       	ldi	r17, 0x08	; 8
    2e0a:	f7 01       	movw	r30, r14
    2e0c:	61 91       	ld	r22, Z+
    2e0e:	7f 01       	movw	r14, r30
    2e10:	ce 01       	movw	r24, r28
    2e12:	01 96       	adiw	r24, 0x01	; 1
    2e14:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
    2e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1c:	01 96       	adiw	r24, 0x01	; 1
    2e1e:	9a 83       	std	Y+2, r25	; 0x02
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	11 50       	subi	r17, 0x01	; 1
    2e24:	17 ff       	sbrs	r17, 7
    2e26:	f1 cf       	rjmp	.-30     	; 0x2e0a <PM_InterpretAVRISPPacket+0x39a>
    2e28:	80 91 35 01 	lds	r24, 0x0135
    2e2c:	99 27       	eor	r25, r25
    2e2e:	18 2f       	mov	r17, r24
    2e30:	00 27       	eor	r16, r16
    2e32:	80 91 36 01 	lds	r24, 0x0136
    2e36:	99 27       	eor	r25, r25
    2e38:	08 2b       	or	r16, r24
    2e3a:	19 2b       	or	r17, r25
    2e3c:	ee 24       	eor	r14, r14
    2e3e:	ff 24       	eor	r15, r15
    2e40:	e0 16       	cp	r14, r16
    2e42:	f1 06       	cpc	r15, r17
    2e44:	78 f4       	brcc	.+30     	; 0x2e64 <PM_InterpretAVRISPPacket+0x3f4>
    2e46:	8e e3       	ldi	r24, 0x3E	; 62
    2e48:	c8 2e       	mov	r12, r24
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	d8 2e       	mov	r13, r24
    2e4e:	f6 01       	movw	r30, r12
    2e50:	81 91       	ld	r24, Z+
    2e52:	6f 01       	movw	r12, r30
    2e54:	0e 94 4a 14 	call	0x2894 <PM_StoreProgramByte>
    2e58:	08 94       	sec
    2e5a:	e1 1c       	adc	r14, r1
    2e5c:	f1 1c       	adc	r15, r1
    2e5e:	e0 16       	cp	r14, r16
    2e60:	f1 06       	cpc	r15, r17
    2e62:	a8 f3       	brcs	.-22     	; 0x2e4e <PM_InterpretAVRISPPacket+0x3de>
    2e64:	40 91 47 02 	lds	r20, 0x0247
    2e68:	50 91 48 02 	lds	r21, 0x0248
    2e6c:	57 fd       	sbrc	r21, 7
    2e6e:	31 c0       	rjmp	.+98     	; 0x2ed2 <PM_InterpretAVRISPPacket+0x462>
    2e70:	80 91 37 01 	lds	r24, 0x0137
    2e74:	87 ff       	sbrs	r24, 7
    2e76:	2d c0       	rjmp	.+90     	; 0x2ed2 <PM_InterpretAVRISPPacket+0x462>
    2e78:	41 15       	cp	r20, r1
    2e7a:	51 05       	cpc	r21, r1
    2e7c:	51 f1       	breq	.+84     	; 0x2ed2 <PM_InterpretAVRISPPacket+0x462>
    2e7e:	80 91 4a 02 	lds	r24, 0x024A
    2e82:	81 30       	cpi	r24, 0x01	; 1
    2e84:	29 f4       	brne	.+10     	; 0x2e90 <PM_InterpretAVRISPPacket+0x420>
    2e86:	20 91 08 01 	lds	r18, 0x0108
    2e8a:	30 91 09 01 	lds	r19, 0x0109
    2e8e:	04 c0       	rjmp	.+8      	; 0x2e98 <PM_InterpretAVRISPPacket+0x428>
    2e90:	20 91 06 01 	lds	r18, 0x0106
    2e94:	30 91 07 01 	lds	r19, 0x0107
    2e98:	3a 83       	std	Y+2, r19	; 0x02
    2e9a:	29 83       	std	Y+1, r18	; 0x01
    2e9c:	85 2f       	mov	r24, r21
    2e9e:	99 27       	eor	r25, r25
    2ea0:	68 2f       	mov	r22, r24
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	01 96       	adiw	r24, 0x01	; 1
    2ea6:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	9a 81       	ldd	r25, Y+2	; 0x02
    2eae:	01 96       	adiw	r24, 0x01	; 1
    2eb0:	9a 83       	std	Y+2, r25	; 0x02
    2eb2:	89 83       	std	Y+1, r24	; 0x01
    2eb4:	60 91 47 02 	lds	r22, 0x0247
    2eb8:	ce 01       	movw	r24, r28
    2eba:	01 96       	adiw	r24, 0x01	; 1
    2ebc:	0e 94 e4 08 	call	0x11c8 <eeprom_write_byte_169>
    2ec0:	80 91 47 02 	lds	r24, 0x0247
    2ec4:	90 91 48 02 	lds	r25, 0x0248
    2ec8:	90 68       	ori	r25, 0x80	; 128
    2eca:	90 93 48 02 	sts	0x0248, r25
    2ece:	80 93 47 02 	sts	0x0247, r24
    2ed2:	10 92 35 01 	sts	0x0135, r1
    2ed6:	7d c0       	rjmp	.+250    	; 0x2fd2 <PM_InterpretAVRISPPacket+0x562>
    2ed8:	80 91 49 02 	lds	r24, 0x0249
    2edc:	82 30       	cpi	r24, 0x02	; 2
    2ede:	11 f1       	breq	.+68     	; 0x2f24 <PM_InterpretAVRISPPacket+0x4b4>
    2ee0:	0e 94 7f 14 	call	0x28fe <PM_CheckEndOfProgramming>
    2ee4:	0e 94 0c 15 	call	0x2a18 <PM_CheckEndOfFuseLockStore>
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	80 91 34 01 	lds	r24, 0x0134
    2eee:	84 31       	cpi	r24, 0x14	; 20
    2ef0:	09 f4       	brne	.+2      	; 0x2ef4 <PM_InterpretAVRISPPacket+0x484>
    2ef2:	91 e0       	ldi	r25, 0x01	; 1
    2ef4:	89 2f       	mov	r24, r25
    2ef6:	0e 94 08 14 	call	0x2810 <PM_SetupDFAddressCounters>
    2efa:	60 91 84 02 	lds	r22, 0x0284
    2efe:	70 91 85 02 	lds	r23, 0x0285
    2f02:	80 91 8b 02 	lds	r24, 0x028B
    2f06:	90 91 8c 02 	lds	r25, 0x028C
    2f0a:	0e 94 3b 0a 	call	0x1476 <DF_ContinuousReadEnable>
    2f0e:	82 e0       	ldi	r24, 0x02	; 2
    2f10:	80 93 49 02 	sts	0x0249, r24
    2f14:	10 92 2b 01 	sts	0x012B, r1
    2f18:	10 92 2c 01 	sts	0x012C, r1
    2f1c:	10 92 2d 01 	sts	0x012D, r1
    2f20:	10 92 2e 01 	sts	0x012E, r1
    2f24:	80 91 35 01 	lds	r24, 0x0135
    2f28:	99 27       	eor	r25, r25
    2f2a:	18 2f       	mov	r17, r24
    2f2c:	00 27       	eor	r16, r16
    2f2e:	80 91 36 01 	lds	r24, 0x0136
    2f32:	99 27       	eor	r25, r25
    2f34:	08 2b       	or	r16, r24
    2f36:	19 2b       	or	r17, r25
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	80 91 34 01 	lds	r24, 0x0134
    2f3e:	84 31       	cpi	r24, 0x14	; 20
    2f40:	09 f4       	brne	.+2      	; 0x2f44 <PM_InterpretAVRISPPacket+0x4d4>
    2f42:	91 e0       	ldi	r25, 0x01	; 1
    2f44:	89 2f       	mov	r24, r25
    2f46:	0e 94 90 13 	call	0x2720 <PM_GetStoredDataSize>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	6c 01       	movw	r12, r24
    2f50:	ee 24       	eor	r14, r14
    2f52:	ff 24       	eor	r15, r15
    2f54:	e0 16       	cp	r14, r16
    2f56:	f1 06       	cpc	r15, r17
    2f58:	20 f5       	brcc	.+72     	; 0x2fa2 <PM_InterpretAVRISPPacket+0x532>
    2f5a:	f6 e3       	ldi	r31, 0x36	; 54
    2f5c:	af 2e       	mov	r10, r31
    2f5e:	f1 e0       	ldi	r31, 0x01	; 1
    2f60:	bf 2e       	mov	r11, r31
    2f62:	96 01       	movw	r18, r12
    2f64:	44 27       	eor	r20, r20
    2f66:	55 27       	eor	r21, r21
    2f68:	80 91 2b 01 	lds	r24, 0x012B
    2f6c:	90 91 2c 01 	lds	r25, 0x012C
    2f70:	a0 91 2d 01 	lds	r26, 0x012D
    2f74:	b0 91 2e 01 	lds	r27, 0x012E
    2f78:	82 17       	cp	r24, r18
    2f7a:	93 07       	cpc	r25, r19
    2f7c:	a4 07       	cpc	r26, r20
    2f7e:	b5 07       	cpc	r27, r21
    2f80:	20 f4       	brcc	.+8      	; 0x2f8a <PM_InterpretAVRISPPacket+0x51a>
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	0e 94 62 09 	call	0x12c4 <SPI_SPITransmit>
    2f88:	01 c0       	rjmp	.+2      	; 0x2f8c <PM_InterpretAVRISPPacket+0x51c>
    2f8a:	8f ef       	ldi	r24, 0xFF	; 255
    2f8c:	f5 01       	movw	r30, r10
    2f8e:	81 93       	st	Z+, r24
    2f90:	5f 01       	movw	r10, r30
    2f92:	0e 94 fa 0e 	call	0x1df4 <V2P_IncrementCurrAddress>
    2f96:	08 94       	sec
    2f98:	e1 1c       	adc	r14, r1
    2f9a:	f1 1c       	adc	r15, r1
    2f9c:	e0 16       	cp	r14, r16
    2f9e:	f1 06       	cpc	r15, r17
    2fa0:	00 f3       	brcs	.-64     	; 0x2f62 <PM_InterpretAVRISPPacket+0x4f2>
    2fa2:	0d 5f       	subi	r16, 0xFD	; 253
    2fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa6:	10 93 31 01 	sts	0x0131, r17
    2faa:	00 93 30 01 	sts	0x0130, r16
    2fae:	03 50       	subi	r16, 0x03	; 3
    2fb0:	10 40       	sbci	r17, 0x00	; 0
    2fb2:	10 92 35 01 	sts	0x0135, r1
    2fb6:	0c 5c       	subi	r16, 0xCC	; 204
    2fb8:	1e 4f       	sbci	r17, 0xFE	; 254
    2fba:	f8 01       	movw	r30, r16
    2fbc:	12 82       	std	Z+2, r1	; 0x02
    2fbe:	09 c0       	rjmp	.+18     	; 0x2fd2 <PM_InterpretAVRISPPacket+0x562>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	90 93 31 01 	sts	0x0131, r25
    2fc8:	80 93 30 01 	sts	0x0130, r24
    2fcc:	89 ec       	ldi	r24, 0xC9	; 201
    2fce:	80 93 35 01 	sts	0x0135, r24
    2fd2:	0e 94 20 0e 	call	0x1c40 <V2P_SendPacket>
    2fd6:	22 96       	adiw	r28, 0x02	; 2
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	f8 94       	cli
    2fdc:	de bf       	out	0x3e, r29	; 62
    2fde:	0f be       	out	0x3f, r0	; 63
    2fe0:	cd bf       	out	0x3d, r28	; 61
    2fe2:	df 91       	pop	r29
    2fe4:	cf 91       	pop	r28
    2fe6:	1f 91       	pop	r17
    2fe8:	0f 91       	pop	r16
    2fea:	ff 90       	pop	r15
    2fec:	ef 90       	pop	r14
    2fee:	df 90       	pop	r13
    2ff0:	cf 90       	pop	r12
    2ff2:	bf 90       	pop	r11
    2ff4:	af 90       	pop	r10
    2ff6:	08 95       	ret

00002ff8 <PM_SendFuseLockBytes>:
	}
}

void PM_SendFuseLockBytes(uint8_t Type)
{
    2ff8:	0f 93       	push	r16
    2ffa:	1f 93       	push	r17
    2ffc:	cf 93       	push	r28
    2ffe:	df 93       	push	r29
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	22 97       	sbiw	r28, 0x02	; 2
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	f8 94       	cli
    300a:	de bf       	out	0x3e, r29	; 62
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	cd bf       	out	0x3d, r28	; 61
    3010:	08 2f       	mov	r16, r24
	uint16_t EEPROMAddress;
	uint8_t  TotalBytes;
	
	EEPROMAddress = ((Type == TYPE_FUSE)? Prog_TotalFuseBytes : Prog_TotalLockBytes);
    3012:	82 30       	cpi	r24, 0x02	; 2
    3014:	29 f4       	brne	.+10     	; 0x3020 <PM_SendFuseLockBytes+0x28>
    3016:	80 91 10 01 	lds	r24, 0x0110
    301a:	90 91 11 01 	lds	r25, 0x0111
    301e:	04 c0       	rjmp	.+8      	; 0x3028 <PM_SendFuseLockBytes+0x30>
    3020:	80 91 0e 01 	lds	r24, 0x010E
    3024:	90 91 0f 01 	lds	r25, 0x010F
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01

	TotalBytes = eeprom_read_byte_169(&EEPROMAddress); // Get the total number of stored fuse/lock bytes
    302c:	ce 01       	movw	r24, r28
    302e:	01 96       	adiw	r24, 0x01	; 1
    3030:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    3034:	18 2f       	mov	r17, r24
			
	EEPROMAddress = ((Type == TYPE_FUSE)? Prog_FuseBytes : Prog_LockBytes); // Set the EEPROM pointer to the fuse/lock bytes start (each fuse or lock byte takes four bytes in EEPROM)
    3036:	02 30       	cpi	r16, 0x02	; 2
    3038:	29 f4       	brne	.+10     	; 0x3044 <PM_SendFuseLockBytes+0x4c>
    303a:	80 91 0c 01 	lds	r24, 0x010C
    303e:	90 91 0d 01 	lds	r25, 0x010D
    3042:	04 c0       	rjmp	.+8      	; 0x304c <PM_SendFuseLockBytes+0x54>
    3044:	80 91 0a 01 	lds	r24, 0x010A
    3048:	90 91 0b 01 	lds	r25, 0x010B
    304c:	9a 83       	std	Y+2, r25	; 0x02
    304e:	89 83       	std	Y+1, r24	; 0x01

	while (TotalBytes--)                              // Write each of the fuse/lock bytes stored in memory to the slave AVR
	{
		for (uint8_t CommandByte = 0; CommandByte < 4; CommandByte++)      // Write each individual command byte
		{
			USI_SPITransmit(eeprom_read_byte_169(&EEPROMAddress));
			EEPROMAddress++;
		}
		
		// Add some delay before programming next byte, if there is one:
		if (TotalBytes)
		   MAIN_Delay10MS(5);
    3050:	11 50       	subi	r17, 0x01	; 1
    3052:	1f 3f       	cpi	r17, 0xFF	; 255
    3054:	b1 f0       	breq	.+44     	; 0x3082 <PM_SendFuseLockBytes+0x8a>
    3056:	03 e0       	ldi	r16, 0x03	; 3
    3058:	ce 01       	movw	r24, r28
    305a:	01 96       	adiw	r24, 0x01	; 1
    305c:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    3060:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	9a 81       	ldd	r25, Y+2	; 0x02
    3068:	01 96       	adiw	r24, 0x01	; 1
    306a:	9a 83       	std	Y+2, r25	; 0x02
    306c:	89 83       	std	Y+1, r24	; 0x01
    306e:	01 50       	subi	r16, 0x01	; 1
    3070:	07 ff       	sbrs	r16, 7
    3072:	f2 cf       	rjmp	.-28     	; 0x3058 <PM_SendFuseLockBytes+0x60>
    3074:	11 23       	and	r17, r17
    3076:	19 f0       	breq	.+6      	; 0x307e <PM_SendFuseLockBytes+0x86>
    3078:	85 e0       	ldi	r24, 0x05	; 5
    307a:	0e 94 2f 02 	call	0x45e <MAIN_Delay10MS>
    307e:	11 50       	subi	r17, 0x01	; 1
    3080:	50 f7       	brcc	.-44     	; 0x3056 <PM_SendFuseLockBytes+0x5e>
    3082:	22 96       	adiw	r28, 0x02	; 2
    3084:	0f b6       	in	r0, 0x3f	; 63
    3086:	f8 94       	cli
    3088:	de bf       	out	0x3e, r29	; 62
    308a:	0f be       	out	0x3f, r0	; 63
    308c:	cd bf       	out	0x3d, r28	; 61
    308e:	df 91       	pop	r29
    3090:	cf 91       	pop	r28
    3092:	1f 91       	pop	r17
    3094:	0f 91       	pop	r16
    3096:	08 95       	ret

00003098 <PM_SendEraseCommand>:
	}
}

void PM_SendEraseCommand(void)
{
    3098:	0f 93       	push	r16
    309a:	1f 93       	push	r17
    309c:	cf 93       	push	r28
    309e:	df 93       	push	r29
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
    30a4:	22 97       	sbiw	r28, 0x02	; 2
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	cd bf       	out	0x3d, r28	; 61
	uint16_t EEPROMAddress;

	EEPROMAddress = Prog_EraseChip + 2;               // Start of the erase commands
    30b0:	80 91 18 01 	lds	r24, 0x0118
    30b4:	90 91 19 01 	lds	r25, 0x0119
    30b8:	02 96       	adiw	r24, 0x02	; 2
    30ba:	9a 83       	std	Y+2, r25	; 0x02
    30bc:	89 83       	std	Y+1, r24	; 0x01
    30be:	13 e0       	ldi	r17, 0x03	; 3
			
	for (uint8_t B = 0; B < 4 ; B++)                  // Read out the erase chip command bytes
	{
		USI_SPITransmit(eeprom_read_byte_169(&EEPROMAddress)); // Send the erase chip commands
    30c0:	ce 01       	movw	r24, r28
    30c2:	01 96       	adiw	r24, 0x01	; 1
    30c4:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    30c8:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
		EEPROMAddress++;
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	9a 81       	ldd	r25, Y+2	; 0x02
    30d0:	01 96       	adiw	r24, 0x01	; 1
    30d2:	9a 83       	std	Y+2, r25	; 0x02
    30d4:	89 83       	std	Y+1, r24	; 0x01
    30d6:	11 50       	subi	r17, 0x01	; 1
    30d8:	17 ff       	sbrs	r17, 7
    30da:	f2 cf       	rjmp	.-28     	; 0x30c0 <PM_SendEraseCommand+0x28>
	}
			
	EEPROMAddress = Prog_EraseChip + 1;               // Poll mode flag address
    30dc:	00 91 18 01 	lds	r16, 0x0118
    30e0:	10 91 19 01 	lds	r17, 0x0119
    30e4:	0f 5f       	subi	r16, 0xFF	; 255
    30e6:	1f 4f       	sbci	r17, 0xFF	; 255
    30e8:	1a 83       	std	Y+2, r17	; 0x02
    30ea:	09 83       	std	Y+1, r16	; 0x01
    30ec:	01 50       	subi	r16, 0x01	; 1
    30ee:	10 40       	sbci	r17, 0x00	; 0
	if (eeprom_read_byte_169(&EEPROMAddress))         // Value of 1 indicates a busy flag test
    30f0:	ce 01       	movw	r24, r28
    30f2:	01 96       	adiw	r24, 0x01	; 1
    30f4:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    30f8:	88 23       	and	r24, r24
    30fa:	59 f0       	breq	.+22     	; 0x3112 <PM_SendEraseCommand+0x7a>
	{
		do
			USI_SPITransmitWord(0xF000);
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	90 ef       	ldi	r25, 0xF0	; 240
    3100:	0e 94 da 09 	call	0x13b4 <USI_SPITransmitWord>
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	0e 94 da 09 	call	0x13b4 <USI_SPITransmitWord>
    310c:	80 fd       	sbrc	r24, 0
    310e:	f6 cf       	rjmp	.-20     	; 0x30fc <PM_SendEraseCommand+0x64>
    3110:	08 c0       	rjmp	.+16     	; 0x3122 <PM_SendEraseCommand+0x8a>
		while (USI_SPITransmitWord(0x0000) & 0x01);
	}
	else                                              // Cleared flag means use a predefined delay
	{
		EEPROMAddress = Prog_EraseChip;               // Delay value address			
    3112:	1a 83       	std	Y+2, r17	; 0x02
    3114:	09 83       	std	Y+1, r16	; 0x01
		MAIN_Delay1MS(eeprom_read_byte_169(&EEPROMAddress)); // Wait the erase delay
    3116:	ce 01       	movw	r24, r28
    3118:	01 96       	adiw	r24, 0x01	; 1
    311a:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    311e:	0e 94 19 03 	call	0x632 <MAIN_Delay1MS>
    3122:	22 96       	adiw	r28, 0x02	; 2
    3124:	0f b6       	in	r0, 0x3f	; 63
    3126:	f8 94       	cli
    3128:	de bf       	out	0x3e, r29	; 62
    312a:	0f be       	out	0x3f, r0	; 63
    312c:	cd bf       	out	0x3d, r28	; 61
    312e:	df 91       	pop	r29
    3130:	cf 91       	pop	r28
    3132:	1f 91       	pop	r17
    3134:	0f 91       	pop	r16
    3136:	08 95       	ret

00003138 <PM_CreateProgrammingPackets>:
	}
}

void PM_CreateProgrammingPackets(uint8_t Type)
{			
    3138:	2f 92       	push	r2
    313a:	3f 92       	push	r3
    313c:	4f 92       	push	r4
    313e:	5f 92       	push	r5
    3140:	6f 92       	push	r6
    3142:	7f 92       	push	r7
    3144:	8f 92       	push	r8
    3146:	9f 92       	push	r9
    3148:	af 92       	push	r10
    314a:	bf 92       	push	r11
    314c:	cf 92       	push	r12
    314e:	df 92       	push	r13
    3150:	ef 92       	push	r14
    3152:	ff 92       	push	r15
    3154:	0f 93       	push	r16
    3156:	1f 93       	push	r17
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
    3160:	23 97       	sbiw	r28, 0x03	; 3
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	cd bf       	out	0x3d, r28	; 61
    316c:	18 2f       	mov	r17, r24
	uint32_t BytesRead       = 0;
    316e:	88 24       	eor	r8, r8
    3170:	99 24       	eor	r9, r9
    3172:	54 01       	movw	r10, r8
	uint32_t BytesToRead     = PM_GetStoredDataSize(Type);      // Get the byte size of the stored program
    3174:	0e 94 90 13 	call	0x2720 <PM_GetStoredDataSize>
    3178:	1b 01       	movw	r2, r22
    317a:	2c 01       	movw	r4, r24
	uint16_t BytesPerProgram;
	uint16_t EEPROMAddress;
	uint16_t PageLength;
	uint8_t  ContinuedPage   = FALSE;
    317c:	1b 82       	std	Y+3, r1	; 0x03

	EEPROMAddress = ((Type == TYPE_FLASH)? Prog_PageLength : Prog_EPageLength);
    317e:	11 30       	cpi	r17, 0x01	; 1
    3180:	29 f4       	brne	.+10     	; 0x318c <PM_CreateProgrammingPackets+0x54>
    3182:	80 91 08 01 	lds	r24, 0x0108
    3186:	90 91 09 01 	lds	r25, 0x0109
    318a:	04 c0       	rjmp	.+8      	; 0x3194 <PM_CreateProgrammingPackets+0x5c>
    318c:	80 91 06 01 	lds	r24, 0x0106
    3190:	90 91 07 01 	lds	r25, 0x0107
    3194:	9a 83       	std	Y+2, r25	; 0x02
    3196:	89 83       	std	Y+1, r24	; 0x01
	PageLength    = ((uint16_t)eeprom_read_byte_169(&EEPROMAddress) << 8);
    3198:	ce 01       	movw	r24, r28
    319a:	01 96       	adiw	r24, 0x01	; 1
    319c:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    31a0:	99 27       	eor	r25, r25
    31a2:	78 2e       	mov	r7, r24
    31a4:	66 24       	eor	r6, r6
	EEPROMAddress++;
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	9a 81       	ldd	r25, Y+2	; 0x02
    31aa:	01 96       	adiw	r24, 0x01	; 1
    31ac:	9a 83       	std	Y+2, r25	; 0x02
    31ae:	89 83       	std	Y+1, r24	; 0x01
	PageLength   |= (eeprom_read_byte_169(&EEPROMAddress));
    31b0:	ce 01       	movw	r24, r28
    31b2:	01 96       	adiw	r24, 0x01	; 1
    31b4:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    31b8:	99 27       	eor	r25, r25
    31ba:	68 2a       	or	r6, r24
    31bc:	79 2a       	or	r7, r25
	
	CurrAddress = 0;
    31be:	10 92 2b 01 	sts	0x012B, r1
    31c2:	10 92 2c 01 	sts	0x012C, r1
    31c6:	10 92 2d 01 	sts	0x012D, r1
    31ca:	10 92 2e 01 	sts	0x012E, r1

	if (Type == TYPE_FLASH)
    31ce:	11 30       	cpi	r17, 0x01	; 1
    31d0:	69 f4       	brne	.+26     	; 0x31ec <PM_CreateProgrammingPackets+0xb4>
	{
		EEPROMAddress = Prog_WriteProgram;             // Set the EEPROM pointer to the write flash command bytes location
    31d2:	80 91 1e 01 	lds	r24, 0x011E
    31d6:	90 91 1f 01 	lds	r25, 0x011F
    31da:	9a 83       	std	Y+2, r25	; 0x02
    31dc:	89 83       	std	Y+1, r24	; 0x01
		DF_ContinuousReadEnable(0, 0);
    31de:	60 e0       	ldi	r22, 0x00	; 0
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	cb 01       	movw	r24, r22
    31e4:	0e 94 3b 0a 	call	0x1476 <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_FLASH_ISP;
    31e8:	83 e1       	ldi	r24, 0x13	; 19
    31ea:	0d c0       	rjmp	.+26     	; 0x3206 <PM_CreateProgrammingPackets+0xce>
	}
	else
	{
		EEPROMAddress = Prog_WriteEEPROM;              // Set the EEPROM pointer to the write EEPROM command bytes location
    31ec:	80 91 1c 01 	lds	r24, 0x011C
    31f0:	90 91 1d 01 	lds	r25, 0x011D
    31f4:	9a 83       	std	Y+2, r25	; 0x02
    31f6:	89 83       	std	Y+1, r24	; 0x01
		DF_ContinuousReadEnable(PM_EEPROM_OFFSET / DF_INTERNALDF_BUFFBYTES, PM_EEPROM_OFFSET % DF_INTERNALDF_BUFFBYTES); // Start read from the EEPROM offset location
    31f8:	60 ee       	ldi	r22, 0xE0	; 224
    31fa:	70 e0       	ldi	r23, 0x00	; 0
    31fc:	84 ee       	ldi	r24, 0xE4	; 228
    31fe:	93 e0       	ldi	r25, 0x03	; 3
    3200:	0e 94 3b 0a 	call	0x1476 <DF_ContinuousReadEnable>
		PacketBytes[0] = CMD_PROGRAM_EEPROM_ISP;
    3204:	85 e1       	ldi	r24, 0x15	; 21
    3206:	80 93 34 01 	sts	0x0134, r24
    320a:	f5 e3       	ldi	r31, 0x35	; 53
    320c:	ef 2e       	mov	r14, r31
    320e:	f1 e0       	ldi	r31, 0x01	; 1
    3210:	ff 2e       	mov	r15, r31
    3212:	18 e0       	ldi	r17, 0x08	; 8
	}

	for (uint8_t B = 1; B <= 9 ; B++)                 // Load in the write data command bytes
	{
		PacketBytes[B] = eeprom_read_byte_169(&EEPROMAddress); // Synthesise a write packet header
    3214:	ce 01       	movw	r24, r28
    3216:	01 96       	adiw	r24, 0x01	; 1
    3218:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
    321c:	f7 01       	movw	r30, r14
    321e:	81 93       	st	Z+, r24
    3220:	7f 01       	movw	r14, r30
		EEPROMAddress++;                               // Increment the EEPROM location counter
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	9a 81       	ldd	r25, Y+2	; 0x02
    3226:	01 96       	adiw	r24, 0x01	; 1
    3228:	9a 83       	std	Y+2, r25	; 0x02
    322a:	89 83       	std	Y+1, r24	; 0x01
    322c:	11 50       	subi	r17, 0x01	; 1
    322e:	17 ff       	sbrs	r17, 7
    3230:	f1 cf       	rjmp	.-30     	; 0x3214 <PM_CreateProgrammingPackets+0xdc>
	}
	
	BytesPerProgram = ((uint16_t)PacketBytes[1] << 8)
    3232:	80 91 35 01 	lds	r24, 0x0135
    3236:	99 27       	eor	r25, r25
    3238:	d8 2e       	mov	r13, r24
    323a:	cc 24       	eor	r12, r12
    323c:	80 91 36 01 	lds	r24, 0x0136
    3240:	99 27       	eor	r25, r25
    3242:	c8 2a       	or	r12, r24
    3244:	d9 2a       	or	r13, r25
	                | PacketBytes[2];

	while (BytesRead < BytesToRead)
	{
		if (PacketBytes[3] & ISPCC_PROG_MODE_PAGE)
		{
			if (PageLength > 160) // Max 160 bytes at a time
			{
				if (!(ContinuedPage))                      // Start of a new page, program in the first 150 bytes
				{
					BytesPerProgram = 160;
					PacketBytes[3] &= ~ISPCC_PROG_MODE_PAGEDONE;		
					ContinuedPage = TRUE;
				}
				else                                       // Middle of a page, program in the remainder
				{
					BytesPerProgram = PageLength - 160;
					PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;
					ContinuedPage = FALSE;
				}
				
				for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page				

				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);
				PacketBytes[2] = (uint8_t)(BytesPerProgram);

				BytesRead += BytesPerProgram;                         // Increment the counter
			}
			else
			{
				for (uint16_t LoadB = 0; LoadB < PageLength; LoadB++)
					PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);  // Load in the page
			
				PacketBytes[1]  = (uint8_t)(PageLength >> 8);
				PacketBytes[2]  = (uint8_t)(PageLength);
				PacketBytes[3] |= ISPCC_PROG_MODE_PAGEDONE;

				BytesRead += PageLength;                            // Increment the counter
			}
		}
		else
		{
			if ((BytesRead + BytesPerProgram) > BytesToRead)        // Less than a whole BytesPerProgram left of data to write
			{
				BytesPerProgram = BytesToRead - BytesRead;          // Next lot of bytes will be the remaining data length
				PacketBytes[1] = (uint8_t)(BytesPerProgram >> 8);   // \. Save the new length
				PacketBytes[2] = (uint8_t)(BytesPerProgram);        // /  into the data packet
			}

			for (uint16_t LoadB = 0; LoadB < BytesPerProgram; LoadB++)
				PacketBytes[10 + LoadB] = SPI_SPITransmit(0x00);    // Load in the page
			
			BytesRead += BytesPerProgram;                           // Increment the counter
		}
	
		if (!(BytesRead & 0xFFFF) && (BytesRead & 0x00FF0000))      // Extended address required
		{
			USI_SPITransmit(V2P_LOAD_EXTENDED_ADDR_CMD);            // Load extended address command
			USI_SPITransmit(0x00);
			USI_SPITransmit((BytesRead & 0x00FF0000) >> 16);        // The 3rd byte of the long holds the extended address
			USI_SPITransmit(0x00);
		}

		ISPCC_ProgramChip();                                        // Start the program cycle
    3246:	82 14       	cp	r8, r2
    3248:	93 04       	cpc	r9, r3
    324a:	a4 04       	cpc	r10, r4
    324c:	b5 04       	cpc	r11, r5
    324e:	08 f0       	brcs	.+2      	; 0x3252 <PM_CreateProgrammingPackets+0x11a>
    3250:	b7 c0       	rjmp	.+366    	; 0x33c0 <PM_CreateProgrammingPackets+0x288>
    3252:	20 91 37 01 	lds	r18, 0x0137
    3256:	82 2f       	mov	r24, r18
    3258:	99 27       	eor	r25, r25
    325a:	ac 01       	movw	r20, r24
    325c:	41 70       	andi	r20, 0x01	; 1
    325e:	50 70       	andi	r21, 0x00	; 0
    3260:	80 ff       	sbrs	r24, 0
    3262:	58 c0       	rjmp	.+176    	; 0x3314 <PM_CreateProgrammingPackets+0x1dc>
    3264:	f1 ea       	ldi	r31, 0xA1	; 161
    3266:	6f 16       	cp	r6, r31
    3268:	71 04       	cpc	r7, r1
    326a:	88 f1       	brcs	.+98     	; 0x32ce <PM_CreateProgrammingPackets+0x196>
    326c:	8b 81       	ldd	r24, Y+3	; 0x03
    326e:	88 23       	and	r24, r24
    3270:	49 f4       	brne	.+18     	; 0x3284 <PM_CreateProgrammingPackets+0x14c>
    3272:	70 ea       	ldi	r23, 0xA0	; 160
    3274:	c7 2e       	mov	r12, r23
    3276:	d1 2c       	mov	r13, r1
    3278:	2f 77       	andi	r18, 0x7F	; 127
    327a:	20 93 37 01 	sts	0x0137, r18
    327e:	e1 e0       	ldi	r30, 0x01	; 1
    3280:	eb 83       	std	Y+3, r30	; 0x03
    3282:	0a c0       	rjmp	.+20     	; 0x3298 <PM_CreateProgrammingPackets+0x160>
    3284:	60 e6       	ldi	r22, 0x60	; 96
    3286:	c6 2e       	mov	r12, r22
    3288:	6f ef       	ldi	r22, 0xFF	; 255
    328a:	d6 2e       	mov	r13, r22
    328c:	c6 0c       	add	r12, r6
    328e:	d7 1c       	adc	r13, r7
    3290:	20 68       	ori	r18, 0x80	; 128
    3292:	20 93 37 01 	sts	0x0137, r18
    3296:	1b 82       	std	Y+3, r1	; 0x03
    3298:	00 e0       	ldi	r16, 0x00	; 0
    329a:	10 e0       	ldi	r17, 0x00	; 0
    329c:	0c 15       	cp	r16, r12
    329e:	1d 05       	cpc	r17, r13
    32a0:	78 f4       	brcc	.+30     	; 0x32c0 <PM_CreateProgrammingPackets+0x188>
    32a2:	5e e3       	ldi	r21, 0x3E	; 62
    32a4:	e5 2e       	mov	r14, r21
    32a6:	51 e0       	ldi	r21, 0x01	; 1
    32a8:	f5 2e       	mov	r15, r21
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	0e 94 62 09 	call	0x12c4 <SPI_SPITransmit>
    32b0:	f7 01       	movw	r30, r14
    32b2:	81 93       	st	Z+, r24
    32b4:	7f 01       	movw	r14, r30
    32b6:	0f 5f       	subi	r16, 0xFF	; 255
    32b8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ba:	0c 15       	cp	r16, r12
    32bc:	1d 05       	cpc	r17, r13
    32be:	a8 f3       	brcs	.-22     	; 0x32aa <PM_CreateProgrammingPackets+0x172>
    32c0:	8d 2d       	mov	r24, r13
    32c2:	99 27       	eor	r25, r25
    32c4:	80 93 35 01 	sts	0x0135, r24
    32c8:	c0 92 36 01 	sts	0x0136, r12
    32cc:	4b c0       	rjmp	.+150    	; 0x3364 <PM_CreateProgrammingPackets+0x22c>
    32ce:	00 e0       	ldi	r16, 0x00	; 0
    32d0:	10 e0       	ldi	r17, 0x00	; 0
    32d2:	06 15       	cp	r16, r6
    32d4:	17 05       	cpc	r17, r7
    32d6:	78 f4       	brcc	.+30     	; 0x32f6 <PM_CreateProgrammingPackets+0x1be>
    32d8:	3e e3       	ldi	r19, 0x3E	; 62
    32da:	e3 2e       	mov	r14, r19
    32dc:	31 e0       	ldi	r19, 0x01	; 1
    32de:	f3 2e       	mov	r15, r19
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	0e 94 62 09 	call	0x12c4 <SPI_SPITransmit>
    32e6:	f7 01       	movw	r30, r14
    32e8:	81 93       	st	Z+, r24
    32ea:	7f 01       	movw	r14, r30
    32ec:	0f 5f       	subi	r16, 0xFF	; 255
    32ee:	1f 4f       	sbci	r17, 0xFF	; 255
    32f0:	06 15       	cp	r16, r6
    32f2:	17 05       	cpc	r17, r7
    32f4:	a8 f3       	brcs	.-22     	; 0x32e0 <PM_CreateProgrammingPackets+0x1a8>
    32f6:	87 2d       	mov	r24, r7
    32f8:	99 27       	eor	r25, r25
    32fa:	80 93 35 01 	sts	0x0135, r24
    32fe:	60 92 36 01 	sts	0x0136, r6
    3302:	80 91 37 01 	lds	r24, 0x0137
    3306:	80 68       	ori	r24, 0x80	; 128
    3308:	80 93 37 01 	sts	0x0137, r24
    330c:	c3 01       	movw	r24, r6
    330e:	aa 27       	eor	r26, r26
    3310:	bb 27       	eor	r27, r27
    3312:	2b c0       	rjmp	.+86     	; 0x336a <PM_CreateProgrammingPackets+0x232>
    3314:	c6 01       	movw	r24, r12
    3316:	aa 27       	eor	r26, r26
    3318:	bb 27       	eor	r27, r27
    331a:	88 0d       	add	r24, r8
    331c:	99 1d       	adc	r25, r9
    331e:	aa 1d       	adc	r26, r10
    3320:	bb 1d       	adc	r27, r11
    3322:	28 16       	cp	r2, r24
    3324:	39 06       	cpc	r3, r25
    3326:	4a 06       	cpc	r4, r26
    3328:	5b 06       	cpc	r5, r27
    332a:	48 f4       	brcc	.+18     	; 0x333e <PM_CreateProgrammingPackets+0x206>
    332c:	61 01       	movw	r12, r2
    332e:	c8 18       	sub	r12, r8
    3330:	d9 08       	sbc	r13, r9
    3332:	8d 2d       	mov	r24, r13
    3334:	99 27       	eor	r25, r25
    3336:	80 93 35 01 	sts	0x0135, r24
    333a:	c0 92 36 01 	sts	0x0136, r12
    333e:	8a 01       	movw	r16, r20
    3340:	4c 15       	cp	r20, r12
    3342:	5d 05       	cpc	r21, r13
    3344:	78 f4       	brcc	.+30     	; 0x3364 <PM_CreateProgrammingPackets+0x22c>
    3346:	8e e3       	ldi	r24, 0x3E	; 62
    3348:	e8 2e       	mov	r14, r24
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	f8 2e       	mov	r15, r24
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	0e 94 62 09 	call	0x12c4 <SPI_SPITransmit>
    3354:	f7 01       	movw	r30, r14
    3356:	81 93       	st	Z+, r24
    3358:	7f 01       	movw	r14, r30
    335a:	0f 5f       	subi	r16, 0xFF	; 255
    335c:	1f 4f       	sbci	r17, 0xFF	; 255
    335e:	0c 15       	cp	r16, r12
    3360:	1d 05       	cpc	r17, r13
    3362:	a8 f3       	brcs	.-22     	; 0x334e <PM_CreateProgrammingPackets+0x216>
    3364:	c6 01       	movw	r24, r12
    3366:	aa 27       	eor	r26, r26
    3368:	bb 27       	eor	r27, r27
    336a:	88 0e       	add	r8, r24
    336c:	99 1e       	adc	r9, r25
    336e:	aa 1e       	adc	r10, r26
    3370:	bb 1e       	adc	r11, r27
    3372:	81 14       	cp	r8, r1
    3374:	91 04       	cpc	r9, r1
    3376:	e1 f4       	brne	.+56     	; 0x33b0 <PM_CreateProgrammingPackets+0x278>
    3378:	e1 2c       	mov	r14, r1
    337a:	f1 2c       	mov	r15, r1
    337c:	bf ef       	ldi	r27, 0xFF	; 255
    337e:	0b 2f       	mov	r16, r27
    3380:	11 2d       	mov	r17, r1
    3382:	e8 20       	and	r14, r8
    3384:	f9 20       	and	r15, r9
    3386:	0a 21       	and	r16, r10
    3388:	1b 21       	and	r17, r11
    338a:	e1 14       	cp	r14, r1
    338c:	f1 04       	cpc	r15, r1
    338e:	01 05       	cpc	r16, r1
    3390:	11 05       	cpc	r17, r1
    3392:	71 f0       	breq	.+28     	; 0x33b0 <PM_CreateProgrammingPackets+0x278>
    3394:	8d e4       	ldi	r24, 0x4D	; 77
    3396:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    33a0:	c8 01       	movw	r24, r16
    33a2:	aa 27       	eor	r26, r26
    33a4:	bb 27       	eor	r27, r27
    33a6:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	0e 94 c7 09 	call	0x138e <USI_SPITransmit>
    33b0:	0e 94 39 11 	call	0x2272 <ISPCC_ProgramChip>
    33b4:	82 14       	cp	r8, r2
    33b6:	93 04       	cpc	r9, r3
    33b8:	a4 04       	cpc	r10, r4
    33ba:	b5 04       	cpc	r11, r5
    33bc:	08 f4       	brcc	.+2      	; 0x33c0 <PM_CreateProgrammingPackets+0x288>
    33be:	49 cf       	rjmp	.-366    	; 0x3252 <PM_CreateProgrammingPackets+0x11a>
    33c0:	23 96       	adiw	r28, 0x03	; 3
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	df 91       	pop	r29
    33ce:	cf 91       	pop	r28
    33d0:	1f 91       	pop	r17
    33d2:	0f 91       	pop	r16
    33d4:	ff 90       	pop	r15
    33d6:	ef 90       	pop	r14
    33d8:	df 90       	pop	r13
    33da:	cf 90       	pop	r12
    33dc:	bf 90       	pop	r11
    33de:	af 90       	pop	r10
    33e0:	9f 90       	pop	r9
    33e2:	8f 90       	pop	r8
    33e4:	7f 90       	pop	r7
    33e6:	6f 90       	pop	r6
    33e8:	5f 90       	pop	r5
    33ea:	4f 90       	pop	r4
    33ec:	3f 90       	pop	r3
    33ee:	2f 90       	pop	r2
    33f0:	08 95       	ret

000033f2 <PM_ShowStoredItemSizes>:
	}
}

void PM_ShowStoredItemSizes(void)
{
    33f2:	1f 93       	push	r17
    33f4:	cf 93       	push	r28
    33f6:	df 93       	push	r29
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
    33fc:	2e 97       	sbiw	r28, 0x0e	; 14
    33fe:	0f b6       	in	r0, 0x3f	; 63
    3400:	f8 94       	cli
    3402:	de bf       	out	0x3e, r29	; 62
    3404:	0f be       	out	0x3f, r0	; 63
    3406:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[14];
	uint8_t ItemInfoIndex = 0;
    3408:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t TempB;
	
	JoyStatus = 1;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	8e bb       	out	0x1e, r24	; 30
	
	while (1)
	{
		if (JoyStatus)                           // Joystick is in the non-center position
    340e:	8e b3       	in	r24, 0x1e	; 30
    3410:	88 23       	and	r24, r24
    3412:	e9 f3       	breq	.-6      	; 0x340e <PM_ShowStoredItemSizes+0x1c>
		{
			if (JoyStatus & JOY_UP)              // Previous item
    3414:	f6 9b       	sbis	0x1e, 6	; 30
    3416:	06 c0       	rjmp	.+12     	; 0x3424 <PM_ShowStoredItemSizes+0x32>
				(ItemInfoIndex == 0)? ItemInfoIndex = 3 : ItemInfoIndex--;
    3418:	11 23       	and	r17, r17
    341a:	11 f4       	brne	.+4      	; 0x3420 <PM_ShowStoredItemSizes+0x2e>
    341c:	13 e0       	ldi	r17, 0x03	; 3
    341e:	0c c0       	rjmp	.+24     	; 0x3438 <PM_ShowStoredItemSizes+0x46>
    3420:	11 50       	subi	r17, 0x01	; 1
    3422:	0a c0       	rjmp	.+20     	; 0x3438 <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_DOWN)      // Next item
    3424:	f7 9b       	sbis	0x1e, 7	; 30
    3426:	06 c0       	rjmp	.+12     	; 0x3434 <PM_ShowStoredItemSizes+0x42>
				(ItemInfoIndex == 3)? ItemInfoIndex = 0 : ItemInfoIndex++;
    3428:	13 30       	cpi	r17, 0x03	; 3
    342a:	11 f4       	brne	.+4      	; 0x3430 <PM_ShowStoredItemSizes+0x3e>
    342c:	10 e0       	ldi	r17, 0x00	; 0
    342e:	04 c0       	rjmp	.+8      	; 0x3438 <PM_ShowStoredItemSizes+0x46>
    3430:	1f 5f       	subi	r17, 0xFF	; 255
    3432:	02 c0       	rjmp	.+4      	; 0x3438 <PM_ShowStoredItemSizes+0x46>
			else if (JoyStatus & JOY_LEFT)
    3434:	f2 99       	sbic	0x1e, 2	; 30
    3436:	53 c0       	rjmp	.+166    	; 0x34de <PM_ShowStoredItemSizes+0xec>
				return;
		
			switch (ItemInfoIndex)
    3438:	81 2f       	mov	r24, r17
    343a:	99 27       	eor	r25, r25
    343c:	81 30       	cpi	r24, 0x01	; 1
    343e:	91 05       	cpc	r25, r1
    3440:	a1 f0       	breq	.+40     	; 0x346a <PM_ShowStoredItemSizes+0x78>
    3442:	82 30       	cpi	r24, 0x02	; 2
    3444:	91 05       	cpc	r25, r1
    3446:	1c f4       	brge	.+6      	; 0x344e <PM_ShowStoredItemSizes+0x5c>
    3448:	89 2b       	or	r24, r25
    344a:	39 f0       	breq	.+14     	; 0x345a <PM_ShowStoredItemSizes+0x68>
    344c:	41 c0       	rjmp	.+130    	; 0x34d0 <PM_ShowStoredItemSizes+0xde>
    344e:	82 30       	cpi	r24, 0x02	; 2
    3450:	91 05       	cpc	r25, r1
    3452:	01 f1       	breq	.+64     	; 0x3494 <PM_ShowStoredItemSizes+0xa2>
    3454:	03 97       	sbiw	r24, 0x03	; 3
    3456:	39 f1       	breq	.+78     	; 0x34a6 <PM_ShowStoredItemSizes+0xb4>
    3458:	3b c0       	rjmp	.+118    	; 0x34d0 <PM_ShowStoredItemSizes+0xde>
			{
				case 0:
					strcpy_P(Buffer, PSTR("DATA-"));
    345a:	63 e0       	ldi	r22, 0x03	; 3
    345c:	74 e0       	ldi	r23, 0x04	; 4
    345e:	ce 01       	movw	r24, r28
    3460:	01 96       	adiw	r24, 0x01	; 1
    3462:	0e 94 4b 1b 	call	0x3696 <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_FLASH), &Buffer[5], 10);
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	07 c0       	rjmp	.+14     	; 0x3478 <PM_ShowStoredItemSizes+0x86>
					break;
				case 1:
					strcpy_P(Buffer, PSTR("EPRM-"));
    346a:	69 e0       	ldi	r22, 0x09	; 9
    346c:	74 e0       	ldi	r23, 0x04	; 4
    346e:	ce 01       	movw	r24, r28
    3470:	01 96       	adiw	r24, 0x01	; 1
    3472:	0e 94 4b 1b 	call	0x3696 <strcpy_P>
					ultoa(PM_GetStoredDataSize(TYPE_EEPROM), &Buffer[5], 10);
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	0e 94 90 13 	call	0x2720 <PM_GetStoredDataSize>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	2a e0       	ldi	r18, 0x0A	; 10
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	ae 01       	movw	r20, r28
    3486:	4a 5f       	subi	r20, 0xFA	; 250
    3488:	5f 4f       	sbci	r21, 0xFF	; 255
    348a:	bc 01       	movw	r22, r24
    348c:	cd 01       	movw	r24, r26
    348e:	0e 94 52 1b 	call	0x36a4 <ultoa>
					break;
    3492:	1e c0       	rjmp	.+60     	; 0x34d0 <PM_ShowStoredItemSizes+0xde>
				case 2:
					strcpy_P(Buffer, PSTR("FUSE-"));
    3494:	6f e0       	ldi	r22, 0x0F	; 15
    3496:	74 e0       	ldi	r23, 0x04	; 4
    3498:	ce 01       	movw	r24, r28
    349a:	01 96       	adiw	r24, 0x01	; 1
    349c:	0e 94 4b 1b 	call	0x3696 <strcpy_P>
					TempB = eeprom_read_byte_169(&Prog_TotalFuseBytes);
    34a0:	80 e1       	ldi	r24, 0x10	; 16
    34a2:	91 e0       	ldi	r25, 0x01	; 1
    34a4:	08 c0       	rjmp	.+16     	; 0x34b6 <PM_ShowStoredItemSizes+0xc4>
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);
					break;
				case 3:
					strcpy_P(Buffer, PSTR("LOCK-"));
    34a6:	65 e1       	ldi	r22, 0x15	; 21
    34a8:	74 e0       	ldi	r23, 0x04	; 4
    34aa:	ce 01       	movw	r24, r28
    34ac:	01 96       	adiw	r24, 0x01	; 1
    34ae:	0e 94 4b 1b 	call	0x3696 <strcpy_P>
					TempB = eeprom_read_byte_169(&Prog_TotalLockBytes);
    34b2:	8e e0       	ldi	r24, 0x0E	; 14
    34b4:	91 e0       	ldi	r25, 0x01	; 1
    34b6:	0e 94 d9 08 	call	0x11b2 <eeprom_read_byte_169>
					MAIN_IntToStr(((TempB == 0xFF)? 0x00 : TempB), &Buffer[5]);		
    34ba:	8f 3f       	cpi	r24, 0xFF	; 255
    34bc:	11 f0       	breq	.+4      	; 0x34c2 <PM_ShowStoredItemSizes+0xd0>
    34be:	99 27       	eor	r25, r25
    34c0:	02 c0       	rjmp	.+4      	; 0x34c6 <PM_ShowStoredItemSizes+0xd4>
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	be 01       	movw	r22, r28
    34c8:	6a 5f       	subi	r22, 0xFA	; 250
    34ca:	7f 4f       	sbci	r23, 0xFF	; 255
    34cc:	0e 94 46 03 	call	0x68c <MAIN_IntToStr>
			}
	
			LCD_puts(Buffer);
    34d0:	ce 01       	movw	r24, r28
    34d2:	01 96       	adiw	r24, 0x01	; 1
    34d4:	0e 94 de 07 	call	0xfbc <LCD_puts>

			MAIN_WaitForJoyRelease();
    34d8:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
    34dc:	98 cf       	rjmp	.-208    	; 0x340e <PM_ShowStoredItemSizes+0x1c>
    34de:	2e 96       	adiw	r28, 0x0e	; 14
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	cd bf       	out	0x3d, r28	; 61
    34ea:	df 91       	pop	r29
    34ec:	cf 91       	pop	r28
    34ee:	1f 91       	pop	r17
    34f0:	08 95       	ret

000034f2 <TM_FindNextTag>:
	DF_EnableDataflash(FALSE);
}

void TM_FindNextTag(void)
{
    34f2:	af 92       	push	r10
    34f4:	bf 92       	push	r11
    34f6:	df 92       	push	r13
    34f8:	ef 92       	push	r14
    34fa:	ff 92       	push	r15
    34fc:	0f 93       	push	r16
    34fe:	1f 93       	push	r17
    3500:	cf 93       	push	r28
    3502:	df 93       	push	r29
    3504:	cd b7       	in	r28, 0x3d	; 61
    3506:	de b7       	in	r29, 0x3e	; 62
    3508:	69 97       	sbiw	r28, 0x19	; 25
    350a:	0f b6       	in	r0, 0x3f	; 63
    350c:	f8 94       	cli
    350e:	de bf       	out	0x3e, r29	; 62
    3510:	0f be       	out	0x3f, r0	; 63
    3512:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Buffer[21];
	uint8_t  HeadBuff[4]      = BT_TAGHEADER;
    3514:	80 e4       	ldi	r24, 0x40	; 64
    3516:	8e 8b       	std	Y+22, r24	; 0x16
    3518:	86 e1       	ldi	r24, 0x16	; 22
    351a:	a8 2e       	mov	r10, r24
    351c:	b1 2c       	mov	r11, r1
    351e:	ac 0e       	add	r10, r28
    3520:	bd 1e       	adc	r11, r29
    3522:	88 e2       	ldi	r24, 0x28	; 40
    3524:	8f 8b       	std	Y+23, r24	; 0x17
    3526:	83 e2       	ldi	r24, 0x23	; 35
    3528:	88 8f       	std	Y+24, r24	; 0x18
    352a:	89 e2       	ldi	r24, 0x29	; 41
    352c:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t ProgDataSize     = PM_GetStoredDataSize(TYPE_FLASH);
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	0e 94 90 13 	call	0x2720 <PM_GetStoredDataSize>
    3534:	7b 01       	movw	r14, r22
    3536:	8c 01       	movw	r16, r24
	uint8_t  TotalOkHeadBytes = 0;
    3538:	dd 24       	eor	r13, r13
	uint8_t  TagByte;
	uint8_t  BytesRead;
	
	MAIN_SETSTATUSLED(MAIN_STATLED_ORANGE);    // Orange = busy
    353a:	81 b3       	in	r24, 0x11	; 17
    353c:	80 63       	ori	r24, 0x30	; 48
    353e:	81 bb       	out	0x11, r24	; 17

	while (DFPos < ProgDataSize)
	{
		BytesRead = 1;
		
		if (SPI_SPITransmit(0x00) == HeadBuff[TotalOkHeadBytes++])
		{
			if (TotalOkHeadBytes == 4)
			{
				uint8_t HB;
			
				for (HB = 0; HB < 20; HB++)
				{
					TagByte = SPI_SPITransmit(0x00);
					Buffer[HB] = TagByte;
					
					if (TagByte == 0x00)
					  break;
				}
				
				Buffer[20] = '\0';             // Make sure string is null-terminated

				TagExists = TRUE;
				BytesRead = (HB + 2);

				LCD_puts(Buffer);
				MAIN_SETSTATUSLED(MAIN_STATLED_GREEN); // Green = ready
				return;
			}
		}
		else
		{
			TotalOkHeadBytes = 0;
		}

		DFPos += BytesRead;
    3540:	80 91 d2 02 	lds	r24, 0x02D2
    3544:	90 91 d3 02 	lds	r25, 0x02D3
    3548:	a0 91 d4 02 	lds	r26, 0x02D4
    354c:	b0 91 d5 02 	lds	r27, 0x02D5
    3550:	8e 15       	cp	r24, r14
    3552:	9f 05       	cpc	r25, r15
    3554:	a0 07       	cpc	r26, r16
    3556:	b1 07       	cpc	r27, r17
    3558:	08 f0       	brcs	.+2      	; 0x355c <TM_FindNextTag+0x6a>
    355a:	43 c0       	rjmp	.+134    	; 0x35e2 <TM_FindNextTag+0xf0>
    355c:	80 e0       	ldi	r24, 0x00	; 0
    355e:	0e 94 62 09 	call	0x12c4 <SPI_SPITransmit>
    3562:	f5 01       	movw	r30, r10
    3564:	ed 0d       	add	r30, r13
    3566:	f1 1d       	adc	r31, r1
    3568:	d3 94       	inc	r13
    356a:	90 81       	ld	r25, Z
    356c:	89 17       	cp	r24, r25
    356e:	21 f5       	brne	.+72     	; 0x35b8 <TM_FindNextTag+0xc6>
    3570:	84 e0       	ldi	r24, 0x04	; 4
    3572:	d8 16       	cp	r13, r24
    3574:	11 f5       	brne	.+68     	; 0x35ba <TM_FindNextTag+0xc8>
    3576:	ff 24       	eor	r15, r15
    3578:	00 e0       	ldi	r16, 0x00	; 0
    357a:	10 e0       	ldi	r17, 0x00	; 0
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	0e 94 62 09 	call	0x12c4 <SPI_SPITransmit>
    3582:	9e 01       	movw	r18, r28
    3584:	2f 5f       	subi	r18, 0xFF	; 255
    3586:	3f 4f       	sbci	r19, 0xFF	; 255
    3588:	f8 01       	movw	r30, r16
    358a:	e2 0f       	add	r30, r18
    358c:	f3 1f       	adc	r31, r19
    358e:	80 83       	st	Z, r24
    3590:	88 23       	and	r24, r24
    3592:	31 f0       	breq	.+12     	; 0x35a0 <TM_FindNextTag+0xae>
    3594:	f3 94       	inc	r15
    3596:	0f 5f       	subi	r16, 0xFF	; 255
    3598:	1f 4f       	sbci	r17, 0xFF	; 255
    359a:	83 e1       	ldi	r24, 0x13	; 19
    359c:	8f 15       	cp	r24, r15
    359e:	70 f7       	brcc	.-36     	; 0x357c <TM_FindNextTag+0x8a>
    35a0:	1d 8a       	std	Y+21, r1	; 0x15
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	80 93 4b 02 	sts	0x024B, r24
    35a8:	c9 01       	movw	r24, r18
    35aa:	0e 94 de 07 	call	0xfbc <LCD_puts>
    35ae:	81 b3       	in	r24, 0x11	; 17
    35b0:	8f 7c       	andi	r24, 0xCF	; 207
    35b2:	80 61       	ori	r24, 0x10	; 16
    35b4:	81 bb       	out	0x11, r24	; 17
    35b6:	31 c0       	rjmp	.+98     	; 0x361a <TM_FindNextTag+0x128>
    35b8:	dd 24       	eor	r13, r13
    35ba:	80 91 d2 02 	lds	r24, 0x02D2
    35be:	90 91 d3 02 	lds	r25, 0x02D3
    35c2:	a0 91 d4 02 	lds	r26, 0x02D4
    35c6:	b0 91 d5 02 	lds	r27, 0x02D5
    35ca:	01 96       	adiw	r24, 0x01	; 1
    35cc:	a1 1d       	adc	r26, r1
    35ce:	b1 1d       	adc	r27, r1
    35d0:	80 93 d2 02 	sts	0x02D2, r24
    35d4:	90 93 d3 02 	sts	0x02D3, r25
    35d8:	a0 93 d4 02 	sts	0x02D4, r26
    35dc:	b0 93 d5 02 	sts	0x02D5, r27
    35e0:	b7 cf       	rjmp	.-146    	; 0x3550 <TM_FindNextTag+0x5e>
	}
	
	DF_ContinuousReadEnable(0, 0);
    35e2:	60 e0       	ldi	r22, 0x00	; 0
    35e4:	70 e0       	ldi	r23, 0x00	; 0
    35e6:	cb 01       	movw	r24, r22
    35e8:	0e 94 3b 0a 	call	0x1476 <DF_ContinuousReadEnable>
	DFPos = 0;
    35ec:	10 92 d2 02 	sts	0x02D2, r1
    35f0:	10 92 d3 02 	sts	0x02D3, r1
    35f4:	10 92 d4 02 	sts	0x02D4, r1
    35f8:	10 92 d5 02 	sts	0x02D5, r1
	
	if (TagExists == FALSE)
    35fc:	80 91 4b 02 	lds	r24, 0x024B
    3600:	88 23       	and	r24, r24
    3602:	49 f4       	brne	.+18     	; 0x3616 <TM_FindNextTag+0x124>
	{
		MAIN_SETSTATUSLED(MAIN_STATLED_GREEN);  // Green = ready
    3604:	81 b3       	in	r24, 0x11	; 17
    3606:	8f 7c       	andi	r24, 0xCF	; 207
    3608:	80 61       	ori	r24, 0x10	; 16
    360a:	81 bb       	out	0x11, r24	; 17
		MAIN_ShowError(PSTR("NO TAGS"));
    360c:	8b e1       	ldi	r24, 0x1B	; 27
    360e:	94 e0       	ldi	r25, 0x04	; 4
    3610:	0e 94 80 03 	call	0x700 <MAIN_ShowError>
    3614:	02 c0       	rjmp	.+4      	; 0x361a <TM_FindNextTag+0x128>
	}
	else
	{
		/* The following line _is_ recursion, but the function will only ever call itself
		   a maximum of one time. The function will call itself upon skipping from the last
		   tag stored in the program data to the first; to guard against infinite recursion
		   if no tags are present, the system will error out if the TagExists flag is empty
		   after a full data read. Once a tag has been read and displayed onto the LCD, the
           function returns to the main tag handling routine.                               */
		TM_FindNextTag();
    3616:	0e 94 79 1a 	call	0x34f2 <TM_FindNextTag>
    361a:	69 96       	adiw	r28, 0x19	; 25
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	df 91       	pop	r29
    3628:	cf 91       	pop	r28
    362a:	1f 91       	pop	r17
    362c:	0f 91       	pop	r16
    362e:	ff 90       	pop	r15
    3630:	ef 90       	pop	r14
    3632:	df 90       	pop	r13
    3634:	bf 90       	pop	r11
    3636:	af 90       	pop	r10
    3638:	08 95       	ret

0000363a <TM_ShowTags>:
    363a:	60 e0       	ldi	r22, 0x00	; 0
    363c:	70 e0       	ldi	r23, 0x00	; 0
    363e:	cb 01       	movw	r24, r22
    3640:	0e 94 3b 0a 	call	0x1476 <DF_ContinuousReadEnable>
    3644:	10 92 4b 02 	sts	0x024B, r1
    3648:	10 92 d2 02 	sts	0x02D2, r1
    364c:	10 92 d3 02 	sts	0x02D3, r1
    3650:	10 92 d4 02 	sts	0x02D4, r1
    3654:	10 92 d5 02 	sts	0x02D5, r1
    3658:	0e 94 79 1a 	call	0x34f2 <TM_FindNextTag>
    365c:	80 91 4b 02 	lds	r24, 0x024B
    3660:	88 23       	and	r24, r24
    3662:	71 f0       	breq	.+28     	; 0x3680 <TM_ShowTags+0x46>
    3664:	8e b3       	in	r24, 0x1e	; 30
    3666:	88 23       	and	r24, r24
    3668:	e9 f3       	breq	.-6      	; 0x3664 <TM_ShowTags+0x2a>
    366a:	f7 9b       	sbis	0x1e, 7	; 30
    366c:	03 c0       	rjmp	.+6      	; 0x3674 <TM_ShowTags+0x3a>
    366e:	0e 94 79 1a 	call	0x34f2 <TM_FindNextTag>
    3672:	02 c0       	rjmp	.+4      	; 0x3678 <TM_ShowTags+0x3e>
    3674:	f2 99       	sbic	0x1e, 2	; 30
    3676:	03 c0       	rjmp	.+6      	; 0x367e <TM_ShowTags+0x44>
    3678:	0e 94 41 02 	call	0x482 <MAIN_WaitForJoyRelease>
    367c:	f3 cf       	rjmp	.-26     	; 0x3664 <TM_ShowTags+0x2a>
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	0e 94 fc 09 	call	0x13f8 <DF_EnableDataflash>
    3684:	08 95       	ret

00003686 <__vector_2>:
.global PCINT0_vect             ; Pin change 0 (joystick)
.global PCINT1_vect             ; Pin change 1 (joystick)

PCINT0_vect:
  jmp PCINT1_vect
    3686:	0c 94 a6 03 	jmp	0x74c <__vector_3>

0000368a <__vector_10>:

.global TIMER0_COMP_vect             ; Timer 0 compare

TIMER0_COMP_vect:
  push r24
    368a:	8f 93       	push	r24
  ldi r24, (USI_CONTROL_REG_FLAGS | (1<<USITC))
    368c:	8b e5       	ldi	r24, 0x5B	; 91
  sts _SFR_MEM_ADDR(USICR), r24
    368e:	80 93 b8 00 	sts	0x00B8, r24
  pop r24
    3692:	8f 91       	pop	r24
  reti
    3694:	18 95       	reti

00003696 <strcpy_P>:
    3696:	fb 01       	movw	r30, r22
    3698:	dc 01       	movw	r26, r24
    369a:	05 90       	lpm	r0, Z+
    369c:	0d 92       	st	X+, r0
    369e:	00 20       	and	r0, r0
    36a0:	e1 f7       	brne	.-8      	; 0x369a <strcpy_P+0x4>
    36a2:	08 95       	ret

000036a4 <ultoa>:
    36a4:	fa 01       	movw	r30, r20
    36a6:	cf 93       	push	r28
    36a8:	ff 93       	push	r31
    36aa:	ef 93       	push	r30
    36ac:	22 30       	cpi	r18, 0x02	; 2
    36ae:	cc f0       	brlt	.+50     	; 0x36e2 <ultoa+0x3e>
    36b0:	25 32       	cpi	r18, 0x25	; 37
    36b2:	bc f4       	brge	.+46     	; 0x36e2 <ultoa+0x3e>
    36b4:	c2 2f       	mov	r28, r18
    36b6:	2c 2f       	mov	r18, r28
    36b8:	33 27       	eor	r19, r19
    36ba:	44 27       	eor	r20, r20
    36bc:	55 27       	eor	r21, r21
    36be:	ff 93       	push	r31
    36c0:	ef 93       	push	r30
    36c2:	0e 94 a6 1b 	call	0x374c <__udivmodsi4>
    36c6:	ef 91       	pop	r30
    36c8:	ff 91       	pop	r31
    36ca:	60 5d       	subi	r22, 0xD0	; 208
    36cc:	6a 33       	cpi	r22, 0x3A	; 58
    36ce:	0c f0       	brlt	.+2      	; 0x36d2 <ultoa+0x2e>
    36d0:	69 5d       	subi	r22, 0xD9	; 217
    36d2:	61 93       	st	Z+, r22
    36d4:	b9 01       	movw	r22, r18
    36d6:	ca 01       	movw	r24, r20
    36d8:	60 50       	subi	r22, 0x00	; 0
    36da:	70 40       	sbci	r23, 0x00	; 0
    36dc:	80 40       	sbci	r24, 0x00	; 0
    36de:	90 40       	sbci	r25, 0x00	; 0
    36e0:	51 f7       	brne	.-44     	; 0x36b6 <ultoa+0x12>
    36e2:	10 82       	st	Z, r1
    36e4:	8f 91       	pop	r24
    36e6:	9f 91       	pop	r25
    36e8:	cf 91       	pop	r28
    36ea:	0c 94 77 1b 	jmp	0x36ee <strrev>

000036ee <strrev>:
    36ee:	dc 01       	movw	r26, r24
    36f0:	fc 01       	movw	r30, r24
    36f2:	01 90       	ld	r0, Z+
    36f4:	00 20       	and	r0, r0
    36f6:	e9 f7       	brne	.-6      	; 0x36f2 <strrev+0x4>
    36f8:	32 97       	sbiw	r30, 0x02	; 2
    36fa:	ae 17       	cp	r26, r30
    36fc:	bf 07       	cpc	r27, r31
    36fe:	30 f4       	brcc	.+12     	; 0x370c <strrev+0x1e>
    3700:	7c 91       	ld	r23, X
    3702:	60 81       	ld	r22, Z
    3704:	70 83       	st	Z, r23
    3706:	31 97       	sbiw	r30, 0x01	; 1
    3708:	6d 93       	st	X+, r22
    370a:	f7 cf       	rjmp	.-18     	; 0x36fa <strrev+0xc>
    370c:	08 95       	ret

0000370e <__mulsi3>:
    370e:	62 9f       	mul	r22, r18
    3710:	d0 01       	movw	r26, r0
    3712:	73 9f       	mul	r23, r19
    3714:	f0 01       	movw	r30, r0
    3716:	82 9f       	mul	r24, r18
    3718:	e0 0d       	add	r30, r0
    371a:	f1 1d       	adc	r31, r1
    371c:	64 9f       	mul	r22, r20
    371e:	e0 0d       	add	r30, r0
    3720:	f1 1d       	adc	r31, r1
    3722:	92 9f       	mul	r25, r18
    3724:	f0 0d       	add	r31, r0
    3726:	83 9f       	mul	r24, r19
    3728:	f0 0d       	add	r31, r0
    372a:	74 9f       	mul	r23, r20
    372c:	f0 0d       	add	r31, r0
    372e:	65 9f       	mul	r22, r21
    3730:	f0 0d       	add	r31, r0
    3732:	99 27       	eor	r25, r25
    3734:	72 9f       	mul	r23, r18
    3736:	b0 0d       	add	r27, r0
    3738:	e1 1d       	adc	r30, r1
    373a:	f9 1f       	adc	r31, r25
    373c:	63 9f       	mul	r22, r19
    373e:	b0 0d       	add	r27, r0
    3740:	e1 1d       	adc	r30, r1
    3742:	f9 1f       	adc	r31, r25
    3744:	bd 01       	movw	r22, r26
    3746:	cf 01       	movw	r24, r30
    3748:	11 24       	eor	r1, r1
    374a:	08 95       	ret

0000374c <__udivmodsi4>:
    374c:	a1 e2       	ldi	r26, 0x21	; 33
    374e:	1a 2e       	mov	r1, r26
    3750:	aa 1b       	sub	r26, r26
    3752:	bb 1b       	sub	r27, r27
    3754:	fd 01       	movw	r30, r26
    3756:	0d c0       	rjmp	.+26     	; 0x3772 <__udivmodsi4_ep>

00003758 <__udivmodsi4_loop>:
    3758:	aa 1f       	adc	r26, r26
    375a:	bb 1f       	adc	r27, r27
    375c:	ee 1f       	adc	r30, r30
    375e:	ff 1f       	adc	r31, r31
    3760:	a2 17       	cp	r26, r18
    3762:	b3 07       	cpc	r27, r19
    3764:	e4 07       	cpc	r30, r20
    3766:	f5 07       	cpc	r31, r21
    3768:	20 f0       	brcs	.+8      	; 0x3772 <__udivmodsi4_ep>
    376a:	a2 1b       	sub	r26, r18
    376c:	b3 0b       	sbc	r27, r19
    376e:	e4 0b       	sbc	r30, r20
    3770:	f5 0b       	sbc	r31, r21

00003772 <__udivmodsi4_ep>:
    3772:	66 1f       	adc	r22, r22
    3774:	77 1f       	adc	r23, r23
    3776:	88 1f       	adc	r24, r24
    3778:	99 1f       	adc	r25, r25
    377a:	1a 94       	dec	r1
    377c:	69 f7       	brne	.-38     	; 0x3758 <__udivmodsi4_loop>
    377e:	60 95       	com	r22
    3780:	70 95       	com	r23
    3782:	80 95       	com	r24
    3784:	90 95       	com	r25
    3786:	9b 01       	movw	r18, r22
    3788:	ac 01       	movw	r20, r24
    378a:	bd 01       	movw	r22, r26
    378c:	cf 01       	movw	r24, r30
    378e:	08 95       	ret
